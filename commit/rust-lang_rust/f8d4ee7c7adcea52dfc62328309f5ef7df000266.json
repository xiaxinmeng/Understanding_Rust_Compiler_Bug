{"sha": "f8d4ee7c7adcea52dfc62328309f5ef7df000266", "node_id": "C_kwDOAAsO6NoAKGY4ZDRlZTdjN2FkY2VhNTJkZmM2MjMyODMwOWY1ZWY3ZGYwMDAyNjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-30T11:34:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-30T11:34:24Z"}, "message": "Auto merge of #89336 - Aaron1011:variance-struct-diag, r=cjgillot\n\nRefactor variance diagnostics to work with more types\n\nInstead of special-casing mutable pointers/references, we\nnow support general generic types (currently, we handle\n`ty::Ref`, `ty::RawPtr`, and `ty::Adt`)\n\nWhen a `ty::Adt` is involved, we show an additional note\nexplaining which of the type's generic parameters is\ninvariant (e.g. the `T` in `Cell<T>`). Currently, we don't\nexplain *why* a particular generic parameter ends up becoming\ninvariant. In the general case, this could require printing\na long 'backtrace' of types, so doing this would be\nmore suitable for a follow-up PR.\n\nWe still only handle the case where our variance switches\nto `ty::Invariant`.", "tree": {"sha": "eb49cc73ccf46fca54c4860a86be5e241eebe9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb49cc73ccf46fca54c4860a86be5e241eebe9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d4ee7c7adcea52dfc62328309f5ef7df000266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4ee7c7adcea52dfc62328309f5ef7df000266", "html_url": "https://github.com/rust-lang/rust/commit/f8d4ee7c7adcea52dfc62328309f5ef7df000266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4ee7c7adcea52dfc62328309f5ef7df000266/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d8785f0a85d233e00fc84445f1aab451ec9f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d8785f0a85d233e00fc84445f1aab451ec9f4f", "html_url": "https://github.com/rust-lang/rust/commit/65d8785f0a85d233e00fc84445f1aab451ec9f4f"}, {"sha": "b15cb29a4a0625afeac07fbf3ab02b63c51ad317", "url": "https://api.github.com/repos/rust-lang/rust/commits/b15cb29a4a0625afeac07fbf3ab02b63c51ad317", "html_url": "https://github.com/rust-lang/rust/commit/b15cb29a4a0625afeac07fbf3ab02b63c51ad317"}], "stats": {"total": 287, "additions": 247, "deletions": 40}, "files": [{"sha": "df23eaf24bc6da8136d53abf83f04f078ba1d49b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::{\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n };\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n@@ -334,13 +334,43 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         match variance_info {\n             ty::VarianceDiagInfo::None => {}\n-            ty::VarianceDiagInfo::Mut { kind, ty } => {\n-                let kind_name = match kind {\n-                    ty::VarianceDiagMutKind::Ref => \"reference\",\n-                    ty::VarianceDiagMutKind::RawPtr => \"pointer\",\n+            ty::VarianceDiagInfo::Invariant { ty, param_index } => {\n+                let (desc, note) = match ty.kind() {\n+                    ty::RawPtr(ty_mut) => {\n+                        assert_eq!(ty_mut.mutbl, rustc_hir::Mutability::Mut);\n+                        (\n+                            format!(\"a mutable pointer to {}\", ty_mut.ty),\n+                            \"mutable pointers are invariant over their type parameter\".to_string(),\n+                        )\n+                    }\n+                    ty::Ref(_, inner_ty, mutbl) => {\n+                        assert_eq!(*mutbl, rustc_hir::Mutability::Mut);\n+                        (\n+                            format!(\"a mutable reference to {}\", inner_ty),\n+                            \"mutable references are invariant over their type parameter\"\n+                                .to_string(),\n+                        )\n+                    }\n+                    ty::Adt(adt, substs) => {\n+                        let generic_arg = substs[param_index as usize];\n+                        let identity_substs =\n+                            InternalSubsts::identity_for_item(self.infcx.tcx, adt.did);\n+                        let base_ty = self.infcx.tcx.mk_adt(adt, identity_substs);\n+                        let base_generic_arg = identity_substs[param_index as usize];\n+                        let adt_desc = adt.descr();\n+\n+                        let desc = format!(\n+                            \"the type {ty}, which makes the generic argument {generic_arg} invariant\"\n+                        );\n+                        let note = format!(\n+                            \"the {adt_desc} {base_ty} is invariant over the parameter {base_generic_arg}\"\n+                        );\n+                        (desc, note)\n+                    }\n+                    _ => panic!(\"Unexpected type {:?}\", ty),\n                 };\n-                diag.note(&format!(\"requirement occurs because of a mutable {kind_name} to {ty}\",));\n-                diag.note(&format!(\"mutable {kind_name}s are invariant over their type parameter\"));\n+                diag.note(&format!(\"requirement occurs because of {desc}\",));\n+                diag.note(&note);\n                 diag.help(\"see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\");\n             }\n         }"}, {"sha": "da71edbd2d941b3a5f759b56ce512f62cd2f2b2b", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -572,8 +572,9 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n             // (e.g., #41849).\n             relate::relate_substs(self, None, a_subst, b_subst)\n         } else {\n-            let opt_variances = self.tcx().variances_of(item_def_id);\n-            relate::relate_substs(self, Some(&opt_variances), a_subst, b_subst)\n+            let tcx = self.tcx();\n+            let opt_variances = tcx.variances_of(item_def_id);\n+            relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)\n         }\n     }\n "}, {"sha": "78ccfbd5e8cdcd42b1ab2587a564119d553de641", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -77,7 +77,7 @@ pub use self::sty::{\n     GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts, InlineConstSubstsParts, ParamConst,\n     ParamTy, PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig,\n     PolyTraitRef, ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut,\n-    UpvarSubsts, VarianceDiagInfo, VarianceDiagMutKind,\n+    UpvarSubsts, VarianceDiagInfo,\n };\n pub use self::trait_def::TraitDef;\n "}, {"sha": "63ed318cadb890932a851bcec4bb75a7966e3a65", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -6,7 +6,7 @@\n \n use crate::mir::interpret::{get_slice_bytes, ConstValue, GlobalAlloc, Scalar};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n+use crate::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n@@ -59,8 +59,9 @@ pub trait TypeRelation<'tcx>: Sized {\n             item_def_id, a_subst, b_subst\n         );\n \n-        let opt_variances = self.tcx().variances_of(item_def_id);\n-        relate_substs(self, Some(opt_variances), a_subst, b_subst)\n+        let tcx = self.tcx();\n+        let opt_variances = tcx.variances_of(item_def_id);\n+        relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)\n     }\n \n     /// Switch variance for the purpose of relating `a` and `b`.\n@@ -116,7 +117,7 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: ty::TypeAndMut<'tcx>,\n     b: ty::TypeAndMut<'tcx>,\n-    kind: ty::VarianceDiagMutKind,\n+    base_ty: Ty<'tcx>,\n ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {\n     debug!(\"{}.mts({:?}, {:?})\", relation.tag(), a, b);\n     if a.mutbl != b.mutbl {\n@@ -125,7 +126,9 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n         let mutbl = a.mutbl;\n         let (variance, info) = match mutbl {\n             ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),\n-            ast::Mutability::Mut => (ty::Invariant, ty::VarianceDiagInfo::Mut { kind, ty: a.ty }),\n+            ast::Mutability::Mut => {\n+                (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })\n+            }\n         };\n         let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;\n         Ok(ty::TypeAndMut { ty, mutbl })\n@@ -134,15 +137,29 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n \n pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    variances: Option<&[ty::Variance]>,\n+    variances: Option<(DefId, &[ty::Variance])>,\n     a_subst: SubstsRef<'tcx>,\n     b_subst: SubstsRef<'tcx>,\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n     let tcx = relation.tcx();\n+    let mut cached_ty = None;\n \n     let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n-        let variance = variances.map_or(ty::Invariant, |v| v[i]);\n-        relation.relate_with_variance(variance, ty::VarianceDiagInfo::default(), a, b)\n+        let (variance, variance_info) = match variances {\n+            Some((ty_def_id, variances)) => {\n+                let variance = variances[i];\n+                let variance_info = if variance == ty::Invariant {\n+                    let ty =\n+                        cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n+                    ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n+                } else {\n+                    ty::VarianceDiagInfo::default()\n+                };\n+                (variance, variance_info)\n+            }\n+            None => (ty::Invariant, ty::VarianceDiagInfo::default()),\n+        };\n+        relation.relate_with_variance(variance, variance_info, a, b)\n     });\n \n     tcx.mk_substs(params)\n@@ -436,7 +453,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         }\n \n         (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {\n-            let mt = relate_type_and_mut(relation, a_mt, b_mt, ty::VarianceDiagMutKind::RawPtr)?;\n+            let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;\n             Ok(tcx.mk_ptr(mt))\n         }\n \n@@ -449,7 +466,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             )?;\n             let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };\n             let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };\n-            let mt = relate_type_and_mut(relation, a_mt, b_mt, ty::VarianceDiagMutKind::Ref)?;\n+            let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;\n             Ok(tcx.mk_ref(r, mt))\n         }\n "}, {"sha": "c24a1d8eb529f91ea8dda13569e9f6e6790b000b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -2282,36 +2282,26 @@ pub enum VarianceDiagInfo<'tcx> {\n     /// We will not add any additional information to error messages.\n     #[default]\n     None,\n-    /// We switched our variance because a type occurs inside\n-    /// the generic argument of a mutable reference or pointer\n-    /// (`*mut T` or `&mut T`). In either case, our variance\n-    /// will always be `Invariant`.\n-    Mut {\n-        /// Tracks whether we had a mutable pointer or reference,\n-        /// for better error messages\n-        kind: VarianceDiagMutKind,\n-        /// The type parameter of the mutable pointer/reference\n-        /// (the `T` in `&mut T` or `*mut T`).\n+    /// We switched our variance because a generic argument occurs inside\n+    /// the invariant generic argument of another type.\n+    Invariant {\n+        /// The generic type containing the generic parameter\n+        /// that changes the variance (e.g. `*mut T`, `MyStruct<T>`)\n         ty: Ty<'tcx>,\n+        /// The index of the generic parameter being used\n+        /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)\n+        param_index: u32,\n     },\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-pub enum VarianceDiagMutKind {\n-    /// A mutable raw pointer (`*mut T`)\n-    RawPtr,\n-    /// A mutable reference (`&mut T`)\n-    Ref,\n-}\n-\n impl<'tcx> VarianceDiagInfo<'tcx> {\n     /// Mirrors `Variance::xform` - used to 'combine' the existing\n     /// and new `VarianceDiagInfo`s when our variance changes.\n     pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {\n-        // For now, just use the first `VarianceDiagInfo::Mut` that we see\n+        // For now, just use the first `VarianceDiagInfo::Invariant` that we see\n         match self {\n             VarianceDiagInfo::None => other,\n-            VarianceDiagInfo::Mut { .. } => self,\n+            VarianceDiagInfo::Invariant { .. } => self,\n         }\n     }\n }"}, {"sha": "01f800811abbb273d443382d99bb8dcacaa3f503", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     (a, b)\n    |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/project-fn-ret-invariant.rs:56:5\n@@ -23,6 +26,9 @@ LL |     (a, b)\n    |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other\n "}, {"sha": "e925a424c37e1c1d617ccd32edeaaff5a18226c8", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     let a = bar(f, x);\n    |             ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/project-fn-ret-invariant.rs:40:13\n@@ -23,6 +26,9 @@ LL |     let b = bar(f, y);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other\n "}, {"sha": "0457f142e19d5e02f4bcd7b16cadf703aa831d19", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -6,6 +6,10 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n ...\n LL |     bar(foo, x)\n    |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "4b03fe154941347caeda8711da2419fb96a585de", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -7,6 +7,10 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n    |                                     lifetime `'f` defined here\n LL |     ap\n    |     ^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'f`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:8:5\n@@ -17,6 +21,10 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n    |                                     lifetime `'f` defined here\n LL |     ap\n    |     ^^ returning this value requires that `'1` must outlive `'f`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:14:5\n@@ -25,6 +33,10 @@ LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'stati\n    |                                               -- has type `VaListImpl<'1>`\n LL |     ap\n    |     ^^ returning this value requires that `'1` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:18:31\n@@ -44,6 +56,10 @@ LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut\n    |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'1` must outlive `'2`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:22:5\n@@ -54,6 +70,10 @@ LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut\n    |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'2` must outlive `'1`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:28:5\n@@ -106,6 +126,10 @@ LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut\n    |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:35:12\n@@ -116,6 +140,10 @@ LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut\n    |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n+   |\n+   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n+   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 11 previous errors\n "}, {"sha": "b4c54d52e5c753c495d6b041a75e4128b709d64c", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -13,6 +13,9 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n@@ -30,6 +33,9 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "cf563072dff60b5acb683219ab9b99d1dfc3ec31", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -51,6 +51,10 @@ LL | |     });\n    | |      |\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Cell<&'_#10r u32>, which makes the generic argument &'_#10r u32 invariant\n+   = note: the struct Cell<T> is invariant over the parameter T\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "453f6801d7e6b1892dd3df059799d0c6cf7c5158", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -51,6 +51,10 @@ LL | |     });\n    | |      |\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Cell<&'_#11r u32>, which makes the generic argument &'_#11r u32 invariant\n+   = note: the struct Cell<T> is invariant over the parameter T\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "952667d518d58595763010717b154f3f0397c570", "filename": "src/test/ui/nll/where_clauses_in_structs.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -9,6 +9,9 @@ LL |     Foo { x, y };\n    |           ^ this usage requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type Cell<&u32>, which makes the generic argument &u32 invariant\n+   = note: the struct Cell<T> is invariant over the parameter T\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "376534bf573d2e2fca0985feeb1dd190c7b4c306", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -11,6 +11,10 @@ LL |         x.unwrap()\n    |         |\n    |         `x` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "32f3080ea3714787a21a1b02f75d32de2f85091f", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     a.bigger_region(b)\n    |     ^^^^^^^^^^^^^^^^^^ argument requires that `'y` must outlive `'x`\n    |\n    = help: consider adding the following bound: `'y: 'x`\n+   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "62032bcb6092c0ecdfb76cf243a482580e956d05", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -15,6 +15,9 @@ LL |     f.method(b);\n    |     argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "fede5f2d7795f1805aef0a30babb49c52a754267", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -5,6 +5,10 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "8f5f36674535218ad6c3526935b43513eab6f49c", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -5,6 +5,10 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "8079fb0ef0d7e55ecac832843bf4a226cc22859c", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -5,6 +5,10 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "e211f9d1391f977e22ccedd5b137fd20a18d5a67", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -17,6 +17,9 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   lifetime `'a` defined here\n    |\n    = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of the type Indirect2<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Indirect2<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:19:63\n@@ -27,6 +30,9 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   lifetime `'a` defined here\n    |\n    = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type Indirect2<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Indirect2<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'b` and `'a` must be the same: replace one with the other\n "}, {"sha": "8e8ca8e47cce8b15a7f6791aa6baafeeac14cd68", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     let _: Invariant<'short> = c;\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n    |\n    = help: consider adding the following bound: `'short: 'long`\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "f9a3d727f7af9794452bec115009bf297e863473", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -6,6 +6,10 @@ LL | fn use_<'b>(c: Invariant<'b>) {\n ...\n LL |     let _: Invariant<'static> = c;\n    |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "867d9f8238a96feb73d502c18aabbc02d1f75aba", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -5,6 +5,10 @@ LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:7:5\n@@ -13,6 +17,10 @@ LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:10:5\n@@ -21,6 +29,10 @@ LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:13:5\n@@ -29,6 +41,10 @@ LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:17:5\n@@ -37,6 +53,10 @@ LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a\n    |                      ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type RangeMut<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:20:5\n@@ -45,6 +65,10 @@ LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a\n    |                      ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type RangeMut<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:23:5\n@@ -53,6 +77,10 @@ LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a\n    |                         ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type RangeMut<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:26:5\n@@ -61,6 +89,10 @@ LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a\n    |                         ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type RangeMut<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:31:5\n@@ -70,6 +102,10 @@ LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:35:5\n@@ -79,6 +115,10 @@ LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:39:5\n@@ -88,6 +128,10 @@ LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:43:5\n@@ -97,6 +141,10 @@ LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:48:5\n@@ -106,6 +154,10 @@ LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n LL |                          -> VacantEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:52:5\n@@ -115,6 +167,10 @@ LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n LL |                          -> VacantEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:56:5\n@@ -124,6 +180,10 @@ LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n LL |                             -> VacantEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, &(), ()>, which makes the generic argument &() invariant\n+   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:60:5\n@@ -133,6 +193,10 @@ LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n LL |                             -> VacantEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, (), &()>, which makes the generic argument () invariant\n+   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 16 previous errors\n "}, {"sha": "d6a85680141dc39096a15ef5a729030886ed288f", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     let _: Foo<'long> = c;\n    |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n    |\n    = help: consider adding the following bound: `'short: 'long`\n+   = note: requirement occurs because of the type Foo<'_>, which makes the generic argument '_ invariant\n+   = note: the struct Foo<'a> is invariant over the parameter 'a\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "6890cb115c3983ce30d5c3f9fb2174d61c72da4c", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d4ee7c7adcea52dfc62328309f5ef7df000266/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=f8d4ee7c7adcea52dfc62328309f5ef7df000266", "patch": "@@ -10,6 +10,9 @@ LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n+   = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n+   = note: the struct SomeStruct<T> is invariant over the parameter T\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n   --> $DIR/variance-use-invariant-struct-1.rs:19:5\n@@ -23,6 +26,9 @@ LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n+   = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n+   = note: the struct SomeStruct<T> is invariant over the parameter T\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 2 previous errors\n "}]}