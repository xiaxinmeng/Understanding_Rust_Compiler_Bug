{"sha": "3bd2c80382422d5d3b24cd5f304584d2d41e7c80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDJjODAzODI0MjJkNWQzYjI0Y2Q1ZjMwNDU4NGQyZDQxZTdjODA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-12T19:10:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-12T19:10:32Z"}, "message": "Rollup merge of #38067 - GuillaumeGomez:udp-doc, r=frewsxcv,nagisa\n\nAdd more examples to UpdSocket\n\nr? @frewsxcv", "tree": {"sha": "72228d249796163d7075bbf3e857c33406ef6b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72228d249796163d7075bbf3e857c33406ef6b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd2c80382422d5d3b24cd5f304584d2d41e7c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd2c80382422d5d3b24cd5f304584d2d41e7c80", "html_url": "https://github.com/rust-lang/rust/commit/3bd2c80382422d5d3b24cd5f304584d2d41e7c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd2c80382422d5d3b24cd5f304584d2d41e7c80/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c3c9c29797cc79dc1754a412251de346624c88e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3c9c29797cc79dc1754a412251de346624c88e", "html_url": "https://github.com/rust-lang/rust/commit/8c3c9c29797cc79dc1754a412251de346624c88e"}, {"sha": "8b0b2b65a34f5689680daa8a57de06718794b885", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0b2b65a34f5689680daa8a57de06718794b885", "html_url": "https://github.com/rust-lang/rust/commit/8b0b2b65a34f5689680daa8a57de06718794b885"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "f8a5ec0b3791e87ab377330077d7c5fb9d11bad8", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3bd2c80382422d5d3b24cd5f304584d2d41e7c80/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd2c80382422d5d3b24cd5f304584d2d41e7c80/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=3bd2c80382422d5d3b24cd5f304584d2d41e7c80", "patch": "@@ -499,6 +499,19 @@ impl UdpSocket {\n     /// This will retrieve the stored error in the underlying socket, clearing\n     /// the field in the process. This can be useful for checking errors between\n     /// calls.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// match socket.take_error() {\n+    ///     Ok(Some(error)) => println!(\"UdpSocket error: {:?}\", error),\n+    ///     Ok(None) => println!(\"No error\"),\n+    ///     Err(error) => println!(\"UdpSocket.take_error failed: {:?}\", error),\n+    /// }\n+    /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         self.0.take_error()\n@@ -507,15 +520,36 @@ impl UdpSocket {\n     /// Connects this UDP socket to a remote address, allowing the `send` and\n     /// `recv` syscalls to be used to send data and also applies filters to only\n     /// receive data from the specified address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n+    /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {\n         super::each_addr(addr, |addr| self.0.connect(addr))\n     }\n \n     /// Sends data on the socket to the remote address to which it is connected.\n     ///\n-    /// The `connect` method will connect this socket to a remote address. This\n+    /// The [`connect()`] method will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n+    ///\n+    /// [`connect()`]: #method.connect\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n+    /// socket.send(&[0, 1, 2]).expect(\"couldn't send message\");\n+    /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.send(buf)\n@@ -526,6 +560,20 @@ impl UdpSocket {\n     ///\n     /// The `connect` method will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n+    /// let mut buf = [0; 10];\n+    /// match socket.recv(&mut buf) {\n+    ///     Ok(received) => println!(\"received {} bytes\", received),\n+    ///     Err(e) => println!(\"recv function failed: {:?}\", e),\n+    /// }\n+    /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.recv(buf)\n@@ -535,6 +583,15 @@ impl UdpSocket {\n     ///\n     /// On Unix this corresponds to calling fcntl, and on Windows this\n     /// corresponds to calling ioctlsocket.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n+    /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}]}