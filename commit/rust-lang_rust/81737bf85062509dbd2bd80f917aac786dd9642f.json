{"sha": "81737bf85062509dbd2bd80f917aac786dd9642f", "node_id": "C_kwDOAAsO6NoAKDgxNzM3YmY4NTA2MjUwOWRiZDJiZDgwZjkxN2FhYzc4NmRkOTY0MmY", "commit": {"author": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-05-02T09:31:39Z"}, "committer": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-06-28T06:01:50Z"}, "message": "try reading rust-version from Cargo.toml\n\nCargo.toml can contain a field `rust-version`, that acts like a MSRV of\nclippy.toml file: https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field\nThis will try to read that field and use it, if the clippy.toml config\nhas no `msrv` entry", "tree": {"sha": "5055ac712d1dcd25b0f6a1bc3cced046bbc07d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5055ac712d1dcd25b0f6a1bc3cced046bbc07d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81737bf85062509dbd2bd80f917aac786dd9642f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81737bf85062509dbd2bd80f917aac786dd9642f", "html_url": "https://github.com/rust-lang/rust/commit/81737bf85062509dbd2bd80f917aac786dd9642f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81737bf85062509dbd2bd80f917aac786dd9642f/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b762ee330a1f6f366d2316aa999a541663bce1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b762ee330a1f6f366d2316aa999a541663bce1d", "html_url": "https://github.com/rust-lang/rust/commit/6b762ee330a1f6f366d2316aa999a541663bce1d"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "b6ff9bcb76d9e5ffbeb30f3f42bdf55babc0ae98", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/81737bf85062509dbd2bd80f917aac786dd9642f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81737bf85062509dbd2bd80f917aac786dd9642f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=81737bf85062509dbd2bd80f917aac786dd9642f", "patch": "@@ -52,6 +52,7 @@ extern crate clippy_utils;\n use clippy_utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n+use rustc_semver::RustcVersion;\n use rustc_session::Session;\n \n /// Macro used to declare a Clippy lint.\n@@ -450,6 +451,39 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n     store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n }\n \n+fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n+    let cargo_msrv = std::env::var(\"CARGO_PKG_RUST_VERSION\")\n+        .ok()\n+        .and_then(|v| parse_msrv(&v, None, None));\n+    let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n+        parse_msrv(s, None, None).or_else(|| {\n+            sess.err(&format!(\n+                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n+                s\n+            ));\n+            None\n+        })\n+    });\n+\n+    if let Some(cargo_msrv) = cargo_msrv {\n+        if let Some(clippy_msrv) = clippy_msrv {\n+            // if both files have an msrv, let's compare them and emit a warning if they differ\n+            if clippy_msrv != cargo_msrv {\n+                sess.warn(&format!(\n+                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{}` from `clippy.toml`\",\n+                    clippy_msrv\n+                ));\n+            }\n+\n+            Some(clippy_msrv)\n+        } else {\n+            Some(cargo_msrv)\n+        }\n+    } else {\n+        clippy_msrv\n+    }\n+}\n+\n #[doc(hidden)]\n pub fn read_conf(sess: &Session) -> Conf {\n     let file_name = match utils::conf::lookup_conf_file() {\n@@ -465,12 +499,11 @@ pub fn read_conf(sess: &Session) -> Conf {\n     let TryConf { conf, errors } = utils::conf::read(&file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n-        sess.struct_err(&format!(\n+        sess.err(&format!(\n             \"error reading Clippy's configuration file `{}`: {}\",\n             file_name.display(),\n             format_error(error)\n-        ))\n-        .emit();\n+        ));\n     }\n \n     conf\n@@ -577,16 +610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n     store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n-    let msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(&format!(\n-                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n-                s\n-            ));\n-            None\n-        })\n-    });\n-\n+    let msrv = read_msrv(conf, sess);\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;"}]}