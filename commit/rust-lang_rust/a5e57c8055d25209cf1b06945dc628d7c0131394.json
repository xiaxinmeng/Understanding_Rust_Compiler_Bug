{"sha": "a5e57c8055d25209cf1b06945dc628d7c0131394", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTU3YzgwNTVkMjUyMDljZjFiMDY5NDVkYzYyOGQ3YzAxMzEzOTQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T13:54:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T13:54:58Z"}, "message": "Monomorphize `AllocMap` struct", "tree": {"sha": "9c8093b1c385f03fac241ff0ed33c0c3dac754cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8093b1c385f03fac241ff0ed33c0c3dac754cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e57c8055d25209cf1b06945dc628d7c0131394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e57c8055d25209cf1b06945dc628d7c0131394", "html_url": "https://github.com/rust-lang/rust/commit/a5e57c8055d25209cf1b06945dc628d7c0131394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e57c8055d25209cf1b06945dc628d7c0131394/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7139e1c3ab0f6b912955f27a0f7df13c582ce5ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7139e1c3ab0f6b912955f27a0f7df13c582ce5ec", "html_url": "https://github.com/rust-lang/rust/commit/7139e1c3ab0f6b912955f27a0f7df13c582ce5ec"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "6ac80d72b1bc4b9ca4f81ee4509e8d3f88a06995", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5e57c8055d25209cf1b06945dc628d7c0131394/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e57c8055d25209cf1b06945dc628d7c0131394/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a5e57c8055d25209cf1b06945dc628d7c0131394", "patch": "@@ -41,7 +41,6 @@ use ty::{self, TyCtxt, Instance};\n use ty::layout::{self, Size};\n use middle::region;\n use std::io;\n-use std::hash::Hash;\n use rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock as Mutex, HashMapExt};\n@@ -302,19 +301,19 @@ pub enum AllocType<'tcx, M> {\n     Memory(M)\n }\n \n-pub struct AllocMap<'tcx, M> {\n+pub struct AllocMap<'tcx> {\n     /// Lets you know what an AllocId refers to\n-    id_to_type: FxHashMap<AllocId, AllocType<'tcx, M>>,\n+    id_to_type: FxHashMap<AllocId, AllocType<'tcx, &'tcx Allocation>>,\n \n     /// Used to ensure that functions and statics only get one associated AllocId\n-    type_interner: FxHashMap<AllocType<'tcx, M>, AllocId>,\n+    type_interner: FxHashMap<AllocType<'tcx, &'tcx Allocation>, AllocId>,\n \n     /// The AllocId to assign to the next requested id.\n     /// Always incremented, never gets smaller.\n     next_id: AllocId,\n }\n \n-impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n+impl<'tcx> AllocMap<'tcx> {\n     pub fn new() -> Self {\n         AllocMap {\n             id_to_type: Default::default(),\n@@ -337,7 +336,7 @@ impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n         next\n     }\n \n-    fn intern(&mut self, alloc_type: AllocType<'tcx, M>) -> AllocId {\n+    fn intern(&mut self, alloc_type: AllocType<'tcx, &'tcx Allocation>) -> AllocId {\n         if let Some(&alloc_id) = self.type_interner.get(&alloc_type) {\n             return alloc_id;\n         }\n@@ -355,11 +354,11 @@ impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n         self.intern(AllocType::Function(instance))\n     }\n \n-    pub fn get(&self, id: AllocId) -> Option<AllocType<'tcx, M>> {\n+    pub fn get(&self, id: AllocId) -> Option<AllocType<'tcx, &'tcx Allocation>> {\n         self.id_to_type.get(&id).cloned()\n     }\n \n-    pub fn unwrap_memory(&self, id: AllocId) -> M {\n+    pub fn unwrap_memory(&self, id: AllocId) -> &'tcx Allocation {\n         match self.get(id) {\n             Some(AllocType::Memory(mem)) => mem,\n             _ => bug!(\"expected allocation id {} to point to memory\", id),\n@@ -370,19 +369,19 @@ impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n         self.intern(AllocType::Static(static_id))\n     }\n \n-    pub fn allocate(&mut self, mem: M) -> AllocId {\n+    pub fn allocate(&mut self, mem: &'tcx Allocation) -> AllocId {\n         let id = self.reserve();\n         self.set_id_memory(id, mem);\n         id\n     }\n \n-    pub fn set_id_memory(&mut self, id: AllocId, mem: M) {\n+    pub fn set_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n         if let Some(old) = self.id_to_type.insert(id, AllocType::Memory(mem)) {\n             bug!(\"tried to set allocation id {}, but it was already existing as {:#?}\", id, old);\n         }\n     }\n \n-    pub fn set_id_same_memory(&mut self, id: AllocId, mem: M) {\n+    pub fn set_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n        self.id_to_type.insert_same(id, AllocType::Memory(mem));\n     }\n }"}, {"sha": "d2d3a805f0a525381e850e1d4ef0b94988deef4e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5e57c8055d25209cf1b06945dc628d7c0131394/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e57c8055d25209cf1b06945dc628d7c0131394/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a5e57c8055d25209cf1b06945dc628d7c0131394", "patch": "@@ -946,7 +946,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Stores the value of constants (and deduplicates the actual memory)\n     allocation_interner: Lock<FxHashMap<&'tcx Allocation, ()>>,\n \n-    pub alloc_map: Lock<interpret::AllocMap<'tcx, &'tcx Allocation>>,\n+    pub alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n     layout_interner: Lock<FxHashMap<&'tcx LayoutDetails, ()>>,\n "}]}