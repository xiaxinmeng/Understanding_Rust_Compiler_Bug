{"sha": "5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNWM5OGJkOGEyN2I1MzEzZDBiMWE1ODMwMDc2MTM5YzU2MmI2YjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T16:39:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T17:15:30Z"}, "message": "add (unchecked) indexing methods to raw pointers and NonNull", "tree": {"sha": "2c3bbeb39712a2aa7d9ebd2c47ca74133237f1bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3bbeb39712a2aa7d9ebd2c47ca74133237f1bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "html_url": "https://github.com/rust-lang/rust/commit/5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90580c7b0e51050c892613664db79493df7a2af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/90580c7b0e51050c892613664db79493df7a2af5", "html_url": "https://github.com/rust-lang/rust/commit/90580c7b0e51050c892613664db79493df7a2af5"}], "stats": {"total": 118, "additions": 103, "deletions": 15}, "files": [{"sha": "1f906650dfa56e322a12be245609bcfd5a1fddab", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "patch": "@@ -93,7 +93,6 @@\n #![feature(const_slice_ptr_len)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n-#![feature(const_slice_ptr_ptr)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n@@ -149,6 +148,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n+#![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(unsafe_block_in_unsafe_fn)]\n #![deny(unsafe_op_in_unsafe_fn)]"}, {"sha": "22c741d4651a5fcc2580a13d45580a12266a2d8c", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "patch": "@@ -2,6 +2,7 @@ use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n use crate::mem;\n+use crate::slice::SliceIndex;\n \n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n@@ -834,19 +835,47 @@ impl<T> *const [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(slice_ptr_ptr)]\n-    ///\n+    /// #![feature(slice_ptr_get)]\n     /// use std::ptr;\n     ///\n     /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\n     /// assert_eq!(slice.as_ptr(), 0 as *const i8);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n     pub const fn as_ptr(self) -> *const T {\n         self as *const T\n     }\n+\n+    /// Returns a raw pointer to an element or subslice, without doing bounds\n+    /// checking.\n+    ///\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// is *[undefined behavior]* even if the resulting pointer is not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_get)]\n+    ///\n+    /// let x = &[1, 2, 4] as *const [i32];\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(x.get_unchecked(1), x.as_ptr().add(1));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n+    where\n+        I: SliceIndex<[T]>,\n+    {\n+        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        unsafe { index.get_unchecked(self) }\n+    }\n }\n \n // Equality for pointers"}, {"sha": "56bade706942a3ade6774154a54cf39e857fced5", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "patch": "@@ -1,6 +1,7 @@\n use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n+use crate::slice::SliceIndex;\n \n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n@@ -1014,7 +1015,6 @@ impl<T> *mut [T] {\n     ///\n     /// ```rust\n     /// #![feature(slice_ptr_len)]\n-    ///\n     /// use std::ptr;\n     ///\n     /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n@@ -1036,19 +1036,47 @@ impl<T> *mut [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(slice_ptr_ptr)]\n-    ///\n+    /// #![feature(slice_ptr_get)]\n     /// use std::ptr;\n     ///\n     /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n     /// assert_eq!(slice.as_mut_ptr(), 0 as *mut i8);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n     pub const fn as_mut_ptr(self) -> *mut T {\n         self as *mut T\n     }\n+\n+    /// Returns a raw pointer to an element or subslice, without doing bounds\n+    /// checking.\n+    ///\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// is *[undefined behavior]* even if the resulting pointer is not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_get)]\n+    ///\n+    /// let x = &mut [1, 2, 4] as *mut [i32];\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(x.get_unchecked_mut(1), x.as_mut_ptr().add(1));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n+    where\n+        I: SliceIndex<[T]>,\n+    {\n+        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        unsafe { index.get_unchecked_mut(self) }\n+    }\n }\n \n // Equality for pointers"}, {"sha": "f59da631b46aba889f82dfcd54b4294e8e6d6675", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5c98bd8a27b5313d0b1a5830076139c562b6b6/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=5f5c98bd8a27b5313d0b1a5830076139c562b6b6", "patch": "@@ -6,6 +6,7 @@ use crate::marker::Unsize;\n use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n use crate::ptr::Unique;\n+use crate::slice::SliceIndex;\n \n /// `*mut T` but non-zero and covariant.\n ///\n@@ -192,7 +193,6 @@ impl<T> NonNull<[T]> {\n     ///\n     /// ```rust\n     /// #![feature(slice_ptr_len, nonnull_slice_from_raw_parts)]\n-    ///\n     /// use std::ptr::NonNull;\n     ///\n     /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n@@ -210,20 +210,51 @@ impl<T> NonNull<[T]> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(slice_ptr_ptr, nonnull_slice_from_raw_parts)]\n-    ///\n+    /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]\n     /// use std::ptr::NonNull;\n     ///\n     /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n     /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n     pub const fn as_non_null_ptr(self) -> NonNull<T> {\n         // SAFETY: We know `self` is non-null.\n         unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }\n     }\n+\n+    /// Returns a raw pointer to an element or subslice, without doing bounds\n+    /// checking.\n+    ///\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// is *[undefined behavior]* even if the resulting pointer is not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let x = &mut [1, 2, 4];\n+    /// let x = NonNull::slice_from_raw_parts(NonNull::new(x.as_mut_ptr()).unwrap(), x.len());\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(x.get_unchecked_mut(1).as_ptr(), x.as_non_null_ptr().as_ptr().add(1));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n+    where\n+        I: SliceIndex<[T]>,\n+    {\n+        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // As a consequence, the resulting pointer cannot be NULL.\n+        unsafe { NonNull::new_unchecked(self.as_ptr().get_unchecked_mut(index)) }\n+    }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]"}]}