{"sha": "4f65bec39ab7cceea9d31e7245479037e9581219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjViZWMzOWFiN2NjZWVhOWQzMWU3MjQ1NDc5MDM3ZTk1ODEyMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T15:28:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T15:28:39Z"}, "message": "Auto merge of #5084 - JohnTitor:clean-up-span-lint, r=flip1995\n\nClean up `span_lint` in `methods/mod.rs`\n\nUses `span_help_and_lint` instead of `span_lint` and `span_lint_and_sugg` instead of `span_lint_and_then`.\n\nchangelog: none", "tree": {"sha": "5f5ba7bbbca8c51b5c0db2df1351df57e41503fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5ba7bbbca8c51b5c0db2df1351df57e41503fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f65bec39ab7cceea9d31e7245479037e9581219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f65bec39ab7cceea9d31e7245479037e9581219", "html_url": "https://github.com/rust-lang/rust/commit/4f65bec39ab7cceea9d31e7245479037e9581219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f65bec39ab7cceea9d31e7245479037e9581219/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa046d2e7f14cda09d14230cc8c772e1565e0757", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa046d2e7f14cda09d14230cc8c772e1565e0757", "html_url": "https://github.com/rust-lang/rust/commit/fa046d2e7f14cda09d14230cc8c772e1565e0757"}, {"sha": "4b133f2867b007768d3d12c8efcf336e576e000a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b133f2867b007768d3d12c8efcf336e576e000a", "html_url": "https://github.com/rust-lang/rust/commit/4b133f2867b007768d3d12c8efcf336e576e000a"}], "stats": {"total": 199, "additions": 121, "deletions": 78}, "files": [{"sha": "eafc2c618216b71ef3a1d811ababa5724d99c337", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -2133,14 +2133,12 @@ fn lint_iter_nth<'a, 'tcx>(\n         return; // caller is not a type that we want to lint\n     };\n \n-    span_lint(\n+    span_help_and_lint(\n         cx,\n         ITER_NTH,\n         expr.span,\n-        &format!(\n-            \"called `.iter{0}().nth()` on a {1}. Calling `.get{0}()` is both faster and more readable\",\n-            mut_str, caller_type\n-        ),\n+        &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n     );\n }\n \n@@ -2244,11 +2242,12 @@ fn lint_get_unwrap<'a, 'tcx>(\n fn lint_iter_skip_next(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n     // lint if caller of skip is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        span_lint(\n+        span_help_and_lint(\n             cx,\n             ITER_SKIP_NEXT,\n             expr.span,\n-            \"called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\",\n+            \"called `skip(x).next()` on an iterator\",\n+            \"this is more succinctly expressed by calling `nth(x)`\",\n         );\n     }\n }\n@@ -2304,15 +2303,15 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n     };\n \n     if let Some((lint, kind, none_value)) = mess {\n-        span_lint(\n+        span_help_and_lint(\n             cx,\n             lint,\n             expr.span,\n+            &format!(\"used `unwrap()` on `{}` value\", kind,),\n             &format!(\n-                \"used `unwrap()` on `{}` value. If you don't want to handle the `{}` case gracefully, consider \\\n-                 using `expect()` to provide a better panic \\\n-                 message\",\n-                kind, none_value\n+                \"if you don't want to handle the `{}` case gracefully, consider \\\n+                using `expect()` to provide a better panic message\",\n+                none_value,\n             ),\n         );\n     }\n@@ -2331,14 +2330,12 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n     };\n \n     if let Some((lint, kind, none_value)) = mess {\n-        span_lint(\n+        span_help_and_lint(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\n-                \"used `expect()` on `{}` value. If this value is an `{}` it will panic\",\n-                kind, none_value\n-            ),\n+            &format!(\"used `expect()` on `{}` value\", kind,),\n+            &format!(\"if this value is an `{}`, it will panic\", none_value,),\n         );\n     }\n }\n@@ -2353,11 +2350,12 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n         if has_debug_impl(error_type, cx);\n \n         then {\n-            span_lint(\n+            span_help_and_lint(\n                 cx,\n                 OK_EXPECT,\n                 expr.span,\n-                \"called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\",\n+                \"called `ok().expect()` on a `Result` value\",\n+                \"you can call `expect()` directly on the `Result`\",\n             );\n         }\n     }\n@@ -2372,14 +2370,15 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n         let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n         let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n-        span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n-            db.span_suggestion(\n-                expr.span,\n-                \"try using `flat_map` instead\",\n-                hint,\n-                Applicability::MachineApplicable,\n-            );\n-        });\n+        span_lint_and_sugg(\n+            cx,\n+            MAP_FLATTEN,\n+            expr.span,\n+            msg,\n+            \"try using `flat_map` instead\",\n+            hint,\n+            Applicability::MachineApplicable,\n+        );\n     }\n }\n \n@@ -2474,14 +2473,15 @@ fn lint_map_or_none<'a, 'tcx>(\n             let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n-            span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n-                db.span_suggestion(\n-                    expr.span,\n-                    \"try using `and_then` instead\",\n-                    hint,\n-                    Applicability::MachineApplicable, // snippet\n-                );\n-            });\n+            span_lint_and_sugg(\n+                cx,\n+                OPTION_MAP_OR_NONE,\n+                expr.span,\n+                msg,\n+                \"try using `and_then` instead\",\n+                hint,\n+                Applicability::MachineApplicable,\n+            );\n         }\n     }\n }\n@@ -2607,9 +2607,9 @@ fn lint_filter_map<'a, 'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).map(q)` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.filter_map(..)` instead.\";\n-        span_lint(cx, FILTER_MAP, expr.span, msg);\n+        let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n+        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2647,9 +2647,9 @@ fn lint_find_map<'a, 'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(p).map(q)` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.find_map(..)` instead.\";\n-        span_lint(cx, FIND_MAP, expr.span, msg);\n+        let msg = \"called `find(p).map(q)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n+        span_help_and_lint(cx, FIND_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2662,9 +2662,9 @@ fn lint_filter_map_map<'a, 'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).map(q)` on an `Iterator`. \\\n-                   This is more succinctly expressed by only calling `.filter_map(..)` instead.\";\n-        span_lint(cx, FILTER_MAP, expr.span, msg);\n+        let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n+        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2677,10 +2677,10 @@ fn lint_filter_flat_map<'a, 'tcx>(\n ) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.flat_map(..)` \\\n-                   and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_MAP, expr.span, msg);\n+        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n+            and filtering by returning `iter::empty()`\";\n+        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2693,10 +2693,10 @@ fn lint_filter_map_flat_map<'a, 'tcx>(\n ) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.flat_map(..)` \\\n-                   and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_MAP, expr.span, msg);\n+        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n+            and filtering by returning `iter::empty()`\";\n+        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n "}, {"sha": "adf9f4f192191d652593cdf04dad5eac2de4ca51", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,18 +1,20 @@\n-error: used `expect()` on `an Option` value. If this value is an `None` it will panic\n+error: used `expect()` on `an Option` value\n   --> $DIR/expect.rs:5:13\n    |\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+   = help: if this value is an `None`, it will panic\n \n-error: used `expect()` on `a Result` value. If this value is an `Err` it will panic\n+error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13\n    |\n LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-expect-used` implied by `-D warnings`\n+   = help: if this value is an `Err`, it will panic\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84a957a374c6b7c1352e8c06f36831ef514de86d", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,12 +1,13 @@\n-error: called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` instead.\n+error: called `filter(p).map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:5:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n-error: called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+error: called `filter(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -15,8 +16,10 @@ LL | |         .into_iter()\n LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+error: called `filter_map(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -25,8 +28,10 @@ LL | |         .into_iter()\n LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly expressed by only calling `.filter_map(..)` instead.\n+error: called `filter_map(p).map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -35,6 +40,8 @@ LL | |         .into_iter()\n LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .map(|x| x.checked_mul(2))\n    | |__________________________________^\n+   |\n+   = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n error: aborting due to 4 previous errors\n "}, {"sha": "92f40fe6f1fb23b8a6e2b6681019c573ef5c2e2a", "filename": "tests/ui/find_map.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,12 +1,13 @@\n-error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `find(p).map(q)` on an `Iterator`\n   --> $DIR/find_map.rs:20:26\n    |\n LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::find-map` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n-error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `find(p).map(q)` on an `Iterator`\n   --> $DIR/find_map.rs:22:29\n    |\n LL |       let _: Option<Flavor> = desserts_of_the_week\n@@ -18,6 +19,8 @@ LL | |             Dessert::Cake(_) => true,\n LL | |             _ => unreachable!(),\n LL | |         });\n    | |__________^\n+   |\n+   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d00b2fb672bb6ea9abb6160bcb09e331b32c8074", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,46 +1,59 @@\n-error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a Vec\n   --> $DIR/iter_nth.rs:33:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n+   = help: calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:34:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:35:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:36:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a Vec\n   --> $DIR/iter_nth.rs:41:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get_mut()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a slice\n   --> $DIR/iter_nth.rs:44:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get_mut()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:47:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: calling `.get_mut()` is both faster and more readable\n \n error: aborting due to 7 previous errors\n "}, {"sha": "5709f3355298bb396337aa7a259dc6040c3d5da4", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,28 +1,35 @@\n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:13:13\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:14:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:15:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:16:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: this is more succinctly expressed by calling `nth(x)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b02b28e7f68c8a5e8bb1def1e2dd8a2c9722a8e3", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,34 +1,43 @@\n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:14:5\n    |\n LL |     res.ok().expect(\"disaster!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::ok-expect` implied by `-D warnings`\n+   = help: you can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:20:5\n    |\n LL |     res3.ok().expect(\"whoof\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:22:5\n    |\n LL |     res4.ok().expect(\"argh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:24:5\n    |\n LL |     res5.ok().expect(\"oops\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:26:5\n    |\n LL |     res6.ok().expect(\"meh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you can call `expect()` directly on the `Result`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b90ce68fa97ac76c064465d579c2b85e315cb9af", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f65bec39ab7cceea9d31e7245479037e9581219/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=4f65bec39ab7cceea9d31e7245479037e9581219", "patch": "@@ -1,18 +1,20 @@\n-error: used `unwrap()` on `an Option` value. If you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+error: used `unwrap()` on `an Option` value\n   --> $DIR/unwrap.rs:5:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n-error: used `unwrap()` on `a Result` value. If you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n+error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap.rs:10:13\n    |\n LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n+   = help: if you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n \n error: aborting due to 2 previous errors\n "}]}