{"sha": "dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDlkOTdmYjJmNGM3ZjkzOGE3NmI0YmE3YjBiNDgzZjk2Y2ViNWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-02T13:13:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-02T13:13:01Z"}, "message": "Merge #6649\n\n6649: Accept more than just the standard rust literal suffixes in *Number::suffix r=matklad a=Veykril\n\nI am not entirely sure whether to keep or remove the `SUFFIXES` but I figured we can always bring them back once they are needed.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1542f7e75a912f40a4dcc1b1bbca3e62f8ad3cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1542f7e75a912f40a4dcc1b1bbca3e62f8ad3cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfx5LdCRBK7hj4Ov3rIwAAdHIIAEP/vouztIEig4O5nXkQDEOR\nYFjhijlfVSpZncu0pMFmDtFS6dGF0Vuzm35GFMqX3Jyc4oO9sy/UblUKNOiY1KFE\nHlspN0aT+XxSbQtSE/OxssoC+qfEvTbVLAMU1vTD7EwKBBI8naFSkl7zKTGhckej\nAmnTMzi67wz+If8ILbFJTQZ0PBY0JtkgDHTQ2KQZ3YSD4E3YiviricrCpMIRp//E\nvejg2JmIwvcudGrZ0HuRNAkYAuaSOO7ezVdXdXjdlJA2Xuf/rUyG6w9Ej4F/NJtW\nCQtjM66xQm7C64yOGjQGkXNUOFnHyAdZbZVBYNOQt/Zt302MB6H9ZliDrR4OysE=\n=UxKB\n-----END PGP SIGNATURE-----\n", "payload": "tree 1542f7e75a912f40a4dcc1b1bbca3e62f8ad3cfc\nparent 1db60512b63165e0a4b6c525d26020830f5057bb\nparent 49fbfffb48a5926cd4a01ca6b23f656a84fec830\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606914781 +0000\ncommitter GitHub <noreply@github.com> 1606914781 +0000\n\nMerge #6649\n\n6649: Accept more than just the standard rust literal suffixes in *Number::suffix r=matklad a=Veykril\n\nI am not entirely sure whether to keep or remove the `SUFFIXES` but I figured we can always bring them back once they are needed.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "html_url": "https://github.com/rust-lang/rust/commit/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db60512b63165e0a4b6c525d26020830f5057bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db60512b63165e0a4b6c525d26020830f5057bb", "html_url": "https://github.com/rust-lang/rust/commit/1db60512b63165e0a4b6c525d26020830f5057bb"}, {"sha": "49fbfffb48a5926cd4a01ca6b23f656a84fec830", "url": "https://api.github.com/repos/rust-lang/rust/commits/49fbfffb48a5926cd4a01ca6b23f656a84fec830", "html_url": "https://github.com/rust-lang/rust/commit/49fbfffb48a5926cd4a01ca6b23f656a84fec830"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "fa40e64e8e9bfae1652dd7a7ed973c2b4acd189b", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "patch": "@@ -543,11 +543,6 @@ impl HasFormatSpecifier for ast::String {\n }\n \n impl ast::IntNumber {\n-    const SUFFIXES: &'static [&'static str] = &[\n-        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", // Unsigned.\n-        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", // Signed.\n-    ];\n-\n     pub fn radix(&self) -> Radix {\n         match self.text().get(..2).unwrap_or_default() {\n             \"0b\" => Radix::Binary,\n@@ -580,29 +575,30 @@ impl ast::IntNumber {\n \n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n-        // FIXME: don't check a fixed set of suffixes, `1_0_1_l_o_l` is valid\n-        // syntax, suffix is `l_o_l`.\n-        ast::IntNumber::SUFFIXES.iter().chain(ast::FloatNumber::SUFFIXES.iter()).find_map(\n-            |suffix| {\n-                if text.ends_with(suffix) {\n-                    return Some(&text[text.len() - suffix.len()..]);\n-                }\n-                None\n-            },\n-        )\n+        let radix = self.radix();\n+        let mut indices = text.char_indices();\n+        if radix != Radix::Decimal {\n+            indices.next()?;\n+            indices.next()?;\n+        }\n+        let is_suffix_start: fn(&(usize, char)) -> bool = match radix {\n+            Radix::Hexadecimal => |(_, c)| matches!(c, 'g'..='z' | 'G'..='Z'),\n+            _ => |(_, c)| c.is_ascii_alphabetic(),\n+        };\n+        let (suffix_start, _) = indices.find(is_suffix_start)?;\n+        Some(&text[suffix_start..])\n     }\n }\n \n impl ast::FloatNumber {\n-    const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n-        ast::FloatNumber::SUFFIXES.iter().find_map(|suffix| {\n-            if text.ends_with(suffix) {\n-                return Some(&text[text.len() - suffix.len()..]);\n-            }\n-            None\n-        })\n+        let mut indices = text.char_indices();\n+        let (mut suffix_start, c) = indices.by_ref().find(|(_, c)| c.is_ascii_alphabetic())?;\n+        if c == 'e' || c == 'E' {\n+            suffix_start = indices.find(|(_, c)| c.is_ascii_alphabetic())?.0;\n+        }\n+        Some(&text[suffix_start..])\n     }\n }\n \n@@ -625,3 +621,40 @@ impl Radix {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::ast::{make, FloatNumber, IntNumber};\n+\n+    fn check_float_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n+        assert_eq!(FloatNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+    }\n+\n+    fn check_int_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n+        assert_eq!(IntNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+    }\n+\n+    #[test]\n+    fn test_float_number_suffix() {\n+        check_float_suffix(\"123.0\", None);\n+        check_float_suffix(\"123f32\", \"f32\");\n+        check_float_suffix(\"123.0e\", None);\n+        check_float_suffix(\"123.0e4\", None);\n+        check_float_suffix(\"123.0ef32\", \"f32\");\n+        check_float_suffix(\"123.0E4f32\", \"f32\");\n+        check_float_suffix(\"1_2_3.0_f32\", \"f32\");\n+    }\n+\n+    #[test]\n+    fn test_int_number_suffix() {\n+        check_int_suffix(\"123\", None);\n+        check_int_suffix(\"123i32\", \"i32\");\n+        check_int_suffix(\"1_0_1_l_o_l\", \"l_o_l\");\n+        check_int_suffix(\"0b11\", None);\n+        check_int_suffix(\"0o11\", None);\n+        check_int_suffix(\"0xff\", None);\n+        check_int_suffix(\"0b11u32\", \"u32\");\n+        check_int_suffix(\"0o11u32\", \"u32\");\n+        check_int_suffix(\"0xffu32\", \"u32\");\n+    }\n+}"}]}