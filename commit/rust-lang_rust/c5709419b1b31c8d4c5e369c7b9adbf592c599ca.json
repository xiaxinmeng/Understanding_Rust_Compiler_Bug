{"sha": "c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "node_id": "C_kwDOAAsO6NoAKGM1NzA5NDE5YjFiMzFjOGQ0YzVlMzY5YzdiOWFkYmY1OTJjNTk5Y2E", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-02-12T10:30:03Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-02-17T17:03:13Z"}, "message": "Add test for drop-before-await FP", "tree": {"sha": "29a02dda427fd6190293e882312b2a177ede2d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a02dda427fd6190293e882312b2a177ede2d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmIOf9UACgkQHKDfKvWd\naKWSBA/+PQqi/Mb2VkNvMnmYfMzPzGiXL1ooEmt4r6rV4fFSWV5rH3bWYZO5A1xo\nKoQlt6KljVS6Bn2z5Xxq/Vu2uVcmyiBCrZ+H++QFMPM4adaEfTy41QR8FV0MAbnp\n/9f4cGcRqKis/BkbkM9DbIVPykHLeBeFBoueB3mE6TphO7xAOiqNknSCDMNd0Kyg\nkk87tfMP0+i7ALy5koAVP2dLee79Q4/wK/S3nf9p1Hvd6qOz5Ua+5Pd6C5kKoury\nFBj4InYN3whRgzyINgPu6GGQYVTaYbANoBGlxlxcokF9MbVqb5AOwRfYlEByr9WJ\nLImoxjPdzwST32o8PKQ/txeAM3y+C7nUNcN6S68Zl0US0B0gnncs6lPXpotccYuc\nzQzcoN/p+DFvHqKCYBZi/OzB/95ewgD+c1YVgxzzXLH3YNpQoPxD8f1Di9Jxoy2G\ngxlMFyPzc9Tim9NzrYBZHfar0pO5C0xOWSGUpzz8KAP48jqIjHWS7IWF6Az9oSJ7\nw0puhB32gRZFIE2nJWkt2Z2TUnM6DPk8QaHNdhuXPlfh9BdYmTpjbrDT25gvNJiM\nvho91L2d9wxBb7lJWUe3WvcySG3lvfQaLs7in8DLKQOnpTQGDmrhdHdDAlKQn2vo\n83ZiOgy8zfd1A7MQcREdnzptlk4C9wkCeni8qo7O1nGmX8uksfo=\n=V1C3\n-----END PGP SIGNATURE-----", "payload": "tree 29a02dda427fd6190293e882312b2a177ede2d4f\nparent c4944fb60d102a4a4e0cb5f3f86379bea2338ed0\nauthor flip1995 <philipp.krones@embecosm.com> 1644661803 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1645117393 +0100\n\nAdd test for drop-before-await FP\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "html_url": "https://github.com/rust-lang/rust/commit/c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5709419b1b31c8d4c5e369c7b9adbf592c599ca/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4944fb60d102a4a4e0cb5f3f86379bea2338ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4944fb60d102a4a4e0cb5f3f86379bea2338ed0", "html_url": "https://github.com/rust-lang/rust/commit/c4944fb60d102a4a4e0cb5f3f86379bea2338ed0"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "57e5b55045b95de03495fa9a9ca22db68a6657b1", "filename": "tests/ui/await_holding_lock.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5709419b1b31c8d4c5e369c7b9adbf592c599ca/tests%2Fui%2Fawait_holding_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5709419b1b31c8d4c5e369c7b9adbf592c599ca/tests%2Fui%2Fawait_holding_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.rs?ref=c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "patch": "@@ -2,6 +2,7 @@\n \n // When adding or modifying a test, please do the same for parking_lot::Mutex.\n mod std_mutex {\n+    use super::baz;\n     use std::sync::{Mutex, RwLock};\n \n     pub async fn bad(x: &Mutex<u32>) -> u32 {\n@@ -43,10 +44,6 @@ mod std_mutex {\n         47\n     }\n \n-    pub async fn baz() -> u32 {\n-        42\n-    }\n-\n     pub async fn also_bad(x: &Mutex<u32>) -> u32 {\n         let first = baz().await;\n \n@@ -83,6 +80,7 @@ mod std_mutex {\n \n // When adding or modifying a test, please do the same for std::Mutex.\n mod parking_lot_mutex {\n+    use super::baz;\n     use parking_lot::{Mutex, RwLock};\n \n     pub async fn bad(x: &Mutex<u32>) -> u32 {\n@@ -124,10 +122,6 @@ mod parking_lot_mutex {\n         47\n     }\n \n-    pub async fn baz() -> u32 {\n-        42\n-    }\n-\n     pub async fn also_bad(x: &Mutex<u32>) -> u32 {\n         let first = baz().await;\n \n@@ -162,6 +156,26 @@ mod parking_lot_mutex {\n     }\n }\n \n+async fn baz() -> u32 {\n+    42\n+}\n+\n+async fn no_await(x: std::sync::Mutex<u32>) {\n+    let mut guard = x.lock().unwrap();\n+    *guard += 1;\n+}\n+\n+// FIXME: FP, because the `MutexGuard` is dropped before crossing the await point. This is\n+// something the needs to be fixed in rustc. There's already drop-tracking, but this is currently\n+// disabled, see rust-lang/rust#93751. This case isn't picked up by drop-tracking though. If the\n+// `*guard += 1` is removed it is picked up.\n+async fn dropped_before_await(x: std::sync::Mutex<u32>) {\n+    let mut guard = x.lock().unwrap();\n+    *guard += 1;\n+    drop(guard);\n+    baz().await;\n+}\n+\n fn main() {\n     let m = std::sync::Mutex::new(100);\n     std_mutex::good(&m);"}, {"sha": "976da8d924247897317bed03461c579077a855cd", "filename": "tests/ui/await_holding_lock.stderr", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c5709419b1b31c8d4c5e369c7b9adbf592c599ca/tests%2Fui%2Fawait_holding_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5709419b1b31c8d4c5e369c7b9adbf592c599ca/tests%2Fui%2Fawait_holding_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.stderr?ref=c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "patch": "@@ -1,58 +1,58 @@\n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:8:13\n+  --> $DIR/await_holding_lock.rs:9:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n    = note: `-D clippy::await-holding-lock` implied by `-D warnings`\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:8:9\n+  --> $DIR/await_holding_lock.rs:9:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:23:13\n+  --> $DIR/await_holding_lock.rs:24:13\n    |\n LL |         let guard = x.read().unwrap();\n    |             ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:23:9\n+  --> $DIR/await_holding_lock.rs:24:9\n    |\n LL | /         let guard = x.read().unwrap();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:28:13\n+  --> $DIR/await_holding_lock.rs:29:13\n    |\n LL |         let mut guard = x.write().unwrap();\n    |             ^^^^^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:28:9\n+  --> $DIR/await_holding_lock.rs:29:9\n    |\n LL | /         let mut guard = x.write().unwrap();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:53:13\n+  --> $DIR/await_holding_lock.rs:50:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:53:9\n+  --> $DIR/await_holding_lock.rs:50:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |\n@@ -64,89 +64,89 @@ LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:66:17\n+  --> $DIR/await_holding_lock.rs:63:17\n    |\n LL |             let guard = x.lock().unwrap();\n    |                 ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:66:13\n+  --> $DIR/await_holding_lock.rs:63:13\n    |\n LL | /             let guard = x.lock().unwrap();\n LL | |             baz().await\n LL | |         };\n    | |_________^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:78:17\n+  --> $DIR/await_holding_lock.rs:75:17\n    |\n LL |             let guard = x.lock().unwrap();\n    |                 ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:78:13\n+  --> $DIR/await_holding_lock.rs:75:13\n    |\n LL | /             let guard = x.lock().unwrap();\n LL | |             baz().await\n LL | |         }\n    | |_________^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:89:13\n+  --> $DIR/await_holding_lock.rs:87:13\n    |\n LL |         let guard = x.lock();\n    |             ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:89:9\n+  --> $DIR/await_holding_lock.rs:87:9\n    |\n LL | /         let guard = x.lock();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:104:13\n+  --> $DIR/await_holding_lock.rs:102:13\n    |\n LL |         let guard = x.read();\n    |             ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:104:9\n+  --> $DIR/await_holding_lock.rs:102:9\n    |\n LL | /         let guard = x.read();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:109:13\n+  --> $DIR/await_holding_lock.rs:107:13\n    |\n LL |         let mut guard = x.write();\n    |             ^^^^^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:109:9\n+  --> $DIR/await_holding_lock.rs:107:9\n    |\n LL | /         let mut guard = x.write();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:134:13\n+  --> $DIR/await_holding_lock.rs:128:13\n    |\n LL |         let guard = x.lock();\n    |             ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:134:9\n+  --> $DIR/await_holding_lock.rs:128:9\n    |\n LL | /         let guard = x.lock();\n LL | |\n@@ -158,34 +158,51 @@ LL | |     }\n    | |_____^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:147:17\n+  --> $DIR/await_holding_lock.rs:141:17\n    |\n LL |             let guard = x.lock();\n    |                 ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:147:13\n+  --> $DIR/await_holding_lock.rs:141:13\n    |\n LL | /             let guard = x.lock();\n LL | |             baz().await\n LL | |         };\n    | |_________^\n \n error: this `MutexGuard` is held across an `await` point\n-  --> $DIR/await_holding_lock.rs:159:17\n+  --> $DIR/await_holding_lock.rs:153:17\n    |\n LL |             let guard = x.lock();\n    |                 ^^^^^\n    |\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n-  --> $DIR/await_holding_lock.rs:159:13\n+  --> $DIR/await_holding_lock.rs:153:13\n    |\n LL | /             let guard = x.lock();\n LL | |             baz().await\n LL | |         }\n    | |_________^\n \n-error: aborting due to 12 previous errors\n+error: this `MutexGuard` is held across an `await` point\n+  --> $DIR/await_holding_lock.rs:173:9\n+   |\n+LL |     let mut guard = x.lock().unwrap();\n+   |         ^^^^^^^^^\n+   |\n+   = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n+note: these are all the `await` points this lock is held through\n+  --> $DIR/await_holding_lock.rs:173:5\n+   |\n+LL | /     let mut guard = x.lock().unwrap();\n+LL | |     *guard += 1;\n+LL | |     drop(guard);\n+LL | |     baz().await;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 13 previous errors\n "}]}