{"sha": "6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjAxOWJkNDYwMWI5ZGMzNjMyNWUwOTZkMDY2YTRkZGJkYTFiZGY=", "commit": {"author": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T09:19:02Z"}, "committer": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T09:19:02Z"}, "message": "Revert some FIXMEs\n\nSigned-off-by: JmPotato <ghzpotato@gmail.com>", "tree": {"sha": "d7ba0fa11aba8b4a8ee0f7c6fe8683e43e3fcfd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ba0fa11aba8b4a8ee0f7c6fe8683e43e3fcfd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "html_url": "https://github.com/rust-lang/rust/commit/6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef019bd4601b9dc36325e096d066a4ddbda1bdf/comments", "author": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbc9afca48240cf16c82a996ac7b14c554bade6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbc9afca48240cf16c82a996ac7b14c554bade6", "html_url": "https://github.com/rust-lang/rust/commit/7fbc9afca48240cf16c82a996ac7b14c554bade6"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "07c978378a6900d887155f0cd01d38325da28d2f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ef019bd4601b9dc36325e096d066a4ddbda1bdf/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef019bd4601b9dc36325e096d066a4ddbda1bdf/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "patch": "@@ -110,7 +110,9 @@ impl<'a> SubstituteTypeParams<'a> {\n             ast::Type::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n-        let path = hir::Path::from_src(path, &hir::Hygiene::new_unhygienic())?;\n+        // FIXME: use `hir::Path::from_src` instead.\n+        #[allow(deprecated)]\n+        let path = hir::Path::from_ast(path)?;\n         let resolution = self.source_scope.resolve_hir_path(&path)?;\n         match resolution {\n             hir::PathResolution::TypeParam(tp) => Some(self.substs.get(&tp)?.syntax().clone()),\n@@ -150,8 +152,10 @@ impl<'a> QualifyPaths<'a> {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n             return None;\n         }\n-        let hir_path = hir::Path::from_src(p.clone(), &hir::Hygiene::new_unhygienic())?;\n-        let resolution = self.source_scope.resolve_hir_path(&hir_path)?;\n+        // FIXME: use `hir::Path::from_src` instead.\n+        #[allow(deprecated)]\n+        let hir_path = hir::Path::from_ast(p.clone());\n+        let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n                 let found_path = from.find_use_path(self.source_scope.db.upcast(), def)?;"}, {"sha": "8bb735fc62544452ff37dc1f604b7b364a4003eb", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ef019bd4601b9dc36325e096d066a4ddbda1bdf/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef019bd4601b9dc36325e096d066a4ddbda1bdf/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "patch": "@@ -44,7 +44,8 @@ mod test_db;\n /// containing the call plus the offset of the macro call in the file. Note that\n /// this is a recursive definition! However, the size_of of `HirFileId` is\n /// finite (because everything bottoms out at the real `FileId`) and small\n-/// (`MacroCallId` uses the location internal).\n+/// (`MacroCallId` uses the location interning. You can check details here:\n+/// https://en.wikipedia.org/wiki/String_interning).\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct HirFileId(HirFileIdRepr);\n "}]}