{"sha": "2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDhlYzJkMTk3ODA5ZmMwZjBlZmNjZjFkZTE0NDE5ZmZiMTdiMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T08:47:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T08:47:48Z"}, "message": "Auto merge of #21944 - alexcrichton:lframework, r=eddyb\n\nOn OSX the linker has a separate framework lookup path which is specified via\r\nthe `-F` flag. This adds a new kind of `-L` path recognized by the compiler for\r\nframeworks to be passed through to the linker.\r\n\r\nCloses #20259", "tree": {"sha": "d6cc34bd5464f85c22856104ccacd7bb86a3ba30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6cc34bd5464f85c22856104ccacd7bb86a3ba30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "html_url": "https://github.com/rust-lang/rust/commit/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa28f023c23ce1c72d8a83478a0263dcc5083078", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa28f023c23ce1c72d8a83478a0263dcc5083078", "html_url": "https://github.com/rust-lang/rust/commit/fa28f023c23ce1c72d8a83478a0263dcc5083078"}, {"sha": "6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "html_url": "https://github.com/rust-lang/rust/commit/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "49056afa045abb46f7e970696fd03f6ec1ef0b24", "filename": "man/rustc.1", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "patch": "@@ -18,10 +18,15 @@ Display the help message\n \\fB\\-\\-cfg\\fR SPEC\n Configure the compilation environment\n .TP\n-\\fB\\-L\\fR PATH\n-Add a directory to the library search path\n-.TP\n-\\fB\\-l\\fR NAME[:KIND]\n+\\fB\\-L\\fR [KIND=]PATH\n+Add a directory to the library search path. The optional KIND can be one of:\n+    dependency = only lookup transitive dependencies here\n+    crate = only lookup local `extern crate` directives here\n+    native = only lookup native libraries here\n+    framework = only look for OSX frameworks here\n+    all = look for anything here (the default)\n+.TP\n+\\fB\\-l\\fR [KIND=]NAME\n Link the generated crate(s) to the specified native library NAME. The optional\n KIND can be one of, static, dylib, or framework. If omitted, dylib is assumed.\n .TP"}, {"sha": "8faf81a156445e817d7b5bb5f85e43c1741db0b3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "patch": "@@ -738,7 +738,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n         opt::flag(\"h\", \"help\", \"Display this message\"),\n         opt::multi(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n-        opt::multi(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n+        opt::multi(\"L\", \"\",   \"Add a directory to the library search path\",\n+                   \"[KIND=]PATH\"),\n         opt::multi(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n                              library NAME. The optional KIND can be one of,\n                              static, dylib, or framework. If omitted, dylib is"}, {"sha": "c314a999f246119cf1ca7d340b5c8586f0a245e3", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "patch": "@@ -25,6 +25,7 @@ pub enum PathKind {\n     Native,\n     Crate,\n     Dependency,\n+    Framework,\n     ExternFlag,\n     All,\n }\n@@ -41,6 +42,8 @@ impl SearchPaths {\n             (PathKind::Crate, &path[\"crate=\".len()..])\n         } else if path.starts_with(\"dependency=\") {\n             (PathKind::Dependency, &path[\"dependency=\".len()..])\n+        } else if path.starts_with(\"framework=\") {\n+            (PathKind::Framework, &path[\"framework=\".len()..])\n         } else if path.starts_with(\"all=\") {\n             (PathKind::All, &path[\"all=\".len()..])\n         } else {"}, {"sha": "792178e970cc2c9c116533623474c0ee9b37727b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "patch": "@@ -1044,8 +1044,11 @@ fn link_args(cmd: &mut Command,\n // in the current crate. Upstream crates with native library dependencies\n // may have their native library pulled in above.\n fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, _| {\n-        cmd.arg(\"-L\").arg(path);\n+    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n+        match k {\n+            PathKind::Framework => { cmd.arg(\"-F\").arg(path); }\n+            _ => { cmd.arg(\"-L\").arg(path); }\n+        }\n         FileDoesntMatch\n     });\n "}]}