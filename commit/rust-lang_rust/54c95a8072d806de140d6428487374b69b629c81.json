{"sha": "54c95a8072d806de140d6428487374b69b629c81", "node_id": "C_kwDOAAsO6NoAKDU0Yzk1YTgwNzJkODA2ZGUxNDBkNjQyODQ4NzM3NGI2OWI2MjljODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T07:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T07:13:29Z"}, "message": "Rollup merge of #109028 - GuillaumeGomez:rustdoc-js-tester-eslint, r=notriddle\n\nAdd eslint checks for rustdoc-js tester\n\nr? ``@notriddle``", "tree": {"sha": "5eed22827dfe873c3019c0d0d645690ce2eeb150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eed22827dfe873c3019c0d0d645690ce2eeb150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c95a8072d806de140d6428487374b69b629c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDXuZCRBK7hj4Ov3rIwAAlBkIAAa/3hey48Vo4op7wOhwVM30\nTKnK1NfEykm2Gh4KfIVznj82GqllWb79OVrn3TwKWgJH2pLawwzVC3Jy641O+Spr\nnPkXFtI27oWLCkeYq4mF/08AG54rcFjfYGXUEQ9X0WD9cIdXoa0kK5WgFDC9WHYj\nDMJi6Po9AKZ804UoIhK32J87j32XJFTBxd2kL+3A1IXjMQh+GFU6YRz+HM/0n+Wa\ntMd81tHS/nMPcRSsSeXmZebSBeNEh9XIJilugpXQdwZyWNAYhdXjaehCEviDerI2\nAMZUWopwoNJlDZ35Qbm5/XEH5cHTDrNzCAz8F5+BaGn3Aks10CLT6scw2LPrMTg=\n=6ZK9\n-----END PGP SIGNATURE-----\n", "payload": "tree 5eed22827dfe873c3019c0d0d645690ce2eeb150\nparent 7ad471b09d96ddaec442934e49013e6dc528da3a\nparent ca9b6180f023d5a8ccf278a48270878daf8ed909\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678605209 +0100\ncommitter GitHub <noreply@github.com> 1678605209 +0100\n\nRollup merge of #109028 - GuillaumeGomez:rustdoc-js-tester-eslint, r=notriddle\n\nAdd eslint checks for rustdoc-js tester\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c95a8072d806de140d6428487374b69b629c81", "html_url": "https://github.com/rust-lang/rust/commit/54c95a8072d806de140d6428487374b69b629c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c95a8072d806de140d6428487374b69b629c81/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad471b09d96ddaec442934e49013e6dc528da3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad471b09d96ddaec442934e49013e6dc528da3a", "html_url": "https://github.com/rust-lang/rust/commit/7ad471b09d96ddaec442934e49013e6dc528da3a"}, {"sha": "ca9b6180f023d5a8ccf278a48270878daf8ed909", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9b6180f023d5a8ccf278a48270878daf8ed909", "html_url": "https://github.com/rust-lang/rust/commit/ca9b6180f023d5a8ccf278a48270878daf8ed909"}], "stats": {"total": 189, "additions": 144, "deletions": 45}, "files": [{"sha": "9141d3e8a48c259315b1be3977c52c7cb9c137b5", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54c95a8072d806de140d6428487374b69b629c81/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/54c95a8072d806de140d6428487374b69b629c81/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=54c95a8072d806de140d6428487374b69b629c81", "patch": "@@ -52,4 +52,5 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            reuse lint && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es6 ../src/librustdoc/html/static/js/*.js && \\\n-           eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js\n+           eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js && \\\n+           eslint -c ../src/tools/rustdoc-js/.eslintrc.js ../src/tools/rustdoc-js/tester.js"}, {"sha": "4ab3a315733098588a6313c50b2f97155de3ff0e", "filename": "src/tools/rustdoc-js/.eslintrc.js", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/54c95a8072d806de140d6428487374b69b629c81/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/54c95a8072d806de140d6428487374b69b629c81/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2F.eslintrc.js?ref=54c95a8072d806de140d6428487374b69b629c81", "patch": "@@ -0,0 +1,96 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"node\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2015,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n+        \"keyword-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n+        \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-else-if\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-import-assign\": \"error\",\n+        \"no-self-compare\": \"error\",\n+        \"no-template-curly-in-string\": \"error\",\n+        \"block-scoped-var\": \"error\",\n+        \"guard-for-in\": \"error\",\n+        \"no-alert\": \"error\",\n+        \"no-confusing-arrow\": \"error\",\n+        \"no-div-regex\": \"error\",\n+        \"no-floating-decimal\": \"error\",\n+        \"no-implicit-globals\": \"error\",\n+        \"no-implied-eval\": \"error\",\n+        \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n+        \"no-sequences\": \"error\",\n+        \"no-div-regex\": \"error\",\n+    }\n+};"}, {"sha": "8d46a8ce7f1b279db5367f9e668f5157fac61e9b", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 46, "deletions": 44, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/54c95a8072d806de140d6428487374b69b629c81/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/54c95a8072d806de140d6428487374b69b629c81/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=54c95a8072d806de140d6428487374b69b629c81", "patch": "@@ -1,5 +1,5 @@\n-const fs = require('fs');\n-const path = require('path');\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n \n function loadContent(content) {\n     const Module = module.constructor;\n@@ -15,7 +15,7 @@ function loadContent(content) {\n }\n \n function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n+    return fs.readFileSync(filePath, \"utf8\");\n }\n \n function contentToDiffLine(key, value) {\n@@ -25,41 +25,41 @@ function contentToDiffLine(key, value) {\n // This function is only called when no matching result was found and therefore will only display\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n-    let output = ' {\\n';\n-    const spaces = '     ';\n+    let output = \" {\\n\";\n+    const spaces = \"     \";\n     for (const key in entry) {\n-        if (!entry.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n             continue;\n         }\n-        if (!data || !data.hasOwnProperty(key)) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n+        if (!data || !Object.prototype.hasOwnProperty.call(data, key)) {\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n             continue;\n         }\n         const value = data[key];\n         if (value !== entry[key]) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n-            output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n+            output += \"+\" + spaces + contentToDiffLine(key, value) + \"\\n\";\n         } else {\n-            output += spaces + contentToDiffLine(key, value) + '\\n';\n+            output += spaces + contentToDiffLine(key, value) + \"\\n\";\n         }\n     }\n-    return output + ' }';\n+    return output + \" }\";\n }\n \n function lookForEntry(entry, data) {\n     return data.findIndex(data_entry => {\n         let allGood = true;\n         for (const key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n                 continue;\n             }\n             let value = data_entry[key];\n             // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data_entry['parent'] !== undefined) {\n+            if (key === \"path\" && data_entry[\"parent\"] !== undefined) {\n                 if (value.length > 0) {\n-                    value += '::' + data_entry['parent']['name'];\n+                    value += \"::\" + data_entry[\"parent\"][\"name\"];\n                 } else {\n-                    value = data_entry['parent']['name'];\n+                    value = data_entry[\"parent\"][\"name\"];\n                 }\n             }\n             if (value !== entry[key]) {\n@@ -95,7 +95,7 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n         fieldsToCheck = [];\n     }\n     for (const field of fieldsToCheck) {\n-        if (!expected.hasOwnProperty(field)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, field)) {\n             let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n             if (fullPath.length > 0) {\n                 text += ` in field \\`${fullPath}\\``;\n@@ -117,22 +117,22 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n                     `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(expected[i])}\\``);\n             } else {\n-                valueCheck(fullPath + '[' + i + ']', expected[i], result[i], error_text, queryName);\n+                valueCheck(fullPath + \"[\" + i + \"]\", expected[i], result[i], error_text, queryName);\n             }\n         }\n         for (; i < result.length; ++i) {\n             error_text.push(`${queryName}==> RESULT has extra value in array from field ` +\n                 `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(result[i])}\\` ` +\n-                'compared to EXPECTED');\n+                \"compared to EXPECTED\");\n         }\n     } else if (expected !== null && typeof expected !== \"undefined\" &&\n-               expected.constructor == Object) {\n+               expected.constructor == Object) { // eslint-disable-line eqeqeq\n         for (const key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n                 continue;\n             }\n-            if (!result.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n+            if (!Object.prototype.hasOwnProperty.call(result, key)) {\n+                error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n                 break;\n             }\n             let result_v = result[key];\n@@ -147,13 +147,13 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 });\n                 result_v = result_v.join(\"\");\n             }\n-            const obj_path = fullPath + (fullPath.length > 0 ? '.' : '') + key;\n+            const obj_path = fullPath + (fullPath.length > 0 ? \".\" : \"\") + key;\n             valueCheck(obj_path, expected[key], result_v, error_text, queryName);\n         }\n     } else {\n         const expectedValue = JSON.stringify(expected);\n         const resultValue = JSON.stringify(result);\n-        if (expectedValue != resultValue) {\n+        if (expectedValue !== resultValue) {\n             error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n                 `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n         }\n@@ -164,7 +164,7 @@ function runParser(query, expected, parseQuery, queryName) {\n     const error_text = [];\n     checkNeededFields(\"\", expected, error_text, queryName, null);\n     if (error_text.length === 0) {\n-        valueCheck('', expected, parseQuery(query), error_text, queryName);\n+        valueCheck(\"\", expected, parseQuery(query), error_text, queryName);\n     }\n     return error_text;\n }\n@@ -177,16 +177,16 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const error_text = [];\n \n     for (const key in expected) {\n-        if (!expected.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n             continue;\n         }\n-        if (!results.hasOwnProperty(key)) {\n-            error_text.push('==> Unknown key \"' + key + '\"');\n+        if (!Object.prototype.hasOwnProperty.call(results, key)) {\n+            error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n             break;\n         }\n         const entry = expected[key];\n \n-        if (exact_check == true && entry.length !== results[key].length) {\n+        if (exact_check && entry.length !== results[key].length) {\n             error_text.push(queryName + \"==> Expected exactly \" + entry.length +\n                             \" results but found \" + results[key].length + \" in '\" + key + \"'\");\n         }\n@@ -268,7 +268,7 @@ function runCheck(loadedFile, key, callback) {\n function runChecks(testFile, doSearch, parseQuery) {\n     let checkExpected = false;\n     let checkParsed = false;\n-    let testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+    let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n@@ -277,11 +277,11 @@ function runChecks(testFile, doSearch, parseQuery) {\n     }\n \n     if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n-        testFileContent += 'exports.EXPECTED = EXPECTED;';\n+        testFileContent += \"exports.EXPECTED = EXPECTED;\";\n         checkExpected = true;\n     }\n     if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n-        testFileContent += 'exports.PARSED = PARSED;';\n+        testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n     if (!checkParsed && !checkExpected) {\n@@ -325,7 +325,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n     return {\n-        doSearch: function (queryStr, filterCrate, currentCrate) {\n+        doSearch: function(queryStr, filterCrate, currentCrate) {\n             return searchModule.execQuery(searchModule.parseQuery(queryStr), searchWords,\n                 filterCrate, currentCrate);\n         },\n@@ -361,22 +361,24 @@ function parseOptions(args) {\n     };\n \n     for (let i = 0; i < args.length; ++i) {\n-        if (correspondences.hasOwnProperty(args[i])) {\n+        const arg = args[i];\n+        if (Object.prototype.hasOwnProperty.call(correspondences, arg)) {\n             i += 1;\n             if (i >= args.length) {\n-                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                console.log(\"Missing argument after `\" + arg + \"` option.\");\n                 return null;\n             }\n-            if (args[i - 1] !== \"--test-file\") {\n-                opts[correspondences[args[i - 1]]] = args[i];\n+            const arg_value = args[i];\n+            if (arg !== \"--test-file\") {\n+                opts[correspondences[arg]] = arg_value;\n             } else {\n-                opts[correspondences[args[i - 1]]].push(args[i]);\n+                opts[correspondences[arg]].push(arg_value);\n             }\n-        } else if (args[i] === \"--help\") {\n+        } else if (arg === \"--help\") {\n             showHelp();\n             process.exit(0);\n         } else {\n-            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Unknown option `\" + arg + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");\n             return null;\n         }\n@@ -405,17 +407,17 @@ function main(argv) {\n     );\n     let errors = 0;\n \n-    const doSearch = function (queryStr, filterCrate) {\n+    const doSearch = function(queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n \n     if (opts[\"test_file\"].length !== 0) {\n-        opts[\"test_file\"].forEach(function (file) {\n+        opts[\"test_file\"].forEach(file => {\n             process.stdout.write(`Testing ${file} ... `);\n             errors += runChecks(file, doSearch, parseAndSearch.parseQuery);\n         });\n     } else if (opts[\"test_folder\"].length !== 0) {\n-        fs.readdirSync(opts[\"test_folder\"]).forEach(function (file) {\n+        fs.readdirSync(opts[\"test_folder\"]).forEach(file => {\n             if (!file.endsWith(\".js\")) {\n                 return;\n             }"}]}