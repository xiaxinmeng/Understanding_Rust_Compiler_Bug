{"sha": "c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZTFmOTlhNjkwNGRjMDliNmZiZTJkNjZhZGVjZGU2YjcyZjk4ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-26T11:37:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-26T11:37:57Z"}, "message": "Rollup merge of #61120 - spastorino:eval-place-iterate, r=oli-obk\n\nMake eval_place iterate instead of recurse\n\nr? @oli-obk", "tree": {"sha": "3c1f60443c82236935191a20a2979dd92bbf43c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1f60443c82236935191a20a2979dd92bbf43c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6nqWCRBK7hj4Ov3rIwAAdHIIAHqht6hFHUQHQSx7lFIbSp77\n8uG+W3qoKxfQK3gClPEqWU/UMj1/wjrlm4RXGFsGyxZ7ndlvawDtzs7dPg79wHnV\nLr9hRzaz1kNxeCx3wsX5VvxI09j9UcsjplAY5fQP+GU4fVmia7XKNNBpIJGZP3Ul\n1tJBCVKgSt4Op/3jBOGYN2kgjw25b7J0+r6PYxP2T41tMMDkgwD9tIT+mAMl9euG\n7M/qd6/LoGNcy/26OAbUdiidh8icxKy9WzmKIcK9sHvUolJadlR5lxD1MSVy1qS0\n9Y96JiO3Vs00FGQVtvAa0Waibviletb5P0nuJUOtDK/hDSx9h/xiUNe5ef3G1gM=\n=qJXc\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c1f60443c82236935191a20a2979dd92bbf43c9\nparent a40b82beadb4a36c2f70d34592f20a40b821b110\nparent e8beea701955dcce855d1ac72ccd4c9d54f8382c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558870677 +0200\ncommitter GitHub <noreply@github.com> 1558870677 +0200\n\nRollup merge of #61120 - spastorino:eval-place-iterate, r=oli-obk\n\nMake eval_place iterate instead of recurse\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec", "html_url": "https://github.com/rust-lang/rust/commit/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a40b82beadb4a36c2f70d34592f20a40b821b110", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40b82beadb4a36c2f70d34592f20a40b821b110", "html_url": "https://github.com/rust-lang/rust/commit/a40b82beadb4a36c2f70d34592f20a40b821b110"}, {"sha": "e8beea701955dcce855d1ac72ccd4c9d54f8382c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8beea701955dcce855d1ac72ccd4c9d54f8382c", "html_url": "https://github.com/rust-lang/rust/commit/e8beea701955dcce855d1ac72ccd4c9d54f8382c"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "57d5ab71ecafd3922a6dda794f2bb5505ff87454", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=c3e1f99a6904dc09b6fbe2d66adecde6b72f98ec", "patch": "@@ -607,42 +607,42 @@ where\n     /// place; for reading, a more efficient alternative is `eval_place_for_read`.\n     pub fn eval_place(\n         &mut self,\n-        mir_place: &mir::Place<'tcx>\n+        mir_place: &mir::Place<'tcx>,\n     ) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n-        let place = match mir_place {\n-            Base(PlaceBase::Local(mir::RETURN_PLACE)) => match self.frame().return_place {\n-                Some(return_place) =>\n-                    // We use our layout to verify our assumption; caller will validate\n-                    // their layout on return.\n-                    PlaceTy {\n-                        place: *return_place,\n-                        layout: self.layout_of(self.monomorphize(self.frame().mir.return_ty())?)?,\n+\n+        mir_place.iterate(|place_base, place_projection| {\n+            let mut place = match place_base {\n+                PlaceBase::Local(mir::RETURN_PLACE) => match self.frame().return_place {\n+                    Some(return_place) => {\n+                        // We use our layout to verify our assumption; caller will validate\n+                        // their layout on return.\n+                        PlaceTy {\n+                            place: *return_place,\n+                            layout: self\n+                                .layout_of(self.monomorphize(self.frame().mir.return_ty())?)?,\n+                        }\n+                    }\n+                    None => return err!(InvalidNullPointerUsage),\n+                },\n+                PlaceBase::Local(local) => PlaceTy {\n+                    // This works even for dead/uninitialized locals; we check further when writing\n+                    place: Place::Local {\n+                        frame: self.cur_frame(),\n+                        local: *local,\n                     },\n-                None => return err!(InvalidNullPointerUsage),\n-            },\n-            Base(PlaceBase::Local(local)) => PlaceTy {\n-                // This works even for dead/uninitialized locals; we check further when writing\n-                place: Place::Local {\n-                    frame: self.cur_frame(),\n-                    local: *local,\n+                    layout: self.layout_of_local(self.frame(), *local, None)?,\n                 },\n-                layout: self.layout_of_local(self.frame(), *local, None)?,\n-            },\n-\n-            Projection(proj) => {\n-                let place = self.eval_place(&proj.base)?;\n-                self.place_projection(place, &proj.elem)?\n-            }\n+                PlaceBase::Static(place_static) => self.eval_static_to_mplace(place_static)?.into(),\n+            };\n \n-            Base(PlaceBase::Static(place_static)) => {\n-                self.eval_static_to_mplace(place_static)?.into()\n+            for proj in place_projection {\n+                place = self.place_projection(place, &proj.elem)?\n             }\n-        };\n \n-        self.dump_place(place.place);\n-        Ok(place)\n+            self.dump_place(place.place);\n+            Ok(place)\n+        })\n     }\n \n     /// Write a scalar to a place"}]}