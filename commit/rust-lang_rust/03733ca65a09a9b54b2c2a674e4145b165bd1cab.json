{"sha": "03733ca65a09a9b54b2c2a674e4145b165bd1cab", "node_id": "C_kwDOAAsO6NoAKDAzNzMzY2E2NWEwOWE5YjU0YjJjMmE2NzRlNDE0NWIxNjViZDFjYWI", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-11-22T12:14:54Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2022-02-06T19:23:23Z"}, "message": "`#[used(linker)]` attribute (https://github.com/dtolnay/linkme/issues/41)", "tree": {"sha": "0a8b39ca2a3a516049004c9023ad73ac8d7c50c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8b39ca2a3a516049004c9023ad73ac8d7c50c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03733ca65a09a9b54b2c2a674e4145b165bd1cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03733ca65a09a9b54b2c2a674e4145b165bd1cab", "html_url": "https://github.com/rust-lang/rust/commit/03733ca65a09a9b54b2c2a674e4145b165bd1cab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03733ca65a09a9b54b2c2a674e4145b165bd1cab/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f624427f8771c00819684c783bb841bf72095704", "url": "https://api.github.com/repos/rust-lang/rust/commits/f624427f8771c00819684c783bb841bf72095704", "html_url": "https://github.com/rust-lang/rust/commit/f624427f8771c00819684c783bb841bf72095704"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "ddc2b88191bd0e8e032d05e1220579ec09071fe7", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -144,7 +144,7 @@ impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n             // TODO(antoyo): set link section.\n         }\n \n-        if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+        if attrs.flags.contains(CodegenFnAttrFlags::USED) || attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {\n             self.add_used_global(global.to_rvalue());\n         }\n     }"}, {"sha": "6707de933522b4a569d77659125965981bb9cb9a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -522,6 +522,9 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n             }\n \n             if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+                // `USED` and `USED_LINKER` can't be used together.\n+                assert!(!attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER));\n+\n                 // The semantics of #[used] in Rust only require the symbol to make it into the\n                 // object file. It is explicitly allowed for the linker to strip the symbol if it\n                 // is dead. As such, use llvm.compiler.used instead of llvm.used.\n@@ -530,6 +533,12 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                 // in some versions of the gold linker.\n                 self.add_compiler_used_global(g);\n             }\n+            if attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {\n+                // `USED` and `USED_LINKER` can't be used together.\n+                assert!(!attrs.flags.contains(CodegenFnAttrFlags::USED));\n+\n+                self.add_used_global(g);\n+            }\n         }\n     }\n "}, {"sha": "d958a14afabb943315442fcb46eb119744f01b92", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -533,6 +533,8 @@ declare_features! (\n     ///\n     /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n     (active, untagged_unions, \"1.13.0\", Some(55149), None),\n+    /// Allows using the `#[used(retain)]` attribute.\n+    (active, used_with_arg, \"1.60.0\", None, None),\n     /// Allows `extern \"wasm\" fn`\n     (active, wasm_abi, \"1.53.0\", Some(83788), None),\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!"}, {"sha": "739e545043842061c25202d48569be41e24fda1a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -324,7 +324,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing),\n-    ungated!(used, Normal, template!(Word), WarnFollowing),\n+    ungated!(used, Normal, template!(Word, List: \"used\"), WarnFollowing),\n \n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),"}, {"sha": "54eb2dc9e2890647b5f4652627c27e32e05a55b9", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -89,6 +89,8 @@ bitflags! {\n         /// the MIR `InstrumentCoverage` pass and not added to the coverage map\n         /// during codegen.\n         const NO_COVERAGE               = 1 << 15;\n+        /// `#[used(linker)]`: indicates that LLVM nor the linker can eliminate this function.\n+        const USED_LINKER               = 1 << 16;\n     }\n }\n "}, {"sha": "dc3ce1afa3361beff88760c9edba3c01b66deece", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -466,7 +466,10 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n \n     // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n     // forcefully, e.g., for placing it in a specific section.\n-    if cg_attrs.contains_extern_indicator() || cg_attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+    if cg_attrs.contains_extern_indicator()\n+        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n+    {\n         return true;\n     }\n "}, {"sha": "4a1fd476b8c0af70424e08e14aee081ecd40ada5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -449,6 +449,7 @@ symbols! {\n         compare_exchange_weak,\n         compile_error,\n         compile_error_macro,\n+        compiler,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n@@ -815,6 +816,7 @@ symbols! {\n         link_ordinal,\n         link_section,\n         linkage,\n+        linker,\n         lint_reasons,\n         literal,\n         load,\n@@ -1458,6 +1460,7 @@ symbols! {\n         use_extern_macros,\n         use_nested_groups,\n         used,\n+        used_with_arg,\n         usize,\n         v1,\n         va_arg,"}, {"sha": "4a3c477021cf480e7cfab2136ac43fa79d6eb471", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03733ca65a09a9b54b2c2a674e4145b165bd1cab/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=03733ca65a09a9b54b2c2a674e4145b165bd1cab", "patch": "@@ -2849,7 +2849,42 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if attr.has_name(sym::used) {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+            let inner = attr.meta_item_list();\n+            match inner.as_deref() {\n+                Some([item]) if item.has_name(sym::linker) => {\n+                    if !tcx.features().used_with_arg {\n+                        feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::used_with_arg,\n+                            attr.span,\n+                            \"`#[used(linker)]` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED_LINKER;\n+                }\n+                Some([item]) if item.has_name(sym::compiler) => {\n+                    if !tcx.features().used_with_arg {\n+                        feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::used_with_arg,\n+                            attr.span,\n+                            \"`#[used(compiler)]` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+                }\n+                Some(_) => {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            attr.span,\n+                            \"expected `used`, `used(compiler)` or `used(linker)`\",\n+                        )\n+                        .emit();\n+                }\n+                None => codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED,\n+            }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n             if !matches!(tcx.fn_sig(id).abi(), abi::Abi::C { .. }) {\n                 struct_span_err!("}]}