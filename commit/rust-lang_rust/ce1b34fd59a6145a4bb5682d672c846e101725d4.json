{"sha": "ce1b34fd59a6145a4bb5682d672c846e101725d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMWIzNGZkNTlhNjE0NWE0YmI1NjgyZDY3MmM4NDZlMTAxNzI1ZDQ=", "commit": {"author": {"name": "Michael Chesser", "email": "michaelchesser@outlook.com", "date": "2020-01-06T22:59:03Z"}, "committer": {"name": "Michael Chesser", "email": "michaelchesser@outlook.com", "date": "2020-01-06T22:59:03Z"}, "message": "Improve const generics parsing\n\n- Handle const generics type args\n- Fix issue with const generic as first parameter in trait impl", "tree": {"sha": "8a9535261dac04f171caa68d4b908cdde0b4a34c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9535261dac04f171caa68d4b908cdde0b4a34c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1b34fd59a6145a4bb5682d672c846e101725d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1b34fd59a6145a4bb5682d672c846e101725d4", "html_url": "https://github.com/rust-lang/rust/commit/ce1b34fd59a6145a4bb5682d672c846e101725d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1b34fd59a6145a4bb5682d672c846e101725d4/comments", "author": {"login": "mchesser", "id": 4961637, "node_id": "MDQ6VXNlcjQ5NjE2Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4961637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mchesser", "html_url": "https://github.com/mchesser", "followers_url": "https://api.github.com/users/mchesser/followers", "following_url": "https://api.github.com/users/mchesser/following{/other_user}", "gists_url": "https://api.github.com/users/mchesser/gists{/gist_id}", "starred_url": "https://api.github.com/users/mchesser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mchesser/subscriptions", "organizations_url": "https://api.github.com/users/mchesser/orgs", "repos_url": "https://api.github.com/users/mchesser/repos", "events_url": "https://api.github.com/users/mchesser/events{/privacy}", "received_events_url": "https://api.github.com/users/mchesser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mchesser", "id": 4961637, "node_id": "MDQ6VXNlcjQ5NjE2Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4961637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mchesser", "html_url": "https://github.com/mchesser", "followers_url": "https://api.github.com/users/mchesser/followers", "following_url": "https://api.github.com/users/mchesser/following{/other_user}", "gists_url": "https://api.github.com/users/mchesser/gists{/gist_id}", "starred_url": "https://api.github.com/users/mchesser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mchesser/subscriptions", "organizations_url": "https://api.github.com/users/mchesser/orgs", "repos_url": "https://api.github.com/users/mchesser/repos", "events_url": "https://api.github.com/users/mchesser/events{/privacy}", "received_events_url": "https://api.github.com/users/mchesser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92a090f49cad2fa540562536f07fcb619f16680", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92a090f49cad2fa540562536f07fcb619f16680", "html_url": "https://github.com/rust-lang/rust/commit/c92a090f49cad2fa540562536f07fcb619f16680"}], "stats": {"total": 144, "additions": 123, "deletions": 21}, "files": [{"sha": "964fd304128d9df4a14644258498d75b30be161a", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -100,13 +100,16 @@ pub(crate) fn impl_item_list(p: &mut Parser) {\n     m.complete(p, ITEM_LIST);\n }\n \n+// test impl_type_params\n+// impl<const N: u32> Bar<N> {}\n fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     // There's an ambiguity between generic parameters and qualified paths in impls.\n     // If we see `<` it may start both, so we have to inspect some following tokens.\n     // The following combinations can only start generics,\n     // but not qualified paths (with one exception):\n     //     `<` `>` - empty generic parameters\n     //     `<` `#` - generic parameters with attributes\n+    //     `<` `const` - const generic parameters\n     //     `<` (LIFETIME|IDENT) `>` - single generic parameter\n     //     `<` (LIFETIME|IDENT) `,` - first generic parameter in a list\n     //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n@@ -119,7 +122,7 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     if !p.at(T![<]) {\n         return false;\n     }\n-    if p.nth(1) == T![#] || p.nth(1) == T![>] {\n+    if p.nth(1) == T![#] || p.nth(1) == T![>] || p.nth(1) == CONST_KW {\n         return true;\n     }\n     (p.nth(1) == LIFETIME || p.nth(1) == IDENT)"}, {"sha": "33d9973e99203c08aac9f4c8b4db49992b04a4dd", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -26,7 +26,7 @@ pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n }\n \n // test type_arg\n-// type A = B<'static, i32, Item=u64>;\n+// type A = B<'static, i32, 1, { 2 }, Item=u64>;\n fn type_arg(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n@@ -47,6 +47,14 @@ fn type_arg(p: &mut Parser) {\n             types::type_(p);\n             m.complete(p, ASSOC_TYPE_ARG);\n         }\n+        T!['{'] => {\n+            expressions::block(p);\n+            m.complete(p, CONST_ARG);\n+        }\n+        k if k.is_literal() => {\n+            p.bump(k);\n+            m.complete(p, CONST_ARG);\n+        }\n         _ => {\n             types::type_(p);\n             m.complete(p, TYPE_ARG);"}, {"sha": "4b301d67afe68dc21c86ad75f49dcbf055c87aef", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -234,6 +234,7 @@ pub enum SyntaxKind {\n     LIFETIME_ARG,\n     TYPE_ARG,\n     ASSOC_TYPE_ARG,\n+    CONST_ARG,\n     PARAM_LIST,\n     PARAM,\n     SELF_PARAM,"}, {"sha": "33d5578e701e940e634babf024e53340dd503047", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -3114,6 +3114,9 @@ impl TypeArgList {\n     pub fn assoc_type_args(&self) -> AstChildren<AssocTypeArg> {\n         AstChildren::new(&self.syntax)\n     }\n+    pub fn const_arg(&self) -> AstChildren<ConstArg> {\n+        AstChildren::new(&self.syntax)\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeArg {\n@@ -3196,6 +3199,36 @@ impl AstNode for LifetimeArg {\n }\n impl LifetimeArg {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for ConstArg {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            CONST_ARG => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ConstArg {\n+    pub fn literal(&self) -> Option<Literal> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+    pub fn block_expr(&self) -> Option<BlockExpr> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroItems {\n     pub(crate) syntax: SyntaxNode,\n }"}, {"sha": "0d07d76514e24b32a892fe394d32b02568e410af", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -1 +1 @@\n-type A = B<'static, i32, Item=u64>;\n+type A = B<'static, i32, 1, { 2 }, Item=u64>;"}, {"sha": "025faf5cae95a2790aec4bf0482ba808a26d5a09", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.txt", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.txt?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -1,18 +1,18 @@\n-SOURCE_FILE@[0; 36)\n-  TYPE_ALIAS_DEF@[0; 35)\n+SOURCE_FILE@[0; 46)\n+  TYPE_ALIAS_DEF@[0; 45)\n     TYPE_KW@[0; 4) \"type\"\n     WHITESPACE@[4; 5) \" \"\n     NAME@[5; 6)\n       IDENT@[5; 6) \"A\"\n     WHITESPACE@[6; 7) \" \"\n     EQ@[7; 8) \"=\"\n     WHITESPACE@[8; 9) \" \"\n-    PATH_TYPE@[9; 34)\n-      PATH@[9; 34)\n-        PATH_SEGMENT@[9; 34)\n+    PATH_TYPE@[9; 44)\n+      PATH@[9; 44)\n+        PATH_SEGMENT@[9; 44)\n           NAME_REF@[9; 10)\n             IDENT@[9; 10) \"B\"\n-          TYPE_ARG_LIST@[10; 34)\n+          TYPE_ARG_LIST@[10; 44)\n             L_ANGLE@[10; 11) \"<\"\n             LIFETIME_ARG@[11; 18)\n               LIFETIME@[11; 18) \"\\'static\"\n@@ -26,15 +26,30 @@ SOURCE_FILE@[0; 36)\n                       IDENT@[20; 23) \"i32\"\n             COMMA@[23; 24) \",\"\n             WHITESPACE@[24; 25) \" \"\n-            ASSOC_TYPE_ARG@[25; 33)\n-              NAME_REF@[25; 29)\n-                IDENT@[25; 29) \"Item\"\n-              EQ@[29; 30) \"=\"\n-              PATH_TYPE@[30; 33)\n-                PATH@[30; 33)\n-                  PATH_SEGMENT@[30; 33)\n-                    NAME_REF@[30; 33)\n-                      IDENT@[30; 33) \"u64\"\n-            R_ANGLE@[33; 34) \">\"\n-    SEMI@[34; 35) \";\"\n-  WHITESPACE@[35; 36) \"\\n\"\n+            CONST_ARG@[25; 26)\n+              INT_NUMBER@[25; 26) \"1\"\n+            COMMA@[26; 27) \",\"\n+            WHITESPACE@[27; 28) \" \"\n+            CONST_ARG@[28; 33)\n+              BLOCK_EXPR@[28; 33)\n+                BLOCK@[28; 33)\n+                  L_CURLY@[28; 29) \"{\"\n+                  WHITESPACE@[29; 30) \" \"\n+                  LITERAL@[30; 31)\n+                    INT_NUMBER@[30; 31) \"2\"\n+                  WHITESPACE@[31; 32) \" \"\n+                  R_CURLY@[32; 33) \"}\"\n+            COMMA@[33; 34) \",\"\n+            WHITESPACE@[34; 35) \" \"\n+            ASSOC_TYPE_ARG@[35; 43)\n+              NAME_REF@[35; 39)\n+                IDENT@[35; 39) \"Item\"\n+              EQ@[39; 40) \"=\"\n+              PATH_TYPE@[40; 43)\n+                PATH@[40; 43)\n+                  PATH_SEGMENT@[40; 43)\n+                    NAME_REF@[40; 43)\n+                      IDENT@[40; 43) \"u64\"\n+            R_ANGLE@[43; 44) \">\"\n+    SEMI@[44; 45) \";\"\n+  WHITESPACE@[45; 46) \"\\n\""}, {"sha": "cb0a105c29f36683eb337d762cd88a0327e15ec5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_impl_type_params.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -0,0 +1 @@\n+impl<const N: u32> Bar<N> {}"}, {"sha": "47fadef8544297d81a79e3f4294f88d93c952fa0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_impl_type_params.txt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -0,0 +1,38 @@\n+SOURCE_FILE@[0; 29)\n+  IMPL_BLOCK@[0; 28)\n+    IMPL_KW@[0; 4) \"impl\"\n+    TYPE_PARAM_LIST@[4; 18)\n+      L_ANGLE@[4; 5) \"<\"\n+      CONST_PARAM@[5; 17)\n+        CONST_KW@[5; 10) \"const\"\n+        WHITESPACE@[10; 11) \" \"\n+        NAME@[11; 12)\n+          IDENT@[11; 12) \"N\"\n+        COLON@[12; 13) \":\"\n+        WHITESPACE@[13; 14) \" \"\n+        PATH_TYPE@[14; 17)\n+          PATH@[14; 17)\n+            PATH_SEGMENT@[14; 17)\n+              NAME_REF@[14; 17)\n+                IDENT@[14; 17) \"u32\"\n+      R_ANGLE@[17; 18) \">\"\n+    WHITESPACE@[18; 19) \" \"\n+    PATH_TYPE@[19; 25)\n+      PATH@[19; 25)\n+        PATH_SEGMENT@[19; 25)\n+          NAME_REF@[19; 22)\n+            IDENT@[19; 22) \"Bar\"\n+          TYPE_ARG_LIST@[22; 25)\n+            L_ANGLE@[22; 23) \"<\"\n+            TYPE_ARG@[23; 24)\n+              PATH_TYPE@[23; 24)\n+                PATH@[23; 24)\n+                  PATH_SEGMENT@[23; 24)\n+                    NAME_REF@[23; 24)\n+                      IDENT@[23; 24) \"N\"\n+            R_ANGLE@[24; 25) \">\"\n+    WHITESPACE@[25; 26) \" \"\n+    ITEM_LIST@[26; 28)\n+      L_CURLY@[26; 27) \"{\"\n+      R_CURLY@[27; 28) \"}\"\n+  WHITESPACE@[28; 29) \"\\n\""}, {"sha": "67d1f41bca2f2a279179054dd25498eef359e6af", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1b34fd59a6145a4bb5682d672c846e101725d4/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1b34fd59a6145a4bb5682d672c846e101725d4/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=ce1b34fd59a6145a4bb5682d672c846e101725d4", "patch": "@@ -206,6 +206,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"LIFETIME_ARG\",\n         \"TYPE_ARG\",\n         \"ASSOC_TYPE_ARG\",\n+        \"CONST_ARG\",\n         \"PARAM_LIST\",\n         \"PARAM\",\n         \"SELF_PARAM\",\n@@ -511,10 +512,12 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             type_args: [TypeArg],\n             lifetime_args: [LifetimeArg],\n             assoc_type_args: [AssocTypeArg],\n+            const_arg: [ConstArg],\n         }\n         struct TypeArg { TypeRef }\n         struct AssocTypeArg { NameRef, TypeRef }\n         struct LifetimeArg {}\n+        struct ConstArg { Literal, BlockExpr }\n \n         struct MacroItems: ModuleItemOwner, FnDefOwner { }\n "}]}