{"sha": "5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGE5ODZhMmM2YmQ3ZTE2ZjRmNWE4NzRkZTdiZDc0NTVkMDZjNjM=", "commit": {"author": {"name": "Stuart Dootson", "email": "stuart.dootson@gmail.com", "date": "2016-08-09T20:11:27Z"}, "committer": {"name": "Stuart Dootson", "email": "stuart.dootson@gmail.com", "date": "2016-08-09T20:11:27Z"}, "message": "Add commentary", "tree": {"sha": "6399ba8ce65c77c6851b5b4bceb678223db4afaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6399ba8ce65c77c6851b5b4bceb678223db4afaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "html_url": "https://github.com/rust-lang/rust/commit/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63/comments", "author": {"login": "studoot", "id": 799344, "node_id": "MDQ6VXNlcjc5OTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/799344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/studoot", "html_url": "https://github.com/studoot", "followers_url": "https://api.github.com/users/studoot/followers", "following_url": "https://api.github.com/users/studoot/following{/other_user}", "gists_url": "https://api.github.com/users/studoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/studoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/studoot/subscriptions", "organizations_url": "https://api.github.com/users/studoot/orgs", "repos_url": "https://api.github.com/users/studoot/repos", "events_url": "https://api.github.com/users/studoot/events{/privacy}", "received_events_url": "https://api.github.com/users/studoot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "studoot", "id": 799344, "node_id": "MDQ6VXNlcjc5OTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/799344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/studoot", "html_url": "https://github.com/studoot", "followers_url": "https://api.github.com/users/studoot/followers", "following_url": "https://api.github.com/users/studoot/following{/other_user}", "gists_url": "https://api.github.com/users/studoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/studoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/studoot/subscriptions", "organizations_url": "https://api.github.com/users/studoot/orgs", "repos_url": "https://api.github.com/users/studoot/repos", "events_url": "https://api.github.com/users/studoot/events{/privacy}", "received_events_url": "https://api.github.com/users/studoot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4055e272da45e382cdf06e37c3bb3a57df4a85f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4055e272da45e382cdf06e37c3bb3a57df4a85f7", "html_url": "https://github.com/rust-lang/rust/commit/4055e272da45e382cdf06e37c3bb3a57df4a85f7"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "7c66d27da410442ecc74b22acd2db65cd235b4e2", "filename": "Contributing.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "patch": "@@ -44,17 +44,23 @@ colourised diff will be printed so that the offending line(s) can quickly be\n identified.\n \n Without explicit settings, the tests will be run using rustfmt's default\n-configuration. It is possible to run a test using non-default settings by\n-including configuration parameters in comments at the top of the file. For\n-example: to use 3 spaces per tab, start your test with\n+configuration. It is possible to run a test using non-default settings in several \n+ways. Firstly, you can include configuration parameters in comments at the top\n+of the file. For example: to use 3 spaces per tab, start your test with\n `// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,\n so include in both the source and target files! It is also possible to\n explicitly specify the name of the expected output file in the target directory.\n-Use `// rustfmt-target: filename.rs` for this. Finally, you can use a custom\n+Use `// rustfmt-target: filename.rs` for this. You can also specify a custom\n configuration by using the `rustfmt-config` directive. Rustfmt will then use\n that toml file located in `./tests/config/` for its configuration. Including\n `// rustfmt-config: small_tabs.toml` will run your test with the configuration\n-file found at `./tests/config/small_tabs.toml`.\n+file found at `./tests/config/small_tabs.toml`. The final option is used when the\n+test source file contains no configuration parameter comments. In this case, the\n+test harness looks for a configuration file with the same filename as the test\n+file in the `./tests/config/` directory, so a test source file named `test-indent.rs`\n+would need a configuration file named `test-indent.toml` in that directory. As an\n+example, the `issue-1111.rs` test file is configured by the file\n+`./tests/config/issue-1111.toml`.\n \n \n ## Hack!"}, {"sha": "ce52bf5fd697cde77df2022e26a92c77a288b944", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dda986a2c6bd7e16f4f5a874de7bd7455d06c63/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=5dda986a2c6bd7e16f4f5a874de7bd7455d06c63", "patch": "@@ -205,6 +205,9 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n \n fn read_config(filename: &str) -> Config {\n     let sig_comments = read_significant_comments(&filename);\n+    // Look for a config file... If there is a 'config' property in the significant comments, use\n+    // that. Otherwise, if there are no significant comments at all, look for a config file with\n+    // the same name as the test file.\n     let mut config = if !sig_comments.is_empty() {\n         get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]))\n     } else {\n@@ -253,7 +256,9 @@ pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String\n     handle_result(write_result, target).map(|_| format_report)\n }\n \n-// Reads test config file from comments and reads its contents.\n+// Reads test config file using the supplied (optional) file name. If there's no file name or the\n+// file doesn't exist, just return the default config. Otherwise, the file must be read\n+// successfully.\n fn get_config(config_file: Option<&str>) -> Config {\n     let config_file_name = match config_file {\n         None => return Default::default(),"}]}