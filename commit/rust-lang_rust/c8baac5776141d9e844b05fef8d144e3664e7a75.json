{"sha": "c8baac5776141d9e844b05fef8d144e3664e7a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YmFhYzU3NzYxNDFkOWU4NDRiMDVmZWY4ZDE0NGUzNjY0ZTdhNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-12T16:45:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-12T16:45:26Z"}, "message": "remove remaining use of Pointer in Allocation API", "tree": {"sha": "1b58494224aeb77569c9f99dd9fc2d66d47fc7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b58494224aeb77569c9f99dd9fc2d66d47fc7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8baac5776141d9e844b05fef8d144e3664e7a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8baac5776141d9e844b05fef8d144e3664e7a75", "html_url": "https://github.com/rust-lang/rust/commit/c8baac5776141d9e844b05fef8d144e3664e7a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8baac5776141d9e844b05fef8d144e3664e7a75/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "html_url": "https://github.com/rust-lang/rust/commit/3a24abd22fd25c836d8b4d75ff46c833f9c3934c"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "75cbb55239c8b21ff8a10ffb566732e724862548", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8baac5776141d9e844b05fef8d144e3664e7a75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8baac5776141d9e844b05fef8d144e3664e7a75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=c8baac5776141d9e844b05fef8d144e3664e7a75", "patch": "@@ -512,7 +512,7 @@ impl InitMaskCompressed {\n /// Transferring the initialization mask to other allocations.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     /// Creates a run-length encoding of the initialization mask.\n-    pub fn compress_uninit_range(&self, src: Pointer<Tag>, size: Size) -> InitMaskCompressed {\n+    pub fn compress_uninit_range(&self, range: AllocRange) -> InitMaskCompressed {\n         // Since we are copying `size` bytes from `src` to `dest + i * size` (`for i in 0..repeat`),\n         // a naive initialization mask copying algorithm would repeatedly have to read the initialization mask from\n         // the source and write it to the destination. Even if we optimized the memory accesses,\n@@ -526,13 +526,13 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         // where each element toggles the state.\n \n         let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();\n-        let initial = self.init_mask.get(src.offset);\n+        let initial = self.init_mask.get(range.start);\n         let mut cur_len = 1;\n         let mut cur = initial;\n \n-        for i in 1..size.bytes() {\n+        for i in 1..range.size.bytes() {\n             // FIXME: optimize to bitshift the current uninitialized block's bits and read the top bit.\n-            if self.init_mask.get(src.offset + Size::from_bytes(i)) == cur {\n+            if self.init_mask.get(range.start + Size::from_bytes(i)) == cur {\n                 cur_len += 1;\n             } else {\n                 ranges.push(cur_len);\n@@ -550,24 +550,23 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n     pub fn mark_compressed_init_range(\n         &mut self,\n         defined: &InitMaskCompressed,\n-        dest: Pointer<Tag>,\n-        size: Size,\n+        range: AllocRange,\n         repeat: u64,\n     ) {\n         // An optimization where we can just overwrite an entire range of initialization\n         // bits if they are going to be uniformly `1` or `0`.\n         if defined.ranges.len() <= 1 {\n             self.init_mask.set_range_inbounds(\n-                dest.offset,\n-                dest.offset + size * repeat, // `Size` operations\n+                range.start,\n+                range.start + range.size * repeat, // `Size` operations\n                 defined.initial,\n             );\n             return;\n         }\n \n         for mut j in 0..repeat {\n-            j *= size.bytes();\n-            j += dest.offset.bytes();\n+            j *= range.size.bytes();\n+            j += range.start.bytes();\n             let mut cur = defined.initial;\n             for range in &defined.ranges {\n                 let old_j = j;"}, {"sha": "990dbbcd250b2b454a495b15d86042d089e0c6eb", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8baac5776141d9e844b05fef8d144e3664e7a75/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8baac5776141d9e844b05fef8d144e3664e7a75/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=c8baac5776141d9e844b05fef8d144e3664e7a75", "patch": "@@ -1049,7 +1049,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             num_copies,\n         );\n         // Prepare a copy of the initialization mask.\n-        let compressed = src_alloc.compress_uninit_range(src, size);\n+        let compressed = src_alloc.compress_uninit_range(alloc_range(src.offset, size));\n         // This checks relocation edges on the src.\n         let src_bytes = src_alloc\n             .get_bytes_with_uninit_and_ptr(&tcx, alloc_range(src.offset, size))\n@@ -1110,7 +1110,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // now fill in all the \"init\" data\n-        dest_alloc.mark_compressed_init_range(&compressed, dest, size, num_copies);\n+        dest_alloc.mark_compressed_init_range(&compressed, alloc_range(dest.offset, size), num_copies);\n         // copy the relocations to the destination\n         dest_alloc.mark_relocation_range(relocations);\n "}]}