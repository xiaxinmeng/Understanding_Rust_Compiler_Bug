{"sha": "3554f2d9411b0924fea8c78dfa82060b9500f261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTRmMmQ5NDExYjA5MjRmZWE4Yzc4ZGZhODIwNjBiOTUwMGYyNjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-20T08:02:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-20T08:02:03Z"}, "message": "Rollup merge of #69768 - oli-obk:union_field_ice, r=eddyb,RalfJung\n\nCompute the correct layout for variants of uninhabited enums\n\nr? @eddyb\ncc @RalfJung\n\nfixes #69191\ncc #69763", "tree": {"sha": "2369d939a5f0d77432c3b87add3007e59c6e1c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2369d939a5f0d77432c3b87add3007e59c6e1c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3554f2d9411b0924fea8c78dfa82060b9500f261", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedHh7CRBK7hj4Ov3rIwAAdHIIABlTA/wP85zSonWO/wwTBbLh\n9FT+oYwiVoNUYQJfreABiTx5n+v1JhowtZ+ReRi/b+Mz8vywMnj5Go0RdtgD0/8m\nnenRcgLmPKNb/Xp1n+zDX+qhwmAKwGvQIkHBO62MkBs7a4HiU0adWHLCnsCWrB2n\nLqylHmPrhi6wXXoTCXmEokY4e8k6bnUN491nbzjds9pdafSRLkAl77sNVnx7wfmD\nk/FSX/1nFQuOpUFIGMu6uQkKqCcAr2GGLTDYBXEDaFKcG/MRZX+le9I1/ABIP3EG\nzK0d/2TAmA64zZf/zynDkdrCpwp1ma8miP+yOiJwxOMytHWfO20KlSfbHCzv0Kw=\n=1tA3\n-----END PGP SIGNATURE-----\n", "payload": "tree 2369d939a5f0d77432c3b87add3007e59c6e1c21\nparent 5d395176809c8f8a8399a8bec31bb2f6cdbf975a\nparent 74608c7f206171cb72c020a03800b2d9035a35fa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1584691323 +0900\ncommitter GitHub <noreply@github.com> 1584691323 +0900\n\nRollup merge of #69768 - oli-obk:union_field_ice, r=eddyb,RalfJung\n\nCompute the correct layout for variants of uninhabited enums\n\nr? @eddyb\ncc @RalfJung\n\nfixes #69191\ncc #69763\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3554f2d9411b0924fea8c78dfa82060b9500f261", "html_url": "https://github.com/rust-lang/rust/commit/3554f2d9411b0924fea8c78dfa82060b9500f261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3554f2d9411b0924fea8c78dfa82060b9500f261/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d395176809c8f8a8399a8bec31bb2f6cdbf975a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d395176809c8f8a8399a8bec31bb2f6cdbf975a", "html_url": "https://github.com/rust-lang/rust/commit/5d395176809c8f8a8399a8bec31bb2f6cdbf975a"}, {"sha": "74608c7f206171cb72c020a03800b2d9035a35fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/74608c7f206171cb72c020a03800b2d9035a35fa", "html_url": "https://github.com/rust-lang/rust/commit/74608c7f206171cb72c020a03800b2d9035a35fa"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "6d28796b34847231c42291b6de331f6f9f41c268", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=3554f2d9411b0924fea8c78dfa82060b9500f261", "patch": "@@ -780,8 +780,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     present_first @ Some(_) => present_first,\n                     // Uninhabited because it has no variants, or only absent ones.\n                     None if def.is_enum() => return tcx.layout_raw(param_env.and(tcx.types.never)),\n-                    // if it's a struct, still compute a layout so that we can still compute the\n-                    // field offsets\n+                    // If it's a struct, still compute a layout so that we can still compute the\n+                    // field offsets.\n                     None => Some(VariantIdx::new(0)),\n                 };\n \n@@ -1987,7 +1987,15 @@ where\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n         let details = match this.variants {\n-            Variants::Single { index } if index == variant_index => this.details,\n+            Variants::Single { index }\n+                // If all variants but one are uninhabited, the variant layout is the enum layout.\n+                if index == variant_index &&\n+                // Don't confuse variants of uninhabited enums with the enum itself.\n+                // For more details see https://github.com/rust-lang/rust/issues/69763.\n+                this.fields != FieldPlacement::Union(0) =>\n+            {\n+                this.details\n+            }\n \n             Variants::Single { index } => {\n                 // Deny calling for_variant more than once for non-Single enums."}, {"sha": "da55d710ba7fdfd32afa148146819b06bb140c9b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3554f2d9411b0924fea8c78dfa82060b9500f261", "patch": "@@ -355,7 +355,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let base = match op.try_as_mplace(self) {\n             Ok(mplace) => {\n-                // The easy case\n+                // We can reuse the mplace field computation logic for indirect operands.\n                 let field = self.mplace_field(mplace, field)?;\n                 return Ok(field.into());\n             }"}, {"sha": "22ac0ac65a82c73143902602f7529f1f26a6f931", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3554f2d9411b0924fea8c78dfa82060b9500f261", "patch": "@@ -410,14 +410,6 @@ where\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n-                // This is a narrow bug-fix for rust-lang/rust#69191: if we are\n-                // trying to access absent field of uninhabited variant, then\n-                // signal UB (but don't ICE the compiler).\n-                // FIXME temporary hack to work around incoherence between\n-                // layout computation and MIR building\n-                if field >= count as u64 && base.layout.abi == layout::Abi::Uninhabited {\n-                    throw_ub!(Unreachable);\n-                }\n                 assert!(\n                     field < count as u64,\n                     \"Tried to access field {} of union {:#?} with {} fields\","}, {"sha": "afa30e7e632a729bc0f51f32d291301648852f65", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554f2d9411b0924fea8c78dfa82060b9500f261/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=3554f2d9411b0924fea8c78dfa82060b9500f261", "patch": "@@ -660,7 +660,10 @@ impl FieldPlacement {\n \n     pub fn offset(&self, i: usize) -> Size {\n         match *self {\n-            FieldPlacement::Union(_) => Size::ZERO,\n+            FieldPlacement::Union(count) => {\n+                assert!(i < count, \"tried to access field {} of union with {} fields\", i, count);\n+                Size::ZERO\n+            }\n             FieldPlacement::Array { stride, count } => {\n                 let i = i as u64;\n                 assert!(i < count);"}]}