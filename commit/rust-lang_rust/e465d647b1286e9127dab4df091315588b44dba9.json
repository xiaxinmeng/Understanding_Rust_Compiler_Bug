{"sha": "e465d647b1286e9127dab4df091315588b44dba9", "node_id": "C_kwDOAAsO6NoAKGU0NjVkNjQ3YjEyODZlOTEyN2RhYjRkZjA5MTMxNTU4OGI0NGRiYTk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T10:40:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T11:42:12Z"}, "message": "Introduce helper.", "tree": {"sha": "106e24fdc06148e2227e9730f5a6742ecda8e10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/106e24fdc06148e2227e9730f5a6742ecda8e10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e465d647b1286e9127dab4df091315588b44dba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e465d647b1286e9127dab4df091315588b44dba9", "html_url": "https://github.com/rust-lang/rust/commit/e465d647b1286e9127dab4df091315588b44dba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e465d647b1286e9127dab4df091315588b44dba9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4fe8e2953747605b085d297cf329824d499884", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4fe8e2953747605b085d297cf329824d499884", "html_url": "https://github.com/rust-lang/rust/commit/dc4fe8e2953747605b085d297cf329824d499884"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "462c3b4e9184d283b29e8eb59963109457b1c67b", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e465d647b1286e9127dab4df091315588b44dba9/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e465d647b1286e9127dab4df091315588b44dba9/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=e465d647b1286e9127dab4df091315588b44dba9", "patch": "@@ -211,7 +211,7 @@ fn replace_flattened_locals<'tcx>(\n         local_decls: &body.local_decls,\n         replacements,\n         all_dead_locals,\n-        fragments,\n+        fragments: &fragments,\n         patch: MirPatch::new(body),\n     };\n     for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n@@ -239,7 +239,7 @@ struct ReplacementVisitor<'tcx, 'll> {\n     all_dead_locals: BitSet<Local>,\n     /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n     /// and deinit statement and debuginfo.\n-    fragments: IndexVec<Local, Option<Vec<(&'tcx [PlaceElem<'tcx>], Local)>>>,\n+    fragments: &'ll IndexVec<Local, Option<Vec<(&'tcx [PlaceElem<'tcx>], Local)>>>,\n     patch: MirPatch<'tcx>,\n }\n \n@@ -270,6 +270,14 @@ impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n             None\n         }\n     }\n+\n+    fn place_fragments(\n+        &self,\n+        place: Place<'tcx>,\n+    ) -> Option<&'ll Vec<(&'tcx [PlaceElem<'tcx>], Local)>> {\n+        let local = place.as_local()?;\n+        self.fragments[local].as_ref()\n+    }\n }\n \n impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n@@ -297,25 +305,19 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                 }\n                 return;\n             }\n-            StatementKind::Deinit(box ref place) => {\n-                if let Some(local) = place.as_local()\n-                    && let Some(final_locals) = &self.fragments[local]\n-                {\n+            StatementKind::Deinit(box place) => {\n+                if let Some(final_locals) = self.place_fragments(place) {\n                     for &(_, fl) in final_locals {\n-                        self.patch.add_statement(\n-                            location,\n-                            StatementKind::Deinit(Box::new(fl.into())),\n-                        );\n+                        self.patch\n+                            .add_statement(location, StatementKind::Deinit(Box::new(fl.into())));\n                     }\n                     statement.make_nop();\n                     return;\n                 }\n             }\n \n-            StatementKind::Assign(box (ref place, Rvalue::Aggregate(_, ref operands))) => {\n-                if let Some(local) = place.as_local()\n-                    && let Some(final_locals) = &self.fragments[local]\n-                {\n+            StatementKind::Assign(box (place, Rvalue::Aggregate(_, ref operands))) => {\n+                if let Some(final_locals) = self.place_fragments(place) {\n                     for &(projection, fl) in final_locals {\n                         let &[PlaceElem::Field(index, _)] = projection else { bug!() };\n                         let index = index.as_usize();\n@@ -330,31 +332,28 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                 }\n             }\n \n-            StatementKind::Assign(box (ref place, Rvalue::Use(Operand::Constant(_)))) => {\n-                if let Some(local) = place.as_local()\n-                    && let Some(final_locals) = &self.fragments[local]\n-                {\n+            StatementKind::Assign(box (place, Rvalue::Use(Operand::Constant(_)))) => {\n+                if let Some(final_locals) = self.place_fragments(place) {\n                     for &(projection, fl) in final_locals {\n-                        let rvalue = Rvalue::Use(Operand::Move(place.project_deeper(projection, self.tcx)));\n+                        let rvalue =\n+                            Rvalue::Use(Operand::Move(place.project_deeper(projection, self.tcx)));\n                         self.patch.add_statement(\n                             location,\n                             StatementKind::Assign(Box::new((fl.into(), rvalue))),\n                         );\n                     }\n-                    self.all_dead_locals.remove(local);\n+                    self.all_dead_locals.remove(place.local);\n                     return;\n                 }\n             }\n \n-            StatementKind::Assign(box (ref lhs, Rvalue::Use(ref op))) => {\n+            StatementKind::Assign(box (lhs, Rvalue::Use(ref op))) => {\n                 let (rplace, copy) = match op {\n                     Operand::Copy(rplace) => (rplace, true),\n                     Operand::Move(rplace) => (rplace, false),\n                     Operand::Constant(_) => bug!(),\n                 };\n-                if let Some(local) = lhs.as_local()\n-                    && let Some(final_locals) = &self.fragments[local]\n-                {\n+                if let Some(final_locals) = self.place_fragments(lhs) {\n                     for &(projection, fl) in final_locals {\n                         let rplace = rplace.project_deeper(projection, self.tcx);\n                         let rvalue = if copy {"}]}