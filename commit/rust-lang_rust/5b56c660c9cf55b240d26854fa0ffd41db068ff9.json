{"sha": "5b56c660c9cf55b240d26854fa0ffd41db068ff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTZjNjYwYzljZjU1YjI0MGQyNjg1NGZhMGZmZDQxZGIwNjhmZjk=", "commit": {"author": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2019-10-02T18:02:25Z"}, "committer": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2019-10-04T07:47:21Z"}, "message": "Fix ABI, run and fix more tests, re-enable CI for PRs", "tree": {"sha": "03bc9b23e0f08f0f94054e85d64672a769c7e339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03bc9b23e0f08f0f94054e85d64672a769c7e339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b56c660c9cf55b240d26854fa0ffd41db068ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b56c660c9cf55b240d26854fa0ffd41db068ff9", "html_url": "https://github.com/rust-lang/rust/commit/5b56c660c9cf55b240d26854fa0ffd41db068ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b56c660c9cf55b240d26854fa0ffd41db068ff9/comments", "author": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a55103b985fdd4a7d90db5d46ebaf0a9e34b419", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a55103b985fdd4a7d90db5d46ebaf0a9e34b419", "html_url": "https://github.com/rust-lang/rust/commit/9a55103b985fdd4a7d90db5d46ebaf0a9e34b419"}], "stats": {"total": 333, "additions": 202, "deletions": 131}, "files": [{"sha": "9b43bb0eff0e845c94b0d8a7da8ad4cdd8c60c97", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -970,6 +970,7 @@ impl<'a> Builder<'a> {\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n             } else if !target.contains(\"windows\") &&\n                       !target.contains(\"wasm32\") &&\n+                      !target.contains(\"emscripten\") &&\n                       !target.contains(\"fuchsia\") {\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {"}, {"sha": "e09e25de64a34b421b7e95c427b2e126ad8d1e3d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1046,8 +1046,11 @@ impl Step for Compiletest {\n \n         // Also provide `rust_test_helpers` for the host.\n         builder.ensure(native::TestHelpers { target: compiler.host });\n-        // As well as the target\n-        builder.ensure(native::TestHelpers { target });\n+\n+        // As well as the target, except for plain wasm32, which can't build it\n+        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+            builder.ensure(native::TestHelpers { target });\n+        }\n \n         builder.ensure(RemoteCopyLibs { compiler, target });\n "}, {"sha": "07c79d8cc9637f1bdde906d12764d20a3a2bf419", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -22,6 +22,10 @@ jobs:\n         IMAGE: x86_64-gnu-llvm-6.0\n       mingw-check:\n         IMAGE: mingw-check\n+      asmjs:\n+        IMAGE: asmjs\n+      wasm32:\n+        IMAGE: wasm32\n \n - job: LinuxTools\n   timeoutInMinutes: 600"}, {"sha": "d136fae79aa447c4dd830e3981175bc53dae086e", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -28,8 +28,7 @@ ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-# TODO: Run run-fail, libcore, libstd, etc. once exceptions are enabled\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS src/test/ui\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n \n # This is almost identical to the wasm32-unknown-emscripten target, so\n # running with assertions again is not useful"}, {"sha": "b2cf862c0a510060d54aa3773761d853dc565e62", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -28,5 +28,11 @@ ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten\n \n-# TODO: Run run-fail, libcore, libstd, etc. once exceptions are enabled\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS src/test/ui\n+# FIXME: Re-enable these tests once Cargo stops trying to execute wasms\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n+    --exclude src/libcore \\\n+    --exclude src/liballoc \\\n+    --exclude src/libproc_macro \\\n+    --exclude src/libstd \\\n+    --exclude src/libterm \\\n+    --exclude src/libtest"}, {"sha": "b8c720264d0abce13e893dc35b461f3e9d685520", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,10 +1,5 @@\n-use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n-use std::panic::{self, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicUsize, Ordering};\n-\n-use rand::{thread_rng, seq::SliceRandom};\n \n #[test]\n fn test_iterator() {\n@@ -281,9 +276,15 @@ fn assert_covariance() {\n // even if the order may not be correct.\n //\n // Destructors must be called exactly once per element.\n+// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n fn panic_safe() {\n+    use std::cmp;\n+    use std::panic::{self, AssertUnwindSafe};\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+    use rand::{thread_rng, seq::SliceRandom};\n+\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]"}, {"sha": "cb73c7c179cbf2edba72a0337199e1bbd55f092c", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -483,7 +483,7 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n+    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n     #[cfg(not(miri))] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {"}, {"sha": "abcba0c2e8479a314a6ae30552ce3053e1ffd82f", "filename": "src/liballoc/tests/str.rs.rej", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs.rej?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -0,0 +1,10 @@\n+diff a/src/liballoc/tests/str.rs b/src/liballoc/tests/str.rs\t(rejected hunks)\n+@@ -483,7 +483,7 @@ mod slice_index {\n+     }\n+ \n+     #[test]\n+-    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n++    #[cfg(not(target_arch = \"js\"))] // hits an OOM\n+     #[cfg(not(miri))] // Miri is too slow\n+     fn simple_big() {\n+         fn a_million_letter_x() -> String {"}, {"sha": "80537217697adebedb4e1c31fd3b3f79869e2ab6", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -944,8 +944,10 @@ fn drain_filter_complex() {\n     }\n }\n \n+// Miri does not support catching panics\n+// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))]\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -995,8 +997,9 @@ fn drain_filter_consumed_panic() {\n     }\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;"}, {"sha": "27799edab91954dbbd842c9bfca90211ab560dc8", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,29 +1,47 @@\n use crate::abi::call::{FnType, ArgType, Uniform};\n use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n+fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgType<'a, Ty>) -> bool\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n-    if ret.layout.is_aggregate() {\n-        if let Some(unit) = ret.layout.homogeneous_aggregate(cx).unit() {\n-            let size = ret.layout.size;\n+    if val.layout.is_aggregate() {\n+        if let Some(unit) = val.layout.homogeneous_aggregate(cx).unit() {\n+            let size = val.layout.size;\n             if unit.size == size {\n-                ret.cast_to(Uniform {\n+                val.cast_to(Uniform {\n                     unit,\n                     total: size\n                 });\n-                return;\n+                return true;\n             }\n         }\n+    }\n+    false\n+}\n \n-        ret.make_indirect();\n+\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    ret.extend_integer_width_to(32);\n+    if ret.layout.is_aggregate() {\n+        if !unwrap_trivial_aggregate(cx, ret) {\n+            ret.make_indirect();\n+        }\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    arg.extend_integer_width_to(32);\n     if arg.layout.is_aggregate() {\n-        arg.make_indirect_byval();\n+        if !unwrap_trivial_aggregate(cx, arg) {\n+            arg.make_indirect_byval();\n+        }\n     }\n }\n \n@@ -37,6 +55,6 @@ pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n \n     for arg in &mut fty.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg_ty(arg);\n+        classify_arg_ty(cx, arg);\n     }\n }"}, {"sha": "6a2c8c495372f2d3483283aa7c6dd9065f975e41", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -10,6 +10,8 @@ pub fn target() -> Result<Target, String> {\n                                \"ASSERTIONS=1\".to_string(),\n                                \"-s\".to_string(),\n                                \"DISABLE_EXCEPTION_CATCHING=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ABORTING_MALLOC=0\".to_string(),\n                                // FIXME(tlively): Enable this linker option once libc type errors\n                                // are resolved. See https://github.com/rust-lang/libc/pull/1478.\n                                // \"-Wl,--fatal-warnings\".to_string(),"}, {"sha": "e8f3434b958d35cc236095cd9b8dacd5e75a6537", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1478,9 +1478,9 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    let ignore_because_no_process_support = cfg!(target_arch = \"wasm32\")\n-        && !cfg!(target_os = \"emscripten\")\n-        && desc.should_panic != ShouldPanic::No;\n+    // FIXME: Re-enable emscripten once it can catch panics again\n+    let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n+        && (cfg!(target_arch = \"wasm32\") || cfg!(target_os = \"emscripten\"));\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n         monitor_ch.send((desc, TrIgnored, None, Vec::new())).unwrap();"}, {"sha": "c3727b3013fc8921e01d05ec837b33412d047214", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use crate::test::{\n     filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored, RunStrategy,\n-    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailedMsg,\n+    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts,\n     TrIgnored, TrOk,\n };\n use std::sync::mpsc::channel;\n@@ -90,7 +90,9 @@ pub fn ignored_tests_result_in_ignored() {\n     assert!(res == TrIgnored);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n     fn f() {\n         panic!();\n@@ -110,7 +112,9 @@ fn test_should_panic() {\n     assert!(res == TrOk);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n     fn f() {\n         panic!(\"an error message\");\n@@ -130,8 +134,11 @@ fn test_should_panic_good_message() {\n     assert!(res == TrOk);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n+    use crate::tests::TrFailedMsg;\n     fn f() {\n         panic!(\"an error message\");\n     }\n@@ -152,7 +159,9 @@ fn test_should_panic_bad_message() {\n     assert!(res == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_but_succeeds() {\n     fn f() {}\n     let desc = TestDescAndFn {"}, {"sha": "7fa61d15f77c4af42e3ef9eeb331f3916e9295ab", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n "}, {"sha": "49e40d5f243f16c80e9e5990037108c9105f3dbe", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "786f2c8422b788ab02ff750c295f9cb6a0925015", "filename": "src/test/codegen/extern-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ee61814678ce4a7d119e2b950eef9e1f4eb72a3e", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions"}, {"sha": "88b8692b0ac540b1c8d411cd76f2cae9f1757dbc", "filename": "src/test/codegen/link_section.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten default visibility is hidden\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "c82ae476b1b2c2a9cc3c10c26177895201e44d6f", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,5 @@\n // ignore-msvc\n+// ignore-emscripten compiled with panic=abort by default\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "afefb9c9f71a53eb2a6fb6a5ceeb56f7a01cd38b", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,15 +1,14 @@\n // compile-flags: -C no-prepopulate-passes\n \n // ignore-aarch64\n-// ignore-asmjs\n+// ignore-emscripten\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n-// ignore-wasm\n // ignore-x86\n // ignore-x86_64\n // See repr-transparent.rs"}, {"sha": "237d15a5c68cf4239f1e990aebcde51523a637bc", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -119,140 +119,140 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @sadd_i8x2\n #[no_mangle]\n pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x4\n #[no_mangle]\n pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x8\n #[no_mangle]\n pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x16\n #[no_mangle]\n pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x32\n #[no_mangle]\n pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x64\n #[no_mangle]\n pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x2\n #[no_mangle]\n pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x4\n #[no_mangle]\n pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x8\n #[no_mangle]\n pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x16\n #[no_mangle]\n pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x32\n #[no_mangle]\n pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x2\n #[no_mangle]\n pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x4\n #[no_mangle]\n pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x8\n #[no_mangle]\n pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x16\n #[no_mangle]\n pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x2\n #[no_mangle]\n pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x4\n #[no_mangle]\n pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x8\n #[no_mangle]\n pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x2\n #[no_mangle]\n pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x4\n #[no_mangle]\n pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -261,140 +261,140 @@ pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @uadd_u8x2\n #[no_mangle]\n pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x4\n #[no_mangle]\n pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x8\n #[no_mangle]\n pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x16\n #[no_mangle]\n pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x32\n #[no_mangle]\n pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x64\n #[no_mangle]\n pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x2\n #[no_mangle]\n pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x4\n #[no_mangle]\n pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x8\n #[no_mangle]\n pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x16\n #[no_mangle]\n pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x32\n #[no_mangle]\n pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x2\n #[no_mangle]\n pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x4\n #[no_mangle]\n pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x8\n #[no_mangle]\n pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x16\n #[no_mangle]\n pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x2\n #[no_mangle]\n pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x4\n #[no_mangle]\n pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x8\n #[no_mangle]\n pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x2\n #[no_mangle]\n pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x4\n #[no_mangle]\n pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -405,140 +405,140 @@ pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n // CHECK-LABEL: @ssub_i8x2\n #[no_mangle]\n pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x4\n #[no_mangle]\n pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x8\n #[no_mangle]\n pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x16\n #[no_mangle]\n pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x32\n #[no_mangle]\n pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x64\n #[no_mangle]\n pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x2\n #[no_mangle]\n pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x4\n #[no_mangle]\n pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x8\n #[no_mangle]\n pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x16\n #[no_mangle]\n pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x32\n #[no_mangle]\n pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x2\n #[no_mangle]\n pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x4\n #[no_mangle]\n pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x8\n #[no_mangle]\n pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x16\n #[no_mangle]\n pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x2\n #[no_mangle]\n pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x4\n #[no_mangle]\n pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x8\n #[no_mangle]\n pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x2\n #[no_mangle]\n pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x4\n #[no_mangle]\n pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n@@ -547,139 +547,139 @@ pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @usub_u8x2\n #[no_mangle]\n pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x4\n #[no_mangle]\n pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x8\n #[no_mangle]\n pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x16\n #[no_mangle]\n pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x32\n #[no_mangle]\n pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x64\n #[no_mangle]\n pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x2\n #[no_mangle]\n pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x4\n #[no_mangle]\n pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x8\n #[no_mangle]\n pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x16\n #[no_mangle]\n pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x32\n #[no_mangle]\n pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x2\n #[no_mangle]\n pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x4\n #[no_mangle]\n pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x8\n #[no_mangle]\n pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x16\n #[no_mangle]\n pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x2\n #[no_mangle]\n pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x4\n #[no_mangle]\n pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x8\n #[no_mangle]\n pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x2\n #[no_mangle]\n pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x4\n #[no_mangle]\n pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }"}, {"sha": "543664014868c5ad07606c2053bf3f6f0a866701", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -29,7 +29,7 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @bitmask_int\n #[no_mangle]\n pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -39,7 +39,7 @@ pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n // CHECK-LABEL: @bitmask_uint\n #[no_mangle]\n pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -49,7 +49,7 @@ pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n // CHECK-LABEL: @bitmask_int16\n #[no_mangle]\n pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9a-z]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n     // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n     // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n     // CHECK-NOT: zext"}, {"sha": "98a9ff9cbe441da5b50473fe093740cdd359ad78", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten vectors passed directly\n // compile-flags: -C no-prepopulate-passes\n \n // This test that using union forward the abi of the inner type, as"}, {"sha": "3fa3822831b5275b54d7e43df427a68f04a2d825", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,7 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n-// ignore-wasm32-bare compiled with panic=abort, personality not required\n+// ignore-emscripten compiled with panic=abort, personality not required\n \n #![no_std]\n "}, {"sha": "2bcb06d6eb8b7c976ac80659c75912b29cdda788", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,7 @@\n // Test that we detect changes to the `dep_kind` query. If the change is not\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n+// ignore-emscripten compiled with panic=abort by default\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "08a0232f661f72f9c8765f2151c5eced51bb8bc5", "filename": "src/test/incremental/commandline-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcommandline-args.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,7 @@\n // Test that changing a tracked commandline argument invalidates\n // the cache while changing an untracked one doesn't.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2 rpass3\n // compile-flags: -Z query-dep-graph\n "}, {"sha": "b01f02444eae8dfa516799efc3e30177dee12b19", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n "}, {"sha": "367416430f86b5a63c81aa0b637976982510753e", "filename": "src/test/incremental/span_hash_stable/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -3,6 +3,7 @@\n // the spans and this test makes sure that we handle them correctly by hashing\n // file:line:column instead of raw byte offset.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -g -Z query-dep-graph\n "}, {"sha": "f5cae15a4bc7cf22a3d4021625bd4e3af3ffdbba", "filename": "src/test/incremental/spans_in_type_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,7 @@\n // Test that moving a type definition within a source file does not affect\n // re-compilation.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph -g\n "}, {"sha": "e6fdc7cb3a0fc24138d3ea1e113fff88757a592e", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -3,6 +3,7 @@\n \n // revisions:rpass1 rpass2\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n \n #![feature(rustc_attrs)]"}, {"sha": "4b66c07b0934b48560f6276bfbaae6f4de180bca", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "b595c100039d6bed04a7c5ae388a61668ad8e0b7", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "8824496fdb07cc4a68530ae82a862828d20c52a6", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // check that we don't emit multiple drop flags when they are not needed.\n "}, {"sha": "93250fd48d82d00935eb568c10135625baa5b78c", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,7 +1,7 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n // ignore-tidy-linelength\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "370cd593b02bb75aad365419f82e84c6bfa35965", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // Test that after the call to `std::mem::drop` we do not generate a\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code"}, {"sha": "eaa1fbd69ecc6beec8277fa021d44118a4bc577a", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "71beaa736639ddfa8151b6b953a779f3dfc2d129", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n // Test that the fake borrows for matches are removed after borrow checking.\n \n-// ignore-wasm32-bare\n+// ignore-emscripten compiled with panic=abort by default\n \n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {"}, {"sha": "a0bdfb3ab8ba94c9fb5fae19aafb2fe6cf476c0c", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n "}, {"sha": "2f48b852566e0370e2ff9dbb2f0a48fcf128181b", "filename": "src/test/run-make/wasm-custom-section/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "76698c0aae3ba509a6e942522c9fb1df09876812", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown"}, {"sha": "7e47ba4850e38a2047082f3143467d6b5b050736", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown"}, {"sha": "fe63e66f242b4c5e03fd0bc271fdb7c6e24c7378", "filename": "src/test/run-make/wasm-import-module/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n- # only-wasm32\n+ # only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "68397e4bc6e18332b5875f9327759f3374d13039", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a"}, {"sha": "62bd0f0872ebee45a5306b8f8f551b4be02ff356", "filename": "src/test/run-make/wasm-symbols-not-exported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "7a923375c1813720912b3b075f7f599c03834289", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "03094885065847b8a7f9624af9a1d9fe5e9ef647", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b56c660c9cf55b240d26854fa0ffd41db068ff9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5b56c660c9cf55b240d26854fa0ffd41db068ff9", "patch": "@@ -141,7 +141,10 @@ impl EarlyProps {\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n-\n+                // FIXME: Re-enable run-fail once panics are handled correctly\n+                if config.target.contains(\"emscripten\") && config.mode == common::RunFail {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&"}]}