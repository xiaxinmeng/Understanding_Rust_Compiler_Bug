{"sha": "526856768d1fcd78844e4b5aceeca9c871ba047d", "node_id": "C_kwDOAAsO6NoAKDUyNjg1Njc2OGQxZmNkNzg4NDRlNGI1YWNlZWNhOWM4NzFiYTA0N2Q", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:17:33Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:17:33Z"}, "message": "ctfe, `const_to_op` only for mir constants", "tree": {"sha": "6ed3eee5aaac135971515aaf5acb6a4561d6d57a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed3eee5aaac135971515aaf5acb6a4561d6d57a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526856768d1fcd78844e4b5aceeca9c871ba047d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526856768d1fcd78844e4b5aceeca9c871ba047d", "html_url": "https://github.com/rust-lang/rust/commit/526856768d1fcd78844e4b5aceeca9c871ba047d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526856768d1fcd78844e4b5aceeca9c871ba047d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638b6121549f664b7fbff7f700294153248db178", "url": "https://api.github.com/repos/rust-lang/rust/commits/638b6121549f664b7fbff7f700294153248db178", "html_url": "https://github.com/rust-lang/rust/commit/638b6121549f664b7fbff7f700294153248db178"}], "stats": {"total": 89, "additions": 40, "deletions": 49}, "files": [{"sha": "7cc2a93cdeb3998162bc8e297f8c2161211f9289", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n ) -> InterpResult<'tcx, mir::DestructuredMirConstant<'tcx>> {\n     trace!(\"destructure_mir_constant: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.mir_const_to_op(&val, None)?;\n+    let op = ecx.const_to_op(&val, None)?;\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n@@ -139,7 +139,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n     val: mir::ConstantKind<'tcx>,\n ) -> mir::ConstantKind<'tcx> {\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.mir_const_to_op(&val, None).unwrap();\n+    let op = ecx.const_to_op(&val, None).unwrap();\n     let mplace = ecx.deref_operand(&op).unwrap();\n     if let Some(alloc_id) = mplace.ptr.provenance {\n         assert_eq!("}, {"sha": "aa6be2bb10961c568b48a7bf2a4bb4bb7212e05a", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -683,11 +683,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.stack_mut().push(frame);\n \n         // Make sure all the constants required by this frame evaluate successfully (post-monomorphization check).\n-        for const_ in &body.required_consts {\n-            let span = const_.span;\n-            let const_ =\n-                self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal)?;\n-            self.mir_const_to_op(&const_, None).map_err(|err| {\n+        for ct in &body.required_consts {\n+            let span = ct.span;\n+            let ct = self.subst_from_current_frame_and_normalize_erasing_regions(ct.literal)?;\n+            self.const_to_op(&ct, None).map_err(|err| {\n                 // If there was an error, set the span of the current frame to this constant.\n                 // Avoiding doing this when evaluation succeeds.\n                 self.frame_mut().loc = Err(span);"}, {"sha": "dc5305aabcf8972c7c49e97a2aaa8036ab9e97a9", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -534,7 +534,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // * During ConstProp, with `TooGeneric` or since the `required_consts` were not all\n                 //   checked yet.\n                 // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n-                self.mir_const_to_op(&val, layout)?\n+                self.const_to_op(&val, layout)?\n             }\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n@@ -549,50 +549,42 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ops.iter().map(|op| self.eval_operand(op, None)).collect()\n     }\n \n-    // Used when the miri-engine runs into a constant and for extracting information from constants\n-    // in patterns via the `const_eval` module\n-    /// The `val` and `layout` are assumed to already be in our interpreter\n-    /// \"universe\" (param_env).\n     pub fn const_to_op(\n-        &self,\n-        c: ty::Const<'tcx>,\n-        layout: Option<TyAndLayout<'tcx>>,\n-    ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        match c.kind() {\n-            ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n-                throw_inval!(AlreadyReported(reported))\n-            }\n-            ty::ConstKind::Unevaluated(uv) => {\n-                // NOTE: We evaluate to a `ValTree` here as a check to ensure\n-                // we're working with valid constants, even though we never need it.\n-                let instance = self.resolve(uv.def, uv.substs)?;\n-                let cid = GlobalId { instance, promoted: None };\n-                let _valtree = self\n-                    .tcx\n-                    .eval_to_valtree(self.param_env.and(cid))?\n-                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {:?}\", uv));\n-\n-                Ok(self.eval_to_allocation(cid)?.into())\n-            }\n-            ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n-                span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n-            }\n-            ty::ConstKind::Value(valtree) => {\n-                let ty = c.ty();\n-                let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n-                self.const_val_to_op(const_val, ty, layout)\n-            }\n-        }\n-    }\n-\n-    pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         match val {\n-            mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n+            mir::ConstantKind::Ty(ct) => {\n+                match ct.kind() {\n+                    ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n+                        throw_inval!(TooGeneric)\n+                    }\n+                    ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                        throw_inval!(AlreadyReported(reported))\n+                    }\n+                    ty::ConstKind::Unevaluated(uv) => {\n+                        // NOTE: We evaluate to a `ValTree` here as a check to ensure\n+                        // we're working with valid constants, even though we never need it.\n+                        let instance = self.resolve(uv.def, uv.substs)?;\n+                        let cid = GlobalId { instance, promoted: None };\n+                        let _valtree = self\n+                            .tcx\n+                            .eval_to_valtree(self.param_env.and(cid))?\n+                            .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"));\n+\n+                        Ok(self.eval_to_allocation(cid)?.into())\n+                    }\n+                    ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n+                        span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {ct:?}\")\n+                    }\n+                    ty::ConstKind::Value(valtree) => {\n+                        let ty = ct.ty();\n+                        let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n+                        self.const_val_to_op(const_val, ty, layout)\n+                    }\n+                }\n+            }\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n             mir::ConstantKind::Unevaluated(uv, _) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;"}, {"sha": "432f6aab2732903cc9ba29a56c09269e9b3edb40", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -679,7 +679,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, LocalVarId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, Symbol, LocalVarId, usize,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}, {"sha": "b3d2400c0747a63686f82acfb17a9da43fe07fbe", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -471,7 +471,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.ecx.mir_const_to_op(&c.literal, None).ok()\n+        self.ecx.const_to_op(&c.literal, None).ok()\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "4e8df61e39103b9a26cabd6815d9f116a5340160", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526856768d1fcd78844e4b5aceeca9c871ba047d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=526856768d1fcd78844e4b5aceeca9c871ba047d", "patch": "@@ -292,7 +292,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        match self.ecx.mir_const_to_op(&c.literal, None) {\n+        match self.ecx.const_to_op(&c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);"}]}