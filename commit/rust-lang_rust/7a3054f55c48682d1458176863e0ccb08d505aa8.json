{"sha": "7a3054f55c48682d1458176863e0ccb08d505aa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzA1NGY1NWM0ODY4MmQxNDU4MTc2ODYzZTBjY2IwOGQ1MDVhYTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-11T07:32:25Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:14:17Z"}, "message": "rustc_resolve: remove the distinction between DefStaticMethod and DefMethod.", "tree": {"sha": "1dacd27d04fb4453498e557d813de3e83a78285d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dacd27d04fb4453498e557d813de3e83a78285d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3054f55c48682d1458176863e0ccb08d505aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3054f55c48682d1458176863e0ccb08d505aa8", "html_url": "https://github.com/rust-lang/rust/commit/7a3054f55c48682d1458176863e0ccb08d505aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3054f55c48682d1458176863e0ccb08d505aa8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f49254b31353a80710af50e4f387740d154e60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f49254b31353a80710af50e4f387740d154e60b", "html_url": "https://github.com/rust-lang/rust/commit/0f49254b31353a80710af50e4f387740d154e60b"}], "stats": {"total": 248, "additions": 89, "deletions": 159}, "files": [{"sha": "f5c4cce065955659fddcfcc17c6f0d4dee2d426e", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -150,12 +150,9 @@ pub fn get_trait_name(cstore: &cstore::CStore, def: ast::DefId) -> ast::Name {\n                             def.node)\n }\n \n-pub fn get_trait_item_name_and_kind(cstore: &cstore::CStore, def: ast::DefId)\n-                                    -> (ast::Name, def::TraitItemKind) {\n+pub fn is_static_method(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n     let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_trait_item_name_and_kind(cstore.intr.clone(),\n-                                          &*cdata,\n-                                          def.node)\n+    decoder::is_static_method(&*cdata, def.node)\n }\n \n pub fn get_trait_item_def_ids(cstore: &cstore::CStore, def: ast::DefId)"}, {"sha": "0503045ac6e2d1673027bdf9bf1ede727c0c6f23", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -334,12 +334,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n                 def::FromImpl(item_reqd_and_translated_parent_item(cnum,\n                                                                    item))\n             };\n-            match fam {\n-                // We don't bother to get encode/decode the trait id, we don't need it.\n-                Method => DlDef(def::DefMethod(did, None, provenance)),\n-                StaticMethod => DlDef(def::DefStaticMethod(did, provenance)),\n-                _ => panic!()\n-            }\n+            DlDef(def::DefMethod(did, provenance))\n         }\n         Type => {\n             if item_sort(item) == Some('t') {\n@@ -853,22 +848,13 @@ pub fn get_trait_name(intr: Rc<IdentInterner>,\n     item_name(&*intr, doc)\n }\n \n-pub fn get_trait_item_name_and_kind(intr: Rc<IdentInterner>,\n-                                    cdata: Cmd,\n-                                    id: ast::NodeId)\n-                                    -> (ast::Name, def::TraitItemKind) {\n+pub fn is_static_method(cdata: Cmd, id: ast::NodeId) -> bool {\n     let doc = lookup_item(id, cdata.data());\n-    let name = item_name(&*intr, doc);\n     match item_sort(doc) {\n         Some('r') | Some('p') => {\n-            let explicit_self = get_explicit_self(doc);\n-            (name, def::TraitItemKind::from_explicit_self_category(explicit_self))\n-        }\n-        Some('t') => (name, def::TypeTraitItemKind),\n-        c => {\n-            panic!(\"get_trait_item_name_and_kind(): unknown trait item kind \\\n-                   in metadata: `{:?}`\", c)\n+            get_explicit_self(doc) == ty::StaticExplicitSelfCategory\n         }\n+        _ => false\n     }\n }\n "}, {"sha": "3de29a4ca538adf3f022361eddbef1a4a237271c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -423,13 +423,8 @@ impl tr for def::Def {\n     fn tr(&self, dcx: &DecodeContext) -> def::Def {\n         match *self {\n           def::DefFn(did, is_ctor) => def::DefFn(did.tr(dcx), is_ctor),\n-          def::DefStaticMethod(did, p) => {\n-            def::DefStaticMethod(did.tr(dcx), p.map(|did2| did2.tr(dcx)))\n-          }\n-          def::DefMethod(did0, did1, p) => {\n-            def::DefMethod(did0.tr(dcx),\n-                           did1.map(|did1| did1.tr(dcx)),\n-                           p.map(|did2| did2.tr(dcx)))\n+          def::DefMethod(did, p) => {\n+            def::DefMethod(did.tr(dcx), p.map(|did2| did2.tr(dcx)))\n           }\n           def::DefSelfTy(nid) => { def::DefSelfTy(dcx.tr_id(nid)) }\n           def::DefMod(did) => { def::DefMod(did.tr(dcx)) }"}, {"sha": "0d7e730b5cdd80c9f415891066eb2850449ae0a4", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -452,8 +452,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                         v.add_qualif(NON_ZERO_SIZED);\n                     }\n                 }\n-                Some(def::DefFn(..)) |\n-                Some(def::DefStaticMethod(..)) | Some(def::DefMethod(..)) => {\n+                Some(def::DefFn(..)) | Some(def::DefMethod(..)) => {\n                     // Count the function pointer.\n                     v.add_qualif(NON_ZERO_SIZED);\n                 }"}, {"sha": "355c52b374e0174ad23ab25ea0c16a096d8263e6", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -10,10 +10,8 @@\n \n pub use self::Def::*;\n pub use self::MethodProvenance::*;\n-pub use self::TraitItemKind::*;\n \n use middle::subst::ParamSpace;\n-use middle::ty::{ExplicitSelfCategory, StaticExplicitSelfCategory};\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::ast_util::local_def;\n@@ -23,7 +21,6 @@ use std::cell::RefCell;\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n-    DefStaticMethod(/* method */ ast::DefId, MethodProvenance),\n     DefSelfTy(/* trait id */ ast::NodeId),\n     DefMod(ast::DefId),\n     DefForeignMod(ast::DefId),\n@@ -51,7 +48,7 @@ pub enum Def {\n     DefStruct(ast::DefId),\n     DefRegion(ast::NodeId),\n     DefLabel(ast::NodeId),\n-    DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */, MethodProvenance),\n+    DefMethod(ast::DefId /* method */, MethodProvenance),\n }\n \n /// The result of resolving the prefix of a path to a type:\n@@ -99,25 +96,6 @@ impl MethodProvenance {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq)]\n-pub enum TraitItemKind {\n-    NonstaticMethodTraitItemKind,\n-    StaticMethodTraitItemKind,\n-    TypeTraitItemKind,\n-}\n-\n-impl TraitItemKind {\n-    pub fn from_explicit_self_category(explicit_self_category:\n-                                       ExplicitSelfCategory)\n-                                       -> TraitItemKind {\n-        if explicit_self_category == StaticExplicitSelfCategory {\n-            StaticMethodTraitItemKind\n-        } else {\n-            NonstaticMethodTraitItemKind\n-        }\n-    }\n-}\n-\n impl Def {\n     pub fn local_node_id(&self) -> ast::NodeId {\n         let def_id = self.def_id();\n@@ -127,11 +105,10 @@ impl Def {\n \n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n-            DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n-            DefForeignMod(id) | DefStatic(id, _) |\n+            DefFn(id, _) | DefMod(id) | DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(_, id) |\n             DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n-            DefMethod(id, _, _) | DefConst(id) => {\n+            DefMethod(id, _) | DefConst(id) => {\n                 id\n             }\n             DefLocal(id) |"}, {"sha": "f8065f81aa8d8b56a264fa5e87af913545f08fbc", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -575,7 +575,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n         match def {\n           def::DefStruct(..) | def::DefVariant(..) | def::DefConst(..) |\n-          def::DefFn(..) | def::DefStaticMethod(..) |  def::DefMethod(..) => {\n+          def::DefFn(..) | def::DefMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n           def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |"}, {"sha": "c8695ef4ff04a7ddfc0919cb004cfff9d59c4d6d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -4584,7 +4584,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n                 def::DefFn(_, true) => RvalueDpsExpr,\n \n                 // Fn pointers are just scalar values.\n-                def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) => RvalueDatumExpr,\n+                def::DefFn(..) | def::DefMethod(..) => RvalueDatumExpr,\n \n                 // Note: there is actually a good case to be made that\n                 // DefArg's, particularly those of immediate type, ought to"}, {"sha": "439e4331e353a4043535183342e2833b703e89c0", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -795,7 +795,6 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         // be accurate and we can get slightly wonky error messages (but type\n         // checking is always correct).\n         match self.tcx.def_map.borrow()[path_id].clone() {\n-            def::DefStaticMethod(..) => ck(\"static method\"),\n             def::DefFn(..) => ck(\"function\"),\n             def::DefStatic(..) => ck(\"static\"),\n             def::DefConst(..) => ck(\"const\"),\n@@ -804,7 +803,6 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefTy(_, true) => ck(\"enum\"),\n             def::DefTrait(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n-            def::DefMethod(_, Some(..), _) => ck(\"trait method\"),\n             def::DefMethod(..) => ck(\"method\"),\n             def::DefMod(..) => ck(\"module\"),\n             _ => {}"}, {"sha": "abfb226994a539b4277659de66ab26a19097188d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 17, "deletions": 48, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -40,8 +40,7 @@ use syntax::ast::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n use syntax::ast::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use syntax::ast::{MethodImplItem, Name, NamedField, NodeId};\n-use syntax::ast::{PathListIdent, PathListMod};\n-use syntax::ast::{Public, SelfStatic};\n+use syntax::ast::{PathListIdent, PathListMod, Public};\n use syntax::ast::StmtDecl;\n use syntax::ast::StructVariantKind;\n use syntax::ast::TupleVariantKind;\n@@ -598,22 +597,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                &new_parent,\n                                                ForbidDuplicateValues,\n                                                method.span);\n-                            let def = match method.pe_explicit_self()\n-                                .node {\n-                                    SelfStatic => {\n-                                        // Static methods become\n-                                        // `DefStaticMethod`s.\n-                                        DefStaticMethod(local_def(method.id),\n-                                                        FromImpl(local_def(item.id)))\n-                                    }\n-                                    _ => {\n-                                        // Non-static methods become\n-                                        // `DefMethod`s.\n-                                        DefMethod(local_def(method.id),\n-                                                  None,\n-                                                  FromImpl(local_def(item.id)))\n-                                    }\n-                                };\n+                            let def = DefMethod(local_def(method.id),\n+                                                FromImpl(local_def(item.id)));\n \n                             // NB: not IMPORTABLE\n                             let modifiers = if method.pe_vis() == ast::Public {\n@@ -674,31 +659,16 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 // Add the names of all the items to the trait info.\n                 for trait_item in items {\n-                    let (name, kind) = match *trait_item {\n+                    let (name, trait_item_id) = match *trait_item {\n                         ast::RequiredMethod(_) |\n                         ast::ProvidedMethod(_) => {\n                             let ty_m = ast_util::trait_item_to_ty_method(trait_item);\n \n                             let name = ty_m.ident.name;\n \n                             // Add it as a name in the trait module.\n-                            let (def, static_flag) = match ty_m.explicit_self\n-                                                               .node {\n-                                SelfStatic => {\n-                                    // Static methods become `DefStaticMethod`s.\n-                                    (DefStaticMethod(\n-                                            local_def(ty_m.id),\n-                                            FromTrait(local_def(item.id))),\n-                                     StaticMethodTraitItemKind)\n-                                }\n-                                _ => {\n-                                    // Non-static methods become `DefMethod`s.\n-                                    (DefMethod(local_def(ty_m.id),\n-                                               Some(local_def(item.id)),\n-                                               FromTrait(local_def(item.id))),\n-                                     NonstaticMethodTraitItemKind)\n-                                }\n-                            };\n+                            let def = DefMethod(local_def(ty_m.id),\n+                                                FromTrait(local_def(item.id)));\n \n                             let method_name_bindings =\n                                 self.add_child(name,\n@@ -710,7 +680,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                               ty_m.span,\n                                                               PUBLIC);\n \n-                            (name, static_flag)\n+                            (name, local_def(ty_m.id))\n                         }\n                         ast::TypeTraitItem(ref associated_type) => {\n                             let def = DefAssociatedTy(local_def(item.id),\n@@ -726,11 +696,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                       associated_type.ty_param.span,\n                                                       PUBLIC);\n \n-                            (associated_type.ty_param.ident.name, TypeTraitItemKind)\n+                            (associated_type.ty_param.ident.name,\n+                             local_def(associated_type.ty_param.id))\n                         }\n                     };\n \n-                    self.trait_item_map.insert((name, def_id), kind);\n+                    self.trait_item_map.insert((name, def_id), trait_item_id);\n                 }\n \n                 name_bindings.define_type(DefTrait(def_id), sp, modifiers);\n@@ -889,7 +860,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 csearch::get_tuple_struct_definition_if_ctor(&self.session.cstore, ctor_id)\n                     .map_or(def, |_| DefStruct(ctor_id)), DUMMY_SP, modifiers);\n           }\n-          DefFn(..) | DefStaticMethod(..) | DefStatic(..) | DefConst(..) | DefMethod(..) => {\n+          DefFn(..) | DefStatic(..) | DefConst(..) | DefMethod(..) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value (fn/static) {}\", final_ident);\n             // impl methods have already been defined with the correct importability modifier\n@@ -911,21 +882,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n               let trait_item_def_ids =\n                 csearch::get_trait_item_def_ids(&self.session.cstore, def_id);\n-              for trait_item_def_id in &trait_item_def_ids {\n-                  let (trait_item_name, trait_item_kind) =\n-                      csearch::get_trait_item_name_and_kind(\n-                          &self.session.cstore,\n-                          trait_item_def_id.def_id());\n+              for trait_item_def in &trait_item_def_ids {\n+                  let trait_item_name = csearch::get_trait_name(&self.session.cstore,\n+                                                                trait_item_def.def_id());\n \n                   debug!(\"(building reduced graph for external crate) ... \\\n                           adding trait item '{}'\",\n                          token::get_name(trait_item_name));\n \n-                  self.trait_item_map.insert((trait_item_name, def_id), trait_item_kind);\n+                  self.trait_item_map.insert((trait_item_name, def_id),\n+                                             trait_item_def.def_id());\n \n                   if is_exported {\n-                      self.external_exports\n-                          .insert(trait_item_def_id.def_id());\n+                      self.external_exports.insert(trait_item_def.def_id());\n                   }\n               }\n "}, {"sha": "b85ac04cc9e239e9aa4ea987fdbb88794923785c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -900,7 +900,7 @@ struct Resolver<'a, 'tcx:'a> {\n \n     graph_root: NameBindings,\n \n-    trait_item_map: FnvHashMap<(Name, DefId), TraitItemKind>,\n+    trait_item_map: FnvHashMap<(Name, DefId), DefId>,\n \n     structs: FnvHashMap<DefId, Vec<Name>>,\n \n@@ -3128,7 +3128,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn check_trait_item(&self, name: Name, span: Span) {\n         // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n         if let Some((did, ref trait_ref)) = self.current_trait_ref {\n-            if self.trait_item_map.get(&(name, did)).is_none() {\n+            if !self.trait_item_map.contains_key(&(name, did)) {\n                 let path_str = self.path_names_to_string(&trait_ref.path, 0);\n                 self.resolve_error(span,\n                                     &format!(\"method `{}` is not a member of trait `{}`\",\n@@ -3958,6 +3958,26 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n+        fn is_static_method(this: &Resolver, did: DefId) -> bool {\n+            if did.krate == ast::LOCAL_CRATE {\n+                let explicit_self = match this.ast_map.get(did.node) {\n+                    ast_map::NodeTraitItem(m) => match *m {\n+                        ast::RequiredMethod(ref m) => &m.explicit_self,\n+                        ast::ProvidedMethod(ref m) => m.pe_explicit_self(),\n+                        _ => return false\n+                    },\n+                    ast_map::NodeImplItem(m) => match *m {\n+                        ast::MethodImplItem(ref m) => m.pe_explicit_self(),\n+                        _ => return false\n+                    },\n+                    _ => return false\n+                };\n+                explicit_self.node == ast::SelfStatic\n+            } else {\n+                csearch::is_static_method(&this.session.cstore, did)\n+            }\n+        }\n+\n         let (path, node_id, allowed) = match self.current_self_type {\n             Some(ref ty) => match extract_path_and_node_id(ty, Everything) {\n                 Some(x) => x,\n@@ -3986,41 +4006,30 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let name_path = path.segments.iter().map(|seg| seg.identifier.name).collect::<Vec<_>>();\n \n         // Look for a method in the current self type's impl module.\n-        match get_module(self, path.span, &name_path[..]) {\n-            Some(module) => match module.children.borrow().get(&name) {\n-                Some(binding) => {\n-                    let p_str = self.path_names_to_string(&path, 0);\n-                    match binding.def_for_namespace(ValueNS) {\n-                        Some(DefStaticMethod(_, provenance)) => {\n-                            match provenance {\n-                                FromImpl(_) => return StaticMethod(p_str),\n-                                FromTrait(_) => unreachable!()\n-                            }\n-                        }\n-                        Some(DefMethod(_, None, _)) if allowed == Everything => return Method,\n-                        Some(DefMethod(_, Some(_), _)) => return TraitItem,\n-                        _ => ()\n+        if let Some(module) = get_module(self, path.span, &name_path) {\n+            if let Some(binding) = module.children.borrow().get(&name) {\n+                if let Some(DefMethod(did, _)) = binding.def_for_namespace(ValueNS) {\n+                    if is_static_method(self, did) {\n+                        return StaticMethod(self.path_names_to_string(&path, 0))\n+                    }\n+                    if self.current_trait_ref.is_some() {\n+                        return TraitItem;\n+                    } else if allowed == Everything {\n+                        return Method;\n                     }\n                 }\n-                None => {}\n-            },\n-            None => {}\n+            }\n         }\n \n         // Look for a method in the current trait.\n-        match self.current_trait_ref {\n-            Some((did, ref trait_ref)) => {\n-                let path_str = self.path_names_to_string(&trait_ref.path, 0);\n-\n-                match self.trait_item_map.get(&(name, did)) {\n-                    Some(&StaticMethodTraitItemKind) => {\n-                        return TraitMethod(path_str)\n-                    }\n-                    Some(_) => return TraitItem,\n-                    None => {}\n+        if let Some((trait_did, ref trait_ref)) = self.current_trait_ref {\n+            if let Some(&did) = self.trait_item_map.get(&(name, trait_did)) {\n+                if is_static_method(self, did) {\n+                    return TraitMethod(self.path_names_to_string(&trait_ref.path, 0));\n+                } else {\n+                    return TraitItem;\n                 }\n             }\n-            None => {}\n         }\n \n         NoSuggestion"}, {"sha": "5484e3c7c5fc2813b64d4e539886048cf1c02746", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -250,7 +250,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefSelfTy(_) |\n             def::DefRegion(_) |\n             def::DefLabel(_) |\n-            def::DefStaticMethod(..) |\n             def::DefTyParam(..) |\n             def::DefUse(_) |\n             def::DefMethod(..) |\n@@ -815,8 +814,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                                       sub_span,\n                                                       def_id,\n                                                       self.cur_scope),\n-            def::DefStaticMethod(declid, provenence) |\n-            def::DefMethod(declid, _, provenence) => {\n+            def::DefMethod(declid, provenence) => {\n                 let sub_span = self.span.sub_span_for_meth_name(span);\n                 let defid = if declid.krate == ast::LOCAL_CRATE {\n                     let ti = ty::impl_or_trait_item(&self.analysis.ty_cx,\n@@ -872,7 +870,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         }\n         // modules or types in the path prefix\n         match *def {\n-            def::DefStaticMethod(..) => self.write_sub_path_trait_truncated(path),\n+            def::DefMethod(did, _) => {\n+                let ti = ty::impl_or_trait_item(&self.analysis.ty_cx, did);\n+                if let ty::MethodTraitItem(m) = ti {\n+                    if m.explicit_self == ty::StaticExplicitSelfCategory {\n+                        self.write_sub_path_trait_truncated(path);\n+                    }\n+                }\n+            }\n             def::DefLocal(_) |\n             def::DefStatic(_,_) |\n             def::DefConst(..) |"}, {"sha": "41e3d4b5bab250e9c9109af5674b918ba3fc1238", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -165,13 +165,11 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                 let def_id = inline::maybe_instantiate_inline(bcx.ccx(), did);\n                 Callee { bcx: bcx, data: Intrinsic(def_id.node, substs) }\n             }\n-            def::DefFn(did, _) | def::DefMethod(did, _, def::FromImpl(_)) |\n-            def::DefStaticMethod(did, def::FromImpl(_)) => {\n+            def::DefFn(did, _) | def::DefMethod(did, def::FromImpl(_)) => {\n                 fn_callee(bcx, trans_fn_ref(bcx.ccx(), did, ExprId(ref_expr.id),\n                                             bcx.fcx.param_substs).val)\n             }\n-            def::DefStaticMethod(meth_did, def::FromTrait(trait_did)) |\n-            def::DefMethod(meth_did, _, def::FromTrait(trait_did)) => {\n+            def::DefMethod(meth_did, def::FromTrait(trait_did)) => {\n                 fn_callee(bcx, meth::trans_static_method_callee(bcx.ccx(),\n                                                                 meth_did,\n                                                                 trait_did,"}, {"sha": "e321c5f0a13d5bd9ca2a1c1f733142da525ce129", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -666,7 +666,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n           ast::ExprPath(_) | ast::ExprQPath(_) => {\n             let def = cx.tcx().def_map.borrow()[e.id];\n             match def {\n-                def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) => {\n+                def::DefFn(..) | def::DefMethod(..) => {\n                     expr::trans_def_fn_unadjusted(cx, e, def, param_substs).val\n                 }\n                 def::DefConst(def_id) => {"}, {"sha": "95c5122deacb677e0f4fd7192dbf198ea61df102", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -875,7 +875,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_def_lvalue\");\n     match def {\n-        def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) |\n+        def::DefFn(..) | def::DefMethod(..) |\n         def::DefStruct(_) | def::DefVariant(..) => {\n             let datum = trans_def_fn_unadjusted(bcx.ccx(), ref_expr, def,\n                                                 bcx.fcx.param_substs);\n@@ -1275,12 +1275,10 @@ pub fn trans_def_fn_unadjusted<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     match def {\n         def::DefFn(did, _) |\n         def::DefStruct(did) | def::DefVariant(_, did, _) |\n-        def::DefStaticMethod(did, def::FromImpl(_)) |\n-        def::DefMethod(did, _, def::FromImpl(_)) => {\n+        def::DefMethod(did, def::FromImpl(_)) => {\n             callee::trans_fn_ref(ccx, did, ExprId(ref_expr.id), param_substs)\n         }\n-        def::DefStaticMethod(impl_did, def::FromTrait(trait_did)) |\n-        def::DefMethod(impl_did, _, def::FromTrait(trait_did)) => {\n+        def::DefMethod(impl_did, def::FromTrait(trait_did)) => {\n             meth::trans_static_method_callee(ccx, impl_did,\n                                              trait_did, ref_expr.id,\n                                              param_substs)"}, {"sha": "4daa9a5d80ab001599e96e60729ad4c51a9a2539", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -4627,7 +4627,7 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             (ty::TypeScheme { generics: ty::Generics::empty(), ty: typ },\n              ty::GenericPredicates::empty())\n         }\n-        def::DefFn(id, _) | def::DefStaticMethod(id, _) | def::DefMethod(id, _, _) |\n+        def::DefFn(id, _) | def::DefMethod(id, _) |\n         def::DefStatic(id, _) | def::DefVariant(_, id, _) |\n         def::DefStruct(id) | def::DefConst(id) => {\n             (ty::lookup_item_type(fcx.tcx(), id), ty::lookup_predicates(fcx.tcx(), id))\n@@ -4751,8 +4751,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n \n         // Case 3. Reference to a method.\n-        def::DefStaticMethod(_, providence) |\n-        def::DefMethod(_, _, providence) => {\n+        def::DefMethod(_, providence) => {\n             assert!(path.segments.len() >= 2);\n \n             match providence {"}, {"sha": "51b6dc0d07865eda130cbc0e8633f90907501550", "filename": "src/test/compile-fail/issue-13641.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3054f55c48682d1458176863e0ccb08d505aa8/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs?ref=7a3054f55c48682d1458176863e0ccb08d505aa8", "patch": "@@ -17,9 +17,9 @@ mod a {\n \n fn main() {\n     a::Foo::new();\n-    //~^ ERROR: static method `new` is inaccessible\n+    //~^ ERROR: method `new` is inaccessible\n     //~^^ NOTE: struct `Foo` is private\n     a::Bar::new();\n-    //~^ ERROR: static method `new` is inaccessible\n+    //~^ ERROR: method `new` is inaccessible\n     //~^^ NOTE: enum `Bar` is private\n }"}]}