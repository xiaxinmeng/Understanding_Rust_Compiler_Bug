{"sha": "cae4302003f32e808b822b1b7b351894548c6c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTQzMDIwMDNmMzJlODA4YjgyMmIxYjdiMzUxODk0NTQ4YzZjMGU=", "commit": {"author": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-02T03:06:30Z"}, "committer": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-02T03:06:30Z"}, "message": "Fix & rebase", "tree": {"sha": "569af8c6289a733cdc4663de9ba7593789993da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569af8c6289a733cdc4663de9ba7593789993da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae4302003f32e808b822b1b7b351894548c6c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae4302003f32e808b822b1b7b351894548c6c0e", "html_url": "https://github.com/rust-lang/rust/commit/cae4302003f32e808b822b1b7b351894548c6c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae4302003f32e808b822b1b7b351894548c6c0e/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed32b260f9243b1ebb08c033acd3d5079407a309", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed32b260f9243b1ebb08c033acd3d5079407a309", "html_url": "https://github.com/rust-lang/rust/commit/ed32b260f9243b1ebb08c033acd3d5079407a309"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "35898f1d937f8cdd18d3882f4703268c7de7cf46", "filename": "src/data_race.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cae4302003f32e808b822b1b7b351894548c6c0e/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae4302003f32e808b822b1b7b351894548c6c0e/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=cae4302003f32e808b822b1b7b351894548c6c0e", "patch": "@@ -176,19 +176,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let mut current_state = alloc.global.current_thread_state_mut();\n             if atomic == AtomicReadOp::Relaxed {\n                 // Perform relaxed atomic load\n-                for range in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n                     range.load_relaxed(&mut *current_state);\n                 }\n             }else{\n                 // Perform acquire(or seq-cst) atomic load\n-                for range in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n                     range.acquire(&mut *current_state);\n                 }\n             }\n \n             // Log changes to atomic memory\n             if log::log_enabled!(log::Level::Trace) {\n-                for range in alloc.alloc_ranges.get_mut().iter(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter(offset, size) {\n                     log::trace!(\n                         \"  updated atomic memory({:?}, offset={}, size={}) to {:#?}\",\n                         place.ptr.assert_ptr().alloc_id, offset.bytes(), size.bytes(),\n@@ -227,19 +227,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             if atomic == AtomicWriteOp::Relaxed {\n                 // Perform relaxed atomic store\n-                for range in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n                     range.store_relaxed(&mut *current_state, current_thread);\n                 }\n             }else{\n                 // Perform release(or seq-cst) atomic store\n-                for range in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n                     range.release(&mut *current_state, current_thread);\n                 }\n             }\n \n             // Log changes to atomic memory\n             if log::log_enabled!(log::Level::Trace) {\n-                for range in alloc.alloc_ranges.get_mut().iter(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter(offset, size) {\n                     log::trace!(\n                         \"  updated atomic memory({:?}, offset={}, size={}) to {:#?}\",\n                         place.ptr.assert_ptr().alloc_id, offset.bytes(), size.bytes(),\n@@ -279,7 +279,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             let acquire = matches!(atomic, Acquire | AcqRel | SeqCst);\n             let release = matches!(atomic, Release | AcqRel | SeqCst);\n-            for range in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n+            for (_,range) in alloc.alloc_ranges.get_mut().iter_mut(offset, size) {\n                 //FIXME: this is probably still slightly wrong due to the quirks\n                 // in the c++11 memory model\n                 if acquire {\n@@ -298,7 +298,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Log changes to atomic memory\n             if log::log_enabled!(log::Level::Trace) {\n-                for range in alloc.alloc_ranges.get_mut().iter(offset, size) {\n+                for (_,range) in alloc.alloc_ranges.get_mut().iter(offset, size) {\n                     log::trace!(\n                         \"  updated atomic memory({:?}, offset={}, size={}) to {:#?}\",\n                         place.ptr.assert_ptr().alloc_id, offset.bytes(), size.bytes(),\n@@ -733,7 +733,7 @@ impl VClockAlloc {\n             // The alloc-ranges are not split, however changes are not going to be made\n             //  to the ranges being tested, so this is ok\n             let mut alloc_ranges = self.alloc_ranges.borrow_mut();\n-            for range in alloc_ranges.iter_mut(pointer.offset, len) {\n+            for (_,range) in alloc_ranges.iter_mut(pointer.offset, len) {\n                 if range.read_race_detect(&*current_state, current_thread) {\n                     // Report data-race\n                     return Self::report_data_race(\n@@ -754,7 +754,7 @@ impl VClockAlloc {\n         if self.global.multi_threaded.get() {\n             let current_thread = self.global.current_thread();\n             let current_state = self.global.current_thread_state();\n-            for range in self.alloc_ranges.get_mut().iter_mut(pointer.offset, len) {\n+            for (_,range) in self.alloc_ranges.get_mut().iter_mut(pointer.offset, len) {\n                 if range.write_race_detect(&*current_state, current_thread) {\n                     // Report data-race\n                     return Self::report_data_race(\n@@ -775,7 +775,7 @@ impl VClockAlloc {\n         if self.global.multi_threaded.get() {\n             let current_thread = self.global.current_thread();\n             let current_state = self.global.current_thread_state();\n-            for range in self.alloc_ranges.get_mut().iter_mut(pointer.offset, len) {\n+            for (_,range) in self.alloc_ranges.get_mut().iter_mut(pointer.offset, len) {\n                 if range.write_race_detect(&*current_state, current_thread) {\n                     // Report data-race\n                     return Self::report_data_race("}]}