{"sha": "91b25a84df08d88c9bf7910da9d84ae30e410edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjI1YTg0ZGYwOGQ4OGM5YmY3OTEwZGE5ZDg0YWUzMGU0MTBlZGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-11-04T19:16:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-12-11T14:50:11Z"}, "message": "Fix some linking of LLVM's dynamic library\n\nEnsure it shows up in the same places it did before so tools can find it\nat runtime.", "tree": {"sha": "c0703bc9adf43ae3e8527a3ecc0653f39c079248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0703bc9adf43ae3e8527a3ecc0653f39c079248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b25a84df08d88c9bf7910da9d84ae30e410edb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3xAiMACgkQtAh+UQ6Y\nsWTENg/8Dz0xtalOxy0XRW0SPFfRV9/7YFPOZ1AZTq8hzr8MWj25fDPLx581an+y\n/Np+zFLvOtHbXzL/S8sunxjC4ouvjQxOG0yx8Pf0BKfuQijSeew6hDxs/Rt0UDKb\nwv/6sz+RNGt3NGGpbIIzEY5F/6ZLvU7OLfA0NkWgx8ht8CUHS2/TWR+8pLTHxnDc\n5J1/MKvJCTE5mjxadzesLfbt7YqFE+pHq9ZuXg+QF+IhOrCNmTQKXrOhKVjGgzxD\na+zgOIaf0A3QLlepBHKCOoFSR50nE8EBQpuOTf4P5+Pvc7KdkBbVZ9+djETMe/QK\ntj5DVy0SKILsA4Cqqm7SXX/fDb6AwUNjEV83WYiqEpO8hJaAxuk38pD3vp/7tVbr\nXEX5a6adOF28yssctDdoxR93FDOx7fZiJ7nCkO4mgf3glrjFj39YxUKH3HNP2lGz\n/23nnypYYilSUZdZlTXS2bqw9n9vxUdxfquXR05C01pNnVsBufNoEF/wcFSvt6Nl\n8Nb80lzAQ+W74U7Q2UoL+bj3h4vi0nJBbtU71/k7BuECUu7bt0FAOx8rN3yjnfHj\nNkLcqrRuzApgxXt4kyeRyFjdInvKEdB9cbTTmBwW1P8WDqIKgfkyez7Eurkjqsv+\nL5XR6DCnsPGy82EPCs0c04Ffl7kPRK903iMl6oQLsFk/uabv4d0=\n=YSgG\n-----END PGP SIGNATURE-----", "payload": "tree c0703bc9adf43ae3e8527a3ecc0653f39c079248\nparent 7f23e6e8d7479d8a430e007fab9b195b7ea0d261\nauthor Alex Crichton <alex@alexcrichton.com> 1572894990 -0800\ncommitter Aaron Hill <aa1ronham@gmail.com> 1576075811 -0500\n\nFix some linking of LLVM's dynamic library\n\nEnsure it shows up in the same places it did before so tools can find it\nat runtime.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b25a84df08d88c9bf7910da9d84ae30e410edb", "html_url": "https://github.com/rust-lang/rust/commit/91b25a84df08d88c9bf7910da9d84ae30e410edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b25a84df08d88c9bf7910da9d84ae30e410edb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f23e6e8d7479d8a430e007fab9b195b7ea0d261", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f23e6e8d7479d8a430e007fab9b195b7ea0d261", "html_url": "https://github.com/rust-lang/rust/commit/7f23e6e8d7479d8a430e007fab9b195b7ea0d261"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "c7b012f869f42310bf62ea379670eeebb8783ab0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=91b25a84df08d88c9bf7910da9d84ae30e410edb", "patch": "@@ -579,24 +579,6 @@ impl Step for RustcLink {\n     }\n }\n \n-fn copy_lld_to_sysroot(builder: &Builder<'_>,\n-                       target_compiler: Compiler,\n-                       lld_install_root: &Path) {\n-    let target = target_compiler.host;\n-\n-    let dst = builder.sysroot_libdir(target_compiler, target)\n-        .parent()\n-        .unwrap()\n-        .join(\"bin\");\n-    t!(fs::create_dir_all(&dst));\n-\n-    let src_exe = exe(\"lld\", &target);\n-    let dst_exe = exe(\"rust-lld\", &target);\n-    // we prepend this bin directory to the user PATH when linking Rust binaries. To\n-    // avoid shadowing the system LLD we rename the LLD we provide to `rust-lld`.\n-    builder.copy(&lld_install_root.join(\"bin\").join(&src_exe), &dst.join(&dst_exe));\n-}\n-\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(\n@@ -745,10 +727,16 @@ impl Step for Assemble {\n             }\n         }\n \n+        let libdir = builder.sysroot_libdir(target_compiler, target_compiler.host);\n         if let Some(lld_install) = lld_install {\n-            copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n+            let src_exe = exe(\"lld\", &target_compiler.host);\n+            let dst_exe = exe(\"rust-lld\", &target_compiler.host);\n+            // we prepend this bin directory to the user PATH when linking Rust binaries. To\n+            // avoid shadowing the system LLD we rename the LLD we provide to `rust-lld`.\n+            let dst = libdir.parent().unwrap().join(\"bin\");\n+            t!(fs::create_dir_all(&dst));\n+            builder.copy(&lld_install.join(\"bin\").join(&src_exe), &dst.join(&dst_exe));\n         }\n-\n         dist::maybe_install_llvm_dylib(builder, target_compiler.host, &sysroot);\n \n         // Link the compiler binary itself into place"}, {"sha": "02533944fc28fc560e9fbeb2c20f8766253ea8e1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=91b25a84df08d88c9bf7910da9d84ae30e410edb", "patch": "@@ -2124,6 +2124,10 @@ impl Step for HashSign {\n \n // Maybe add libLLVM.so to the lib-dir. It will only have been built if\n // LLVM tools are linked dynamically.\n+//\n+// We add this to both the libdir of the rustc binary itself (for it to load at\n+// runtime) and also to the target directory so it can find it at link-time.\n+//\n // Note: This function does no yet support Windows but we also don't support\n //       linking LLVM tools dynamically on Windows yet.\n pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n@@ -2132,13 +2136,19 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n     let src_libdir = builder\n         .llvm_out(target)\n         .join(\"lib\");\n-    let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n-    t!(fs::create_dir_all(&dst_libdir));\n+    let dst_libdir1 = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n+    let dst_libdir2 = sysroot.join(builder.sysroot_libdir_relative(Compiler {\n+        stage: 1,\n+        host: target,\n+    }));\n+    t!(fs::create_dir_all(&dst_libdir1));\n+    t!(fs::create_dir_all(&dst_libdir2));\n \n     if target.contains(\"apple-darwin\") {\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n-            builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+            builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n+            builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n         }\n         return\n     }\n@@ -2154,7 +2164,8 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n         });\n \n \n-        builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+        builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n+        builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n     }\n }\n "}, {"sha": "608cee0a80bfc9f602c8c60c78429f8f522e24ae", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b25a84df08d88c9bf7910da9d84ae30e410edb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=91b25a84df08d88c9bf7910da9d84ae30e410edb", "patch": "@@ -433,7 +433,7 @@ impl Step for Std {\n         builder.info(&format!(\"Documenting stage{} std ({})\", stage, target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std)"}]}