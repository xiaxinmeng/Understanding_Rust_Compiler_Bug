{"sha": "de4473201a85bf8f5522f7def903a068f8a7d12a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDQ3MzIwMWE4NWJmOGY1NTIyZjdkZWY5MDNhMDY4ZjhhN2QxMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-25T17:46:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-25T17:46:57Z"}, "message": "auto merge of #13070 : huonw/rust/share-doc, r=alexcrichton\n\nstd: expand the `Share` docs to make them more precise.\r\n\r\nAnd give some examples about exactly what's `Share` and what's not.", "tree": {"sha": "31f798c418f9880603dfc8478805c8383c356c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31f798c418f9880603dfc8478805c8383c356c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4473201a85bf8f5522f7def903a068f8a7d12a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4473201a85bf8f5522f7def903a068f8a7d12a", "html_url": "https://github.com/rust-lang/rust/commit/de4473201a85bf8f5522f7def903a068f8a7d12a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4473201a85bf8f5522f7def903a068f8a7d12a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5571abc222520537daa00fc8256040647eec86", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5571abc222520537daa00fc8256040647eec86", "html_url": "https://github.com/rust-lang/rust/commit/1f5571abc222520537daa00fc8256040647eec86"}, {"sha": "e9475b57be66a16e8a7c2b796dc60dff04f86fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9475b57be66a16e8a7c2b796dc60dff04f86fe9", "html_url": "https://github.com/rust-lang/rust/commit/e9475b57be66a16e8a7c2b796dc60dff04f86fe9"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "f116f61509e11c91c09a5483945077c08438216a", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/de4473201a85bf8f5522f7def903a068f8a7d12a/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4473201a85bf8f5522f7def903a068f8a7d12a/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=de4473201a85bf8f5522f7def903a068f8a7d12a", "patch": "@@ -40,7 +40,51 @@ pub trait Pod {\n     // Empty.\n }\n \n-/// Types that can be safely shared between threads, hence thread-safe.\n+/// Types that can be safely shared between tasks when aliased.\n+///\n+/// The precise definition is: a type `T` is `Share` if `&T` is\n+/// thread-safe. In other words, there is no possibility of data races\n+/// when passing `&T` references between tasks.\n+///\n+/// As one would expect, primitive types like `u8` and `f64` are all\n+/// `Share`, and so are simple aggregate types containing them (like\n+/// tuples, structs and enums). More instances of basic `Share` types\n+/// include \"immutable\" types like `&T` and those with simple\n+/// inherited mutability, such as `~T`, `Vec<T>` and most other\n+/// collection types. (Generic parameters need to be `Share` for their\n+/// container to be `Share`.)\n+///\n+/// A somewhat surprising consequence of the definition is `&mut T` is\n+/// `Share` (if `T` is `Share`) even though it seems that it might\n+/// provide unsynchronised mutation. The trick is a mutable reference\n+/// stored in an aliasable reference (that is, `& &mut T`) becomes\n+/// read-only, as if it were a `& &T`, hence there is no risk of a data\n+/// race.\n+///\n+/// Types that are not `Share` are those that have \"interior\n+/// mutability\" in a non-thread-safe way, such as `Cell` and `RefCell`\n+/// in `std::cell`. These types allow for mutation of their contents\n+/// even when in an immutable, aliasable slot, e.g. the contents of\n+/// `&Cell<T>` can be `.set`, and do not ensure data races are\n+/// impossible, hence they cannot be `Share`. A higher level example\n+/// of a non-`Share` type is the reference counted pointer\n+/// `std::rc::Rc`, because any reference `&Rc<T>` can clone a new\n+/// reference, which modifies the reference counts in a non-atomic\n+/// way.\n+///\n+/// For cases when one does need thread-safe interior mutability,\n+/// types like the atomics in `std::sync` and `Mutex` & `RWLock` in\n+/// the `sync` crate do ensure that any mutation cannot cause data\n+/// races.  Hence these types are `Share`.\n+///\n+/// Users writing their own types with interior mutability (or anything\n+/// else that is not thread-safe) should use the `NoShare` marker type\n+/// (from `std::kinds::marker`) to ensure that the compiler doesn't\n+/// consider the user-defined type to be `Share`.  Any types with\n+/// interior mutability must also use the `std::ty::Unsafe` wrapper\n+/// around the value(s) which can be mutated when behind a `&`\n+/// reference; not doing this is undefined behaviour (for example,\n+/// `transmute`-ing from `&T` to `&mut T` is illegal).\n #[lang=\"share\"]\n pub trait Share {\n     // Empty"}]}