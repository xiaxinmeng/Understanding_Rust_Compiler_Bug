{"sha": "e005b71125338d792360f8a6d946ad42d7bbba01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMDViNzExMjUzMzhkNzkyMzYwZjhhNmQ5NDZhZDQyZDdiYmJhMDE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-12T01:02:24Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-12T01:02:24Z"}, "message": "Switch to intra-doc links in `std::process`", "tree": {"sha": "c28e8a128445dc6377a346f8214c73f0af5aae66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28e8a128445dc6377a346f8214c73f0af5aae66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e005b71125338d792360f8a6d946ad42d7bbba01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e005b71125338d792360f8a6d946ad42d7bbba01", "html_url": "https://github.com/rust-lang/rust/commit/e005b71125338d792360f8a6d946ad42d7bbba01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e005b71125338d792360f8a6d946ad42d7bbba01/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873fc463bdba4093dc25119a9314865c4840cbf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/873fc463bdba4093dc25119a9314865c4840cbf0", "html_url": "https://github.com/rust-lang/rust/commit/873fc463bdba4093dc25119a9314865c4840cbf0"}], "stats": {"total": 95, "additions": 37, "deletions": 58}, "files": [{"sha": "37f6755597a93e0d596b660b5e3c4da066c1e6d0", "filename": "library/std/src/process.rs", "status": "modified", "additions": 37, "deletions": 58, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e005b71125338d792360f8a6d946ad42d7bbba01/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e005b71125338d792360f8a6d946ad42d7bbba01/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=e005b71125338d792360f8a6d946ad42d7bbba01", "patch": "@@ -84,25 +84,15 @@\n //! assert_eq!(b\"test\", output.stdout.as_slice());\n //! ```\n //!\n-//! [`abort`]: fn.abort.html\n-//! [`exit`]: fn.exit.html\n+//! [`spawn`]: Command::spawn\n+//! [`output`]: Command::output\n //!\n-//! [`Command`]: struct.Command.html\n-//! [`spawn`]: struct.Command.html#method.spawn\n-//! [`output`]: struct.Command.html#method.output\n+//! [`stdout`]: Command::stdout\n+//! [`stdin`]: Command::stdin\n+//! [`stderr`]: Command::stderr\n //!\n-//! [`Child`]: struct.Child.html\n-//! [`ChildStdin`]: struct.ChildStdin.html\n-//! [`ChildStdout`]: struct.ChildStdout.html\n-//! [`ChildStderr`]: struct.ChildStderr.html\n-//! [`Stdio`]: struct.Stdio.html\n-//!\n-//! [`stdout`]: struct.Command.html#method.stdout\n-//! [`stdin`]: struct.Command.html#method.stdin\n-//! [`stderr`]: struct.Command.html#method.stderr\n-//!\n-//! [`Write`]: ../io/trait.Write.html\n-//! [`Read`]: ../io/trait.Read.html\n+//! [`Write`]: io::Write\n+//! [`Read`]: io::Read\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n \n@@ -130,7 +120,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n /// run, even after the `Child` handle to the child process has gone out of\n /// scope.\n ///\n-/// Calling [`wait`](#method.wait) (or other functions that wrap around it) will make\n+/// Calling [`wait`] (or other functions that wrap around it) will make\n /// the parent process wait until the child has actually exited before\n /// continuing.\n ///\n@@ -162,9 +152,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n /// assert!(ecode.success());\n /// ```\n ///\n-/// [`Command`]: struct.Command.html\n-/// [`Drop`]: ../../core/ops/trait.Drop.html\n-/// [`wait`]: #method.wait\n+/// [`wait`]: Child::wait\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Child {\n     handle: imp::Process,\n@@ -227,9 +215,8 @@ impl fmt::Debug for Child {\n /// file handle will be closed. If the child process was blocked on input prior\n /// to being dropped, it will become unblocked after dropping.\n ///\n-/// [`Child`]: struct.Child.html\n-/// [`stdin`]: struct.Child.html#structfield.stdin\n-/// [dropped]: ../ops/trait.Drop.html\n+/// [`stdin`]: crate::process::Child.stdin\n+/// [dropped]: Drop\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdin {\n     inner: AnonPipe,\n@@ -286,9 +273,8 @@ impl fmt::Debug for ChildStdin {\n /// When an instance of `ChildStdout` is [dropped], the `ChildStdout`'s\n /// underlying file handle will be closed.\n ///\n-/// [`Child`]: struct.Child.html\n-/// [`stdout`]: struct.Child.html#structfield.stdout\n-/// [dropped]: ../ops/trait.Drop.html\n+/// [`stdout`]: crate::process::Child.stdout\n+/// [dropped]: Drop\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdout {\n     inner: AnonPipe,\n@@ -347,9 +333,8 @@ impl fmt::Debug for ChildStdout {\n /// When an instance of `ChildStderr` is [dropped], the `ChildStderr`'s\n /// underlying file handle will be closed.\n ///\n-/// [`Child`]: struct.Child.html\n-/// [`stderr`]: struct.Child.html#structfield.stderr\n-/// [dropped]: ../ops/trait.Drop.html\n+/// [`stderr`]: crate::process::Child.stderr\n+/// [dropped]: Drop\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStderr {\n     inner: AnonPipe,\n@@ -522,7 +507,7 @@ impl Command {\n     ///\n     /// To pass multiple arguments see [`args`].\n     ///\n-    /// [`args`]: #method.args\n+    /// [`args`]: Command::args\n     ///\n     /// # Examples\n     ///\n@@ -547,7 +532,7 @@ impl Command {\n     ///\n     /// To pass a single argument see [`arg`].\n     ///\n-    /// [`arg`]: #method.arg\n+    /// [`arg`]: Command::arg\n     ///\n     /// # Examples\n     ///\n@@ -700,7 +685,7 @@ impl Command {\n     ///         .expect(\"ls command failed to start\");\n     /// ```\n     ///\n-    /// [`canonicalize`]: ../fs/fn.canonicalize.html\n+    /// [`canonicalize`]: crate::fs::canonicalize\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn current_dir<P: AsRef<Path>>(&mut self, dir: P) -> &mut Command {\n         self.inner.cwd(dir.as_ref().as_ref());\n@@ -712,8 +697,8 @@ impl Command {\n     /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n     /// defaults to [`piped`] when used with `output`.\n     ///\n-    /// [`inherit`]: struct.Stdio.html#method.inherit\n-    /// [`piped`]: struct.Stdio.html#method.piped\n+    /// [`inherit`]: Stdio::inherit\n+    /// [`piped`]: Stdio::piped\n     ///\n     /// # Examples\n     ///\n@@ -738,8 +723,8 @@ impl Command {\n     /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n     /// defaults to [`piped`] when used with `output`.\n     ///\n-    /// [`inherit`]: struct.Stdio.html#method.inherit\n-    /// [`piped`]: struct.Stdio.html#method.piped\n+    /// [`inherit`]: Stdio::inherit\n+    /// [`piped`]: Stdio::piped\n     ///\n     /// # Examples\n     ///\n@@ -764,8 +749,8 @@ impl Command {\n     /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n     /// defaults to [`piped`] when used with `output`.\n     ///\n-    /// [`inherit`]: struct.Stdio.html#method.inherit\n-    /// [`piped`]: struct.Stdio.html#method.piped\n+    /// [`inherit`]: Stdio::inherit\n+    /// [`piped`]: Stdio::piped\n     ///\n     /// # Examples\n     ///\n@@ -893,10 +878,8 @@ impl AsInnerMut<imp::Command> for Command {\n /// [`Command`], or the [`wait_with_output`] method of a [`Child`]\n /// process.\n ///\n-/// [`Command`]: struct.Command.html\n-/// [`Child`]: struct.Child.html\n-/// [`output`]: struct.Command.html#method.output\n-/// [`wait_with_output`]: struct.Child.html#method.wait_with_output\n+/// [`output`]: Command::output\n+/// [`wait_with_output`]: Child::wait_with_output\n #[derive(PartialEq, Eq, Clone)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Output {\n@@ -939,10 +922,9 @@ impl fmt::Debug for Output {\n /// Describes what to do with a standard I/O stream for a child process when\n /// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n ///\n-/// [`stdin`]: struct.Command.html#method.stdin\n-/// [`stdout`]: struct.Command.html#method.stdout\n-/// [`stderr`]: struct.Command.html#method.stderr\n-/// [`Command`]: struct.Command.html\n+/// [`stdin`]: Command::stdin\n+/// [`stdout`]: Command::stdout\n+/// [`stderr`]: Command::stderr\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(imp::Stdio);\n \n@@ -1206,10 +1188,8 @@ impl From<fs::File> for Stdio {\n /// status is exposed through the [`status`] method, or the [`wait`] method\n /// of a [`Child`] process.\n ///\n-/// [`Command`]: struct.Command.html\n-/// [`Child`]: struct.Child.html\n-/// [`status`]: struct.Command.html#method.status\n-/// [`wait`]: struct.Child.html#method.wait\n+/// [`status`]: Command::status\n+/// [`wait`]: Child::wait\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);\n@@ -1294,8 +1274,8 @@ impl fmt::Display for ExitStatus {\n /// For the platform's canonical successful and unsuccessful codes, see\n /// the [`SUCCESS`] and [`FAILURE`] associated items.\n ///\n-/// [`SUCCESS`]: #associatedconstant.SUCCESS\n-/// [`FAILURE`]: #associatedconstant.FAILURE\n+/// [`SUCCESS`]: ExitCode::SUCCESS\n+/// [`FAILURE`]: ExitCode::FAILURE\n ///\n /// **Warning**: While various forms of this were discussed in [RFC #1937],\n /// it was ultimately cut from that RFC, and thus this type is more subject\n@@ -1349,9 +1329,9 @@ impl Child {\n     /// }\n     /// ```\n     ///\n-    /// [`ErrorKind`]: ../io/enum.ErrorKind.html\n-    /// [`InvalidInput`]: ../io/enum.ErrorKind.html#variant.InvalidInput\n-    /// [`Other`]: ../io/enum.ErrorKind.html#variant.Other\n+    /// [`ErrorKind`]: io::ErrorKind\n+    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n+    /// [`Other`]: io::ErrorKind::Other\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn kill(&mut self) -> io::Result<()> {\n         self.handle.kill()\n@@ -1616,8 +1596,7 @@ pub fn exit(code: i32) -> ! {\n /// }\n /// ```\n ///\n-/// [`panic!`]: ../../std/macro.panic.html\n-/// [panic hook]: ../../std/panic/fn.set_hook.html\n+/// [panic hook]: crate::panic::set_hook\n #[stable(feature = \"process_abort\", since = \"1.17.0\")]\n pub fn abort() -> ! {\n     crate::sys::abort_internal();"}]}