{"sha": "433e546af9503f712089debee665671094f79275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzM2U1NDZhZjk1MDNmNzEyMDg5ZGViZWU2NjU2NzEwOTRmNzkyNzU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-12T13:51:57Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:18:32Z"}, "message": "Move Level to rustc_session", "tree": {"sha": "ac341ac4651b1ea8565547b34ba4fcbbb1a0af1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac341ac4651b1ea8565547b34ba4fcbbb1a0af1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433e546af9503f712089debee665671094f79275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433e546af9503f712089debee665671094f79275", "html_url": "https://github.com/rust-lang/rust/commit/433e546af9503f712089debee665671094f79275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433e546af9503f712089debee665671094f79275/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43516981cb67fc66c2323a7b519db95b68be8217", "url": "https://api.github.com/repos/rust-lang/rust/commits/43516981cb67fc66c2323a7b519db95b68be8217", "html_url": "https://github.com/rust-lang/rust/commit/43516981cb67fc66c2323a7b519db95b68be8217"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "0cc2c356a1551880a103a35e56fb940c9d39d59f", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/433e546af9503f712089debee665671094f79275/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e546af9503f712089debee665671094f79275/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=433e546af9503f712089debee665671094f79275", "patch": "@@ -39,14 +39,16 @@ use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::Symbol;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n                         BufferedEarlyLint,};\n \n+pub use rustc_session::lint::Level;\n+\n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n pub struct Lint {\n@@ -542,46 +544,6 @@ impl LintId {\n     }\n }\n \n-/// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable)]\n-pub enum Level {\n-    Allow, Warn, Deny, Forbid,\n-}\n-\n-impl Level {\n-    /// Converts a level to a lower-case string.\n-    pub fn as_str(self) -> &'static str {\n-        match self {\n-            Allow => \"allow\",\n-            Warn => \"warn\",\n-            Deny => \"deny\",\n-            Forbid => \"forbid\",\n-        }\n-    }\n-\n-    /// Converts a lower-case string to a level.\n-    pub fn from_str(x: &str) -> Option<Level> {\n-        match x {\n-            \"allow\" => Some(Allow),\n-            \"warn\" => Some(Warn),\n-            \"deny\" => Some(Deny),\n-            \"forbid\" => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-\n-    /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol) -> Option<Level> {\n-        match x {\n-            sym::allow => Some(Allow),\n-            sym::warn => Some(Warn),\n-            sym::deny => Some(Deny),\n-            sym::forbid => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {"}, {"sha": "4e873e8bb281b611ae95c498fe155c0925c6d27c", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/433e546af9503f712089debee665671094f79275/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e546af9503f712089debee665671094f79275/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=433e546af9503f712089debee665671094f79275", "patch": "@@ -1,2 +1,3 @@\n pub mod cgu_reuse_tracker;\n pub mod utils;\n+pub mod lint;"}, {"sha": "44b1f4ec25403742e6a10b2f089cbad7e0099f49", "filename": "src/librustc_session/lint.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/433e546af9503f712089debee665671094f79275/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e546af9503f712089debee665671094f79275/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=433e546af9503f712089debee665671094f79275", "patch": "@@ -0,0 +1,44 @@\n+use syntax_pos::{Symbol, sym};\n+pub use self::Level::*;\n+\n+/// Setting for how to handle a lint.\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+pub enum Level {\n+    Allow, Warn, Deny, Forbid,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(Level);\n+\n+impl Level {\n+    /// Converts a level to a lower-case string.\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            Level::Allow => \"allow\",\n+            Level::Warn => \"warn\",\n+            Level::Deny => \"deny\",\n+            Level::Forbid => \"forbid\",\n+        }\n+    }\n+\n+    /// Converts a lower-case string to a level.\n+    pub fn from_str(x: &str) -> Option<Level> {\n+        match x {\n+            \"allow\" => Some(Level::Allow),\n+            \"warn\" => Some(Level::Warn),\n+            \"deny\" => Some(Level::Deny),\n+            \"forbid\" => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Converts a symbol to a level.\n+    pub fn from_symbol(x: Symbol) -> Option<Level> {\n+        match x {\n+            sym::allow => Some(Level::Allow),\n+            sym::warn => Some(Level::Warn),\n+            sym::deny => Some(Level::Deny),\n+            sym::forbid => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+}"}]}