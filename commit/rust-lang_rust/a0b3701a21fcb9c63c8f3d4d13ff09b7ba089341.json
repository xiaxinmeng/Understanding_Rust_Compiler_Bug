{"sha": "a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYjM3MDFhMjFmY2I5YzYzYzhmM2Q0ZDEzZmYwOWI3YmEwODkzNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T14:38:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T19:07:11Z"}, "message": "rollup merge of #17013 : rgawdzik/literal_int", "tree": {"sha": "0285e55f67a18d987e6117824c906dac5ccce671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0285e55f67a18d987e6117824c906dac5ccce671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "html_url": "https://github.com/rust-lang/rust/commit/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48b7012137f33bbbfec2e42217b0bd812f30188", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48b7012137f33bbbfec2e42217b0bd812f30188", "html_url": "https://github.com/rust-lang/rust/commit/f48b7012137f33bbbfec2e42217b0bd812f30188"}, {"sha": "5eea93af39df1b9b64cace3c3afc78671a71ff8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eea93af39df1b9b64cace3c3afc78671a71ff8c", "html_url": "https://github.com/rust-lang/rust/commit/5eea93af39df1b9b64cace3c3afc78671a71ff8c"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "721e5f296e2e7b7f218d9de42d96ea1b189c6550", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "patch": "@@ -172,33 +172,24 @@ impl LintPass for TypeLimits {\n             ast::ExprLit(lit) => {\n                 match ty::get(ty::expr_ty(cx.tcx, e)).sty {\n                     ty::ty_int(t) => {\n-                        let int_type = if t == ast::TyI {\n-                            cx.sess().targ_cfg.int_type\n-                        } else { t };\n-                        let (min, max) = int_ty_range(int_type);\n-                        let mut lit_val: i64 = match lit.node {\n+                        match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                if v > i64::MAX as u64{\n+                                let int_type = if t == ast::TyI {\n+                                    cx.sess().targ_cfg.int_type\n+                                } else { t };\n+                                let (min, max) = int_ty_range(int_type);\n+                                let negative = self.negated_expr_id == e.id;\n+\n+                                if (negative && v > (min.abs() as u64)) ||\n+                                   (!negative && v > (max.abs() as u64)) {\n                                     cx.span_lint(TYPE_OVERFLOW, e.span,\n                                                  \"literal out of range for its type\");\n                                     return;\n                                 }\n-                                v as i64\n-                            }\n-                            ast::LitInt(v, ast::SignedIntLit(_, ast::Minus)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Minus)) => {\n-                                -(v as i64)\n                             }\n                             _ => fail!()\n                         };\n-                        if self.negated_expr_id == e.id {\n-                            lit_val *= -1;\n-                        }\n-                        if lit_val < min || lit_val > max {\n-                            cx.span_lint(TYPE_OVERFLOW, e.span,\n-                                         \"literal out of range for its type\");\n-                        }\n                     },\n                     ty::ty_uint(t) => {\n                         let uint_type = if t == ast::TyU {"}, {"sha": "81b186a2998a83c00be2bdcf17af837ee44c074e", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=a0b3701a21fcb9c63c8f3d4d13ff09b7ba089341", "patch": "@@ -49,6 +49,7 @@ fn main() {\n     let x = -2147483649_i32; //~ error: literal out of range for its type\n \n     let x = 9223372036854775808_i64; //~ error: literal out of range for its type\n+    let x = -9223372036854775808_i64; // should be OK\n     let x = 18446744073709551615_i64; //~ error: literal out of range for its type\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for its type"}]}