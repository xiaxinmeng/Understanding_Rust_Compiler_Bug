{"sha": "8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "node_id": "C_kwDOAAsO6NoAKDhjYjBiNmNhNWJmMTMyMWQzOGY0NjAyMTEzYjBmNDFjODM3ZDA1ODY", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-05T06:00:37Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-05T06:09:52Z"}, "message": "Apply noundef attribute to &T, &mut T, Box<T>, bool\n\nThis doesn't handle `char` because it's a bit awkward to distinguish it\nfrom u32 at this point in codegen.\n\nNote that for some types (like `&Struct` and `&mut Struct`),\nwe already apply `dereferenceable`, which implies `noundef`,\nso the IR does not change.", "tree": {"sha": "ceb48b535511ea78faaa617e20cdef30f20ff4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb48b535511ea78faaa617e20cdef30f20ff4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "html_url": "https://github.com/rust-lang/rust/commit/8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71226d717a1fb57122e47e63b97295e703319cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71226d717a1fb57122e47e63b97295e703319cb0", "html_url": "https://github.com/rust-lang/rust/commit/71226d717a1fb57122e47e63b97295e703319cb0"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "ff03df79ab15b70705d5a1d29972ccb139da5992", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -37,7 +37,7 @@ impl ArgAttributeExt for ArgAttribute {\n     where\n         F: FnMut(llvm::Attribute),\n     {\n-        for_each_kind!(self, f, NoAlias, NoCapture, NonNull, ReadOnly, InReg)\n+        for_each_kind!(self, f, NoAlias, NoCapture, NonNull, ReadOnly, InReg, NoUndef)\n     }\n }\n \n@@ -69,7 +69,9 @@ impl ArgAttributesExt for ArgAttributes {\n                 } else {\n                     llvm::LLVMRustAddDereferenceableOrNullAttr(llfn, idx.as_uint(), deref);\n                 }\n+                // dereferenceable implies nonnull noundef; dereferenceable_or_null implies noundef\n                 regular -= ArgAttribute::NonNull;\n+                regular -= ArgAttribute::NoUndef;\n             }\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n@@ -109,7 +111,9 @@ impl ArgAttributesExt for ArgAttributes {\n                         deref,\n                     );\n                 }\n+                // dereferenceable implies nonnull noundef; dereferenceable_or_null implies noundef\n                 regular -= ArgAttribute::NonNull;\n+                regular -= ArgAttribute::NoUndef;\n             }\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentCallSiteAttr("}, {"sha": "4f62c68556841515af1a8ba33c2dc08c109d5c3f", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -189,6 +189,7 @@ pub enum Attribute {\n     StackProtectReq = 30,\n     StackProtectStrong = 31,\n     StackProtect = 32,\n+    NoUndef = 33,\n }\n \n /// LLVMIntPredicate"}, {"sha": "9e0a9b354e19675ee40eef1290144342d31ac0d3", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -82,6 +82,7 @@ enum LLVMRustAttribute {\n   StackProtectReq = 30,\n   StackProtectStrong = 31,\n   StackProtect = 32,\n+  NoUndef = 33,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "fb9c5e6a527a76a60b8bad4369347ba726c3a353", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -224,6 +224,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::StackProtectStrong;\n   case StackProtect:\n     return Attribute::StackProtect;\n+  case NoUndef:\n+    return Attribute::NoUndef;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "d2d22fbf31c131630fcd49c482cb3ec3ddfc93fd", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -3048,9 +3048,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                       layout: TyAndLayout<'tcx>,\n                                       offset: Size,\n                                       is_return: bool| {\n-            // Booleans are always an i1 that needs to be zero-extended.\n+            // Booleans are always a noundef i1 that needs to be zero-extended.\n             if scalar.is_bool() {\n                 attrs.ext(ArgExtension::Zext);\n+                attrs.set(ArgAttribute::NoUndef);\n                 return;\n             }\n \n@@ -3075,6 +3076,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         _ => pointee.size,\n                     };\n \n+                    // `Box`, `&T`, and `&mut T` cannot be undef.\n+                    // Note that this only applies to the value of the pointer itself;\n+                    // this attribute doesn't make it UB for the pointed-to data to be undef.\n+                    attrs.set(ArgAttribute::NoUndef);\n+\n                     // `Box` pointer parameters never alias because ownership is transferred\n                     // `&mut` pointer parameters never alias other parameters,\n                     // or mutable global data"}, {"sha": "b605f21d0518dbaa7a0259f81deac4197084c25b", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -73,6 +73,7 @@ mod attr_impl {\n             // or not to actually emit the attribute. It can also be controlled\n             // with the `-Zmutable-noalias` debugging option.\n             const NoAliasMutRef = 1 << 6;\n+            const NoUndef = 1 << 7;\n         }\n     }\n }\n@@ -494,7 +495,11 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n         // For non-immediate arguments the callee gets its own copy of\n         // the value on the stack, so there are no aliases. It's also\n         // program-invisible so can't possibly capture\n-        attrs.set(ArgAttribute::NoAlias).set(ArgAttribute::NoCapture).set(ArgAttribute::NonNull);\n+        attrs\n+            .set(ArgAttribute::NoAlias)\n+            .set(ArgAttribute::NoCapture)\n+            .set(ArgAttribute::NonNull)\n+            .set(ArgAttribute::NoUndef);\n         attrs.pointee_size = layout.size;\n         // FIXME(eddyb) We should be doing this, but at least on\n         // i686-pc-windows-msvc, it results in wrong stack offsets."}, {"sha": "998f3890900628b35086d0c652ef621e3b246df5", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -11,7 +11,7 @@ pub struct UnsafeInner {\n   _field: std::cell::UnsafeCell<i16>,\n }\n \n-// CHECK: zeroext i1 @boolean(i1 zeroext %x)\n+// CHECK: noundef zeroext i1 @boolean(i1 noundef zeroext %x)\n #[no_mangle]\n pub fn boolean(x: bool) -> bool {\n   x\n@@ -64,9 +64,14 @@ pub fn indirect_struct(_: S) {\n pub fn borrowed_struct(_: &S) {\n }\n \n+// CHECK: @raw_struct(%S* %_1)\n+#[no_mangle]\n+pub fn raw_struct(_: *const S) {\n+}\n+\n // `Box` can get deallocated during execution of the function, so it should\n // not get `dereferenceable`.\n-// CHECK: noalias nonnull align 4 i32* @_box(i32* noalias nonnull align 4 %x)\n+// CHECK: noalias noundef nonnull align 4 i32* @_box(i32* noalias noundef nonnull align 4 %x)\n #[no_mangle]\n pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n@@ -86,48 +91,58 @@ pub fn struct_return() -> S {\n pub fn helper(_: usize) {\n }\n \n-// CHECK: @slice([0 x i8]* noalias nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @slice([0 x i8]* noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice([0 x i8]* noalias nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @mutable_slice([0 x i8]* noalias noundef nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {\n }\n \n-// CHECK: @unsafe_slice([0 x i16]* nonnull align 2 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @unsafe_slice([0 x i16]* noundef nonnull align 2 %_1.0, [[USIZE]] %_1.1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_slice(_: &[UnsafeInner]) {\n }\n \n-// CHECK: @str([0 x i8]* noalias nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @raw_slice([0 x i8]* %_1.0, [[USIZE]] %_1.1)\n+#[no_mangle]\n+pub fn raw_slice(_: *const [u8]) {\n+}\n+\n+// CHECK: @str([0 x i8]* noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow({}* nonnull align 1 %_1.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+// CHECK: @trait_borrow({}* noundef nonnull align 1 %_1.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box({}* noalias nonnull align 1{{( %0)?}}, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n+// CHECK: @trait_raw({}* %_1.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+#[no_mangle]\n+pub fn trait_raw(_: *const Drop) {\n+}\n+\n+// CHECK: @trait_box({}* noalias noundef nonnull align 1{{( %0)?}}, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }\n \n-// CHECK: { i8*, i8* } @trait_option(i8* noalias align 1 %x.0, i8* %x.1)\n+// CHECK: { i8*, i8* } @trait_option(i8* noalias noundef align 1 %x.0, i8* %x.1)\n #[no_mangle]\n pub fn trait_option(x: Option<Box<Drop>>) -> Option<Box<Drop>> {\n   x\n }\n \n-// CHECK: { [0 x i16]*, [[USIZE]] } @return_slice([0 x i16]* noalias nonnull readonly align 2 %x.0, [[USIZE]] %x.1)\n+// CHECK: { [0 x i16]*, [[USIZE]] } @return_slice([0 x i16]* noalias noundef nonnull readonly align 2 %x.0, [[USIZE]] %x.1)\n #[no_mangle]\n pub fn return_slice(x: &[u16]) -> &[u16] {\n   x\n@@ -139,7 +154,7 @@ pub fn enum_id_1(x: Option<Result<u16, u16>>) -> Option<Result<u16, u16>> {\n   x\n }\n \n-// CHECK: { i8, i8 } @enum_id_2(i1 zeroext %x.0, i8 %x.1)\n+// CHECK: { i8, i8 } @enum_id_2(i1 noundef zeroext %x.0, i8 %x.1)\n #[no_mangle]\n pub fn enum_id_2(x: Option<u8>) -> Option<u8> {\n   x"}, {"sha": "264f28fdb5feea5e115473b341f18a52eec08de5", "filename": "src/test/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -2,25 +2,25 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK: define{{.*}}{ i8, i8 } @pair_bool_bool(i1 zeroext %pair.0, i1 zeroext %pair.1)\n+// CHECK: define{{.*}}{ i8, i8 } @pair_bool_bool(i1 noundef zeroext %pair.0, i1 noundef zeroext %pair.1)\n #[no_mangle]\n pub fn pair_bool_bool(pair: (bool, bool)) -> (bool, bool) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 zeroext %pair.0, i32 %pair.1)\n+// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 noundef zeroext %pair.0, i32 %pair.1)\n #[no_mangle]\n pub fn pair_bool_i32(pair: (bool, i32)) -> (bool, i32) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 %pair.0, i1 zeroext %pair.1)\n+// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 %pair.0, i1 noundef zeroext %pair.1)\n #[no_mangle]\n pub fn pair_i32_bool(pair: (i32, bool)) -> (i32, bool) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i8, i8 } @pair_and_or(i1 zeroext %_1.0, i1 zeroext %_1.1)\n+// CHECK: define{{.*}}{ i8, i8 } @pair_and_or(i1 noundef zeroext %_1.0, i1 noundef zeroext %_1.1)\n #[no_mangle]\n pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     // Make sure it can operate directly on the unpacked args\n@@ -30,7 +30,7 @@ pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     (a && b, a || b)\n }\n \n-// CHECK: define{{.*}}void @pair_branches(i1 zeroext %_1.0, i1 zeroext %_1.1)\n+// CHECK: define{{.*}}void @pair_branches(i1 noundef zeroext %_1.0, i1 noundef zeroext %_1.1)\n #[no_mangle]\n pub fn pair_branches((a, b): (bool, bool)) {\n     // Make sure it can branch directly on the unpacked bool args"}, {"sha": "a5aeb80de85c33d42f421b95477e458592850d35", "filename": "src/test/codegen/transmute-scalar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -15,7 +15,7 @@ pub fn f32_to_bits(x: f32) -> u32 {\n     unsafe { std::mem::transmute(x) }\n }\n \n-// CHECK-LABEL: define{{.*}}i8 @bool_to_byte(i1 zeroext %b)\n+// CHECK-LABEL: define{{.*}}i8 @bool_to_byte(i1 noundef zeroext %b)\n // CHECK: %1 = zext i1 %b to i8\n // CHECK-NEXT: store i8 %1, i8* %0\n // CHECK-NEXT: %2 = load i8, i8* %0\n@@ -25,7 +25,7 @@ pub fn bool_to_byte(b: bool) -> u8 {\n     unsafe { std::mem::transmute(b) }\n }\n \n-// CHECK-LABEL: define{{.*}}zeroext i1 @byte_to_bool(i8 %byte)\n+// CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 %byte)\n // CHECK: %1 = trunc i8 %byte to i1\n // CHECK-NEXT: %2 = zext i1 %1 to i8\n // CHECK-NEXT: store i8 %2, i8* %0"}, {"sha": "bb87d263bdf3d2f1e6b9daf97d701e309c009134", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb0b6ca5bf1321d38f4602113b0f41c837d0586/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=8cb0b6ca5bf1321d38f4602113b0f41c837d0586", "patch": "@@ -75,7 +75,7 @@ pub union CUnionU128x2{a:(u128, u128)}\n pub fn test_CUnionU128x2(_: CUnionU128x2) { loop {} }\n \n pub union UnionBool { b:bool }\n-// CHECK: define zeroext i1 @test_UnionBool(i8 %b)\n+// CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)\n #[no_mangle]\n pub fn test_UnionBool(b: UnionBool) -> bool { unsafe { b.b }  }\n // CHECK: %0 = trunc i8 %b to i1"}]}