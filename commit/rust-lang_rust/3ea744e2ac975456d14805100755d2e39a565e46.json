{"sha": "3ea744e2ac975456d14805100755d2e39a565e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYTc0NGUyYWM5NzU0NTZkMTQ4MDUxMDA3NTVkMmUzOWE1NjVlNDY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2020-12-18T22:03:45Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2020-12-18T22:03:45Z"}, "message": "Recommend panic::resume_unwind instead of panicking.\n\nFixes https://github.com/rust-lang/rust/issues/79950.", "tree": {"sha": "7ee46c9447bff4569400bebcc16a4c5ad83d66f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee46c9447bff4569400bebcc16a4c5ad83d66f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ea744e2ac975456d14805100755d2e39a565e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea744e2ac975456d14805100755d2e39a565e46", "html_url": "https://github.com/rust-lang/rust/commit/3ea744e2ac975456d14805100755d2e39a565e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ea744e2ac975456d14805100755d2e39a565e46/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4297ba39ce07a0b0000841b50154ea53783a024", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4297ba39ce07a0b0000841b50154ea53783a024", "html_url": "https://github.com/rust-lang/rust/commit/e4297ba39ce07a0b0000841b50154ea53783a024"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "0d004a516f5944207bf7f38aaee9681ca0c3e929", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ea744e2ac975456d14805100755d2e39a565e46/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea744e2ac975456d14805100755d2e39a565e46/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=3ea744e2ac975456d14805100755d2e39a565e46", "patch": "@@ -1186,32 +1186,37 @@ impl fmt::Debug for Thread {\n /// the [`Error`](crate::error::Error) trait.\n ///\n /// Thus, a sensible way to handle a thread panic is to either:\n-/// 1. `unwrap` the `Result<T>`, propagating the panic\n+///\n+/// 1. propagate the panic with [`std::panic::resume_unwind`]\n /// 2. or in case the thread is intended to be a subsystem boundary\n /// that is supposed to isolate system-level failures,\n-/// match on the `Err` variant and handle the panic in an appropriate way.\n+/// match on the `Err` variant and handle the panic in an appropriate way\n ///\n /// A thread that completes without panicking is considered to exit successfully.\n ///\n /// # Examples\n ///\n+/// Matching on the result of a joined thread:\n+///\n /// ```no_run\n-/// use std::thread;\n-/// use std::fs;\n+/// use std::{fs, thread, panic};\n ///\n /// fn copy_in_thread() -> thread::Result<()> {\n-///     thread::spawn(move || { fs::copy(\"foo.txt\", \"bar.txt\").unwrap(); }).join()\n+///     thread::spawn(|| {\n+///         fs::copy(\"foo.txt\", \"bar.txt\").unwrap();\n+///     }).join()\n /// }\n ///\n /// fn main() {\n ///     match copy_in_thread() {\n-///         Ok(_) => println!(\"this is fine\"),\n-///         Err(_) => println!(\"thread panicked\"),\n+///         Ok(_) => println!(\"copy succeeded\"),\n+///         Err(e) => panic::resume_unwind(e),\n ///     }\n /// }\n /// ```\n ///\n /// [`Result`]: crate::result::Result\n+/// [`std::panic::resume_unwind`]: crate::panic::resume_unwind\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n "}]}