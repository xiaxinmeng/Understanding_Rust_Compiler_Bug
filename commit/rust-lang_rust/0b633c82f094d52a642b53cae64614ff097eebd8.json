{"sha": "0b633c82f094d52a642b53cae64614ff097eebd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjMzYzgyZjA5NGQ1MmE2NDJiNTNjYWU2NDYxNGZmMDk3ZWViZDg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-26T16:50:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-03T10:14:21Z"}, "message": "rustc_codegen_ssa: split declare_local into create_dbg_var and dbg_var_addr.", "tree": {"sha": "98eaaa31ac62a13a75c2be318e585a5d14736de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98eaaa31ac62a13a75c2be318e585a5d14736de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b633c82f094d52a642b53cae64614ff097eebd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b633c82f094d52a642b53cae64614ff097eebd8", "html_url": "https://github.com/rust-lang/rust/commit/0b633c82f094d52a642b53cae64614ff097eebd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b633c82f094d52a642b53cae64614ff097eebd8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "html_url": "https://github.com/rust-lang/rust/commit/0d34a8772251b3f9d4dd05c81d9531d455a14fc2"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "342ac437d3c247f60773d16cc07c6cfee1bcb4c8", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -57,6 +57,7 @@ impl BackendTypes for Builder<'_, 'll, 'tcx> {\n     type Funclet = <CodegenCx<'ll, 'tcx> as BackendTypes>::Funclet;\n \n     type DIScope = <CodegenCx<'ll, 'tcx> as BackendTypes>::DIScope;\n+    type DIVariable = <CodegenCx<'ll, 'tcx> as BackendTypes>::DIVariable;\n }\n \n impl ty::layout::HasDataLayout for Builder<'_, '_, '_> {"}, {"sha": "1d6bfb321598c9b5b1a92320044e7345d780c73c", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -91,6 +91,7 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type Funclet = Funclet<'ll>;\n \n     type DIScope = &'ll llvm::debuginfo::DIScope;\n+    type DIVariable = &'ll llvm::debuginfo::DIVariable;\n }\n \n impl CodegenCx<'ll, 'tcx> {"}, {"sha": "87af9b9c88da75b9bdd0fabfcfc9a1930f134ca8", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -11,7 +11,7 @@ use self::utils::{create_DIArray, is_node_local_to_unit, span_start, DIB};\n \n use crate::llvm;\n use crate::llvm::debuginfo::{\n-    DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType,\n+    DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType, DIVariable,\n };\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n@@ -143,33 +143,23 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n     };\n }\n \n-impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn declare_local(\n+impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n+    fn dbg_var_addr(\n         &mut self,\n         dbg_context: &FunctionDebugContext<&'ll DIScope>,\n-        variable_name: ast::Name,\n-        variable_type: Ty<'tcx>,\n+        dbg_var: &'ll DIVariable,\n         scope_metadata: &'ll DIScope,\n         variable_alloca: Self::Value,\n         direct_offset: Size,\n         indirect_offsets: &[Size],\n-        variable_kind: VariableKind,\n         span: Span,\n     ) {\n         assert!(!dbg_context.source_locations_enabled);\n         let cx = self.cx();\n \n-        let file = span_start(cx, span).file;\n-        let file_metadata = file_metadata(cx, &file.name, dbg_context.defining_crate);\n-\n         let loc = span_start(cx, span);\n-        let type_metadata = type_metadata(cx, variable_type, span);\n-\n-        let (argument_index, dwarf_tag) = match variable_kind {\n-            ArgumentVariable(index) => (index as c_uint, DW_TAG_arg_variable),\n-            LocalVariable => (0, DW_TAG_auto_variable),\n-        };\n-        let align = cx.align_of(variable_type);\n \n         // Convert the direct and indirect offsets to address ops.\n         let op_deref = || unsafe { llvm::LLVMRustDIBuilderCreateOpDeref() };\n@@ -188,32 +178,19 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n         }\n \n-        let name = SmallCStr::new(&variable_name.as_str());\n-        let metadata = unsafe {\n-            llvm::LLVMRustDIBuilderCreateVariable(\n-                DIB(cx),\n-                dwarf_tag,\n-                scope_metadata,\n-                name.as_ptr(),\n-                file_metadata,\n-                loc.line as c_uint,\n-                type_metadata,\n-                cx.sess().opts.optimize != config::OptLevel::No,\n-                DIFlags::FlagZero,\n-                argument_index,\n-                align.bytes() as u32,\n-            )\n-        };\n+        // FIXME(eddyb) maybe this information could be extracted from `var`,\n+        // to avoid having to pass it down in both places?\n         source_loc::set_debug_location(\n             self,\n             InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()),\n         );\n         unsafe {\n             let debug_loc = llvm::LLVMGetCurrentDebugLocation(self.llbuilder);\n+            // FIXME(eddyb) replace `llvm.dbg.declare` with `llvm.dbg.addr`.\n             let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n                 DIB(cx),\n                 variable_alloca,\n-                metadata,\n+                dbg_var,\n                 addr_ops.as_ptr(),\n                 addr_ops.len() as c_uint,\n                 debug_loc,\n@@ -558,4 +535,45 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn debuginfo_finalize(&self) {\n         finalize(self)\n     }\n+\n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n+    fn create_dbg_var(\n+        &self,\n+        dbg_context: &FunctionDebugContext<&'ll DIScope>,\n+        variable_name: ast::Name,\n+        variable_type: Ty<'tcx>,\n+        scope_metadata: &'ll DIScope,\n+        variable_kind: VariableKind,\n+        span: Span,\n+    ) -> &'ll DIVariable {\n+        let file = span_start(self, span).file;\n+        let file_metadata = file_metadata(self, &file.name, dbg_context.defining_crate);\n+\n+        let loc = span_start(self, span);\n+        let type_metadata = type_metadata(self, variable_type, span);\n+\n+        let (argument_index, dwarf_tag) = match variable_kind {\n+            ArgumentVariable(index) => (index as c_uint, DW_TAG_arg_variable),\n+            LocalVariable => (0, DW_TAG_auto_variable),\n+        };\n+        let align = self.align_of(variable_type);\n+\n+        let name = SmallCStr::new(&variable_name.as_str());\n+        unsafe {\n+            llvm::LLVMRustDIBuilderCreateVariable(\n+                DIB(self),\n+                dwarf_tag,\n+                scope_metadata,\n+                name.as_ptr(),\n+                file_metadata,\n+                loc.line as c_uint,\n+                type_metadata,\n+                self.sess().opts.optimize != config::OptLevel::No,\n+                DIFlags::FlagZero,\n+                argument_index,\n+                align.bytes() as u32,\n+            )\n+        }\n+    }\n }"}, {"sha": "1ee5fdba2a202bc54994c95e8f5a9c62b226b983", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -226,15 +226,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             let (scope, span) = self.debug_loc(var.source_info);\n             if let Some(scope) = scope {\n-                bx.declare_local(\n+                let dbg_var =\n+                    bx.create_dbg_var(debug_context, var.name, layout.ty, scope, kind, span);\n+                bx.dbg_var_addr(\n                     debug_context,\n-                    var.name,\n-                    layout.ty,\n+                    dbg_var,\n                     scope,\n                     base.llval,\n                     direct_offset,\n                     &indirect_offsets,\n-                    kind,\n                     span,\n                 );\n             }"}, {"sha": "7b22961cd46e2797db0ab7611d8b37dfca0b3a8b", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -21,7 +21,10 @@ pub trait BackendTypes {\n     type Type: CodegenObject;\n     type Funclet;\n \n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `Dbg`, `Debug`, `DebugInfo`, `DI` etc.).\n     type DIScope: Copy;\n+    type DIVariable: Copy;\n }\n \n pub trait Backend<'tcx>:"}, {"sha": "b3c830eef86980e2c3253f5bfb75718a03e4fc28", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -28,7 +28,7 @@ pub enum OverflowOp {\n \n pub trait BuilderMethods<'a, 'tcx>:\n     HasCodegen<'tcx>\n-    + DebugInfoBuilderMethods<'tcx>\n+    + DebugInfoBuilderMethods\n     + ArgAbiMethods<'tcx>\n     + AbiBuilderMethods<'tcx>\n     + IntrinsicCallMethods<'tcx>"}, {"sha": "22a4e96b9e4bf2fb8bb8ea3fc35d167bab791376", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -30,20 +30,32 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         defining_crate: CrateNum,\n     ) -> Self::DIScope;\n     fn debuginfo_finalize(&self);\n-}\n \n-pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n-    fn declare_local(\n-        &mut self,\n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n+    fn create_dbg_var(\n+        &self,\n         dbg_context: &FunctionDebugContext<Self::DIScope>,\n         variable_name: Name,\n         variable_type: Ty<'tcx>,\n         scope_metadata: Self::DIScope,\n+        variable_kind: VariableKind,\n+        span: Span,\n+    ) -> Self::DIVariable;\n+}\n+\n+pub trait DebugInfoBuilderMethods: BackendTypes {\n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n+    fn dbg_var_addr(\n+        &mut self,\n+        dbg_context: &FunctionDebugContext<Self::DIScope>,\n+        dbg_var: Self::DIVariable,\n+        scope_metadata: Self::DIScope,\n         variable_alloca: Self::Value,\n         direct_offset: Size,\n         // NB: each offset implies a deref (i.e. they're steps in a pointer chain).\n         indirect_offsets: &[Size],\n-        variable_kind: VariableKind,\n         span: Span,\n     );\n     fn set_source_location("}, {"sha": "b8afadaadef38b163a2e5a6445bb9879a1bf2826", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b633c82f094d52a642b53cae64614ff097eebd8/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=0b633c82f094d52a642b53cae64614ff097eebd8", "patch": "@@ -93,5 +93,6 @@ pub trait HasCodegen<'tcx>:\n             Type = Self::Type,\n             Funclet = Self::Funclet,\n             DIScope = Self::DIScope,\n+            DIVariable = Self::DIVariable,\n         >;\n }"}]}