{"sha": "1d986de2488249763f730ba83fd3d8235391e74d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTg2ZGUyNDg4MjQ5NzYzZjczMGJhODNmZDNkODIzNTM5MWU3NGQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-07T11:22:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-07T11:39:08Z"}, "message": "std::rand: implement the log-normal distribution.", "tree": {"sha": "ef7430d2b6d8bd3165128efd5ce8fbcc24547c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef7430d2b6d8bd3165128efd5ce8fbcc24547c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d986de2488249763f730ba83fd3d8235391e74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d986de2488249763f730ba83fd3d8235391e74d", "html_url": "https://github.com/rust-lang/rust/commit/1d986de2488249763f730ba83fd3d8235391e74d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d986de2488249763f730ba83fd3d8235391e74d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5639d11ba5d3ef4ca6be323d6604a5b9e0caaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5639d11ba5d3ef4ca6be323d6604a5b9e0caaa", "html_url": "https://github.com/rust-lang/rust/commit/9d5639d11ba5d3ef4ca6be323d6604a5b9e0caaa"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "ee24d724731bcbf465cb9fbe27add06d4788c1eb", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d986de2488249763f730ba83fd3d8235391e74d/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d986de2488249763f730ba83fd3d8235391e74d/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=1d986de2488249763f730ba83fd3d8235391e74d", "patch": "@@ -28,7 +28,7 @@ use clone::Clone;\n \n pub use self::range::Range;\n pub use self::gamma::Gamma;\n-pub use self::normal::Normal;\n+pub use self::normal::{Normal, LogNormal};\n pub use self::exponential::Exp;\n \n pub mod range;"}, {"sha": "a779f4f60660ea11a2c6d72b34e81ee1b19a5f8a", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1d986de2488249763f730ba83fd3d8235391e74d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d986de2488249763f730ba83fd3d8235391e74d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=1d986de2488249763f730ba83fd3d8235391e74d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The normal distribution.\n+//! The normal and derived distributions.\n \n use rand::{Rng, Rand, Open01};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n@@ -108,6 +108,46 @@ impl IndependentSample<f64> for Normal {\n     }\n }\n \n+\n+/// The log-normal distribution `ln N(mean, std_dev**2)`.\n+///\n+/// If `X` is log-normal distributed, then `ln(X)` is `N(mean,\n+/// std_dev**2)` distributed.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand;\n+/// use std::rand::distributions::{LogNormal, IndependentSample};\n+///\n+/// fn main() {\n+///     // mean 2, standard deviation 3\n+///     let log_normal = LogNormal::new(2.0, 3.0);\n+///     let v = normal.ind_sample(&mut rand::task_rng());\n+///     println!(\"{} is from an ln N(2, 9) distribution\", v)\n+/// }\n+/// ```\n+pub struct LogNormal {\n+    priv norm: Normal\n+}\n+\n+impl LogNormal {\n+    /// Construct a new `LogNormal` distribution with the given mean\n+    /// and standard deviation. Fails if `std_dev < 0`.\n+    pub fn new(mean: f64, std_dev: f64) -> LogNormal {\n+        assert!(std_dev >= 0.0, \"LogNormal::new called with `std_dev` < 0\");\n+        LogNormal { norm: Normal::new(mean, std_dev) }\n+    }\n+}\n+impl Sample<f64> for LogNormal {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+}\n+impl IndependentSample<f64> for LogNormal {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n+        self.norm.ind_sample(rng).exp()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use rand::*;\n@@ -129,6 +169,22 @@ mod tests {\n     fn test_normal_invalid_sd() {\n         Normal::new(10.0, -1.0);\n     }\n+\n+\n+    #[test]\n+    fn test_log_normal() {\n+        let mut lnorm = LogNormal::new(10.0, 10.0);\n+        let mut rng = task_rng();\n+        for _ in range(0, 1000) {\n+            lnorm.sample(&mut rng);\n+            lnorm.ind_sample(&mut rng);\n+        }\n+    }\n+    #[test]\n+    #[should_fail]\n+    fn test_log_normal_invalid_sd() {\n+        LogNormal::new(10.0, -1.0);\n+    }\n }\n \n #[cfg(test)]"}]}