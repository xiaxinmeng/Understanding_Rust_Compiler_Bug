{"sha": "7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNWZiMzdjZjEyZjRlMjVjZTFiYTdlNDY0ZGQyNTc0MDg0NDRiZmI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T09:46:36Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T09:46:36Z"}, "message": "Rename GenericPredicate -> WhereClause", "tree": {"sha": "fedc1b02375558b9bd027a318c4bc131784d58c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fedc1b02375558b9bd027a318c4bc131784d58c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "html_url": "https://github.com/rust-lang/rust/commit/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b16af590dd3d241bec07f69f4d4dadae9a4b523", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b16af590dd3d241bec07f69f4d4dadae9a4b523", "html_url": "https://github.com/rust-lang/rust/commit/8b16af590dd3d241bec07f69f4d4dadae9a4b523"}], "stats": {"total": 194, "additions": 89, "deletions": 105}, "files": [{"sha": "268a2b9010976dec1179ea9b24343054ab34a6e3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -57,8 +57,8 @@ use hir_ty::{\n     to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex,\n-    GenericPredicate, InEnvironment, Interner, Obligation, ProjectionTy, Scalar, Substitution, Ty,\n-    TyDefId, TyKind, TyVariableKind,\n+    InEnvironment, Interner, Obligation, ProjectionTy, Scalar, Substitution, Ty, TyDefId, TyKind,\n+    TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1461,7 +1461,7 @@ impl TypeParam {\n         db.generic_predicates_for_param(self.id)\n             .into_iter()\n             .filter_map(|pred| match &pred.value {\n-                hir_ty::GenericPredicate::Implemented(trait_ref) => {\n+                hir_ty::WhereClause::Implemented(trait_ref) => {\n                     Some(Trait::from(trait_ref.hir_trait_id()))\n                 }\n                 _ => None,\n@@ -2022,7 +2022,7 @@ impl Type {\n         self.ty.value.impl_trait_bounds(db).map(|it| {\n             it.into_iter()\n                 .filter_map(|pred| match pred {\n-                    hir_ty::GenericPredicate::Implemented(trait_ref) => {\n+                    hir_ty::WhereClause::Implemented(trait_ref) => {\n                         Some(Trait::from(trait_ref.hir_trait_id()))\n                     }\n                     _ => None,\n@@ -2060,12 +2060,12 @@ impl Type {\n         fn walk_bounds(\n             db: &dyn HirDatabase,\n             type_: &Type,\n-            bounds: &[GenericPredicate],\n+            bounds: &[WhereClause],\n             cb: &mut impl FnMut(Type),\n         ) {\n             for pred in bounds {\n                 match pred {\n-                    GenericPredicate::Implemented(trait_ref) => {\n+                    WhereClause::Implemented(trait_ref) => {\n                         cb(type_.clone());\n                         walk_substs(db, type_, &trait_ref.substitution, cb);\n                     }"}, {"sha": "300da0f38b6f2e36e23cb8e1f2e77a6f82dfc82d", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -12,8 +12,8 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, FnDefId, GenericPredicate, ImplTraitId, InferenceResult, PolyFnSig,\n-    ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n+    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, PolyFnSig, ReturnTypeImplTraits,\n+    TraitRef, Ty, TyDefId, ValueTyDefId, WhereClause,\n };\n use hir_expand::name::Name;\n \n@@ -57,13 +57,10 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     #[salsa::invoke(crate::lower::generic_predicates_for_param_query)]\n     #[salsa::cycle(crate::lower::generic_predicates_for_param_recover)]\n-    fn generic_predicates_for_param(\n-        &self,\n-        param_id: TypeParamId,\n-    ) -> Arc<[Binders<GenericPredicate>]>;\n+    fn generic_predicates_for_param(&self, param_id: TypeParamId) -> Arc<[Binders<WhereClause>]>;\n \n     #[salsa::invoke(crate::lower::generic_predicates_query)]\n-    fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<GenericPredicate>]>;\n+    fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<WhereClause>]>;\n \n     #[salsa::invoke(crate::lower::trait_environment_query)]\n     fn trait_environment(&self, def: GenericDefId) -> Arc<crate::TraitEnvironment>;"}, {"sha": "2721b8312740a1abaf2d86ae7bdcbb536b7b3d3a", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -19,8 +19,8 @@ use hir_expand::name::Name;\n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n-    CallableDefId, CallableSig, GenericPredicate, ImplTraitId, Interner, Lifetime, Obligation,\n-    OpaqueTy, ProjectionTy, Scalar, Substitution, TraitRef, Ty, TyKind,\n+    CallableDefId, CallableSig, ImplTraitId, Interner, Lifetime, Obligation, OpaqueTy,\n+    ProjectionTy, Scalar, Substitution, TraitRef, Ty, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -353,7 +353,7 @@ impl HirDisplay for Ty {\n                     _ => Cow::Borrowed(&[][..]),\n                 };\n \n-                if let [GenericPredicate::Implemented(trait_ref), _] = predicates.as_ref() {\n+                if let [WhereClause::Implemented(trait_ref), _] = predicates.as_ref() {\n                     let trait_ = trait_ref.hir_trait_id();\n                     if fn_traits(f.db.upcast(), trait_).any(|it| it == trait_) {\n                         return write!(f, \"{}\", ty_display);\n@@ -652,7 +652,7 @@ fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = Trai\n \n pub fn write_bounds_like_dyn_trait_with_prefix(\n     prefix: &str,\n-    predicates: &[GenericPredicate],\n+    predicates: &[WhereClause],\n     f: &mut HirFormatter,\n ) -> Result<(), HirDisplayError> {\n     write!(f, \"{}\", prefix)?;\n@@ -665,7 +665,7 @@ pub fn write_bounds_like_dyn_trait_with_prefix(\n }\n \n fn write_bounds_like_dyn_trait(\n-    predicates: &[GenericPredicate],\n+    predicates: &[WhereClause],\n     f: &mut HirFormatter,\n ) -> Result<(), HirDisplayError> {\n     // Note: This code is written to produce nice results (i.e.\n@@ -679,7 +679,7 @@ fn write_bounds_like_dyn_trait(\n     let mut is_fn_trait = false;\n     for p in predicates.iter() {\n         match p {\n-            GenericPredicate::Implemented(trait_ref) => {\n+            WhereClause::Implemented(trait_ref) => {\n                 let trait_ = trait_ref.hir_trait_id();\n                 if !is_fn_trait {\n                     is_fn_trait = fn_traits(f.db.upcast(), trait_).any(|it| it == trait_);\n@@ -710,12 +710,12 @@ fn write_bounds_like_dyn_trait(\n                     }\n                 }\n             }\n-            GenericPredicate::AliasEq(alias_eq) if is_fn_trait => {\n+            WhereClause::AliasEq(alias_eq) if is_fn_trait => {\n                 is_fn_trait = false;\n                 write!(f, \" -> \")?;\n                 alias_eq.ty.hir_fmt(f)?;\n             }\n-            GenericPredicate::AliasEq(AliasEq { ty, alias }) => {\n+            WhereClause::AliasEq(AliasEq { ty, alias }) => {\n                 // in types in actual Rust, these will always come\n                 // after the corresponding Implemented predicate\n                 if angle_open {\n@@ -731,7 +731,7 @@ fn write_bounds_like_dyn_trait(\n                 }\n                 ty.hir_fmt(f)?;\n             }\n-            GenericPredicate::Error => {\n+            WhereClause::Error => {\n                 if angle_open {\n                     // impl Trait<X, {error}>\n                     write!(f, \", \")?;\n@@ -778,18 +778,15 @@ impl HirDisplay for TraitRef {\n     }\n }\n \n-impl HirDisplay for GenericPredicate {\n+impl HirDisplay for WhereClause {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         match self {\n-            GenericPredicate::Implemented(trait_ref) => trait_ref.hir_fmt(f)?,\n-            GenericPredicate::AliasEq(AliasEq {\n-                alias: AliasTy::Projection(projection_ty),\n-                ty,\n-            }) => {\n+            WhereClause::Implemented(trait_ref) => trait_ref.hir_fmt(f)?,\n+            WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n                 write!(f, \"<\")?;\n                 projection_ty.trait_ref(f.db).hir_fmt_ext(f, true)?;\n                 write!(\n@@ -799,7 +796,7 @@ impl HirDisplay for GenericPredicate {\n                 )?;\n                 ty.hir_fmt(f)?;\n             }\n-            GenericPredicate::AliasEq(_) | GenericPredicate::Error => write!(f, \"{{error}}\")?,\n+            WhereClause::AliasEq(_) | WhereClause::Error => write!(f, \"{{error}}\")?,\n         }\n         Ok(())\n     }"}, {"sha": "5b7b423fa0300bc7dc7822d8de6718309f0a4a4f", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -7,8 +7,8 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n use super::{InferenceContext, Obligation};\n use crate::{\n-    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, FnPointer, GenericPredicate,\n-    InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyKind, TypeWalk,\n+    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, FnPointer, InEnvironment, InferenceVar,\n+    Interner, Scalar, Substitution, Ty, TyKind, TypeWalk, WhereClause,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -382,21 +382,16 @@ impl InferenceTable {\n         }\n     }\n \n-    fn unify_preds(\n-        &mut self,\n-        pred1: &GenericPredicate,\n-        pred2: &GenericPredicate,\n-        depth: usize,\n-    ) -> bool {\n+    fn unify_preds(&mut self, pred1: &WhereClause, pred2: &WhereClause, depth: usize) -> bool {\n         match (pred1, pred2) {\n-            (GenericPredicate::Implemented(tr1), GenericPredicate::Implemented(tr2))\n+            (WhereClause::Implemented(tr1), WhereClause::Implemented(tr2))\n                 if tr1.trait_id == tr2.trait_id =>\n             {\n                 self.unify_substs(&tr1.substitution, &tr2.substitution, depth + 1)\n             }\n             (\n-                GenericPredicate::AliasEq(AliasEq { alias: alias1, ty: ty1 }),\n-                GenericPredicate::AliasEq(AliasEq { alias: alias2, ty: ty2 }),\n+                WhereClause::AliasEq(AliasEq { alias: alias1, ty: ty1 }),\n+                WhereClause::AliasEq(AliasEq { alias: alias2, ty: ty2 }),\n             ) => {\n                 let (substitution1, substitution2) = match (alias1, alias2) {\n                     (AliasTy::Projection(projection_ty1), AliasTy::Projection(projection_ty2))"}, {"sha": "5c4d5a7d7cbe39ff1a2a09b637ae4e0e5cd31a21", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -276,7 +276,7 @@ pub enum TyKind {\n     /// represents the `Self` type inside the bounds. This is currently\n     /// implicit; Chalk has the `Binders` struct to make it explicit, but it\n     /// didn't seem worth the overhead yet.\n-    Dyn(Arc<[GenericPredicate]>),\n+    Dyn(Arc<[WhereClause]>),\n \n     /// A placeholder for a type which could not be computed; this is propagated\n     /// to avoid useless error messages. Doubles as a placeholder where type\n@@ -564,7 +564,7 @@ impl TypeWalk for TraitRef {\n /// Like `generics::WherePredicate`, but with resolved types: A condition on the\n /// parameters of a generic item.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum GenericPredicate {\n+pub enum WhereClause {\n     /// The given trait needs to be implemented for its type parameters.\n     Implemented(TraitRef),\n     /// An associated type bindings like in `Iterator<Item = T>`.\n@@ -574,32 +574,32 @@ pub enum GenericPredicate {\n     Error,\n }\n \n-impl GenericPredicate {\n+impl WhereClause {\n     pub fn is_error(&self) -> bool {\n-        matches!(self, GenericPredicate::Error)\n+        matches!(self, WhereClause::Error)\n     }\n \n     pub fn is_implemented(&self) -> bool {\n-        matches!(self, GenericPredicate::Implemented(_))\n+        matches!(self, WhereClause::Implemented(_))\n     }\n \n     pub fn trait_ref(&self, db: &dyn HirDatabase) -> Option<TraitRef> {\n         match self {\n-            GenericPredicate::Implemented(tr) => Some(tr.clone()),\n-            GenericPredicate::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n+            WhereClause::Implemented(tr) => Some(tr.clone()),\n+            WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n                 Some(proj.trait_ref(db))\n             }\n-            GenericPredicate::AliasEq(_) | GenericPredicate::Error => None,\n+            WhereClause::AliasEq(_) | WhereClause::Error => None,\n         }\n     }\n }\n \n-impl TypeWalk for GenericPredicate {\n+impl TypeWalk for WhereClause {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         match self {\n-            GenericPredicate::Implemented(trait_ref) => trait_ref.walk(f),\n-            GenericPredicate::AliasEq(alias_eq) => alias_eq.walk(f),\n-            GenericPredicate::Error => {}\n+            WhereClause::Implemented(trait_ref) => trait_ref.walk(f),\n+            WhereClause::AliasEq(alias_eq) => alias_eq.walk(f),\n+            WhereClause::Error => {}\n         }\n     }\n \n@@ -609,9 +609,9 @@ impl TypeWalk for GenericPredicate {\n         binders: DebruijnIndex,\n     ) {\n         match self {\n-            GenericPredicate::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n-            GenericPredicate::AliasEq(alias_eq) => alias_eq.walk_mut_binders(f, binders),\n-            GenericPredicate::Error => {}\n+            WhereClause::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n+            WhereClause::AliasEq(alias_eq) => alias_eq.walk_mut_binders(f, binders),\n+            WhereClause::Error => {}\n         }\n     }\n }\n@@ -815,7 +815,7 @@ impl Ty {\n     pub fn dyn_trait_ref(&self) -> Option<&TraitRef> {\n         match self.interned(&Interner) {\n             TyKind::Dyn(bounds) => bounds.get(0).and_then(|b| match b {\n-                GenericPredicate::Implemented(trait_ref) => Some(trait_ref),\n+                WhereClause::Implemented(trait_ref) => Some(trait_ref),\n                 _ => None,\n             }),\n             _ => None,\n@@ -894,7 +894,7 @@ impl Ty {\n         }\n     }\n \n-    pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<GenericPredicate>> {\n+    pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<WhereClause>> {\n         match self.interned(&Interner) {\n             TyKind::OpaqueType(opaque_ty_id, ..) => {\n                 match db.lookup_intern_impl_trait_id((*opaque_ty_id).into()) {\n@@ -907,7 +907,7 @@ impl Ty {\n                             // This is only used by type walking.\n                             // Parameters will be walked outside, and projection predicate is not used.\n                             // So just provide the Future trait.\n-                            let impl_bound = GenericPredicate::Implemented(TraitRef {\n+                            let impl_bound = WhereClause::Implemented(TraitRef {\n                                 trait_id: to_chalk_trait_id(future_trait),\n                                 substitution: Substitution::empty(),\n                             });\n@@ -1166,7 +1166,7 @@ pub struct ReturnTypeImplTraits {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct ReturnTypeImplTrait {\n-    pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n+    pub(crate) bounds: Binders<Vec<WhereClause>>,\n }\n \n pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {"}, {"sha": "4199dc7a6c216d15beb2ea2d7966535b72154741", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -33,9 +33,9 @@ use crate::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         variant_data,\n     },\n-    AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig,\n-    GenericPredicate, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, ReturnTypeImplTrait,\n-    ReturnTypeImplTraits, Substitution, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n+    AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, ImplTraitId,\n+    OpaqueTy, PolyFnSig, ProjectionTy, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n+    TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk, WhereClause,\n };\n \n #[derive(Debug)]\n@@ -373,8 +373,7 @@ impl<'a> TyLoweringContext<'a> {\n                     // FIXME report error (ambiguous associated type)\n                     TyKind::Unknown.intern(&Interner)\n                 } else {\n-                    TyKind::Dyn(Arc::new([GenericPredicate::Implemented(trait_ref)]))\n-                        .intern(&Interner)\n+                    TyKind::Dyn(Arc::new([WhereClause::Implemented(trait_ref)])).intern(&Interner)\n                 };\n                 return (ty, None);\n             }\n@@ -667,7 +666,7 @@ impl<'a> TyLoweringContext<'a> {\n     pub(crate) fn lower_where_predicate(\n         &'a self,\n         where_predicate: &'a WherePredicate,\n-    ) -> impl Iterator<Item = GenericPredicate> + 'a {\n+    ) -> impl Iterator<Item = WhereClause> + 'a {\n         match where_predicate {\n             WherePredicate::ForLifetime { target, bound, .. }\n             | WherePredicate::TypeBound { target, bound } => {\n@@ -699,17 +698,15 @@ impl<'a> TyLoweringContext<'a> {\n         &'a self,\n         bound: &'a TypeBound,\n         self_ty: Ty,\n-    ) -> impl Iterator<Item = GenericPredicate> + 'a {\n+    ) -> impl Iterator<Item = WhereClause> + 'a {\n         let mut bindings = None;\n         let trait_ref = match bound {\n             TypeBound::Path(path) => {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n-                Some(\n-                    bindings.clone().map_or(GenericPredicate::Error, GenericPredicate::Implemented),\n-                )\n+                Some(bindings.clone().map_or(WhereClause::Error, WhereClause::Implemented))\n             }\n             TypeBound::Lifetime(_) => None,\n-            TypeBound::Error => Some(GenericPredicate::Error),\n+            TypeBound::Error => Some(WhereClause::Error),\n         };\n         trait_ref.into_iter().chain(\n             bindings\n@@ -722,7 +719,7 @@ impl<'a> TyLoweringContext<'a> {\n         &'a self,\n         bound: &'a TypeBound,\n         trait_ref: TraitRef,\n-    ) -> impl Iterator<Item = GenericPredicate> + 'a {\n+    ) -> impl Iterator<Item = WhereClause> + 'a {\n         let last_segment = match bound {\n             TypeBound::Path(path) => path.segments().last(),\n             TypeBound::Error | TypeBound::Lifetime(_) => None,\n@@ -738,7 +735,7 @@ impl<'a> TyLoweringContext<'a> {\n                     &binding.name,\n                 );\n                 let (super_trait_ref, associated_ty) = match found {\n-                    None => return SmallVec::<[GenericPredicate; 1]>::new(),\n+                    None => return SmallVec::<[WhereClause; 1]>::new(),\n                     Some(t) => t,\n                 };\n                 let projection_ty = ProjectionTy {\n@@ -752,7 +749,7 @@ impl<'a> TyLoweringContext<'a> {\n                     let ty = self.lower_ty(type_ref);\n                     let alias_eq =\n                         AliasEq { alias: AliasTy::Projection(projection_ty.clone()), ty };\n-                    preds.push(GenericPredicate::AliasEq(alias_eq));\n+                    preds.push(WhereClause::AliasEq(alias_eq));\n                 }\n                 for bound in &binding.bounds {\n                     preds.extend(self.lower_type_bound(\n@@ -809,7 +806,7 @@ pub fn associated_type_shorthand_candidates<R>(\n             let mut traits_: Vec<_> = predicates\n                 .iter()\n                 .filter_map(|pred| match &pred.value {\n-                    GenericPredicate::Implemented(tr) => Some(tr.clone()),\n+                    WhereClause::Implemented(tr) => Some(tr.clone()),\n                     _ => None,\n                 })\n                 .collect();\n@@ -881,7 +878,7 @@ pub(crate) fn field_types_query(\n pub(crate) fn generic_predicates_for_param_query(\n     db: &dyn HirDatabase,\n     param_id: TypeParamId,\n-) -> Arc<[Binders<GenericPredicate>]> {\n+) -> Arc<[Binders<WhereClause>]> {\n     let resolver = param_id.parent.resolver(db.upcast());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n@@ -907,7 +904,7 @@ pub(crate) fn generic_predicates_for_param_recover(\n     _db: &dyn HirDatabase,\n     _cycle: &[String],\n     _param_id: &TypeParamId,\n-) -> Arc<[Binders<GenericPredicate>]> {\n+) -> Arc<[Binders<WhereClause>]> {\n     Arc::new([])\n }\n \n@@ -925,7 +922,7 @@ pub(crate) fn trait_environment_query(\n             if pred.is_error() {\n                 continue;\n             }\n-            if let GenericPredicate::Implemented(tr) = &pred {\n+            if let WhereClause::Implemented(tr) = &pred {\n                 traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n             }\n             let program_clause: chalk_ir::ProgramClause<Interner> =\n@@ -951,7 +948,7 @@ pub(crate) fn trait_environment_query(\n         cov_mark::hit!(trait_self_implements_self);\n         let substs = Substitution::type_params(db, trait_id);\n         let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_id), substitution: substs };\n-        let pred = GenericPredicate::Implemented(trait_ref);\n+        let pred = WhereClause::Implemented(trait_ref);\n         let program_clause: chalk_ir::ProgramClause<Interner> =\n             pred.clone().to_chalk(db).cast(&Interner);\n         clauses.push(program_clause.into_from_env_clause(&Interner));\n@@ -966,7 +963,7 @@ pub(crate) fn trait_environment_query(\n pub(crate) fn generic_predicates_query(\n     db: &dyn HirDatabase,\n     def: GenericDefId,\n-) -> Arc<[Binders<GenericPredicate>]> {\n+) -> Arc<[Binders<WhereClause>]> {\n     let resolver = def.resolver(db.upcast());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);"}, {"sha": "6feb64ceb482124546029b27690f518146bb0dbb", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -9,8 +9,8 @@ use hir_def::{lang_item::LangItemTarget, TraitId};\n use stdx::panic_context;\n \n use crate::{\n-    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, GenericPredicate, HirDisplay, Substitution,\n-    TraitRef, Ty, TyKind, TypeWalk,\n+    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, HirDisplay, Substitution, TraitRef, Ty,\n+    TyKind, TypeWalk, WhereClause,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};\n@@ -96,11 +96,11 @@ pub enum Obligation {\n }\n \n impl Obligation {\n-    pub fn from_predicate(predicate: GenericPredicate) -> Option<Obligation> {\n+    pub fn from_predicate(predicate: WhereClause) -> Option<Obligation> {\n         match predicate {\n-            GenericPredicate::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n-            GenericPredicate::AliasEq(alias_eq) => Some(Obligation::AliasEq(alias_eq)),\n-            GenericPredicate::Error => None,\n+            WhereClause::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n+            WhereClause::AliasEq(alias_eq) => Some(Obligation::AliasEq(alias_eq)),\n+            WhereClause::Error => None,\n         }\n     }\n }"}, {"sha": "4144035cd1f47f81bffbc02f4104144a65c422f6", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId,\n-    GenericPredicate, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, ProjectionTy,\n+    Substitution, TraitRef, Ty, TyKind, WhereClause,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n@@ -218,7 +218,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     //        |-------------OpaqueTyDatumBound--------------|\n                     // for<T> <Self> [Future<Self>, Future::Output<Self> = T]\n                     //     ^1  ^0            ^0                    ^0      ^1\n-                    let impl_bound = GenericPredicate::Implemented(TraitRef {\n+                    let impl_bound = WhereClause::Implemented(TraitRef {\n                         trait_id: to_chalk_trait_id(future_trait),\n                         // Self type as the first parameter.\n                         substitution: Substitution::single(\n@@ -229,7 +229,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                             .intern(&Interner),\n                         ),\n                     });\n-                    let proj_bound = GenericPredicate::AliasEq(AliasEq {\n+                    let proj_bound = WhereClause::AliasEq(AliasEq {\n                         alias: AliasTy::Projection(ProjectionTy {\n                             associated_ty_id: to_assoc_type_id(future_output),\n                             // Self type as the first parameter."}, {"sha": "5756e975499fa62da7fa71ce5157cec46aec2a3e", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -14,8 +14,8 @@ use crate::{\n     from_assoc_type_id,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n-    AliasTy, CallableDefId, FnPointer, GenericPredicate, InEnvironment, OpaqueTy, ProjectionTy,\n-    Scalar, Substitution, TraitRef, Ty,\n+    AliasTy, CallableDefId, FnPointer, InEnvironment, OpaqueTy, ProjectionTy, Scalar, Substitution,\n+    TraitRef, Ty, WhereClause,\n };\n \n use super::interner::*;\n@@ -304,40 +304,38 @@ impl ToChalk for TypeAliasAsValue {\n     }\n }\n \n-impl ToChalk for GenericPredicate {\n+impl ToChalk for WhereClause {\n     type Chalk = chalk_ir::QuantifiedWhereClause<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::QuantifiedWhereClause<Interner> {\n         match self {\n-            GenericPredicate::Implemented(trait_ref) => {\n+            WhereClause::Implemented(trait_ref) => {\n                 let chalk_trait_ref = trait_ref.to_chalk(db);\n                 let chalk_trait_ref = chalk_trait_ref.shifted_in(&Interner);\n                 make_binders(chalk_ir::WhereClause::Implemented(chalk_trait_ref), 0)\n             }\n-            GenericPredicate::AliasEq(alias_eq) => make_binders(\n+            WhereClause::AliasEq(alias_eq) => make_binders(\n                 chalk_ir::WhereClause::AliasEq(alias_eq.to_chalk(db).shifted_in(&Interner)),\n                 0,\n             ),\n-            GenericPredicate::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n+            WhereClause::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n         }\n     }\n \n     fn from_chalk(\n         db: &dyn HirDatabase,\n         where_clause: chalk_ir::QuantifiedWhereClause<Interner>,\n-    ) -> GenericPredicate {\n+    ) -> WhereClause {\n         // we don't produce any where clauses with binders and can't currently deal with them\n         match where_clause\n             .skip_binders()\n             .clone()\n             .shifted_out(&Interner)\n             .expect(\"unexpected bound vars in where clause\")\n         {\n-            chalk_ir::WhereClause::Implemented(tr) => {\n-                GenericPredicate::Implemented(from_chalk(db, tr))\n-            }\n+            chalk_ir::WhereClause::Implemented(tr) => WhereClause::Implemented(from_chalk(db, tr)),\n             chalk_ir::WhereClause::AliasEq(alias_eq) => {\n-                GenericPredicate::AliasEq(from_chalk(db, alias_eq))\n+                WhereClause::AliasEq(from_chalk(db, alias_eq))\n             }\n \n             chalk_ir::WhereClause::LifetimeOutlives(_) => {\n@@ -534,13 +532,13 @@ pub(super) fn convert_where_clauses(\n \n pub(super) fn generic_predicate_to_inline_bound(\n     db: &dyn HirDatabase,\n-    pred: &GenericPredicate,\n+    pred: &WhereClause,\n     self_ty: &Ty,\n ) -> Option<rust_ir::InlineBound<Interner>> {\n     // An InlineBound is like a GenericPredicate, except the self type is left out.\n     // We don't have a special type for this, but Chalk does.\n     match pred {\n-        GenericPredicate::Implemented(trait_ref) => {\n+        WhereClause::Implemented(trait_ref) => {\n             if &trait_ref.substitution[0] != self_ty {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n@@ -553,7 +551,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             let trait_bound = rust_ir::TraitBound { trait_id: trait_ref.trait_id, args_no_self };\n             Some(rust_ir::InlineBound::TraitBound(trait_bound))\n         }\n-        GenericPredicate::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n+        WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n             if &projection_ty.substitution[0] != self_ty {\n                 return None;\n             }"}, {"sha": "1ec1ecd43285124d2f431ce2cfeabf2866f19597", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fb37cf12f4e25ce1ba7e464dd257408444bfb/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=7a5fb37cf12f4e25ce1ba7e464dd257408444bfb", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n \n-use crate::{db::HirDatabase, GenericPredicate, TraitRef};\n+use crate::{db::HirDatabase, TraitRef, WhereClause};\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -64,7 +64,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n         .iter()\n         .filter_map(|pred| {\n             pred.as_ref().filter_map(|pred| match pred {\n-                GenericPredicate::Implemented(tr) => Some(tr.clone()),\n+                WhereClause::Implemented(tr) => Some(tr.clone()),\n                 _ => None,\n             })\n         })"}]}