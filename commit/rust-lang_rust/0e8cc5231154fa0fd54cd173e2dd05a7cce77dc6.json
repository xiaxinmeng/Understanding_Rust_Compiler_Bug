{"sha": "0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGNjNTIzMTE1NGZhMGZkNTRjZDE3M2UyZGQwNWE3Y2NlNzdkYzY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-14T00:37:03Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-14T00:37:03Z"}, "message": "Properly implement Show for EnumSet", "tree": {"sha": "da7270964fb42c12e55485d48a994003e2305bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7270964fb42c12e55485d48a994003e2305bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6", "html_url": "https://github.com/rust-lang/rust/commit/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a5448f41dcc6ab52663105a6b02fc5af4c503e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a5448f41dcc6ab52663105a6b02fc5af4c503e", "html_url": "https://github.com/rust-lang/rust/commit/79a5448f41dcc6ab52663105a6b02fc5af4c503e"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "02396dc13d134c7f2ebb50ae86435ca40d7e50d5", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=0e8cc5231154fa0fd54cd173e2dd05a7cce77dc6", "patch": "@@ -14,15 +14,31 @@\n //! representation to hold C-like enum variants.\n \n use core::prelude::*;\n+use core::fmt;\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Hash)]\n /// A specialized `Set` implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists\n     bits: uint\n }\n \n+impl<E:CLike+fmt::Show> fmt::Show for EnumSet<E> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(fmt, \"{{\"));\n+        let mut first = true;\n+        for e in self.iter() {\n+            if !first {\n+                try!(write!(fmt, \", \"));\n+            }\n+            try!(write!(fmt, \"{}\", e));\n+            first = false;\n+        }\n+        write!(fmt, \"}}\")\n+    }\n+}\n+\n /// An interface for casting C-like enum to uint and back.\n pub trait CLike {\n     /// Converts a C-like enum to a `uint`.\n@@ -165,6 +181,16 @@ mod test {\n         assert!(e.is_empty());\n     }\n \n+    #[test]\n+    fn test_show() {\n+        let mut e = EnumSet::empty();\n+        assert_eq!(\"{}\", e.to_string().as_slice());\n+        e.add(A);\n+        assert_eq!(\"{A}\", e.to_string().as_slice());\n+        e.add(C);\n+        assert_eq!(\"{A, C}\", e.to_string().as_slice());\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // intersect\n "}]}