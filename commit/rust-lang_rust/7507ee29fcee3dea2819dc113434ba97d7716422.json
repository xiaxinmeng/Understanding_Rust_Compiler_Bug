{"sha": "7507ee29fcee3dea2819dc113434ba97d7716422", "node_id": "C_kwDOAAsO6NoAKDc1MDdlZTI5ZmNlZTNkZWEyODE5ZGMxMTM0MzRiYTk3ZDc3MTY0MjI", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-04T08:14:00Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Migrate \"expected identifier\" diagnostics to diagnostic structs", "tree": {"sha": "30d3296dc6a862f16ee69166ab2a30695740cc44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d3296dc6a862f16ee69166ab2a30695740cc44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7507ee29fcee3dea2819dc113434ba97d7716422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7507ee29fcee3dea2819dc113434ba97d7716422", "html_url": "https://github.com/rust-lang/rust/commit/7507ee29fcee3dea2819dc113434ba97d7716422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7507ee29fcee3dea2819dc113434ba97d7716422/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b5194a3a0ff5179d4afb6886fc8816243574f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b5194a3a0ff5179d4afb6886fc8816243574f0", "html_url": "https://github.com/rust-lang/rust/commit/21b5194a3a0ff5179d4afb6886fc8816243574f0"}], "stats": {"total": 213, "additions": 170, "deletions": 43}, "files": [{"sha": "61450e288b4eb1c97dc308dc7ceeff72f8ebe9f1", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=7507ee29fcee3dea2819dc113434ba97d7716422", "patch": "@@ -290,3 +290,19 @@ parser_inner_doc_comment_not_permitted = expected outer doc comment\n     .suggestion = you might have meant to write a regular comment\n     .label_does_not_annotate_this = the inner doc comment doesn't annotate this {$item}\n     .sugg_change_inner_to_outer = to annotate the {$item}, change the doc comment from inner to outer style\n+\n+parser_expected_identifier_found_reserved_identifier_str = expected identifier, found reserved identifier `{$token_str}`\n+parser_expected_identifier_found_keyword_str = expected identifier, found keyword `{$token_str}`\n+parser_expected_identifier_found_reserved_keyword_str = expected identifier, found reserved keyword `{$token_str}`\n+parser_expected_identifier_found_doc_comment_str = expected identifier, found doc comment `{$token_str}`\n+parser_expected_identifier_found_str = expected identifier, found `{$token_str}`\n+\n+parser_expected_identifier_found_reserved_identifier = expected identifier, found reserved identifier\n+parser_expected_identifier_found_keyword = expected identifier, found keyword\n+parser_expected_identifier_found_reserved_keyword = expected identifier, found reserved keyword\n+parser_expected_identifier_found_doc_comment = expected identifier, found doc comment\n+parser_expected_identifier = expected identifier\n+\n+parser_sugg_escape_to_use_as_identifier = escape `{$ident_name}` to use it as an identifier\n+\n+parser_sugg_remove_comma = remove this comma"}, {"sha": "3b86dd15747150c89432d5d00f1875e988821d93", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7507ee29fcee3dea2819dc113434ba97d7716422", "patch": "@@ -1,9 +1,11 @@\n-use rustc_errors::Applicability;\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, Symbol};\n \n+use crate::parser::{TokenDescription, TokenDescriptionKind};\n+\n #[derive(Diagnostic)]\n #[diag(parser::maybe_report_ambiguous_plus)]\n pub(crate) struct AmbiguousPlus {\n@@ -870,3 +872,94 @@ pub(crate) struct InvalidMetaItem {\n     pub span: Span,\n     pub token: String,\n }\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_verbose(\n+    parser::sugg_escape_to_use_as_identifier,\n+    applicability = \"maybe-incorrect\",\n+    code = \"r#\"\n+)]\n+pub(crate) struct SuggEscapeToUseAsIdentifier {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident_name: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser::sugg_remove_comma, applicability = \"machine-applicable\", code = \"\")]\n+pub(crate) struct SuggRemoveComma {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ExpectedIdentifierFound {\n+    #[label(parser::expected_identifier_found_reserved_identifier)]\n+    ReservedIdentifier(#[primary_span] Span),\n+    #[label(parser::expected_identifier_found_keyword)]\n+    Keyword(#[primary_span] Span),\n+    #[label(parser::expected_identifier_found_reserved_keyword)]\n+    ReservedKeyword(#[primary_span] Span),\n+    #[label(parser::expected_identifier_found_doc_comment)]\n+    DocComment(#[primary_span] Span),\n+    #[label(parser::expected_identifier)]\n+    Other(#[primary_span] Span),\n+}\n+\n+impl ExpectedIdentifierFound {\n+    pub fn new(token_descr_kind: Option<TokenDescriptionKind>, span: Span) -> Self {\n+        (match token_descr_kind {\n+            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+                ExpectedIdentifierFound::ReservedIdentifier\n+            }\n+            Some(TokenDescriptionKind::Keyword) => ExpectedIdentifierFound::Keyword,\n+            Some(TokenDescriptionKind::ReservedKeyword) => ExpectedIdentifierFound::ReservedKeyword,\n+            Some(TokenDescriptionKind::DocComment) => ExpectedIdentifierFound::DocComment,\n+            None => ExpectedIdentifierFound::Other,\n+        })(span)\n+    }\n+}\n+\n+pub(crate) struct ExpectedIdentifier {\n+    pub span: Span,\n+    pub token_descr: TokenDescription,\n+    pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n+    pub suggest_remove_comma: Option<SuggRemoveComma>,\n+}\n+\n+impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n+    fn into_diagnostic(\n+        self,\n+        handler: &'a rustc_errors::Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n+        let mut diag = handler.struct_diagnostic(match self.token_descr.kind {\n+            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+                fluent::parser::expected_identifier_found_reserved_identifier_str\n+            }\n+            Some(TokenDescriptionKind::Keyword) => {\n+                fluent::parser::expected_identifier_found_keyword_str\n+            }\n+            Some(TokenDescriptionKind::ReservedKeyword) => {\n+                fluent::parser::expected_identifier_found_reserved_keyword_str\n+            }\n+            Some(TokenDescriptionKind::DocComment) => {\n+                fluent::parser::expected_identifier_found_doc_comment_str\n+            }\n+            None => fluent::parser::expected_identifier_found_str,\n+        });\n+        diag.set_span(self.span);\n+        diag.set_arg(\"token_str\", self.token_descr.name);\n+\n+        if let Some(sugg) = self.suggest_raw {\n+            sugg.add_to_diagnostic(&mut diag);\n+        }\n+\n+        ExpectedIdentifierFound::new(self.token_descr.kind, self.span).add_to_diagnostic(&mut diag);\n+\n+        if let Some(sugg) = self.suggest_remove_comma {\n+            sugg.add_to_diagnostic(&mut diag);\n+        }\n+\n+        diag\n+    }\n+}"}, {"sha": "8c2a925a231681eb3e00da265ac554c91600be45", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7507ee29fcee3dea2819dc113434ba97d7716422", "patch": "@@ -4,8 +4,9 @@ use super::{\n     TokenExpectType, TokenType,\n };\n use crate::errors::{\n-    AmbiguousPlus, BadQPathStage2, BadTypePlus, BadTypePlusSub, InInTypo, IncorrectAwait,\n-    IncorrectSemicolon, IncorrectUseOfAwait, UseEqInstead,\n+    AmbiguousPlus, BadQPathStage2, BadTypePlus, BadTypePlusSub, ExpectedIdentifier, InInTypo,\n+    IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, SuggEscapeToUseAsIdentifier,\n+    SuggRemoveComma, UseEqInstead,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -23,7 +24,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -285,10 +286,6 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let mut err = self.struct_span_err(\n-            self.token.span,\n-            &format!(\"expected identifier, found {}\", super::token_descr(&self.token)),\n-        );\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -300,34 +297,33 @@ impl<'a> Parser<'a> {\n             TokenKind::CloseDelim(Delimiter::Brace),\n             TokenKind::CloseDelim(Delimiter::Parenthesis),\n         ];\n-        match self.token.ident() {\n+        let suggest_raw = match self.token.ident() {\n             Some((ident, false))\n                 if ident.is_raw_guess()\n                     && self.look_ahead(1, |t| valid_follow.contains(&t.kind)) =>\n             {\n-                err.span_suggestion_verbose(\n-                    ident.span.shrink_to_lo(),\n-                    &format!(\"escape `{}` to use it as an identifier\", ident.name),\n-                    \"r#\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+                Some(SuggEscapeToUseAsIdentifier {\n+                    span: ident.span.shrink_to_lo(),\n+                    ident_name: ident.name.to_string(),\n+                })\n             }\n-            _ => {}\n-        }\n-        if let Some(token_descr) = super::token_descr_opt(&self.token) {\n-            err.span_label(self.token.span, format!(\"expected identifier, found {}\", token_descr));\n-        } else {\n-            err.span_label(self.token.span, \"expected identifier\");\n+            _ => None,\n+        };\n+\n+        let suggest_remove_comma =\n             if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                err.span_suggestion(\n-                    self.token.span,\n-                    \"remove this comma\",\n-                    \"\",\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-        err\n+                Some(SuggRemoveComma { span: self.token.span })\n+            } else {\n+                None\n+            };\n+\n+        let err = ExpectedIdentifier {\n+            span: self.token.span,\n+            token_descr: super::token_descr_struct(&self.token),\n+            suggest_raw,\n+            suggest_remove_comma,\n+        };\n+        err.into_diagnostic(&self.sess.span_diagnostic)\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "a1a224e8524cdabaa70f731c1e7b1e12caaa2536", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7507ee29fcee3dea2819dc113434ba97d7716422/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=7507ee29fcee3dea2819dc113434ba97d7716422", "patch": "@@ -410,22 +410,44 @@ pub enum FollowedByType {\n     No,\n }\n \n-fn token_descr_opt(token: &Token) -> Option<&'static str> {\n-    Some(match token.kind {\n-        _ if token.is_special_ident() => \"reserved identifier\",\n-        _ if token.is_used_keyword() => \"keyword\",\n-        _ if token.is_unused_keyword() => \"reserved keyword\",\n-        token::DocComment(..) => \"doc comment\",\n-        _ => return None,\n-    })\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub enum TokenDescriptionKind {\n+    ReservedIdentifier,\n+    Keyword,\n+    ReservedKeyword,\n+    DocComment,\n+}\n+\n+#[derive(Clone, PartialEq, Eq)]\n+pub struct TokenDescription {\n+    pub kind: Option<TokenDescriptionKind>,\n+    pub name: String,\n+}\n+\n+pub(super) fn token_descr_struct(token: &Token) -> TokenDescription {\n+    let kind = match token.kind {\n+        _ if token.is_special_ident() => Some(TokenDescriptionKind::ReservedIdentifier),\n+        _ if token.is_used_keyword() => Some(TokenDescriptionKind::Keyword),\n+        _ if token.is_unused_keyword() => Some(TokenDescriptionKind::ReservedKeyword),\n+        token::DocComment(..) => Some(TokenDescriptionKind::DocComment),\n+        _ => None,\n+    };\n+    let name = pprust::token_to_string(token).to_string();\n+\n+    TokenDescription { kind, name }\n }\n \n pub(super) fn token_descr(token: &Token) -> String {\n-    let token_str = pprust::token_to_string(token);\n-    match token_descr_opt(token) {\n-        Some(prefix) => format!(\"{} `{}`\", prefix, token_str),\n-        _ => format!(\"`{}`\", token_str),\n-    }\n+    let TokenDescription { kind, name } = token_descr_struct(token);\n+\n+    let kind = kind.map(|kind| match kind {\n+        TokenDescriptionKind::ReservedIdentifier => \"reserved identifier\",\n+        TokenDescriptionKind::Keyword => \"keyword\",\n+        TokenDescriptionKind::ReservedKeyword => \"reserved keyword\",\n+        TokenDescriptionKind::DocComment => \"doc comment\",\n+    });\n+\n+    if let Some(kind) = kind { format!(\"{} `{}`\", kind, name) } else { format!(\"`{}`\", name) }\n }\n \n impl<'a> Parser<'a> {"}]}