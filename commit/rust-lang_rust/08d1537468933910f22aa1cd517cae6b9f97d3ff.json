{"sha": "08d1537468933910f22aa1cd517cae6b9f97d3ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDE1Mzc0Njg5MzM5MTBmMjJhYTFjZDUxN2NhZTZiOWY5N2QzZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T16:20:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T16:20:56Z"}, "message": "get rid of AnalysisImpl", "tree": {"sha": "41d53c8c47531be6b35550d1cbded9437bd9376e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d53c8c47531be6b35550d1cbded9437bd9376e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d1537468933910f22aa1cd517cae6b9f97d3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d1537468933910f22aa1cd517cae6b9f97d3ff", "html_url": "https://github.com/rust-lang/rust/commit/08d1537468933910f22aa1cd517cae6b9f97d3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d1537468933910f22aa1cd517cae6b9f97d3ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "html_url": "https://github.com/rust-lang/rust/commit/e9b47dbb36d36b8fd7500e06581fd0ef687cc582"}], "stats": {"total": 181, "additions": 80, "deletions": 101}, "files": [{"sha": "0faf8b85d9f8fd1ebe72d685ad9f4fb8ca1b91b2", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 49, "deletions": 69, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/08d1537468933910f22aa1cd517cae6b9f97d3ff/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d1537468933910f22aa1cd517cae6b9f97d3ff/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=08d1537468933910f22aa1cd517cae6b9f97d3ff", "patch": "@@ -1,9 +1,6 @@\n-use std::{\n-    fmt,\n-    sync::Arc,\n-};\n+use std::sync::Arc;\n \n-use salsa::{Database, ParallelDatabase};\n+use salsa::Database;\n \n use hir::{\n     self, FnSignatureInfo, Problem, source_binder,\n@@ -21,18 +18,12 @@ use ra_syntax::{\n use crate::{\n     AnalysisChange,\n     Cancelable, NavigationTarget,\n-    completion::{CompletionItem, completions},\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, ReferenceResolution, RootChange, SourceChange, SourceFileEdit,\n     symbol_index::{LibrarySymbolsQuery, FileSymbol},\n };\n \n impl db::RootDatabase {\n-    pub(crate) fn analysis(&self) -> AnalysisImpl {\n-        AnalysisImpl {\n-            db: self.snapshot(),\n-        }\n-    }\n     pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n         log::info!(\"apply_change {:?}\", change);\n         // self.gc_syntax_trees();\n@@ -108,20 +99,9 @@ impl db::RootDatabase {\n     }\n }\n \n-pub(crate) struct AnalysisImpl {\n-    pub(crate) db: salsa::Snapshot<db::RootDatabase>,\n-}\n-\n-impl fmt::Debug for AnalysisImpl {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let db: &db::RootDatabase = &self.db;\n-        fmt.debug_struct(\"AnalysisImpl\").field(\"db\", db).finish()\n-    }\n-}\n-\n-impl AnalysisImpl {\n+impl db::RootDatabase {\n     pub(crate) fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n-        let descr = match source_binder::module_from_position(&*self.db, position)? {\n+        let descr = match source_binder::module_from_position(self, position)? {\n             None => return Ok(None),\n             Some(it) => it,\n         };\n@@ -143,12 +123,15 @@ impl AnalysisImpl {\n \n     /// This returns `Vec` because a module may be included from several places. We\n     /// don't handle this case yet though, so the Vec has length at most one.\n-    pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n-        let descr = match source_binder::module_from_position(&*self.db, position)? {\n+    pub(crate) fn parent_module(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Vec<NavigationTarget>> {\n+        let descr = match source_binder::module_from_position(self, position)? {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let (file_id, decl) = match descr.parent_link_source(&*self.db) {\n+        let (file_id, decl) = match descr.parent_link_source(self) {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n@@ -162,39 +145,33 @@ impl AnalysisImpl {\n         Ok(vec![NavigationTarget { file_id, symbol }])\n     }\n     /// Returns `Vec` for the same reason as `parent_module`\n-    pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        let descr = match source_binder::module_from_file_id(&*self.db, file_id)? {\n+    pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n+        let descr = match source_binder::module_from_file_id(self, file_id)? {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n         let root = descr.crate_root();\n         let file_id = root.file_id();\n \n-        let crate_graph = self.db.crate_graph();\n+        let crate_graph = self.crate_graph();\n         let crate_id = crate_graph.crate_id_for_crate_root(file_id);\n         Ok(crate_id.into_iter().collect())\n     }\n-    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n-        self.db.crate_graph().crate_root(crate_id)\n-    }\n-    pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let completions = completions(&self.db, position)?;\n-        Ok(completions.map(|it| it.into()))\n+    pub(crate) fn crate_root(&self, crate_id: CrateId) -> FileId {\n+        self.crate_graph().crate_root(crate_id)\n     }\n-    pub fn approximately_resolve_symbol(\n+    pub(crate) fn approximately_resolve_symbol(\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<ReferenceResolution>> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.source_file(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n             let mut rr = ReferenceResolution::new(name_ref.syntax().range());\n-            if let Some(fn_descr) = source_binder::function_from_child_node(\n-                &*self.db,\n-                position.file_id,\n-                name_ref.syntax(),\n-            )? {\n-                let scope = fn_descr.scopes(&*self.db);\n+            if let Some(fn_descr) =\n+                source_binder::function_from_child_node(self, position.file_id, name_ref.syntax())?\n+            {\n+                let scope = fn_descr.scopes(self);\n                 // First try to resolve the symbol locally\n                 if let Some(entry) = scope.resolve_local_name(name_ref) {\n                     rr.add_resolution(\n@@ -219,7 +196,7 @@ impl AnalysisImpl {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n                 if module.has_semi() {\n                     if let Some(child_module) =\n-                        source_binder::module_from_declaration(&*self.db, position.file_id, module)?\n+                        source_binder::module_from_declaration(self, position.file_id, module)?\n                     {\n                         let file_id = child_module.file_id();\n                         let name = match child_module.name() {\n@@ -240,10 +217,13 @@ impl AnalysisImpl {\n         Ok(None)\n     }\n \n-    pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n-        let file = self.db.source_file(position.file_id);\n+    pub(crate) fn find_all_refs(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Vec<(FileId, TextRange)>> {\n+        let file = self.source_file(position.file_id);\n         // Find the binding associated with the offset\n-        let (binding, descr) = match find_binding(&self.db, &file, position)? {\n+        let (binding, descr) = match find_binding(self, &file, position)? {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n@@ -255,7 +235,7 @@ impl AnalysisImpl {\n             .collect::<Vec<_>>();\n         ret.extend(\n             descr\n-                .scopes(&*self.db)\n+                .scopes(self)\n                 .find_all_refs(binding)\n                 .into_iter()\n                 .map(|ref_desc| (position.file_id, ref_desc.range)),\n@@ -293,8 +273,8 @@ impl AnalysisImpl {\n             Ok(Some((binding, descr)))\n         }\n     }\n-    pub fn doc_text_for(&self, nav: NavigationTarget) -> Cancelable<Option<String>> {\n-        let file = self.db.source_file(nav.file_id);\n+    pub(crate) fn doc_text_for(&self, nav: NavigationTarget) -> Cancelable<Option<String>> {\n+        let file = self.source_file(nav.file_id);\n         let result = match (nav.symbol.description(&file), nav.symbol.docs(&file)) {\n             (Some(desc), Some(docs)) => {\n                 Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\\n\\n\" + &*docs)\n@@ -307,8 +287,8 @@ impl AnalysisImpl {\n         Ok(result)\n     }\n \n-    pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        let syntax = self.db.source_file(file_id);\n+    pub(crate) fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n+        let syntax = self.source_file(file_id);\n \n         let mut res = ra_editor::diagnostics(&syntax)\n             .into_iter()\n@@ -319,9 +299,9 @@ impl AnalysisImpl {\n                 fix: d.fix.map(|fix| SourceChange::from_local_edit(file_id, fix)),\n             })\n             .collect::<Vec<_>>();\n-        if let Some(m) = source_binder::module_from_file_id(&*self.db, file_id)? {\n-            for (name_node, problem) in m.problems(&*self.db) {\n-                let source_root = self.db.file_source_root(file_id);\n+        if let Some(m) = source_binder::module_from_file_id(self, file_id)? {\n+            for (name_node, problem) in m.problems(self) {\n+                let source_root = self.file_source_root(file_id);\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n                         let create_file = FileSystemEdit::CreateFile {\n@@ -371,8 +351,8 @@ impl AnalysisImpl {\n         Ok(res)\n     }\n \n-    pub fn assists(&self, frange: FileRange) -> Vec<SourceChange> {\n-        let file = self.db.source_file(frange.file_id);\n+    pub(crate) fn assists(&self, frange: FileRange) -> Vec<SourceChange> {\n+        let file = self.source_file(frange.file_id);\n         let offset = frange.range.start();\n         let actions = vec![\n             ra_editor::flip_comma(&file, offset).map(|f| f()),\n@@ -389,11 +369,11 @@ impl AnalysisImpl {\n             .collect()\n     }\n \n-    pub fn resolve_callable(\n+    pub(crate) fn resolve_callable(\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.source_file(position.file_id);\n         let syntax = file.syntax();\n \n         // Find the calling expression and it's NameRef\n@@ -404,12 +384,12 @@ impl AnalysisImpl {\n         let file_symbols = self.index_resolve(name_ref)?;\n         for (fn_file_id, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n-                let fn_file = self.db.source_file(fn_file_id);\n+                let fn_file = self.source_file(fn_file_id);\n                 if let Some(fn_def) = find_node_at_offset(fn_file.syntax(), fs.node_range.start()) {\n                     let descr = ctry!(source_binder::function_from_source(\n-                        &*self.db, fn_file_id, fn_def\n+                        self, fn_file_id, fn_def\n                     )?);\n-                    if let Some(descriptor) = descr.signature_info(&*self.db) {\n+                    if let Some(descriptor) = descr.signature_info(self) {\n                         // If we have a calling expression let's find which argument we are on\n                         let mut current_parameter = None;\n \n@@ -456,20 +436,20 @@ impl AnalysisImpl {\n         Ok(None)\n     }\n \n-    pub fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n-        let file = self.db.source_file(frange.file_id);\n+    pub(crate) fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n+        let file = self.source_file(frange.file_id);\n         let syntax = file.syntax();\n         let node = find_covering_node(syntax, frange.range);\n         let parent_fn = ctry!(node.ancestors().find_map(FnDef::cast));\n         let function = ctry!(source_binder::function_from_source(\n-            &*self.db,\n+            self,\n             frange.file_id,\n             parent_fn\n         )?);\n-        let infer = function.infer(&*self.db)?;\n+        let infer = function.infer(self)?;\n         Ok(infer.type_of_node(node).map(|t| t.to_string()))\n     }\n-    pub fn rename(\n+    pub(crate) fn rename(\n         &self,\n         position: FilePosition,\n         new_name: &str,\n@@ -493,7 +473,7 @@ impl AnalysisImpl {\n         let mut query = Query::new(name.to_string());\n         query.exact();\n         query.limit(4);\n-        crate::symbol_index::world_symbols(&*self.db, query)\n+        crate::symbol_index::world_symbols(self, query)\n     }\n }\n "}, {"sha": "efb483103fe51bd560c67b1fdc56366b6dd9ca6e", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/08d1537468933910f22aa1cd517cae6b9f97d3ff/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d1537468933910f22aa1cd517cae6b9f97d3ff/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=08d1537468933910f22aa1cd517cae6b9f97d3ff", "patch": "@@ -27,11 +27,9 @@ use ra_syntax::{SourceFileNode, TextRange, TextUnit, SmolStr, SyntaxKind};\n use ra_text_edit::TextEdit;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n+use salsa::ParallelDatabase;\n \n-use crate::{\n-    imp::AnalysisImpl,\n-    symbol_index::{SymbolIndex, FileSymbol},\n-};\n+use crate::symbol_index::{SymbolIndex, FileSymbol};\n \n pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertText},\n@@ -161,7 +159,7 @@ impl AnalysisHost {\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n         Analysis {\n-            imp: self.db.analysis(),\n+            db: self.db.snapshot(),\n         }\n     }\n     /// Applies changes to the current state of the world. If there are\n@@ -293,56 +291,56 @@ impl ReferenceResolution {\n /// `Analysis` are canceled (most method return `Err(Canceled)`).\n #[derive(Debug)]\n pub struct Analysis {\n-    pub(crate) imp: AnalysisImpl,\n+    db: salsa::Snapshot<db::RootDatabase>,\n }\n \n impl Analysis {\n     pub fn file_text(&self, file_id: FileId) -> Arc<String> {\n-        self.imp.db.file_text(file_id)\n+        self.db.file_text(file_id)\n     }\n     pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n-        self.imp.db.source_file(file_id).clone()\n+        self.db.source_file(file_id).clone()\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.imp.db.file_lines(file_id)\n+        self.db.file_lines(file_id)\n     }\n     pub fn extend_selection(&self, frange: FileRange) -> TextRange {\n-        extend_selection::extend_selection(&self.imp.db, frange)\n+        extend_selection::extend_selection(&self.db, frange)\n     }\n     pub fn matching_brace(&self, file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n         ra_editor::matching_brace(file, offset)\n     }\n     pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        let file = self.imp.db.source_file(file_id);\n+        let file = self.db.source_file(file_id);\n         ra_editor::syntax_tree(&file)\n     }\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let file = self.imp.db.source_file(frange.file_id);\n+        let file = self.db.source_file(frange.file_id);\n         SourceChange::from_local_edit(frange.file_id, ra_editor::join_lines(&file, frange.range))\n     }\n     pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.imp.db.source_file(position.file_id);\n+        let file = self.db.source_file(position.file_id);\n         let edit = ra_editor::on_enter(&file, position.offset)?;\n         let res = SourceChange::from_local_edit(position.file_id, edit);\n         Some(res)\n     }\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.imp.db.source_file(position.file_id);\n+        let file = self.db.source_file(position.file_id);\n         Some(SourceChange::from_local_edit(\n             position.file_id,\n             ra_editor::on_eq_typed(&file, position.offset)?,\n         ))\n     }\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.imp.db.source_file(file_id);\n+        let file = self.db.source_file(file_id);\n         ra_editor::file_structure(&file)\n     }\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let file = self.imp.db.source_file(file_id);\n+        let file = self.db.source_file(file_id);\n         ra_editor::folding_ranges(&file)\n     }\n     pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<NavigationTarget>> {\n-        let res = symbol_index::world_symbols(&*self.imp.db, query)?\n+        let res = symbol_index::world_symbols(&*self.db, query)?\n             .into_iter()\n             .map(|(file_id, symbol)| NavigationTarget { file_id, symbol })\n             .collect();\n@@ -352,57 +350,58 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<ReferenceResolution>> {\n-        self.imp.approximately_resolve_symbol(position)\n+        self.db.approximately_resolve_symbol(position)\n     }\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n-        self.imp.find_all_refs(position)\n+        self.db.find_all_refs(position)\n     }\n     pub fn doc_text_for(&self, nav: NavigationTarget) -> Cancelable<Option<String>> {\n-        self.imp.doc_text_for(nav)\n+        self.db.doc_text_for(nav)\n     }\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n-        self.imp.parent_module(position)\n+        self.db.parent_module(position)\n     }\n     pub fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n-        self.imp.module_path(position)\n+        self.db.module_path(position)\n     }\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        self.imp.crate_for(file_id)\n+        self.db.crate_for(file_id)\n     }\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        Ok(self.imp.crate_root(crate_id))\n+        Ok(self.db.crate_root(crate_id))\n     }\n     pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n-        let file = self.imp.db.source_file(file_id);\n+        let file = self.db.source_file(file_id);\n         Ok(runnables::runnables(self, &file, file_id))\n     }\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        syntax_highlighting::highlight(&*self.imp.db, file_id)\n+        syntax_highlighting::highlight(&*self.db, file_id)\n     }\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.imp.completions(position)\n+        let completions = completion::completions(&self.db, position)?;\n+        Ok(completions.map(|it| it.into()))\n     }\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<SourceChange>> {\n-        Ok(self.imp.assists(frange))\n+        Ok(self.db.assists(frange))\n     }\n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        self.imp.diagnostics(file_id)\n+        self.db.diagnostics(file_id)\n     }\n     pub fn resolve_callable(\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n-        self.imp.resolve_callable(position)\n+        self.db.resolve_callable(position)\n     }\n     pub fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n-        self.imp.type_of(frange)\n+        self.db.type_of(frange)\n     }\n     pub fn rename(\n         &self,\n         position: FilePosition,\n         new_name: &str,\n     ) -> Cancelable<Vec<SourceFileEdit>> {\n-        self.imp.rename(position, new_name)\n+        self.db.rename(position, new_name)\n     }\n }\n "}]}