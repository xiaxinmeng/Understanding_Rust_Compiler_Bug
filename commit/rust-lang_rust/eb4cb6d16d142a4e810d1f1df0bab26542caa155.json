{"sha": "eb4cb6d16d142a4e810d1f1df0bab26542caa155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGNiNmQxNmQxNDJhNGU4MTBkMWYxZGYwYmFiMjY1NDJjYWExNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-13T12:07:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-13T12:07:11Z"}, "message": "Auto merge of #25318 - nrc:for-expn, r=sfackler\n\nr? @sfackler", "tree": {"sha": "c310e5f476897641866e47c3cfa3ee629be3bd8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c310e5f476897641866e47c3cfa3ee629be3bd8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4cb6d16d142a4e810d1f1df0bab26542caa155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4cb6d16d142a4e810d1f1df0bab26542caa155", "html_url": "https://github.com/rust-lang/rust/commit/eb4cb6d16d142a4e810d1f1df0bab26542caa155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4cb6d16d142a4e810d1f1df0bab26542caa155/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67433c1a309d3c9457e49f15e80a2d927d165996", "url": "https://api.github.com/repos/rust-lang/rust/commits/67433c1a309d3c9457e49f15e80a2d927d165996", "html_url": "https://github.com/rust-lang/rust/commit/67433c1a309d3c9457e49f15e80a2d927d165996"}, {"sha": "edb2ee510b08b0fadedd3cb56b188cf69ecf2a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb2ee510b08b0fadedd3cb56b188cf69ecf2a6a", "html_url": "https://github.com/rust-lang/rust/commit/edb2ee510b08b0fadedd3cb56b188cf69ecf2a6a"}], "stats": {"total": 103, "additions": 89, "deletions": 14}, "files": [{"sha": "c692babfacc4455d4badfaaa2a91f5d5f9f7c960", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=eb4cb6d16d142a4e810d1f1df0bab26542caa155", "patch": "@@ -235,7 +235,9 @@ pub enum MacroFormat {\n     /// e.g. #[derive(...)] <item>\n     MacroAttribute,\n     /// e.g. `format!()`\n-    MacroBang\n+    MacroBang,\n+    /// Expansion performed by the compiler (libsyntax::expand).\n+    CompilerExpansion,\n }\n \n #[derive(Clone, Hash, Debug)]"}, {"sha": "66ddd73101e26667832f4c6aa1793e1086eca4a0", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=eb4cb6d16d142a4e810d1f1df0bab26542caa155", "patch": "@@ -770,12 +770,15 @@ fn print_macro_backtrace(w: &mut EmitterWriter,\n                                                |span| cm.span_to_string(span));\n                 let (pre, post) = match ei.callee.format {\n                     codemap::MacroAttribute => (\"#[\", \"]\"),\n-                    codemap::MacroBang => (\"\", \"!\")\n+                    codemap::MacroBang => (\"\", \"!\"),\n+                    codemap::CompilerExpansion => (\"\", \"\"),\n                 };\n                 try!(print_diagnostic(w, &ss, Note,\n-                                      &format!(\"in expansion of {}{}{}\", pre,\n-                                              ei.callee.name,\n-                                              post), None));\n+                                      &format!(\"in expansion of {}{}{}\",\n+                                               pre,\n+                                               ei.callee.name,\n+                                               post),\n+                                      None));\n                 let ss = cm.span_to_string(ei.call_site);\n                 try!(print_diagnostic(w, &ss, Note, \"expansion site\", None));\n                 Ok(Some(ei.call_site))"}, {"sha": "fae0b56ce3d0b5d0b441c51b223348073bf589a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eb4cb6d16d142a4e810d1f1df0bab26542caa155", "patch": "@@ -19,7 +19,7 @@ use ext::build::AstBuilder;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n-use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n+use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute, CompilerExpansion};\n use ext::base::*;\n use feature_gate::{self, Features};\n use fold;\n@@ -34,6 +34,18 @@ use visit::Visitor;\n use std_inject;\n \n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n+    fn push_compiler_expansion(fld: &mut MacroExpander, span: Span, expansion_desc: &str) {\n+        fld.cx.bt_push(ExpnInfo {\n+            call_site: span,\n+            callee: NameAndSpan {\n+                name: expansion_desc.to_string(),\n+                format: CompilerExpansion,\n+                allow_internal_unstable: true,\n+                span: None,\n+            },\n+        });\n+    }\n+\n     e.and_then(|ast::Expr {id, node, span}| match node {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n@@ -77,6 +89,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     }\n             //   }\n \n+            push_compiler_expansion(fld, span, \"while let expansion\");\n+\n             // `<pat> => <body>`\n             let pat_arm = {\n                 let body_expr = fld.cx.expr_block(body);\n@@ -98,7 +112,9 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             // `[opt_ident]: loop { ... }`\n             let loop_block = fld.cx.block_expr(match_expr);\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n-            fld.cx.expr(span, ast::ExprLoop(loop_block, opt_ident))\n+            let result = fld.cx.expr(span, ast::ExprLoop(loop_block, opt_ident));\n+            fld.cx.bt_pop();\n+            result\n         }\n \n         // Desugar ExprIfLet\n@@ -112,6 +128,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     _ => [<elseopt> | ()]\n             //   }\n \n+            push_compiler_expansion(fld, span, \"if let expansion\");\n+\n             // `<pat> => <body>`\n             let pat_arm = {\n                 let body_expr = fld.cx.expr_block(body);\n@@ -173,13 +191,16 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                                                 ast::MatchSource::IfLetDesugar {\n                                                     contains_else_clause: contains_else_clause,\n                                                 }));\n-            fld.fold_expr(match_expr)\n+            let result = fld.fold_expr(match_expr);\n+            fld.cx.bt_pop();\n+            result\n         }\n \n         // Desugar support for ExprIfLet in the ExprIf else position\n         ast::ExprIf(cond, blk, elseopt) => {\n             let elseopt = elseopt.map(|els| els.and_then(|els| match els.node {\n                 ast::ExprIfLet(..) => {\n+                    push_compiler_expansion(fld, span, \"if let expansion\");\n                     // wrap the if-let expr in a block\n                     let span = els.span;\n                     let blk = P(ast::Block {\n@@ -189,7 +210,9 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                         rules: ast::DefaultBlock,\n                         span: span\n                     });\n-                    fld.cx.expr_block(blk)\n+                    let result = fld.cx.expr_block(blk);\n+                    fld.cx.bt_pop();\n+                    result\n                 }\n                 _ => P(els)\n             }));\n@@ -221,6 +244,10 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     result\n             //   }\n \n+            push_compiler_expansion(fld, span, \"for loop expansion\");\n+\n+            let span = fld.new_span(span);\n+\n             // expand <head>\n             let head = fld.fold_expr(head);\n \n@@ -235,10 +262,11 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 rename_fld.fold_ident(ident)\n             };\n \n-            let pat_span = pat.span;\n-            // `:;std::option::Option::Some(<pat>) => <body>`\n+            let pat_span = fld.new_span(pat.span);\n+            // `::std::option::Option::Some(<pat>) => <body>`\n             let pat_arm = {\n                 let body_expr = fld.cx.expr_block(body);\n+                let pat = noop_fold_pat(pat, fld);\n                 let some_pat = fld.cx.pat_some(pat_span, pat);\n \n                 fld.cx.arm(pat_span, vec![some_pat], body_expr)\n@@ -304,20 +332,25 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             // `{ let result = ...; result }`\n             let result_ident = token::gensym_ident(\"result\");\n-            fld.cx.expr_block(\n+            let result = fld.cx.expr_block(\n                 fld.cx.block_all(\n                     span,\n                     vec![fld.cx.stmt_let(span, false, result_ident, match_expr)],\n-                    Some(fld.cx.expr_ident(span, result_ident))))\n+                    Some(fld.cx.expr_ident(span, result_ident))));\n+            fld.cx.bt_pop();\n+            result\n         }\n \n         ast::ExprClosure(capture_clause, fn_decl, block) => {\n+            push_compiler_expansion(fld, span, \"closure expansion\");\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n             let new_node = ast::ExprClosure(capture_clause,\n                                             rewritten_fn_decl,\n                                             rewritten_block);\n-            P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)})\n+            let result = P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)});\n+            fld.cx.bt_pop();\n+            result\n         }\n \n         _ => {"}, {"sha": "6b1dbf9d2d0ba23158b66e3ba7c7770f895fffd3", "filename": "src/test/compile-fail/for-expn-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs?ref=eb4cb6d16d142a4e810d1f1df0bab26542caa155", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we get an expansion stack for `for` loops.\n+\n+// error-pattern:in expansion of for loop expansion\n+\n+fn main() {\n+    for t in &foo {\n+    }\n+}"}, {"sha": "43776d75a47f4aba186fe1364ae62de428146465", "filename": "src/test/compile-fail/for-expn.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4cb6d16d142a4e810d1f1df0bab26542caa155/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs?ref=eb4cb6d16d142a4e810d1f1df0bab26542caa155", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that an error on a sub-expresson in a for loop has the correct span.\n+\n+fn main() {\n+    // Odd formatting to make sure we get the right span.\n+    for t in &\n+      foo //~ ERROR unresolved name `foo`\n+    {\n+    }\n+}"}]}