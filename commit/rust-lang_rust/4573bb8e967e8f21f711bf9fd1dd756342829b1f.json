{"sha": "4573bb8e967e8f21f711bf9fd1dd756342829b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzNiYjhlOTY3ZThmMjFmNzExYmY5ZmQxZGQ3NTYzNDI4MjliMWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-16T14:26:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-19T08:41:09Z"}, "message": "Add special case for `UnitVariant(..)` patterns", "tree": {"sha": "7f842d63058a71a97edacaa3dabd769b76733905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f842d63058a71a97edacaa3dabd769b76733905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4573bb8e967e8f21f711bf9fd1dd756342829b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4573bb8e967e8f21f711bf9fd1dd756342829b1f", "html_url": "https://github.com/rust-lang/rust/commit/4573bb8e967e8f21f711bf9fd1dd756342829b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4573bb8e967e8f21f711bf9fd1dd756342829b1f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35749923eed9060118878c8cb812bafd32bbcd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35749923eed9060118878c8cb812bafd32bbcd7e", "html_url": "https://github.com/rust-lang/rust/commit/35749923eed9060118878c8cb812bafd32bbcd7e"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "7cc81027f024ac6ea6e94f6a8e5e48aad54a3a26", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4573bb8e967e8f21f711bf9fd1dd756342829b1f", "patch": "@@ -139,7 +139,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n             if let hir::PatEnum(ref path, ref subpats) = pat.node {\n                 if !(subpats.is_some() && subpats.as_ref().unwrap().is_empty()) {\n-                    bad_struct_kind_err(tcx.sess, pat.span, path);\n+                    bad_struct_kind_err(tcx.sess, pat.span, path, false);\n                     return;\n                 }\n             }\n@@ -581,9 +581,9 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n }\n \n // This function exists due to the warning \"diagnostic code E0164 already used\"\n-fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path) {\n+fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path, is_warning: bool) {\n     let name = pprust::path_to_string(path);\n-    span_err!(sess, span, E0164,\n+    span_err_or_warn!(is_warning, sess, span, E0164,\n         \"`{}` does not name a tuple variant or a tuple struct\", name);\n }\n \n@@ -634,8 +634,8 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                      path_scheme, &ctor_predicates,\n                      opt_ty, def, pat.span, pat.id);\n \n-    let report_bad_struct_kind = || {\n-        bad_struct_kind_err(tcx.sess, pat.span, path);\n+    let report_bad_struct_kind = |is_warning| {\n+        bad_struct_kind_err(tcx.sess, pat.span, path, is_warning);\n         fcx.write_error(pat.id);\n \n         if let Some(subpats) = subpats {\n@@ -650,7 +650,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n     // function uses checks specific to structs and enums.\n     if path_res.depth != 0 {\n         if is_tuple_struct_pat {\n-            report_bad_struct_kind();\n+            report_bad_struct_kind(false);\n         } else {\n             let pat_ty = fcx.node_ty(pat.id);\n             demand::suptype(fcx, pat.span, expected, pat_ty);\n@@ -668,8 +668,13 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         {\n             let variant = enum_def.variant_of_def(def);\n             if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                report_bad_struct_kind();\n-                return;\n+                // Matching unit variants with tuple variant patterns (`UnitVariant(..)`)\n+                // is allowed for backward compatibility.\n+                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n+                report_bad_struct_kind(is_special_case);\n+                if !is_special_case {\n+                    return\n+                }\n             }\n             (variant.fields\n                     .iter()\n@@ -682,7 +687,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ty::TyStruct(struct_def, expected_substs) => {\n             let variant = struct_def.struct_variant();\n             if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                report_bad_struct_kind();\n+                report_bad_struct_kind(false);\n                 return;\n             }\n             (variant.fields\n@@ -694,7 +699,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n              \"struct\")\n         }\n         _ => {\n-            report_bad_struct_kind();\n+            report_bad_struct_kind(false);\n             return;\n         }\n     };"}, {"sha": "6cb9a3f007f0c5e628e6fd8983e6e548255fad23", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=4573bb8e967e8f21f711bf9fd1dd756342829b1f", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n     match e2 {\n-        E::Empty2(..) => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+        E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "17debdabb61f08fe1982e77ae63037a6f7bc21a9", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=4573bb8e967e8f21f711bf9fd1dd756342829b1f", "patch": "@@ -20,7 +20,8 @@ fn main() {\n           color::rgb(_, _, _) => { }\n           color::cmyk(_, _, _, _) => { }\n           color::no_color(_) => { }\n-          //~^ ERROR `color::no_color` does not name a tuple variant or a tuple struct\n+          //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n+          //~^^ WARN `color::no_color` does not name a tuple variant or a tuple struct\n         }\n     }\n }"}, {"sha": "1721d1f0ae11c6697426314235917d7aaf963a27", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573bb8e967e8f21f711bf9fd1dd756342829b1f/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=4573bb8e967e8f21f711bf9fd1dd756342829b1f", "patch": "@@ -25,7 +25,8 @@ fn f(_c: char) {}\n fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n-        A::D(_) => (),       //~ ERROR `A::D` does not name a tuple variant or a tuple struct\n+        A::D(_) => (),       //~ ERROR this pattern has 1 field, but\n+        //~^ WARN `A::D` does not name a tuple variant or a tuple struct\n         _ => ()\n     }\n     match 'c' {"}]}