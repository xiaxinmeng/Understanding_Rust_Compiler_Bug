{"sha": "1e71862046bdea989e4a25c266b2df768cb4f0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzE4NjIwNDZiZGVhOTg5ZTRhMjVjMjY2YjJkZjc2OGNiNGYwYmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-29T17:48:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T11:54:02Z"}, "message": "Add some more comments", "tree": {"sha": "00ef910461852612d920d21ffbcf385bea696414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ef910461852612d920d21ffbcf385bea696414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e71862046bdea989e4a25c266b2df768cb4f0bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl95t9oACgkQtAh+UQ6Y\nsWS2UhAAj7b/23wRR/22WS+OuS/C+1Gs/3/NHjQHsdTITNr3meeZPxngFplnfRwI\nnGs/o/AOhtHUPG1sxcIBlPfevqE5XtQZm1vz9sLMYHXQO+9sCvLHC8W2KwOjXQUf\nIMtKKtEpHu9/qVWO9j3FC4gC3rrUfKxtgKzYCQR6kRcIL9ZyLLoqX15ftIMy3eaD\npDeQ36wZrxf7Fd6CsR3N8L05ioZipwHVrZZTvw1uufHjxbK0ecXbCQoXrhv/MuD1\nPKj1gqpC8pKCwDKlM0nXF2/Q2fL2eG8q90RsyJv2LzavBidYceAAuWAx8eA4Ai12\nyT+GXKS6zvyQvOE5WHjwiiWVZbSoGSXGUY5yikw3I2LBUPzDKWruJ4aGiw6D1YFh\nPqAQawCIi5UdavAwkvK8jAOvMQbiqTHl3SnJ0x5QdGncarP4v4fHk9hI2qdSJQVG\noSYt+9etBWf3krTzWTx6TtnOFPDI5K+rHguIiIbCGpV3z2UI6dA+IAp0rnEKxOhe\nqBL4sHdF6/Bp7t39jgQah+7kwhUtTk7DOCgaZqJkdDXvN+9mXzYvgvJQOCejxoZY\nwqtFEItjb0CQRsxjEiLqK7lxZq94NoQSwHQHtQBKLupjkcg4IRkD32yoFMqdzUYu\nMUzrSrR4TGYLnVtS5b3i/KTlAakcTo4u4TcCCehAgRM8K7bzBrQ=\n=70yt\n-----END PGP SIGNATURE-----", "payload": "tree 00ef910461852612d920d21ffbcf385bea696414\nparent f810e600cd7b128ec167937bbd87cfabc52b403e\nauthor Matthew Jasper <mjjasper1@gmail.com> 1582998489 +0000\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601812442 -0400\n\nAdd some more comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e71862046bdea989e4a25c266b2df768cb4f0bb", "html_url": "https://github.com/rust-lang/rust/commit/1e71862046bdea989e4a25c266b2df768cb4f0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e71862046bdea989e4a25c266b2df768cb4f0bb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f810e600cd7b128ec167937bbd87cfabc52b403e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f810e600cd7b128ec167937bbd87cfabc52b403e", "html_url": "https://github.com/rust-lang/rust/commit/f810e600cd7b128ec167937bbd87cfabc52b403e"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "02dcf0394f641067546556e3b77d1ccc42092173", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e71862046bdea989e4a25c266b2df768cb4f0bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e71862046bdea989e4a25c266b2df768cb4f0bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=1e71862046bdea989e4a25c266b2df768cb4f0bb", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: method,\n                 }),\n                 args: vec![val, expect],\n-                destination: Some((eq_result.clone(), eq_block)),\n+                destination: Some((eq_result, eq_block)),\n                 cleanup: None,\n                 from_hir_call: false,\n                 fn_span: source_info.span,"}, {"sha": "4cb4b5e3f9dd5f13531ce24ca799f1c1782b8848", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1e71862046bdea989e4a25c266b2df768cb4f0bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e71862046bdea989e4a25c266b2df768cb4f0bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=1e71862046bdea989e4a25c266b2df768cb4f0bb", "patch": "@@ -238,6 +238,9 @@ trait DropTreeBuilder<'tcx> {\n \n impl DropTree {\n     fn new() -> Self {\n+        // The root node of the tree doesn't represent a drop, but instead\n+        // represents the block in the tree that should be jumped to once all\n+        // of the required drops have been performed.\n         let fake_source_info = SourceInfo::outermost(DUMMY_SP);\n         let fake_data =\n             DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };\n@@ -259,6 +262,10 @@ impl DropTree {\n         self.entry_points.push((to, from));\n     }\n \n+    /// Builds the MIR for a given drop tree.\n+    ///\n+    /// `blocks` should have the same length as `self.drops`, and may have its\n+    /// first value set to some already existing block.\n     fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(\n         &mut self,\n         cfg: &mut CFG<'tcx>,\n@@ -1345,10 +1352,16 @@ impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {\n         cfg.start_new_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let kind = &mut cfg.block_data_mut(from).terminator_mut().kind;\n-        if let TerminatorKind::Yield { drop, .. } = kind {\n+        let term = cfg.block_data_mut(from).terminator_mut();\n+        if let TerminatorKind::Yield { ref mut drop, .. } = term.kind {\n             *drop = Some(to);\n-        };\n+        } else {\n+            span_bug!(\n+                term.source_info.span,\n+                \"cannot enter generator drop tree from {:?}\",\n+                term.kind\n+            )\n+        }\n     }\n }\n \n@@ -1359,8 +1372,8 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n         cfg.start_new_cleanup_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = &mut cfg.block_data_mut(from).terminator_mut().kind;\n-        match term {\n+        let term = &mut cfg.block_data_mut(from).terminator_mut();\n+        match &mut term.kind {\n             TerminatorKind::Drop { unwind, .. }\n             | TerminatorKind::DropAndReplace { unwind, .. }\n             | TerminatorKind::FalseUnwind { unwind, .. }\n@@ -1376,7 +1389,9 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. } => bug!(\"cannot unwind from {:?}\", term),\n+            | TerminatorKind::FalseEdges { .. } => {\n+                span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n+            }\n         }\n     }\n }"}]}