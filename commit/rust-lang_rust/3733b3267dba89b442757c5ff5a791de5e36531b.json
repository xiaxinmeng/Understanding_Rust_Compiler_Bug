{"sha": "3733b3267dba89b442757c5ff5a791de5e36531b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MzNiMzI2N2RiYTg5YjQ0Mjc1N2M1ZmY1YTc5MWRlNWUzNjUzMWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-02-12T14:07:04Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-02-12T14:42:04Z"}, "message": "Add documentation about -Clinker-plugin-lto to rustc book.", "tree": {"sha": "92cfeeb0bb40629709150af5cc3e01609c94fc0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92cfeeb0bb40629709150af5cc3e01609c94fc0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3733b3267dba89b442757c5ff5a791de5e36531b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3733b3267dba89b442757c5ff5a791de5e36531b", "html_url": "https://github.com/rust-lang/rust/commit/3733b3267dba89b442757c5ff5a791de5e36531b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3733b3267dba89b442757c5ff5a791de5e36531b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f425d2c31ea0ef022793a3fdcb8af84d471b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f425d2c31ea0ef022793a3fdcb8af84d471b86", "html_url": "https://github.com/rust-lang/rust/commit/04f425d2c31ea0ef022793a3fdcb8af84d471b86"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "34708d1847f6b802e908cc147133a1b0b475642f", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3733b3267dba89b442757c5ff5a791de5e36531b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/3733b3267dba89b442757c5ff5a791de5e36531b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=3733b3267dba89b442757c5ff5a791de5e36531b", "patch": "@@ -13,4 +13,5 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n-- [Contributing to `rustc`](contributing.md)\n\\ No newline at end of file\n+- [Linker-plugin based LTO](linker-plugin-lto.md)\n+- [Contributing to `rustc`](contributing.md)"}, {"sha": "73a2efcb33a75a1b2ac2473f5e15c59de932e3b5", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/3733b3267dba89b442757c5ff5a791de5e36531b/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/3733b3267dba89b442757c5ff5a791de5e36531b/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=3733b3267dba89b442757c5ff5a791de5e36531b", "patch": "@@ -0,0 +1,108 @@\n+# Linker-plugin-LTO\n+\n+The `-C linker-plugin-lto` flag allows for deferring the LTO optimization\n+to the actual linking step, which in turn allows for performing\n+interprocedural optimizations across programming language boundaries if\n+all the object files being linked were created by LLVM based toolchains.\n+The prime example here would be linking Rust code together with\n+Clang-compiled C/C++ code.\n+\n+## Usage\n+\n+There are two main cases how linker plugin based LTO can be used:\n+\n+ - compiling a Rust `staticlib` that is used as a C ABI dependency\n+ - compiling a Rust binary where `rustc` invokes the linker\n+\n+In both cases the Rust code has to be compiled with `-C linker-plugin-lto` and\n+the C/C++ code with `-flto` or `-flto=thin` so that object files are emitted\n+as LLVM bitcode.\n+\n+### Rust `staticlib` as dependency in C/C++ program\n+\n+In this case the Rust compiler just has to make sure that the object files in\n+the `staticlib` are in the right format. For linking, a linker with the\n+LLVM plugin must be used (e.g. LLD).\n+\n+Using `rustc` directly:\n+\n+```bash\n+# Compile the Rust staticlib\n+rustc --crate-type=staticlib -Clinker-plugin-lto -Copt-level=2 ./lib.rs\n+# Compile the C code with `-flto=thin`\n+clang -c -O2 -flto=thin -o main.o ./main.c\n+# Link everything, making sure that we use an appropriate linker\n+clang -flto=thin -fuse-ld=lld -L . -l\"name-of-your-rust-lib\" -o main -O2 ./cmain.o\n+```\n+\n+Using `cargo`:\n+\n+```bash\n+# Compile the Rust staticlib\n+RUSTFLAGS=\"-Clinker-plugin-lto\" cargo build --release\n+# Compile the C code with `-flto=thin`\n+clang -c -O2 -flto=thin -o main.o ./main.c\n+# Link everything, making sure that we use an appropriate linker\n+clang -flto=thin -fuse-ld=lld -L . -l\"name-of-your-rust-lib\" -o main -O2 ./cmain.o\n+```\n+\n+### C/C++ code as a dependency in Rust\n+\n+In this case the linker will be invoked by `rustc`. We again have to make sure\n+that an appropriate linker is used.\n+\n+Using `rustc` directly:\n+\n+```bash\n+# Compile C code with `-flto`\n+clang ./clib.c -flto=thin -c -o ./clib.o -O2\n+# Create a static library from the C code\n+ar crus ./libxyz.a ./clib.o\n+\n+# Invoke `rustc` with the additional arguments\n+rustc -Clinker-plugin-lto -L. -Copt-level=2 -Clinker=clang -Clink-arg=-fuse-ld=lld ./main.rs\n+```\n+\n+Using `cargo` directly:\n+\n+```bash\n+# Compile C code with `-flto`\n+clang ./clib.c -flto=thin -c -o ./clib.o -O2\n+# Create a static library from the C code\n+ar crus ./libxyz.a ./clib.o\n+\n+# Set the linking arguments via RUSTFLAGS\n+RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n+```\n+\n+### Explicitly specifying the linker plugin to be used by `rustc`\n+\n+If one wants to use a linker other than LLD, the LLVM linker plugin has to be\n+specified explicitly. Otherwise the linker cannot read the object files. The\n+path to the plugin is passed as an argument to the `-Clinker-plugin-lto`\n+option:\n+\n+```bash\n+rustc -Clinker-plugin-lto=\"/path/to/LLVMgold.so\" -L. -Copt-level=2 ./main.rs\n+```\n+\n+\n+## Toolchain Compatibility\n+\n+In order for this kind of LTO to work, the LLVM linker plugin must be able to\n+handle the LLVM bitcode produced by both `rustc` and `clang`.\n+\n+Best results are achieved by using a `rustc` and `clang` that are based on the\n+exact same version of LLVM. One can use `rustc -vV` in order to view the LLVM\n+used by a given `rustc` version. Note that the version number given\n+here is only an approximation as Rust sometimes uses unstable revisions of\n+LLVM. However, the approximation is usually reliable.\n+\n+The following table shows known good combinations of toolchain versions.\n+\n+|           | Clang 7   | Clang 8   |\n+|-----------|-----------|-----------|\n+| Rust 1.34 |     \u2717     |     \u2713     |\n+| Rust 1.35 |     \u2717     |    \u2713(?)   |\n+\n+Note that the compatibility policy for this feature might change in the future."}]}