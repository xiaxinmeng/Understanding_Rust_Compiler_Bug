{"sha": "67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDFjZjExMjIxODI1NzAyNWVkZjc1YjljYjdlYmM4YWI4YmZhNjQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-02-07T21:09:15Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-02-19T23:45:13Z"}, "message": "introduce an early pass to clear dead blocks\n\nthis makes the the MIR assignment pass complete successfully", "tree": {"sha": "4cdaa2a2ed85462b8664d8b6dfa5e7690b59a7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cdaa2a2ed85462b8664d8b6dfa5e7690b59a7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "html_url": "https://github.com/rust-lang/rust/commit/67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999f1767caeb62a60278ae5afd9191dfbbd6ef18", "url": "https://api.github.com/repos/rust-lang/rust/commits/999f1767caeb62a60278ae5afd9191dfbbd6ef18", "html_url": "https://github.com/rust-lang/rust/commit/999f1767caeb62a60278ae5afd9191dfbbd6ef18"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "68d85dc8394b9315c154df920cd940b6cdd642f5", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "patch": "@@ -22,7 +22,8 @@ extern crate rustc_front;\n use build;\n use graphviz;\n use pretty;\n-use transform::{simplify_cfg, type_check, no_landing_pads};\n+use transform::{clear_dead_blocks, simplify_cfg, type_check};\n+use transform::{no_landing_pads};\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n@@ -148,6 +149,7 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n \n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n             Ok(mut mir) => {\n+                clear_dead_blocks::ClearDeadBlocks::new().run_on_mir(&mut mir, self.tcx);\n                 type_check::TypeckMir::new(&infcx).run_on_mir(&mut mir, self.tcx);\n                 no_landing_pads::NoLandingPads.run_on_mir(&mut mir, self.tcx);\n                 if self.tcx.sess.opts.mir_opt_level > 0 {"}, {"sha": "88c0116f26d247c2f6ebb106870bd4ef290f5445", "filename": "src/librustc_mir/transform/clear_dead_blocks.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Fclear_dead_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Fclear_dead_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclear_dead_blocks.rs?ref=67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A pass that erases the contents of dead blocks. This is required\n+//! because rustc allows for ill-typed block terminators in dead\n+//! blocks.\n+//!\n+//! This pass does not renumber or remove the blocks, to have the\n+//! MIR better match the source.\n+\n+use rustc::middle::ty;\n+use rustc::mir::repr::*;\n+use rustc::mir::transform::MirPass;\n+\n+pub struct ClearDeadBlocks;\n+\n+impl ClearDeadBlocks {\n+    pub fn new() -> ClearDeadBlocks {\n+        ClearDeadBlocks\n+    }\n+\n+    fn clear_dead_blocks(&self, mir: &mut Mir) {\n+        let mut seen = vec![false; mir.basic_blocks.len()];\n+\n+        // These blocks are always required.\n+        seen[START_BLOCK.index()] = true;\n+        seen[END_BLOCK.index()] = true;\n+\n+        let mut worklist = vec![START_BLOCK];\n+        while let Some(bb) = worklist.pop() {\n+            for succ in mir.basic_block_data(bb).terminator().successors().iter() {\n+                if !seen[succ.index()] {\n+                    seen[succ.index()] = true;\n+                    worklist.push(*succ);\n+                }\n+            }\n+        }\n+\n+        for (block, seen) in mir.basic_blocks.iter_mut().zip(seen) {\n+            if !seen {\n+                *block = BasicBlockData {\n+                    statements: vec![],\n+                    terminator: Some(Terminator::Return),\n+                    is_cleanup: false\n+                };\n+            }\n+        }\n+    }\n+}\n+\n+impl MirPass for ClearDeadBlocks {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, _tcx: &ty::ctxt<'tcx>) {\n+        self.clear_dead_blocks(mir);\n+    }\n+}"}, {"sha": "d27c208041faf658eefc0aba6bffd0e4ed90fba4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub mod clear_dead_blocks;\n pub mod simplify_cfg;\n pub mod erase_regions;\n pub mod no_landing_pads;"}, {"sha": "f4d83cd05e08f88293d7b9a55441990b6d68a3b9", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1cf112218257025edf75b9cb7ebc8ab8bfa64/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "patch": "@@ -125,14 +125,6 @@ impl<'a, 'tcx> TypeckMir<'a, 'tcx> {\n         let tcx = self.tcx();\n         match stmt.kind {\n             StatementKind::Assign(ref lv, ref rv) => {\n-                match lv {\n-                    &Lvalue::ReturnPointer if mir.return_ty == ty::FnDiverging => {\n-                        // HACK: buggy writes\n-                        return;\n-                    }\n-                    _ => {}\n-                }\n-\n                 let lv_ty = mir.lvalue_ty(tcx, lv).to_ty(tcx);\n                 let rv_ty = mir.rvalue_ty(tcx, rv);\n                 if let Some(rv_ty) = rv_ty {"}]}