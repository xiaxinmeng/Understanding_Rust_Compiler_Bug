{"sha": "a2ae1912954bf6e21c706258348735218ceb1ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYWUxOTEyOTU0YmY2ZTIxYzcwNjI1ODM0ODczNTIxOGNlYjFhYjQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-22T22:40:01Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-23T22:03:07Z"}, "message": "Rename `known_attrs` to `expanded_inert_attrs` and move to rustc_expand\n\nThere's no need for this to be (untracked) global state.", "tree": {"sha": "452118936c16e4366a8623f8f97653d6caefc998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452118936c16e4366a8623f8f97653d6caefc998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ae1912954bf6e21c706258348735218ceb1ab4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmD7PJwACgkQtAh+UQ6Y\nsWTXcw/+MJ5hqa1BecD8Zw5TVHOpWoDHzyMl5q+Qq3+RF8D+W3b3KPdhSrzd9t+G\nxqyNIwjCrrQmvrF+Z7YbEFjUPXlMAMuyrq+JQwcGzzpDS3R3wsoFFmE/HpYzbRmG\n5ANMQgg5hKpHI86LBV7HSvRlhMd3qkIfZ9rOBoUbPCFQmUTMgUpF60aJpu3UGAOt\n+/Br1BCq4fEMbYA4tIBG4VCZ1RE9B9S6rmrRAqj7JsSkJDCR9KePR3/yOwKpZ3JT\nM1HWhH1w/bkeNgyagmCxk0qX0Rcz+DRB4ukeCfWzuwDQHJ6CkvkO+GqoyBNOt0Qq\n6PEYg5fNUcZRVvPYCtPi0QCUudXHF0VD2u72f/tIYefPn6XknAVsvq8V2XDDIjGM\nUxnGRiYlNX689atbF+AA4fAKzzF348CkbmXJpkaYsZrvyksTKweHyvNXmnb/kjMf\nr2pMdbSqiplmGkCib/p40Iwuy2zKFvjohidY74bn5vO8KYJg2t6Gik5ZUPyHU1EZ\nmKxUYOMAwb0sMn7WLGU5uUaMyiVjEU1/xKyYR/l0Wz1Iem51AsIoL+8SACAwENt3\nhJqe2KqmHF6YCQe7TblDSBUFLUAdZqGixNgWLYCqniOJoAOs7k5WTv/KRh5eTjQo\nkxhiBynB0tUIaF4dCYli8hoJv+qWEpsoVFHaUxSzVh/PvUFeXdg=\n=nugN\n-----END PGP SIGNATURE-----", "payload": "tree 452118936c16e4366a8623f8f97653d6caefc998\nparent 4a1f419e641c7ec56a60f1714ced5c343e0a2b38\nauthor Aaron Hill <aa1ronham@gmail.com> 1626993601 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1627077787 -0500\n\nRename `known_attrs` to `expanded_inert_attrs` and move to rustc_expand\n\nThere's no need for this to be (untracked) global state.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ae1912954bf6e21c706258348735218ceb1ab4", "html_url": "https://github.com/rust-lang/rust/commit/a2ae1912954bf6e21c706258348735218ceb1ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ae1912954bf6e21c706258348735218ceb1ab4/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1f419e641c7ec56a60f1714ced5c343e0a2b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f419e641c7ec56a60f1714ced5c343e0a2b38", "html_url": "https://github.com/rust-lang/rust/commit/4a1f419e641c7ec56a60f1714ced5c343e0a2b38"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "3d5bc770c4fb0e6965f613f4772d502850438f79", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=a2ae1912954bf6e21c706258348735218ceb1ab4", "patch": "@@ -1,6 +1,7 @@\n use crate::expand::{self, AstFragment, Invocation};\n use crate::module::DirOwnership;\n \n+use rustc_ast::attr::MarkedAttrs;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Nonterminal};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream};\n@@ -951,6 +952,10 @@ pub struct ExtCtxt<'a> {\n     ///\n     /// `Ident` is the module name.\n     pub(super) extern_mod_loaded: OnExternModLoaded<'a>,\n+    /// When we 'expand' an inert attribute, we leave it\n+    /// in the AST, but insert it here so that we know\n+    /// not to expand it again.\n+    pub(super) expanded_inert_attrs: MarkedAttrs,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -977,6 +982,7 @@ impl<'a> ExtCtxt<'a> {\n             },\n             force_mode: false,\n             expansions: FxHashMap::default(),\n+            expanded_inert_attrs: MarkedAttrs::new(),\n         }\n     }\n "}, {"sha": "a9250bf97877854d75737307515432811174d36c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a2ae1912954bf6e21c706258348735218ceb1ab4", "patch": "@@ -754,7 +754,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                 }\n                 SyntaxExtensionKind::NonMacroAttr { mark_used } => {\n-                    self.cx.sess.mark_attr_known(&attr);\n+                    self.cx.expanded_inert_attrs.mark(&attr);\n                     if *mark_used {\n                         self.cx.sess.mark_attr_used(&attr);\n                     }\n@@ -1040,7 +1040,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         item.visit_attrs(|attrs| {\n             attr = attrs\n                 .iter()\n-                .position(|a| !self.cx.sess.is_attr_known(a) && !is_builtin_attr(a))\n+                .position(|a| !self.cx.expanded_inert_attrs.is_marked(a) && !is_builtin_attr(a))\n                 .map(|attr_pos| {\n                     let attr = attrs.remove(attr_pos);\n                     let following_derives = attrs[attr_pos..]"}, {"sha": "369af437c43841ce3090ce8a9af1e429bf9ed15c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ae1912954bf6e21c706258348735218ceb1ab4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a2ae1912954bf6e21c706258348735218ceb1ab4", "patch": "@@ -219,7 +219,6 @@ pub struct Session {\n     /// Set of enabled features for the current target.\n     pub target_features: FxHashSet<Symbol>,\n \n-    known_attrs: Lock<MarkedAttrs>,\n     used_attrs: Lock<MarkedAttrs>,\n \n     /// `Span`s for `if` conditions that we have suggested turning into `if let`.\n@@ -1076,14 +1075,6 @@ impl Session {\n             == config::InstrumentCoverage::ExceptUnusedFunctions\n     }\n \n-    pub fn mark_attr_known(&self, attr: &Attribute) {\n-        self.known_attrs.lock().mark(attr)\n-    }\n-\n-    pub fn is_attr_known(&self, attr: &Attribute) -> bool {\n-        self.known_attrs.lock().is_marked(attr)\n-    }\n-\n     pub fn mark_attr_used(&self, attr: &Attribute) {\n         self.used_attrs.lock().mark(attr)\n     }\n@@ -1389,7 +1380,6 @@ pub fn build_session(\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,\n         target_features: FxHashSet::default(),\n-        known_attrs: Lock::new(MarkedAttrs::new()),\n         used_attrs: Lock::new(MarkedAttrs::new()),\n         if_let_suggestions: Default::default(),\n     };"}]}