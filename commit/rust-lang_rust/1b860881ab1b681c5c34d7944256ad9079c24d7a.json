{"sha": "1b860881ab1b681c5c34d7944256ad9079c24d7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODYwODgxYWIxYjY4MWM1YzM0ZDc5NDQyNTZhZDkwNzljMjRkN2E=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-07-12T20:53:12Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-08-22T00:17:47Z"}, "message": "extra: change XXX to FIXME and elaborate on comments", "tree": {"sha": "1d9470494fc0b6aa1bdf3472788481ab2d0ac7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9470494fc0b6aa1bdf3472788481ab2d0ac7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b860881ab1b681c5c34d7944256ad9079c24d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b860881ab1b681c5c34d7944256ad9079c24d7a", "html_url": "https://github.com/rust-lang/rust/commit/1b860881ab1b681c5c34d7944256ad9079c24d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b860881ab1b681c5c34d7944256ad9079c24d7a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "html_url": "https://github.com/rust-lang/rust/commit/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "009198b9b6e8adc4c254ebd5711b7ea263c9676c", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=1b860881ab1b681c5c34d7944256ad9079c24d7a", "patch": "@@ -27,7 +27,7 @@ reset once it has been finished, so attempting to iterate on `[None,\n None]` will only take input once unless `io::stdin().seek(0, SeekSet)`\n is called between.\n \n-The `pathify` function handles converting a list of file paths as\n+The `make_path_option_vec` function handles converting a list of file paths as\n strings to the appropriate format, including the (optional) conversion\n of `\"-\"` to `stdin`.\n \n@@ -42,7 +42,7 @@ to handle any `FileInput` structs. E.g. a simple `cat` program\n \n or a program that numbers lines after concatenating two files\n \n-    for input_vec_state(pathify([~\"a.txt\", ~\"b.txt\"])) |line, state| {\n+    for input_vec_state(make_path_option_vec([~\"a.txt\", ~\"b.txt\"])) |line, state| {\n         io::println(fmt!(\"%u: %s\", state.line_num,\n                                    line));\n     }\n@@ -145,8 +145,14 @@ struct FileInput_ {\n     previous_was_newline: bool\n }\n \n-// XXX: remove this when Reader has &mut self. Should be removable via\n-// \"self.fi.\" -> \"self.\" and renaming FileInput_. Documentation above\n+\n+// FIXME #5723: remove this when Reader has &mut self.\n+// Removing it would mean giving read_byte in the Reader impl for\n+// FileInput &mut self, which in turn means giving most of the\n+// io::Reader trait methods &mut self. That can't be done right now\n+// because of io::with_bytes_reader and #5723.\n+// Should be removable via\n+// \"self.fi\" -> \"self.\" and renaming FileInput_. Documentation above\n // will likely have to be updated to use `let mut in = ...`.\n pub struct FileInput  {\n     fi: @mut FileInput_\n@@ -194,7 +200,7 @@ impl FileInput {\n     */\n     pub fn from_args() -> FileInput {\n         let args = os::args();\n-        let pathed = pathify(args.tail(), true);\n+        let pathed = make_path_option_vec(args.tail(), true);\n         FileInput::from_vec(pathed)\n     }\n \n@@ -351,8 +357,7 @@ Convert a list of strings to an appropriate form for a `FileInput`\n instance. `stdin_hyphen` controls whether `-` represents `stdin` or\n a literal `-`.\n */\n-// XXX: stupid, unclear name\n-pub fn pathify(vec: &[~str], stdin_hyphen : bool) -> ~[Option<Path>] {\n+pub fn make_path_option_vec(vec: &[~str], stdin_hyphen : bool) -> ~[Option<Path>] {\n     vec.iter().map(|str| {\n         if stdin_hyphen && \"-\" == *str {\n             None\n@@ -410,7 +415,7 @@ pub fn input_vec_state(files: ~[Option<Path>],\n #[cfg(test)]\n mod test {\n \n-    use super::{FileInput, pathify, input_vec, input_vec_state};\n+    use super::{FileInput, make_path_option_vec, input_vec, input_vec_state};\n \n     use std::io;\n     use std::uint;\n@@ -426,22 +431,22 @@ mod test {\n     }\n \n     #[test]\n-    fn test_pathify() {\n+    fn test_make_path_option_vec() {\n         let strs = [~\"some/path\",\n                     ~\"some/other/path\"];\n         let paths = ~[Some(Path(\"some/path\")),\n                       Some(Path(\"some/other/path\"))];\n \n-        assert_eq!(pathify(strs, true), paths.clone());\n-        assert_eq!(pathify(strs, false), paths);\n+        assert_eq!(make_path_option_vec(strs, true), paths.clone());\n+        assert_eq!(make_path_option_vec(strs, false), paths);\n \n-        assert_eq!(pathify([~\"-\"], true), ~[None]);\n-        assert_eq!(pathify([~\"-\"], false), ~[Some(Path(\"-\"))]);\n+        assert_eq!(make_path_option_vec([~\"-\"], true), ~[None]);\n+        assert_eq!(make_path_option_vec([~\"-\"], false), ~[Some(Path(\"-\"))]);\n     }\n \n     #[test]\n     fn test_fileinput_read_byte() {\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-byte-%u.tmp\", i)), true);\n \n@@ -471,7 +476,7 @@ mod test {\n \n     #[test]\n     fn test_fileinput_read() {\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-%u.tmp\", i)), true);\n \n@@ -492,7 +497,7 @@ mod test {\n     #[test]\n     fn test_input_vec() {\n         let mut all_lines = ~[];\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-input-vec-%u.tmp\", i)), true);\n \n@@ -514,7 +519,7 @@ mod test {\n \n     #[test]\n     fn test_input_vec_state() {\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-input-vec-state-%u.tmp\", i)),true);\n \n@@ -536,7 +541,7 @@ mod test {\n \n     #[test]\n     fn test_empty_files() {\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-empty-files-%u.tmp\", i)),true);\n \n@@ -583,7 +588,7 @@ mod test {\n \n     #[test]\n     fn test_next_file() {\n-        let filenames = pathify(vec::from_fn(\n+        let filenames = make_path_option_vec(vec::from_fn(\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n \n@@ -614,7 +619,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_input_vec_missing_file() {\n-        do input_vec(pathify([~\"this/file/doesnt/exist\"], true)) |line| {\n+        do input_vec(make_path_option_vec([~\"this/file/doesnt/exist\"], true)) |line| {\n             println(line);\n             true\n         };"}, {"sha": "daad3970445a921527b62737bd2f67ae8859e79a", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=1b860881ab1b681c5c34d7944256ad9079c24d7a", "patch": "@@ -564,8 +564,10 @@ pub mod bytepipes {\n         }\n     }\n \n-    // XXX: Remove `@mut` when this module is ported to the new I/O traits,\n-    // which use `&mut self` properly.\n+    // FIXME #6850: Remove `@mut` when this module is ported to the new I/O traits,\n+    // which use `&mut self` properly. (For example, util::comm::GenericPort's try_recv\n+    // method doesn't use `&mut self`, so the `try_recv` method in the impl of `BytePort`\n+    // for `PipeBytePort` can't have `&mut self` either.)\n     pub struct PipeBytePort {\n         port: comm::Port<~[u8]>,\n         buf: @mut ~[u8]"}, {"sha": "b75295ffd22ea18393a6b0703b8f52c1aa5e9155", "filename": "src/libextra/io_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b860881ab1b681c5c34d7944256ad9079c24d7a/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=1b860881ab1b681c5c34d7944256ad9079c24d7a", "patch": "@@ -30,7 +30,7 @@ impl BufReader {\n     }\n \n     fn as_bytes_reader<A>(&self, f: &fn(&BytesReader) -> A) -> A {\n-        // XXX FIXME(#5723)\n+        // FIXME(#5723)\n         let bytes = ::std::util::id::<&[u8]>(self.buf);\n         let bytes: &'static [u8] = unsafe { cast::transmute(bytes) };\n         // Recreating the BytesReader state every call since"}]}