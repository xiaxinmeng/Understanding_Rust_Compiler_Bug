{"sha": "a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmQ1YWU1N2ViMDQyMTM3M2E0ZjNhYTY5YWM1NmZiNWM1NDkzODM=", "commit": {"author": {"name": "David Craven", "email": "david@craven.ch", "date": "2018-07-24T10:04:17Z"}, "committer": {"name": "David Craven", "email": "david@craven.ch", "date": "2018-08-01T13:32:22Z"}, "message": "[RISCV] Implement call abi.", "tree": {"sha": "ed76e7887d52869fe9d96c478dadf3b69f386c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed76e7887d52869fe9d96c478dadf3b69f386c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEX0O2gQQ3L0uomKZLM7np/eKNLCMFAlthtmYACgkQM7np/eKN\nLCPCmgf/cOvTepmv4ZI0gmYcaEgNaha+/44tL9ltfM2euE/OiiylzYazAmpfSO8T\nZTRj4ZszI5P3MA9lVn5J0sEYsVd9gyLdpz3Uzewtrm7d96a7JY4DCvFh4cFJfgqc\nRYR3bT8zDlccwPSJvxxrEHND/oEGJrvKKxgJa747M0lqopDr+20SgVymdRrxJT0L\nzmVv71C4AfZidXVnxnDVv6EimA5hYcqWsTvusKhXCBInPFktt7NVA2uz03Yo3WOd\nnZgYQCjJD5j+gPG6AaTJxOoupkv1SruCVvqZzgDLgLZZ8fCJc0KRmywA1UrslKZb\nF1GTPBOVWmfYt/jA2nD76rN1ZPFcfg==\n=zsU6\n-----END PGP SIGNATURE-----", "payload": "tree ed76e7887d52869fe9d96c478dadf3b69f386c23\nparent 2d5f62fb48536d69aa7de0d7504df278271ccf25\nauthor David Craven <david@craven.ch> 1532426657 +0200\ncommitter David Craven <david@craven.ch> 1533130342 +0200\n\n[RISCV] Implement call abi.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "html_url": "https://github.com/rust-lang/rust/commit/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383/comments", "author": {"login": "dvc94ch", "id": 741807, "node_id": "MDQ6VXNlcjc0MTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/741807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvc94ch", "html_url": "https://github.com/dvc94ch", "followers_url": "https://api.github.com/users/dvc94ch/followers", "following_url": "https://api.github.com/users/dvc94ch/following{/other_user}", "gists_url": "https://api.github.com/users/dvc94ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvc94ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvc94ch/subscriptions", "organizations_url": "https://api.github.com/users/dvc94ch/orgs", "repos_url": "https://api.github.com/users/dvc94ch/repos", "events_url": "https://api.github.com/users/dvc94ch/events{/privacy}", "received_events_url": "https://api.github.com/users/dvc94ch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvc94ch", "id": 741807, "node_id": "MDQ6VXNlcjc0MTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/741807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvc94ch", "html_url": "https://github.com/dvc94ch", "followers_url": "https://api.github.com/users/dvc94ch/followers", "following_url": "https://api.github.com/users/dvc94ch/following{/other_user}", "gists_url": "https://api.github.com/users/dvc94ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvc94ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvc94ch/subscriptions", "organizations_url": "https://api.github.com/users/dvc94ch/orgs", "repos_url": "https://api.github.com/users/dvc94ch/repos", "events_url": "https://api.github.com/users/dvc94ch/events{/privacy}", "received_events_url": "https://api.github.com/users/dvc94ch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5f62fb48536d69aa7de0d7504df278271ccf25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5f62fb48536d69aa7de0d7504df278271ccf25", "html_url": "https://github.com/rust-lang/rust/commit/2d5f62fb48536d69aa7de0d7504df278271ccf25"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "f65fa341231e3893facf13ff9de9fe84b373a5d5", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "patch": "@@ -23,6 +23,7 @@ mod nvptx;\n mod nvptx64;\n mod powerpc;\n mod powerpc64;\n+mod riscv;\n mod s390x;\n mod sparc;\n mod sparc64;\n@@ -500,6 +501,8 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"nvptx\" => nvptx::compute_abi_info(self),\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n+            \"riscv32\" => riscv::compute_abi_info(self, 32),\n+            \"riscv64\" => riscv::compute_abi_info(self, 64),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "fe0d7485c158bea8105e2363cf52405bacac5c12", "filename": "src/librustc_target/abi/call/riscv.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd5ae57eb0421373a4f3aa69ac56fb5c549383/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs?ref=a6bd5ae57eb0421373a4f3aa69ac56fb5c549383", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Reference: RISC-V ELF psABI specification\n+// https://github.com/riscv/riscv-elf-psabi-doc\n+\n+use abi::call::{ArgType, FnType};\n+\n+fn classify_ret_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+    // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n+    // the argument list with the address.\"\n+    // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n+    // replaced in the argument list with the address, as are C++ aggregates\n+    // with nontrivial copy constructors, destructors, or vtables.\"\n+    if arg.layout.size.bits() > 2 * xlen {\n+        arg.make_indirect();\n+    }\n+\n+    // \"When passed in registers, scalars narrower than XLEN bits are widened\n+    // according to the sign of their type up to 32 bits, then sign-extended to\n+    // XLEN bits.\"\n+    arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+    // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n+    // the argument list with the address.\"\n+    // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n+    // replaced in the argument list with the address, as are C++ aggregates\n+    // with nontrivial copy constructors, destructors, or vtables.\"\n+    if arg.layout.size.bits() > 2 * xlen {\n+        arg.make_indirect();\n+    }\n+\n+    // \"When passed in registers, scalars narrower than XLEN bits are widened\n+    // according to the sign of their type up to 32 bits, then sign-extended to\n+    // XLEN bits.\"\n+    arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n+}\n+\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>, xlen: u64) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(&mut fty.ret, xlen);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(arg, xlen);\n+    }\n+}"}]}