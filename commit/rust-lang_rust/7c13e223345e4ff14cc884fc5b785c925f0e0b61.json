{"sha": "7c13e223345e4ff14cc884fc5b785c925f0e0b61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTNlMjIzMzQ1ZTRmZjE0Y2M4ODRmYzViNzg1YzkyNWYwZTBiNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T21:56:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T21:56:57Z"}, "message": "simplify tests", "tree": {"sha": "7905137b3559d1d53dbcd4d3ca6588c224f9f6e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7905137b3559d1d53dbcd4d3ca6588c224f9f6e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c13e223345e4ff14cc884fc5b785c925f0e0b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c13e223345e4ff14cc884fc5b785c925f0e0b61", "html_url": "https://github.com/rust-lang/rust/commit/7c13e223345e4ff14cc884fc5b785c925f0e0b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c13e223345e4ff14cc884fc5b785c925f0e0b61/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "html_url": "https://github.com/rust-lang/rust/commit/0fd93bc14a2d0ce2edd682d26c18979c13f181c5"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "5179f719db90730723dc04f0d47acdfe1ead6012", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=7c13e223345e4ff14cc884fc5b785c925f0e0b61", "patch": "@@ -606,11 +606,6 @@ impl Const {\n         db.infer((*self).into())\n     }\n \n-    #[cfg(test)]\n-    pub(crate) fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map((*self).into()).1\n-    }\n-\n     /// The containing impl block, if this is a method.\n     pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n@@ -679,11 +674,6 @@ impl Static {\n     pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer((*self).into())\n     }\n-\n-    #[cfg(test)]\n-    pub(crate) fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map((*self).into()).1\n-    }\n }\n \n impl Docs for Static {"}, {"sha": "c3cb17882be326f7c64a25810f5f229f808396b6", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=7c13e223345e4ff14cc884fc5b785c925f0e0b61", "patch": "@@ -343,4 +343,14 @@ impl SourceAnalyzer {\n         };\n         Some(res)\n     }\n+\n+    #[cfg(test)]\n+    pub(crate) fn body_source_map(&self) -> Arc<crate::expr::BodySourceMap> {\n+        self.body_source_map.clone().unwrap()\n+    }\n+\n+    #[cfg(test)]\n+    pub(crate) fn inference_result(&self) -> Arc<crate::ty::InferenceResult> {\n+        self.infer.clone().unwrap()\n+    }\n }"}, {"sha": "87d6bcaec19a84310882d2f2daf5c1fd53dbfbb2", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c13e223345e4ff14cc884fc5b785c925f0e0b61/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7c13e223345e4ff14cc884fc5b785c925f0e0b61", "patch": "@@ -4,15 +4,16 @@ use std::fmt::Write;\n use insta::assert_snapshot_matches;\n \n use ra_db::{SourceDatabase, salsa::Database, FilePosition};\n-use ra_syntax::{algo, ast::{self, AstNode}};\n+use ra_syntax::{algo, ast::{self, AstNode}, SyntaxKind::*};\n use test_utils::covers;\n \n use crate::{\n     source_binder,\n     mock::MockDatabase,\n     ty::display::HirDisplay,\n     ty::InferenceResult,\n-    expr::BodySourceMap\n+    expr::BodySourceMap,\n+    SourceAnalyzer,\n };\n \n // These tests compare the inference results for all expressions in a file\n@@ -1862,14 +1863,14 @@ fn test() {\n         @r###\"\n [49; 50) '0': u32\n [80; 83) '101': u32\n-[126; 128) '99': u32\n [95; 213) '{     ...NST; }': ()\n [138; 139) 'x': {unknown}\n [142; 153) 'LOCAL_CONST': {unknown}\n [163; 164) 'z': u32\n [167; 179) 'GLOBAL_CONST': u32\n [189; 191) 'id': u32\n-[194; 210) 'Foo::A..._CONST': u32\"###\n+[194; 210) 'Foo::A..._CONST': u32\n+[126; 128) '99': u32\"###\n     );\n }\n \n@@ -1891,8 +1892,6 @@ fn test() {\n         @r###\"\n [29; 32) '101': u32\n [70; 73) '101': u32\n-[118; 120) '99': u32\n-[161; 163) '99': u32\n [85; 280) '{     ...MUT; }': ()\n [173; 174) 'x': {unknown}\n [177; 189) 'LOCAL_STATIC': {unknown}\n@@ -1901,7 +1900,9 @@ fn test() {\n [229; 230) 'z': u32\n [233; 246) 'GLOBAL_STATIC': u32\n [256; 257) 'w': u32\n-[260; 277) 'GLOBAL...IC_MUT': u32\"###\n+[260; 277) 'GLOBAL...IC_MUT': u32\n+[118; 120) '99': u32\n+[161; 163) '99': u32\"###\n     );\n }\n \n@@ -2350,25 +2351,11 @@ fn infer(content: &str) -> String {\n         }\n     };\n \n-    for const_def in source_file.syntax().descendants().filter_map(ast::ConstDef::cast) {\n-        let konst = source_binder::const_from_source(&db, file_id, const_def).unwrap();\n-        let inference_result = konst.infer(&db);\n-        let body_source_map = konst.body_source_map(&db);\n-        infer_def(inference_result, body_source_map)\n-    }\n-\n-    for static_def in source_file.syntax().descendants().filter_map(ast::StaticDef::cast) {\n-        let static_ = source_binder::static_from_source(&db, file_id, static_def).unwrap();\n-        let inference_result = static_.infer(&db);\n-        let body_source_map = static_.body_source_map(&db);\n-        infer_def(inference_result, body_source_map)\n-    }\n-\n-    for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n-        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n-        let inference_result = func.infer(&db);\n-        let body_source_map = func.body_source_map(&db);\n-        infer_def(inference_result, body_source_map)\n+    for node in source_file.syntax().descendants() {\n+        if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n+            let analyzer = SourceAnalyzer::new(&db, file_id, node, None);\n+            infer_def(analyzer.inference_result(), analyzer.body_source_map());\n+        }\n     }\n \n     acc.truncate(acc.trim_end().len());"}]}