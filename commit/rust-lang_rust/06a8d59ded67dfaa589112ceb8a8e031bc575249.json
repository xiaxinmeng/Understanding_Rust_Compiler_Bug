{"sha": "06a8d59ded67dfaa589112ceb8a8e031bc575249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YThkNTlkZWQ2N2RmYWE1ODkxMTJjZWI4YThlMDMxYmM1NzUyNDk=", "commit": {"author": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2013-12-31T00:17:35Z"}, "committer": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2013-12-31T19:31:23Z"}, "message": "Add a copy-on-write container.", "tree": {"sha": "c53ff4a39cc4f05a4a2d951dfdf6ace174d02de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53ff4a39cc4f05a4a2d951dfdf6ace174d02de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a8d59ded67dfaa589112ceb8a8e031bc575249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a8d59ded67dfaa589112ceb8a8e031bc575249", "html_url": "https://github.com/rust-lang/rust/commit/06a8d59ded67dfaa589112ceb8a8e031bc575249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a8d59ded67dfaa589112ceb8a8e031bc575249/comments", "author": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff7b283731b795930d1e6782ae1639c83595e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff7b283731b795930d1e6782ae1639c83595e91", "html_url": "https://github.com/rust-lang/rust/commit/5ff7b283731b795930d1e6782ae1639c83595e91"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "81b183cc0edc1f44b7fd92acfb21275e8a0fa174", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/06a8d59ded67dfaa589112ceb8a8e031bc575249/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8d59ded67dfaa589112ceb8a8e031bc575249/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=06a8d59ded67dfaa589112ceb8a8e031bc575249", "patch": "@@ -549,6 +549,50 @@ impl<'a, T:Freeze + Send> RWReadMode<'a, T> {\n     }\n }\n \n+/****************************************************************************\n+ * Copy-on-write Arc\n+ ****************************************************************************/\n+\n+pub struct CowArc<T> { priv x: UnsafeArc<T> }\n+\n+/// A Copy-on-write Arc functions the same way as an `arc` except it allows\n+/// mutation of the contents if there is only a single reference to\n+/// the data. If there are multiple references the data is automatically\n+/// cloned and the task modifies the cloned data in place of the shared data.\n+impl<T:Clone+Send> CowArc<T> {\n+    /// Create a copy-on-write atomically reference counted wrapper\n+    #[inline]\n+    pub fn new(data: T) -> CowArc<T> {\n+        CowArc { x: UnsafeArc::new(data) }\n+    }\n+\n+    #[inline]\n+    pub fn get<'a>(&'a self) -> &'a T {\n+        unsafe { &*self.x.get_immut() }\n+    }\n+\n+    /// get a mutable reference to the contents. If there are more then one\n+    /// reference to the contents of the `CowArc` will be cloned\n+    /// and this reference updated to point to the cloned data.\n+    #[inline]\n+    pub fn get_mut<'a>(&'a mut self) -> &'a mut T {\n+        if !self.x.is_owned() {\n+            *self = CowArc::new(self.get().clone())\n+        }\n+        unsafe { &mut *self.x.get() }\n+    }\n+}\n+\n+impl<T:Clone+Send> Clone for CowArc<T> {\n+    /// Duplicate a Copy-on-write Arc. See arc::clone for more details.\n+    #[inline]\n+    fn clone(&self) -> CowArc<T> {\n+        CowArc { x: self.x.clone() }\n+    }\n+}\n+\n+\n+\n /****************************************************************************\n  * Tests\n  ****************************************************************************/\n@@ -958,4 +1002,68 @@ mod tests {\n         // and I wasn't sure why :( . This is a mediocre \"next best\" option.\n         8.times(|| test_rw_write_cond_downgrade_read_race_helper());\n     }\n+\n+    #[test]\n+    fn test_cowarc_clone()\n+    {\n+        let cow0 = CowArc::new(75u);\n+        let cow1 = cow0.clone();\n+        let cow2 = cow1.clone();\n+\n+        assert!(75 == *cow0.get());\n+        assert!(75 == *cow1.get());\n+        assert!(75 == *cow2.get());\n+\n+        assert!(cow0.get() == cow1.get());\n+        assert!(cow0.get() == cow2.get());\n+    }\n+\n+    #[test]\n+    fn test_cowarc_clone_get_mut()\n+    {\n+        let mut cow0 = CowArc::new(75u);\n+        let mut cow1 = cow0.clone();\n+        let mut cow2 = cow1.clone();\n+\n+        assert!(75 == *cow0.get_mut());\n+        assert!(75 == *cow1.get_mut());\n+        assert!(75 == *cow2.get_mut());\n+\n+        *cow0.get_mut() += 1;\n+        *cow1.get_mut() += 2;\n+        *cow2.get_mut() += 3;\n+\n+        assert!(76 == *cow0.get());\n+        assert!(77 == *cow1.get());\n+        assert!(78 == *cow2.get());\n+\n+        // none should point to the same backing memory\n+        assert!(cow0.get() != cow1.get());\n+        assert!(cow0.get() != cow2.get());\n+        assert!(cow1.get() != cow2.get());\n+    }\n+\n+    #[test]\n+    fn test_cowarc_clone_get_mut2()\n+    {\n+        let mut cow0 = CowArc::new(75u);\n+        let cow1 = cow0.clone();\n+        let cow2 = cow1.clone();\n+\n+        assert!(75 == *cow0.get());\n+        assert!(75 == *cow1.get());\n+        assert!(75 == *cow2.get());\n+\n+        *cow0.get_mut() += 1;\n+\n+        assert!(76 == *cow0.get());\n+        assert!(75 == *cow1.get());\n+        assert!(75 == *cow2.get());\n+\n+        // cow1 and cow2 should share the same contents\n+        // cow0 should have a unique reference\n+        assert!(cow0.get() != cow1.get());\n+        assert!(cow0.get() != cow2.get());\n+        assert!(cow1.get() == cow2.get());\n+    }\n }"}, {"sha": "5c452018b9b7e5e4be9a713761ee81073c3ba475", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a8d59ded67dfaa589112ceb8a8e031bc575249/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8d59ded67dfaa589112ceb8a8e031bc575249/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=06a8d59ded67dfaa589112ceb8a8e031bc575249", "patch": "@@ -94,6 +94,14 @@ impl<T: Send> UnsafeArc<T> {\n             return &(*self.data).data as *T;\n         }\n     }\n+\n+    /// checks if this is the only reference to the arc protected data\n+    #[inline]\n+    pub fn is_owned(&self) -> bool {\n+        unsafe {\n+            (*self.data).count.load(Relaxed) == 1\n+        }\n+    }\n }\n \n impl<T: Send> Clone for UnsafeArc<T> {"}]}