{"sha": "f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDUxOTRlM2Q5YzA3Mjc5ODExZmM0ZjZhNzA0YjUxODVjOGM5ZjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-10T23:59:59Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-10T23:59:59Z"}, "message": "tests: revert some changs and add further rustfmt::skip attributes.", "tree": {"sha": "e46e930e424e6e8d5ac73fdb2524ab4102c03c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46e930e424e6e8d5ac73fdb2524ab4102c03c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "html_url": "https://github.com/rust-lang/rust/commit/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "html_url": "https://github.com/rust-lang/rust/commit/0a6e568f07ef11ab24fd47cdaaa1719f910952e8"}], "stats": {"total": 115, "additions": 58, "deletions": 57}, "files": [{"sha": "51e41b701724089606f97fef06e0831ee0c5f9fc", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -51,7 +51,8 @@ fn main() {\n     false as bool;\n     &1i32 as &i32;\n     // Should not trigger\n-    let v = vec![1];\n+    #[rustfmt::skip]\n+    let v = vec!(1);\n     &v as &[i32];\n     1.0 as f64;\n     1 as u64;"}, {"sha": "299cd2a67863ba58562e65687bf2726a33d9e93a", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -18,6 +18,7 @@ const ZERO: i64 = 0;\n     clippy::double_parens\n )]\n #[warn(clippy::identity_op)]\n+#[rustfmt::skip]\n fn main() {\n     let x = 0;\n \n@@ -28,7 +29,7 @@ fn main() {\n     1 + x;\n     x - ZERO; //no error, as we skip lookups (for now)\n     x | (0);\n-    (ZERO) | x; //no error, as we skip lookups (for now)\n+    ((ZERO)) | x; //no error, as we skip lookups (for now)\n \n     x * 1;\n     1 * x;"}, {"sha": "19846b5ecdfdd9637f32456bfe39e2c44f90f0c5", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -1,51 +1,51 @@\n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:24:5\n+  --> $DIR/identity_op.rs:25:5\n    |\n-24 |     x + 0;\n+25 |     x + 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:25:5\n+  --> $DIR/identity_op.rs:26:5\n    |\n-25 |     x + (1 - 1);\n+26 |     x + (1 - 1);\n    |     ^^^^^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:27:5\n+  --> $DIR/identity_op.rs:28:5\n    |\n-27 |     0 + x;\n+28 |     0 + x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:30:5\n+  --> $DIR/identity_op.rs:31:5\n    |\n-30 |     x | (0);\n+31 |     x | (0);\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:33:5\n+  --> $DIR/identity_op.rs:34:5\n    |\n-33 |     x * 1;\n+34 |     x * 1;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:34:5\n+  --> $DIR/identity_op.rs:35:5\n    |\n-34 |     1 * x;\n+35 |     1 * x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:40:5\n+  --> $DIR/identity_op.rs:41:5\n    |\n-40 |     -1 & x;\n+41 |     -1 & x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:43:5\n+  --> $DIR/identity_op.rs:44:5\n    |\n-43 |     u & 255;\n+44 |     u & 255;\n    |     ^^^^^^^\n \n error: aborting due to 8 previous errors"}, {"sha": "6188835e555a07812e3faaaa856cdb7592fd3696", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -27,10 +27,11 @@ fn test_if_block() -> bool {\n }\n \n #[allow(clippy::match_bool)]\n+#[rustfmt::skip]\n fn test_match(x: bool) -> bool {\n     match x {\n         true => false,\n-        false => true,\n+        false => { true },\n     }\n }\n \n@@ -42,7 +43,8 @@ fn test_loop() -> bool {\n }\n \n fn test_closure() {\n-    let _ = || true;\n+    #[rustfmt::skip]\n+    let _ = || { true };\n     let _ = || true;\n }\n "}, {"sha": "b2feec3f57affdfc67d33ec359a08c6cfb148778", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -19,33 +19,33 @@ error: missing return statement\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:32:17\n+  --> $DIR/implicit_return.rs:33:17\n    |\n-32 |         true => false,\n+33 |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:33:18\n+  --> $DIR/implicit_return.rs:34:20\n    |\n-33 |         false => true,\n-   |                  ^^^^ help: add `return` as shown: `return true`\n+34 |         false => { true },\n+   |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:40:9\n+  --> $DIR/implicit_return.rs:41:9\n    |\n-40 |         break true;\n+41 |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:45:16\n+  --> $DIR/implicit_return.rs:47:18\n    |\n-45 |     let _ = || true;\n-   |                ^^^^ help: add `return` as shown: `return true`\n+47 |     let _ = || { true };\n+   |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:46:16\n+  --> $DIR/implicit_return.rs:48:16\n    |\n-46 |     let _ = || true;\n+48 |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: aborting due to 8 previous errors"}, {"sha": "bab0c21ffd90a015025865cb4a8937fa5939cb8a", "filename": "tests/ui/reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -37,7 +37,8 @@ fn main() {\n \n     let b = *(&a);\n \n-    let b = *(&a);\n+    #[rustfmt::skip]\n+    let b = *((&a));\n \n     let b = *&&a;\n "}, {"sha": "7665e0d1932be2714d6fbd91531e30077a7f8253", "filename": "tests/ui/reference.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -31,39 +31,39 @@ error: immediately dereferencing a reference\n    |             ^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:40:13\n+  --> $DIR/reference.rs:41:13\n    |\n-40 |     let b = *(&a);\n-   |             ^^^^^ help: try this: `a`\n+41 |     let b = *((&a));\n+   |             ^^^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:42:13\n+  --> $DIR/reference.rs:43:13\n    |\n-42 |     let b = *&&a;\n+43 |     let b = *&&a;\n    |             ^^^^ help: try this: `&a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:44:14\n+  --> $DIR/reference.rs:45:14\n    |\n-44 |     let b = **&aref;\n+45 |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:48:14\n+  --> $DIR/reference.rs:49:14\n    |\n-48 |     let b = **&&a;\n+49 |     let b = **&&a;\n    |              ^^^^ help: try this: `&a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:52:17\n+  --> $DIR/reference.rs:53:17\n    |\n-52 |         let y = *&mut x;\n+53 |         let y = *&mut x;\n    |                 ^^^^^^^ help: try this: `x`\n \n error: immediately dereferencing a reference\n-  --> $DIR/reference.rs:59:18\n+  --> $DIR/reference.rs:60:18\n    |\n-59 |         let y = **&mut &mut x;\n+60 |         let y = **&mut &mut x;\n    |                  ^^^^^^^^^^^^ help: try this: `&mut x`\n \n error: aborting due to 11 previous errors"}, {"sha": "2d7a9ae04d1e51fcf42ddacb6ad18b0e21d4a0b2", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -11,7 +11,9 @@\n \n #[allow(dead_code)]\n #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n-#[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n+#[rustfmt::skip]\n+#[cfg_attr(feature = \"cargo-clippy\",\n+           allow(dead_code))]\n #[allow(unused_imports)]\n #[allow(unused_extern_crates)]\n #[macro_use]"}, {"sha": "2dde3fd7eac34dcedb1c838d1ab9f1ff0ce7804a", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -12,11 +12,5 @@ error: useless lint attribute\n 13 | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n \n-error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:14:1\n-   |\n-14 | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "f795c11ec5b1f566be9b488c06eda4ef1d24ebe7", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -35,8 +35,8 @@ fn main() {\n \n     on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n-\n-    on_slice(&vec![1, 2]);\n+    #[rustfmt::skip]\n+    on_slice(&vec!(1, 2));\n     on_slice(&[1, 2]);\n \n     on_slice(&vec![1; 2]);"}, {"sha": "ccd6a7d25c7211490dc8642da812eaf332eca3a3", "filename": "tests/ui/vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1d5194e3d9c07279811fc4f6a704b5185c8c9f4/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=f1d5194e3d9c07279811fc4f6a704b5185c8c9f4", "patch": "@@ -21,7 +21,7 @@ error: useless use of `vec!`\n error: useless use of `vec!`\n   --> $DIR/vec.rs:39:14\n    |\n-39 |     on_slice(&vec![1, 2]);\n+39 |     on_slice(&vec!(1, 2));\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`"}]}