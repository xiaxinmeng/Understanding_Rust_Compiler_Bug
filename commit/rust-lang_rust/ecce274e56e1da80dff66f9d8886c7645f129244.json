{"sha": "ecce274e56e1da80dff66f9d8886c7645f129244", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2UyNzRlNTZlMWRhODBkZmY2NmY5ZDg4ODZjNzY0NWYxMjkyNDQ=", "commit": {"author": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2018-05-17T03:02:01Z"}, "committer": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2018-05-19T15:49:54Z"}, "message": "use if let to avoid potential div by zero\n\nremove semicolon -_-\n\nAdd rem_bytes to conditional to avoid error when performing mod by 0\n\nAdd test file to confirm compilation passes.\n\nEnsure we don't divide or mod by zero in llvm_type. Include test file from issue.", "tree": {"sha": "a1e91c0353f567370588cf5b043def7e2f38d36d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e91c0353f567370588cf5b043def7e2f38d36d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecce274e56e1da80dff66f9d8886c7645f129244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecce274e56e1da80dff66f9d8886c7645f129244", "html_url": "https://github.com/rust-lang/rust/commit/ecce274e56e1da80dff66f9d8886c7645f129244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecce274e56e1da80dff66f9d8886c7645f129244/comments", "author": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df40e61382a2cba0be621fdabb9971ce3475e9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7", "html_url": "https://github.com/rust-lang/rust/commit/df40e61382a2cba0be621fdabb9971ce3475e9a7"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "221012903d9997214f82d8feffc42c3c439a3c02", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecce274e56e1da80dff66f9d8886c7645f129244/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecce274e56e1da80dff66f9d8886c7645f129244/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=ecce274e56e1da80dff66f9d8886c7645f129244", "patch": "@@ -127,8 +127,12 @@ impl LlvmType for Reg {\n impl LlvmType for CastTarget {\n     fn llvm_type(&self, cx: &CodegenCx) -> Type {\n         let rest_ll_unit = self.rest.unit.llvm_type(cx);\n-        let rest_count = self.rest.total.bytes() / self.rest.unit.size.bytes();\n-        let rem_bytes = self.rest.total.bytes() % self.rest.unit.size.bytes();\n+        let (rest_count, rem_bytes) = if self.rest.unit.size.bytes() == 0 {\n+            (0, 0)\n+        } else {\n+            (self.rest.total.bytes() / self.rest.unit.size.bytes(),\n+            self.rest.total.bytes() % self.rest.unit.size.bytes())\n+        };\n \n         if self.prefix.iter().all(|x| x.is_none()) {\n             // Simplify to a single unit when there is no prefix and size <= unit size"}, {"sha": "534d483dc42c6827fd260bc39a417e265c1322ee", "filename": "src/test/ui/issue-50761.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ecce274e56e1da80dff66f9d8886c7645f129244/src%2Ftest%2Fui%2Fissue-50761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecce274e56e1da80dff66f9d8886c7645f129244/src%2Ftest%2Fui%2Fissue-50761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50761.rs?ref=ecce274e56e1da80dff66f9d8886c7645f129244", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Confirm that we don't accidently divide or mod by zero in llvm_type\n+\n+// compile-pass\n+\n+#![feature(test)]\n+\n+mod a {\n+    pub trait A {}\n+}\n+\n+mod b {\n+    pub struct Builder {}\n+\n+    pub fn new() -> Builder {\n+        Builder {}\n+    }\n+\n+    impl Builder {\n+        pub fn with_a(&mut self, _a: fn() -> ::a::A) {}\n+    }\n+}\n+\n+pub use self::b::new;\n+\n+fn main() {}"}]}