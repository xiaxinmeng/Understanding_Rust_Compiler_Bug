{"sha": "bf242bb1199e25ca2274df5c4114e0c9436b74e9", "node_id": "C_kwDOAAsO6NoAKGJmMjQyYmIxMTk5ZTI1Y2EyMjc0ZGY1YzQxMTRlMGM5NDM2Yjc0ZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T06:54:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T06:54:16Z"}, "message": "Auto merge of #93795 - JohnTitor:rollup-n0dmsoo, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #93445 (Add From<u8> for ExitCode)\n - #93694 (rustdoc: tweak line spacing and paragraph spacing for accessibility)\n - #93735 (Stabilize int_abs_diff in 1.60.0.)\n - #93746 (Remove defaultness from ImplItem.)\n - #93748 (rustc_query_impl: reduce visibility of some modules/fn's)\n - #93751 (Drop tracking: track borrows of projections)\n - #93781 (update `ty::TyKind` documentation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a7d3de93464e54ec1c25a908a1f261e658ff4e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d3de93464e54ec1c25a908a1f261e658ff4e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf242bb1199e25ca2274df5c4114e0c9436b74e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf242bb1199e25ca2274df5c4114e0c9436b74e9", "html_url": "https://github.com/rust-lang/rust/commit/bf242bb1199e25ca2274df5c4114e0c9436b74e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf242bb1199e25ca2274df5c4114e0c9436b74e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f586cfa53e1e8a45919bb411a55158756fc343", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f586cfa53e1e8a45919bb411a55158756fc343", "html_url": "https://github.com/rust-lang/rust/commit/e1f586cfa53e1e8a45919bb411a55158756fc343"}, {"sha": "7f4486b255de2c6019eb80655de1c1d24c28a860", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4486b255de2c6019eb80655de1c1d24c28a860", "html_url": "https://github.com/rust-lang/rust/commit/7f4486b255de2c6019eb80655de1c1d24c28a860"}], "stats": {"total": 419, "additions": 246, "deletions": 173}, "files": [{"sha": "f48cf212a984bca1cbc3511f1c4cb2568674a7d9", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -894,17 +894,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n \n-        // Since `default impl` is not yet implemented, this is always true in impls.\n-        let has_value = true;\n-        let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         let hir_id = self.lower_node_id(i.id);\n         self.lower_attrs(hir_id, &i.attrs);\n         let item = hir::ImplItem {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(i.ident),\n             generics,\n             vis: self.lower_visibility(&i.vis),\n-            defaultness,\n             kind,\n             span: self.lower_span(i.span),\n         };"}, {"sha": "f21f17439a4007338d52a06aacdbe9ed418b1d6a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -2112,7 +2112,6 @@ pub struct ImplItem<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n     pub vis: Visibility<'hir>,\n-    pub defaultness: Defaultness,\n     pub generics: Generics<'hir>,\n     pub kind: ImplItemKind<'hir>,\n     pub span: Span,\n@@ -3310,6 +3309,6 @@ mod size_asserts {\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 184);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n-    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 152);\n+    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 144);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 136);\n }"}, {"sha": "9811b0cd89191ef172e62b8064d45ed6305bb460", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -1020,12 +1020,10 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItem { def_id: _, ident, ref vis, ref defaultness, ref generics, ref kind, span: _ } =\n-        *impl_item;\n+    let ImplItem { def_id: _, ident, ref vis, ref generics, ref kind, span: _ } = *impl_item;\n \n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n-    visitor.visit_defaultness(defaultness);\n     visitor.visit_generics(generics);\n     match *kind {\n         ImplItemKind::Const(ref ty, body) => {"}, {"sha": "7204efc4224583c776fabd6fdd42d1fab02f1af5", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -164,13 +164,11 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let ImplItem { def_id: _, ident, ref vis, defaultness, ref generics, ref kind, span } =\n-            *self;\n+        let ImplItem { def_id: _, ident, ref vis, ref generics, ref kind, span } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n-            defaultness.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);"}, {"sha": "8e45b636f47f706e2552e143325fcb500d8edf9a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -923,7 +923,6 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ii.span.lo());\n         self.print_outer_attributes(self.attrs(ii.hir_id()));\n-        self.print_defaultness(ii.defaultness);\n \n         match ii.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {"}, {"sha": "e5e467030826fc786d44107aa229b390b4237d45", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -730,6 +730,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(debug_info_for_profiling, true);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);\n+    tracked!(drop_tracking, true);\n     tracked!(dual_proc_macros, true);\n     tracked!(fewer_names, Some(true));\n     tracked!(force_unstable_if_unmarked, true);"}, {"sha": "46c6b5eb796d7afc012b6569c8ab21212a267016", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 69, "deletions": 19, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -74,10 +74,10 @@ impl BoundRegionKind {\n     }\n }\n \n-/// Defines the kinds of types.\n+/// Defines the kinds of types used by the type system.\n ///\n-/// N.B., if you change this, you'll probably want to change the corresponding\n-/// AST structure in `rustc_ast/src/ast.rs` as well.\n+/// Types written by the user start out as [hir::TyKind](rustc_hir::TyKind) and get\n+/// converted to this representation using `AstConv::ast_ty_to_ty`.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]\n #[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -100,10 +100,11 @@ pub enum TyKind<'tcx> {\n \n     /// Algebraic data types (ADT). For example: structures, enumerations and unions.\n     ///\n-    /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.\n-    /// That is, even after substitution it is possible that there are type\n-    /// variables. This happens when the `Adt` corresponds to an ADT\n-    /// definition and not a concrete use of it.\n+    /// For example, the type `List<i32>` would be represented using the `AdtDef`\n+    /// for `struct List<T>` and the substs `[i32]`.\n+    ///\n+    /// Note that generic parameters in fields only get lazily substituted\n+    /// by using something like `adt_def.all_fields().map(|field| field.ty(tcx, substs))`.\n     Adt(&'tcx AdtDef, SubstsRef<'tcx>),\n \n     /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.\n@@ -112,7 +113,7 @@ pub enum TyKind<'tcx> {\n     /// The pointee of a string slice. Written as `str`.\n     Str,\n \n-    /// An array with the given length. Written as `[T; n]`.\n+    /// An array with the given length. Written as `[T; N]`.\n     Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n \n     /// The pointee of an array slice. Written as `[T]`.\n@@ -126,11 +127,12 @@ pub enum TyKind<'tcx> {\n     Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),\n \n     /// The anonymous type of a function declaration/definition. Each\n-    /// function has a unique type, which is output (for a function\n-    /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.\n+    /// function has a unique type.\n     ///\n-    /// For example the type of `bar` here:\n+    /// For the function `fn foo() -> i32 { 3 }` this type would be\n+    /// shown to the user as `fn() -> i32 {foo}`.\n     ///\n+    /// For example the type of `bar` here:\n     /// ```rust\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n@@ -139,6 +141,9 @@ pub enum TyKind<'tcx> {\n \n     /// A pointer to a function. Written as `fn() -> i32`.\n     ///\n+    /// Note that both functions and closures start out as either\n+    /// [FnDef] or [Closure] which can be then be coerced to this variant.\n+    ///\n     /// For example the type of `bar` here:\n     ///\n     /// ```rust\n@@ -150,17 +155,41 @@ pub enum TyKind<'tcx> {\n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n     Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n \n-    /// The anonymous type of a closure. Used to represent the type of\n-    /// `|a| a`.\n-    /// For the order of the substs see the `ClosureSubsts` type's documentation.\n+    /// The anonymous type of a closure. Used to represent the type of `|a| a`.\n+    ///\n+    /// Closure substs contain both the - potentially substituted - generic parameters\n+    /// of its parent and some synthetic parameters. See the documentation for\n+    /// [ClosureSubsts] for more details.\n     Closure(DefId, SubstsRef<'tcx>),\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n+    ///\n+    /// For more info about generator substs, visit the documentation for\n+    /// [GeneratorSubsts].\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// A type representing the types stored inside a generator.\n-    /// This should only appear in GeneratorInteriors.\n+    /// This should only appear as part of the [GeneratorSubsts].\n+    ///\n+    /// Note that the captured variables for generators are stored separately\n+    /// using a tuple in the same way as for closures.\n+    ///\n+    /// Unlike upvars, the witness can reference lifetimes from\n+    /// inside of the generator itself. To deal with them in\n+    /// the type of the generator, we convert them to higher ranked\n+    /// lifetimes bound by the witness itself.\n+    ///\n+    /// Looking at the following example, the witness for this generator\n+    /// may end up as something like `for<'a> [Vec<i32>, &'a Vec<i32>]`:\n+    ///\n+    /// ```rust\n+    /// |a| {\n+    ///     let x = &vec![3];\n+    ///     yield a;\n+    ///     yield x[0];\n+    /// }\n+    /// ```\n     GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),\n \n     /// The never type `!`.\n@@ -175,23 +204,44 @@ pub enum TyKind<'tcx> {\n     Projection(ProjectionTy<'tcx>),\n \n     /// Opaque (`impl Trait`) type found in a return type.\n+    ///\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n     /// * or the `type Foo = impl Trait` declaration\n-    /// The substitutions are for the generics of the function in question.\n-    /// After typeck, the concrete type can be found in the `types` map.\n+    ///\n+    /// For RPIT the substitutions are for the generics of the function,\n+    /// while for TAIT it is used for the generic parameters of the alias.\n+    ///\n+    /// During codegen, `tcx.type_of(def_id)` can be used to get the underlying type.\n     Opaque(DefId, SubstsRef<'tcx>),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.\n     Param(ParamTy),\n \n-    /// Bound type variable, used only when preparing a trait query.\n+    /// Bound type variable, used to represent the `'a` in `for<'a> fn(&'a ())`.\n+    ///\n+    /// For canonical queries, we replace inference variables with bound variables,\n+    /// so e.g. when checking whether `&'_ (): Trait<_>` holds, we canonicalize that to\n+    /// `for<'a, T> &'a (): Trait<T>` and then convert the introduced bound variables\n+    /// back to inference variables in a new inference context when inside of the query.\n+    ///\n+    /// See the `rustc-dev-guide` for more details about\n+    /// [higher-ranked trait bounds][1] and [canonical queries][2].\n+    ///\n+    /// [1]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n+    /// [2]: https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html\n     Bound(ty::DebruijnIndex, BoundTy),\n \n-    /// A placeholder type - universally quantified higher-ranked type.\n+    /// A placeholder type, used during higher ranked subtyping to instantiate\n+    /// bound variables.\n     Placeholder(ty::PlaceholderType),\n \n     /// A type variable used during type checking.\n+    ///\n+    /// Similar to placeholders, inference variables also live in a universe to\n+    /// correctly deal with higher ranked types. Though unlike placeholders,\n+    /// that universe is stored in the `InferCtxt` instead of directly\n+    /// inside of the type.\n     Infer(InferTy),\n \n     /// A placeholder for a type which could not be computed; this is"}, {"sha": "b58b0f87630e39a4ba2e404b4857c266e053dedb", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -299,7 +299,7 @@ macro_rules! define_queries {\n         }\n \n         #[allow(nonstandard_style)]\n-        pub mod queries {\n+        mod queries {\n             use std::marker::PhantomData;\n \n             $(pub struct $name<$tcx> {\n@@ -353,7 +353,7 @@ macro_rules! define_queries {\n         })*\n \n         #[allow(nonstandard_style)]\n-        pub mod query_callbacks {\n+        mod query_callbacks {\n             use super::*;\n             use rustc_middle::dep_graph::DepNode;\n             use rustc_middle::ty::query::query_keys;\n@@ -402,7 +402,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            $(pub fn $name()-> DepKindStruct {\n+            $(pub(crate) fn $name()-> DepKindStruct {\n                 let is_anon = is_anon!([$($modifiers)*]);\n                 let is_eval_always = is_eval_always!([$($modifiers)*]);\n "}, {"sha": "c490872a0b424ed790a2e16df376b514b537c187", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -1173,6 +1173,8 @@ options! {\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n         (default: no)\"),\n+    drop_tracking: bool = (false, parse_bool, [TRACKED],\n+        \"enables drop tracking in generators (default: no)\"),\n     dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n         \"load proc macros for both target and host, but only link to the target (default: no)\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "f154edf5a2a4a11d36ae55c329d6880bf76e90f3", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -22,11 +22,6 @@ use tracing::debug;\n \n mod drop_ranges;\n \n-// FIXME(eholk): This flag is here to give a quick way to disable drop tracking in case we find\n-// unexpected breakages while it's still new. It should be removed before too long. For example,\n-// see #93161.\n-const ENABLE_DROP_TRACKING: bool = false;\n-\n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     types: FxIndexSet<ty::GeneratorInteriorTypeCause<'tcx>>,\n@@ -82,7 +77,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                 yield_data.expr_and_pat_count, self.expr_count, source_span\n                             );\n \n-                            if ENABLE_DROP_TRACKING\n+                            if self.fcx.sess().opts.debugging_opts.drop_tracking\n                                 && self\n                                     .drop_ranges\n                                     .is_dropped_at(hir_id, yield_data.expr_and_pat_count)\n@@ -208,7 +203,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n-    // Check that we visited the same amount of expressions and the RegionResolutionVisitor\n+    // Check that we visited the same amount of expressions as the RegionResolutionVisitor\n     let region_expr_count = visitor.region_scope_tree.body_expr_count(body_id).unwrap();\n     assert_eq!(region_expr_count, visitor.expr_count);\n "}, {"sha": "c4e7d6a199e83d0659d428435156e449968a898a", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -37,7 +37,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n     def_id: DefId,\n     body: &'tcx Body<'tcx>,\n ) -> DropRanges {\n-    if super::ENABLE_DROP_TRACKING {\n+    if fcx.sess().opts.debugging_opts.drop_tracking {\n         let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n         let num_exprs = fcx.tcx.region_scope_tree(def_id).body_expr_count(body.id()).unwrap_or(0);\n@@ -116,6 +116,18 @@ impl TrackedValue {\n             TrackedValue::Variable(hir_id) | TrackedValue::Temporary(hir_id) => *hir_id,\n         }\n     }\n+\n+    fn from_place_with_projections_allowed(place_with_id: &PlaceWithHirId<'_>) -> Self {\n+        match place_with_id.place.base {\n+            PlaceBase::Rvalue | PlaceBase::StaticItem => {\n+                TrackedValue::Temporary(place_with_id.hir_id)\n+            }\n+            PlaceBase::Local(hir_id)\n+            | PlaceBase::Upvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id }, .. }) => {\n+                TrackedValue::Variable(hir_id)\n+            }\n+        }\n+    }\n }\n \n /// Represents a reason why we might not be able to convert a HirId or Place\n@@ -142,15 +154,7 @@ impl TryFrom<&PlaceWithHirId<'_>> for TrackedValue {\n             return Err(TrackedValueConversionError::PlaceProjectionsNotSupported);\n         }\n \n-        match place_with_id.place.base {\n-            PlaceBase::Rvalue | PlaceBase::StaticItem => {\n-                Ok(TrackedValue::Temporary(place_with_id.hir_id))\n-            }\n-            PlaceBase::Local(hir_id)\n-            | PlaceBase::Upvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id }, .. }) => {\n-                Ok(TrackedValue::Variable(hir_id))\n-            }\n-        }\n+        Ok(TrackedValue::from_place_with_projections_allowed(place_with_id))\n     }\n }\n "}, {"sha": "9a308586afff3a723ef738794aac89547a8f2e52", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -96,9 +96,9 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         _diag_expr_id: HirId,\n         _bk: rustc_middle::ty::BorrowKind,\n     ) {\n-        place_with_id\n-            .try_into()\n-            .map_or(false, |tracked_value| self.places.borrowed.insert(tracked_value));\n+        self.places\n+            .borrowed\n+            .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n     }\n \n     fn mutate("}, {"sha": "199af081560f592e23fecc9f10b8de007cf83ad3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -2420,14 +2420,14 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(int_abs_diff)]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(80), 180\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(-120), 20\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n         /// ```\n-        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[stable(feature = \"int_abs_diff\", since = \"1.60.0\")]\n+        #[rustc_const_stable(feature = \"int_abs_diff\", since = \"1.60.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "feec448ebbdb318e687386ef772b49bdd579e1b9", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -1635,11 +1635,11 @@ macro_rules! uint_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(int_abs_diff)]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($SelfT), \");\")]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n         /// ```\n-        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[stable(feature = \"int_abs_diff\", since = \"1.60.0\")]\n+        #[rustc_const_stable(feature = \"int_abs_diff\", since = \"1.60.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "1f04890539604e98d04e4cf8b60f0ae68a65f38d", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -1691,6 +1691,14 @@ impl ExitCode {\n     }\n }\n \n+#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+impl From<u8> for ExitCode {\n+    /// Construct an exit code from an arbitrary u8 value.\n+    fn from(code: u8) -> Self {\n+        ExitCode(imp::ExitCode::from(code))\n+    }\n+}\n+\n impl Child {\n     /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n     /// error is returned."}, {"sha": "97985ddd3316b0e8a40e21bc2355c0a6f12ac1e8", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -476,6 +476,12 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        Self(code)\n+    }\n+}\n+\n pub struct CommandArgs<'a> {\n     iter: crate::slice::Iter<'a, CString>,\n }"}, {"sha": "42a1ff730e37997ca3b6c0362e513cdea51b9d0e", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -162,6 +162,15 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        match code {\n+            0 => Self::SUCCESS,\n+            1..=255 => Self::FAILURE,\n+        }\n+    }\n+}\n+\n pub struct Process(!);\n \n impl Process {"}, {"sha": "7bfcac8de1715bef749c5d74a716edc491b62195", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -666,6 +666,12 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        ExitCode(c::DWORD::from(code))\n+    }\n+}\n+\n fn zeroed_startupinfo() -> c::STARTUPINFO {\n     c::STARTUPINFO {\n         cb: 0,"}, {"sha": "521a88f9beb197b38a7c50b618abb1fed7877e94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -1015,7 +1015,8 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     {\n                         m.header.constness = hir::Constness::NotConst;\n                     }\n-                    MethodItem(m, Some(self.defaultness))\n+                    let defaultness = cx.tcx.associated_item(self.def_id).defaultness;\n+                    MethodItem(m, Some(defaultness))\n                 }\n                 hir::ImplItemKind::TyAlias(ref hir_ty) => {\n                     let type_ = hir_ty.clean(cx);"}, {"sha": "04112c9779b36dc584a17626dbd88ddfac7ce1be", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 52, "deletions": 60, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -108,7 +108,9 @@ html {\n /* General structure and fonts */\n \n body {\n-\tfont: 1rem/1.4 \"Source Serif 4\", NanumBarunGothic, serif;\n+\t/* Line spacing at least 1.5 per Web Content Accessibility Guidelines\n+\t   https://www.w3.org/WAI/WCAG21/Understanding/visual-presentation.html */\n+\tfont: 1rem/1.5 \"Source Serif 4\", NanumBarunGothic, serif;\n \tmargin: 0;\n \tposition: relative;\n \t/* We use overflow-wrap: break-word for Safari, which doesn't recognize\n@@ -124,13 +126,13 @@ body {\n }\n \n h1 {\n-\tfont-size: 1.5rem;\n+\tfont-size: 1.5rem; /* 24px */\n }\n h2 {\n-\tfont-size: 1.4rem;\n+\tfont-size: 1.375rem; /* 22px */\n }\n h3 {\n-\tfont-size: 1.3rem;\n+\tfont-size: 1.25rem; /* 20px */\n }\n h1, h2, h3, h4, h5, h6 {\n \tfont-weight: 500;\n@@ -170,7 +172,7 @@ h2,\n \tborder-bottom: 1px solid;\n }\n h3.code-header {\n-\tfont-size: 1.1rem;\n+\tfont-size: 1.125rem; /* 18px */\n }\n h4.code-header {\n \tfont-size: 1rem;\n@@ -221,19 +223,18 @@ a.srclink,\n \tfont-family: \"Fira Sans\", Arial, NanumBarunGothic, sans-serif;\n }\n \n-.content ul.crate a.crate {\n-\tfont-size: 1rem/1.6;\n-}\n-\n ol, ul {\n-\tpadding-left: 25px;\n+\tpadding-left: 24px;\n }\n ul ul, ol ul, ul ol, ol ol {\n-\tmargin-bottom: .6em;\n+\tmargin-bottom: .625em;\n }\n \n p {\n-\tmargin: 0 0 .6em 0;\n+\t/* Paragraph spacing at least 1.5 times line spacing per Web Content Accessibility Guidelines.\n+\t   Line-height is 1.5rem, so line spacing is .5rem; .75em is 1.5 times that.\n+\t   https://www.w3.org/WAI/WCAG21/Understanding/visual-presentation.html */\n+\tmargin: 0 0 .75em 0;\n }\n \n summary {\n@@ -303,7 +304,7 @@ code, pre, a.test-arrow, .code-header {\n }\n .docblock code, .docblock-short code {\n \tborder-radius: 3px;\n-\tpadding: 0 0.1em;\n+\tpadding: 0 0.125em;\n }\n .docblock pre code, .docblock-short pre code {\n \tpadding: 0;\n@@ -364,7 +365,7 @@ nav.sub {\n }\n \n .sidebar {\n-\tfont-size: 0.9rem;\n+\tfont-size: 0.875rem;\n \twidth: 250px;\n \tmin-width: 200px;\n \toverflow-y: scroll;\n@@ -476,8 +477,8 @@ nav.sub {\n .block a,\n h2.location a {\n \tdisplay: block;\n-\tpadding: 0.3rem;\n-\tmargin-left: -0.3rem;\n+\tpadding: 0.25rem;\n+\tmargin-left: -0.25rem;\n \n \ttext-overflow: ellipsis;\n \toverflow: hidden;\n@@ -497,7 +498,7 @@ h2.location a {\n }\n \n .sidebar h3 {\n-\tfont-size: 1.1rem;\n+\tfont-size: 1.125rem; /* 18px */\n \tfont-weight: 500;\n \tpadding: 0;\n \tmargin: 0;\n@@ -598,18 +599,18 @@ h2.location a {\n \twhite-space: pre-wrap;\n }\n \n-.top-doc .docblock h2 { font-size: 1.3rem; }\n-.top-doc .docblock h3 { font-size: 1.15rem; }\n+.top-doc .docblock h2 { font-size: 1.375rem; }\n+.top-doc .docblock h3 { font-size: 1.25; }\n .top-doc .docblock h4,\n .top-doc .docblock h5 {\n-\tfont-size: 1.1rem;\n+\tfont-size: 1.125rem;\n }\n .top-doc .docblock h6 {\n \tfont-size: 1rem;\n }\n \n .docblock h5 { font-size: 1rem; }\n-.docblock h6 { font-size: 0.95rem; }\n+.docblock h6 { font-size: 0.875rem; }\n \n .docblock {\n \tmargin-left: 24px;\n@@ -623,12 +624,12 @@ h2.location a {\n \n .content .out-of-band {\n \tflex-grow: 0;\n-\tfont-size: 1.15rem;\n+\tfont-size: 1.125rem;\n \tfont-weight: normal;\n \tfloat: right;\n }\n \n-.method > .code-header, .trait-impl > .code-header, .invisible > .code-header {\n+.method > .code-header, .trait-impl > .code-header {\n \tmax-width: calc(100% - 41px);\n \tdisplay: block;\n }\n@@ -664,7 +665,7 @@ h2.location a {\n .content td { vertical-align: top; }\n .content td:first-child { padding-right: 20px; }\n .content td p:first-child { margin-top: 0; }\n-.content td h1, .content td h2 { margin-left: 0; font-size: 1.1rem; }\n+.content td h1, .content td h2 { margin-left: 0; font-size: 1.125rem; }\n .content tr:first-child td { border-top: 0; }\n \n .docblock table {\n@@ -713,7 +714,7 @@ h2.location a {\n .content .fn .where,\n .content .where.fmt-newline {\n \tdisplay: block;\n-\tfont-size: 0.8rem;\n+\tfont-size: 0.875rem;\n }\n \n .content .methods > div:not(.notable-traits):not(.method) {\n@@ -736,7 +737,7 @@ h2.location a {\n }\n \n .content .item-info code {\n-\tfont-size: 0.81rem;\n+\tfont-size: 0.875rem;\n }\n \n .content .item-info {\n@@ -839,15 +840,6 @@ h2.small-section-header > .anchor {\n \ttext-decoration: underline;\n }\n \n-.invisible > .srclink,\n-.method > .code-header + .srclink {\n-\tposition: absolute;\n-\ttop: 0;\n-\tright: 0;\n-\tfont-size: 1.0625rem;\n-\tfont-weight: normal;\n-}\n-\n .block a.current.crate { font-weight: 500; }\n \n /*  In most contexts we use `overflow-wrap: anywhere` to ensure that we can wrap\n@@ -885,7 +877,7 @@ table,\n \tdisplay: table-cell;\n }\n .item-left {\n-\tpadding-right: 1.2rem;\n+\tpadding-right: 1.25rem;\n }\n \n .search-container {\n@@ -907,8 +899,8 @@ table,\n #crate-search {\n \tmin-width: 115px;\n \tmargin-top: 5px;\n-\tmargin-left: 0.2em;\n-\tpadding-left: 0.3em;\n+\tmargin-left: 0.25em;\n+\tpadding-left: 0.3125em;\n \tpadding-right: 23px;\n \tborder: 0;\n \tborder-radius: 4px;\n@@ -942,7 +934,7 @@ table,\n \tborder: 1px solid;\n \tborder-radius: 2px;\n \tpadding: 5px 8px;\n-\tfont-size: 1.0625rem;\n+\tfont-size: 1rem;\n \ttransition: border-color 300ms ease;\n \twidth: 100%;\n }\n@@ -1054,15 +1046,15 @@ body.blur > :not(#help) {\n .stab {\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n-\tfont-size: 0.9rem;\n+\tfont-size: 0.875rem;\n \tfont-weight: normal;\n }\n .stab p {\n \tdisplay: inline;\n }\n \n .stab .emoji {\n-\tfont-size: 1.2rem;\n+\tfont-size: 1.25rem;\n }\n \n /* Black one-pixel outline around emoji shapes */\n@@ -1078,10 +1070,10 @@ body.blur > :not(#help) {\n .import-item .stab {\n \tborder-radius: 3px;\n \tdisplay: inline-block;\n-\tfont-size: 0.8rem;\n+\tfont-size: 0.875rem;\n \tline-height: 1.2;\n \tmargin-bottom: 0;\n-\tmargin-left: .3em;\n+\tmargin-left: 0.3125em;\n \tpadding: 2px;\n \tvertical-align: text-bottom;\n }\n@@ -1107,9 +1099,6 @@ body.blur > :not(#help) {\n \tfont-weight: normal;\n \tfont-size: 1rem;\n }\n-.impl .srclink {\n-\tfont-size: 1.0625rem;\n-}\n \n .rightside {\n \tfloat: right;\n@@ -1141,7 +1130,7 @@ a.test-arrow {\n \tposition: absolute;\n \tpadding: 5px 10px 5px 10px;\n \tborder-radius: 5px;\n-\tfont-size: 1.3rem;\n+\tfont-size: 1.375rem;\n \ttop: 5px;\n \tright: 5px;\n \tz-index: 1;\n@@ -1179,7 +1168,7 @@ a.test-arrow:hover{\n \n h3.variant {\n \tfont-weight: 600;\n-\tfont-size: 1.1rem;\n+\tfont-size: 1.125rem;\n \tmargin-bottom: 10px;\n \tborder-bottom: none;\n }\n@@ -1391,7 +1380,7 @@ pre.rust {\n \tleft: 0;\n \tcursor: pointer;\n \tfont-weight: bold;\n-\tfont-size: 1.2rem;\n+\tfont-size: 1.25rem;\n \tborder-bottom: 1px solid;\n \tdisplay: flex;\n \theight: 40px;\n@@ -1516,12 +1505,9 @@ kbd {\n }\n .table-display .out-of-band {\n \tposition: relative;\n-\tfont-size: 1.1875rem;\n+\tfont-size: 1.125rem;\n \tdisplay: block;\n }\n-#implementors-list > .impl-items .table-display .out-of-band {\n-\tfont-size: 1.0625rem;\n-}\n \n .table-display td:hover .anchor {\n \tdisplay: block;\n@@ -1562,7 +1548,7 @@ div.name.expand + .children {\n div.name::before {\n \tcontent: \"\\25B6\";\n \tpadding-left: 4px;\n-\tfont-size: 0.7rem;\n+\tfont-size: 0.625rem;\n \tposition: absolute;\n \tleft: -16px;\n \ttop: 4px;\n@@ -1595,8 +1581,8 @@ details.rustdoc-toggle > summary.hideme > span {\n details.rustdoc-toggle > summary::before {\n \tcontent: \"\";\n \tcursor: pointer;\n-\twidth: 17px;\n-\theight: max(17px, 1.1em);\n+\twidth: 16px;\n+\theight: 16px;\n \tbackground-repeat: no-repeat;\n \tbackground-position: top left;\n \tdisplay: inline-block;\n@@ -1643,7 +1629,7 @@ details.rustdoc-toggle > summary.hideme::before {\n details.rustdoc-toggle > summary:not(.hideme)::before {\n \tposition: absolute;\n \tleft: -24px;\n-\ttop: 3px;\n+\ttop: 4px;\n }\n \n .impl-items > details.rustdoc-toggle > summary:not(.hideme)::before {\n@@ -1680,8 +1666,8 @@ details.undocumented > summary::before, details.rustdoc-toggle > summary::before\n \n details.rustdoc-toggle[open] > summary::before,\n details.rustdoc-toggle[open] > summary.hideme::before {\n-\twidth: 17px;\n-\theight: max(17px, 1.1em);\n+\twidth: 16px;\n+\theight: 16px;\n \tbackground-repeat: no-repeat;\n \tbackground-position: top left;\n \tdisplay: inline-block;\n@@ -1808,8 +1794,14 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\twidth: 0;\n \t}\n \n+\t.mobile-topbar .location a {\n+\t\tpadding: 0;\n+\t\tmargin: 0;\n+\t}\n+\n \t.mobile-topbar .location {\n \t\tborder: none;\n+\t\tpadding: 0;\n \t\tmargin: auto 0.5em auto auto;\n \t\ttext-overflow: ellipsis;\n \t\toverflow: hidden;\n@@ -1818,7 +1810,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\t   height is specified in pixels, this also has to be specified in\n \t\t   pixels to avoid overflowing the topbar when the user sets a bigger\n \t\t   font size. */\n-\t\tfont-size: 22.4px;\n+\t\tfont-size: 24px;\n \t}\n \n \t.mobile-topbar .logo-container {"}, {"sha": "2fb991b60ef3f7b25aadf73ff8495c345995f0c9", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -358,9 +358,11 @@ pub trait AddDefaultTrait {\n \n #[cfg(any(cfail1,cfail4))]\n impl AddDefaultTrait for Foo {\n-    // -------------------------------------------------------------------------------------------\n+    // ----------------------------------------------------\n     // -------------------------\n-            fn method_name() { }\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn         method_name() { }\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n@@ -369,9 +371,9 @@ impl AddDefaultTrait for Foo {\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n #[rustc_clean(cfg=\"cfail6\")]\n impl AddDefaultTrait for Foo {\n-    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,associated_item\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,associated_item,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(except=\"associated_item\", cfg=\"cfail5\")]\n     #[rustc_clean(cfg=\"cfail6\")]\n     default fn method_name() { }\n }"}, {"sha": "02f79f1fcd7748524796cef14370341a26f4ee4c", "filename": "src/test/rustdoc-gui/docblock-big-code-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -6,4 +6,4 @@ goto: file://|DOC_PATH|/test_docs/long_code_block/index.html\n show-text: true // We need to enable text draw to be able to have the \"real\" size\n // Little explanations for this test: if the text wasn't displayed on two lines, it would take\n // around 20px (which is the font size).\n-assert-property: (\".docblock p > code\", {\"offsetHeight\": \"42\"})\n+assert-property: (\".docblock p > code\", {\"offsetHeight\": \"44\"})"}, {"sha": "8f126d98fe44d4d4f846b1871057166f2923adea", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -6,34 +6,33 @@\n // Most of these sizes are set in CSS in `em` units, so here's a conversion chart based on our\n // default 16px font size:\n // 24px    1.5em\n-// 22.4px  1.4em\n-// 20.8px  1.3em\n-// 18.4px  1.15em\n-// 17.6px  1.1em\n-// 16px    1em\n-// 15.2px  0.95em  \n+// 22px  1.375rem\n+// 20px  1.25rem\n+// 18px  1.125em\n+// 16px  1rem\n+// 14px  0.875rem\n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n-assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"18.4px\"})\n+assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"font-size\": \"17.6px\"})\n+assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"font-size\": \"18px\"})\n assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"h2#fields\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#fields\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#fields\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h3#title-for-field\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h3#title-for-field\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#title-for-field\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h4#sub-heading-for-field\", {\"font-size\": \"16px\"})\n assert-css: (\"h4#sub-heading-for-field\", {\"border-bottom-width\": \"0px\"})\n \n-assert-css: (\"h2#implementations\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#implementations\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#implementations\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"17.6px\"})\n+assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"18px\"})\n assert-css: (\"#impl > h3.code-header\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"#method\\.do_nothing > h4.code-header\", {\"font-size\": \"16px\"})\n assert-css: (\"#method\\.do_nothing > h4.code-header\", {\"border-bottom-width\": \"0px\"})\n@@ -42,27 +41,27 @@ assert-css: (\"h4#title-for-struct-impl-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h4#title-for-struct-impl-doc\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h5#sub-heading-for-struct-impl-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#sub-heading-for-struct-impl-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-sub-heading-for-struct-impl-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-sub-heading-for-struct-impl-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-sub-heading-for-struct-impl-doc\", {\"border-bottom-width\": \"0px\"})\n \n assert-css: (\"h5#title-for-struct-impl-item-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#title-for-struct-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-heading-for-struct-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"14px\"})\n \n goto: file://|DOC_PATH|/test_docs/enum.HeavilyDocumentedEnum.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n-assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"18.4px\"})\n+assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"font-size\": \"17.6px\"})\n+assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"font-size\": \"18px\"})\n assert-css: (\"h4#top-doc-prose-sub-sub-heading\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"h2#variants\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#variants\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#variants\", {\"border-bottom-width\": \"1px\"})\n \n assert-css: (\"h4#none-prose-title\", {\"font-size\": \"16px\"})\n@@ -77,18 +76,18 @@ assert-css: (\"h5#wrapped-prose-sub-heading\", {\"border-bottom-width\": \"0px\"})\n \n assert-css: (\"h5#wrapped0-prose-title\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#wrapped0-prose-title\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#wrapped0-prose-sub-heading\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#wrapped0-prose-sub-heading\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#wrapped0-prose-sub-heading\", {\"border-bottom-width\": \"0px\"})\n \n assert-css: (\"h5#structy-prose-title\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#structy-prose-title\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#structy-prose-sub-heading\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#structy-prose-sub-heading\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#structy-prose-sub-heading\", {\"border-bottom-width\": \"0px\"})\n \n-assert-css: (\"h2#implementations\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#implementations\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#implementations\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"17.6px\"})\n+assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"18px\"})\n assert-css: (\"#impl > h3.code-header\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"#method\\.do_nothing > h4.code-header\", {\"font-size\": \"16px\"})\n assert-css: (\"#method\\.do_nothing > h4.code-header\", {\"border-bottom-width\": \"0px\"})\n@@ -97,14 +96,14 @@ assert-css: (\"h4#title-for-enum-impl-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h4#title-for-enum-impl-doc\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h5#sub-heading-for-enum-impl-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#sub-heading-for-enum-impl-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-sub-heading-for-enum-impl-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-sub-heading-for-enum-impl-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-doc\", {\"border-bottom-width\": \"0px\"})\n \n assert-css: (\"h5#title-for-enum-impl-item-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#title-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n assert-text: (\".sidebar .others h3\", \"Modules\")\n@@ -114,23 +113,23 @@ goto: file://|DOC_PATH|/test_docs/union.HeavilyDocumentedUnion.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n-assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"18.4px\"})\n+assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"h2#fields\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#fields\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#fields\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"h3#title-for-union-variant\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h3#title-for-union-variant\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#title-for-union-variant\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h4#sub-heading-for-union-variant\", {\"font-size\": \"16px\"})\n assert-css: (\"h4#sub-heading-for-union-variant\", {\"border-bottom-width\": \"0px\"})\n \n-assert-css: (\"h2#implementations\", {\"font-size\": \"22.4px\"})\n+assert-css: (\"h2#implementations\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#implementations\", {\"border-bottom-width\": \"1px\"})\n \n-assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"17.6px\"})\n+assert-css: (\"#impl > h3.code-header\", {\"font-size\": \"18px\"})\n assert-css: (\"#impl > h3.code-header\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h4#title-for-union-impl-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h4#title-for-union-impl-doc\", {\"border-bottom-width\": \"0px\"})\n@@ -139,16 +138,16 @@ assert-css: (\"h5#sub-heading-for-union-impl-doc\", {\"border-bottom-width\": \"0px\"}\n \n assert-css: (\"h5#title-for-union-impl-item-doc\", {\"font-size\": \"16px\"})\n assert-css: (\"h5#title-for-union-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n-assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"font-size\": \"15.2px\"})\n+assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n goto: file://|DOC_PATH|/test_docs/macro.heavily_documented_macro.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n-assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n+assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"22px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n-assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"18.4px\"})\n+assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n \n goto: file://|DOC_PATH|/staged_api/struct.Foo.html"}, {"sha": "7a32d9029103a4067696b73da350f76957c41c76", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -4,5 +4,5 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n assert-css: (\".item-info\", {\"width\": \"790px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"341px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"340px\"})\n assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "e70abcb83cf2beb76eacfd53d147aaa63d518abd", "filename": "src/test/rustdoc-gui/mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmobile.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -11,7 +11,7 @@ assert-css: (\".main-heading\", {\n   \"flex-direction\": \"column\"\n })\n \n-assert-property: (\".mobile-topbar h2.location\", {\"offsetHeight\": 48})\n+assert-property: (\".mobile-topbar h2.location\", {\"offsetHeight\": 36})\n \n // Note: We can't use assert-text here because the 'Since' is set by CSS and\n // is therefore not part of the DOM."}, {"sha": "0cb8e7763851c661c529540d7682b1915186c180", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -10,7 +10,7 @@ click: (10, 10)\n // We wait for the sidebar to be expanded (there is a 0.5s animation).\n wait-for: 600\n assert-css: (\"nav.sidebar.expanded\", {\"width\": \"300px\"})\n-assert-css: (\"nav.sidebar.expanded a\", {\"font-size\": \"14.4px\"})\n+assert-css: (\"nav.sidebar.expanded a\", {\"font-size\": \"14px\"})\n // We collapse the sidebar.\n click: (10, 10)\n // We wait for the sidebar to be collapsed (there is a 0.5s animation)."}, {"sha": "9505e00512f4ca4289a0b140eedbf10fde2be4de", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -77,7 +77,7 @@ assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n-assert-property: (\".sidebar-links a\", {\"offsetHeight\": 30})\n+assert-property: (\".sidebar-links a\", {\"offsetHeight\": 29})\n \n // Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n // appropriate anchor in index.html."}, {"sha": "0c01e25455486232a54522398f6bfad0afcee192", "filename": "src/test/rustdoc-gui/src-font-size.goml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -4,9 +4,8 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n show-text: true\n // Check the impl headers.\n-assert-css: (\".impl.has-srclink .srclink\", {\"font-size\": \"17px\"}, ALL)\n-// The \".6\" part is because the font-size is actually \"1.1em\".\n-assert-css: (\".impl.has-srclink .code-header.in-band\", {\"font-size\": \"17.6px\"}, ALL)\n+assert-css: (\".impl.has-srclink .srclink\", {\"font-size\": \"16px\"}, ALL)\n+assert-css: (\".impl.has-srclink .code-header.in-band\", {\"font-size\": \"18px\"}, ALL)\n // Check the impl items.\n assert-css: (\".impl-items .has-srclink .srclink\", {\"font-size\": \"16px\"}, ALL)\n assert-css: (\".impl-items .has-srclink .code-header\", {\"font-size\": \"16px\"}, ALL)"}, {"sha": "22212a31728dca6dc06524be2c9cc60e216a10fc", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -32,6 +32,6 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n size: (600, 600)\n goto: file://|DOC_PATH|/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\n // It shouldn't have an overflow in the topbar either.\n-assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"493\"})\n-assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"493\"})\n+assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"492\"})\n+assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"492\"})\n assert-css: (\".mobile-topbar .location\", {\"overflow-x\": \"hidden\"})"}, {"sha": "4ce3ac1e8746030d3ff3caea1e25aa27d8d41267", "filename": "src/test/ui/async-await/issue-93648.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Fui%2Fasync-await%2Fissue-93648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftest%2Fui%2Fasync-await%2Fissue-93648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-93648.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+// build-pass\n+// compile-flags: -Zdrop-tracking\n+\n+fn main() {\n+    let _ = async {\n+        let mut s = (String::new(),);\n+        s.0.push_str(\"abc\");\n+        std::mem::drop(s);\n+        async {}.await;\n+    };\n+}"}, {"sha": "8691148313702e4657a2137b664289b4b1925cb8", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf242bb1199e25ca2274df5c4114e0c9436b74e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=bf242bb1199e25ca2274df5c4114e0c9436b74e9", "patch": "@@ -54,9 +54,6 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n             ),\n             hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n-        if item.defaultness.is_default() {\n-            println!(\"default\");\n-        }\n         match item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 println!(\"associated constant\");"}]}