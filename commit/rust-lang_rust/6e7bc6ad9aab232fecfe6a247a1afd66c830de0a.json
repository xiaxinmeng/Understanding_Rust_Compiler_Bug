{"sha": "6e7bc6ad9aab232fecfe6a247a1afd66c830de0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlN2JjNmFkOWFhYjIzMmZlY2ZlNmEyNDdhMWFmZDY2YzgzMGRlMGE=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-08-25T22:09:31Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-08-25T22:09:31Z"}, "message": "fix match_path -> match_qpath rename", "tree": {"sha": "d1585c1cd948d7f6b79ba8904e87deb66ab7a631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1585c1cd948d7f6b79ba8904e87deb66ab7a631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a", "html_url": "https://github.com/rust-lang/rust/commit/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df903eddddb3733f5d03c940333856fbb00e7e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/df903eddddb3733f5d03c940333856fbb00e7e4d", "html_url": "https://github.com/rust-lang/rust/commit/df903eddddb3733f5d03c940333856fbb00e7e4d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "5ec9c97ed921bec6cb02c5b5075b36a4148140f2", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7bc6ad9aab232fecfe6a247a1afd66c830de0a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=6e7bc6ad9aab232fecfe6a247a1afd66c830de0a", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::*;\n-use utils::{get_trait_def_id, implements_trait, higher, match_path, paths, span_lint};\n+use utils::{get_trait_def_id, implements_trait, higher, match_qpath, paths, span_lint};\n \n /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n ///\n@@ -150,7 +150,7 @@ fn is_infinite(cx: &LateContext, expr: &Expr) -> TriState {\n         ExprBox(ref e) | ExprAddrOf(_, ref e) => is_infinite(cx, e),\n         ExprCall(ref path, _) => {\n             if let ExprPath(ref qpath) = path.node {\n-                match_path(qpath, &paths::REPEAT).into()\n+                match_qpath(qpath, &paths::REPEAT).into()\n             } else { False }\n         },\n         ExprStruct(..) => {"}]}