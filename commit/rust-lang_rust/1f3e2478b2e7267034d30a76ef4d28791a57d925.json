{"sha": "1f3e2478b2e7267034d30a76ef4d28791a57d925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmM2UyNDc4YjJlNzI2NzAzNGQzMGE3NmVmNGQyODc5MWE1N2Q5MjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T11:34:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T11:45:22Z"}, "message": "indicate better which kind of memory got leaked", "tree": {"sha": "d4588abe02a3148ebf712ab9b7eaa54f8e950756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4588abe02a3148ebf712ab9b7eaa54f8e950756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3e2478b2e7267034d30a76ef4d28791a57d925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3e2478b2e7267034d30a76ef4d28791a57d925", "html_url": "https://github.com/rust-lang/rust/commit/1f3e2478b2e7267034d30a76ef4d28791a57d925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3e2478b2e7267034d30a76ef4d28791a57d925/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecaeab5ec47ca34da95b4730cbfe80a19ce6fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecaeab5ec47ca34da95b4730cbfe80a19ce6fe6", "html_url": "https://github.com/rust-lang/rust/commit/aecaeab5ec47ca34da95b4730cbfe80a19ce6fe6"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "23e39f433f53b1ffcef60a091f32804b3f8974a6", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3e2478b2e7267034d30a76ef4d28791a57d925/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3e2478b2e7267034d30a76ef4d28791a57d925/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=1f3e2478b2e7267034d30a76ef4d28791a57d925", "patch": "@@ -79,7 +79,7 @@ pub trait AllocMap<K: Hash + Eq, V> {\n /// and some use case dependent behaviour can instead be applied.\n pub trait Machine<'mir, 'tcx>: Sized {\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKind: ::std::fmt::Debug + MayLeak + Eq + 'static;\n+    type MemoryKind: ::std::fmt::Debug + ::std::fmt::Display + MayLeak + Eq + 'static;\n \n     /// Tag tracked alongside every pointer. This is used to implement \"Stacked Borrows\"\n     /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>."}, {"sha": "c16c59715e40c4992979552b19e9570a885c23ac", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f3e2478b2e7267034d30a76ef4d28791a57d925/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3e2478b2e7267034d30a76ef4d28791a57d925/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1f3e2478b2e7267034d30a76ef4d28791a57d925", "patch": "@@ -9,6 +9,7 @@\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::convert::TryFrom;\n+use std::fmt;\n use std::ptr;\n \n use rustc_ast::ast::Mutability;\n@@ -46,6 +47,17 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     }\n }\n \n+impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            MemoryKind::Stack => write!(f, \"stack variable\"),\n+            MemoryKind::Vtable => write!(f, \"vtable\"),\n+            MemoryKind::CallerLocation => write!(f, \"caller location\"),\n+            MemoryKind::Machine(m) => write!(f, \"{}\", m),\n+        }\n+    }\n+}\n+\n /// Used by `get_size_and_align` to indicate whether the allocation needs to be live.\n #[derive(Debug, Copy, Clone)]\n pub enum AllocCheck {\n@@ -259,7 +271,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         if alloc_kind != kind {\n             throw_ub_format!(\n-                \"deallocating `{:?}` memory using `{:?}` deallocation operation\",\n+                \"deallocating {} memory using {} deallocation operation\",\n                 alloc_kind,\n                 kind\n             );\n@@ -677,22 +689,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             match self.alloc_map.get(id) {\n                 Some(&(kind, ref alloc)) => {\n                     // normal alloc\n-                    match kind {\n-                        MemoryKind::Stack => eprint!(\" (stack variable, \"),\n-                        MemoryKind::Vtable => eprint!(\" (vtable, \"),\n-                        MemoryKind::CallerLocation => eprint!(\" (caller_location, \"),\n-                        MemoryKind::Machine(m) if Some(m) == M::GLOBAL_KIND => {\n-                            eprint!(\" (global, \")\n-                        }\n-                        MemoryKind::Machine(m) => eprint!(\" ({:?}, \", m),\n-                    };\n+                    eprint!(\" ({}, \", kind);\n                     write_allocation_track_relocs(self.tcx, &mut allocs_to_print, alloc);\n                 }\n                 None => {\n                     // global alloc\n                     match self.tcx.alloc_map.lock().get(id) {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            eprint!(\" (global, \");\n+                            eprint!(\" (unchanged global, \");\n                             write_allocation_track_relocs(self.tcx, &mut allocs_to_print, alloc);\n                         }\n                         Some(GlobalAlloc::Function(func)) => {"}]}