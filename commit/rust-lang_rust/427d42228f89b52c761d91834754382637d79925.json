{"sha": "427d42228f89b52c761d91834754382637d79925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyN2Q0MjIyOGY4OWI1MmM3NjFkOTE4MzQ3NTQzODI2MzdkNzk5MjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T07:23:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:45Z"}, "message": "Convert rustc::syntax::eval to istrs. Issue #855", "tree": {"sha": "f643222164bdc268e2dfaa285eb297ef35ebb02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f643222164bdc268e2dfaa285eb297ef35ebb02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/427d42228f89b52c761d91834754382637d79925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/427d42228f89b52c761d91834754382637d79925", "html_url": "https://github.com/rust-lang/rust/commit/427d42228f89b52c761d91834754382637d79925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/427d42228f89b52c761d91834754382637d79925/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26516dc8d2e530574e466195cc9375e492a21b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/26516dc8d2e530574e466195cc9375e492a21b99", "html_url": "https://github.com/rust-lang/rust/commit/26516dc8d2e530574e466195cc9375e492a21b99"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "04fffb70c3774da29cf003fb91e371cf2c7ef514", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/427d42228f89b52c761d91834754382637d79925/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427d42228f89b52c761d91834754382637d79925/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=427d42228f89b52c761d91834754382637d79925", "patch": "@@ -20,29 +20,30 @@ tag eval_mode { mode_depend; mode_parse; }\n type ctx =\n     @{p: parser,\n       mode: eval_mode,\n-      mutable deps: [str],\n+      mutable deps: [istr],\n       sess: parser::parse_sess,\n       mutable chpos: uint,\n       mutable byte_pos: uint,\n       cfg: ast::crate_cfg};\n \n fn eval_crate_directives(cx: ctx, cdirs: &[@ast::crate_directive],\n-                         prefix: str, view_items: &mutable [@ast::view_item],\n+                         prefix: &istr,\n+                         view_items: &mutable [@ast::view_item],\n                          items: &mutable [@ast::item]) {\n     for sub_cdir: @ast::crate_directive in cdirs {\n         eval_crate_directive(cx, sub_cdir, prefix, view_items, items);\n     }\n }\n \n fn eval_crate_directives_to_mod(cx: ctx, cdirs: &[@ast::crate_directive],\n-                                prefix: str) -> ast::_mod {\n+                                prefix: &istr) -> ast::_mod {\n     let view_items: [@ast::view_item] = [];\n     let items: [@ast::item] = [];\n     eval_crate_directives(cx, cdirs, prefix, view_items, items);\n     ret {view_items: view_items, items: items};\n }\n \n-fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n+fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &istr,\n                         view_items: &mutable [@ast::view_item],\n                         items: &mutable [@ast::item]) {\n     alt cdir.node {\n@@ -54,15 +55,15 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n           }\n           none. { }\n         }\n-        let full_path = if std::fs::path_is_absolute(\n-            file_path) {\n-            istr::to_estr(file_path)\n+        let full_path = if std::fs::path_is_absolute(file_path) {\n+            file_path\n         } else {\n-            prefix + istr::to_estr(std::fs::path_sep() + file_path)\n+            prefix + std::fs::path_sep() + file_path\n         };\n         if cx.mode == mode_depend { cx.deps += [full_path]; ret; }\n         let p0 =\n-            new_parser_from_file(cx.sess, cx.cfg, full_path, cx.chpos,\n+            new_parser_from_file(cx.sess, cx.cfg,\n+                                 istr::to_estr(full_path), cx.chpos,\n                                  cx.byte_pos, SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let mod_attrs = attrs + inner_attrs.inner;\n@@ -87,9 +88,9 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n         }\n         let full_path =\n             if std::fs::path_is_absolute(path) {\n-                istr::to_estr(path)\n+                path\n             } else {\n-            prefix + istr::to_estr(std::fs::path_sep() + path)\n+            prefix + std::fs::path_sep() + path\n         };\n         let m0 = eval_crate_directives_to_mod(cx, cdirs, full_path);\n         let i ="}, {"sha": "2ae591de1819028d82dc04d674deb75246d16ae5", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/427d42228f89b52c761d91834754382637d79925/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427d42228f89b52c761d91834754382637d79925/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=427d42228f89b52c761d91834754382637d79925", "patch": "@@ -2549,13 +2549,13 @@ fn parse_crate_from_crate_file(input: &str, cfg: &ast::crate_cfg,\n                                sess: &parse_sess) -> @ast::crate {\n     let p = new_parser_from_file(sess, cfg, input, 0u, 0u, CRATE_FILE);\n     let lo = p.get_lo_pos();\n-    let prefix = istr::to_estr(\n-        std::fs::dirname(istr::from_estr(p.get_filemap().name)));\n+    let prefix =\n+        std::fs::dirname(istr::from_estr(p.get_filemap().name));\n     let leading_attrs = parse_inner_attrs_and_next(p);\n     let crate_attrs = leading_attrs.inner;\n     let first_cdir_attr = leading_attrs.next;\n     let cdirs = parse_crate_directives(p, token::EOF, first_cdir_attr);\n-    let deps: [str] = [];\n+    let deps: [istr] = [];\n     let cx =\n         @{p: p,\n           mode: eval::mode_parse,"}]}