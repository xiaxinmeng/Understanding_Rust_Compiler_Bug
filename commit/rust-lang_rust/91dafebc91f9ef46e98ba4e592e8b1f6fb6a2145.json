{"sha": "91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "node_id": "C_kwDOAAsO6NoAKDkxZGFmZWJjOTFmOWVmNDZlOThiYTRlNTkyZThiMWY2ZmI2YTIxNDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-02T06:24:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-02T06:24:01Z"}, "message": "Rollup merge of #108575 - compiler-errors:erase, r=estebank\n\nErase **all** regions when probing for associated types on ambiguity in astconv\n\nFixes #108562", "tree": {"sha": "e2612eb7857203fe2970e64d610fe72e9045ebce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2612eb7857203fe2970e64d610fe72e9045ebce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAEEBCRBK7hj4Ov3rIwAAMzoIACY2J7jIUgNZ0SZFfE3p6mBK\n+PT58jpyCSn/FPhqcNgS3Mmn8v+nLu1Qlz7nsia79fAuPHWWZQZqSlwjmz/dbm7j\nbveorck573kZtZzmPSQ5RR94GHBBPboKrn6r8J4f5xDmpDN/jUO7MGlBI1sAHX7d\n+dOnNZ5eCE5KtPH3aucFYM0ARu4nxmg5FrlkgQ/IlX4/D3BYi4lamcl2O+OHskWw\nz/l3mAP/eqPxehIXMrMPpk+iQWroR8u4YVxVi9L0Vn3gTJF82/Hum7NCBDrtoj8T\n6s0v4kTtojGbx+Vts2sx5Tn6ZADGMdFncan2HR+Pz0K2wSN8HZWuwKhSdPC0H+Q=\n=Z2P2\n-----END PGP SIGNATURE-----\n", "payload": "tree e2612eb7857203fe2970e64d610fe72e9045ebce\nparent c9c9283c6aa98cc312845fe505af552b0abc8629\nparent cb9852b8e60b956421cbb6363a75d970d64372cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677738241 +0100\ncommitter GitHub <noreply@github.com> 1677738241 +0100\n\nRollup merge of #108575 - compiler-errors:erase, r=estebank\n\nErase **all** regions when probing for associated types on ambiguity in astconv\n\nFixes #108562\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "html_url": "https://github.com/rust-lang/rust/commit/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c9283c6aa98cc312845fe505af552b0abc8629", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c9283c6aa98cc312845fe505af552b0abc8629", "html_url": "https://github.com/rust-lang/rust/commit/c9c9283c6aa98cc312845fe505af552b0abc8629"}, {"sha": "cb9852b8e60b956421cbb6363a75d970d64372cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9852b8e60b956421cbb6363a75d970d64372cc", "html_url": "https://github.com/rust-lang/rust/commit/cb9852b8e60b956421cbb6363a75d970d64372cc"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "f5ce02c9e618efd3bce9a5de5d9a5ccd76dc35ce", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "patch": "@@ -2399,8 +2399,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n-                                        tcx.erase_regions(impl_.self_ty()),\n-                                        tcx.erase_regions(qself_ty),\n+                                        impl_.self_ty(),\n+                                        // Must fold past escaping bound vars too,\n+                                        // since we have those at this point in astconv.\n+                                        tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased),\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative"}, {"sha": "fbaf41245e9b602d4becfaa49fbaba85458f3d63", "filename": "tests/ui/suggestions/suggest-trait-in-ufcs-in-hrtb.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs?ref=91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "patch": "@@ -0,0 +1,8 @@\n+pub struct Bar<S>(S);\n+\n+pub trait Foo {}\n+\n+impl<S> Foo for Bar<S> where for<'a> <&'a S>::Item: Foo {}\n+//~^ ERROR ambiguous associated type\n+\n+fn main() {}"}, {"sha": "0ca5b9b920790d09252d594510069f84694c2b08", "filename": "tests/ui/suggestions/suggest-trait-in-ufcs-in-hrtb.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr?ref=91dafebc91f9ef46e98ba4e592e8b1f6fb6a2145", "patch": "@@ -0,0 +1,9 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/suggest-trait-in-ufcs-in-hrtb.rs:5:38\n+   |\n+LL | impl<S> Foo for Bar<S> where for<'a> <&'a S>::Item: Foo {}\n+   |                                      ^^^^^^^^^^^^^ help: use the fully-qualified path: `<&'a S as IntoIterator>::Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0223`."}]}