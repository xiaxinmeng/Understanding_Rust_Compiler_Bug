{"sha": "7dff08de57cebfff792948eabf72809565a007e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmYwOGRlNTdjZWJmZmY3OTI5NDhlYWJmNzI4MDk1NjVhMDA3ZTI=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-05T11:43:29Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "Rewrote check_method_receiver and ExplicitSelf, got a borrow checker error\n\nRewrote ExplicitSelf, adding a new `Other` variant for arbitrary self\ntypes. It\u2019s a bit more sophisticated now, and checks for type equality,\nso you have to pass the type context and param env as arguments.\nThere\u2019s a borrow-checker error here that I have to fix\n\nRewrote check_method_receiver, so it acts as if arbitrary self types\nare allowed, and then checks for ExplicitSelf::Other at the end and\ndisallows it unless the feature is present.", "tree": {"sha": "f58f2f33ad8b70f841fc6bfc0e75a5a4c88e3f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f58f2f33ad8b70f841fc6bfc0e75a5a4c88e3f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dff08de57cebfff792948eabf72809565a007e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dff08de57cebfff792948eabf72809565a007e2", "html_url": "https://github.com/rust-lang/rust/commit/7dff08de57cebfff792948eabf72809565a007e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dff08de57cebfff792948eabf72809565a007e2/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497397ab4b66e40f3a772544a1bb9842869cf118", "url": "https://api.github.com/repos/rust-lang/rust/commits/497397ab4b66e40f3a772544a1bb9842869cf118", "html_url": "https://github.com/rust-lang/rust/commit/497397ab4b66e40f3a772544a1bb9842869cf118"}], "stats": {"total": 102, "additions": 39, "deletions": 63}, "files": [{"sha": "5826973778463ff346a5c5abb0f57847d06f71dd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7dff08de57cebfff792948eabf72809565a007e2", "patch": "@@ -1407,7 +1407,8 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n pub enum ExplicitSelf<'tcx> {\n     ByValue,\n     ByReference(ty::Region<'tcx>, hir::Mutability),\n-    ByBox\n+    ByBox,\n+    Other\n }\n \n impl<'tcx> ExplicitSelf<'tcx> {\n@@ -1431,36 +1432,27 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     /// }\n     /// ```\n     ///\n-    /// To do the check we just count the number of \"modifiers\"\n-    /// on each type and compare them. If they are the same or\n-    /// the impl has more, we call it \"by value\". Otherwise, we\n-    /// look at the outermost modifier on the method decl and\n-    /// call it by-ref, by-box as appropriate. For method1, for\n-    /// example, the impl type has one modifier, but the method\n-    /// type has two, so we end up with\n-    /// ExplicitSelf::ByReference.\n-    pub fn determine(untransformed_self_ty: Ty<'tcx>,\n-                     self_arg_ty: Ty<'tcx>)\n-                     -> ExplicitSelf<'tcx> {\n-        fn count_modifiers(ty: Ty) -> usize {\n-            match ty.sty {\n-                ty::TyRef(_, mt) => count_modifiers(mt.ty) + 1,\n-                ty::TyAdt(def, _) if def.is_box() => count_modifiers(ty.boxed_ty()) + 1,\n-                _ => 0,\n-            }\n-        }\n+    pub fn determine<'a, 'gcx>(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        self_ty: Ty<'a>,\n+        self_arg_ty: Ty<'a>\n+    ) -> ExplicitSelf<'tcx>\n+    {\n+        use self::ExplicitSelf::*;\n \n-        let impl_modifiers = count_modifiers(untransformed_self_ty);\n-        let method_modifiers = count_modifiers(self_arg_ty);\n+        tcx.infer_ctxt().enter(|infcx| {\n+            let can_eq = |expected, actual| {\n+                let cause = traits::ObligationCause::dummy();\n+                infcx.at(&cause, param_env).eq(expected, actual).is_ok()\n+            };\n \n-        if impl_modifiers >= method_modifiers {\n-            ExplicitSelf::ByValue\n-        } else {\n             match self_arg_ty.sty {\n-                ty::TyRef(r, mt) => ExplicitSelf::ByReference(r, mt.mutbl),\n-                ty::TyAdt(def, _) if def.is_box() => ExplicitSelf::ByBox,\n-                _ => ExplicitSelf::ByValue,\n+                _ if can_eq(self_arg_ty, self_ty) => ByValue,\n+                ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if can_eq(ty, self_ty) => ByReference(region, mutbl),\n+                ty::TyAdt(def, _) if def.is_box() && can_eq(self_arg_ty.boxed_ty(), self_ty) => ByBox,\n+                _ => Other\n             }\n-        }\n+        })\n     }\n }"}, {"sha": "a008d73238d76c51d45e66ba3dfa424838a30ac0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=7dff08de57cebfff792948eabf72809565a007e2", "patch": "@@ -503,7 +503,9 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ty::TraitContainer(_) => tcx.mk_self_type()\n         };\n         let self_arg_ty = *tcx.fn_sig(method.def_id).input(0).skip_binder();\n-        match ExplicitSelf::determine(untransformed_self_ty, self_arg_ty) {\n+        let param_env = ty::ParamEnv::empty(Reveal::All);\n+\n+        match ExplicitSelf::determine(tcx, param_env, untransformed_self_ty, self_arg_ty) {\n             ExplicitSelf::ByValue => \"self\".to_string(),\n             ExplicitSelf::ByReference(_, hir::MutImmutable) => \"&self\".to_string(),\n             ExplicitSelf::ByReference(_, hir::MutMutable) => \"&mut self\".to_string(),"}, {"sha": "2e87f41c7dc5e7c32e61df419a24779e9a80c86f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dff08de57cebfff792948eabf72809565a007e2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7dff08de57cebfff792948eabf72809565a007e2", "patch": "@@ -13,6 +13,7 @@ use check::{Inherited, FnCtxt};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n+use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n@@ -451,8 +452,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                          method: &ty::AssociatedItem,\n                                          self_ty: Ty<'tcx>)\n     {\n-        // check that the type of the method's receiver matches the\n-        // method's first parameter.\n+        // check that the method has a valid receiver type, given the type `Self`\n         debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n                method, self_ty);\n \n@@ -470,47 +470,29 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n         let self_arg_ty = sig.inputs()[0];\n \n-        if fcx.tcx.sess.features.borrow().arbitrary_self_types {\n-            let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n+        let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n+        let at = fcx.at(&cause, fcx.param_env);\n+        let mut autoderef = fcx.autoderef(span, self_arg_ty);\n \n-            let mut autoderef = fcx.autoderef(span, self_arg_ty);\n-            while let Some((potential_self_ty, _)) = autoderef.next() {\n+        loop {\n+            if let Some((potential_self_ty, _)) = autoderef.next() {\n                 debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\", potential_self_ty, self_ty);\n \n-                // there's gotta be a more idiomatic way of checking if types are equal than this\n-                if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, self_ty, potential_self_ty) {\n-                    err.cancel();\n-                    continue;\n-                } else {\n-                    // we found a type that matches `self_ty`\n+                if let Ok(InferOk { obligations, value: () }) = at.eq(self_ty, potential_self_ty) {\n+                    fcx.register_predicates(obligations);\n                     autoderef.finalize();\n-                    return;\n+                    break;\n                 }\n-            }\n \n-            span_err!(fcx.tcx.sess, span, E0307, \"invalid `self` type: {:?}\", self_arg_ty);\n-            return;\n+            } else {\n+                span_err!(fcx.tcx.sess, span, E0307, \"invalid self type: {:?}\", self_arg_ty);\n+            }\n         }\n \n-        let rcvr_ty = match ExplicitSelf::determine(self_ty, self_arg_ty) {\n-            ExplicitSelf::ByValue => self_ty,\n-            ExplicitSelf::ByReference(region, mutbl) => {\n-                fcx.tcx.mk_ref(region, ty::TypeAndMut {\n-                    ty: self_ty,\n-                    mutbl,\n-                })\n+        if let ExplicitSelf::Other = ExplicitSelf::determine(fcx.tcx, fcx.param_env, self_ty, self_arg_ty) {\n+            if !fcx.tcx.sess.features.borrow().arbitrary_self_types {\n+                fcx.tcx.sess.span_err(span, \"Arbitrary `self` types are experimental\");\n             }\n-            ExplicitSelf::ByBox => fcx.tcx.mk_box(self_ty)\n-        };\n-        let rcvr_ty = fcx.normalize_associated_types_in(span, &rcvr_ty);\n-        let rcvr_ty = fcx.liberate_late_bound_regions(method.def_id,\n-                                                      &ty::Binder(rcvr_ty));\n-\n-        debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n-\n-        let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n-        if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty) {\n-            err.emit();\n         }\n     }\n "}]}