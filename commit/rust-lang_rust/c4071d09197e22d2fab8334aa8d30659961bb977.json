{"sha": "c4071d09197e22d2fab8334aa8d30659961bb977", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MDcxZDA5MTk3ZTIyZDJmYWI4MzM0YWE4ZDMwNjU5OTYxYmI5Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T08:55:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T08:55:07Z"}, "message": "Auto merge of #68325 - faern:move-numeric-consts-to-associated-consts-step1, r=LukasKalbertodt\n\nMove numeric consts to associated consts step1\n\nA subset of #67913. Implements the first step of RFC https://github.com/rust-lang/rfcs/pull/2700\n\nThis PR adds the new constants as unstable constants and defines the old ones in terms of the new ones. Then fix a tiny bit of code that started having naming collisions because of the new assoc consts.\n\nRemoved a test that did not seem relevant any longer. Since doing just `u8::MIN` should now indeed be valid.", "tree": {"sha": "b11aad469f216934a900d150d258a3b40f1e5a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11aad469f216934a900d150d258a3b40f1e5a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4071d09197e22d2fab8334aa8d30659961bb977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4071d09197e22d2fab8334aa8d30659961bb977", "html_url": "https://github.com/rust-lang/rust/commit/c4071d09197e22d2fab8334aa8d30659961bb977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4071d09197e22d2fab8334aa8d30659961bb977/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3024c4e7396106eacedd7eb94d7b681b3e82f78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3024c4e7396106eacedd7eb94d7b681b3e82f78a", "html_url": "https://github.com/rust-lang/rust/commit/3024c4e7396106eacedd7eb94d7b681b3e82f78a"}, {"sha": "61fecfb82fe088af6d3a7832b72f298064398aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/61fecfb82fe088af6d3a7832b72f298064398aff", "html_url": "https://github.com/rust-lang/rust/commit/61fecfb82fe088af6d3a7832b72f298064398aff"}], "stats": {"total": 284, "additions": 207, "deletions": 77}, "files": [{"sha": "ce7ddffd82584517e55d5485311afe17834f15ba", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -134,6 +134,7 @@\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n #![cfg_attr(bootstrap, feature(slice_patterns))]\n+#![feature(assoc_int_consts)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "0ab15b23e5337214cc6d295ef68ac1435d33c041", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -129,15 +129,15 @@ macro_rules! other_constants {\n     ($type: ident) => {\n         const EXPLICIT_SIG_BITS: u8 = Self::SIG_BITS - 1;\n         const MAX_EXP: i16 = (1 << (Self::EXP_BITS - 1)) - 1;\n-        const MIN_EXP: i16 = -Self::MAX_EXP + 1;\n-        const MAX_EXP_INT: i16 = Self::MAX_EXP - (Self::SIG_BITS as i16 - 1);\n+        const MIN_EXP: i16 = -<Self as RawFloat>::MAX_EXP + 1;\n+        const MAX_EXP_INT: i16 = <Self as RawFloat>::MAX_EXP - (Self::SIG_BITS as i16 - 1);\n         const MAX_ENCODED_EXP: i16 = (1 << Self::EXP_BITS) - 1;\n-        const MIN_EXP_INT: i16 = Self::MIN_EXP - (Self::SIG_BITS as i16 - 1);\n+        const MIN_EXP_INT: i16 = <Self as RawFloat>::MIN_EXP - (Self::SIG_BITS as i16 - 1);\n         const MAX_SIG: u64 = (1 << Self::SIG_BITS) - 1;\n         const MIN_SIG: u64 = 1 << (Self::SIG_BITS - 1);\n \n-        const INFINITY: Self = $crate::$type::INFINITY;\n-        const NAN: Self = $crate::$type::NAN;\n+        const INFINITY: Self = $type::INFINITY;\n+        const NAN: Self = $type::NAN;\n         const ZERO: Self = 0.0;\n     };\n }"}, {"sha": "da8dd9acd9f48d013d81690ca05f3314fc3cd3a3", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -15,56 +15,56 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const RADIX: u32 = 2;\n+pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MANTISSA_DIGITS: u32 = 24;\n+pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const DIGITS: u32 = 6;\n+pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const EPSILON: f32 = 1.1920929e-7_f32;\n+pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN: f32 = -3.40282347e+38_f32;\n+pub const MIN: f32 = f32::MIN;\n /// Smallest positive normal `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n+pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// Largest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX: f32 = 3.40282347e+38_f32;\n+pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_EXP: i32 = -125;\n+pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_EXP: i32 = 128;\n+pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_10_EXP: i32 = -37;\n+pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_10_EXP: i32 = 38;\n+pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n+pub const NAN: f32 = f32::NAN;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n+pub const INFINITY: f32 = f32::INFINITY;\n /// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n+pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -153,6 +153,60 @@ pub mod consts {\n #[lang = \"f32\"]\n #[cfg(not(test))]\n impl f32 {\n+    /// The radix or base of the internal representation of `f32`.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const RADIX: u32 = 2;\n+\n+    /// Number of significant digits in base 2.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MANTISSA_DIGITS: u32 = 24;\n+\n+    /// Approximate number of significant digits in base 10.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const DIGITS: u32 = 6;\n+\n+    /// [Machine epsilon] value for `f32`.\n+    ///\n+    /// This is the difference between `1.0` and the next larger representable number.\n+    ///\n+    /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const EPSILON: f32 = 1.19209290e-07_f32;\n+\n+    /// Smallest finite `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN: f32 = -3.40282347e+38_f32;\n+    /// Smallest positive normal `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n+    /// Largest finite `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX: f32 = 3.40282347e+38_f32;\n+\n+    /// One greater than the minimum possible normal power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_EXP: i32 = -125;\n+    /// Maximum possible power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_EXP: i32 = 128;\n+\n+    /// Minimum possible normal power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_10_EXP: i32 = -37;\n+    /// Maximum possible power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_10_EXP: i32 = 38;\n+\n+    /// Not a Number (NaN).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n+    /// Infinity (\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n+    /// Negative infinity (-\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n+\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```"}, {"sha": "a6081f184ab22f5b4c4c0291c049081e94dbc2bd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -15,56 +15,56 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const RADIX: u32 = 2;\n+pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MANTISSA_DIGITS: u32 = 53;\n+pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const DIGITS: u32 = 15;\n+pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n+pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN: f64 = -1.7976931348623157e+308_f64;\n+pub const MIN: f64 = f64::MIN;\n /// Smallest positive normal `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n+pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n /// Largest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX: f64 = 1.7976931348623157e+308_f64;\n+pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_EXP: i32 = -1021;\n+pub const MIN_EXP: i32 = f64::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_EXP: i32 = 1024;\n+pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_10_EXP: i32 = -307;\n+pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_10_EXP: i32 = 308;\n+pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n+pub const NAN: f64 = f64::NAN;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n+pub const INFINITY: f64 = f64::INFINITY;\n /// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n+pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -153,6 +153,59 @@ pub mod consts {\n #[lang = \"f64\"]\n #[cfg(not(test))]\n impl f64 {\n+    /// The radix or base of the internal representation of `f64`.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const RADIX: u32 = 2;\n+\n+    /// Number of significant digits in base 2.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MANTISSA_DIGITS: u32 = 53;\n+    /// Approximate number of significant digits in base 10.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const DIGITS: u32 = 15;\n+\n+    /// [Machine epsilon] value for `f64`.\n+    ///\n+    /// This is the difference between `1.0` and the next larger representable number.\n+    ///\n+    /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n+\n+    /// Smallest finite `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN: f64 = -1.7976931348623157e+308_f64;\n+    /// Smallest positive normal `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n+    /// Largest finite `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX: f64 = 1.7976931348623157e+308_f64;\n+\n+    /// One greater than the minimum possible normal power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_EXP: i32 = -1021;\n+    /// Maximum possible power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_EXP: i32 = 1024;\n+\n+    /// Minimum possible normal power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_10_EXP: i32 = -307;\n+    /// Maximum possible power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_10_EXP: i32 = 308;\n+\n+    /// Not a Number (NaN).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n+    /// Infinity (\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n+    /// Negative infinity (-\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n+\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```"}, {"sha": "39c7d6d24ed041f3d427451b3b4db9caf047bc58", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -249,42 +249,56 @@ macro_rules! int_impl {\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n      $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n-            concat!(\"Returns the smallest value that can be represented by this integer type.\n+            concat!(\"The smallest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::min_value(), \", stringify!($Min), \");\",\n+#![feature(assoc_int_consts)]\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, \", stringify!($Min), \");\",\n $EndFeature, \"\n ```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self {\n-                !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n-            }\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n         }\n \n         doc_comment! {\n-            concat!(\"Returns the largest value that can be represented by this integer type.\n+            concat!(\"The largest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value(), \", stringify!($Max), \");\",\n+#![feature(assoc_int_consts)]\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($Max), \");\",\n $EndFeature, \"\n ```\"),\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MAX: Self = !Self::MIN;\n+        }\n+\n+        doc_comment! {\n+            \"Returns the smallest value that can be represented by this integer type.\",\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self {\n+                Self::MIN\n+            }\n+        }\n+\n+        doc_comment! {\n+            \"Returns the largest value that can be represented by this integer type.\",\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n             #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n             pub const fn max_value() -> Self {\n-                !Self::min_value()\n+                Self::MAX\n             }\n         }\n \n@@ -2388,38 +2402,52 @@ macro_rules! uint_impl {\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n-            concat!(\"Returns the smallest value that can be represented by this integer type.\n+            concat!(\"The smallest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::min_value(), 0);\", $EndFeature, \"\n+#![feature(assoc_int_consts)]\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, 0);\", $EndFeature, \"\n ```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self { 0 }\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MIN: Self = 0;\n         }\n \n         doc_comment! {\n-            concat!(\"Returns the largest value that can be represented by this integer type.\n+            concat!(\"The largest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value(), \",\n-stringify!($MaxV), \");\", $EndFeature, \"\n+#![feature(assoc_int_consts)]\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($MaxV), \");\",\n+$EndFeature, \"\n ```\"),\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MAX: Self = !0;\n+        }\n+\n+        doc_comment! {\n+            \"Returns the smallest value that can be represented by this integer type.\",\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self { Self::MIN }\n+        }\n+\n+        doc_comment! {\n+            \"Returns the largest value that can be represented by this integer type.\",\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n             #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self { !0 }\n+            pub const fn max_value() -> Self { Self::MAX }\n         }\n \n         doc_comment! {"}, {"sha": "bc07c6b487b179720bbba248dc64bf2595db79fc", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -237,6 +237,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n+#![feature(assoc_int_consts)]\n #![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]"}, {"sha": "064c026e6a078344a7ebbe4149f1deb93b5fbe8c", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -47,9 +47,9 @@ pub struct MyTypeWithStr(&'static str);\n // @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '; //'\n pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n \n-// @has show_const_contents/constant.EPSILON.html '1.1920929e-7f32;'\n-// @!has show_const_contents/constant.EPSILON.html '; //'\n-pub use std::f32::EPSILON;\n+// @has show_const_contents/constant.PI.html '= 3.14159265358979323846264338327950288f32;'\n+// @has show_const_contents/constant.PI.html '; // 3.14159274f32'\n+pub use std::f32::consts::PI;\n \n // @has show_const_contents/constant.MAX.html '= i32::max_value(); // 2_147_483_647i32'\n pub use std::i32::MAX;"}, {"sha": "fbcce4b8344670a0039973a2dad54e32d9f710e8", "filename": "src/test/ui/issues/issue-22933-3.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3024c4e7396106eacedd7eb94d7b681b3e82f78a/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3024c4e7396106eacedd7eb94d7b681b3e82f78a/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs?ref=3024c4e7396106eacedd7eb94d7b681b3e82f78a", "patch": "@@ -1,4 +0,0 @@\n-const FOO: [u32; u8::MIN as usize] = [];\n-//~^ ERROR no associated item named `MIN` found\n-\n-fn main() {}"}, {"sha": "72bca3b0408390ca04eb3e3689e74148995562ca", "filename": "src/test/ui/issues/issue-22933-3.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3024c4e7396106eacedd7eb94d7b681b3e82f78a/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3024c4e7396106eacedd7eb94d7b681b3e82f78a/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr?ref=3024c4e7396106eacedd7eb94d7b681b3e82f78a", "patch": "@@ -1,14 +0,0 @@\n-error[E0599]: no associated item named `MIN` found for type `u8` in the current scope\n-  --> $DIR/issue-22933-3.rs:1:22\n-   |\n-LL | const FOO: [u32; u8::MIN as usize] = [];\n-   |                      ^^^ associated item not found in `u8`\n-   |\n-help: you are looking for the module in `std`, not the primitive type\n-   |\n-LL | const FOO: [u32; std::u8::MIN as usize] = [];\n-   |                  ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "758fb414eadf2dbcb2c49fd0af66539476ae6844", "filename": "src/test/ui/use-module-level-int-consts.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4071d09197e22d2fab8334aa8d30659961bb977/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs?ref=c4071d09197e22d2fab8334aa8d30659961bb977", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+// Make sure the module level constants are still there and accessible even after\n+// the corresponding associated constants have been added, and later stabilized.\n+use std::{u16, f32};\n+\n+fn main() {\n+    let _ = u16::MAX;\n+    let _ = f32::EPSILON;\n+    let _ = std::f64::MANTISSA_DIGITS;\n+}"}]}