{"sha": "b7da97504943c79185548881aab88d6a0e2118fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGE5NzUwNDk0M2M3OTE4NTU0ODg4MWFhYjg4ZDZhMGUyMTE4ZmQ=", "commit": {"author": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-10T09:38:54Z"}, "committer": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-10T09:38:54Z"}, "message": "renamed vec::from_slice to vec::to_owned", "tree": {"sha": "f5fdb5da2aefa9744630c3cb48003545535b6de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5fdb5da2aefa9744630c3cb48003545535b6de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7da97504943c79185548881aab88d6a0e2118fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7da97504943c79185548881aab88d6a0e2118fd", "html_url": "https://github.com/rust-lang/rust/commit/b7da97504943c79185548881aab88d6a0e2118fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7da97504943c79185548881aab88d6a0e2118fd/comments", "author": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "html_url": "https://github.com/rust-lang/rust/commit/ad8e236f32fccf6ec99025e2ba77f79b4c98d399"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "672b71a1e9e0b541c886ef5b51b8126a5e7069f6", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -568,7 +568,7 @@ impl<R: Rng> RngUtil for R {\n \n     /// Shuffle a vec\n     fn shuffle<T:Copy>(&mut self, values: &[T]) -> ~[T] {\n-        let mut m = vec::from_slice(values);\n+        let mut m = vec::to_owned(values);\n         self.shuffle_mut(m);\n         m\n     }"}, {"sha": "eaf7723f006a92ffe1431e41adc7465497d6dcb0", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -166,7 +166,7 @@ pub fn from_elem<T:Copy>(n_elts: uint, t: T) -> ~[T] {\n }\n \n /// Creates a new unique vector with the same contents as the slice\n-pub fn from_slice<T:Copy>(t: &[T]) -> ~[T] {\n+pub fn to_owned<T:Copy>(t: &[T]) -> ~[T] {\n     from_fn(t.len(), |i| t[i])\n }\n \n@@ -3451,19 +3451,19 @@ mod tests {\n         let mut results: ~[~[int]];\n \n         results = ~[];\n-        for each_permutation(~[]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[]]);\n \n         results = ~[];\n-        for each_permutation(~[7]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[7]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[7]]);\n \n         results = ~[];\n-        for each_permutation(~[1,1]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[1,1]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[1,1],~[1,1]]);\n \n         results = ~[];\n-        for each_permutation(~[5,2,0]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[5,2,0]) |v| { results.push(to_owned(v)); }\n         assert!(results ==\n             ~[~[5,2,0],~[5,0,2],~[2,5,0],~[2,0,5],~[0,5,2],~[0,2,5]]);\n     }"}, {"sha": "983ac1f1aaa652989bf2c4de3c220bca5c5bf7da", "filename": "src/librust/rust.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -192,7 +192,7 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n             let (prog, prog_args) = (words.head(), words.tail());\n             let exitstatus = run::run_program(\n                 *prog,\n-                vec::append(vec::from_slice(prog_args), args)\n+                vec::append(vec::to_owned(prog_args), args)\n             );\n             os::set_exit_status(exitstatus);\n             Valid"}, {"sha": "8ed2fe6378e08a1f2b93d9b8b3baae11dd757f68", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -580,7 +580,7 @@ pub fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n     let item_doc = lookup_item(id, cdata.data);\n     let path = {\n         let item_path = item_path(intr, item_doc);\n-        vec::from_slice(item_path.init())\n+        vec::to_owned(item_path.init())\n     };\n     match decode_inlined_item(cdata, tcx, copy path, item_doc) {\n       Some(ref ii) => csearch::found((/*bad*/copy *ii)),"}, {"sha": "9014dc16fdde6b2eb0ae3abf6922f4ef645ade1f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -1420,7 +1420,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n     //\n     // Should be:\n     //\n-    //   vec::from_slice(metadata_encoding_version) +\n+    //   vec::to_owned(metadata_encoding_version) +\n \n     let writer_bytes: &mut ~[u8] = wr.bytes;\n "}, {"sha": "e9211cb0929d99bdb799678f4d0819cdedf7f912", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -488,7 +488,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                 match cx.tcx.def_map.find(&pat_id) {\n                     Some(&def_variant(_, id)) => {\n                         if variant(id) == *ctor_id {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -507,7 +507,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(~\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -538,7 +538,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(~\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -548,7 +548,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => args,\n                             None => vec::from_elem(arity, wild())\n                         };\n-                        Some(vec::append(args, vec::from_slice(r.tail())))\n+                        Some(vec::append(args, vec::to_owned(r.tail())))\n                     }\n                     def_variant(_, _) => None,\n \n@@ -560,7 +560,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => new_args = args,\n                             None => new_args = vec::from_elem(arity, wild())\n                         }\n-                        Some(vec::append(new_args, vec::from_slice(r.tail())))\n+                        Some(vec::append(new_args, vec::to_owned(r.tail())))\n                     }\n                     _ => None\n                 }\n@@ -578,7 +578,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     _ => wild()\n                                 }\n                             });\n-                            Some(vec::append(args, vec::from_slice(r.tail())))\n+                            Some(vec::append(args, vec::to_owned(r.tail())))\n                         } else {\n                             None\n                         }\n@@ -608,7 +608,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                 _ => wild()\n                             }\n                         });\n-                        Some(vec::append(args, vec::from_slice(r.tail())))\n+                        Some(vec::append(args, vec::to_owned(r.tail())))\n                     }\n                 }\n             }\n@@ -627,21 +627,21 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     single => true,\n                     _ => fail!(~\"type error\")\n                 };\n-                if match_ { Some(vec::from_slice(r.tail())) } else { None }\n+                if match_ { Some(vec::to_owned(r.tail())) } else { None }\n             }\n             pat_range(lo, hi) => {\n                 let (c_lo, c_hi) = match *ctor_id {\n                     val(ref v) => ((/*bad*/copy *v), (/*bad*/copy *v)),\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n-                    single => return Some(vec::from_slice(r.tail())),\n+                    single => return Some(vec::to_owned(r.tail())),\n                     _ => fail!(~\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo),\n                 v_hi = eval_const_expr(cx.tcx, hi);\n                 let match_ = compare_const_vals(&c_lo, &v_lo) >= 0 &&\n                     compare_const_vals(&c_hi, &v_hi) <= 0;\n-          if match_ { Some(vec::from_slice(r.tail())) } else { None }\n+          if match_ { Some(vec::to_owned(r.tail())) } else { None }\n       }\n             pat_vec(before, slice, after) => {\n                 match *ctor_id {\n@@ -674,7 +674,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n }\n \n pub fn default(cx: @MatchCheckCtxt, r: &[@pat]) -> Option<~[@pat]> {\n-    if is_wild(cx, r[0]) { Some(vec::from_slice(r.tail())) }\n+    if is_wild(cx, r[0]) { Some(vec::to_owned(r.tail())) }\n     else { None }\n }\n "}, {"sha": "3274503e303800946dca89f7f3a4c741cee79591", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -217,7 +217,7 @@ fn mk_struct(cx: @CrateContext, tys: &[ty::t], packed: bool) -> Struct {\n         size: machine::llsize_of_alloc(cx, llty_rec) /*bad*/as u64,\n         align: machine::llalign_of_min(cx, llty_rec) /*bad*/as u64,\n         packed: packed,\n-        fields: vec::from_slice(tys)\n+        fields: vec::to_owned(tys)\n     }\n }\n "}, {"sha": "702d62f136348cde1d99beff3d74b79da881fc54", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -71,8 +71,8 @@ pub impl FnType {\n             let llretptr = GEPi(bcx, llargbundle, [0u, n]);\n             let llretloc = Load(bcx, llretptr);\n                 llargvals = ~[llretloc];\n-                atys = vec::from_slice(atys.tail());\n-                attrs = vec::from_slice(attrs.tail());\n+                atys = vec::to_owned(atys.tail());\n+                attrs = vec::to_owned(attrs.tail());\n         }\n \n         while i < n {\n@@ -137,8 +137,8 @@ pub impl FnType {\n         let mut attrs = /*bad*/copy self.attrs;\n         let mut j = 0u;\n         let llretptr = if self.sret {\n-            atys = vec::from_slice(atys.tail());\n-            attrs = vec::from_slice(attrs.tail());\n+            atys = vec::to_owned(atys.tail());\n+            attrs = vec::to_owned(attrs.tail());\n             j = 1u;\n             get_param(llwrapfn, 0u)\n         } else if self.ret_ty.cast {"}, {"sha": "449ecfe5dbf683fc26a0b6dba9fda91fc4c94d68", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -3813,7 +3813,7 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           }\n \n           ast_map::node_variant(ref variant, _, path) => {\n-            vec::append_one(vec::from_slice(vec::init(*path)),\n+            vec::append_one(vec::to_owned(vec::init(*path)),\n                             ast_map::path_name((*variant).node.name))\n           }\n "}, {"sha": "6547ff8eefbb914231ef25dec80e4aeac8bb2dd5", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -442,7 +442,7 @@ pub mod flatteners {\n                               T: Decodable<D>>(\n                               buf: &[u8])\n                               -> T {\n-        let buf = vec::from_slice(buf);\n+        let buf = vec::to_owned(buf);\n         let buf_reader = @BufReader::new(buf);\n         let reader = buf_reader as @Reader;\n         let mut deser: D = FromReader::from_reader(reader);"}, {"sha": "9b754c4ec5d0cdab21425f5e02646411d76db89c", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -339,7 +339,7 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result {\n         }\n         i += 1;\n     }\n-    return Ok(Matches {opts: vec::from_slice(opts),\n+    return Ok(Matches {opts: vec::to_owned(opts),\n                vals: vals,\n                free: free});\n }"}, {"sha": "71b62ca36a5ee5f66802bb96b53b27cc220fef2d", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -26,7 +26,7 @@ pub fn md4(msg: &[u8]) -> Quad {\n     let orig_len: u64 = (vec::len(msg) * 8u) as u64;\n \n     // pad message\n-    let mut msg = vec::append(vec::from_slice(msg), ~[0x80u8]);\n+    let mut msg = vec::append(vec::to_owned(msg), ~[0x80u8]);\n     let mut bitlen = orig_len + 8u64;\n     while (bitlen + 64u64) % 512u64 > 0u64 {\n         msg.push(0u8);"}, {"sha": "e64e97adfa30876284abbea4af5d56feadb0f7d8", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -541,7 +541,7 @@ impl BigUint {\n     /// Creates and initializes an BigUint.\n     #[inline(always)]\n     pub fn from_slice(slice: &[BigDigit]) -> BigUint {\n-        return BigUint::new(vec::from_slice(slice));\n+        return BigUint::new(vec::to_owned(slice));\n     }\n \n     /// Creates and initializes an BigUint."}, {"sha": "25323b4e1db8e024c1b5abbf97bda022010dee39", "filename": "src/libstd/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibstd%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstats.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -52,7 +52,7 @@ impl<'self> Stats for &'self [f64] {\n \n     fn median(self) -> f64 {\n         assert!(self.len() != 0);\n-        let mut tmp = vec::from_slice(self);\n+        let mut tmp = vec::to_owned(self);\n         sort::tim_sort(tmp);\n         if tmp.len() & 1 == 0 {\n             let m = tmp.len() / 2;"}, {"sha": "aebe5bbfc748a681e59dabb350920158db6b8677", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -255,7 +255,7 @@ pub fn last_meta_item_list_by_name(items: ~[@ast::meta_item], name: &str)\n \n pub fn sort_meta_items(items: &[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let mut v = vec::from_slice(items);\n+    let mut v = vec::to_owned(items);\n     do std::sort::quick_sort(v) |ma, mb| {\n         get_meta_item_name(*ma) <= get_meta_item_name(*mb)\n     }"}, {"sha": "00c178b6d7c160d33bf0180f2e40dfdc3bfc88e7", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -41,7 +41,7 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::from_slice(tts));\n+                                       vec::to_owned(tts));\n \n     let mut asm = ~\"\";\n     let mut outputs = ~[];"}, {"sha": "da18072f0e8b25857a71605c3bd50e62a723cfea", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -386,7 +386,7 @@ pub fn get_exprs_from_tts(cx: @ext_ctxt, tts: &[ast::token_tree])\n                        -> ~[@ast::expr] {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::from_slice(tts));\n+                                       vec::to_owned(tts));\n     let mut es = ~[];\n     while *p.token != token::EOF {\n         if es.len() != 0 {"}, {"sha": "76d9a9420ce509f2ef51a6d7892d6d590962e089", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -22,7 +22,7 @@ pub fn expand_syntax_ext(cx: @ext_ctxt,\n     cx.print_backtrace();\n     io::stdout().write_line(\n         print::pprust::tt_to_str(\n-            ast::tt_delim(vec::from_slice(tt)),\n+            ast::tt_delim(vec::to_owned(tt)),\n             cx.parse_sess().interner));\n \n     //trivial expression"}, {"sha": "34a37e4f6b4848af38dba1314a5b4671c5b764b3", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -669,7 +669,7 @@ fn expand_tts(cx: @ext_ctxt,\n     let p = parse::new_parser_from_tts(\n         cx.parse_sess(),\n         cx.cfg(),\n-        vec::from_slice(tts)\n+        vec::to_owned(tts)\n     );\n     *p.quote_depth += 1u;\n     let tts = p.parse_all_token_trees();"}, {"sha": "9660afb1bc08d273ebba0ceaaec820b8f06fb585", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -25,7 +25,7 @@ pub fn expand_trace_macros(cx: @ext_ctxt,\n         copy cx.parse_sess().span_diagnostic,\n         cx.parse_sess().interner,\n         None,\n-        vec::from_slice(tt)\n+        vec::to_owned(tt)\n     );\n     let rdr = tt_rdr as @reader;\n     let rust_parser = Parser("}, {"sha": "e1de2f6381bf02f8fbb6df552c5c59305e572196", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da97504943c79185548881aab88d6a0e2118fd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b7da97504943c79185548881aab88d6a0e2118fd", "patch": "@@ -82,7 +82,7 @@ pub fn add_new_extension(cx: @ext_ctxt,\n             io::println(fmt!(\"%s! { %s }\",\n                              cx.str_of(name),\n                              print::pprust::tt_to_str(\n-                                 ast::tt_delim(vec::from_slice(arg)),\n+                                 ast::tt_delim(vec::to_owned(arg)),\n                                  cx.parse_sess().interner)));\n         }\n \n@@ -101,7 +101,7 @@ pub fn add_new_extension(cx: @ext_ctxt,\n                     s_d,\n                     itr,\n                     None,\n-                    vec::from_slice(arg)\n+                    vec::to_owned(arg)\n                 ) as @reader;\n                 match parse(cx.parse_sess(), cx.cfg(), arg_rdr, (*mtcs)) {\n                   success(named_matches) => {"}]}