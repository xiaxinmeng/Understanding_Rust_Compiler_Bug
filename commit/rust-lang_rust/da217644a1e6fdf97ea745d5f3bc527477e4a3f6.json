{"sha": "da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMjE3NjQ0YTFlNmZkZjk3ZWE3NDVkNWYzYmM1Mjc0NzdlNGEzZjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T16:36:53Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T16:36:53Z"}, "message": "Make sure we keep emitting a hard error", "tree": {"sha": "6689fb744ec859fb61b995af3cbb465f324ddfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6689fb744ec859fb61b995af3cbb465f324ddfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "html_url": "https://github.com/rust-lang/rust/commit/da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017423179a9ea3267d0fab7bd20fd73b0cd8a528", "url": "https://api.github.com/repos/rust-lang/rust/commits/017423179a9ea3267d0fab7bd20fd73b0cd8a528", "html_url": "https://github.com/rust-lang/rust/commit/017423179a9ea3267d0fab7bd20fd73b0cd8a528"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "5025bacafa1db8ca6407230d9872636e904ad646", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "patch": "@@ -409,25 +409,43 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // reference. This makes the rest of the matching logic simpler as it doesn't have\n                 // to figure out how to get a reference again.\n                 ty::Adt(adt_def, _) if !self.type_marked_structural(pointee_ty) => {\n-                    if self.include_lint_checks\n-                        && !self.saw_const_match_error.get()\n-                        && !self.saw_const_match_lint.get()\n-                    {\n-                        self.saw_const_match_lint.set(true);\n-                        let path = self.tcx().def_path_str(adt_def.did);\n-                        let msg = format!(\n-                            \"to use a constant of type `{}` in a pattern, \\\n-                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                            path, path,\n-                        );\n-                        self.tcx().struct_span_lint_hir(\n-                            lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n-                            self.id,\n-                            self.span,\n-                            |lint| lint.build(&msg).emit(),\n-                        );\n+                    if self.behind_reference.get() {\n+                        if self.include_lint_checks\n+                            && !self.saw_const_match_error.get()\n+                            && !self.saw_const_match_lint.get()\n+                        {\n+                            self.saw_const_match_lint.set(true);\n+                            let path = self.tcx().def_path_str(adt_def.did);\n+                            let msg = format!(\n+                                \"to use a constant of type `{}` in a pattern, \\\n+                                `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                path, path,\n+                            );\n+                            self.tcx().struct_span_lint_hir(\n+                                lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n+                                self.id,\n+                                self.span,\n+                                |lint| lint.build(&msg).emit(),\n+                            );\n+                        }\n+                        PatKind::Constant { value: cv }\n+                    } else {\n+                        if !self.saw_const_match_error.get() {\n+                            self.saw_const_match_error.set(true);\n+                            let path = self.tcx().def_path_str(adt_def.did);\n+                            let msg = format!(\n+                                \"to use a constant of type `{}` in a pattern, \\\n+                                `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                path, path,\n+                            );\n+                            if self.include_lint_checks {\n+                                tcx.sess.span_err(span, &msg);\n+                            } else {\n+                                tcx.sess.delay_span_bug(span, &msg)\n+                            }\n+                        }\n+                        PatKind::Wild\n                     }\n-                    PatKind::Constant { value: cv }\n                 }\n                 // All other references are converted into deref patterns and then recursively\n                 // convert the dereferenced constant to a pattern that is the sub-pattern of the"}, {"sha": "632335c841e3a51239a5f7662468d0de78a00b02", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "patch": "@@ -10,8 +10,6 @@ fn main() {\n     match C {\n         C => {}\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN must be annotated\n-        //~| WARN previously accepted\n     }\n     const K: &T = &T;\n     match K {"}, {"sha": "699b4a5e200e41311cfaabfdde075b812b89098e", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da217644a1e6fdf97ea745d5f3bc527477e4a3f6/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=da217644a1e6fdf97ea745d5f3bc527477e4a3f6", "patch": "@@ -1,18 +1,8 @@\n-warning: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match_ice.rs:11:9\n-   |\n-LL |         C => {}\n-   |         ^\n-   |\n-   = note: `#[warn(indirect_structural_match)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n-\n error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/match_ice.rs:11:9\n    |\n LL |         C => {}\n    |         ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}]}