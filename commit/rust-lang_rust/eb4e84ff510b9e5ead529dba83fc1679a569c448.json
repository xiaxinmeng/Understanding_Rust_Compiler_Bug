{"sha": "eb4e84ff510b9e5ead529dba83fc1679a569c448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGU4NGZmNTEwYjllNWVhZDUyOWRiYTgzZmMxNjc5YTU2OWM0NDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-02T17:12:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-02T17:12:08Z"}, "message": "Merge #6441\n\n6441: Coalesce prime_caches updates r=matklad a=jonas-schievink\n\nThis reduces the number of progress bar updates we send to the client by collapsing subsequent updates into one. This doesn't work as well as I'd hoped (which is that we end up sending *no* updates, or only `start` and `end`, when the cache is already fresh), but it does reduce the number considerably: instead of ~720 updates on the rust-analyzer codebase, we now only send ~60.\r\n\r\nIt uses the same approach that is already in use for coalescing VFS events.\r\n\r\nHopefully this is enough to fix https://github.com/rust-analyzer/rust-analyzer/issues/6413.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "f39809991b96a63e43c8bab5b8a0a0479e97293c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39809991b96a63e43c8bab5b8a0a0479e97293c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4e84ff510b9e5ead529dba83fc1679a569c448", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoD3oCRBK7hj4Ov3rIwAAdHIIAIGOWFaYS/jEfJRaQNbtUUt0\nUEhIJbE+HQR2oXuzmbpuJQrQ4QsTTCZPLaIZqiY5z8XW/FdO4Y5Sl7xwUQOmBvxq\nm9z22RYadO2dLoshz1NFDTP+DQSS+61JLbzIPkhCOmR5PAv7EZCY0THl4IECbxbX\n4HbH2uHeHNbd21fdxbldGa5U58i7FrqxZ3p+dRMghfDSTE+VoHzP0Y2r3sIDpc7D\n4uC3pPDSFv5dEOA9rGrO6q5ZxSuE9dDGuFO72JBR2s92zlH+HSDItV2QWb/bQpHI\nqKgta3VlSbFE7g3F9Vpm50NpS1HJIE5v4ARoCsmCBIccyMGPB51uc6PJl3aNKxQ=\n=wVgh\n-----END PGP SIGNATURE-----\n", "payload": "tree f39809991b96a63e43c8bab5b8a0a0479e97293c\nparent 4e80002aceadcff666f800d8bea7bd6e3d977946\nparent a968cb6aef24179e0c0a7f3d261fbec14e2c00d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604337128 +0000\ncommitter GitHub <noreply@github.com> 1604337128 +0000\n\nMerge #6441\n\n6441: Coalesce prime_caches updates r=matklad a=jonas-schievink\n\nThis reduces the number of progress bar updates we send to the client by collapsing subsequent updates into one. This doesn't work as well as I'd hoped (which is that we end up sending *no* updates, or only `start` and `end`, when the cache is already fresh), but it does reduce the number considerably: instead of ~720 updates on the rust-analyzer codebase, we now only send ~60.\r\n\r\nIt uses the same approach that is already in use for coalescing VFS events.\r\n\r\nHopefully this is enough to fix https://github.com/rust-analyzer/rust-analyzer/issues/6413.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e84ff510b9e5ead529dba83fc1679a569c448", "html_url": "https://github.com/rust-lang/rust/commit/eb4e84ff510b9e5ead529dba83fc1679a569c448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e84ff510b9e5ead529dba83fc1679a569c448/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e80002aceadcff666f800d8bea7bd6e3d977946", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e80002aceadcff666f800d8bea7bd6e3d977946", "html_url": "https://github.com/rust-lang/rust/commit/4e80002aceadcff666f800d8bea7bd6e3d977946"}, {"sha": "a968cb6aef24179e0c0a7f3d261fbec14e2c00d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a968cb6aef24179e0c0a7f3d261fbec14e2c00d7", "html_url": "https://github.com/rust-lang/rust/commit/a968cb6aef24179e0c0a7f3d261fbec14e2c00d7"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "4ab5bc6eb2b92f2b3691e1ccad11e1a869083f8c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eb4e84ff510b9e5ead529dba83fc1679a569c448/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4e84ff510b9e5ead529dba83fc1679a569c448/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=eb4e84ff510b9e5ead529dba83fc1679a569c448", "patch": "@@ -190,15 +190,35 @@ impl GlobalState {\n                 }\n                 lsp_server::Message::Response(resp) => self.complete_request(resp),\n             },\n-            Event::Task(task) => match task {\n-                Task::Response(response) => self.respond(response),\n-                Task::Diagnostics(diagnostics_per_file) => {\n-                    for (file_id, diagnostics) in diagnostics_per_file {\n-                        self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n+            Event::Task(mut task) => {\n+                let _p = profile::span(\"GlobalState::handle_event/task\");\n+                let mut prime_caches_started = false;\n+                let mut prime_caches_progress = None;\n+                loop {\n+                    match task {\n+                        Task::Response(response) => self.respond(response),\n+                        Task::Diagnostics(diagnostics_per_file) => {\n+                            for (file_id, diagnostics) in diagnostics_per_file {\n+                                self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n+                            }\n+                        }\n+                        Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n+                        Task::PrimeCaches(progress) => {\n+                            if let PrimeCachesProgress::Started = progress {\n+                                prime_caches_started = true;\n+                            }\n+\n+                            prime_caches_progress = Some(progress);\n+                        }\n                     }\n+                    // Coalesce multiple task events into one loop turn\n+                    task = match self.task_pool.receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n+                    };\n                 }\n-                Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n-                Task::PrimeCaches(progress) => {\n+\n+                if let Some(progress) = prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n                         PrimeCachesProgress::Started => {\n@@ -218,9 +238,14 @@ impl GlobalState {\n                         }\n                     };\n \n-                    self.report_progress(\"indexing\", state, message, Some(fraction));\n+                    if state != Progress::Begin && prime_caches_started {\n+                        // Progress indicator needs to be created first.\n+                        self.report_progress(\"indexing\", Progress::Begin, None, Some(0.0));\n+                    }\n+\n+                    self.report_progress(\"indexing\", state, message.clone(), Some(fraction));\n                 }\n-            },\n+            }\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n                 loop {"}]}