{"sha": "5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "node_id": "C_kwDOAAsO6NoAKDVjY2RmMWY2Zjc2NTEwMDFlM2IxNWY0OGM2ZjJlNWQwYjU2YWNjZjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-18T15:44:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-18T15:44:42Z"}, "message": "Rollup merge of #98839 - 5225225:assert_transmute_copy_size, r=thomcc\n\nAdd assertion that `transmute_copy`'s U is not larger than T\n\nThis is called out as a safety requirement in the docs, but because knowing this can be done at compile time and constant folded (just like the `align_of` branch is removed), we can just panic here.\n\nI've looked at the asm (using `cargo-asm`) of a function that both is correct and incorrect, and the panic is completely removed, or is unconditional, without needing build-std.\n\nI don't expect this to cause much breakage in the wild. I scanned through https://miri.saethlin.dev/ub for issues that would look like this (error: Undefined Behavior: memory access failed: alloc1768 has size 1, so pointer to 8 bytes starting at offset 0 is out-of-bounds), but couldn't find any.\n\nThat doesn't rule out it happening in crates tested that fail earlier for some other reason, though, but it indicates that doing this is rare, if it happens at all. A crater run for this would need to be build and test, since this is a runtime thing.\n\nAlso added a few more transmute_copy tests.", "tree": {"sha": "d315a2bd57df63d802a1eafc64ef07d98c2fb765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d315a2bd57df63d802a1eafc64ef07d98c2fb765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1X/qCRBK7hj4Ov3rIwAAp14IAEXkvd7r4KIuIbuHvFvFuEAg\nofYFNTpp+24KHMRt/ktAs89AGRrbwZMGuFyojc5toklyLvgFvGmNM120T+Wy4io2\nUniqs2Xwsov6EJRoGZ5E2mhmWvZccfFnSg1Hxjn+VHHAY11U0hI6Xe8YbtOOoW/l\n4nt46pB4ISLcvl4ZlVFSpWPouP6P0WidG1dEVIQ3VVTYIsBPf4fDNTszTVVcybgY\nrIvd0/7dc1RZMJlRc5zdC7FHbiDiYA5GHDyJx9awVE0zAc+8QgaKU77HaOSJOHKt\nBndN2IbU9DHVhtppC53ZL8Lc31XonANSd9cNuaULZDJ3dNbQYd90Psn+XfaHRbE=\n=WOlr\n-----END PGP SIGNATURE-----\n", "payload": "tree d315a2bd57df63d802a1eafc64ef07d98c2fb765\nparent 9ed0bf9f2bd63933785fb8a380c177d2d70e88ec\nparent 5f5ca889589c24a12864329c027db431adbc7fae\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658159082 +0530\ncommitter GitHub <noreply@github.com> 1658159082 +0530\n\nRollup merge of #98839 - 5225225:assert_transmute_copy_size, r=thomcc\n\nAdd assertion that `transmute_copy`'s U is not larger than T\n\nThis is called out as a safety requirement in the docs, but because knowing this can be done at compile time and constant folded (just like the `align_of` branch is removed), we can just panic here.\n\nI've looked at the asm (using `cargo-asm`) of a function that both is correct and incorrect, and the panic is completely removed, or is unconditional, without needing build-std.\n\nI don't expect this to cause much breakage in the wild. I scanned through https://miri.saethlin.dev/ub for issues that would look like this (error: Undefined Behavior: memory access failed: alloc1768 has size 1, so pointer to 8 bytes starting at offset 0 is out-of-bounds), but couldn't find any.\n\nThat doesn't rule out it happening in crates tested that fail earlier for some other reason, though, but it indicates that doing this is rare, if it happens at all. A crater run for this would need to be build and test, since this is a runtime thing.\n\nAlso added a few more transmute_copy tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "html_url": "https://github.com/rust-lang/rust/commit/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed0bf9f2bd63933785fb8a380c177d2d70e88ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed0bf9f2bd63933785fb8a380c177d2d70e88ec", "html_url": "https://github.com/rust-lang/rust/commit/9ed0bf9f2bd63933785fb8a380c177d2d70e88ec"}, {"sha": "5f5ca889589c24a12864329c027db431adbc7fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ca889589c24a12864329c027db431adbc7fae", "html_url": "https://github.com/rust-lang/rust/commit/5f5ca889589c24a12864329c027db431adbc7fae"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "66af491607435f1d2d72c47fee787376c585237a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "patch": "@@ -1040,6 +1040,8 @@ pub fn copy<T: Copy>(x: &T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    assert!(size_of::<T>() >= size_of::<U>(), \"cannot transmute_copy if U is larger than T\");\n+\n     // If U has a higher alignment requirement, src might not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads."}, {"sha": "6856d1a1f51aeee2062c1ff4a6286116a42da783", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "patch": "@@ -97,6 +97,46 @@ fn test_transmute_copy() {\n     assert_eq!(1, unsafe { transmute_copy(&1) });\n }\n \n+#[test]\n+fn test_transmute_copy_shrink() {\n+    assert_eq!(0_u8, unsafe { transmute_copy(&0_u64) });\n+}\n+\n+#[test]\n+fn test_transmute_copy_unaligned() {\n+    #[repr(C)]\n+    #[derive(Default)]\n+    struct Unaligned {\n+        a: u8,\n+        b: [u8; 8],\n+    }\n+\n+    let u = Unaligned::default();\n+    assert_eq!(0_u64, unsafe { transmute_copy(&u.b) });\n+}\n+\n+#[test]\n+#[cfg(panic = \"unwind\")]\n+fn test_transmute_copy_grow_panics() {\n+    use std::panic;\n+\n+    let err = panic::catch_unwind(panic::AssertUnwindSafe(|| unsafe {\n+        let _unused: u64 = transmute_copy(&1_u8);\n+    }));\n+\n+    match err {\n+        Ok(_) => unreachable!(),\n+        Err(payload) => {\n+            payload\n+                .downcast::<&'static str>()\n+                .and_then(|s| {\n+                    if *s == \"cannot transmute_copy if U is larger than T\" { Ok(s) } else { Err(s) }\n+                })\n+                .unwrap_or_else(|p| panic::resume_unwind(p));\n+        }\n+    }\n+}\n+\n #[test]\n #[allow(dead_code)]\n fn test_discriminant_send_sync() {"}]}