{"sha": "e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "node_id": "C_kwDOAAsO6NoAKGU1OWNkYTllZTFiOWZhYjNmZTk2NmVhN2U0YjEyYzE0YjFmODU3ODk", "commit": {"author": {"name": "Erin Petra Sofiya Moon", "email": "emoon@starry.com", "date": "2022-02-14T19:21:43Z"}, "committer": {"name": "Erin Petra Sofiya Moon", "email": "emoon@starry.com", "date": "2022-02-14T20:11:38Z"}, "message": "suggest using raw string literals when invalid escapes appear\n\ni'd guess about 70% of \"bad escape\" cases occur when someone meant to\nuse a raw string literal because they're passing it directly to\nRegex::new(). this emits an advisory (Applicability::MaybeIncorrect)\nhelp: suggestion to the user that they use an r\"\" string,\non top of the normal notes about looking at the\nstring literal documentation/spec.", "tree": {"sha": "a731617118a0361d343c6e7d9c48f84416cc3f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a731617118a0361d343c6e7d9c48f84416cc3f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcIRSNMsJm4sM3h6bDI6PxUD/+X0FAmIKt3sACgkQDI6PxUD/\n+X1/9RAAsUogdNlWZn8ocN4f0v1BGa8vOYFVgTPLuo7bktR9NbCEpIQQkleIV6OY\n0kNrgRD9PeuDXyByI78dEwZqH5qV90ii+9G4zgJn64t+4HUJoslBF94iKxlrTN7g\nWnuv9Dw6ZedBh6Mge1p7JYRYw6GSJMM2KljVNceJgolDhFGmRMV+3iNYbWeWJDTd\n3X+UnX5uDvq1i3M0q1yRRqYEmuFFIBs1ycigEPtc952pA5nS941ZQ2IDAAuEea4R\nnwnUX/GY35evMuq0dXX/pAILmB5i6NKUVgQzkc8A+VbtkNZv98PXtJ5oei410/xz\ncsx9IYQ8qHWMnUrsbEDiMXDiaAzCvexwknV8MqaukQdDTg045SxLMVWMReqHqG+/\n1mgm3BwhKbFsxvt9S5PpNTiIgqg3TgL5KKqAreQw6VjLH9CasMG+OIM3y763ufZA\nSiBZI9G45Juy+NOQpUSbSwg8E/rEf1Rz1K3GaO0YXqUUl+QkLz5d42/oMK42XYB0\n3pgsgUbiuZ+AujOtA9X6cliDLj7GjcrmXADFgyqFJDLppdD4fqKZUvEdWoF8iedZ\nPSyE0CSq5tE8VN52Kj2UiTcQAdWBnUP55A36910IR/Q31YJHvDrm7p/QNd+pKTFj\n6SfrUFzBxG+9mmMi01D6TF6X0iN7C4FCf1Y6itwU7qFscZVAeBE=\n=9RHj\n-----END PGP SIGNATURE-----", "payload": "tree a731617118a0361d343c6e7d9c48f84416cc3f33\nparent 52dd59ed2154f4158ae37e6994b678a6249a7bb0\nauthor Erin Petra Sofiya Moon <emoon@starry.com> 1644866503 -0500\ncommitter Erin Petra Sofiya Moon <emoon@starry.com> 1644869498 -0500\n\nsuggest using raw string literals when invalid escapes appear\n\ni'd guess about 70% of \"bad escape\" cases occur when someone meant to\nuse a raw string literal because they're passing it directly to\nRegex::new(). this emits an advisory (Applicability::MaybeIncorrect)\nhelp: suggestion to the user that they use an r\"\" string,\non top of the normal notes about looking at the\nstring literal documentation/spec.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "html_url": "https://github.com/rust-lang/rust/commit/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/comments", "author": {"login": "barzamin", "id": 20133857, "node_id": "MDQ6VXNlcjIwMTMzODU3", "avatar_url": "https://avatars.githubusercontent.com/u/20133857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barzamin", "html_url": "https://github.com/barzamin", "followers_url": "https://api.github.com/users/barzamin/followers", "following_url": "https://api.github.com/users/barzamin/following{/other_user}", "gists_url": "https://api.github.com/users/barzamin/gists{/gist_id}", "starred_url": "https://api.github.com/users/barzamin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barzamin/subscriptions", "organizations_url": "https://api.github.com/users/barzamin/orgs", "repos_url": "https://api.github.com/users/barzamin/repos", "events_url": "https://api.github.com/users/barzamin/events{/privacy}", "received_events_url": "https://api.github.com/users/barzamin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barzamin", "id": 20133857, "node_id": "MDQ6VXNlcjIwMTMzODU3", "avatar_url": "https://avatars.githubusercontent.com/u/20133857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barzamin", "html_url": "https://github.com/barzamin", "followers_url": "https://api.github.com/users/barzamin/followers", "following_url": "https://api.github.com/users/barzamin/following{/other_user}", "gists_url": "https://api.github.com/users/barzamin/gists{/gist_id}", "starred_url": "https://api.github.com/users/barzamin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barzamin/subscriptions", "organizations_url": "https://api.github.com/users/barzamin/orgs", "repos_url": "https://api.github.com/users/barzamin/repos", "events_url": "https://api.github.com/users/barzamin/events{/privacy}", "received_events_url": "https://api.github.com/users/barzamin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dd59ed2154f4158ae37e6994b678a6249a7bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/52dd59ed2154f4158ae37e6994b678a6249a7bb0"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "a41956c58f005af4b4a6c0ce43df5fc784094c3c", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "patch": "@@ -185,6 +185,15 @@ pub(crate) fn emit_unescape_error(\n                      version control settings\",\n                 );\n             } else {\n+                if !mode.is_bytes() {\n+                    diag.span_suggestion(\n+                        span_with_quotes,\n+                        \"if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\",\n+                        format!(\"r\\\"{}\\\"\", lit),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+\n                 diag.help(\n                     \"for more information, visit \\\n                      <https://static.rust-lang.org/doc/master/reference.html#literals>\","}, {"sha": "e6ff1f662bde9c9b85cd6ee359854cc865f640e9", "filename": "src/test/ui/lexer/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr?ref=e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "patch": "@@ -17,6 +17,10 @@ LL |     '\\\u25cf'\n    |       ^ unknown character escape\n    |\n    = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     r\"\\\u25cf\"\n+   |     ~~~~~\n \n error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:14:7\n@@ -25,6 +29,10 @@ LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n    |\n    = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     r\"\\\u25cf\"\n+   |     ~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "978b92cbcd2116c761daf66dd0a2045180536812", "filename": "src/test/ui/parser/bad-escape-suggest-raw-string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs?ref=e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let ok = r\"ab\\[c\";\n+    let bad = \"ab\\[c\";\n+    //~^ ERROR unknown character escape: `[`\n+    //~| HELP for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+    //~| HELP if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+}"}, {"sha": "fc34bd3281af5bae4a1331cdd50728623612467a", "filename": "src/test/ui/parser/bad-escape-suggest-raw-string.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr?ref=e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "patch": "@@ -0,0 +1,14 @@\n+error: unknown character escape: `[`\n+  --> $DIR/bad-escape-suggest-raw-string.rs:3:19\n+   |\n+LL |     let bad = \"ab\\[c\";\n+   |                   ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     let bad = r\"ab\\[c\";\n+   |               ~~~~~~~~\n+\n+error: aborting due to previous error\n+"}]}