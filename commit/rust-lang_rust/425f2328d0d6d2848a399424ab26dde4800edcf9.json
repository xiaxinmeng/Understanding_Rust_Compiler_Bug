{"sha": "425f2328d0d6d2848a399424ab26dde4800edcf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNWYyMzI4ZDBkNmQyODQ4YTM5OTQyNGFiMjZkZGU0ODAwZWRjZjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T18:56:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T18:56:57Z"}, "message": "rollup merge of #21754: semarie/openbsd-rebased\n\nHi.\n\nHere a commit in order to add OpenBSD support to rust.\n\n- tests status:\nrun-pass: test result: ok. 1879 passed; 0 failed; 24 ignored; 0 measured\nrun-fail: test result: ok. 81 passed; 0 failed; 5 ignored; 0 measured\ncompile-fail: test result: ok. 1634 passed; 0 failed; 22 ignored; 0 measured\nrun-pass-fulldeps: test result: ok. 22 passed; 0 failed; 1 ignored; 0 measured\ncompile-fail-fulldeps: test result: ok. 13 passed; 0 failed; 0 ignored; 0 measured\n\n- The current implementation of load_self function (src/libstd/sys/unix/os.rs) isn't optimal as under OpenBSD I haven't found a reliable method to get the filename of a running process. The current implementation is enought for bootstrapping purpose.\n\n- I have disable `run-pass/tcp-stress.rs` test under openbsd. When run manually, the test pass, but when run under `compiletest`, it timeout and echo continuoulsy `Too many open files`.\n\n- For building with jemalloc, a more recent version of jemalloc would be mandatory. See https://github.com/jemalloc/jemalloc/pull/188 for more details.", "tree": {"sha": "638cfb61a5f646ee6693586a3b4cadec20ec8cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638cfb61a5f646ee6693586a3b4cadec20ec8cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/425f2328d0d6d2848a399424ab26dde4800edcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/425f2328d0d6d2848a399424ab26dde4800edcf9", "html_url": "https://github.com/rust-lang/rust/commit/425f2328d0d6d2848a399424ab26dde4800edcf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/425f2328d0d6d2848a399424ab26dde4800edcf9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9529ab0e7e469940db890604060c073179db8464", "url": "https://api.github.com/repos/rust-lang/rust/commits/9529ab0e7e469940db890604060c073179db8464", "html_url": "https://github.com/rust-lang/rust/commit/9529ab0e7e469940db890604060c073179db8464"}, {"sha": "f6414b0187bfc6e5b563a17c85a9f790d6257551", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6414b0187bfc6e5b563a17c85a9f790d6257551", "html_url": "https://github.com/rust-lang/rust/commit/f6414b0187bfc6e5b563a17c85a9f790d6257551"}], "stats": {"total": 1207, "additions": 1074, "deletions": 133}, "files": [{"sha": "2127f2c656d03bf8797bee7547d12850efac865a", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -374,6 +374,10 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=unknown-dragonfly\n         ;;\n \n+    OpenBSD)\n+\tCFG_OSTYPE=unknown-openbsd\n+       ;;\n+\n     Darwin)\n         CFG_OSTYPE=apple-darwin\n         ;;"}, {"sha": "582d75c3eaf09dba7313d4f91336b11490746c37", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -0,0 +1,26 @@\n+# x86_64-pc-openbsd-elf configuration\n+CC_x86_64-unknown-openbsd=$(CC)\n+CXX_x86_64-unknown-openbsd=$(CXX)\n+CPP_x86_64-unknown-openbsd=$(CPP)\n+AR_x86_64-unknown-openbsd=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-openbsd=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-openbsd=lib$(1).a\n+CFG_LIB_GLOB_x86_64-unknown-openbsd=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-openbsd=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_x86_64-unknown-openbsd := -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd := -Wall -Werror -g -fPIC -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-openbsd := -shared -fPIC -g -pthread -m64\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-openbsd := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-openbsd := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_x86_64-unknown-openbsd := .bsd.def\n+CFG_LLC_FLAGS_x86_64-unknown-openbsd :=\n+CFG_INSTALL_NAME_x86_64-unknown-openbsd =\n+CFG_EXE_SUFFIX_x86_64-unknown-openbsd :=\n+CFG_WINDOWSY_x86_64-unknown-openbsd :=\n+CFG_UNIXY_x86_64-unknown-openbsd := 1\n+CFG_PATH_MUNGE_x86_64-unknown-openbsd :=\n+CFG_LDPATH_x86_64-unknown-openbsd :=\n+CFG_RUN_x86_64-unknown-openbsd=$(2)\n+CFG_RUN_TARG_x86_64-unknown-openbsd=$(call CFG_RUN_x86_64-unknown-openbsd,,$(2))\n+CFG_GNU_TRIPLE_x86_64-unknown-openbsd := x86_64-unknown-openbsd"}, {"sha": "533ff9d2676f51b5cf98ee56f7f129c4c5cae96b", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -23,6 +23,7 @@ static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"linux\", \"linux\"),\n     (\"freebsd\", \"freebsd\"),\n     (\"dragonfly\", \"dragonfly\"),\n+    (\"openbsd\", \"openbsd\"),\n ];\n \n pub fn get_os(triple: &str) -> &'static str {"}, {"sha": "fd65393897bc44a720e68a434e613ea38bd1bb1e", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -2197,7 +2197,8 @@ The following configurations must be defined by the implementation:\n   `\"unix\"` or `\"windows\"`. The value of this configuration option is defined\n   as a configuration itself, like `unix` or `windows`.\n * `target_os = \"...\"`. Operating system of the target, examples include\n-  `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"`, `\"freebsd\"` or `\"dragonfly\"`.\n+  `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"`, `\"freebsd\"`, `\"dragonfly\"` or\n+  `\"openbsd\"`.\n * `target_word_size = \"...\"`. Target word size in bits. This is set to `\"32\"`\n   for targets with 32-bit pointers, and likewise set to `\"64\"` for 64-bit\n   pointers."}, {"sha": "b506aff94e7209372ba7197874cef1109fec0a21", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -18,7 +18,7 @@ LIB_PREFIX=lib\n \n OS=`uname -s`\n case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\")\n+    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"OpenBSD\")\n     BIN_SUF=\n     LIB_SUF=.so\n     ;;"}, {"sha": "264af5f9854cc81c5ec73306167840aab1187807", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2011-2014 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2011-2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -46,6 +46,7 @@ def scrub(b):\n         \"winnt\": [\"bin/rustc.exe\"],\n         \"freebsd\": [\"bin/rustc\"],\n         \"dragonfly\": [\"bin/rustc\"],\n+        \"openbsd\": [\"bin/rustc\"],\n         }\n \n winnt_runtime_deps_32 = [\"libgcc_s_dw2-1.dll\", \"libstdc++-6.dll\"]\n@@ -100,6 +101,8 @@ def get_kernel(triple):\n         return \"freebsd\"\n     if os_name == \"dragonfly\":\n         return \"dragonfly\"\n+    if os_name == \"openbsd\":\n+        return \"openbsd\"\n     return \"linux\"\n \n "}, {"sha": "14a9fd4f452793a1a5ffb1607fc8f00fc3a9aa40", "filename": "src/libbacktrace/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibbacktrace%2Fconfigure", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -9332,7 +9332,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       ;;\n \n     # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n-    freebsd* | dragonfly*)\n+    freebsd* | dragonfly* | openbsd*)\n       archive_cmds='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n       hardcode_libdir_flag_spec='-R$libdir'\n       hardcode_direct=yes"}, {"sha": "75867eb38be652236a86bc3a103d28f5c2e34aef", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 673, "deletions": 40, "changes": 713, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -280,7 +280,8 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -290,7 +291,7 @@ pub use types::os::arch::extra::{sockaddr_ll};\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use consts::os::extra::{AF_PACKET};\n \n-#[cfg(all(unix, not(target_os = \"freebsd\")))]\n+#[cfg(all(unix, not(any(target_os = \"freebsd\", target_os = \"openbsd\"))))]\n pub use consts::os::extra::{MAP_STACK};\n \n #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n@@ -1326,6 +1327,233 @@ pub mod types {\n         }\n     }\n \n+    #[cfg(target_os = \"openbsd\")]\n+    pub mod os {\n+        pub mod common {\n+            pub mod posix01 {\n+                use types::common::c95::{c_void};\n+                use types::os::arch::c95::{c_char, c_int, size_t,\n+                                                 time_t, suseconds_t, c_long};\n+                use types::os::arch::c99::{uintptr_t};\n+\n+                pub type pthread_t = uintptr_t;\n+\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct glob_t {\n+                    pub gl_pathc:  c_int,\n+                    pub __unused1: c_int,\n+                    pub gl_offs:   c_int,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  *mut *mut c_char,\n+\n+                    pub __unused3: *mut c_void,\n+\n+                    pub __unused4: *mut c_void,\n+                    pub __unused5: *mut c_void,\n+                    pub __unused6: *mut c_void,\n+                    pub __unused7: *mut c_void,\n+                    pub __unused8: *mut c_void,\n+                    pub __unused9: *mut c_void,\n+                }\n+\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct timeval {\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n+                }\n+\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct timespec {\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n+                }\n+\n+                #[derive(Copy)] pub enum timezone {}\n+\n+                pub type sighandler_t = size_t;\n+            }\n+            pub mod bsd44 {\n+                use types::common::c95::{c_void};\n+                use types::os::arch::c95::{c_char, c_int, c_uint};\n+\n+                pub type socklen_t = u32;\n+                pub type sa_family_t = u8;\n+                pub type in_port_t = u16;\n+                pub type in_addr_t = u32;\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct sockaddr {\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8; 14],\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct sockaddr_storage {\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8; 6],\n+                    pub __ss_pad2: i64,\n+                    pub __ss_pad3: [u8; 240],\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct sockaddr_in {\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8; 8],\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct in_addr {\n+                    pub s_addr: in_addr_t,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct in6_addr {\n+                    pub s6_addr: [u16; 8]\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct ip_mreq {\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct ip6_mreq {\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct addrinfo {\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_addr: *mut sockaddr,\n+                    pub ai_canonname: *mut c_char,\n+                    pub ai_next: *mut addrinfo,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct sockaddr_un {\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char; 104]\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct ifaddrs {\n+                    pub ifa_next: *mut ifaddrs,\n+                    pub ifa_name: *mut c_char,\n+                    pub ifa_flags: c_uint,\n+                    pub ifa_addr: *mut sockaddr,\n+                    pub ifa_netmask: *mut sockaddr,\n+                    pub ifa_dstaddr: *mut sockaddr,\n+                    pub ifa_data: *mut c_void\n+                }\n+\n+            }\n+        }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i64;\n+                pub type c_ulong = u64;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = i64;\n+                pub type time_t = i64;\n+                pub type suseconds_t = i64;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = i64;\n+                pub type uintptr_t = u64;\n+                pub type intmax_t = i64;\n+                pub type uintmax_t = u64;\n+            }\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = u32;\n+                pub type ino_t = u64;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u32;\n+                pub type ssize_t = i64;\n+            }\n+            pub mod posix01 {\n+                use types::common::c95::{c_void};\n+                use types::common::c99::{uint32_t, uint64_t};\n+                use types::os::arch::c95::{c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n+\n+                pub type nlink_t = u32;\n+                pub type blksize_t = uint32_t;\n+                pub type ino_t = uint64_t;\n+                pub type blkcnt_t = i64;\n+                pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n+\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct stat {\n+                    pub st_mode: mode_t,\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                }\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct utimbuf {\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n+                }\n+\n+                pub type pthread_attr_t = *mut c_void;\n+            }\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n+            }\n+        }\n+    }\n+\n     #[cfg(target_os = \"windows\")]\n     pub mod os {\n         pub mod common {\n@@ -3254,7 +3482,8 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3663,7 +3892,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+    #[cfg(target_os = \"openbsd\")]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3751,14 +3980,11 @@ pub mod consts {\n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;\n \n+            pub const MS_SYNC : c_int = 0x0002; // changed\n             pub const MS_ASYNC : c_int = 0x0001;\n-            pub const MS_INVALIDATE : c_int = 0x0002;\n-            pub const MS_SYNC : c_int = 0x0010;\n-\n-            pub const MS_KILLPAGES : c_int = 0x0004;\n-            pub const MS_DEACTIVATE : c_int = 0x0008;\n+            pub const MS_INVALIDATE : c_int = 0x0004; // changed\n \n-            pub const EPERM : c_int = 1;\n+            pub const EPERM : c_int = 1; // not checked\n             pub const ENOENT : c_int = 2;\n             pub const ESRCH : c_int = 3;\n             pub const EINTR : c_int = 4;\n@@ -3793,7 +4019,7 @@ pub mod consts {\n             pub const EDOM : c_int = 33;\n             pub const ERANGE : c_int = 34;\n             pub const EAGAIN : c_int = 35;\n-            pub const EWOULDBLOCK : c_int = EAGAIN;\n+            pub const EWOULDBLOCK : c_int = 35;\n             pub const EINPROGRESS : c_int = 36;\n             pub const EALREADY : c_int = 37;\n             pub const ENOTSOCK : c_int = 38;\n@@ -3803,7 +4029,7 @@ pub mod consts {\n             pub const ENOPROTOOPT : c_int = 42;\n             pub const EPROTONOSUPPORT : c_int = 43;\n             pub const ESOCKTNOSUPPORT : c_int = 44;\n-            pub const ENOTSUP : c_int = 45;\n+            pub const EOPNOTSUPP : c_int = 45;\n             pub const EPFNOSUPPORT : c_int = 46;\n             pub const EAFNOSUPPORT : c_int = 47;\n             pub const EADDRINUSE : c_int = 48;\n@@ -3840,30 +4066,428 @@ pub mod consts {\n             pub const EFTYPE : c_int = 79;\n             pub const EAUTH : c_int = 80;\n             pub const ENEEDAUTH : c_int = 81;\n-            pub const EPWROFF : c_int = 82;\n-            pub const EDEVERR : c_int = 83;\n+            pub const EIDRM : c_int = 82;\n+            pub const ENOMSG : c_int = 83;\n             pub const EOVERFLOW : c_int = 84;\n-            pub const EBADEXEC : c_int = 85;\n-            pub const EBADARCH : c_int = 86;\n-            pub const ESHLIBVERS : c_int = 87;\n-            pub const EBADMACHO : c_int = 88;\n-            pub const ECANCELED : c_int = 89;\n-            pub const EIDRM : c_int = 90;\n-            pub const ENOMSG : c_int = 91;\n-            pub const EILSEQ : c_int = 92;\n-            pub const ENOATTR : c_int = 93;\n-            pub const EBADMSG : c_int = 94;\n-            pub const EMULTIHOP : c_int = 95;\n-            pub const ENODATA : c_int = 96;\n-            pub const ENOLINK : c_int = 97;\n-            pub const ENOSR : c_int = 98;\n-            pub const ENOSTR : c_int = 99;\n-            pub const EPROTO : c_int = 100;\n-            pub const ETIME : c_int = 101;\n-            pub const EOPNOTSUPP : c_int = 102;\n-            pub const ENOPOLICY : c_int = 103;\n-            pub const ENOTRECOVERABLE : c_int = 104;\n-            pub const EOWNERDEAD : c_int = 105;\n+            pub const ECANCELED : c_int = 85;\n+            pub const EILSEQ : c_int = 86;\n+            pub const ENOATTR : c_int = 87;\n+            pub const EDOOFUS : c_int = 88;\n+            pub const EBADMSG : c_int = 89;\n+            pub const EMULTIHOP : c_int = 90;\n+            pub const ENOLINK : c_int = 91;\n+            pub const EPROTO : c_int = 92;\n+            pub const ENOMEDIUM : c_int = 93;\n+            pub const EUNUSED94 : c_int = 94;\n+            pub const EUNUSED95 : c_int = 95;\n+            pub const EUNUSED96 : c_int = 96;\n+            pub const EUNUSED97 : c_int = 97;\n+            pub const EUNUSED98 : c_int = 98;\n+            pub const EASYNC : c_int = 99;\n+            pub const ELAST : c_int = 99;\n+        }\n+        pub mod posix01 {\n+            use types::os::arch::c95::{c_int, size_t};\n+\n+            pub const F_DUPFD : c_int = 0;\n+            pub const F_GETFD : c_int = 1;\n+            pub const F_SETFD : c_int = 2;\n+            pub const F_GETFL : c_int = 3;\n+            pub const F_SETFL : c_int = 4;\n+\n+            pub const SIGTRAP : c_int = 5;\n+            pub const SIGPIPE: c_int = 13;\n+            pub const SIG_IGN: size_t = 1;\n+\n+            pub const GLOB_APPEND   : c_int = 0x0001;\n+            pub const GLOB_DOOFFS   : c_int = 0x0002;\n+            pub const GLOB_ERR      : c_int = 0x0004;\n+            pub const GLOB_MARK     : c_int = 0x0008;\n+            pub const GLOB_NOCHECK  : c_int = 0x0010;\n+            pub const GLOB_NOSORT   : c_int = 0x0020;\n+            pub const GLOB_NOESCAPE : c_int = 0x1000; // changed\n+\n+            pub const GLOB_NOSPACE  : c_int = -1;\n+            pub const GLOB_ABORTED  : c_int = -2;\n+            pub const GLOB_NOMATCH  : c_int = -3;\n+\n+            pub const POSIX_MADV_NORMAL : c_int = 0;\n+            pub const POSIX_MADV_RANDOM : c_int = 1;\n+            pub const POSIX_MADV_SEQUENTIAL : c_int = 2;\n+            pub const POSIX_MADV_WILLNEED : c_int = 3;\n+            pub const POSIX_MADV_DONTNEED : c_int = 4;\n+\n+            pub const _SC_IOV_MAX : c_int = 51; // all changed...\n+            pub const _SC_GETGR_R_SIZE_MAX : c_int = 100;\n+            pub const _SC_GETPW_R_SIZE_MAX : c_int = 101;\n+            pub const _SC_LOGIN_NAME_MAX : c_int = 102;\n+            pub const _SC_MQ_PRIO_MAX : c_int = 59;\n+            pub const _SC_THREAD_ATTR_STACKADDR : c_int = 77;\n+            pub const _SC_THREAD_ATTR_STACKSIZE : c_int = 78;\n+            pub const _SC_THREAD_DESTRUCTOR_ITERATIONS : c_int = 80;\n+            pub const _SC_THREAD_KEYS_MAX : c_int = 81;\n+            pub const _SC_THREAD_PRIO_INHERIT : c_int = 82;\n+            pub const _SC_THREAD_PRIO_PROTECT : c_int = 83;\n+            pub const _SC_THREAD_PRIORITY_SCHEDULING : c_int = 84;\n+            pub const _SC_THREAD_PROCESS_SHARED : c_int = 85;\n+            pub const _SC_THREAD_SAFE_FUNCTIONS : c_int = 103;\n+            pub const _SC_THREAD_STACK_MIN : c_int = 89;\n+            pub const _SC_THREAD_THREADS_MAX : c_int = 90;\n+            pub const _SC_THREADS : c_int = 91;\n+            pub const _SC_TTY_NAME_MAX : c_int = 107;\n+            pub const _SC_ATEXIT_MAX : c_int = 46;\n+            pub const _SC_XOPEN_CRYPT : c_int = 117;\n+            pub const _SC_XOPEN_ENH_I18N : c_int = 118;\n+            pub const _SC_XOPEN_LEGACY : c_int = 119;\n+            pub const _SC_XOPEN_REALTIME : c_int = 120;\n+            pub const _SC_XOPEN_REALTIME_THREADS : c_int = 121;\n+            pub const _SC_XOPEN_SHM : c_int = 30;\n+            pub const _SC_XOPEN_UNIX : c_int = 123;\n+            pub const _SC_XOPEN_VERSION : c_int = 125;\n+            //pub const _SC_XOPEN_XCU_VERSION : c_int = ;\n+\n+            pub const PTHREAD_CREATE_JOINABLE: c_int = 0;\n+            pub const PTHREAD_CREATE_DETACHED: c_int = 1;\n+            pub const PTHREAD_STACK_MIN: size_t = 2048;\n+\n+            pub const CLOCK_REALTIME: c_int = 0;\n+            pub const CLOCK_MONOTONIC: c_int = 3;\n+        }\n+        pub mod posix08 {\n+        }\n+        pub mod bsd44 {\n+            use types::os::arch::c95::c_int;\n+\n+            pub const MADV_NORMAL : c_int = 0;\n+            pub const MADV_RANDOM : c_int = 1;\n+            pub const MADV_SEQUENTIAL : c_int = 2;\n+            pub const MADV_WILLNEED : c_int = 3;\n+            pub const MADV_DONTNEED : c_int = 4;\n+            pub const MADV_FREE : c_int = 6; // changed\n+            //pub const MADV_NOSYNC : c_int = ;\n+            //pub const MADV_AUTOSYNC : c_int = ;\n+            //pub const MADV_NOCORE : c_int = ;\n+            //pub const MADV_CORE : c_int = ;\n+            //pub const MADV_PROTECT : c_int = ;\n+\n+            //pub const MINCORE_INCORE : c_int =  ;\n+            //pub const MINCORE_REFERENCED : c_int = ;\n+            //pub const MINCORE_MODIFIED : c_int = ;\n+            //pub const MINCORE_REFERENCED_OTHER : c_int = ;\n+            //pub const MINCORE_MODIFIED_OTHER : c_int = ;\n+            //pub const MINCORE_SUPER : c_int = ;\n+\n+            pub const AF_INET: c_int = 2;\n+            pub const AF_INET6: c_int = 24; // changed\n+            pub const AF_UNIX: c_int = 1;\n+            pub const SOCK_STREAM: c_int = 1;\n+            pub const SOCK_DGRAM: c_int = 2;\n+            pub const SOCK_RAW: c_int = 3;\n+            pub const IPPROTO_TCP: c_int = 6;\n+            pub const IPPROTO_IP: c_int = 0;\n+            pub const IPPROTO_IPV6: c_int = 41;\n+            pub const IP_MULTICAST_TTL: c_int = 10;\n+            pub const IP_MULTICAST_LOOP: c_int = 11;\n+            pub const IP_TTL: c_int = 4;\n+            pub const IP_HDRINCL: c_int = 2;\n+            pub const IP_ADD_MEMBERSHIP: c_int = 12;\n+            pub const IP_DROP_MEMBERSHIP: c_int = 13;\n+            // don't exist, keep same as IP_ADD_MEMBERSHIP\n+            pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n+            // don't exist, keep same as IP_DROP_MEMBERSHIP\n+            pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n+\n+            pub const TCP_NODELAY: c_int = 1;\n+            //pub const TCP_KEEPIDLE: c_int = ;\n+            pub const SOL_SOCKET: c_int = 0xffff;\n+            pub const SO_KEEPALIVE: c_int = 0x0008;\n+            pub const SO_BROADCAST: c_int = 0x0020;\n+            pub const SO_REUSEADDR: c_int = 0x0004;\n+            pub const SO_ERROR: c_int = 0x1007;\n+\n+            pub const IFF_LOOPBACK: c_int = 0x8;\n+\n+            pub const SHUT_RD: c_int = 0;\n+            pub const SHUT_WR: c_int = 1;\n+            pub const SHUT_RDWR: c_int = 2;\n+        }\n+        pub mod extra {\n+            use types::os::arch::c95::c_int;\n+\n+            pub const O_SYNC : c_int = 128;\n+            pub const O_NONBLOCK : c_int = 4;\n+            pub const CTL_KERN: c_int = 1;\n+            pub const KERN_PROC: c_int = 66;\n+\n+            pub const MAP_COPY : c_int = 0x0002;\n+            pub const MAP_RENAME : c_int = 0x0000; // changed\n+            pub const MAP_NORESERVE : c_int = 0x0000; // changed\n+            pub const MAP_HASSEMAPHORE : c_int = 0x0000; // changed\n+            //pub const MAP_STACK : c_int = ;\n+            //pub const MAP_NOSYNC : c_int = ;\n+            //pub const MAP_NOCORE : c_int = ;\n+\n+            pub const IPPROTO_RAW : c_int = 255;\n+        }\n+        pub mod sysconf {\n+            use types::os::arch::c95::c_int;\n+\n+            pub const _SC_ARG_MAX : c_int = 1;\n+            pub const _SC_CHILD_MAX : c_int = 2;\n+            pub const _SC_CLK_TCK : c_int = 3;\n+            pub const _SC_NGROUPS_MAX : c_int = 4;\n+            pub const _SC_OPEN_MAX : c_int = 5;\n+            pub const _SC_JOB_CONTROL : c_int = 6;\n+            pub const _SC_SAVED_IDS : c_int = 7;\n+            pub const _SC_VERSION : c_int = 8;\n+            pub const _SC_BC_BASE_MAX : c_int = 9;\n+            pub const _SC_BC_DIM_MAX : c_int = 10;\n+            pub const _SC_BC_SCALE_MAX : c_int = 11;\n+            pub const _SC_BC_STRING_MAX : c_int = 12;\n+            pub const _SC_COLL_WEIGHTS_MAX : c_int = 13;\n+            pub const _SC_EXPR_NEST_MAX : c_int = 14;\n+            pub const _SC_LINE_MAX : c_int = 15;\n+            pub const _SC_RE_DUP_MAX : c_int = 16;\n+            pub const _SC_2_VERSION : c_int = 17;\n+            pub const _SC_2_C_BIND : c_int = 18;\n+            pub const _SC_2_C_DEV : c_int = 19;\n+            pub const _SC_2_CHAR_TERM : c_int = 20;\n+            pub const _SC_2_FORT_DEV : c_int = 21;\n+            pub const _SC_2_FORT_RUN : c_int = 22;\n+            pub const _SC_2_LOCALEDEF : c_int = 23;\n+            pub const _SC_2_SW_DEV : c_int = 24;\n+            pub const _SC_2_UPE : c_int = 25;\n+            pub const _SC_STREAM_MAX : c_int = 26;\n+            pub const _SC_TZNAME_MAX : c_int = 27;\n+            pub const _SC_ASYNCHRONOUS_IO : c_int = 45; // changed...\n+            pub const _SC_MAPPED_FILES : c_int = 53;\n+            pub const _SC_MEMLOCK : c_int = 54;\n+            pub const _SC_MEMLOCK_RANGE : c_int = 55;\n+            pub const _SC_MEMORY_PROTECTION : c_int = 56;\n+            pub const _SC_MESSAGE_PASSING : c_int = 57;\n+            pub const _SC_PRIORITIZED_IO : c_int = 60;\n+            pub const _SC_PRIORITY_SCHEDULING : c_int = 61;\n+            pub const _SC_REALTIME_SIGNALS : c_int = 64;\n+            pub const _SC_SEMAPHORES : c_int = 67;\n+            pub const _SC_FSYNC : c_int = 29;\n+            pub const _SC_SHARED_MEMORY_OBJECTS : c_int = 68;\n+            pub const _SC_SYNCHRONIZED_IO : c_int = 75;\n+            pub const _SC_TIMERS : c_int = 94; // ...changed\n+            pub const _SC_AIO_LISTIO_MAX : c_int = 42;\n+            pub const _SC_AIO_MAX : c_int = 43;\n+            pub const _SC_AIO_PRIO_DELTA_MAX : c_int = 44;\n+            pub const _SC_DELAYTIMER_MAX : c_int = 50; // changed...\n+            pub const _SC_MQ_OPEN_MAX : c_int = 58;\n+            pub const _SC_PAGESIZE : c_int = 28;\n+            pub const _SC_RTSIG_MAX : c_int = 66;\n+            pub const _SC_SEM_NSEMS_MAX : c_int = 31;\n+            pub const _SC_SEM_VALUE_MAX : c_int = 32;\n+            pub const _SC_SIGQUEUE_MAX : c_int = 70;\n+            pub const _SC_TIMER_MAX : c_int = 93;\n+        }\n+    }\n+\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+    pub mod os {\n+        pub mod c95 {\n+            use types::os::arch::c95::{c_int, c_uint};\n+\n+            pub const EXIT_FAILURE : c_int = 1;\n+            pub const EXIT_SUCCESS : c_int = 0;\n+            pub const RAND_MAX : c_int = 2147483647;\n+            pub const EOF : c_int = -1;\n+            pub const SEEK_SET : c_int = 0;\n+            pub const SEEK_CUR : c_int = 1;\n+            pub const SEEK_END : c_int = 2;\n+            pub const _IOFBF : c_int = 0;\n+            pub const _IONBF : c_int = 2;\n+            pub const _IOLBF : c_int = 1;\n+            pub const BUFSIZ : c_uint = 1024_u32;\n+            pub const FOPEN_MAX : c_uint = 20_u32;\n+            pub const FILENAME_MAX : c_uint = 1024_u32;\n+            pub const L_tmpnam : c_uint = 1024_u32;\n+            pub const TMP_MAX : c_uint = 308915776_u32;\n+        }\n+        pub mod c99 {\n+        }\n+        pub mod posix88 {\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n+            use types::os::arch::posix88::mode_t;\n+\n+            pub const O_RDONLY : c_int = 0;\n+            pub const O_WRONLY : c_int = 1;\n+            pub const O_RDWR : c_int = 2;\n+            pub const O_APPEND : c_int = 8;\n+            pub const O_CREAT : c_int = 512;\n+            pub const O_EXCL : c_int = 2048;\n+            pub const O_TRUNC : c_int = 1024;\n+            pub const S_IFIFO : mode_t = 4096;\n+            pub const S_IFCHR : mode_t = 8192;\n+            pub const S_IFBLK : mode_t = 24576;\n+            pub const S_IFDIR : mode_t = 16384;\n+            pub const S_IFREG : mode_t = 32768;\n+            pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFMT : mode_t = 61440;\n+            pub const S_IEXEC : mode_t = 64;\n+            pub const S_IWRITE : mode_t = 128;\n+            pub const S_IREAD : mode_t = 256;\n+            pub const S_IRWXU : mode_t = 448;\n+            pub const S_IXUSR : mode_t = 64;\n+            pub const S_IWUSR : mode_t = 128;\n+            pub const S_IRUSR : mode_t = 256;\n+            pub const F_OK : c_int = 0;\n+            pub const R_OK : c_int = 4;\n+            pub const W_OK : c_int = 2;\n+            pub const X_OK : c_int = 1;\n+            pub const STDIN_FILENO : c_int = 0;\n+            pub const STDOUT_FILENO : c_int = 1;\n+            pub const STDERR_FILENO : c_int = 2;\n+            pub const F_LOCK : c_int = 1;\n+            pub const F_TEST : c_int = 3;\n+            pub const F_TLOCK : c_int = 2;\n+            pub const F_ULOCK : c_int = 0;\n+            pub const SIGHUP : c_int = 1;\n+            pub const SIGINT : c_int = 2;\n+            pub const SIGQUIT : c_int = 3;\n+            pub const SIGILL : c_int = 4;\n+            pub const SIGABRT : c_int = 6;\n+            pub const SIGFPE : c_int = 8;\n+            pub const SIGKILL : c_int = 9;\n+            pub const SIGSEGV : c_int = 11;\n+            pub const SIGPIPE : c_int = 13;\n+            pub const SIGALRM : c_int = 14;\n+            pub const SIGTERM : c_int = 15;\n+\n+            pub const PROT_NONE : c_int = 0;\n+            pub const PROT_READ : c_int = 1;\n+            pub const PROT_WRITE : c_int = 2;\n+            pub const PROT_EXEC : c_int = 4;\n+\n+            pub const MAP_FILE : c_int = 0x0000;\n+            pub const MAP_SHARED : c_int = 0x0001;\n+            pub const MAP_PRIVATE : c_int = 0x0002;\n+            pub const MAP_FIXED : c_int = 0x0010;\n+            pub const MAP_ANON : c_int = 0x1000;\n+\n+            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+\n+            pub const MCL_CURRENT : c_int = 0x0001;\n+            pub const MCL_FUTURE : c_int = 0x0002;\n+\n+            pub const MS_ASYNC : c_int = 0x0001;\n+            pub const MS_INVALIDATE : c_int = 0x0002;\n+            pub const MS_SYNC : c_int = 0x0010;\n+\n+            pub const MS_KILLPAGES : c_int = 0x0004;\n+            pub const MS_DEACTIVATE : c_int = 0x0008;\n+\n+            pub const EPERM : c_int = 1;\n+            pub const ENOENT : c_int = 2;\n+            pub const ESRCH : c_int = 3;\n+            pub const EINTR : c_int = 4;\n+            pub const EIO : c_int = 5;\n+            pub const ENXIO : c_int = 6;\n+            pub const E2BIG : c_int = 7;\n+            pub const ENOEXEC : c_int = 8;\n+            pub const EBADF : c_int = 9;\n+            pub const ECHILD : c_int = 10;\n+            pub const EDEADLK : c_int = 11;\n+            pub const ENOMEM : c_int = 12;\n+            pub const EACCES : c_int = 13;\n+            pub const EFAULT : c_int = 14;\n+            pub const ENOTBLK : c_int = 15;\n+            pub const EBUSY : c_int = 16;\n+            pub const EEXIST : c_int = 17;\n+            pub const EXDEV : c_int = 18;\n+            pub const ENODEV : c_int = 19;\n+            pub const ENOTDIR : c_int = 20;\n+            pub const EISDIR : c_int = 21;\n+            pub const EINVAL : c_int = 22;\n+            pub const ENFILE : c_int = 23;\n+            pub const EMFILE : c_int = 24;\n+            pub const ENOTTY : c_int = 25;\n+            pub const ETXTBSY : c_int = 26;\n+            pub const EFBIG : c_int = 27;\n+            pub const ENOSPC : c_int = 28;\n+            pub const ESPIPE : c_int = 29;\n+            pub const EROFS : c_int = 30;\n+            pub const EMLINK : c_int = 31;\n+            pub const EPIPE : c_int = 32;\n+            pub const EDOM : c_int = 33;\n+            pub const ERANGE : c_int = 34;\n+            pub const EAGAIN : c_int = 35;\n+            pub const EWOULDBLOCK : c_int = EAGAIN;\n+            pub const EINPROGRESS : c_int = 36;\n+            pub const EALREADY : c_int = 37;\n+            pub const ENOTSOCK : c_int = 38;\n+            pub const EDESTADDRREQ : c_int = 39;\n+            pub const EMSGSIZE : c_int = 40;\n+            pub const EPROTOTYPE : c_int = 41;\n+            pub const ENOPROTOOPT : c_int = 42;\n+            pub const EPROTONOSUPPORT : c_int = 43;\n+            pub const ESOCKTNOSUPPORT : c_int = 44;\n+            pub const ENOTSUP : c_int = 45;\n+            pub const EPFNOSUPPORT : c_int = 46;\n+            pub const EAFNOSUPPORT : c_int = 47;\n+            pub const EADDRINUSE : c_int = 48;\n+            pub const EADDRNOTAVAIL : c_int = 49;\n+            pub const ENETDOWN : c_int = 50;\n+            pub const ENETUNREACH : c_int = 51;\n+            pub const ENETRESET : c_int = 52;\n+            pub const ECONNABORTED : c_int = 53;\n+            pub const ECONNRESET : c_int = 54;\n+            pub const ENOBUFS : c_int = 55;\n+            pub const EISCONN : c_int = 56;\n+            pub const ENOTCONN : c_int = 57;\n+            pub const ESHUTDOWN : c_int = 58;\n+            pub const ETOOMANYREFS : c_int = 59;\n+            pub const ETIMEDOUT : c_int = 60;\n+            pub const ECONNREFUSED : c_int = 61;\n+            pub const ELOOP : c_int = 62;\n+            pub const ENAMETOOLONG : c_int = 63;\n+            pub const EHOSTDOWN : c_int = 64;\n+            pub const EHOSTUNREACH : c_int = 65;\n+            pub const ENOTEMPTY : c_int = 66;\n+            pub const EPROCLIM : c_int = 67;\n+            pub const EUSERS : c_int = 68;\n+            pub const EDQUOT : c_int = 69;\n+            pub const ESTALE : c_int = 70;\n+            pub const EREMOTE : c_int = 71;\n+            pub const EBADRPC : c_int = 72;\n+            pub const ERPCMISMATCH : c_int = 73;\n+            pub const EPROGUNAVAIL : c_int = 74;\n+            pub const EPROGMISMATCH : c_int = 75;\n+            pub const EPROCUNAVAIL : c_int = 76;\n+            pub const ENOLCK : c_int = 77;\n+            pub const ENOSYS : c_int = 78;\n+            pub const EFTYPE : c_int = 79;\n+            pub const EAUTH : c_int = 80;\n+            pub const ENEEDAUTH : c_int = 81;\n+            pub const EPWROFF : c_int = 82;\n+            pub const EDEVERR : c_int = 83;\n+            pub const EOVERFLOW : c_int = 84;\n+            pub const EBADEXEC : c_int = 85;\n+            pub const EBADARCH : c_int = 86;\n+            pub const ESHLIBVERS : c_int = 87;\n+            pub const EBADMACHO : c_int = 88;\n+            pub const ECANCELED : c_int = 89;\n+            pub const EIDRM : c_int = 90;\n+            pub const ENOMSG : c_int = 91;\n+            pub const EILSEQ : c_int = 92;\n+            pub const ENOATTR : c_int = 93;\n+            pub const EBADMSG : c_int = 94;\n+            pub const EMULTIHOP : c_int = 95;\n+            pub const ENODATA : c_int = 96;\n+            pub const ENOLINK : c_int = 97;\n+            pub const ENOSR : c_int = 98;\n+            pub const ENOSTR : c_int = 99;\n+            pub const EPROTO : c_int = 100;\n+            pub const ETIME : c_int = 101;\n+            pub const EOPNOTSUPP : c_int = 102;\n+            pub const ENOPOLICY : c_int = 103;\n+            pub const ENOTRECOVERABLE : c_int = 104;\n+            pub const EOWNERDEAD : c_int = 105;\n             pub const EQFULL : c_int = 106;\n             pub const ELAST : c_int = 106;\n         }\n@@ -4380,7 +5004,8 @@ pub mod funcs {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -4394,6 +5019,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n@@ -4408,6 +5034,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n@@ -4600,7 +5227,8 @@ pub mod funcs {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     pub mod posix01 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -4610,6 +5238,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n@@ -4717,7 +5346,8 @@ pub mod funcs {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     pub mod posix08 {\n         pub mod unistd {\n         }\n@@ -4803,7 +5433,8 @@ pub mod funcs {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, c_ulong, size_t};\n@@ -4866,7 +5497,9 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     pub mod extra {\n     }\n "}, {"sha": "a4417b49f1c41e771fd65a0e18dbc692183597dd", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -61,7 +61,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "cb44fe117f54645d7740dd287e0355f2b3fb40d1", "filename": "src/librustc_back/mips.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n             \"E-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "7ee357fb1eaf35d7a28c8e4ea5c1559872535119", "filename": "src/librustc_back/mipsel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "0c18f1bdf7764743fc8e6b1d4ab82d30423c2f81", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -214,7 +214,9 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     fn test_rpath_relative() {\n         let config = &mut RPathConfig {\n             used_crates: Vec::new(),"}, {"sha": "1e787a3583868918ee8859a32cb7972305409b0d", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -56,6 +56,7 @@ mod apple_base;\n mod apple_ios_base;\n mod freebsd_base;\n mod dragonfly_base;\n+mod openbsd_base;\n \n mod armv7_apple_ios;\n mod armv7s_apple_ios;\n@@ -80,6 +81,7 @@ mod x86_64_pc_windows_gnu;\n mod x86_64_unknown_freebsd;\n mod x86_64_unknown_dragonfly;\n mod x86_64_unknown_linux_gnu;\n+mod x86_64_unknown_openbsd;\n \n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n@@ -352,6 +354,8 @@ impl Target {\n             i686_unknown_dragonfly,\n             x86_64_unknown_dragonfly,\n \n+            x86_64_unknown_openbsd,\n+\n             x86_64_apple_darwin,\n             i686_apple_darwin,\n "}, {"sha": "42220a87bd414891ea17830790cdfcdeefeaeb9d", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        linker: \"cc\".to_string(),\n+        dynamic_linking: true,\n+        executables: true,\n+        morestack: false,\n+        linker_is_gnu: true,\n+        has_rpath: true,\n+        pre_link_args: vec!(\n+        ),\n+        position_independent_executables: true,\n+        .. Default::default()\n+    }\n+}\n+"}, {"sha": "d2667dcd1dd9e8f8bfac358b72f2d4a46f788698", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::openbsd_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n+        llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"openbsd\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "9d1b7347d0651039a799e10bccfd7e3a1113fd21", "filename": "src/librustc_back/x86.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -51,6 +51,9 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n           abi::OsDragonfly => {\n             \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n           }\n+          abi::OsOpenbsd => {\n+            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n+          }\n \n         },\n "}, {"sha": "2f13bb3158119ad6e8a8f1661bd36b2014f431f7", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -57,6 +57,11 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n                 s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n           }\n+          abi::OsOpenbsd => {\n+            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n+          }\n \n         },\n "}, {"sha": "a7cf5eb89187f2a99ac4b6133e33fea74d710062", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -64,7 +64,7 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 13;\n     }\n \n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))]\n     mod os {\n         use libc;\n "}, {"sha": "c4017627e28675985922fe9d2cf7e6b9099e93d0", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -173,7 +173,8 @@ mod test {\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"macos\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n@@ -190,7 +191,8 @@ mod test {\n           target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod dl {\n     use prelude::v1::*;\n \n@@ -254,7 +256,6 @@ mod dl {\n         dlclose(handle as *mut libc::c_void); ()\n     }\n \n-    #[link_name = \"dl\"]\n     extern {\n         fn dlopen(filename: *const libc::c_char,\n                   flag: libc::c_int) -> *mut libc::c_void;"}, {"sha": "0da9e860145e99e46b1e31783f8cdd02bd2aa393", "filename": "src/libstd/os.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -693,7 +693,8 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     use rt;\n     rt::args::clone().unwrap_or_else(|| vec![])\n@@ -1326,6 +1327,37 @@ pub mod consts {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+#[cfg(target_os = \"openbsd\")]\n+pub mod consts {\n+    pub use os::arch_consts::ARCH;\n+\n+    pub const FAMILY: &'static str = \"unix\";\n+\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `openbsd`.\n+    pub const SYSNAME: &'static str = \"openbsd\";\n+\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_os = \"android\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;"}, {"sha": "b3bed4af96248dd4cdf70c25cad961aa7ac8b53f", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,7 +42,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "43e3a43f56d3632ce38017ebf3df9511aed42709", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -101,7 +101,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n #[link(name = \"gcc_s\")]\n extern {}\n \n-#[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"android\", target_os = \"openbsd\"))]\n #[link(name = \"gcc\")]\n extern {}\n "}, {"sha": "1392bc815c4f9d68d31a93aa47ae87e3a72af478", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -39,7 +39,7 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))]\n #[link(name = \"pthread\")]\n extern {}\n "}, {"sha": "c826522e5d1cfea3e3f44bfc360d7dcafd287dd7", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -694,10 +694,16 @@ impl TcpStream {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPIDLE,\n                    seconds as libc::c_int)\n     }\n+    #[cfg(target_os = \"openbsd\")]\n+    fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n+        setsockopt(self.fd(), libc::IPPROTO_TCP, libc::SO_KEEPALIVE,\n+                   seconds as libc::c_int)\n+    }\n     #[cfg(not(any(target_os = \"macos\",\n                   target_os = \"ios\",\n                   target_os = \"freebsd\",\n-                  target_os = \"dragonfly\")))]\n+                  target_os = \"dragonfly\",\n+                  target_os = \"openbsd\")))]\n     fn set_tcp_keepalive(&mut self, _seconds: uint) -> IoResult<()> {\n         Ok(())\n     }"}, {"sha": "8dd2f154fa8e3028fd5c0cd31cbc71060cca6b93", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -227,18 +227,13 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     }\n \n     // aarch64 - FIXME(AARCH64): missing...\n-    #[cfg(target_arch = \"aarch64\")]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-    }\n-\n     // powerpc - FIXME(POWERPC): missing...\n-    #[cfg(target_arch = \"powerpc\")]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-    }\n-\n-\n-    // iOS segmented stack is disabled for now, see related notes\n-    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n+    // arm-ios - iOS segmented stack is disabled for now, see related notes\n+    // openbsd - segmented stack is disabled\n+    #[cfg(any(target_arch = \"aarch64\",\n+              target_arch = \"powerpc\",\n+              all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"openbsd\"))]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n }\n@@ -327,21 +322,17 @@ pub unsafe fn get_sp_limit() -> uint {\n     }\n \n     // aarch64 - FIXME(AARCH64): missing...\n-    #[cfg(target_arch = \"aarch64\")]\n-    unsafe fn target_get_sp_limit() -> uint {\n-        1024\n-    }\n-\n-    // powepc - FIXME(POWERPC): missing...\n-    #[cfg(target_arch = \"powerpc\")]\n-    unsafe fn target_get_sp_limit() -> uint {\n-        1024\n-    }\n-\n-    // iOS doesn't support segmented stacks yet. This function might\n-    // be called by runtime though so it is unsafe to mark it as\n-    // unreachable, let's return a fixed constant.\n-    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n+    // powerpc - FIXME(POWERPC): missing...\n+    // arm-ios - iOS doesn't support segmented stacks yet.\n+    // openbsd - OpenBSD doesn't support segmented stacks.\n+    //\n+    // This function might be called by runtime though\n+    // so it is unsafe to unreachable, let's return a fixed constant.\n+    #[cfg(any(target_arch = \"aarch64\",\n+              target_arch = \"powerpc\",\n+              all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"openbsd\"))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         1024\n     }"}, {"sha": "f32d59fe3c3aa0feceab9da4812a6824e120a8b7", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -318,7 +318,8 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         static mut LAST_FILENAME: [libc::c_char; 256] = [0; 256];\n         if !STATE.is_null() { return STATE }\n         let selfname = if cfg!(target_os = \"freebsd\") ||\n-                          cfg!(target_os = \"dragonfly\") {\n+                          cfg!(target_os = \"dragonfly\") ||\n+                          cfg!(target_os = \"openbsd\") {\n             os::self_exe_name()\n         } else {\n             None"}, {"sha": "4fd7218d256592b4b6ecc19760f00c03dd46d718", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -23,7 +23,8 @@ use libc;\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub const FIONBIO: libc::c_ulong = 0x8004667e;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n@@ -41,7 +42,8 @@ pub const FIONBIO: libc::c_ulong = 0x667e;\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub const FIOCLEX: libc::c_ulong = 0x20006601;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n@@ -59,7 +61,8 @@ pub const FIOCLEX: libc::c_ulong = 0x6601;\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub const MSG_DONTWAIT: libc::c_int = 0x80;\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub const MSG_DONTWAIT: libc::c_int = 0x40;\n@@ -111,6 +114,7 @@ mod select {\n #[cfg(any(target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"openbsd\",\n           target_os = \"linux\"))]\n mod select {\n     use uint;\n@@ -235,7 +239,8 @@ mod signal {\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod signal {\n     use libc;\n \n@@ -248,7 +253,9 @@ mod signal {\n     pub const SA_SIGINFO: libc::c_int = 0x0040;\n     pub const SIGCHLD: libc::c_int = 20;\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"openbsd\"))]\n     pub type sigset_t = u32;\n     #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     #[repr(C)]"}, {"sha": "9faa4a038ba23c6bf0071d3d6adb1eeb9a3f875c", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -50,6 +50,16 @@ pub fn errno() -> int {\n         }\n     }\n \n+    #[cfg(target_os = \"openbsd\")]\n+    fn errno_location() -> *const c_int {\n+        extern {\n+            fn __errno() -> *const c_int;\n+        }\n+        unsafe {\n+            __errno()\n+        }\n+    }\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn errno_location() -> *const c_int {\n         extern {\n@@ -71,7 +81,8 @@ pub fn error_string(errno: i32) -> String {\n               target_os = \"ios\",\n               target_os = \"android\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t)\n                   -> c_int {\n         extern {\n@@ -204,6 +215,28 @@ pub fn load_self() -> Option<Vec<u8>> {\n     }\n }\n \n+#[cfg(target_os = \"openbsd\")]\n+pub fn load_self() -> Option<Vec<u8>> {\n+    use sync::{StaticMutex, MUTEX_INIT};\n+\n+    static LOCK: StaticMutex = MUTEX_INIT;\n+\n+    extern {\n+        fn rust_load_self() -> *const c_char;\n+    }\n+\n+    let _guard = LOCK.lock();\n+\n+    unsafe {\n+        let v = rust_load_self();\n+        if v.is_null() {\n+            None\n+        } else {\n+            Some(ffi::c_str_to_bytes(&v).to_vec())\n+        }\n+    }\n+}\n+\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn load_self() -> Option<Vec<u8>> {\n     use old_io;"}, {"sha": "20a934445ee0ad84911caedac7c2e2d0920bf6a0", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -604,7 +604,8 @@ fn translate_status(status: c_int) -> ProcessExit {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0x7f) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { status >> 8 }"}, {"sha": "3512fa36eb3b7fc07e61b56a0103fc1c02ca4ba4", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -32,7 +32,9 @@ impl Drop for Handler {\n     }\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"macos\",\n+          target_os = \"openbsd\"))]\n mod imp {\n     use core::prelude::*;\n     use sys_common::stack;\n@@ -203,7 +205,7 @@ mod imp {\n \n     }\n \n-    #[cfg(target_os = \"macos\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"openbsd\"))]\n     mod signal {\n         use libc;\n         use super::sighandler_t;\n@@ -212,14 +214,18 @@ mod imp {\n         pub const SA_SIGINFO: libc::c_int = 0x0040;\n         pub const SIGBUS: libc::c_int = 10;\n \n+        #[cfg(target_os = \"macos\")]\n         pub const SIGSTKSZ: libc::size_t = 131072;\n+        #[cfg(target_os = \"openbsd\")]\n+        pub const SIGSTKSZ: libc::size_t = 40960;\n \n         pub const SIG_DFL: sighandler_t = 0 as sighandler_t;\n \n         pub type sigset_t = u32;\n \n         // This structure has more fields, but we're not all that interested in\n         // them.\n+        #[cfg(target_os = \"macos\")]\n         #[repr(C)]\n         pub struct siginfo {\n             pub si_signo: libc::c_int,\n@@ -231,6 +237,16 @@ mod imp {\n             pub si_addr: *mut libc::c_void\n         }\n \n+        #[cfg(target_os = \"openbsd\")]\n+        #[repr(C)]\n+        pub struct siginfo {\n+            pub si_signo: libc::c_int,\n+            pub si_code: libc::c_int,\n+            pub si_errno: libc::c_int,\n+            // union\n+            pub si_addr: *mut libc::c_void,\n+        }\n+\n         #[repr(C)]\n         pub struct sigaltstack {\n             pub ss_sp: *mut libc::c_void,\n@@ -260,7 +276,8 @@ mod imp {\n }\n \n #[cfg(not(any(target_os = \"linux\",\n-              target_os = \"macos\")))]\n+              target_os = \"macos\",\n+              target_os = \"openbsd\")))]\n mod imp {\n     use libc;\n "}, {"sha": "bc93513af63d4609f2593ba42ef213608c23dbe6", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -44,7 +44,9 @@ extern {\n     pub fn pthread_rwlock_unlock(lock: *mut pthread_rwlock_t) -> libc::c_int;\n }\n \n-#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+#[cfg(any(target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod os {\n     use libc;\n "}, {"sha": "6f030ee91fe2d6db045ca5daec23dc3dc8240c8c", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -31,7 +31,9 @@ pub extern fn thread_start(main: *mut libc::c_void) -> rust_thread_return {\n     return start_thread(main);\n }\n \n-#[cfg(all(not(target_os = \"linux\"), not(target_os = \"macos\")))]\n+#[cfg(all(not(target_os = \"linux\"),\n+          not(target_os = \"macos\"),\n+          not(target_os = \"openbsd\")))]\n pub mod guard {\n     pub unsafe fn current() -> uint {\n         0\n@@ -45,10 +47,15 @@ pub mod guard {\n     }\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n+\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"macos\",\n+          target_os = \"openbsd\"))]\n pub mod guard {\n     use super::*;\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"openbsd\"))]\n     use mem;\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     use ptr;\n@@ -64,7 +71,7 @@ pub mod guard {\n     static mut PAGE_SIZE: uint = 0;\n     static mut GUARD_PAGE: uint = 0;\n \n-    #[cfg(target_os = \"macos\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"openbsd\"))]\n     unsafe fn get_stack_start() -> *mut libc::c_void {\n         current() as *mut libc::c_void\n     }\n@@ -141,6 +148,23 @@ pub mod guard {\n          pthread_get_stacksize_np(pthread_self())) as uint\n     }\n \n+    #[cfg(target_os = \"openbsd\")]\n+    pub unsafe fn current() -> uint {\n+        let mut current_stack: stack_t = mem::zeroed();\n+        if pthread_stackseg_np(pthread_self(), &mut current_stack) != 0 {\n+            panic!(\"failed to get current stack: pthread_stackseg_np\")\n+        }\n+\n+        if pthread_main_np() == 1 {\n+            // main thread\n+            current_stack.ss_sp as uint - current_stack.ss_size as uint + 3 * PAGE_SIZE as uint\n+\n+        } else {\n+            // new thread\n+            current_stack.ss_sp as uint - current_stack.ss_size as uint\n+        }\n+    }\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub unsafe fn current() -> uint {\n         let mut attr: libc::pthread_attr_t = mem::zeroed();\n@@ -224,7 +248,9 @@ pub unsafe fn set_name(name: &str) {\n     }\n }\n \n-#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+#[cfg(any(target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub unsafe fn set_name(name: &str) {\n     // pthread_set_name_np() since almost forever on all BSDs\n     let cname = CString::from_slice(name.as_bytes());\n@@ -290,7 +316,9 @@ extern {\n                                  stacksize: *mut libc::size_t) -> libc::c_int;\n }\n \n-#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+#[cfg(any(target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n     fn pthread_set_name_np(tid: libc::pthread_t, name: *const libc::c_char);\n@@ -304,6 +332,21 @@ extern {\n     fn pthread_setname_np(name: *const libc::c_char) -> libc::c_int;\n }\n \n+#[cfg(target_os = \"openbsd\")]\n+extern {\n+        pub fn pthread_stackseg_np(thread: libc::pthread_t,\n+                                   sinfo: *mut stack_t) -> libc::c_uint;\n+        pub fn pthread_main_np() -> libc::c_uint;\n+}\n+\n+#[cfg(target_os = \"openbsd\")]\n+#[repr(C)]\n+pub struct stack_t {\n+    pub ss_sp: *mut libc::c_void,\n+    pub ss_size: libc::size_t,\n+    pub ss_flags: libc::c_int,\n+}\n+\n extern {\n     fn pthread_create(native: *mut libc::pthread_t,\n                       attr: *const libc::pthread_attr_t,"}, {"sha": "62d9a33c83d7af78d0280a0118e950844b59c99b", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,13 +42,15 @@ pub unsafe fn destroy(key: Key) {\n type pthread_key_t = ::libc::c_ulong;\n \n #[cfg(any(target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n type pthread_key_t = ::libc::c_int;\n \n #[cfg(not(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\")))]\n+              target_os = \"dragonfly\",\n+              target_os = \"openbsd\")))]\n type pthread_key_t = ::libc::c_uint;\n \n extern {"}, {"sha": "bddf7b075df96ab365f534484bde9e6cff17e373", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -80,7 +80,8 @@ mod inner {\n     }\n \n     // Apparently android provides this in some other library?\n-    #[cfg(not(target_os = \"android\"))]\n+    // OpenBSD provide it via libc\n+    #[cfg(not(any(target_os = \"android\", target_os = \"openbsd\")))]\n     #[link(name = \"rt\")]\n     extern {}\n "}, {"sha": "3a79047445cdd8d10a5a70b6c9df8d36e60649f7", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -21,7 +21,8 @@ pub struct TTY {\n }\n \n #[cfg(any(target_os = \"macos\",\n-          target_os = \"freebsd\"))]\n+          target_os = \"freebsd\",\n+          target_os = \"openbsd\"))]\n const TIOCGWINSZ: c_ulong = 0x40087468;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -53,7 +54,8 @@ impl TTY {\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"android\",\n               target_os = \"macos\",\n-              target_os = \"freebsd\"))]\n+              target_os = \"freebsd\",\n+              target_os = \"openbsd\"))]\n     pub fn get_winsize(&mut self) -> IoResult<(int, int)> {\n         unsafe {\n             #[repr(C)]"}, {"sha": "de3fa1135b161382d5cb13eb363c026cd72c6aae", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -24,6 +24,7 @@ pub enum Os {\n     OsFreebsd,\n     OsiOS,\n     OsDragonfly,\n+    OsOpenbsd,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -134,7 +135,8 @@ impl fmt::Display for Os {\n             OsiOS => \"ios\".fmt(f),\n             OsAndroid => \"android\".fmt(f),\n             OsFreebsd => \"freebsd\".fmt(f),\n-            OsDragonfly => \"dragonfly\".fmt(f)\n+            OsDragonfly => \"dragonfly\".fmt(f),\n+            OsOpenbsd => \"openbsd\".fmt(f),\n         }\n     }\n }"}, {"sha": "382cbf0d5d129e5849ca9714f809626ba6d4c5d4", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -47,7 +47,7 @@ extern char **environ;\n #endif\n #endif\n \n-#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) || defined(__DragonFly__)\n+#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) || defined(__DragonFly__) || defined(__OpenBSD__)\n extern char **environ;\n #endif\n \n@@ -199,6 +199,56 @@ rust_unset_sigprocmask() {\n int *__dfly_error(void) { return __error(); }\n #endif\n \n+#if defined(__OpenBSD__)\n+#include <sys/param.h>\n+#include <sys/sysctl.h>\n+#include <limits.h>\n+\n+const char * rust_load_self() {\n+    static char *self = NULL;\n+\n+    if (self == NULL) {\n+        int mib[4];\n+        char **argv = NULL;\n+        size_t argv_len;\n+\n+        /* initialize mib */\n+        mib[0] = CTL_KERN;\n+        mib[1] = KERN_PROC_ARGS;\n+        mib[2] = getpid();\n+        mib[3] = KERN_PROC_ARGV;\n+\n+        /* request KERN_PROC_ARGV size */\n+        argv_len = 0;\n+        if (sysctl(mib, 4, NULL, &argv_len, NULL, 0) == -1)\n+            return (NULL);\n+\n+        /* allocate size */\n+        if ((argv = malloc(argv_len)) == NULL)\n+            return (NULL);\n+\n+        /* request KERN_PROC_ARGV */\n+        if (sysctl(mib, 4, argv, &argv_len, NULL, 0) == -1) {\n+            free(argv);\n+            return (NULL);\n+        }\n+\n+        /* get realpath if possible */\n+        if ((argv[0] != NULL) && ((*argv[0] == '.') || (*argv[0] == '/')\n+\t\t\t\t|| (strstr(argv[0], \"/\") != NULL)))\n+\n+            self = realpath(argv[0], NULL);\n+        else\n+            self = NULL;\n+\n+        /* cleanup */\n+        free(argv);\n+    }\n+\n+    return (self);\n+}\n+#endif\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "accb2f7faa71935c29050dfa3a1dc79117383ed0", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -59,11 +59,14 @@ ifeq ($(shell uname),Darwin)\n else\n ifeq ($(shell uname),FreeBSD)\n \tEXTRACFLAGS := -lm -lpthread -lgcc_s\n+ifeq ($(shell uname),OpenBSD)\n+\tEXTRACFLAGS := -lm -lpthread\t\n else\n \tEXTRACFLAGS := -lm -lrt -ldl -lpthread\n endif\n endif\n endif\n+endif\n \n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))"}, {"sha": "07f021e48d7e7a40de3a0a99def9651e913519c1", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -20,7 +20,8 @@ mod rusti {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "2d70fa0c8198932d9599f52ef3c15f0fe480a826", "filename": "src/test/run-pass/lang-item-public.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -37,6 +37,10 @@ extern {}\n #[link(name = \"c\")]\n extern {}\n \n+#[cfg(target_os = \"openbsd\")]\n+#[link(name = \"c\")]\n+extern {}\n+\n #[cfg(target_os = \"macos\")]\n #[link(name = \"System\")]\n extern {}"}, {"sha": "5330490e54f55394221394d2308a91d9c88218af", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -39,7 +39,8 @@ struct Outer {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "e0527c35871b077762f46c5ce4ba87a5f326380c", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,7 @@\n \n // ignore-linux see joyent/libuv#1189\n // ignore-android needs extra network permissions\n+// ignore-openbsd system ulimit (Too many open files)\n // exec-env:RUST_LOG=debug\n \n #[macro_use]"}, {"sha": "75a8f6019b89895c1f83ffe5ed0a99fcd915209e", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425f2328d0d6d2848a399424ab26dde4800edcf9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=425f2328d0d6d2848a399424ab26dde4800edcf9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -34,5 +34,6 @@ pub fn main() {\n           target_os = \"linux\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"openbsd\",\n           target_os = \"android\"))]\n pub fn main() { }"}]}