{"sha": "0dcde02cc7bdd47f48af12e911829390c2864c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkY2RlMDJjYzdiZGQ0N2Y0OGFmMTJlOTExODI5MzkwYzI4NjRjNDc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-10T00:40:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-11T22:45:19Z"}, "message": "Ignore arguments when looking for `IndexMut` for subsequent `mut` obligation\n\nGiven code like `v[&field].boo();` where `field: String` and\n`.boo(&mut self)`, typeck will have decided that `v` is accessed using\n`Index`, but when `boo` adds a new `mut` obligation,\n`convert_place_op_to_mutable` is called. When this happens, for *some\nreason* the arguments' dereference adjustments are completely ignored\ncausing an error saying that `IndexMut` is not satisfied:\n\n```\nerror[E0596]: cannot borrow data in an index of `Indexable` as mutable\n  --> src/main.rs:30:5\n   |\n30 |     v[&field].boo();\n   |     ^^^^^^^^^ cannot borrow as mutable\n   |\n   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `Indexable`\n```\n\nThis is not true, but by changing `try_overloaded_place_op` to retry\nwhen given `Needs::MutPlace` without passing the argument types, the\nexample successfully compiles.\n\nI believe there might be more appropriate ways to deal with this.", "tree": {"sha": "6819f4016c4f82ecb114286f369b76fb853bc83f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6819f4016c4f82ecb114286f369b76fb853bc83f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dcde02cc7bdd47f48af12e911829390c2864c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcde02cc7bdd47f48af12e911829390c2864c47", "html_url": "https://github.com/rust-lang/rust/commit/0dcde02cc7bdd47f48af12e911829390c2864c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dcde02cc7bdd47f48af12e911829390c2864c47/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4802f097c86452cd2e09d44e88dbcb8e08266552", "url": "https://api.github.com/repos/rust-lang/rust/commits/4802f097c86452cd2e09d44e88dbcb8e08266552", "html_url": "https://github.com/rust-lang/rust/commit/4802f097c86452cd2e09d44e88dbcb8e08266552"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "c4805c54a7d43e80b6bad522a345446f4c6f0b5b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dcde02cc7bdd47f48af12e911829390c2864c47/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dcde02cc7bdd47f48af12e911829390c2864c47/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0dcde02cc7bdd47f48af12e911829390c2864c47", "patch": "@@ -468,7 +468,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n             match expr.kind {\n                 hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    let index_expr_ty = self.node_ty(index_expr.hir_id);\n+                    // We need to get the final type in case dereferences were needed for the trait\n+                    // to apply (#72002).\n+                    let index_expr_ty = self.tables.borrow().expr_ty_adjusted(index_expr);\n                     self.convert_place_op_to_mutable(\n                         PlaceOp::Index,\n                         expr,"}, {"sha": "54ff89355ff3aeb3b3f25aa3bdcc52f00dd722f6", "filename": "src/test/ui/issues/issue-72002.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0dcde02cc7bdd47f48af12e911829390c2864c47/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dcde02cc7bdd47f48af12e911829390c2864c47/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs?ref=0dcde02cc7bdd47f48af12e911829390c2864c47", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+struct Indexable;\n+\n+impl Indexable {\n+    fn boo(&mut self) {}\n+}\n+\n+impl std::ops::Index<&str> for Indexable {\n+    type Output = Indexable;\n+\n+    fn index(&self, field: &str) -> &Indexable {\n+        self\n+    }\n+}\n+\n+impl std::ops::IndexMut<&str> for Indexable {\n+    fn index_mut(&mut self, field: &str) -> &mut Indexable {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    let mut v = Indexable;\n+    let field = \"hello\".to_string();\n+\n+    v[field.as_str()].boo();\n+\n+    v[&field].boo(); // < This should work\n+}"}]}