{"sha": "28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjAzYWM0YzA4ZmM3ZWM2MjQyOGQwYjkxNGUxNTEwY2U3ZWUyY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T01:36:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T01:36:12Z"}, "message": "Auto merge of #78421 - JohnTitor:rollup-bq2d7fo, r=JohnTitor\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #76635 (Add [T]::as_chunks(_mut))\n - #77703 (add system-llvm-libunwind config option)\n - #78219 (Prefer to use `print_def_path`)\n - #78298 (Add test for bad NLL higher-ranked subtype)\n - #78332 (Update description for error E0308)\n - #78342 (Use check-pass in single-use-lifetime ui tests)\n - #78347 (Add lexicographical comparison doc)\n - #78348 (Make some functions private that don't have to be public)\n - #78349 (Use its own `TypeckResults` to avoid ICE)\n - #78375 (Use ? in core/std macros)\n - #78377 (Fix typo in debug statement)\n - #78388 (Add some regression tests)\n - #78394 (fix(docs): typo in BufWriter documentation)\n - #78396 (Add compiler support for LLVM's x86_64 ERMSB feature)\n - #78405 (Fix typo in lint description)\n - #78412 (Improve formatting of hash collections docs)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "c3f0b0308ea3548fd1319b0721d9d90b4f17d0d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f0b0308ea3548fd1319b0721d9d90b4f17d0d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "html_url": "https://github.com/rust-lang/rust/commit/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d30a7b490065f0aa56f58e508a11546445aea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d30a7b490065f0aa56f58e508a11546445aea9", "html_url": "https://github.com/rust-lang/rust/commit/a4d30a7b490065f0aa56f58e508a11546445aea9"}, {"sha": "4236d27c9bb0af5cbdfaaa840b211827c65fb1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4236d27c9bb0af5cbdfaaa840b211827c65fb1ee", "html_url": "https://github.com/rust-lang/rust/commit/4236d27c9bb0af5cbdfaaa840b211827c65fb1ee"}], "stats": {"total": 820, "additions": 558, "deletions": 262}, "files": [{"sha": "000ddf42604296009a888d7c7e8a5ebf696aec93", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -63,6 +63,7 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"bmi1\", None),\n     (\"bmi2\", None),\n     (\"cmpxchg16b\", Some(sym::cmpxchg16b_target_feature)),\n+    (\"ermsb\", Some(sym::ermsb_target_feature)),\n     (\"f16c\", Some(sym::f16c_target_feature)),\n     (\"fma\", None),\n     (\"fxsr\", None),"}, {"sha": "decee6309955a2aa7f43553ea857604993c190c1", "filename": "compiler/rustc_error_codes/src/error_codes/E0308.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,18 +1,26 @@\n Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \"I am not a number!\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\"Not a number\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \"Not a bool\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \"Not a float\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration."}, {"sha": "f5c530c192aa09938e011a5cd7884e452eb7ba23", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -243,6 +243,7 @@ declare_features! (\n     (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n     (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n     (active, riscv_target_feature, \"1.45.0\", Some(44839), None),\n+    (active, ermsb_target_feature, \"1.49.0\", Some(44839), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates (target features)"}, {"sha": "9735099a4e1ee268e18dd264c2247709ca8e75f6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -658,7 +658,7 @@ pub trait PrettyPrinter<'tcx>:\n                         let span = self.tcx().hir().span(hir_id);\n                         p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n                     } else {\n-                        p!(write(\"@{}\", self.tcx().def_path_str(did)));\n+                        p!(write(\"@\"), print_def_path(did, substs));\n                     }\n                 } else {\n                     p!(print_def_path(did, substs));\n@@ -694,7 +694,7 @@ pub trait PrettyPrinter<'tcx>:\n                             p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n                         }\n                     } else {\n-                        p!(write(\"@{}\", self.tcx().def_path_str(did)));\n+                        p!(write(\"@\"), print_def_path(did, substs));\n                     }\n                 } else {\n                     p!(print_def_path(did, substs));"}, {"sha": "3ee15248ae28e2265d4bf9dee1ce8c5f8248239d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let arm_end_blocks: Vec<_> = arm_candidates\n             .into_iter()\n             .map(|(arm, candidate)| {\n-                debug!(\"lowering arm {:?}\\ncanidate = {:?}\", arm, candidate);\n+                debug!(\"lowering arm {:?}\\ncandidate = {:?}\", arm, candidate);\n \n                 let arm_source_info = self.source_info(arm.span);\n                 let arm_scope = (arm.scope, arm_source_info);"}, {"sha": "48d15370ee320aaf6370555be16b779424b68992", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -630,9 +630,14 @@ impl<'tcx> SaveContext<'tcx> {\n             })\n             | Node::Ty(&hir::Ty { kind: hir::TyKind::Path(ref qpath), .. }) => match qpath {\n                 hir::QPath::Resolved(_, path) => path.res,\n-                hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self\n-                    .maybe_typeck_results\n-                    .map_or(Res::Err, |typeck_results| typeck_results.qpath_res(qpath, hir_id)),\n+                hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => {\n+                    // #75962: `self.typeck_results` may be different from the `hir_id`'s result.\n+                    if self.tcx.has_typeck_results(hir_id.owner.to_def_id()) {\n+                        self.tcx.typeck(hir_id.owner).qpath_res(qpath, hir_id)\n+                    } else {\n+                        Res::Err\n+                    }\n+                }\n             },\n \n             Node::Binding(&hir::Pat {"}, {"sha": "1bf8160e4c384c0ab6c63527230da34cdc5a2ecb", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -262,7 +262,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 } else {\n                     let start = offset + prefix.len() + 5;\n                     let end = start + name.len();\n-                    // FIXME should put the proper path in there, not elipses.\n+                    // FIXME should put the proper path in there, not ellipsis.\n                     Ok(Signature {\n                         text: prefix + \"...::\" + &name,\n                         defs: vec![],\n@@ -272,7 +272,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ty, segment)) => {\n                 let nested_ty = ty.make(offset + 1, id, scx)?;\n-                let prefix = format!(\"<{}>::\", nested_ty.text,);\n+                let prefix = format!(\"<{}>::\", nested_ty.text);\n \n                 let name = path_segment_to_string(segment);\n                 let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n@@ -551,7 +551,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n                 // FIXME where clause\n             }\n             hir::ItemKind::ForeignMod(_) => Err(\"extern mod\"),\n-            hir::ItemKind::GlobalAsm(_) => Err(\"glboal asm\"),\n+            hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n             hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),\n             // FIXME should implement this (e.g., pub use)."}, {"sha": "ab56a0a566757efe3941704680d89248b39e2dee", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2648,7 +2648,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `uninhabited_static` lint detects uninhbaited statics.\n+    /// The `uninhabited_static` lint detects uninhabited statics.\n     ///\n     /// ### Example\n     ///"}, {"sha": "080afdcd2c0368f27473bdd2c9a6da7a7c0dbf44", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -467,6 +467,7 @@ symbols! {\n         encode,\n         env,\n         eq,\n+        ermsb_target_feature,\n         err,\n         exact_div,\n         except,"}, {"sha": "afc95eb47188c153096eb38d87562767abf16780", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2409,6 +2409,7 @@ fn from_target_feature(\n                 Some(sym::movbe_target_feature) => rust_features.movbe_target_feature,\n                 Some(sym::rtm_target_feature) => rust_features.rtm_target_feature,\n                 Some(sym::f16c_target_feature) => rust_features.f16c_target_feature,\n+                Some(sym::ermsb_target_feature) => rust_features.ermsb_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "1edb390e0fef25e0334b6bf17cbe9f1ed7938a6b", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -527,7 +527,8 @@ changelog-seen = 2\n #test-compare-mode = false\n \n # Use LLVM libunwind as the implementation for Rust's unwinder.\n-#llvm-libunwind = false\n+# Accepted values are 'in-tree' (formerly true), 'system' or 'no' (formerly false).\n+#llvm-libunwind = 'no'\n \n # Enable Windows Control Flow Guard checks in the standard library.\n # This only applies from stage 1 onwards, and only for Windows targets."}, {"sha": "202e3a836384dfd86b5b34e0a35c0e597c690b47", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2566,7 +2566,7 @@ __impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], #[stable(feature = \"rust1\"\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], }\n \n-/// Implements comparison of vectors, lexicographically.\n+/// Implements comparison of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for Vec<T> {\n     #[inline]\n@@ -2578,7 +2578,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for Vec<T> {}\n \n-/// Implements ordering of vectors, lexicographically.\n+/// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for Vec<T> {\n     #[inline]"}, {"sha": "1d55a5ef659d4a8cd0c7bfe09fa68b40a125425b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -344,7 +344,7 @@ impl<T: PartialOrd, const N: usize> PartialOrd for [T; N] {\n     }\n }\n \n-/// Implements comparison of arrays lexicographically.\n+/// Implements comparison of arrays [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord, const N: usize> Ord for [T; N] {\n     #[inline]"}, {"sha": "a048f65a14992ffb9731b6dd98a198a1459670bc", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -506,9 +506,19 @@ impl<T: Ord> Ord for Reverse<T> {\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n /// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n+/// ## Lexicographical comparison\n+///\n+/// Lexicographical comparison is an operation with the following properties:\n+///  - Two sequences are compared element by element.\n+///  - The first mismatching element defines which sequence is lexicographically less or greater than the other.\n+///  - If one sequence is a prefix of another, the shorter sequence is lexicographically less than the other.\n+///  - If two sequence have equivalent elements and are of the same length, then the sequences are lexicographically equal.\n+///  - An empty sequence is lexicographically less than any non-empty sequence.\n+///  - Two empty sequences are lexicographically equal.\n+///\n /// ## How can I implement `Ord`?\n ///\n /// `Ord` requires that the type also be [`PartialOrd`] and [`Eq`] (which requires [`PartialEq`])."}, {"sha": "19484bfd0419f1e2099f3e657e563b7dae60e798", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2851,7 +2851,7 @@ pub trait Iterator {\n         Product::product(self)\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2873,7 +2873,7 @@ pub trait Iterator {\n         self.cmp_by(other, |x, y| x.cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2925,7 +2925,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2949,7 +2949,7 @@ pub trait Iterator {\n         self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -3089,7 +3089,7 @@ pub trait Iterator {\n         !self.eq(other)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// less than those of another.\n     ///\n     /// # Examples\n@@ -3110,7 +3110,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// less or equal to those of another.\n     ///\n     /// # Examples\n@@ -3131,7 +3131,7 @@ pub trait Iterator {\n         matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// greater than those of another.\n     ///\n     /// # Examples\n@@ -3152,7 +3152,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// greater than or equal to those of another.\n     ///\n     /// # Examples"}, {"sha": "bce8a70e92f31cef9db12978ce5a766988e43de2", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -6,15 +6,12 @@ macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n     );\n-    ($msg:literal) => (\n+    ($msg:literal $(,)?) => (\n         $crate::panicking::panic($msg)\n     );\n-    ($msg:expr) => (\n+    ($msg:expr $(,)?) => (\n         $crate::panicking::panic_str($msg)\n     );\n-    ($msg:expr,) => (\n-        $crate::panic!($msg)\n-    );\n     ($fmt:expr, $($arg:tt)+) => (\n         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n     );\n@@ -40,7 +37,7 @@ macro_rules! panic {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! assert_eq {\n-    ($left:expr, $right:expr) => ({\n+    ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n@@ -54,9 +51,6 @@ macro_rules! assert_eq {\n             }\n         }\n     });\n-    ($left:expr, $right:expr,) => ({\n-        $crate::assert_eq!($left, $right)\n-    });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n@@ -94,7 +88,7 @@ macro_rules! assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! assert_ne {\n-    ($left:expr, $right:expr) => ({\n+    ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n@@ -108,9 +102,6 @@ macro_rules! assert_ne {\n             }\n         }\n     });\n-    ($left:expr, $right:expr,) => {\n-        $crate::assert_ne!($left, $right)\n-    };\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n@@ -315,17 +306,14 @@ macro_rules! matches {\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use the `?` operator instead\")]\n #[doc(alias = \"?\")]\n macro_rules! r#try {\n-    ($expr:expr) => {\n+    ($expr:expr $(,)?) => {\n         match $expr {\n             $crate::result::Result::Ok(val) => val,\n             $crate::result::Result::Err(err) => {\n                 return $crate::result::Result::Err($crate::convert::From::from(err));\n             }\n         }\n     };\n-    ($expr:expr,) => {\n-        $crate::r#try!($expr)\n-    };\n }\n \n /// Writes formatted data into a buffer.\n@@ -451,12 +439,9 @@ macro_rules! write {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n-    ($dst:expr) => (\n+    ($dst:expr $(,)?) => (\n         $crate::write!($dst, \"\\n\")\n     );\n-    ($dst:expr,) => (\n-        $crate::writeln!($dst)\n-    );\n     ($dst:expr, $($arg:tt)*) => (\n         $dst.write_fmt($crate::format_args_nl!($($arg)*))\n     );\n@@ -517,12 +502,9 @@ macro_rules! unreachable {\n     () => ({\n         panic!(\"internal error: entered unreachable code\")\n     });\n-    ($msg:expr) => ({\n+    ($msg:expr $(,)?) => ({\n         $crate::unreachable!(\"{}\", $msg)\n     });\n-    ($msg:expr,) => ({\n-        $crate::unreachable!($msg)\n-    });\n     ($fmt:expr, $($arg:tt)*) => ({\n         panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     });\n@@ -711,8 +693,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! compile_error {\n-        ($msg:expr) => {{ /* compiler built-in */ }};\n-        ($msg:expr,) => {{ /* compiler built-in */ }};\n+        ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Constructs parameters for the other string-formatting macros.\n@@ -816,8 +797,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! env {\n-        ($name:expr) => {{ /* compiler built-in */ }};\n-        ($name:expr,) => {{ /* compiler built-in */ }};\n+        ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Optionally inspects an environment variable at compile time.\n@@ -841,8 +821,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! option_env {\n-        ($name:expr) => {{ /* compiler built-in */ }};\n-        ($name:expr,) => {{ /* compiler built-in */ }};\n+        ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Concatenates identifiers into one identifier.\n@@ -877,8 +856,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),+) => {{ /* compiler built-in */ }};\n-        ($($e:ident,)+) => {{ /* compiler built-in */ }};\n+        ($($e:ident),+ $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -900,8 +878,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! concat {\n-        ($($e:expr),*) => {{ /* compiler built-in */ }};\n-        ($($e:expr,)*) => {{ /* compiler built-in */ }};\n+        ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Expands to the line number on which it was invoked.\n@@ -1043,8 +1020,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include_str {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Includes a file as a reference to a byte array.\n@@ -1083,8 +1059,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include_bytes {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Expands to a string that represents the current module path.\n@@ -1191,8 +1166,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Asserts that a boolean expression is `true` at runtime.\n@@ -1242,8 +1216,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! assert {\n-        ($cond:expr) => {{ /* compiler built-in */ }};\n-        ($cond:expr,) => {{ /* compiler built-in */ }};\n+        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n     }\n "}, {"sha": "18073f4afedf74fafc3d9e11259aca9ff96ee3e6", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -35,15 +35,15 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for [T] {}\n \n-/// Implements comparison of vectors lexicographically.\n+/// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for [T] {\n     fn cmp(&self, other: &[T]) -> Ordering {\n         SliceOrd::compare(self, other)\n     }\n }\n \n-/// Implements comparison of vectors lexicographically.\n+/// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for [T] {\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {"}, {"sha": "e373936a6c74d848a2c527f6791146578251b34a", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2103,13 +2103,8 @@ pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        let array_slice: &[[T; N]] = unsafe { from_raw_parts(fst.as_ptr().cast(), len) };\n-\n-        Self { iter: array_slice.iter(), rem: snd }\n+        let (array_slice, rem) = slice.as_chunks();\n+        Self { iter: array_slice.iter(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be\n@@ -2230,14 +2225,8 @@ pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a mut [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at_mut(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        unsafe {\n-            let array_slice: &mut [[T; N]] = from_raw_parts_mut(fst.as_mut_ptr().cast(), len);\n-            Self { iter: array_slice.iter_mut(), rem: snd }\n-        }\n+        let (array_slice, rem) = slice.as_chunks_mut();\n+        Self { iter: array_slice.iter_mut(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be"}, {"sha": "f514a90c2b80b5187681ae023f0b1eb1f0dd47c2", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -882,6 +882,36 @@ impl<T> [T] {\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let (chunks, remainder) = slice.as_chunks();\n+    /// assert_eq!(chunks, &[['l', 'o'], ['r', 'e']]);\n+    /// assert_eq!(remainder, &['m']);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at(len * N);\n+        // SAFETY: We cast a slice of `len * N` elements into\n+        // a slice of `len` many `N` elements chunks.\n+        let array_slice: &[[T; N]] = unsafe { from_raw_parts(multiple_of_n.as_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///\n@@ -916,6 +946,43 @@ impl<T> [T] {\n         ArrayChunks::new(self)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// let (chunks, remainder) = v.as_chunks_mut();\n+    /// remainder[0] = 9;\n+    /// for chunk in chunks {\n+    ///     *chunk = [count; 2];\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[1, 1, 2, 2, 9]);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n+        let array_slice: &mut [[T; N]] =\n+            // SAFETY: We cast a slice of `len * N` elements into\n+            // a slice of `len` many `N` elements chunks.\n+            unsafe { from_raw_parts_mut(multiple_of_n.as_mut_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///"}, {"sha": "1906fa27bf44b1209d8bc81c10294e4a67051de1", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -9,7 +9,7 @@ use super::ParseBoolError;\n \n /// Implements ordering of strings.\n ///\n-/// Strings are ordered  lexicographically by their byte values. This orders Unicode code\n+/// Strings are ordered  [lexicographically](Ord#lexicographical-comparison) by their byte values. This orders Unicode code\n /// points based on their positions in the code charts. This is not necessarily the same as\n /// \"alphabetical\" order, which varies by language and locale. Sorting strings according to\n /// culturally-accepted standards requires locale-specific data that is outside the scope of\n@@ -39,7 +39,7 @@ impl Eq for str {}\n \n /// Implements comparison operations on strings.\n ///\n-/// Strings are compared lexicographically by their byte values. This compares Unicode code\n+/// Strings are compared [lexicographically](Ord#lexicographical-comparison) by their byte values. This compares Unicode code\n /// points based on their positions in the code charts. This is not necessarily the same as\n /// \"alphabetical\" order, which varies by language and locale. Comparing strings according to\n /// culturally-accepted standards requires locale-specific data that is outside the scope of"}, {"sha": "281ed4f336c8bf41a6e2016d57c041298157e918", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -61,6 +61,7 @@ profiler = [\"profiler_builtins\"]\n compiler-builtins-c = [\"alloc/compiler-builtins-c\"]\n compiler-builtins-mem = [\"alloc/compiler-builtins-mem\"]\n llvm-libunwind = [\"unwind/llvm-libunwind\"]\n+system-llvm-libunwind = [\"unwind/system-llvm-libunwind\"]\n \n # Make panics and failed asserts immediately abort without formatting any message\n panic_immediate_abort = [\"core/panic_immediate_abort\"]"}, {"sha": "d1244c2ca538c8b633b2098ac586b2b75e1f2173", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -606,7 +606,7 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n+    /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n     ///\n     /// # Errors\n@@ -619,6 +619,7 @@ where\n     /// ```\n     /// #![feature(try_reserve)]\n     /// use std::collections::HashMap;\n+    ///\n     /// let mut map: HashMap<&str, isize> = HashMap::new();\n     /// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n@@ -898,14 +899,14 @@ where\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```"}, {"sha": "3299fd12e024e97e8f60f0d9cd13650e8f80eedc", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -412,7 +412,7 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n+    /// in the given `HashSet<K, V>`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n     ///\n     /// # Errors\n@@ -918,7 +918,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let xs = [1,2,3,4,5,6];\n+    /// let xs = [1, 2, 3, 4, 5, 6];\n     /// let mut set: HashSet<i32> = xs.iter().cloned().collect();\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);"}, {"sha": "3ec272fea6668478e8da446b916303520f4f2c73", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -15,7 +15,7 @@ use crate::io::{\n /// *repeated* write calls to the same file or network socket. It does not\n /// help when writing very large amounts at once, or writing just one or a few\n /// times. It also provides no advantage when writing to a destination that is\n-/// in memory, like a [`Vec`]<u8>`.\n+/// in memory, like a [`Vec`]`<u8>`.\n ///\n /// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n /// dropping will attempt to flush the contents of the buffer, any errors"}, {"sha": "57649d6f8f25243312f1f3982c1650e01e9804e3", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -10,8 +10,7 @@\n #[allow_internal_unstable(libstd_sys_internals)]\n macro_rules! panic {\n     () => ({ $crate::panic!(\"explicit panic\") });\n-    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });\n-    ($msg:expr,) => ({ $crate::panic!($msg) });\n+    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n     });\n@@ -285,7 +284,7 @@ macro_rules! dbg {\n     () => {\n         $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n     };\n-    ($val:expr) => {\n+    ($val:expr $(,)?) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n@@ -296,8 +295,6 @@ macro_rules! dbg {\n             }\n         }\n     };\n-    // Trailing comma with single argument is ignored\n-    ($val:expr,) => { $crate::dbg!($val) };\n     ($($val:expr),+ $(,)?) => {\n         ($($crate::dbg!($val)),+,)\n     };"}, {"sha": "3d6910b107dd5a8377020f58039748229e68c7b1", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -27,6 +27,7 @@ backtrace = [\"std/backtrace\"]\n compiler-builtins-c = [\"std/compiler-builtins-c\"]\n compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n llvm-libunwind = [\"std/llvm-libunwind\"]\n+system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n panic-unwind = [\"std/panic_unwind\"]\n panic_immediate_abort = [\"std/panic_immediate_abort\"]\n profiler = [\"std/profiler\"]"}, {"sha": "4f7a304a59f68eaad969671c5d89c2e5feb465f4", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -23,3 +23,4 @@ cc = { version = \"1.0.1\" }\n \n [features]\n llvm-libunwind = []\n+system-llvm-libunwind = []"}, {"sha": "dbdefa471a9ed24a44268a3f2f9e459953ac2e5d", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -45,10 +45,24 @@ extern \"C\" {}\n // When building with crt-static, we get `gcc_eh` from the `libc` crate, since\n // glibc needs it, and needs it listed later on the linker command line. We\n // don't want to duplicate it here.\n-#[cfg(all(target_os = \"linux\", target_env = \"gnu\", not(feature = \"llvm-libunwind\")))]\n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    not(feature = \"llvm-libunwind\"),\n+    not(feature = \"system-llvm-libunwind\")\n+))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n extern \"C\" {}\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    not(feature = \"llvm-libunwind\"),\n+    feature = \"system-llvm-libunwind\"\n+))]\n+#[link(name = \"unwind\", cfg(not(target_feature = \"crt-static\")))]\n+extern \"C\" {}\n+\n #[cfg(target_os = \"redox\")]\n #[link(name = \"gcc_eh\", kind = \"static-nobundle\", cfg(target_feature = \"crt-static\"))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]"}, {"sha": "7698ff62880d6f76338f123a435bbb681e6c579a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -10,6 +10,7 @@ use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use crate::cache::{Interned, INTERNER};\n use crate::flags::Flags;\n@@ -65,7 +66,7 @@ pub struct Config {\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n-    pub llvm_libunwind: bool,\n+    pub llvm_libunwind: Option<LlvmLibunwind>,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -177,6 +178,32 @@ pub struct Config {\n     pub out: PathBuf,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq)]\n+pub enum LlvmLibunwind {\n+    No,\n+    InTree,\n+    System,\n+}\n+\n+impl Default for LlvmLibunwind {\n+    fn default() -> Self {\n+        Self::No\n+    }\n+}\n+\n+impl FromStr for LlvmLibunwind {\n+    type Err = String;\n+\n+    fn from_str(value: &str) -> Result<Self, Self::Err> {\n+        match value {\n+            \"no\" => Ok(Self::No),\n+            \"in-tree\" => Ok(Self::InTree),\n+            \"system\" => Ok(Self::System),\n+            invalid => Err(format!(\"Invalid value '{}' for rust.llvm-libunwind config.\", invalid)),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n@@ -457,7 +484,7 @@ struct Rust {\n     remap_debuginfo: Option<bool>,\n     jemalloc: Option<bool>,\n     test_compare_mode: Option<bool>,\n-    llvm_libunwind: Option<bool>,\n+    llvm_libunwind: Option<String>,\n     control_flow_guard: Option<bool>,\n     new_symbol_mangling: Option<bool>,\n }\n@@ -799,7 +826,9 @@ impl Config {\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.jemalloc, rust.jemalloc);\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n-            set(&mut config.llvm_libunwind, rust.llvm_libunwind);\n+            config.llvm_libunwind = rust\n+                .llvm_libunwind\n+                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel);\n             set(&mut config.rust_dist_src, rust.dist_src);"}, {"sha": "e156952d56f3d6c1b19bf0efab85dd5be57ab5f3", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -65,7 +65,7 @@ def v(*args):\n v(\"llvm-cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n v(\"llvm-ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n \n-o(\"llvm-libunwind\", \"rust.llvm-libunwind\", \"use LLVM libunwind\")\n+v(\"llvm-libunwind\", \"rust.llvm-libunwind\", \"use LLVM libunwind\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc."}, {"sha": "593d1c4ae884eba4b27fa1c1f6838b1072baf40f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -121,7 +121,7 @@ use std::os::windows::fs::symlink_file;\n use build_helper::{mtime, output, run, run_suppressed, t, try_run, try_run_suppressed};\n use filetime::FileTime;\n \n-use crate::config::TargetSelection;\n+use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{exe, libdir, CiEnv};\n \n mod builder;\n@@ -540,8 +540,10 @@ impl Build {\n     fn std_features(&self) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n-        if self.config.llvm_libunwind {\n-            features.push_str(\" llvm-libunwind\");\n+        match self.config.llvm_libunwind.unwrap_or_default() {\n+            LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),\n+            LlvmLibunwind::System => features.push_str(\" system-llvm-libunwind\"),\n+            LlvmLibunwind::No => {}\n         }\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");"}, {"sha": "b3de70e590574da44660114e83a802559a8d6be6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -37,7 +37,7 @@ type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n /// and `Some` of a vector of items if it was successfully expanded.\n ///\n /// `parent_module` refers to the parent of the *re-export*, not the original item.\n-pub fn try_inline(\n+crate fn try_inline(\n     cx: &DocContext<'_>,\n     parent_module: DefId,\n     res: Res,\n@@ -137,7 +137,7 @@ pub fn try_inline(\n     Some(ret)\n }\n \n-pub fn try_inline_glob(\n+crate fn try_inline_glob(\n     cx: &DocContext<'_>,\n     res: Res,\n     visited: &mut FxHashSet<DefId>,\n@@ -160,15 +160,15 @@ pub fn try_inline_glob(\n     }\n }\n \n-pub fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n+crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n     cx.tcx.get_attrs(did)\n }\n \n /// Record an external fully qualified name in the external_paths cache.\n ///\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n-pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n+crate fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n@@ -189,7 +189,7 @@ pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind)\n     }\n }\n \n-pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n+crate fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let trait_items =\n         cx.tcx.associated_items(did).in_definition_order().map(|item| item.clean(cx)).collect();\n \n@@ -284,7 +284,7 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n     type_.def_id().and_then(|did| build_ty(cx, did))\n }\n \n-pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n+crate fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     match cx.tcx.def_kind(did) {\n         DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n             Some(cx.tcx.type_of(did).clean(cx))\n@@ -295,7 +295,7 @@ pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n }\n \n /// Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport.\n-pub fn build_impls(\n+crate fn build_impls(\n     cx: &DocContext<'_>,\n     parent_module: Option<DefId>,\n     did: DefId,\n@@ -338,7 +338,7 @@ fn merge_attrs(\n }\n \n /// Builds a specific implementation of a type. The `did` could be a type method or trait method.\n-pub fn build_impl(\n+crate fn build_impl(\n     cx: &DocContext<'_>,\n     parent_module: impl Into<Option<DefId>>,\n     did: DefId,\n@@ -527,7 +527,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n     }\n }\n \n-pub fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n+crate fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n     if let Some(did) = did.as_local() {\n         let hir_id = cx.tcx.hir().local_def_id_to_hir_id(did);\n         rustc_hir_pretty::id_to_string(&cx.tcx.hir(), hir_id)\n@@ -644,7 +644,7 @@ fn separate_supertrait_bounds(\n     (g, ty_bounds)\n }\n \n-pub fn record_extern_trait(cx: &DocContext<'_>, did: DefId) {\n+crate fn record_extern_trait(cx: &DocContext<'_>, did: DefId) {\n     if did.is_local() {\n         return;\n     }"}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.default.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-pass.rs:5:12\n+  --> $DIR/bound-normalization-pass.rs:8:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr"}, {"sha": "3e6884ef10fa681154f57e0809e97ba3bed3e9e3", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,5 +1,8 @@\n // check-pass\n // edition:2018\n+// revisions: default sa\n+//[sa] compile-flags: -Z save-analysis\n+//-^ To make this the regression test for #75962.\n \n #![feature(type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]"}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.sa.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bound-normalization-pass.rs:8:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "2fd9f9a60de9f7a591289f9ad795b822205a5cda", "filename": "src/test/ui/issues/issue-75763.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fissues%2Fissue-75763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fissues%2Fissue-75763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75763.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -0,0 +1,15 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+struct Bug<const S: &'static str>;\n+\n+fn main() {\n+    let b: Bug::<{\n+        unsafe {\n+            // FIXME(const_generics): Decide on how to deal with invalid values as const params.\n+            std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5])\n+        }\n+    }>;\n+}"}, {"sha": "0e086968b90562fd06d6d682b0e52d7ca48860d7", "filename": "src/test/ui/issues/issue-76179.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fissues%2Fissue-76179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fissues%2Fissue-76179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76179.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+use std::io::Read;\n+\n+trait View {\n+    type Deserializers: Deserializer<Item = Self::RequestParams>;\n+    type RequestParams = DefaultRequestParams;\n+}\n+\n+struct DefaultRequestParams;\n+\n+trait Deserializer {\n+    type Item;\n+    fn deserialize(r: impl Read) -> Self::Item;\n+}\n+\n+fn main() {}"}, {"sha": "da8849a82844f33c0521cef0be5cc66cb91595a3", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 80, "deletions": 48, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,81 +1,113 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "811206f9aa076a26189a3564099caa850fa63985", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 80, "deletions": 48, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,81 +1,113 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "36c54628317e9721a2ac061558173d54e82cc943", "filename": "src/test/ui/nll/issue-57642-higher-ranked-subtype.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -0,0 +1,41 @@\n+// Regression test for issue #57642\n+// Tests that we reject a bad higher-ranked subtype\n+// with `#![feature(nll)]`\n+\n+#![feature(nll)]\n+\n+trait X {\n+    type G;\n+    fn make_g() -> Self::G;\n+}\n+\n+impl<'a> X for fn(&'a ()) {\n+    type G = &'a ();\n+\n+    fn make_g() -> Self::G {\n+        &()\n+    }\n+}\n+\n+trait Y {\n+    type F;\n+    fn make_f() -> Self::F;\n+}\n+\n+impl<T> Y for fn(T) {\n+    type F = fn(T);\n+\n+    fn make_f() -> Self::F {\n+        |_| {}\n+    }\n+}\n+\n+fn higher_ranked_region_has_lost_its_binder() {\n+    let x = <fn (&())>::make_g(); //~ ERROR no function\n+}\n+\n+fn magical() {\n+    let x = <fn (&())>::make_f(); //~ ERROR no function\n+}\n+\n+fn main() {}"}, {"sha": "f69098193429cece340dca3cbe253fe556fdfd2e", "filename": "src/test/ui/nll/issue-57642-higher-ranked-subtype.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -0,0 +1,31 @@\n+error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+  --> $DIR/issue-57642-higher-ranked-subtype.rs:34:25\n+   |\n+LL |     let x = <fn (&())>::make_g();\n+   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+   |\n+   = note: the method `make_g` exists but the following trait bounds were not satisfied:\n+           `for<'r> fn(&'r ()): X`\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `X` defines an item `make_g`, perhaps you need to implement it\n+  --> $DIR/issue-57642-higher-ranked-subtype.rs:7:1\n+   |\n+LL | trait X {\n+   | ^^^^^^^\n+\n+error[E0599]: no function or associated item named `make_f` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+  --> $DIR/issue-57642-higher-ranked-subtype.rs:38:25\n+   |\n+LL |     let x = <fn (&())>::make_f();\n+   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Y` defines an item `make_f`, perhaps you need to implement it\n+  --> $DIR/issue-57642-higher-ranked-subtype.rs:20:1\n+   |\n+LL | trait Y {\n+   | ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "cf3727c9d579d22447005d760edd68cdd2682434", "filename": "src/test/ui/parser/issue-62894.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -45,7 +45,7 @@ LL | fn main() {}\n    | \n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-LL |     ($left:expr, $right:expr) => ({\n+LL |     ($left:expr, $right:expr $(,)?) => ({\n    |      ---------- while parsing argument for this `expr` macro fragment\n \n error: aborting due to 4 previous errors"}, {"sha": "7b7ff08da7cac4b587d22700dce1ba8a3cac1729", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -5,11 +5,12 @@\n // (Normally, using `'static` would be preferred, but there are\n // times when that is not what you want.)\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n \n-fn b<'a>() -> &'a u32 { // OK: used only in return type\n+// OK: used only in return type\n+fn b<'a>() -> &'a u32 {\n     &22\n }\n "}, {"sha": "9082aa68ed22bede7e699d917134c664546c659d", "filename": "src/test/ui/single-use-lifetime/one-use-in-struct.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -2,27 +2,26 @@\n // even when they are only used once (since to not use a named\n // lifetime is illegal!)\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n enum Bar<'f> {\n-    Data(&'f u32)\n+    Data(&'f u32),\n }\n \n-trait Baz<'f> { }\n+trait Baz<'f> {}\n \n // `Derive`d impls shouldn't trigger a warning, either (Issue #53738).\n-\n #[derive(Debug)]\n struct Quux<'a> {\n     priors: &'a u32,\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f80f3f63c66d920bd6fb747a2559ef178b39f6d9", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-argument-and-return.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,14 +1,15 @@\n // Test that we DO NOT warn when lifetime name is used in\n // both the argument and return.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32) -> &'a u32 { // OK: used twice\n+// OK: used twice\n+fn c<'a>(x: &'a u32) -> &'a u32 {\n     &22\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "51724ebf898884f65600d83d5574a04767848383", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,16 +1,16 @@\n // Test that we DO NOT warn when lifetime name is used multiple\n // arguments, or more than once in a single argument.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32, y: &'a u32) { // OK: used twice\n-}\n+// OK: used twice\n+fn c<'a>(x: &'a u32, y: &'a u32) {}\n \n-fn d<'a>(x: (&'a u32, &'a u32)) { // OK: used twice\n-}\n+// OK: used twice\n+fn d<'a>(x: (&'a u32, &'a u32)) {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "125a395db3be31076460a8e06ba401785545f7c7", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-impl-header.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,18 +1,17 @@\n // Test that we DO NOT warn for a lifetime used twice in an impl.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Foo<'f> {\n-    fn inherent_a(&self, data: &'f u32) {\n-    }\n+    fn inherent_a(&self, data: &'f u32) {}\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "16431a39fd0e558b0f703d28a93d97f1894f4b85", "filename": "src/test/ui/single-use-lifetime/two-uses-in-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,14 +1,14 @@\n // Test that we DO NOT warn for a lifetime on an impl used in both\n // header and in an associated type.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Iterator for Foo<'f> {\n@@ -19,4 +19,4 @@ impl<'f> Iterator for Foo<'f> {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "164830fecee578fe159df2edd8010f4151cdf3d5", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -26,6 +26,7 @@\n // gate-test-rtm_target_feature\n // gate-test-f16c_target_feature\n // gate-test-riscv_target_feature\n+// gate-test-ermsb_target_feature\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "2d6abcc0a0150d46aabe57d95d84834d1424f043", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:30:18\n+  --> $DIR/gate.rs:31:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "93c246cb3f501273fd04fbbe743f21ad6e41a955", "filename": "src/test/ui/terminal-width/flag-json.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr?ref=28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "patch": "@@ -1,21 +1,29 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":244,\"byte_end\":246,\"line_start\":7,\"line_end\":7,\"column_start\":17,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":17,\"highlight_end\":19}],\"label\":\"expected `()`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":239,\"byte_end\":241,\"line_start\":7,\"line_end\":7,\"column_start\":12,\"column_end\":14,\"is_primary\":false,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":12,\"highlight_end\":14}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"error[E0308]: mismatched types\n   --> $DIR/flag-json.rs:7:17\n    |"}]}