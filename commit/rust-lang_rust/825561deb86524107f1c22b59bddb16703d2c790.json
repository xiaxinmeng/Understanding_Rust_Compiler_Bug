{"sha": "825561deb86524107f1c22b59bddb16703d2c790", "node_id": "C_kwDOAAsO6NoAKDgyNTU2MWRlYjg2NTI0MTA3ZjFjMjJiNTliZGRiMTY3MDNkMmM3OTA", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-05-30T02:48:59Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-30T13:56:09Z"}, "message": "feat: remove report_fixme option", "tree": {"sha": "0746dee74e4e6833e4b1bd351b55e6210d1b2469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0746dee74e4e6833e4b1bd351b55e6210d1b2469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825561deb86524107f1c22b59bddb16703d2c790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825561deb86524107f1c22b59bddb16703d2c790", "html_url": "https://github.com/rust-lang/rust/commit/825561deb86524107f1c22b59bddb16703d2c790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825561deb86524107f1c22b59bddb16703d2c790/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8db8593905d09a872601c445005a594ac632dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8db8593905d09a872601c445005a594ac632dc", "html_url": "https://github.com/rust-lang/rust/commit/4c8db8593905d09a872601c445005a594ac632dc"}], "stats": {"total": 102, "additions": 19, "deletions": 83}, "files": [{"sha": "edb2d1f757518fe886525283fed9562acae1db6d", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -2168,18 +2168,6 @@ mod sit;\n **Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\n of the original source code.\n \n-## `report_fixme`\n-\n-Report `FIXME` items in comments.\n-\n-- **Default value**: `\"Never\"`\n-- **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No (tracking issue: [#3394](https://github.com/rust-lang/rustfmt/issues/3394))\n-\n-Warns about any comments containing `FIXME` in them when set to `\"Always\"`. If\n-it contains a `#X` (with `X` being a number) in parentheses following the\n-`FIXME`, `\"Unnumbered\"` will ignore it.\n-\n ## `required_version`\n \n Require a specific version of rustfmt. If you want to make sure that the"}, {"sha": "fc724beae60a7ab0c8d99ce01fac25c7558bace6", "filename": "src/config/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -164,8 +164,6 @@ create_config! {\n     error_on_unformatted: bool, false, false,\n         \"Error if unable to get comments or string literals within max_width, \\\n          or they are left with trailing whitespaces\";\n-    report_fixme: ReportTactic, ReportTactic::Never, false,\n-        \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n     ignore: IgnoreList, IgnoreList::default(), false,\n         \"Skip formatting the specified files and directories\";\n \n@@ -623,7 +621,6 @@ skip_children = false\n hide_parse_errors = false\n error_on_line_overflow = false\n error_on_unformatted = false\n-report_fixme = \"Never\"\n ignore = []\n emit_mode = \"Files\"\n make_backup = false"}, {"sha": "72bbe240f7b9c9d7c5d13763251ae6a07369d2fd", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -497,7 +497,7 @@ impl<'a> FormatLines<'a> {\n         skipped_range: &'a [(usize, usize)],\n         config: &'a Config,\n     ) -> FormatLines<'a> {\n-        let issue_seeker = BadIssueSeeker::new(config.report_fixme());\n+        let issue_seeker = BadIssueSeeker::new();\n         FormatLines {\n             name,\n             skipped_range,"}, {"sha": "d95a80fe7fd952b0623ea14e1bbc64c1cab2b470", "filename": "src/issues.rs", "status": "modified", "additions": 18, "deletions": 66, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -6,8 +6,6 @@ use std::fmt;\n \n use crate::config::ReportTactic;\n \n-const FIX_ME_CHARS: &[char] = &['f', 'i', 'x', 'm', 'e'];\n-\n // Enabled implementation detail is here because it is\n // irrelevant outside the issues module\n fn is_enabled(report_tactic: ReportTactic) -> bool {\n@@ -16,7 +14,7 @@ fn is_enabled(report_tactic: ReportTactic) -> bool {\n \n #[derive(Clone, Copy)]\n enum Seeking {\n-    Issue { fixme_idx: usize },\n+    Issue {},\n     Number { issue: Issue, part: NumberPart },\n }\n \n@@ -30,7 +28,7 @@ enum NumberPart {\n \n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n pub struct Issue {\n-    issue_type: IssueType,\n+    issue_type: Option<IssueType>,\n     // Indicates whether we're looking for issues with missing numbers, or\n     // all issues of this type.\n     missing_number: bool,\n@@ -39,7 +37,7 @@ pub struct Issue {\n impl fmt::Display for Issue {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         let msg = match self.issue_type {\n-            IssueType::Fixme => \"FIXME\",\n+            _ => \"\",\n         };\n         let details = if self.missing_number {\n             \" without issue number\"\n@@ -52,9 +50,7 @@ impl fmt::Display for Issue {\n }\n \n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-enum IssueType {\n-    Fixme,\n-}\n+enum IssueType {}\n \n enum IssueClassification {\n     Good,\n@@ -64,27 +60,25 @@ enum IssueClassification {\n \n pub(crate) struct BadIssueSeeker {\n     state: Seeking,\n-    report_fixme: ReportTactic,\n }\n \n impl BadIssueSeeker {\n-    pub(crate) fn new(report_fixme: ReportTactic) -> BadIssueSeeker {\n+    pub(crate) fn new() -> BadIssueSeeker {\n         BadIssueSeeker {\n-            state: Seeking::Issue { fixme_idx: 0 },\n-            report_fixme,\n+            state: Seeking::Issue {},\n         }\n     }\n \n     pub(crate) fn is_disabled(&self) -> bool {\n-        !is_enabled(self.report_fixme)\n+        true\n     }\n \n     // Check whether or not the current char is conclusive evidence for an\n     // unnumbered TO-DO or FIX-ME.\n     pub(crate) fn inspect(&mut self, c: char) -> Option<Issue> {\n         match self.state {\n-            Seeking::Issue { fixme_idx } => {\n-                self.state = self.inspect_issue(c, fixme_idx);\n+            Seeking::Issue {} => {\n+                self.state = self.inspect_issue(c, 0);\n             }\n             Seeking::Number { issue, part } => {\n                 let result = self.inspect_number(c, issue, part);\n@@ -93,7 +87,7 @@ impl BadIssueSeeker {\n                     return None;\n                 }\n \n-                self.state = Seeking::Issue { fixme_idx: 0 };\n+                self.state = Seeking::Issue {};\n \n                 if let IssueClassification::Bad(issue) = result {\n                     return Some(issue);\n@@ -106,25 +100,10 @@ impl BadIssueSeeker {\n \n     fn inspect_issue(&mut self, c: char, mut fixme_idx: usize) -> Seeking {\n         if let Some(lower_case_c) = c.to_lowercase().next() {\n-            if is_enabled(self.report_fixme) && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n-                // Exploit the fact that the character sets of todo and fixme\n-                // are disjoint by adding else.\n-                fixme_idx += 1;\n-                if fixme_idx == FIX_ME_CHARS.len() {\n-                    return Seeking::Number {\n-                        issue: Issue {\n-                            issue_type: IssueType::Fixme,\n-                            missing_number: matches!(self.report_fixme, ReportTactic::Unnumbered),\n-                        },\n-                        part: NumberPart::OpenParen,\n-                    };\n-                }\n-            } else {\n-                fixme_idx = 0;\n-            }\n+            fixme_idx = 0;\n         }\n \n-        Seeking::Issue { fixme_idx }\n+        Seeking::Issue {}\n     }\n \n     fn inspect_number(\n@@ -175,59 +154,32 @@ impl BadIssueSeeker {\n #[test]\n fn find_unnumbered_issue() {\n     fn check_fail(text: &str, failing_pos: usize) {\n-        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n+        let mut seeker = BadIssueSeeker::new();\n         assert_eq!(\n             Some(failing_pos),\n             text.find(|c| seeker.inspect(c).is_some())\n         );\n     }\n \n     fn check_pass(text: &str) {\n-        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n+        let mut seeker = BadIssueSeeker::new();\n         assert_eq!(None, text.find(|c| seeker.inspect(c).is_some()));\n     }\n-\n-    check_fail(\" \\n FIXME\\n\", 8);\n-    check_fail(\"FIXME(\\n\", 6);\n-    check_fail(\"FIXME(#\\n\", 7);\n-    check_fail(\"FIXME(#1\\n\", 8);\n-    check_fail(\"FIXME(#)1\\n\", 7);\n-    check_pass(\"FIXME(#1222)\\n\");\n-    check_fail(\"FIXME(#12\\n22)\\n\", 9);\n-    check_pass(\"FIXME(@maintainer, #1222, hello)\\n\");\n }\n \n #[test]\n fn find_issue() {\n-    fn is_bad_issue(text: &str, report_fixme: ReportTactic) -> bool {\n-        let mut seeker = BadIssueSeeker::new(report_fixme);\n+    fn is_bad_issue(text: &str) -> bool {\n+        let mut seeker = BadIssueSeeker::new();\n         text.chars().any(|c| seeker.inspect(c).is_some())\n     }\n-\n-    assert!(is_bad_issue(\"This is a FIXME(#1)\\n\", ReportTactic::Always));\n-\n-    assert!(is_bad_issue(\n-        \"This is a FixMe(#1) mixed case\\n\",\n-        ReportTactic::Always,\n-    ));\n-\n-    assert!(!is_bad_issue(\"bad FIXME\\n\", ReportTactic::Never));\n }\n \n #[test]\n fn issue_type() {\n-    let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n+    let seeker = BadIssueSeeker::new();\n     let expected = Some(Issue {\n-        issue_type: IssueType::Fixme,\n+        issue_type: None,\n         missing_number: true,\n     });\n-\n-    assert_eq!(\n-        expected,\n-        \"Test. FIXME: bad, bad, not good\"\n-            .chars()\n-            .map(|c| seeker.inspect(c))\n-            .find(Option::is_some)\n-            .unwrap()\n-    );\n }"}, {"sha": "c3cfd34317a377132f034e8a22c028bfac0a932d", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -6,6 +6,5 @@ brace_style = \"SameLineWhere\"\n fn_args_layout = \"Tall\"\n trailing_comma = \"Vertical\"\n indent_style = \"Block\"\n-report_fixme = \"Never\"\n reorder_imports = false\n format_strings = true"}]}