{"sha": "72605cd267fa0a812e74ad8412738b4db37aca9d", "node_id": "C_kwDOAAsO6NoAKDcyNjA1Y2QyNjdmYTBhODEyZTc0YWQ4NDEyNzM4YjRkYjM3YWNhOWQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-12T06:49:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T02:20:44Z"}, "message": "Remove some unused type folders.\n\nI'm surprised the compiler doesn't warn about these. It appears having\nan `impl` on a struct is enough to avoid a warning about it never being\nconstructed.", "tree": {"sha": "735a75634e52321e5e5787db7f83612946d5497a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/735a75634e52321e5e5787db7f83612946d5497a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72605cd267fa0a812e74ad8412738b4db37aca9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72605cd267fa0a812e74ad8412738b4db37aca9d", "html_url": "https://github.com/rust-lang/rust/commit/72605cd267fa0a812e74ad8412738b4db37aca9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72605cd267fa0a812e74ad8412738b4db37aca9d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc400993eadea8a927cc5f96a15cc7c493c7a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc400993eadea8a927cc5f96a15cc7c493c7a88", "html_url": "https://github.com/rust-lang/rust/commit/bbc400993eadea8a927cc5f96a15cc7c493c7a88"}], "stats": {"total": 149, "additions": 4, "deletions": 145}, "files": [{"sha": "c173bd913a84c416d807f6ac77f2ccee5d58786e", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=72605cd267fa0a812e74ad8412738b4db37aca9d", "patch": "@@ -8,10 +8,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{\n-    self, ImplTraitInTraitData, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable,\n-    TypeVisitableExt,\n-};\n+use rustc_middle::ty::{self, ImplTraitInTraitData, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -874,28 +871,6 @@ fn infer_placeholder_type<'a>(\n     item_ident: Ident,\n     kind: &'static str,\n ) -> Ty<'a> {\n-    // Attempts to make the type nameable by turning FnDefs into FnPtrs.\n-    struct MakeNameable<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-    }\n-\n-    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for MakeNameable<'tcx> {\n-        fn interner(&self) -> TyCtxt<'tcx> {\n-            self.tcx\n-        }\n-\n-        fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-            let ty = match *ty.kind() {\n-                ty::FnDef(def_id, substs) => {\n-                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(def_id).subst(self.tcx, substs))\n-                }\n-                _ => ty,\n-            };\n-\n-            ty.super_fold_with(self)\n-        }\n-    }\n-\n     let ty = tcx.diagnostic_only_typeck(def_id).node_type(body_id.hir_id);\n \n     // If this came from a free `const` or `static mut?` item,"}, {"sha": "a52c94cb00c531621f9834b66a666d688a17bc5c", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=72605cd267fa0a812e74ad8412738b4db37aca9d", "patch": "@@ -12,9 +12,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{\n-    self, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n-};\n+use rustc_middle::ty::{self, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n@@ -965,21 +963,3 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n         }\n     }\n }\n-\n-struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n-\n-impl<'tcx> TypeFolder<TyCtxt<'tcx>> for TypeParamEraser<'_, 'tcx> {\n-    fn interner(&self) -> TyCtxt<'tcx> {\n-        self.0.tcx\n-    }\n-\n-    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        match ty.kind() {\n-            ty::Param(_) => self.0.next_ty_var(TypeVariableOrigin {\n-                kind: TypeVariableOriginKind::MiscVariable,\n-                span: self.1,\n-            }),\n-            _ => ty.super_fold_with(self),\n-        }\n-    }\n-}"}, {"sha": "96c1577d52bcb42aa08646552cc8cca24fd0e068", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 77, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=72605cd267fa0a812e74ad8412738b4db37aca9d", "patch": "@@ -7,8 +7,8 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n-    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n+    self, AdtDef, Discr, Term, Ty, TyCtxt, TypeFlags, TypeSuperVisitable, TypeVisitable,\n+    TypeVisitableExt, TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;\n@@ -1156,81 +1156,6 @@ where\n     }\n }\n \n-struct SkipBindersAt<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    index: ty::DebruijnIndex,\n-}\n-\n-impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n-    type Error = ();\n-\n-    fn interner(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n-    where\n-        T: ty::TypeFoldable<TyCtxt<'tcx>>,\n-    {\n-        self.index.shift_in(1);\n-        let value = t.try_map_bound(|t| t.try_fold_with(self));\n-        self.index.shift_out(1);\n-        value\n-    }\n-\n-    fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n-        if !ty.has_escaping_bound_vars() {\n-            Ok(ty)\n-        } else if let ty::Bound(index, bv) = *ty.kind() {\n-            if index == self.index {\n-                Err(())\n-            } else {\n-                Ok(self.interner().mk_bound(index.shifted_out(1), bv))\n-            }\n-        } else {\n-            ty.try_super_fold_with(self)\n-        }\n-    }\n-\n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n-        if !r.has_escaping_bound_vars() {\n-            Ok(r)\n-        } else if let ty::ReLateBound(index, bv) = r.kind() {\n-            if index == self.index {\n-                Err(())\n-            } else {\n-                Ok(self.interner().mk_re_late_bound(index.shifted_out(1), bv))\n-            }\n-        } else {\n-            r.try_super_fold_with(self)\n-        }\n-    }\n-\n-    fn try_fold_const(&mut self, ct: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n-        if !ct.has_escaping_bound_vars() {\n-            Ok(ct)\n-        } else if let ty::ConstKind::Bound(index, bv) = ct.kind() {\n-            if index == self.index {\n-                Err(())\n-            } else {\n-                Ok(self.interner().mk_const(\n-                    ty::ConstKind::Bound(index.shifted_out(1), bv),\n-                    ct.ty().try_fold_with(self)?,\n-                ))\n-            }\n-        } else {\n-            ct.try_super_fold_with(self)\n-        }\n-    }\n-\n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n-        if !p.has_escaping_bound_vars() { Ok(p) } else { p.try_super_fold_with(self) }\n-    }\n-}\n-\n /// Represents the projection of an associated type.\n ///\n /// For a projection, this would be `<Ty as Trait<...>>::N`."}, {"sha": "686631e5369fb7b658628e622c7b48b7dd85d12e", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72605cd267fa0a812e74ad8412738b4db37aca9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=72605cd267fa0a812e74ad8412738b4db37aca9d", "patch": "@@ -9,7 +9,6 @@ use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n use rustc_infer::infer::DefineOpaqueTypes;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{ImplPolarity, Region, RegionVid};\n \n@@ -851,23 +850,3 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         infcx.freshen(p)\n     }\n }\n-\n-/// Replaces all ReVars in a type with ty::Region's, using the provided map\n-pub struct RegionReplacer<'a, 'tcx> {\n-    vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n-    fn interner(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        (match *r {\n-            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned(),\n-            _ => None,\n-        })\n-        .unwrap_or_else(|| r.super_fold_with(self))\n-    }\n-}"}]}