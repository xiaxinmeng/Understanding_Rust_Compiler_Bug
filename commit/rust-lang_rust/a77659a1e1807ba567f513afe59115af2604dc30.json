{"sha": "a77659a1e1807ba567f513afe59115af2604dc30", "node_id": "C_kwDOAAsO6NoAKGE3NzY1OWExZTE4MDdiYTU2N2Y1MTNhZmU1OTExNWFmMjYwNGRjMzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T13:30:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T13:30:52Z"}, "message": "Auto merge of #112420 - matthiaskrgr:rollup-spiavw5, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #109953 (Use 128 bits for TypeId hash)\n - #112333 (Don't hold the active queries lock while calling `make_query`)\n - #112339 (Fix rust-analyzer proc macro server)\n - #112410 (Do `fix_*_builtin_expr` hacks on the writeback results)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3d507813954909a61748c9b07b1730c3149d3135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d507813954909a61748c9b07b1730c3149d3135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77659a1e1807ba567f513afe59115af2604dc30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77659a1e1807ba567f513afe59115af2604dc30", "html_url": "https://github.com/rust-lang/rust/commit/a77659a1e1807ba567f513afe59115af2604dc30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77659a1e1807ba567f513afe59115af2604dc30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7409258db4a43f23dcc66e10061dee91c316055", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7409258db4a43f23dcc66e10061dee91c316055", "html_url": "https://github.com/rust-lang/rust/commit/e7409258db4a43f23dcc66e10061dee91c316055"}, {"sha": "909bfa31ededd013472080860502608bbe9b2e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/909bfa31ededd013472080860502608bbe9b2e2a", "html_url": "https://github.com/rust-lang/rust/commit/909bfa31ededd013472080860502608bbe9b2e2a"}], "stats": {"total": 178, "additions": 117, "deletions": 61}, "files": [{"sha": "7192bbc00d55616720ff055ba37b7868373f3830", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n         }\n         sym::type_id => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n-            ConstValue::from_u64(tcx.type_id_hash(tp_ty).as_u64())\n+            ConstValue::from_u128(tcx.type_id_hash(tp_ty).as_u128())\n         }\n         sym::variant_count => match tp_ty.kind() {\n             // Correctly handles non-monomorphic calls, so there is no need for ensure_monomorphic_enough.\n@@ -169,7 +169,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ty = match intrinsic_name {\n                     sym::pref_align_of | sym::variant_count => self.tcx.types.usize,\n                     sym::needs_drop => self.tcx.types.bool,\n-                    sym::type_id => self.tcx.types.u64,\n+                    sym::type_id => self.tcx.types.u128,\n                     sym::type_name => self.tcx.mk_static_str(),\n                     _ => bug!(),\n                 };"}, {"sha": "36c468e77898692ea39b8d9940afc826de1dd8f3", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -217,7 +217,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::needs_drop => (1, Vec::new(), tcx.types.bool),\n \n             sym::type_name => (1, Vec::new(), tcx.mk_static_str()),\n-            sym::type_id => (1, Vec::new(), tcx.types.u64),\n+            sym::type_id => (1, Vec::new(), tcx.types.u128),\n             sym::offset => (2, vec![param(0), param(1)], param(0)),\n             sym::arith_offset => (\n                 1,"}, {"sha": "a395858262f04b3970ffc1041db84d6f50f5d31d", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt};\n-use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -148,31 +147,25 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         match e.kind {\n             hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {\n-                let inner_ty = self.fcx.node_ty(inner.hir_id);\n-                let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);\n+                let inner_ty = self.typeck_results.node_type(inner.hir_id);\n \n                 if inner_ty.is_scalar() {\n-                    let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n                 }\n             }\n             hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {\n-                let lhs_ty = self.fcx.node_ty(lhs.hir_id);\n-                let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);\n-\n-                let rhs_ty = self.fcx.node_ty(rhs.hir_id);\n-                let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);\n+                let lhs_ty = self.typeck_results.node_type(lhs.hir_id);\n+                let rhs_ty = self.typeck_results.node_type(rhs.hir_id);\n \n                 if lhs_ty.is_scalar() && rhs_ty.is_scalar() {\n-                    let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n \n                     match e.kind {\n                         hir::ExprKind::Binary(..) => {\n                             if !op.node.is_by_value() {\n-                                let mut adjustments = typeck_results.adjustments_mut();\n+                                let mut adjustments = self.typeck_results.adjustments_mut();\n                                 if let Some(a) = adjustments.get_mut(lhs.hir_id) {\n                                     a.pop();\n                                 }\n@@ -182,7 +175,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                             }\n                         }\n                         hir::ExprKind::AssignOp(..)\n-                            if let Some(a) = typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>\n+                            if let Some(a) = self.typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>\n                         {\n                             a.pop();\n                         }\n@@ -200,16 +193,14 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // if they are not we don't modify the expr, hence we bypass the ICE\n     fn is_builtin_index(\n         &mut self,\n-        typeck_results: &TypeckResults<'tcx>,\n         e: &hir::Expr<'_>,\n         base_ty: Ty<'tcx>,\n         index_ty: Ty<'tcx>,\n     ) -> bool {\n-        if let Some(elem_ty) = base_ty.builtin_index() {\n-            let Some(exp_ty) = typeck_results.expr_ty_opt(e) else {return false;};\n-            let resolved_exp_ty = self.resolve(exp_ty, &e.span);\n-\n-            elem_ty == resolved_exp_ty && index_ty == self.fcx.tcx.types.usize\n+        if let Some(elem_ty) = base_ty.builtin_index()\n+            && let Some(exp_ty) = self.typeck_results.expr_ty_opt(e)\n+        {\n+            elem_ty == exp_ty && index_ty == self.fcx.tcx.types.usize\n         } else {\n             false\n         }\n@@ -221,38 +212,34 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // usize-ish\n     fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         if let hir::ExprKind::Index(ref base, ref index) = e.kind {\n-            let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-\n             // All valid indexing looks like this; might encounter non-valid indexes at this point.\n-            let base_ty = typeck_results\n-                .expr_ty_adjusted_opt(base)\n-                .map(|t| self.fcx.resolve_vars_if_possible(t).kind());\n+            let base_ty = self.typeck_results.expr_ty_adjusted_opt(base);\n             if base_ty.is_none() {\n                 // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n                 // that isn't in the type table. We assume more relevant errors have already been\n                 // emitted, so we delay an ICE if none have. (#64638)\n                 self.tcx().sess.delay_span_bug(e.span, format!(\"bad base: `{:?}`\", base));\n             }\n-            if let Some(ty::Ref(_, base_ty, _)) = base_ty {\n-                let index_ty = typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {\n-                    // When encountering `return [0][0]` outside of a `fn` body we would attempt\n-                    // to access an nonexistent index. We assume that more relevant errors will\n-                    // already have been emitted, so we only gate on this with an ICE if no\n-                    // error has been emitted. (#64638)\n-                    self.fcx.tcx.ty_error_with_message(\n-                        e.span,\n-                        format!(\"bad index {:?} for base: `{:?}`\", index, base),\n-                    )\n-                });\n-                let index_ty = self.fcx.resolve_vars_if_possible(index_ty);\n-                let resolved_base_ty = self.resolve(*base_ty, &base.span);\n-\n-                if self.is_builtin_index(&typeck_results, e, resolved_base_ty, index_ty) {\n+            if let Some(base_ty) = base_ty\n+                && let ty::Ref(_, base_ty_inner, _) = *base_ty.kind()\n+            {\n+                let index_ty =\n+                    self.typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {\n+                        // When encountering `return [0][0]` outside of a `fn` body we would attempt\n+                        // to access an nonexistent index. We assume that more relevant errors will\n+                        // already have been emitted, so we only gate on this with an ICE if no\n+                        // error has been emitted. (#64638)\n+                        self.fcx.tcx.ty_error_with_message(\n+                            e.span,\n+                            format!(\"bad index {:?} for base: `{:?}`\", index, base),\n+                        )\n+                    });\n+                if self.is_builtin_index(e, base_ty_inner, index_ty) {\n                     // Remove the method call record\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n \n-                    if let Some(a) = typeck_results.adjustments_mut().get_mut(base.hir_id) {\n+                    if let Some(a) = self.typeck_results.adjustments_mut().get_mut(base.hir_id) {\n                         // Discard the need for a mutable borrow\n \n                         // Extra adjustment made when indexing causes a drop\n@@ -283,9 +270,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.fix_scalar_builtin_expr(e);\n-        self.fix_index_builtin_expr(e);\n-\n         match e.kind {\n             hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body);\n@@ -314,6 +298,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n \n         self.visit_node_id(e.span, e.hir_id);\n         intravisit::walk_expr(self, e);\n+\n+        self.fix_scalar_builtin_expr(e);\n+        self.fix_index_builtin_expr(e);\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {"}, {"sha": "0416411dfe14a6108258138cfa5b72dc9a036d34", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -97,6 +97,10 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::Scalar(Scalar::from_u64(i))\n     }\n \n+    pub fn from_u128(i: u128) -> Self {\n+        ConstValue::Scalar(Scalar::from_u128(i))\n+    }\n+\n     pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         ConstValue::Scalar(Scalar::from_target_usize(i, cx))\n     }\n@@ -240,6 +244,11 @@ impl<Prov> Scalar<Prov> {\n         Scalar::Int(i.into())\n     }\n \n+    #[inline]\n+    pub fn from_u128(i: u128) -> Self {\n+        Scalar::Int(i.into())\n+    }\n+\n     #[inline]\n     pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         Self::from_uint(i, cx.data_layout().pointer_size)"}, {"sha": "c9f69c37782e343db8b7bcf61ebf319fb5f28b88", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -11,7 +11,7 @@ use crate::ty::{\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -129,7 +129,7 @@ impl IntTypeExt for IntegerType {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n-    pub fn type_id_hash(self, ty: Ty<'tcx>) -> Hash64 {\n+    pub fn type_id_hash(self, ty: Ty<'tcx>) -> Hash128 {\n         // We want the type_id be independent of the types free regions, so we\n         // erase them. The erase_regions() call will also anonymize bound\n         // regions, which is desirable too."}, {"sha": "b2bc33c7e0de0ef82734d6d9565c87a1519df5e7", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -69,6 +69,8 @@ where\n         make_query: fn(Qcx, K) -> QueryStackFrame<D>,\n         jobs: &mut QueryMap<D>,\n     ) -> Option<()> {\n+        let mut active = Vec::new();\n+\n         #[cfg(parallel_compiler)]\n         {\n             // We use try_lock_shards here since we are called from the\n@@ -77,8 +79,7 @@ where\n             for shard in shards.iter() {\n                 for (k, v) in shard.iter() {\n                     if let QueryResult::Started(ref job) = *v {\n-                        let query = make_query(qcx, *k);\n-                        jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n+                        active.push((*k, job.clone()));\n                     }\n                 }\n             }\n@@ -91,12 +92,18 @@ where\n             // really hurt much.)\n             for (k, v) in self.active.try_lock()?.iter() {\n                 if let QueryResult::Started(ref job) = *v {\n-                    let query = make_query(qcx, *k);\n-                    jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n+                    active.push((*k, job.clone()));\n                 }\n             }\n         }\n \n+        // Call `make_query` while we're not holding a `self.active` lock as `make_query` may call\n+        // queries leading to a deadlock.\n+        for (key, job) in active {\n+            let query = make_query(qcx, key);\n+            jobs.insert(job.id, QueryJobInfo { query, job });\n+        }\n+\n         Some(())\n     }\n }"}, {"sha": "09f52d692d0aa78ba2a6dbe30ccc645a6a3d81dd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -153,6 +153,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n+use crate::hash;\n use crate::intrinsics;\n \n ///////////////////////////////////////////////////////////////////////////////\n@@ -662,10 +663,10 @@ impl dyn Any + Send + Sync {\n /// While `TypeId` implements `Hash`, `PartialOrd`, and `Ord`, it is worth\n /// noting that the hashes and ordering will vary between Rust releases. Beware\n /// of relying on them inside of your code!\n-#[derive(Clone, Copy, Debug, Hash, Eq, PartialOrd, Ord)]\n+#[derive(Clone, Copy, Debug, Eq, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {\n-    t: u64,\n+    t: u128,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -696,7 +697,31 @@ impl TypeId {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n-        TypeId { t: intrinsics::type_id::<T>() }\n+        #[cfg(bootstrap)]\n+        let t = intrinsics::type_id::<T>() as u128;\n+        #[cfg(not(bootstrap))]\n+        let t: u128 = intrinsics::type_id::<T>();\n+        TypeId { t }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl hash::Hash for TypeId {\n+    #[inline]\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        // We only hash the lower 64 bits of our (128 bit) internal numeric ID,\n+        // because:\n+        // - The hashing algorithm which backs `TypeId` is expected to be\n+        //   unbiased and high quality, meaning further mixing would be somewhat\n+        //   redundant compared to choosing (the lower) 64 bits arbitrarily.\n+        // - `Hasher::finish` returns a u64 anyway, so the extra entropy we'd\n+        //   get from hashing the full value would probably not be useful\n+        //   (especially given the previous point about the lower 64 bits being\n+        //   high quality on their own).\n+        // - It is correct to do so -- only hashing a subset of `self` is still\n+        //   with an `Eq` implementation that considers the entire value, as\n+        //   ours does.\n+        (self.t as u64).hash(state);\n     }\n }\n "}, {"sha": "9b8612485ac1ee58e87861e2809950b964466bc2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -1057,8 +1057,25 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     #[rustc_safe_intrinsic]\n     #[rustc_nounwind]\n+    #[cfg(bootstrap)]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n+    /// Gets an identifier which is globally unique to the specified type. This\n+    /// function will return the same value for a type regardless of whichever\n+    /// crate it is invoked in.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n+    #[rustc_safe_intrinsic]\n+    #[rustc_nounwind]\n+    #[cfg(not(bootstrap))]\n+    pub fn type_id<T: ?Sized + 'static>() -> u128;\n+\n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n     ///"}, {"sha": "962cbf758d4d5f28c87ff69bf24871ba2e204fcf", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -711,7 +711,7 @@ impl Step for RustAnalyzerProcMacroSrv {\n             tool: \"rust-analyzer-proc-macro-srv\",\n             mode: Mode::ToolStd,\n             path: \"src/tools/rust-analyzer/crates/proc-macro-srv-cli\",\n-            extra_features: vec![\"proc-macro-srv/sysroot-abi\".to_owned()],\n+            extra_features: vec![\"sysroot-abi\".to_owned()],\n             is_optional_tool: false,\n             source_type: SourceType::InTree,\n             allow_features: RustAnalyzer::ALLOW_FEATURES,"}, {"sha": "2443e517813917f2ca42b0cbe0e360876b553fa7", "filename": "tests/ui/traits/new-solver/normalized-const-built-in-op.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a77659a1e1807ba567f513afe59115af2604dc30/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77659a1e1807ba567f513afe59115af2604dc30/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs?ref=a77659a1e1807ba567f513afe59115af2604dc30", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+const fn foo() {\n+    let mut x = [1, 2, 3];\n+    // We need to fix up `<<[i32; 3] as Index<usize>>::Output as AddAssign>`\n+    // to be treated like a built-in operation.\n+    x[1] += 5;\n+}\n+\n+fn main() {}"}]}