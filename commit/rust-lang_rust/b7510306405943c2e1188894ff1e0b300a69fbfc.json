{"sha": "b7510306405943c2e1188894ff1e0b300a69fbfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTEwMzA2NDA1OTQzYzJlMTE4ODg5NGZmMWUwYjMwMGE2OWZiZmM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-19T02:40:20Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-19T02:40:20Z"}, "message": "Remove unnecessary wrap_str()", "tree": {"sha": "a98e6d0ecc316dd77850f57e3f000d711a6c6d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a98e6d0ecc316dd77850f57e3f000d711a6c6d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7510306405943c2e1188894ff1e0b300a69fbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7510306405943c2e1188894ff1e0b300a69fbfc", "html_url": "https://github.com/rust-lang/rust/commit/b7510306405943c2e1188894ff1e0b300a69fbfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7510306405943c2e1188894ff1e0b300a69fbfc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007c673012eef3cc9f812b5af4eea70f045caa43", "url": "https://api.github.com/repos/rust-lang/rust/commits/007c673012eef3cc9f812b5af4eea70f045caa43", "html_url": "https://github.com/rust-lang/rust/commit/007c673012eef3cc9f812b5af4eea70f045caa43"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "e06c928044a11de7c5d3b462ea5bf55afcefc713", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b7510306405943c2e1188894ff1e0b300a69fbfc", "patch": "@@ -36,7 +36,7 @@ use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,\n             last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, outer_attributes,\n             paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, stmt_expr,\n-            trimmed_last_line_width, wrap_str};\n+            trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -76,11 +76,7 @@ pub fn format_expr(\n             ast::LitKind::Str(_, ast::StrStyle::Cooked) => {\n                 rewrite_string_lit(context, l.span, shape)\n             }\n-            _ => wrap_str(\n-                context.snippet(expr.span),\n-                context.config.max_width(),\n-                shape,\n-            ),\n+            _ => Some(context.snippet(expr.span)),\n         },\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi(), expr.span.hi());\n@@ -153,11 +149,7 @@ pub fn format_expr(\n                 Some(ident) => format!(\" {}\", ident.node),\n                 None => String::new(),\n             };\n-            wrap_str(\n-                format!(\"continue{}\", id_str),\n-                context.config.max_width(),\n-                shape,\n-            )\n+            Some(format!(\"continue{}\", id_str))\n         }\n         ast::ExprKind::Break(ref opt_ident, ref opt_expr) => {\n             let id_str = match *opt_ident {\n@@ -168,17 +160,13 @@ pub fn format_expr(\n             if let Some(ref expr) = *opt_expr {\n                 rewrite_unary_prefix(context, &format!(\"break{} \", id_str), &**expr, shape)\n             } else {\n-                wrap_str(\n-                    format!(\"break{}\", id_str),\n-                    context.config.max_width(),\n-                    shape,\n-                )\n+                Some(format!(\"break{}\", id_str))\n             }\n         }\n         ast::ExprKind::Yield(ref opt_expr) => if let Some(ref expr) = *opt_expr {\n             rewrite_unary_prefix(context, \"yield \", &**expr, shape)\n         } else {\n-            wrap_str(\"yield\".to_string(), context.config.max_width(), shape)\n+            Some(\"yield\".to_string())\n         },\n         ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n             rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n@@ -190,17 +178,10 @@ pub fn format_expr(\n         ast::ExprKind::Mac(ref mac) => {\n             // Failure to rewrite a marco should not imply failure to\n             // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n-                wrap_str(\n-                    context.snippet(expr.span),\n-                    context.config.max_width(),\n-                    shape,\n-                )\n-            })\n-        }\n-        ast::ExprKind::Ret(None) => {\n-            wrap_str(\"return\".to_owned(), context.config.max_width(), shape)\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n+                .or_else(|| Some(context.snippet(expr.span)))\n         }\n+        ast::ExprKind::Ret(None) => Some(\"return\".to_owned()),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n             rewrite_unary_prefix(context, \"return \", &**expr, shape)\n         }\n@@ -302,16 +283,14 @@ pub fn format_expr(\n                     };\n                     rewrite_unary_suffix(context, &sp_delim, &*lhs, shape)\n                 }\n-                (None, None) => wrap_str(delim.into(), context.config.max_width(), shape),\n+                (None, None) => Some(delim.into()),\n             }\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n-        ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => wrap_str(\n-            context.snippet(expr.span),\n-            context.config.max_width(),\n-            shape,\n-        ),\n+        ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => {\n+            Some(context.snippet(expr.span))\n+        }\n         ast::ExprKind::Catch(ref block) => {\n             if let rw @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape) {\n                 rw\n@@ -383,7 +362,11 @@ where\n             .map(|first_line| first_line.ends_with('{'))\n             .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n-            return Some(format!(\"{}{}{}{}\", lhs_result, infix, rhs_result, suffix));\n+            let one_line_width = last_line_width(&lhs_result) + infix.len()\n+                + first_line_width(&rhs_result) + suffix.len();\n+            if one_line_width <= shape.width {\n+                return Some(format!(\"{}{}{}{}\", lhs_result, infix, rhs_result, suffix));\n+            }\n         }\n     }\n \n@@ -2665,11 +2648,7 @@ pub fn rewrite_field(\n     prefix_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return wrap_str(\n-            context.snippet(field.span()),\n-            context.config.max_width(),\n-            shape,\n-        );\n+        return Some(context.snippet(field.span()));\n     }\n     let name = &field.ident.node.to_string();\n     if field.is_shorthand {"}, {"sha": "9d35c83501f00100016f08e0bd571ee536581eee", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b7510306405943c2e1188894ff1e0b300a69fbfc", "patch": "@@ -32,7 +32,7 @@ use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_a\n             format_constness, format_defaultness, format_mutability, format_unsafety,\n             format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n             last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, stmt_expr,\n-            trim_newlines, trimmed_last_line_width, wrap_str};\n+            trim_newlines, trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -1361,8 +1361,7 @@ pub fn rewrite_struct_field(\n     lhs_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        let span = context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi()));\n-        return wrap_str(span, context.config.max_width(), shape);\n+        return Some(context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi())));\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);"}, {"sha": "14c50563baa6b149a5b941dddb1e58470eda840c", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b7510306405943c2e1188894ff1e0b300a69fbfc", "patch": "@@ -24,7 +24,6 @@ extern crate syntax;\n extern crate term;\n extern crate unicode_segmentation;\n \n-use std::borrow::Cow;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};"}, {"sha": "c58a98627ff51b5fc0c6a162ec51c2984ac26745", "filename": "src/patterns.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=b7510306405943c2e1188894ff1e0b300a69fbfc", "patch": "@@ -22,7 +22,7 @@ use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_sh\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use types::{rewrite_path, PathContext};\n-use utils::{format_mutability, mk_sp, wrap_str};\n+use utils::{format_mutability, mk_sp};\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n@@ -51,8 +51,7 @@ impl Rewrite for Pat {\n                     None => \"\".to_owned(),\n                 };\n \n-                let result = format!(\"{}{}{}{}\", prefix, mut_infix, id_str, sub_pat);\n-                wrap_str(result, context.config.max_width(), shape)\n+                Some(format!(\"{}{}{}{}\", prefix, mut_infix, id_str, sub_pat))\n             }\n             PatKind::Wild => if 1 <= shape.width {\n                 Some(\"_\".to_owned())\n@@ -125,17 +124,13 @@ impl Rewrite for Pat {\n                 } else {\n                     format!(\"[{}]\", pats.join(\", \"))\n                 };\n-                wrap_str(result, context.config.max_width(), shape)\n+                Some(result)\n             }\n             PatKind::Struct(ref path, ref fields, elipses) => {\n                 rewrite_struct_pat(path, fields, elipses, self.span, context, shape)\n             }\n             // FIXME(#819) format pattern macros.\n-            PatKind::Mac(..) => wrap_str(\n-                context.snippet(self.span),\n-                context.config.max_width(),\n-                shape,\n-            ),\n+            PatKind::Mac(..) => Some(context.snippet(self.span)),\n         }\n     }\n }\n@@ -225,11 +220,21 @@ impl Rewrite for FieldPat {\n         if self.is_shorthand {\n             pat\n         } else {\n-            wrap_str(\n-                format!(\"{}: {}\", self.ident.to_string(), try_opt!(pat)),\n-                context.config.max_width(),\n-                shape,\n-            )\n+            let pat_str = try_opt!(pat);\n+            let id_str = self.ident.to_string();\n+            let one_line_width = id_str.len() + 2 + pat_str.len();\n+            if one_line_width <= shape.width {\n+                Some(format!(\"{}: {}\", id_str, pat_str))\n+            } else {\n+                let nested_shape = shape.block_indent(context.config.tab_spaces());\n+                let pat_str = try_opt!(self.pat.rewrite(context, nested_shape));\n+                Some(format!(\n+                    \"{}:\\n{}{}\",\n+                    id_str,\n+                    nested_shape.indent.to_string(context.config),\n+                    pat_str,\n+                ))\n+            }\n         }\n     }\n }"}, {"sha": "311192889d3279401aa53599997e549c84c356db", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7510306405943c2e1188894ff1e0b300a69fbfc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b7510306405943c2e1188894ff1e0b300a69fbfc", "patch": "@@ -26,7 +26,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n             SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n-use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n+use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -504,7 +504,7 @@ impl Rewrite for ast::WherePredicate {\n             }\n         };\n \n-        wrap_str(result, context.config.max_width(), shape)\n+        Some(result)\n     }\n }\n \n@@ -542,7 +542,7 @@ where\n             colon,\n             join_bounds(context, try_opt!(shape.sub_width(overhead)), &appendix)\n         );\n-        wrap_str(result, context.config.max_width(), shape)\n+        Some(result)\n     }\n }\n \n@@ -565,12 +565,8 @@ impl Rewrite for ast::TyParamBound {\n }\n \n impl Rewrite for ast::Lifetime {\n-    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        wrap_str(\n-            pprust::lifetime_to_string(self),\n-            context.config.max_width(),\n-            shape,\n-        )\n+    fn rewrite(&self, _: &RewriteContext, _: Shape) -> Option<String> {\n+        Some(pprust::lifetime_to_string(self))\n     }\n }\n \n@@ -612,7 +608,7 @@ impl Rewrite for ast::TyParam {\n             result.push_str(&rewrite);\n         }\n \n-        wrap_str(result, context.config.max_width(), shape)\n+        Some(result)\n     }\n }\n "}]}