{"sha": "b54381640d0cd844f6a739812eaaa202f08aeb03", "node_id": "C_kwDOAAsO6NoAKGI1NDM4MTY0MGQwY2Q4NDRmNmE3Mzk4MTJlYWFhMjAyZjA4YWViMDM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-30T03:08:27Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-31T20:11:01Z"}, "message": "Reference Chunks::next_back in more of the chunk iterators safety comments", "tree": {"sha": "81c06420cc7efb187aae62e04aad320adf20fc57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c06420cc7efb187aae62e04aad320adf20fc57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54381640d0cd844f6a739812eaaa202f08aeb03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmF++FUACgkQ4u/UMJ4R\nyKjE9g//QvW/yHH3kbpcDoHcUDeASmX1j8YLx8RdR7UIuo98aam03kpStJ3xV3Rw\nB/l1rJNX0Fr7EIAfnf3wr8l4lBOKpLrHUMMWmiBLzXfY3dBcS5/kqbvSz+fVA/jy\nzZHo7VXqP4f4fodq1ovEC3WhFz3Mz8j0DgNHzKMHwDoI8zp0106cl3pkYvVhyUi7\nM6c/dsBzzjxpURnGWss/XDzUn8qkon1LKS6y8VDv/IQvM7t6NzzYlN86+Sq8kkjt\nxsWzL8jOqGosjqlX0OCdExvTV2BCLUlnPGWdU5d0T2wtmI5XYTu2o0edBiXMDlIk\nJpzbplYNm5yy0uDkgQPGAsZaW0tNf7qHsTS3Nt5jSOGoESEPpIXSbosXGXW7ty2/\nk/+7wcjWiYgQByTspek5gWE1pm7CnvBSpVYh2YZH6UrJLWilZhxTU254z28ba5h8\nArrkKpi5ufkNh7cFz1svRJDU3uXlTeQMmTBC2IwKrKF0E3Op8joYSAmZ537m8Yze\nipJrdK9O1fVeGKbVnSmqfxheUHAuHjNV0OlLQ/T10U+dsCUo9773Kb2qljriRZ2d\nacgBl//K2ah0cG23ny8qo9uJ2jNOXd7KFJYVZwmUqMfDzPgMV1KaupnCSdDBaLl4\n1ji3IYNtrql12cK0Tg9JRFNth7Qt4t9oATOvGfLEDiPOM6ck12M=\n=JoXw\n-----END PGP SIGNATURE-----", "payload": "tree 81c06420cc7efb187aae62e04aad320adf20fc57\nparent e81fefaa5096b22c79d13df70eb59d2d66cc536c\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1635563307 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1635711061 -0700\n\nReference Chunks::next_back in more of the chunk iterators safety comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54381640d0cd844f6a739812eaaa202f08aeb03", "html_url": "https://github.com/rust-lang/rust/commit/b54381640d0cd844f6a739812eaaa202f08aeb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54381640d0cd844f6a739812eaaa202f08aeb03/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81fefaa5096b22c79d13df70eb59d2d66cc536c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81fefaa5096b22c79d13df70eb59d2d66cc536c", "html_url": "https://github.com/rust-lang/rust/commit/e81fefaa5096b22c79d13df70eb59d2d66cc536c"}], "stats": {"total": 36, "additions": 2, "deletions": 34}, "files": [{"sha": "27fcb8b533203b0fa9bb27d91b5f75196ed3279d", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b54381640d0cd844f6a739812eaaa202f08aeb03/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54381640d0cd844f6a739812eaaa202f08aeb03/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=b54381640d0cd844f6a739812eaaa202f08aeb03", "patch": "@@ -1653,25 +1653,7 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n             let sz = if remainder != 0 { remainder } else { self.chunk_size };\n             let tmp = mem::replace(&mut self.v, &mut []);\n             let tmp_len = tmp.len();\n-            // SAFETY: split_at_unchecked requires the argument be less than or\n-            // equal to the length. This is guaranteed, but subtle: We need the\n-            // expression `tmp_len - sz` not to overflow, which means we need\n-            // `sz >= tmp_len`.\n-            //\n-            // `sz` will always either be `tmp_or_v.len() % self.chunk_size`\n-            // (where `tmp_or_v` is the slice that at the time was `self.v` but\n-            // now is `tmp`, and thus `tmp_len` and `tmp_or_v.len()` are the\n-            // same), which will always evaluate to strictly less than\n-            // `tmp_or_v.len()` (or panic, in the case that `self.chunk_size` is\n-            // zero), or it can be `self.chunk_size`, in the case that the\n-            // length is exactly divisible by the chunk size.\n-            //\n-            // While it seems like using `self.chunk_size` in this case could\n-            // lead to a value greater than `tmp_len`, it cannot: if\n-            // `self.chunk_size` were greater than `tmp_len`, then\n-            // `tmp_or_v.len() % self.chunk_size` would have returned non-zero\n-            // (note that in this branch of the `if`, we already know that\n-            // `self.v` is non-empty).\n+            // SAFETY: Similar to `Chunks::next_back`\n             let (head, tail) = unsafe { tmp.split_at_mut_unchecked(tmp_len - sz) };\n             self.v = head;\n             Some(tail)\n@@ -2691,21 +2673,7 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n             let remainder = self.v.len() % self.chunk_size;\n             let sz = if remainder != 0 { remainder } else { self.chunk_size };\n             let tmp = mem::replace(&mut self.v, &mut []);\n-            // SAFETY: split_at_mut_unchecked requires the argument be less than\n-            // or equal to the length. This is guaranteed, but subtle: `chunksz`\n-            // will always either be `tmp_or_v.len() % self.chunk_size` (where\n-            // `tmp_or_v` is the slice that at the time was `self.v` but now is\n-            // `tmp`), which will always evaluate to strictly less than\n-            // `tmp_or_v.len()` (or panic, in the case that `self.chunk_size` is\n-            // zero), or it can be `self.chunk_size`, in the case that the\n-            // length is exactly divisible by the chunk size.\n-            //\n-            // While it seems like using `self.chunk_size` in this case could\n-            // lead to a value greater than `tmp_or_v.len()`, it cannot: if\n-            // `self.chunk_size` were greater than `tmp_or_v.len()`, then\n-            // `tmp_or_v.len() % self.chunk_size` would return nonzero (note\n-            // that in this branch of the `if`, we already know that `tmp_or_v`\n-            // is non-empty).\n+            // SAFETY: Similar to `Chunks::next_back`\n             let (head, tail) = unsafe { tmp.split_at_mut_unchecked(sz) };\n             self.v = tail;\n             Some(head)"}]}