{"sha": "b654555a32baa44872587ac170fe02af14db0b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTQ1NTVhMzJiYWE0NDg3MjU4N2FjMTcwZmUwMmFmMTRkYjBiNzQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-04T02:44:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T02:44:55Z"}, "message": "Rollup merge of #75699 - notriddle:drop-bounds-lint, r=petrochenkov\n\nUplift drop-bounds lint from clippy\n\nBounds on `T: Drop` do nothing, so they should warn.", "tree": {"sha": "a4facea1d2bf1118e8830734afd0cf2c6128f3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4facea1d2bf1118e8830734afd0cf2c6128f3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b654555a32baa44872587ac170fe02af14db0b74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfeTcnCRBK7hj4Ov3rIwAAdHIIACiCWGwk5YLzV4DIqxshx8aG\necXkWZH0lUgwqic4f3wjVPNV5PxrXg/HpV4bC2RmCzMWpxm1Gm4dU9+5YDOeQfih\ngnOBnQXF/Tkj2bSidXD7bi1bL4hTuVUGmFzfYhUDfDrmABmfzSLCuxzatZQCm6t3\npSZsH+d4fhTCst77U4NksmhpDj55ggqY/zoxrxJnV66di0SO2ux5DxLuTMiE+iAd\n/C8W3tLcbXVREHWFCb2/+vyxtdrao2ITnAFV1JlXOBhvwzSgwRQAJMA7bY8fnpYH\neZfkvJMz1ZTZw/3Oex78I/ajU3Nd4FomCjaF8BMsB8FSOqnmmvItXENBuKUey/U=\n=f+Zf\n-----END PGP SIGNATURE-----\n", "payload": "tree a4facea1d2bf1118e8830734afd0cf2c6128f3bb\nparent 6e25418474ae9961e50bd3ff076d80a3ec728531\nparent dceb81af1ea4cbefd5e8bf49f738e03e9e3fac9c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601779495 +0900\ncommitter GitHub <noreply@github.com> 1601779495 +0900\n\nRollup merge of #75699 - notriddle:drop-bounds-lint, r=petrochenkov\n\nUplift drop-bounds lint from clippy\n\nBounds on `T: Drop` do nothing, so they should warn.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b654555a32baa44872587ac170fe02af14db0b74", "html_url": "https://github.com/rust-lang/rust/commit/b654555a32baa44872587ac170fe02af14db0b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b654555a32baa44872587ac170fe02af14db0b74/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e25418474ae9961e50bd3ff076d80a3ec728531", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e25418474ae9961e50bd3ff076d80a3ec728531", "html_url": "https://github.com/rust-lang/rust/commit/6e25418474ae9961e50bd3ff076d80a3ec728531"}, {"sha": "dceb81af1ea4cbefd5e8bf49f738e03e9e3fac9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dceb81af1ea4cbefd5e8bf49f738e03e9e3fac9c", "html_url": "https://github.com/rust-lang/rust/commit/dceb81af1ea4cbefd5e8bf49f738e03e9e3fac9c"}], "stats": {"total": 298, "additions": 187, "deletions": 111}, "files": [{"sha": "49e80f9d8a531741b5d8e1c19cd219a66ee4a080", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -53,6 +53,7 @@ mod non_ascii_idents;\n mod nonstandard_style;\n mod passes;\n mod redundant_semicolon;\n+mod traits;\n mod types;\n mod unused;\n \n@@ -75,6 +76,7 @@ use internal::*;\n use non_ascii_idents::*;\n use nonstandard_style::*;\n use redundant_semicolon::*;\n+use traits::*;\n use types::*;\n use unused::*;\n \n@@ -157,6 +159,7 @@ macro_rules! late_lint_passes {\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n+                DropTraitConstraints: DropTraitConstraints,\n             ]\n         );\n     };"}, {"sha": "d4f79036e5a180f92d67d1529b8709041fd73061", "filename": "compiler/rustc_lint/src/traits.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -0,0 +1,79 @@\n+use crate::LateContext;\n+use crate::LateLintPass;\n+use crate::LintContext;\n+use rustc_hir as hir;\n+use rustc_span::symbol::sym;\n+\n+declare_lint! {\n+    /// The `drop_bounds` lint checks for generics with `std::ops::Drop` as\n+    /// bounds.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo<T: Drop>() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `Drop` bounds do not really accomplish anything. A type may have\n+    /// compiler-generated drop glue without implementing the `Drop` trait\n+    /// itself. The `Drop` trait also only has one method, `Drop::drop`, and\n+    /// that function is by fiat not callable in user code. So there is really\n+    /// no use case for using `Drop` in trait bounds.\n+    ///\n+    /// The most likely use case of a drop bound is to distinguish between\n+    /// types that have destructors and types that don't. Combined with\n+    /// specialization, a naive coder would write an implementation that\n+    /// assumed a type could be trivially dropped, then write a specialization\n+    /// for `T: Drop` that actually calls the destructor. Except that doing so\n+    /// is not correct; String, for example, doesn't actually implement Drop,\n+    /// but because String contains a Vec, assuming it can be trivially dropped\n+    /// will leak memory.\n+    pub DROP_BOUNDS,\n+    Warn,\n+    \"bounds of the form `T: Drop` are useless\"\n+}\n+\n+declare_lint_pass!(\n+    /// Lint for bounds of the form `T: Drop`, which usually\n+    /// indicate an attempt to emulate `std::mem::needs_drop`.\n+    DropTraitConstraints => [DROP_BOUNDS]\n+);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        use rustc_middle::ty::PredicateAtom::*;\n+\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        let predicates = cx.tcx.explicit_predicates_of(def_id);\n+        for &(predicate, span) in predicates.predicates {\n+            let trait_predicate = match predicate.skip_binders() {\n+                Trait(trait_predicate, _constness) => trait_predicate,\n+                _ => continue,\n+            };\n+            let def_id = trait_predicate.trait_ref.def_id;\n+            if cx.tcx.lang_items().drop_trait() == Some(def_id) {\n+                // Explicitly allow `impl Drop`, a drop-guards-as-Voldemort-type pattern.\n+                if trait_predicate.trait_ref.self_ty().is_impl_trait() {\n+                    continue;\n+                }\n+                cx.struct_span_lint(DROP_BOUNDS, span, |lint| {\n+                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n+                        Some(needs_drop) => needs_drop,\n+                        None => return,\n+                    };\n+                    let msg = format!(\n+                        \"bounds on `{}` are useless, consider instead \\\n+                         using `{}` to detect if a type has a destructor\",\n+                        predicate,\n+                        cx.tcx.def_path_str(needs_drop)\n+                    );\n+                    lint.build(&msg).emit()\n+                });\n+            }\n+        }\n+    }\n+}"}, {"sha": "a2c7da6e6958e2c9dacd0d9453ebee368157cf85", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -568,6 +568,7 @@ pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[inline]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n+#[rustc_diagnostic_item = \"needs_drop\"]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }"}, {"sha": "063efc7b31abde057f5fcac4778e846d26fe14be", "filename": "src/test/ui/drop-bounds/drop-bounds-impl-drop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![deny(drop_bounds)]\n+// As a special exemption, `impl Drop` in the return position raises no error.\n+// This allows a convenient way to return an unnamed drop guard.\n+fn voldemort_type() -> impl Drop {\n+  struct Voldemort;\n+  impl Drop for Voldemort {\n+    fn drop(&mut self) {}\n+  }\n+  Voldemort\n+}\n+fn main() {\n+  let _ = voldemort_type();\n+}"}, {"sha": "c73538278d3be9cc8cf0637c04d046eca43e6b32", "filename": "src/test/ui/drop-bounds/drop-bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -0,0 +1,19 @@\n+#![deny(drop_bounds)]\n+fn foo<T: Drop>() {} //~ ERROR\n+fn bar<U>()\n+where\n+    U: Drop, //~ ERROR\n+{\n+}\n+fn baz(_x: impl Drop) {} //~ ERROR\n+struct Foo<T: Drop> { //~ ERROR\n+  _x: T\n+}\n+struct Bar<U> where U: Drop { //~ ERROR\n+  _x: U\n+}\n+trait Baz: Drop { //~ ERROR\n+}\n+impl<T: Drop> Baz for T { //~ ERROR\n+}\n+fn main() {}"}, {"sha": "15ba4c9a649890476bc906881b0dafc1a14b2a9c", "filename": "src/test/ui/drop-bounds/drop-bounds.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -0,0 +1,50 @@\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:2:11\n+   |\n+LL | fn foo<T: Drop>() {}\n+   |           ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/drop-bounds.rs:1:9\n+   |\n+LL | #![deny(drop_bounds)]\n+   |         ^^^^^^^^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:5:8\n+   |\n+LL |     U: Drop,\n+   |        ^^^^\n+\n+error: bounds on `impl Drop: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:8:17\n+   |\n+LL | fn baz(_x: impl Drop) {}\n+   |                 ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:9:15\n+   |\n+LL | struct Foo<T: Drop> {\n+   |               ^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:12:24\n+   |\n+LL | struct Bar<U> where U: Drop {\n+   |                        ^^^^\n+\n+error: bounds on `Self: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:15:12\n+   |\n+LL | trait Baz: Drop {\n+   |            ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:17:9\n+   |\n+LL | impl<T: Drop> Baz for T {\n+   |         ^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "c5884361dff9d313fae87dd86a20281b93defa43", "filename": "src/tools/clippy/clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -163,3 +163,12 @@ declare_deprecated_lint! {\n     pub REGEX_MACRO,\n     \"the regex! macro has been removed from the regex crate in 2018\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `drop_bounds`.\n+    pub DROP_BOUNDS,\n+    \"this lint has been uplifted to rustc and is now called `drop_bounds`\"\n+}"}, {"sha": "ec3b6afa6300f13b76f17e40337b3efaeabfbeec", "filename": "src/tools/clippy/clippy_lints/src/drop_bounds.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=6e25418474ae9961e50bd3ff076d80a3ec728531", "patch": "@@ -1,73 +0,0 @@\n-use crate::utils::{match_def_path, paths, span_lint};\n-use if_chain::if_chain;\n-use rustc_hir::{GenericBound, GenericParam, WhereBoundPredicate, WherePredicate};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for generics with `std::ops::Drop` as bounds.\n-    ///\n-    /// **Why is this bad?** `Drop` bounds do not really accomplish anything.\n-    /// A type may have compiler-generated drop glue without implementing the\n-    /// `Drop` trait itself. The `Drop` trait also only has one method,\n-    /// `Drop::drop`, and that function is by fiat not callable in user code.\n-    /// So there is really no use case for using `Drop` in trait bounds.\n-    ///\n-    /// The most likely use case of a drop bound is to distinguish between types\n-    /// that have destructors and types that don't. Combined with specialization,\n-    /// a naive coder would write an implementation that assumed a type could be\n-    /// trivially dropped, then write a specialization for `T: Drop` that actually\n-    /// calls the destructor. Except that doing so is not correct; String, for\n-    /// example, doesn't actually implement Drop, but because String contains a\n-    /// Vec, assuming it can be trivially dropped will leak memory.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// fn foo<T: Drop>() {}\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// fn foo<T>() {}\n-    /// ```\n-    pub DROP_BOUNDS,\n-    correctness,\n-    \"bounds of the form `T: Drop` are useless\"\n-}\n-\n-const DROP_BOUNDS_SUMMARY: &str = \"bounds of the form `T: Drop` are useless, \\\n-                                   use `std::mem::needs_drop` to detect if a type has drop glue\";\n-\n-declare_lint_pass!(DropBounds => [DROP_BOUNDS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for DropBounds {\n-    fn check_generic_param(&mut self, cx: &LateContext<'tcx>, p: &'tcx GenericParam<'_>) {\n-        for bound in p.bounds.iter() {\n-            lint_bound(cx, bound);\n-        }\n-    }\n-    fn check_where_predicate(&mut self, cx: &LateContext<'tcx>, p: &'tcx WherePredicate<'_>) {\n-        if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounds, .. }) = p {\n-            for bound in *bounds {\n-                lint_bound(cx, bound);\n-            }\n-        }\n-    }\n-}\n-\n-fn lint_bound<'tcx>(cx: &LateContext<'tcx>, bound: &'tcx GenericBound<'_>) {\n-    if_chain! {\n-        if let GenericBound::Trait(t, _) = bound;\n-        if let Some(def_id) = t.trait_ref.path.res.opt_def_id();\n-        if match_def_path(cx, def_id, &paths::DROP_TRAIT);\n-        then {\n-            span_lint(\n-                cx,\n-                DROP_BOUNDS,\n-                t.span,\n-                DROP_BOUNDS_SUMMARY\n-            );\n-        }\n-    }\n-}"}, {"sha": "70efdaeb9c6690ee242fe32707814ee293efbf91", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -179,7 +179,6 @@ mod derive;\n mod doc;\n mod double_comparison;\n mod double_parens;\n-mod drop_bounds;\n mod drop_forget_ref;\n mod duration_subsec;\n mod else_if_without_else;\n@@ -478,6 +477,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::regex_macro\",\n         \"the regex! macro has been removed from the regex crate in 2018\",\n     );\n+    store.register_removed(\n+        \"clippy::drop_bounds\",\n+        \"this lint has been uplifted to rustc and is now called `drop_bounds`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -532,7 +535,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n         &double_parens::DOUBLE_PARENS,\n-        &drop_bounds::DROP_BOUNDS,\n         &drop_forget_ref::DROP_COPY,\n         &drop_forget_ref::DROP_REF,\n         &drop_forget_ref::FORGET_COPY,\n@@ -959,7 +961,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n     store.register_late_pass(|| box derive::Derive);\n     store.register_late_pass(|| box types::CharLitAsU8);\n-    store.register_late_pass(|| box drop_bounds::DropBounds);\n     store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n     store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n     store.register_late_pass(|| box empty_enum::EmptyEnum);\n@@ -1282,7 +1283,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n         LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n         LintId::of(&double_parens::DOUBLE_PARENS),\n-        LintId::of(&drop_bounds::DROP_BOUNDS),\n         LintId::of(&drop_forget_ref::DROP_COPY),\n         LintId::of(&drop_forget_ref::DROP_REF),\n         LintId::of(&drop_forget_ref::FORGET_COPY),\n@@ -1714,7 +1714,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n         LintId::of(&derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(&drop_bounds::DROP_BOUNDS),\n         LintId::of(&drop_forget_ref::DROP_COPY),\n         LintId::of(&drop_forget_ref::DROP_REF),\n         LintId::of(&drop_forget_ref::FORGET_COPY),"}, {"sha": "be837a61dc07e99e39a9362f4b07618c73331e08", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -31,7 +31,6 @@ pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n-pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];"}, {"sha": "f6d529de9a3a20beb7c88345cc0e6bafe248cc6b", "filename": "src/tools/clippy/src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -423,13 +423,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"double_parens\",\n     },\n-    Lint {\n-        name: \"drop_bounds\",\n-        group: \"correctness\",\n-        desc: \"bounds of the form `T: Drop` are useless\",\n-        deprecation: None,\n-        module: \"drop_bounds\",\n-    },\n     Lint {\n         name: \"drop_copy\",\n         group: \"correctness\","}, {"sha": "9e32fe36ece4dc09426703a7d96d3f250cf9fee7", "filename": "src/tools/clippy/tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -8,5 +8,6 @@\n #[warn(clippy::into_iter_on_array)]\n #[warn(clippy::unused_label)]\n #[warn(clippy::regex_macro)]\n+#[warn(clippy::drop_bounds)]\n \n fn main() {}"}, {"sha": "d3400a7be09fd69214d41e4821c6980d27f2c668", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b654555a32baa44872587ac170fe02af14db0b74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=b654555a32baa44872587ac170fe02af14db0b74", "patch": "@@ -60,11 +60,17 @@ error: lint `clippy::regex_macro` has been removed: `the regex! macro has been r\n LL | #[warn(clippy::regex_macro)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted to rustc and is now called `drop_bounds``\n+  --> $DIR/deprecated.rs:11:8\n+   |\n+LL | #[warn(clippy::drop_bounds)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "6d6a9dc0783993f4f2e63520c78a23eb5c0f3331", "filename": "src/tools/clippy/tests/ui/drop_bounds.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs?ref=6e25418474ae9961e50bd3ff076d80a3ec728531", "patch": "@@ -1,8 +0,0 @@\n-#![allow(unused)]\n-fn foo<T: Drop>() {}\n-fn bar<T>()\n-where\n-    T: Drop,\n-{\n-}\n-fn main() {}"}, {"sha": "8208c0ed7e3985e6e4059d4373574622f8540fb4", "filename": "src/tools/clippy/tests/ui/drop_bounds.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e25418474ae9961e50bd3ff076d80a3ec728531/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr?ref=6e25418474ae9961e50bd3ff076d80a3ec728531", "patch": "@@ -1,16 +0,0 @@\n-error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n-  --> $DIR/drop_bounds.rs:2:11\n-   |\n-LL | fn foo<T: Drop>() {}\n-   |           ^^^^\n-   |\n-   = note: `#[deny(clippy::drop_bounds)]` on by default\n-\n-error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n-  --> $DIR/drop_bounds.rs:5:8\n-   |\n-LL |     T: Drop,\n-   |        ^^^^\n-\n-error: aborting due to 2 previous errors\n-"}]}