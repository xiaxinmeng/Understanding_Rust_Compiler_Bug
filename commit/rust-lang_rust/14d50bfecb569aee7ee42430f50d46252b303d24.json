{"sha": "14d50bfecb569aee7ee42430f50d46252b303d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDUwYmZlY2I1NjlhZWU3ZWU0MjQzMGY1MGQ0NjI1MmIzMDNkMjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-09T07:48:44Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-09T20:31:49Z"}, "message": "Allow some tools to be run without first building LLVM.\n\nConservatively only disable LLVM for rust-installer. This should shave\n5 minutes from the x86_64-gnu-distcheck job by not building LLVM twice.", "tree": {"sha": "6d663aaaee2039225cb9c584ef6d02d6d05e1c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d663aaaee2039225cb9c584ef6d02d6d05e1c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d50bfecb569aee7ee42430f50d46252b303d24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlscOTUACgkQ/vbIBR0O\nATylEg//VDvZPumoWwixjpTTnjqQJMaXgJAG+8k2CU99dN7wE4TakOV769vo8TiI\nfgqJc4ZBarZtdUUIeHPMo9myPddO+gCzjKKacTPZ20slic+UAnxmDM6+ceewNm0K\nmWxdEiTYwF0f/C0MS1PrMeDAZGLsWI2Z8lDdkiAB1l3QqJ1ZNiUEdN+dnjjdVs98\nT78nW8dug0lNl9ajFZiRjy4R22qcOio4PBfrMJYGDAhX1WrQi8BJmyAdZjyNV8Ns\nI7svjvCkOm4lcRDZ3mH44xgMOAgmAw24JhWXqWH54fVOUuHU/uKd5DDRk/9tjftH\nIjn3jG0M8L3ibJDUDcW2CBLiDsJql4w/UtXWWM7Q1BKUMQg1YqIA5mBoa189+2oS\n2ixfr4seNyX3/MlaD64LlD8d50F1ZY0JSJVstNxUEyqKj7ZjxdaIhhMrKkBMLK6b\nsC2m374Uh+yHQ4ewNojdHNiIftYhytgzyfjRksdedQhj41aUv43/YccLyGZXrqLK\nXx7e2os9hvRqlO16AJfUhoMyZyKAf9LPpfhVGNJDCDWrR1PviKNhCXprrGjfxw9I\ngafYOzMD1OZuCVeEo40sEzMXioLc+rulMo+lvGKf6z6XYGUsKgg5O7f4NiMVoTOm\nbBFv8cFw1iE2uCk+S/erBy+SVmhvVk0XKg278gIPBNiWmyQFfz8=\n=eaJM\n-----END PGP SIGNATURE-----", "payload": "tree 6d663aaaee2039225cb9c584ef6d02d6d05e1c7a\nparent 61d88318aa66669fba061e9af529365172d63cd0\nauthor kennytm <kennytm@gmail.com> 1528530524 +0800\ncommitter kennytm <kennytm@gmail.com> 1528576309 +0800\n\nAllow some tools to be run without first building LLVM.\n\nConservatively only disable LLVM for rust-installer. This should shave\n5 minutes from the x86_64-gnu-distcheck job by not building LLVM twice.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d50bfecb569aee7ee42430f50d46252b303d24", "html_url": "https://github.com/rust-lang/rust/commit/14d50bfecb569aee7ee42430f50d46252b303d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d50bfecb569aee7ee42430f50d46252b303d24/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d88318aa66669fba061e9af529365172d63cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d88318aa66669fba061e9af529365172d63cd0", "html_url": "https://github.com/rust-lang/rust/commit/61d88318aa66669fba061e9af529365172d63cd0"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "595fe0ab9ad7a516dfeaff8f74f59282592254cc", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/14d50bfecb569aee7ee42430f50d46252b303d24/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d50bfecb569aee7ee42430f50d46252b303d24/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=14d50bfecb569aee7ee42430f50d46252b303d24", "patch": "@@ -254,7 +254,7 @@ pub fn prepare_tool_cargo(\n }\n \n macro_rules! tool {\n-    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr;)+) => {\n+    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr $(,llvm_tools = $llvm:expr)*;)+) => {\n         #[derive(Copy, Clone)]\n         pub enum Tool {\n             $(\n@@ -269,6 +269,13 @@ macro_rules! tool {\n                 };\n                 mode\n             }\n+\n+            /// Whether this tool requires LLVM to run\n+            pub fn uses_llvm_tools(&self) -> bool {\n+                match self {\n+                    $(Tool::$name => true $(&& $llvm)*,)+\n+                }\n+            }\n         }\n \n         impl<'a> Builder<'a> {\n@@ -343,7 +350,7 @@ tool!(\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolTest;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolStd;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolStd;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd, llvm_tools = false;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolStd;\n );\n \n@@ -586,19 +593,19 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n-        self.prepare_tool_cmd(compiler, tool.get_mode(), &mut cmd);\n+        self.prepare_tool_cmd(compiler, tool, &mut cmd);\n         cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n     ///\n     /// Notably this munges the dynamic library lookup path to point to the\n     /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, mode: Mode, cmd: &mut Command) {\n+    fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n-            self.cargo_out(compiler, mode, *host).join(\"deps\"),\n+            self.cargo_out(compiler, tool.get_mode(), *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make\n@@ -621,17 +628,19 @@ impl<'a> Builder<'a> {\n \n         // Add the llvm/bin directory to PATH since it contains lots of\n         // useful, platform-independent tools\n-        if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-            if host.contains(\"windows\") {\n-                // On Windows, PATH and the dynamic library path are the same,\n-                // so we just add the LLVM bin path to lib_path\n-                lib_paths.push(llvm_bin_path);\n-            } else {\n-                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                let new_path = env::join_paths(iter::once(llvm_bin_path)\n-                        .chain(env::split_paths(&old_path)))\n-                    .expect(\"Could not add LLVM bin path to PATH\");\n-                cmd.env(\"PATH\", new_path);\n+        if tool.uses_llvm_tools() {\n+            if let Some(llvm_bin_path) = self.llvm_bin_path() {\n+                if host.contains(\"windows\") {\n+                    // On Windows, PATH and the dynamic library path are the same,\n+                    // so we just add the LLVM bin path to lib_path\n+                    lib_paths.push(llvm_bin_path);\n+                } else {\n+                    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                    let new_path = env::join_paths(iter::once(llvm_bin_path)\n+                            .chain(env::split_paths(&old_path)))\n+                        .expect(\"Could not add LLVM bin path to PATH\");\n+                    cmd.env(\"PATH\", new_path);\n+                }\n             }\n         }\n "}]}