{"sha": "ddbdf51f394226bcae162ed2d5348126b32e7dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYmRmNTFmMzk0MjI2YmNhZTE2MmVkMmQ1MzQ4MTI2YjMyZTdkYmQ=", "commit": {"author": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-10T05:42:59Z"}, "committer": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-11T23:48:52Z"}, "message": "Remove the vestigial ExtCtxt::print_backtrace function.\n\nIt was added in 2011-08-05 and reduced to a no-op ten days later.", "tree": {"sha": "c9a0b911f89c53e92117e8691e6e3867f9a5be88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a0b911f89c53e92117e8691e6e3867f9a5be88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddbdf51f394226bcae162ed2d5348126b32e7dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbdf51f394226bcae162ed2d5348126b32e7dbd", "html_url": "https://github.com/rust-lang/rust/commit/ddbdf51f394226bcae162ed2d5348126b32e7dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddbdf51f394226bcae162ed2d5348126b32e7dbd/comments", "author": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab3295cba64a8e4245374c5eb8f2478029d13db", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab3295cba64a8e4245374c5eb8f2478029d13db", "html_url": "https://github.com/rust-lang/rust/commit/fab3295cba64a8e4245374c5eb8f2478029d13db"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "9994fad3e317b49aaa47249ddf5c25fc56ca8d1a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddbdf51f394226bcae162ed2d5348126b32e7dbd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbdf51f394226bcae162ed2d5348126b32e7dbd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ddbdf51f394226bcae162ed2d5348126b32e7dbd", "patch": "@@ -605,7 +605,6 @@ impl<'a> ExtCtxt<'a> {\n             None => self.bug(\"missing top span\")\n         })\n     }\n-    pub fn print_backtrace(&self) { }\n     pub fn backtrace(&self) -> ExpnId { self.backtrace }\n     pub fn original_span(&self) -> Span {\n         let mut expn_id = self.backtrace;\n@@ -700,7 +699,6 @@ impl<'a> ExtCtxt<'a> {\n     ///   substitute; we never hit resolve/type-checking so the dummy\n     ///   value doesn't have to match anything)\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         panic!(self.parse_sess.span_diagnostic.span_fatal(sp, msg));\n     }\n \n@@ -710,35 +708,27 @@ impl<'a> ExtCtxt<'a> {\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n     pub fn span_err(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n     pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n     }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn span_note(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_note(sp, msg);\n     }\n     pub fn span_help(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_help(sp, msg);\n     }\n     pub fn fileline_help(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.fileline_help(sp, msg);\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.handler().bug(msg);\n     }\n     pub fn trace_macros(&self) -> bool {"}, {"sha": "9869108952c5e019090e0b461658ff63e2fccb46", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbdf51f394226bcae162ed2d5348126b32e7dbd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbdf51f394226bcae162ed2d5348126b32e7dbd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=ddbdf51f394226bcae162ed2d5348126b32e7dbd", "patch": "@@ -26,8 +26,6 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n         return base::DummyResult::any(sp);\n     }\n \n-    cx.print_backtrace();\n-\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item."}]}