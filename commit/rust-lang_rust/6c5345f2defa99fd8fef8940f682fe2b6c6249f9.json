{"sha": "6c5345f2defa99fd8fef8940f682fe2b6c6249f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTM0NWYyZGVmYTk5ZmQ4ZmVmODk0MGY2ODJmZTJiNmM2MjQ5Zjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-10T08:03:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-16T09:23:27Z"}, "message": "fmt; make visit_terminator arg names consistent with the rest", "tree": {"sha": "4645ff899af3be6deed33effc860a55213350252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4645ff899af3be6deed33effc860a55213350252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5345f2defa99fd8fef8940f682fe2b6c6249f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5345f2defa99fd8fef8940f682fe2b6c6249f9", "html_url": "https://github.com/rust-lang/rust/commit/6c5345f2defa99fd8fef8940f682fe2b6c6249f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5345f2defa99fd8fef8940f682fe2b6c6249f9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046165a80729a22b9692614a658f105d833bfc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/046165a80729a22b9692614a658f105d833bfc8d", "html_url": "https://github.com/rust-lang/rust/commit/046165a80729a22b9692614a658f105d833bfc8d"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "2efc5f1dabedca48ffe6eeb95c2b02efcc8e0f8e", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6c5345f2defa99fd8fef8940f682fe2b6c6249f9/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5345f2defa99fd8fef8940f682fe2b6c6249f9/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=6c5345f2defa99fd8fef8940f682fe2b6c6249f9", "patch": "@@ -407,7 +407,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_terminator(&mut self,\n                                 terminator: &$($mutability)? Terminator<'tcx>,\n-                                source_location: Location) {\n+                                location: Location) {\n                 let Terminator { source_info, kind } = terminator;\n \n                 self.visit_source_info(source_info);\n@@ -428,7 +428,7 @@ macro_rules! make_mir_visitor {\n                         self.visit_local(\n                             & $($mutability)? local,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Move),\n-                            source_location,\n+                            location,\n                         );\n \n                         assert_eq!(\n@@ -444,8 +444,8 @@ macro_rules! make_mir_visitor {\n                         values: _,\n                         targets: _\n                     } => {\n-                        self.visit_operand(discr, source_location);\n-                        self.visit_ty(switch_ty, TyContext::Location(source_location));\n+                        self.visit_operand(discr, location);\n+                        self.visit_ty(switch_ty, TyContext::Location(location));\n                     }\n \n                     TerminatorKind::Drop {\n@@ -456,7 +456,7 @@ macro_rules! make_mir_visitor {\n                         self.visit_place(\n                             place,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n-                            source_location\n+                            location\n                         );\n                     }\n \n@@ -469,9 +469,9 @@ macro_rules! make_mir_visitor {\n                         self.visit_place(\n                             place,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n-                            source_location\n+                            location\n                         );\n-                        self.visit_operand(value, source_location);\n+                        self.visit_operand(value, location);\n                     }\n \n                     TerminatorKind::Call {\n@@ -482,15 +482,15 @@ macro_rules! make_mir_visitor {\n                         from_hir_call: _,\n                         fn_span: _\n                     } => {\n-                        self.visit_operand(func, source_location);\n+                        self.visit_operand(func, location);\n                         for arg in args {\n-                            self.visit_operand(arg, source_location);\n+                            self.visit_operand(arg, location);\n                         }\n                         if let Some((destination, _)) = destination {\n                             self.visit_place(\n                                 destination,\n                                 PlaceContext::MutatingUse(MutatingUseContext::Call),\n-                                source_location\n+                                location\n                             );\n                         }\n                     }\n@@ -502,8 +502,8 @@ macro_rules! make_mir_visitor {\n                         target: _,\n                         cleanup: _,\n                     } => {\n-                        self.visit_operand(cond, source_location);\n-                        self.visit_assert_message(msg, source_location);\n+                        self.visit_operand(cond, location);\n+                        self.visit_assert_message(msg, location);\n                     }\n \n                     TerminatorKind::Yield {\n@@ -512,11 +512,11 @@ macro_rules! make_mir_visitor {\n                         resume_arg,\n                         drop: _,\n                     } => {\n-                        self.visit_operand(value, source_location);\n+                        self.visit_operand(value, location);\n                         self.visit_place(\n                             resume_arg,\n                             PlaceContext::MutatingUse(MutatingUseContext::Yield),\n-                            source_location,\n+                            location,\n                         );\n                     }\n \n@@ -531,29 +531,29 @@ macro_rules! make_mir_visitor {\n                             match op {\n                                 InlineAsmOperand::In { value, .. }\n                                 | InlineAsmOperand::Const { value } => {\n-                                    self.visit_operand(value, source_location);\n+                                    self.visit_operand(value, location);\n                                 }\n                                 InlineAsmOperand::Out { place, .. } => {\n                                     if let Some(place) = place {\n                                         self.visit_place(\n                                             place,\n                                             PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                                            source_location,\n+                                            location,\n                                         );\n                                     }\n                                 }\n                                 InlineAsmOperand::InOut { in_value, out_place, .. } => {\n-                                    self.visit_operand(in_value, source_location);\n+                                    self.visit_operand(in_value, location);\n                                     if let Some(out_place) = out_place {\n                                         self.visit_place(\n                                             out_place,\n                                             PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                                            source_location,\n+                                            location,\n                                         );\n                                     }\n                                 }\n                                 InlineAsmOperand::SymFn { value } => {\n-                                    self.visit_constant(value, source_location);\n+                                    self.visit_constant(value, location);\n                                 }\n                                 InlineAsmOperand::SymStatic { def_id: _ } => {}\n                             }"}]}