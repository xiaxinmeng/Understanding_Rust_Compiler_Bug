{"sha": "b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTJmMmNkMTU5MmZjODgyYjI5YmZhZDViYWYzYmZhYTdhY2RlMmY=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:04:33Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:43:27Z"}, "message": "Use primitive type assoc consts in more tests", "tree": {"sha": "65d3a699df83ea83ead4c2f6f1a1fb7619a65527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d3a699df83ea83ead4c2f6f1a1fb7619a65527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "html_url": "https://github.com/rust-lang/rust/commit/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f67e1e19ba63b96b1b6f7b0fe33d1ea907396e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f67e1e19ba63b96b1b6f7b0fe33d1ea907396e", "html_url": "https://github.com/rust-lang/rust/commit/c2f67e1e19ba63b96b1b6f7b0fe33d1ea907396e"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "d205b383d1ff64c745e1dd5b2842c22a1f66b570", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -16,17 +16,17 @@ fn main() {\n     u < Z;\n     Z >= u;\n     Z > u;\n-    u > std::u32::MAX;\n-    u >= std::u32::MAX;\n-    std::u32::MAX < u;\n-    std::u32::MAX <= u;\n+    u > u32::MAX;\n+    u >= u32::MAX;\n+    u32::MAX < u;\n+    u32::MAX <= u;\n     1-1 > u;\n     u >= !0;\n     u <= 12 - 2*6;\n     let i: i8 = 0;\n     i < -127 - 1;\n-    std::i8::MAX >= i;\n-    3-7 < std::i32::MIN;\n+    i8::MAX >= i;\n+    3-7 < i32::MIN;\n     let b = false;\n     b >= true;\n     false > b;\n@@ -52,10 +52,10 @@ impl PartialOrd<u32> for U {\n }\n \n pub fn foo(val: U) -> bool {\n-    val > std::u32::MAX\n+    val > u32::MAX\n }\n \n pub fn bar(len: u64) -> bool {\n     // This is OK as we are casting from target sized to fixed size\n-    len >= std::usize::MAX as u64\n+    len >= usize::MAX as u64\n }"}, {"sha": "6de554378aaa97f1d0537bb1b7703ae59b9f46fc", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -42,34 +42,34 @@ LL |     Z > u;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:19:5\n    |\n-LL |     u > std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u > u32::MAX;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:20:5\n    |\n-LL |     u >= std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u >= u32::MAX;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == std::u32::MAX` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == u32::MAX` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:21:5\n    |\n-LL |     std::u32::MAX < u;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX < u;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:22:5\n    |\n-LL |     std::u32::MAX <= u;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX <= u;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `std::u32::MAX == u` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u32::MAX == u` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:23:5\n@@ -106,18 +106,18 @@ LL |     i < -127 - 1;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:28:5\n    |\n-LL |     std::i8::MAX >= i;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     i8::MAX >= i;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::i8::MAX` is the maximum value for this type, this comparison is always true\n+   = help: because `i8::MAX` is the maximum value for this type, this comparison is always true\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:29:5\n    |\n-LL |     3-7 < std::i32::MIN;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     3-7 < i32::MIN;\n+   |     ^^^^^^^^^^^^^^\n    |\n-   = help: because `std::i32::MIN` is the minimum value for this type, this comparison is always false\n+   = help: because `i32::MIN` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:31:5"}, {"sha": "d8fbaa5414664ac7be093ed7efab22a7c939321d", "filename": "tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -16,7 +16,7 @@\n const BAA: *const i32 = 0 as *const i32;\n static mut BAR: *const i32 = BAA;\n static mut FOO: *const i32 = 0 as *const i32;\n-static mut BUH: bool = 42.0 < std::f32::NAN;\n+static mut BUH: bool = 42.0 < f32::NAN;\n \n #[allow(unused_variables, unused_mut)]\n fn main() {\n@@ -32,5 +32,5 @@ fn main() {\n     assert_eq!(*MUT_COUNT, 1);\n     */\n     // FIXME: don't lint in array length, requires `check_body`\n-    //let _ = [\"\"; (42.0 < std::f32::NAN) as usize];\n+    //let _ = [\"\"; (42.0 < f32::NAN) as usize];\n }"}, {"sha": "7d6842f5b54215e75a14fe517752e2ab8fae30d4", "filename": "tests/ui/enum_clike_unportable_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fenum_clike_unportable_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fenum_clike_unportable_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -24,8 +24,8 @@ enum NonPortableSigned {\n     Y = 0x7FFF_FFFF,\n     Z = 0xFFFF_FFFF,\n     A = 0x1_0000_0000,\n-    B = std::i32::MIN as isize,\n-    C = (std::i32::MIN as isize) - 1,\n+    B = i32::MIN as isize,\n+    C = (i32::MIN as isize) - 1,\n }\n \n enum NonPortableSignedNoHint {"}, {"sha": "71f3f5e083e0d1f67739aa5055b7b0d78a363c26", "filename": "tests/ui/enum_clike_unportable_variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.stderr?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -33,8 +33,8 @@ LL |     A = 0x1_0000_0000,\n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:28:5\n    |\n-LL |     C = (std::i32::MIN as isize) - 1,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     C = (i32::MIN as isize) - 1,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:34:5"}, {"sha": "c8248723bc9d68c6a0150a24e9b535df2f2cf8a3", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -45,8 +45,8 @@ impl PartialEq for X {\n \n fn main() {\n     ZERO == 0f32; //no error, comparison with zero is ok\n-    1.0f32 != ::std::f32::INFINITY; // also comparison with infinity\n-    1.0f32 != ::std::f32::NEG_INFINITY; // and negative infinity\n+    1.0f32 != f32::INFINITY; // also comparison with infinity\n+    1.0f32 != f32::NEG_INFINITY; // and negative infinity\n     ZERO == 0.0; //no error, comparison with zero is ok\n     ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n "}, {"sha": "a338040e19be6759fe543fd6fd29a9f7c2ee5676", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -37,8 +37,8 @@ fn main() {\n     // no errors, zero and infinity values\n     ONE != 0f32;\n     TWO == 0f32;\n-    ONE != ::std::f32::INFINITY;\n-    ONE == ::std::f32::NEG_INFINITY;\n+    ONE != f32::INFINITY;\n+    ONE == f32::NEG_INFINITY;\n \n     // no errors, but will warn clippy::float_cmp if '#![allow(float_cmp)]' above is removed\n     let w = 1.1;"}, {"sha": "6bbf79edfcf700c75eb9444bb79ea12ef141af17", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -78,7 +78,7 @@ fn if_same_then_else() {\n     let _ = if true { 0.0 } else { -0.0 };\n \n     // Different NaNs\n-    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n+    let _ = if true { 0.0 / 0.0 } else { f32::NAN };\n \n     if true {\n         foo();"}, {"sha": "cbec56324dcac7de1e825748ef168c13721f5505", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -87,10 +87,10 @@ fn if_same_then_else2() -> Result<&'static str, ()> {\n \n     // Same NaNs\n     let _ = if true {\n-        std::f32::NAN\n+        f32::NAN\n     } else {\n         //~ ERROR same body as `if` block\n-        std::f32::NAN\n+        f32::NAN\n     };\n \n     if true {"}, {"sha": "da2be6c8aa5acb4078b1787fca8aac2234dbcbe0", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "patch": "@@ -69,7 +69,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     };\n    | |_____^\n    |\n@@ -78,7 +78,7 @@ note: same as this\n    |\n LL |       let _ = if true {\n    |  _____________________^\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     } else {\n    | |_____^\n "}]}