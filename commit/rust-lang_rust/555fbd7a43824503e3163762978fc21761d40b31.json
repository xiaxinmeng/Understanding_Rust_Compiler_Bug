{"sha": "555fbd7a43824503e3163762978fc21761d40b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWZiZDdhNDM4MjQ1MDNlMzE2Mzc2Mjk3OGZjMjE3NjFkNDBiMzE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-22T11:01:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-22T11:01:02Z"}, "message": "Rollup merge of #86451 - notriddle:notriddle/rustdoc-intra-doc-link-summary, r=CraftSpider\n\nResolve intra-doc links in summary desc\n\nBefore:\n\n![rustdoc-intra-doc-link-summary-before](https://user-images.githubusercontent.com/1593513/122623069-9d995e80-d04f-11eb-8d46-ec2ec126bb5e.png)\n\nAfter:\n\n![rustdoc-intra-doc-link-summary](https://user-images.githubusercontent.com/1593513/122623076-a4c06c80-d04f-11eb-967a-f5916871c34b.png)", "tree": {"sha": "53616b5a8c4de4281e88f4f944c79203247396e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53616b5a8c4de4281e88f4f944c79203247396e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555fbd7a43824503e3163762978fc21761d40b31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0cLvCRBK7hj4Ov3rIwAAnaUIAE42NS19hCRFP75EJIntm8zi\nd5rPJbhQDwvcO1u2BMM/muwtvbMq1X4+yxdamGq8WrQKKKJVwgLF7TPqm2fgh/pt\n9PvfGswdUPu3kaK1lyNoiKMX+rKTjg0IlovOyi235v9bgDjo2rwjUwv46wVbjmrm\nRacIH3kveG9D75vHCF0+6c3tnhsP3ZR5z6vFvFg8qDAZ9jV9KroygY4OIuSJ5oCc\nBeTQkKV1n2daKWNYiH3eYXC1Yvb30uEyRjPF8rvJ8coGGuq00SkuLC2IxfZ9gCMr\ngK50vLJ7SheNFQSB/6vlp66rJdyHDE0ejyQMKZJbsuTlH6UdEQ3LUQ6uv7sPYh8=\n=r7Pi\n-----END PGP SIGNATURE-----\n", "payload": "tree 53616b5a8c4de4281e88f4f944c79203247396e0\nparent fd96d5542602c6221570d4b44a66c445edad6a0e\nparent f67585d494fd92347e4954a240ddde14dcbd711b\nauthor Yuki Okushi <jtitor@2k36.org> 1624359662 +0900\ncommitter GitHub <noreply@github.com> 1624359662 +0900\n\nRollup merge of #86451 - notriddle:notriddle/rustdoc-intra-doc-link-summary, r=CraftSpider\n\nResolve intra-doc links in summary desc\n\nBefore:\n\n![rustdoc-intra-doc-link-summary-before](https://user-images.githubusercontent.com/1593513/122623069-9d995e80-d04f-11eb-8d46-ec2ec126bb5e.png)\n\nAfter:\n\n![rustdoc-intra-doc-link-summary](https://user-images.githubusercontent.com/1593513/122623076-a4c06c80-d04f-11eb-967a-f5916871c34b.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555fbd7a43824503e3163762978fc21761d40b31", "html_url": "https://github.com/rust-lang/rust/commit/555fbd7a43824503e3163762978fc21761d40b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555fbd7a43824503e3163762978fc21761d40b31/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd96d5542602c6221570d4b44a66c445edad6a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd96d5542602c6221570d4b44a66c445edad6a0e", "html_url": "https://github.com/rust-lang/rust/commit/fd96d5542602c6221570d4b44a66c445edad6a0e"}, {"sha": "f67585d494fd92347e4954a240ddde14dcbd711b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67585d494fd92347e4954a240ddde14dcbd711b", "html_url": "https://github.com/rust-lang/rust/commit/f67585d494fd92347e4954a240ddde14dcbd711b"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "66f62d97b047d2242a76d68482bab813ed72f94e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -523,6 +523,33 @@ impl Item {\n             .collect()\n     }\n \n+    /// Find a list of all link names, without finding their href.\n+    ///\n+    /// This is used for generating summary text, which does not include\n+    /// the link text, but does need to know which `[]`-bracketed names\n+    /// are actually links.\n+    crate fn link_names(&self, cache: &Cache) -> Vec<RenderedLink> {\n+        cache\n+            .intra_doc_links\n+            .get(&self.def_id)\n+            .map_or(&[][..], |v| v.as_slice())\n+            .iter()\n+            .filter_map(|ItemLink { link: s, link_text, did, fragment }| {\n+                // FIXME(83083): using fragments as a side-channel for\n+                // primitive names is very unfortunate\n+                if did.is_some() || fragment.is_some() {\n+                    Some(RenderedLink {\n+                        original_text: s.clone(),\n+                        new_text: link_text.clone(),\n+                        href: String::new(),\n+                    })\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect()\n+    }\n+\n     crate fn is_crate(&self) -> bool {\n         self.is_mod() && self.def_id.as_real().map_or(false, |did| did.index == CRATE_DEF_INDEX)\n     }"}, {"sha": "811f682920107a9ae37efa4ffbd2f189366944de", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -292,13 +292,14 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n                     if item.def_id.index().map_or(false, |idx| idx != CRATE_DEF_INDEX) {\n+                        let desc = item.doc_value().map_or_else(String::new, |x| {\n+                            short_markdown_summary(&x.as_str(), &item.link_names(&self.cache))\n+                        });\n                         self.cache.search_index.push(IndexItem {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: item\n-                                .doc_value()\n-                                .map_or_else(String::new, |x| short_markdown_summary(&x.as_str())),\n+                            desc,\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),"}, {"sha": "bafb522f363383733ab5486e354be92f027fb9bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -1051,7 +1051,11 @@ impl MarkdownSummaryLine<'_> {\n ///\n /// Returns a tuple of the rendered HTML string and whether the output was shortened\n /// due to the provided `length_limit`.\n-fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool) {\n+fn markdown_summary_with_limit(\n+    md: &str,\n+    link_names: &[RenderedLink],\n+    length_limit: usize,\n+) -> (String, bool) {\n     if md.is_empty() {\n         return (String::new(), false);\n     }\n@@ -1065,7 +1069,20 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n         *text_length += text.len();\n     }\n \n-    'outer: for event in Parser::new_ext(md, summary_opts()) {\n+    let mut replacer = |broken_link: BrokenLink<'_>| {\n+        if let Some(link) =\n+            link_names.iter().find(|link| &*link.original_text == broken_link.reference)\n+        {\n+            Some((link.href.as_str().into(), link.new_text.as_str().into()))\n+        } else {\n+            None\n+        }\n+    };\n+\n+    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = LinkReplacer::new(p, link_names);\n+\n+    'outer: for event in p {\n         match &event {\n             Event::Text(text) => {\n                 for word in text.split_inclusive(char::is_whitespace) {\n@@ -1121,8 +1138,8 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n /// Will shorten to 59 or 60 characters, including an ellipsis (\u2026) if it was shortened.\n ///\n /// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n-crate fn short_markdown_summary(markdown: &str) -> String {\n-    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, 59);\n+crate fn short_markdown_summary(markdown: &str, link_names: &[RenderedLink]) -> String {\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, link_names, 59);\n \n     if was_shortened {\n         s.push('\u2026');"}, {"sha": "d10da64ccfaa5447a50e4610d046e21e6e3dd520", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -221,7 +221,7 @@ fn test_header_ids_multiple_blocks() {\n #[test]\n fn test_short_markdown_summary() {\n     fn t(input: &str, expect: &str) {\n-        let output = short_markdown_summary(input);\n+        let output = short_markdown_summary(input, &[][..]);\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -232,6 +232,7 @@ fn test_short_markdown_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"dud [link]\", \"dud [link]\");\n     t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> \u2026\");\n     t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> \u2026\");\n     t(\"# top header\", \"top header\");\n@@ -259,6 +260,7 @@ fn test_plain_text_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"dud [link]\", \"dud [link]\");\n     t(\"code `let x = i32;` ...\", \"code `let x = i32;` \u2026\");\n     t(\"type `Type<'static>` ...\", \"type `Type<'static>` \u2026\");\n     t(\"# top header\", \"top header\");"}, {"sha": "5b3c445013b54f4a6ecb6072a3b5bb702b9e2374", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -34,11 +34,14 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     // has since been learned.\n     for &(did, ref item) in &cache.orphan_impl_items {\n         if let Some(&(ref fqp, _)) = cache.paths.get(&did) {\n+            let desc = item\n+                .doc_value()\n+                .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(&cache)));\n             cache.search_index.push(IndexItem {\n                 ty: item.type_(),\n                 name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n+                desc,\n                 parent: Some(did.into()),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, cache, tcx),\n@@ -47,6 +50,11 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         }\n     }\n \n+    let crate_doc = krate\n+        .module\n+        .doc_value()\n+        .map_or_else(String::new, |s| short_markdown_summary(&s, &krate.module.link_names(&cache)));\n+\n     let Cache { ref mut search_index, ref paths, .. } = *cache;\n \n     // Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n@@ -100,9 +108,6 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         crate_items.push(&*item);\n     }\n \n-    let crate_doc =\n-        krate.module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s));\n-\n     struct CrateData<'a> {\n         doc: String,\n         items: Vec<&'a IndexItem>,"}, {"sha": "dfb11e80414c1abc686766ad6575e1cc3fe20620", "filename": "src/test/rustdoc-js/summaries.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.js?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -5,7 +5,7 @@ const QUERY = ['summaries', 'summaries::Sidebar', 'summaries::Sidebar2'];\n const EXPECTED = [\n     {\n         'others': [\n-           { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link and <code>code</code>.' },\n+           { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link, [<code>code</code>], and <code>Sidebar2</code> intra-doc.' },\n         ],\n     },\n     {"}, {"sha": "418c9f8d0edd02dd969fb56458f1002c652aee6e", "filename": "src/test/rustdoc-js/summaries.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555fbd7a43824503e3163762978fc21761d40b31/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fbd7a43824503e3163762978fc21761d40b31/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.rs?ref=555fbd7a43824503e3163762978fc21761d40b31", "patch": "@@ -1,9 +1,11 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"summaries\"]\n \n-//! This *summary* has a [link] and `code`.\n+//! This *summary* has a [link], [`code`], and [`Sidebar2`] intra-doc.\n //!\n-//! This is the second paragraph.\n+//! This is the second paragraph. It should not be rendered.\n+//! To test that intra-doc links are resolved properly, [`code`] should render\n+//! the square brackets, and [`Sidebar2`] should not.\n //!\n //! [link]: https://example.com\n "}]}