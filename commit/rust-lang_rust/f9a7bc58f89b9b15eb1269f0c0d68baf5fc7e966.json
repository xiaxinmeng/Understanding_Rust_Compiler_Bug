{"sha": "f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YTdiYzU4Zjg5YjliMTVlYjEyNjlmMGMwZDY4YmFmNWZjN2U5NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-18T05:55:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-18T05:55:19Z"}, "message": "Auto merge of #23290 - nrc:pub_priv_mod, r=nikomatsakis\n\nCloses #22261\r\n\r\nr? @nikomatsakis \r\n\r\n(+ a new test coming soon...)", "tree": {"sha": "7386a64c0514658269710fc8bf30a08d3251f03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7386a64c0514658269710fc8bf30a08d3251f03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "html_url": "https://github.com/rust-lang/rust/commit/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10918905fda1344e78bc16e6e73294d096ee97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10918905fda1344e78bc16e6e73294d096ee97d", "html_url": "https://github.com/rust-lang/rust/commit/c10918905fda1344e78bc16e6e73294d096ee97d"}, {"sha": "46aa621452b591e5c504fd85dfe514b92c49c228", "url": "https://api.github.com/repos/rust-lang/rust/commits/46aa621452b591e5c504fd85dfe514b92c49c228", "html_url": "https://github.com/rust-lang/rust/commit/46aa621452b591e5c504fd85dfe514b92c49c228"}], "stats": {"total": 141, "additions": 76, "deletions": 65}, "files": [{"sha": "e368a6691332caa6b78d96c546d28d894bbd6a82", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -736,8 +736,8 @@ mod opt {\n     use getopts;\n     use super::RustcOptGroup;\n \n-    type R = RustcOptGroup;\n-    type S<'a> = &'a str;\n+    pub type R = RustcOptGroup;\n+    pub type S<'a> = &'a str;\n \n     fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }\n     fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }"}, {"sha": "bfce2f0062de48f8591406f4af87b2f0a3d85a43", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -1186,6 +1186,7 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n         if !is_local(did) {\n             return false\n         }\n+\n         // .. and it corresponds to a private type in the AST (this returns\n         // None for type parameters)\n         match self.tcx.map.find(did.node) {\n@@ -1206,12 +1207,15 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(trait_ref.trait_ref.ref_id) {\n                     let span = trait_ref.trait_ref.path.span;\n-                    self.tcx.sess.span_err(span,\n-                                           \"private trait in exported type \\\n-                                            parameter bound\");\n+                    self.tcx.sess.span_err(span, \"private trait in exported type \\\n+                                                  parameter bound\");\n             }\n         }\n     }\n+\n+    fn item_is_public(&self, id: &ast::NodeId, vis: ast::Visibility) -> bool {\n+        self.exported_items.contains(id) || vis == ast::Public\n+    }\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n@@ -1259,7 +1263,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // error messages without (too many) false positives\n             // (i.e. we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n-            // publicly visible.\n+            // publicly visible).\n             ast::ItemImpl(_, _, ref g, ref trait_ref, ref self_, ref impl_items) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n@@ -1321,7 +1325,22 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     match *trait_ref {\n                         None => {\n                             for impl_item in impl_items {\n-                                visit::walk_impl_item(self, impl_item);\n+                                // This is where we choose whether to walk down\n+                                // further into the impl to check its items. We\n+                                // should only walk into public items so that we\n+                                // don't erroneously report errors for private\n+                                // types in private items.\n+                                match impl_item.node {\n+                                    ast::MethodImplItem(..)\n+                                        if self.item_is_public(&impl_item.id, impl_item.vis) =>\n+                                    {\n+                                        visit::walk_impl_item(self, impl_item)\n+                                    }\n+                                    ast::TypeImplItem(..) => {\n+                                        visit::walk_impl_item(self, impl_item)\n+                                    }\n+                                    _ => {}\n+                                }\n                             }\n                         }\n                         Some(ref tr) => {\n@@ -1360,7 +1379,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                         match impl_item.node {\n                             ast::MethodImplItem(ref sig, _) => {\n                                 if sig.explicit_self.node == ast::SelfStatic &&\n-                                   self.exported_items.contains(&impl_item.id) {\n+                                        self.item_is_public(&impl_item.id, impl_item.vis) {\n                                     found_pub_static = true;\n                                     visit::walk_impl_item(self, impl_item);\n                                 }\n@@ -1381,15 +1400,18 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             ast::ItemTy(..) => return,\n \n             // not at all public, so we don't care\n-            _ if !self.exported_items.contains(&item.id) => return,\n+            _ if !self.item_is_public(&item.id, item.vis) => {\n+                return;\n+            }\n \n             _ => {}\n         }\n \n-        // we've carefully constructed it so that if we're here, then\n+        // We've carefully constructed it so that if we're here, then\n         // any `visit_ty`'s will be called on things that are in\n         // public signatures, i.e. things that we're interested in for\n         // this visitor.\n+        debug!(\"VisiblePrivateTypesVisitor entering item {:?}\", item);\n         visit::walk_item(self, item);\n     }\n \n@@ -1420,20 +1442,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n-                b: &'v ast::Block, s: Span, id: ast::NodeId) {\n-        // needs special handling for methods.\n-        if self.exported_items.contains(&id) {\n-            visit::walk_fn(self, fk, fd, b, s);\n-        }\n-    }\n-\n     fn visit_ty(&mut self, t: &ast::Ty) {\n+        debug!(\"VisiblePrivateTypesVisitor checking ty {:?}\", t);\n         if let ast::TyPath(_, ref p) = t.node {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(t.id) {\n-                self.tcx.sess.span_err(p.span,\n-                                       \"private type in exported type signature\");\n+                self.tcx.sess.span_err(p.span, \"private type in exported type signature\");\n             }\n         }\n         visit::walk_ty(self, t)"}, {"sha": "b619c6a77d009597eef5b2f806a9ac4d0722d566", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -382,7 +382,7 @@ enum ModuleKind {\n }\n \n /// One node in the tree of modules.\n-struct Module {\n+pub struct Module {\n     parent_link: ParentLink,\n     def_id: Cell<Option<DefId>>,\n     kind: Cell<ModuleKind>,\n@@ -491,7 +491,7 @@ struct ValueNsDef {\n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n #[derive(Debug)]\n-struct NameBindings {\n+pub struct NameBindings {\n     type_def: RefCell<Option<TypeNsDef>>,   //< Meaning in type namespace.\n     value_def: RefCell<Option<ValueNsDef>>, //< Meaning in value namespace.\n }\n@@ -767,7 +767,7 @@ impl PrimitiveTypeTable {\n }\n \n /// The main resolver class.\n-struct Resolver<'a, 'tcx:'a> {\n+pub struct Resolver<'a, 'tcx:'a> {\n     session: &'a Session,\n \n     ast_map: &'a ast_map::Map<'tcx>,"}, {"sha": "f584de7c47f3b88a22befaa1328e41c4d56053bb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -1464,7 +1464,7 @@ pub fn arg_kind<'a, 'tcx>(cx: &FunctionContext<'a, 'tcx>, t: Ty<'tcx>)\n }\n \n // work around bizarre resolve errors\n-type RvalueDatum<'tcx> = datum::Datum<'tcx, datum::Rvalue>;\n+pub type RvalueDatum<'tcx> = datum::Datum<'tcx, datum::Rvalue>;\n \n // create_datums_for_fn_args: creates rvalue datums for each of the\n // incoming function arguments. These will later be stored into"}, {"sha": "8f5dbfe2ec000ad2a52fb2516c3ea76387ef03ee", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -379,7 +379,7 @@ pub fn validate_substs(substs: &Substs) {\n \n // work around bizarre resolve errors\n type RvalueDatum<'tcx> = datum::Datum<'tcx, datum::Rvalue>;\n-type LvalueDatum<'tcx> = datum::Datum<'tcx, datum::Lvalue>;\n+pub type LvalueDatum<'tcx> = datum::Datum<'tcx, datum::Lvalue>;\n \n // Function context.  Every LLVM function we create will have one of\n // these."}, {"sha": "120108a1e2de7100c9db56f4ac0d872e52c8efc1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -195,7 +195,7 @@ type DeferredCallResolutionHandler<'tcx> = Box<DeferredCallResolution<'tcx>+'tcx\n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n #[derive(Copy)]\n-enum Expectation<'tcx> {\n+pub enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n "}, {"sha": "2b937768e2e7f8e3feca43698a1a1b948ddc4b53", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -178,7 +178,7 @@ pub struct Rcx<'a, 'tcx: 'a> {\n \n }\n \n-struct RepeatingScope(ast::NodeId);\n+pub struct RepeatingScope(ast::NodeId);\n pub enum SubjectNode { Subject(ast::NodeId), None }\n \n impl<'a, 'tcx> Rcx<'a, 'tcx> {"}, {"sha": "6bdfb17ec1c44c7032bcab09b686d2502e0ef4c1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -128,12 +128,12 @@ mod constrained_type_params;\n mod coherence;\n mod variance;\n \n-struct TypeAndSubsts<'tcx> {\n+pub struct TypeAndSubsts<'tcx> {\n     pub substs: subst::Substs<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n-struct CrateCtxt<'a, 'tcx: 'a> {\n+pub struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: ty::TraitMap,\n     /// A vector of every trait accessible in the whole crate"}, {"sha": "35706682047a46b55338dbce4de1d966fa0cefac", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -144,7 +144,7 @@ mod imp {\n         munmap(handler._data, SIGSTKSZ);\n     }\n \n-    type sighandler_t = *mut libc::c_void;\n+    pub type sighandler_t = *mut libc::c_void;\n \n     #[cfg(any(all(target_os = \"linux\", target_arch = \"x86\"), // may not match\n               all(target_os = \"linux\", target_arch = \"x86_64\"),\n@@ -156,7 +156,7 @@ mod imp {\n               target_os = \"android\"))] // may not match\n     mod signal {\n         use libc;\n-        use super::sighandler_t;\n+        pub use super::sighandler_t;\n \n         pub static SA_ONSTACK: libc::c_int = 0x08000000;\n         pub static SA_SIGINFO: libc::c_int = 0x00000004;\n@@ -210,7 +210,7 @@ mod imp {\n               target_os = \"openbsd\"))]\n     mod signal {\n         use libc;\n-        use super::sighandler_t;\n+        pub use super::sighandler_t;\n \n         pub const SA_ONSTACK: libc::c_int = 0x0001;\n         pub const SA_SIGINFO: libc::c_int = 0x0040;"}, {"sha": "8935f97ce5d02c0fa2a77df39cb06d9591bd863b", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -104,7 +104,7 @@ struct ADDRESS64 {\n     Mode: ADDRESS_MODE,\n }\n \n-struct STACKFRAME64 {\n+pub struct STACKFRAME64 {\n     AddrPC: ADDRESS64,\n     AddrReturn: ADDRESS64,\n     AddrFrame: ADDRESS64,"}, {"sha": "f589daf3f39a6317a1a5318ef9b6e6dfa347afe0", "filename": "src/test/compile-fail/priv_in_pub_sig_priv_mod.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we properly check for private types in public signatures, even\n+// inside a private module (#22261).\n+\n+mod a {\n+    struct Priv;\n+\n+    pub fn expose_a() -> Priv { //~Error: private type in exported type signature\n+        panic!();\n+    }\n+\n+    mod b {\n+        pub fn expose_b() -> super::Priv { //~Error: private type in exported type signature\n+            panic!();\n+        }\n+    }\n+}\n+\n+pub fn main() {}"}, {"sha": "807d28feb6e76742e0535a497574ed23f442bbf1", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This tests that exports can have visible dependencies on things\n-// that are not exported, allowing for a sort of poor-man's ADT\n-\n-mod foo {\n-    // not exported\n-    #[derive(Copy)]\n-    enum t { t1, t2, }\n-\n-    impl PartialEq for t {\n-        fn eq(&self, other: &t) -> bool {\n-            ((*self) as uint) == ((*other) as uint)\n-        }\n-        fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n-    }\n-\n-    pub fn f() -> t { return t::t1; }\n-\n-    pub fn g(v: t) { assert!((v == t::t1)); }\n-}\n-\n-pub fn main() { foo::g(foo::f()); }"}, {"sha": "e2f42278cbcb16f7d5367d913d05f15dce509b2d", "filename": "src/test/run-pass/issue-15774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Ftest%2Frun-pass%2Fissue-15774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966/src%2Ftest%2Frun-pass%2Fissue-15774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15774.rs?ref=f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "patch": "@@ -11,7 +11,7 @@\n #![deny(warnings)]\n #![allow(unused_imports)]\n \n-enum Foo { A }\n+pub enum Foo { A }\n mod bar {\n     pub fn normal(x: ::Foo) {\n         use Foo::A;"}]}