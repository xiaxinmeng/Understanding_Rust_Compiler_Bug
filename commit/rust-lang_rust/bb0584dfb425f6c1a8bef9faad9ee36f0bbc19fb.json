{"sha": "bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "node_id": "C_kwDOAAsO6NoAKGJiMDU4NGRmYjQyNWY2YzFhOGJlZjlmYWFkOWVlMzZmMGJiYzE5ZmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T01:41:33Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:54:55Z"}, "message": "Move `UnitHash` into `Methods` lint pass", "tree": {"sha": "306add229851a46884c5cc50f26d3b22cd0ebdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306add229851a46884c5cc50f26d3b22cd0ebdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "html_url": "https://github.com/rust-lang/rust/commit/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e213b6ee35faec133333e07f962958fbbfe12679", "url": "https://api.github.com/repos/rust-lang/rust/commits/e213b6ee35faec133333e07f962958fbbfe12679", "html_url": "https://github.com/rust-lang/rust/commit/e213b6ee35faec133333e07f962958fbbfe12679"}], "stats": {"total": 159, "additions": 76, "deletions": 83}, "files": [{"sha": "e51ce0fa2546971a69101286daecc1ab3b1aba4b", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -208,6 +208,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::UNIT_HASH),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),\n     LintId::of(methods::UNNECESSARY_FIND_MAP),\n     LintId::of(methods::UNNECESSARY_FOLD),\n@@ -326,7 +327,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(types::VEC_BOX),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n-    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::LET_UNIT_VALUE),\n     LintId::of(unit_types::UNIT_ARG),"}, {"sha": "d30e69b2240a9745cd88db608f468d7f5af8f382", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -42,6 +42,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(methods::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::UNIT_HASH),\n     LintId::of(methods::ZST_OFFSET),\n     LintId::of(minmax::MIN_MAX),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n@@ -67,7 +68,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n-    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::UNIT_CMP),\n     LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),"}, {"sha": "8aa1810fbd59f96aa0c3ff0d55bdc715ac848597", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -358,6 +358,7 @@ store.register_lints(&[\n     methods::SUSPICIOUS_MAP,\n     methods::SUSPICIOUS_SPLITN,\n     methods::UNINIT_ASSUMED_INIT,\n+    methods::UNIT_HASH,\n     methods::UNNECESSARY_FILTER_MAP,\n     methods::UNNECESSARY_FIND_MAP,\n     methods::UNNECESSARY_FOLD,\n@@ -558,7 +559,6 @@ store.register_lints(&[\n     unicode::NON_ASCII_LITERAL,\n     unicode::UNICODE_NOT_NFC,\n     uninit_vec::UNINIT_VEC,\n-    unit_hash::UNIT_HASH,\n     unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n     unit_types::LET_UNIT_VALUE,\n     unit_types::UNIT_ARG,"}, {"sha": "71ba3f18da87f3667e611e9658233c7e1a616691", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -371,7 +371,6 @@ mod types;\n mod undocumented_unsafe_blocks;\n mod unicode;\n mod uninit_vec;\n-mod unit_hash;\n mod unit_return_expecting_ord;\n mod unit_types;\n mod unnamed_address;\n@@ -582,7 +581,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n     store.register_late_pass(|| Box::new(unicode::Unicode));\n     store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n-    store.register_late_pass(|| Box::new(unit_hash::UnitHash));\n     store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n     store.register_late_pass(|| Box::new(strings::StringAdd));\n     store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));"}, {"sha": "ce10b64c94867b8d50bc5b83fb5cfbb6a0f3d37b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -78,6 +78,7 @@ mod string_extend_chars;\n mod suspicious_map;\n mod suspicious_splitn;\n mod uninit_assumed_init;\n+mod unit_hash;\n mod unnecessary_filter_map;\n mod unnecessary_fold;\n mod unnecessary_iter_cloned;\n@@ -2832,6 +2833,45 @@ declare_clippy_lint! {\n     \"use of sort() when sort_unstable() is equivalent\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects `().hash(_)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Hashing a unit value doesn't do anything as the implementation of `Hash` for `()` is a no-op.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => ().hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => 0_u8.hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub UNIT_HASH,\n+    correctness,\n+    \"hashing a unit value, which does nothing\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2949,6 +2989,7 @@ impl_lint_pass!(Methods => [\n     RANGE_ZIP_WITH_LEN,\n     REPEAT_ONCE,\n     STABLE_SORT_PRIMITIVE,\n+    UNIT_HASH,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3258,6 +3299,9 @@ impl Methods {\n                     get_last_with_len::check(cx, expr, recv, arg);\n                 },\n                 (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n+                (\"hash\", [arg]) => {\n+                    unit_hash::check(cx, expr, recv, arg);\n+                },\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n                 (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n                 (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),"}, {"sha": "3c7955bc46981bae4c0d989d3d9c5cbbf5c715ea", "filename": "clippy_lints/src/methods/unit_hash.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Fmethods%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb/clippy_lints%2Fsrc%2Fmethods%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funit_hash.rs?ref=bb0584dfb425f6c1a8bef9faad9ee36f0bbc19fb", "patch": "@@ -0,0 +1,29 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::UNIT_HASH;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, recv: &'tcx Expr<'_>, arg: &'tcx Expr<'_>) {\n+    if is_trait_method(cx, expr, sym::Hash) && cx.typeck_results().expr_ty(recv).is_unit() {\n+        span_lint_and_then(\n+            cx,\n+            UNIT_HASH,\n+            expr.span,\n+            \"this call to `hash` on the unit type will do nothing\",\n+            |diag| {\n+                diag.span_suggestion(\n+                    expr.span,\n+                    \"remove the call to `hash` or consider using\",\n+                    format!(\"0_u8.hash({})\", snippet(cx, arg.span, \"..\"),),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                diag.note(\"the implementation of `Hash` for `()` is a no-op\");\n+            },\n+        );\n+    }\n+}"}, {"sha": "88ca0cb20a12c59dc66bf903e31dd9962932f8c5", "filename": "clippy_lints/src/unit_hash.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_hash.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -1,78 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Detects `().hash(_)`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Hashing a unit value doesn't do anything as the implementation of `Hash` for `()` is a no-op.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # use std::hash::Hash;\n-    /// # use std::collections::hash_map::DefaultHasher;\n-    /// # enum Foo { Empty, WithValue(u8) }\n-    /// # use Foo::*;\n-    /// # let mut state = DefaultHasher::new();\n-    /// # let my_enum = Foo::Empty;\n-    /// match my_enum {\n-    /// \tEmpty => ().hash(&mut state),\n-    /// \tWithValue(x) => x.hash(&mut state),\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # use std::hash::Hash;\n-    /// # use std::collections::hash_map::DefaultHasher;\n-    /// # enum Foo { Empty, WithValue(u8) }\n-    /// # use Foo::*;\n-    /// # let mut state = DefaultHasher::new();\n-    /// # let my_enum = Foo::Empty;\n-    /// match my_enum {\n-    /// \tEmpty => 0_u8.hash(&mut state),\n-    /// \tWithValue(x) => x.hash(&mut state),\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.58.0\"]\n-    pub UNIT_HASH,\n-    correctness,\n-    \"hashing a unit value, which does nothing\"\n-}\n-declare_lint_pass!(UnitHash => [UNIT_HASH]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UnitHash {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if_chain! {\n-            if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n-            if name_ident.ident.name == sym::hash;\n-            if let [recv, state_param] = args;\n-            if cx.typeck_results().expr_ty(recv).is_unit();\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    UNIT_HASH,\n-                    expr.span,\n-                    \"this call to `hash` on the unit type will do nothing\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"remove the call to `hash` or consider using\",\n-                            format!(\n-                                \"0_u8.hash({})\",\n-                                snippet(cx, state_param.span, \"..\"),\n-                            ),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        diag.note(\"the implementation of `Hash` for `()` is a no-op\");\n-                    }\n-                );\n-            }\n-        }\n-    }\n-}"}]}