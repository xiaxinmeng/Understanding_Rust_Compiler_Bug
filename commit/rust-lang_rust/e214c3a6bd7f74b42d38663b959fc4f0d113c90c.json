{"sha": "e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMTRjM2E2YmQ3Zjc0YjQyZDM4NjYzYjk1OWZjNGYwZDExM2M5MGM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-01T11:55:47Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T21:59:20Z"}, "message": "Simplify", "tree": {"sha": "7b104366b08ab039ca999a4b2164907f577d105e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b104366b08ab039ca999a4b2164907f577d105e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "html_url": "https://github.com/rust-lang/rust/commit/e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e214c3a6bd7f74b42d38663b959fc4f0d113c90c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e74c55bb4adcad001b0f7373ebff795fc2aaeb1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74c55bb4adcad001b0f7373ebff795fc2aaeb1b", "html_url": "https://github.com/rust-lang/rust/commit/e74c55bb4adcad001b0f7373ebff795fc2aaeb1b"}], "stats": {"total": 61, "additions": 23, "deletions": 38}, "files": [{"sha": "c6b83da3d1aa3b8f518fd5025ede52771ac0b9af", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e214c3a6bd7f74b42d38663b959fc4f0d113c90c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e214c3a6bd7f74b42d38663b959fc4f0d113c90c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "patch": "@@ -48,7 +48,7 @@\n //! Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corredponding\n //! capability enabled.\n \n-use hir::{AsAssocItem, ItemInNs, ModPath, ScopeDef};\n+use hir::{AsAssocItem, ModPath, ModuleDef, ScopeDef};\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n@@ -91,33 +91,26 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         &ctx.sema,\n     )?;\n \n-    let mut all_mod_paths = import_assets\n-        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n-        .into_iter()\n-        .map(|import| {\n-            let def_to_display = match import.item_to_display() {\n-                ItemInNs::Types(id) => ScopeDef::ModuleDef(id.into()),\n-                ItemInNs::Values(id) => ScopeDef::ModuleDef(id.into()),\n-                ItemInNs::Macros(id) => ScopeDef::MacroDef(id.into()),\n-            };\n-            (import, def_to_display)\n-        })\n-        .collect::<Vec<_>>();\n-    all_mod_paths.sort_by_cached_key(|(import, _)| {\n+    let mut all_imports =\n+        import_assets.search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind);\n+    all_imports.sort_by_cached_key(|import| {\n         compute_fuzzy_completion_order_key(import.display_path(), &user_input_lowercased)\n     });\n \n-    acc.add_all(all_mod_paths.into_iter().filter_map(|(import, def_to_display)| {\n-        let import_for_trait_assoc_item = match def_to_display {\n-            ScopeDef::ModuleDef(module_def) => module_def\n-                .as_assoc_item(ctx.db)\n-                .and_then(|assoc| assoc.containing_trait(ctx.db))\n-                .is_some(),\n-            _ => false,\n-        };\n-        let import_edit =\n-            ImportEdit { import, import_scope: import_scope.clone(), import_for_trait_assoc_item };\n-        render_resolution_with_import(RenderContext::new(ctx), import_edit, &def_to_display)\n+    acc.add_all(all_imports.into_iter().filter_map(|import| {\n+        let import_for_trait_assoc_item = import\n+            .item_to_display()\n+            .as_module_def_id()\n+            .and_then(|module_def_id| {\n+                ModuleDef::from(module_def_id).as_assoc_item(ctx.db)?.containing_trait(ctx.db)\n+            })\n+            .is_some();\n+        let def_to_display = ScopeDef::from(import.item_to_display());\n+        render_resolution_with_import(\n+            RenderContext::new(ctx),\n+            ImportEdit { import, import_scope: import_scope.clone(), import_for_trait_assoc_item },\n+            &def_to_display,\n+        )\n     }));\n     Some(())\n }"}, {"sha": "4e352d546faba7492d6e71195add22873f9297b9", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e214c3a6bd7f74b42d38663b959fc4f0d113c90c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e214c3a6bd7f74b42d38663b959fc4f0d113c90c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=e214c3a6bd7f74b42d38663b959fc4f0d113c90c", "patch": "@@ -130,7 +130,6 @@ impl<'a> ImportAssets<'a> {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LocatedImport {\n-    // TODO kb extract both into a separate struct + add another field:  `assoc_item_name: Optional<String|Name>`\n     import_path: ModPath,\n     item_to_import: ItemInNs,\n     data_to_display: Option<(ModPath, ItemInNs)>,\n@@ -146,7 +145,7 @@ impl LocatedImport {\n     }\n \n     pub fn display_path(&self) -> &ModPath {\n-        self.data_to_display.as_ref().map(|(mod_pathh, _)| mod_pathh).unwrap_or(&self.import_path)\n+        self.data_to_display.as_ref().map(|(mod_path, _)| mod_path).unwrap_or(&self.import_path)\n     }\n \n     pub fn import_path(&self) -> &ModPath {\n@@ -227,14 +226,7 @@ impl<'a> ImportAssets<'a> {\n         self.applicable_defs(sema.db, prefixed, defs_for_candidate_name)\n             .into_iter()\n             .filter(|import| import.import_path().len() > 1)\n-            .filter(|import| {\n-                let proposed_def = match import.item_to_import() {\n-                    ItemInNs::Types(id) => ScopeDef::ModuleDef(id.into()),\n-                    ItemInNs::Values(id) => ScopeDef::ModuleDef(id.into()),\n-                    ItemInNs::Macros(id) => ScopeDef::MacroDef(id.into()),\n-                };\n-                !scope_definitions.contains(&proposed_def)\n-            })\n+            .filter(|import| !scope_definitions.contains(&ScopeDef::from(import.item_to_import())))\n             .collect()\n     }\n \n@@ -314,8 +306,8 @@ fn import_for_item(\n     unresolved_qualifier: &str,\n     original_item: ItemInNs,\n ) -> Option<LocatedImport> {\n-    let (item_candidate, trait_to_import) = match original_item {\n-        ItemInNs::Types(module_def_id) | ItemInNs::Values(module_def_id) => {\n+    let (item_candidate, trait_to_import) = match original_item.as_module_def_id() {\n+        Some(module_def_id) => {\n             match ModuleDef::from(module_def_id).as_assoc_item(db).map(|assoc| assoc.container(db))\n             {\n                 Some(AssocItemContainer::Trait(trait_)) => {\n@@ -328,7 +320,7 @@ fn import_for_item(\n                 None => (original_item, None),\n             }\n         }\n-        ItemInNs::Macros(_) => (original_item, None),\n+        None => (original_item, None),\n     };\n     let import_path_candidate = mod_path(item_candidate)?;\n "}]}