{"sha": "97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3", "node_id": "C_kwDOAAsO6NoAKDk3ZWFhNWRiZjQyZGQ2OWUzN2ZlOWYyOWJhNDI4ZDgzNDRmNTVjYTM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T15:29:56Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T17:49:46Z"}, "message": "Avoid accessing HIR for RPITITs on check_type_bounds", "tree": {"sha": "cc0a0b79731a1c6030d8d972475cce301a5e9ecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0a0b79731a1c6030d8d972475cce301a5e9ecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQGJ7oACgkQgTGiTgx5\n76/bXQ//R0UVrfRTyrIcxqBw4BhtzuHlcXeznVczHelVshMkHRf+mCA0dV3WICFq\n1m6BJTMoC4MBI3XaEvLq0zwS4TefNyoDuZ9xVQ4h5YQwFA0WzVPcgffbpaZwptjU\n/gsR9gfYmblTR6xCUYbf483LSCDiB5DAknOGF4nP248Yri+CTXe1+riAn0QWCC1n\nRdk+0wYx58WG560HX3Km493kwJY8VilR9YmiE2+Vd6eZIq3yCExE8CyrCGNJGhJc\nJ/iSlWOUsNlz9TBv53aqel+XxnhRxuXFaqaLY2gFPSILABo8Mq0g7xIhQmKGHwHA\nbszuy3vnQ98fMwy4UtARp2nd7T0D2uCSwEhkvh7d24MWiuJZtzoqMnkgXt9IpBM3\nK3RnHLTQI0y/WysZ6WgUkUjS7lFZJO47Aq5aulzZzIaVyRPvRZ6uz5QhX/6Klqhm\noDT2uqCyro2RtovnvgeQ6Aqsb/iCtgEqpuKqhYZoAgpgrv45aCWu9GvPdrTFO2+j\nflwTIDQeeY3JWE6eyj+7L1QifCrm69drurM9YtgtKysPL2ngRnJuVV+M9vy/IK+p\nLJB9U4ov84R282eO/dfgrbJYatA7RrZFYiPWVcskP+ESk98HYI593wQ/PlZA8ETe\nmCmx0JFB0XlELmbKqU+bgS/LrGDCB3htc+y/eQ5SZ8GvE8uxrK8=\n=lHy2\n-----END PGP SIGNATURE-----", "payload": "tree cc0a0b79731a1c6030d8d972475cce301a5e9ecd\nparent 47860ddf589349cd905b2d9101227c2d8d9ca63c\nauthor Santiago Pastorino <spastorino@gmail.com> 1677857396 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678124986 -0300\n\nAvoid accessing HIR for RPITITs on check_type_bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3", "html_url": "https://github.com/rust-lang/rust/commit/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47860ddf589349cd905b2d9101227c2d8d9ca63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/47860ddf589349cd905b2d9101227c2d8d9ca63c", "html_url": "https://github.com/rust-lang/rust/commit/47860ddf589349cd905b2d9101227c2d8d9ca63c"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "90c5a5d6a20951a33fc242fef9a2a37dfb6c2c12", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=97eaa5dbf42dd69e37fe9f29ba428d8344f55ca3", "patch": "@@ -1995,13 +1995,20 @@ pub(super) fn check_type_bounds<'tcx>(\n     let infcx = tcx.infer_ctxt().build();\n     let ocx = ObligationCtxt::new(&infcx);\n \n-    let impl_ty_span = match tcx.hir().get_by_def_id(impl_ty_def_id) {\n-        hir::Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Type(_, Some(ty)),\n-            ..\n-        }) => ty.span,\n-        hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Type(ty), .. }) => ty.span,\n-        _ => bug!(),\n+    // A synthetic impl Trait for RPITIT desugaring has no HIR, which we currently use to get the\n+    // span for an impl's associated type. Instead, for these, use the def_span for the synthesized\n+    // associated type.\n+    let impl_ty_span = if tcx.opt_rpitit_info(impl_ty.def_id).is_some() {\n+        tcx.def_span(impl_ty_def_id)\n+    } else {\n+        match tcx.hir().get_by_def_id(impl_ty_def_id) {\n+            hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Type(_, Some(ty)),\n+                ..\n+            }) => ty.span,\n+            hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Type(ty), .. }) => ty.span,\n+            _ => bug!(),\n+        }\n     };\n     let assumed_wf_types = ocx.assumed_wf_types(param_env, impl_ty_span, impl_ty_def_id);\n "}]}