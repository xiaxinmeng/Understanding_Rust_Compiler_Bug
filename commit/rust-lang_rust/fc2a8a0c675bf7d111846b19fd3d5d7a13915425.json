{"sha": "fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "node_id": "C_kwDOAAsO6NoAKGZjMmE4YTBjNjc1YmY3ZDExMTg0NmIxOWZkM2Q1ZDdhMTM5MTU0MjU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-24T22:59:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T01:10:34Z"}, "message": "Reorder some types.\n\nSo that `Attribute` and `MetaItem` are listed first, and then the\ncomponent types are below them in a logical order.", "tree": {"sha": "c8352f1ca10431d81b133aa427d248fb52c6607e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8352f1ca10431d81b133aa427d248fb52c6607e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "html_url": "https://github.com/rust-lang/rust/commit/fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2a8a0c675bf7d111846b19fd3d5d7a13915425/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "html_url": "https://github.com/rust-lang/rust/commit/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "6a2f1f0c5749c8be36891cbcbb1b1322b517102f", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fc2a8a0c675bf7d111846b19fd3d5d7a13915425/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2a8a0c675bf7d111846b19fd3d5d7a13915425/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "patch": "@@ -479,20 +479,6 @@ pub struct Crate {\n     pub is_placeholder: bool,\n }\n \n-/// Values inside meta item lists.\n-///\n-/// E.g., each of `Clone`, `Copy` in `#[derive(Clone, Copy)]`.\n-#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n-pub enum NestedMetaItem {\n-    /// A full MetaItem, for recursive meta items.\n-    MetaItem(MetaItem),\n-\n-    /// A literal.\n-    ///\n-    /// E.g., `\"foo\"`, `64`, `true`.\n-    Lit(MetaItemLit),\n-}\n-\n /// A semantic representation of a meta item. A meta item is a slightly\n /// restricted form of an attribute -- it can only contain expressions in\n /// certain leaf positions, rather than arbitrary token streams -- that is used\n@@ -525,6 +511,20 @@ pub enum MetaItemKind {\n     NameValue(MetaItemLit),\n }\n \n+/// Values inside meta item lists.\n+///\n+/// E.g., each of `Clone`, `Copy` in `#[derive(Clone, Copy)]`.\n+#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+pub enum NestedMetaItem {\n+    /// A full MetaItem, for recursive meta items.\n+    MetaItem(MetaItem),\n+\n+    /// A literal.\n+    ///\n+    /// E.g., `\"foo\"`, `64`, `true`.\n+    Lit(MetaItemLit),\n+}\n+\n /// A block (`{ .. }`).\n ///\n /// E.g., `{ .. }` as in `fn foo() { .. }`.\n@@ -2574,13 +2574,6 @@ impl<D: Decoder> Decodable<D> for AttrId {\n     }\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n-pub struct AttrItem {\n-    pub path: Path,\n-    pub args: AttrArgs,\n-    pub tokens: Option<LazyAttrTokenStream>,\n-}\n-\n /// A list of attributes.\n pub type AttrVec = ThinVec<Attribute>;\n \n@@ -2595,12 +2588,6 @@ pub struct Attribute {\n     pub span: Span,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct NormalAttr {\n-    pub item: AttrItem,\n-    pub tokens: Option<LazyAttrTokenStream>,\n-}\n-\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum AttrKind {\n     /// A normal attribute.\n@@ -2612,6 +2599,19 @@ pub enum AttrKind {\n     DocComment(CommentKind, Symbol),\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct NormalAttr {\n+    pub item: AttrItem,\n+    pub tokens: Option<LazyAttrTokenStream>,\n+}\n+\n+#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+pub struct AttrItem {\n+    pub path: Path,\n+    pub args: AttrArgs,\n+    pub tokens: Option<LazyAttrTokenStream>,\n+}\n+\n /// `TraitRef`s appear in impls.\n ///\n /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all"}]}