{"sha": "3975af567a73966fce7967c19b428086234241b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzVhZjU2N2E3Mzk2NmZjZTc5NjdjMTliNDI4MDg2MjM0MjQxYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-10T10:05:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-10T10:05:05Z"}, "message": "auto merge of #20837 : huonw/rust/remove-unused-lifetime, r=nikomatsakis", "tree": {"sha": "b375b7fed35a18c7acf8c3195e2d344078cefcbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b375b7fed35a18c7acf8c3195e2d344078cefcbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3975af567a73966fce7967c19b428086234241b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3975af567a73966fce7967c19b428086234241b4", "html_url": "https://github.com/rust-lang/rust/commit/3975af567a73966fce7967c19b428086234241b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3975af567a73966fce7967c19b428086234241b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36dc159522ea5e587c5c7f6e4df080f063e9b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36dc159522ea5e587c5c7f6e4df080f063e9b48", "html_url": "https://github.com/rust-lang/rust/commit/d36dc159522ea5e587c5c7f6e4df080f063e9b48"}, {"sha": "719c5d7bdeef7a33640e91af2305b2c913b83627", "url": "https://api.github.com/repos/rust-lang/rust/commits/719c5d7bdeef7a33640e91af2305b2c913b83627", "html_url": "https://github.com/rust-lang/rust/commit/719c5d7bdeef7a33640e91af2305b2c913b83627"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "a0ec9e5f151c2c2eaf28a2e357b646413e1a0ab2", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3975af567a73966fce7967c19b428086234241b4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975af567a73966fce7967c19b428086234241b4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=3975af567a73966fce7967c19b428086234241b4", "patch": "@@ -180,6 +180,7 @@ impl<'a> Arguments<'a> {\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n     #[unstable = \"implementation detail of the `format_args!` macro\"]\n+    #[cfg(stage0)] // SNAP 9e4e524\n     pub fn with_placeholders(pieces: &'a [&'a str],\n                              fmt: &'a [rt::Argument<'a>],\n                              args: &'a [Argument<'a>]) -> Arguments<'a> {\n@@ -189,6 +190,24 @@ impl<'a> Arguments<'a> {\n             args: args\n         }\n     }\n+    /// This function is used to specify nonstandard formatting parameters.\n+    /// The `pieces` array must be at least as long as `fmt` to construct\n+    /// a valid Arguments structure. Also, any `Count` within `fmt` that is\n+    /// `CountIsParam` or `CountIsNextParam` has to point to an argument\n+    /// created with `argumentuint`. However, failing to do so doesn't cause\n+    /// unsafety, but will ignore invalid .\n+    #[doc(hidden)] #[inline]\n+    #[unstable = \"implementation detail of the `format_args!` macro\"]\n+    #[cfg(not(stage0))]\n+    pub fn with_placeholders(pieces: &'a [&'a str],\n+                             fmt: &'a [rt::Argument],\n+                             args: &'a [Argument<'a>]) -> Arguments<'a> {\n+        Arguments {\n+            pieces: pieces,\n+            fmt: Some(fmt),\n+            args: args\n+        }\n+    }\n }\n \n /// This structure represents a safely precompiled version of a format string\n@@ -207,7 +226,11 @@ pub struct Arguments<'a> {\n     pieces: &'a [&'a str],\n \n     // Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n+    // SNAP 9e4e524\n+    #[cfg(stage0)]\n     fmt: Option<&'a [rt::Argument<'a>]>,\n+    #[cfg(not(stage0))]\n+    fmt: Option<&'a [rt::Argument]>,\n \n     // Dynamic arguments for interpolation, to be interleaved with string\n     // pieces. (Every argument is preceded by a string piece.)"}, {"sha": "2abf921eaf2c1007b0c45289d27763af8c4b42fb", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3975af567a73966fce7967c19b428086234241b4/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975af567a73966fce7967c19b428086234241b4/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=3975af567a73966fce7967c19b428086234241b4", "patch": "@@ -21,8 +21,17 @@ pub use self::Count::*;\n pub use self::Position::*;\n pub use self::Flag::*;\n \n+// SNAP 9e4e524\n #[doc(hidden)]\n #[derive(Copy)]\n+#[cfg(not(stage0))]\n+pub struct Argument {\n+    pub position: Position,\n+    pub format: FormatSpec,\n+}\n+#[doc(hidden)]\n+#[derive(Copy)]\n+#[cfg(stage0)]\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,"}, {"sha": "f512b33f02440e736c96925f1acb18af8b2ea0ab", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3975af567a73966fce7967c19b428086234241b4/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975af567a73966fce7967c19b428086234241b4/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=3975af567a73966fce7967c19b428086234241b4", "patch": "@@ -579,13 +579,9 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             // Build up the static array which will store our precompiled\n             // nonstandard placeholders, if there are any.\n-            let piece_ty = self.ecx.ty_path(self.ecx.path_all(\n+            let piece_ty = self.ecx.ty_path(self.ecx.path_global(\n                     self.fmtsp,\n-                    true, Context::rtpath(self.ecx, \"Argument\"),\n-                    vec![static_lifetime],\n-                    vec![],\n-                    vec![]\n-                ));\n+                    Context::rtpath(self.ecx, \"Argument\")));\n             let fmt = Context::static_array(self.ecx,\n                                             \"__STATIC_FMTARGS\",\n                                             piece_ty,"}]}