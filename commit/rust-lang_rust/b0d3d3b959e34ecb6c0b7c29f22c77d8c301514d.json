{"sha": "b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDNkM2I5NTllMzRlY2I2YzBiN2MyOWYyMmM3N2Q4YzMwMTUxNGQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-21T22:37:01Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-21T22:50:45Z"}, "message": "only issue \"variant of the expected type\" suggestion for enums\n\nFelix S. Klock II pointed out that this suggestion (introduced in\npull-request #43178 / eac74104) was being issued for one-field-struct\nexpected types (in which case it is misleading and outright wrong),\neven though it was only intended for one-field enum-variants (most\nnotably, `Some`). Particularly tender-hearted code-historians may be\ninclined to show mercy towards the author of #43178 on the grounds\nthat it's somewhat confusing that struct field definitions are given\nin a type called `ty::VariantDef`.\n\nAdd a conditional to adhere to the original intent. (It would be\npossible to generalize to structs, but not obviously net desirable.)\nThis adds a level of indentation, so the diff here is going to be\neasier to read in ignore-whitespace mode (`-w`).\n\nResolves #55250.", "tree": {"sha": "440ed905505ba938c604cb58154e87897fcc49ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440ed905505ba938c604cb58154e87897fcc49ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "html_url": "https://github.com/rust-lang/rust/commit/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "html_url": "https://github.com/rust-lang/rust/commit/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "7773e2d570844b892d2157b0941d05580c7e7e26", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "patch": "@@ -111,34 +111,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n \n-        // If the expected type is an enum with any variants whose sole\n-        // field is of the found type, suggest such variants. See Issue\n-        // #42764.\n+        // If the expected type is an enum (Issue #55250) with any variants whose\n+        // sole field is of the found type, suggest such variants. (Issue #42764)\n         if let ty::Adt(expected_adt, substs) = expected.sty {\n-            let mut compatible_variants = expected_adt.variants\n-                                                  .iter()\n-                                                  .filter(|variant| variant.fields.len() == 1)\n-                                                  .filter_map(|variant| {\n-                let sole_field = &variant.fields[0];\n-                let sole_field_ty = sole_field.ty(self.tcx, substs);\n-                if self.can_coerce(expr_ty, sole_field_ty) {\n-                    let variant_path = self.tcx.item_path_str(variant.did);\n-                    Some(variant_path.trim_left_matches(\"std::prelude::v1::\").to_string())\n-                } else {\n-                    None\n+            if expected_adt.is_enum() {\n+                let mut compatible_variants = expected_adt.variants\n+                    .iter()\n+                    .filter(|variant| variant.fields.len() == 1)\n+                    .filter_map(|variant| {\n+                        let sole_field = &variant.fields[0];\n+                        let sole_field_ty = sole_field.ty(self.tcx, substs);\n+                        if self.can_coerce(expr_ty, sole_field_ty) {\n+                            let variant_path = self.tcx.item_path_str(variant.did);\n+                            Some(variant_path.trim_left_matches(\"std::prelude::v1::\").to_string())\n+                        } else {\n+                            None\n+                        }\n+                    }).peekable();\n+\n+                if compatible_variants.peek().is_some() {\n+                    let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n+                    let suggestions = compatible_variants\n+                        .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                    err.span_suggestions_with_applicability(\n+                        expr.span,\n+                        \"try using a variant of the expected type\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n-            }).peekable();\n-\n-            if compatible_variants.peek().is_some() {\n-                let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n-                let suggestions = compatible_variants.map(|v|\n-                    format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n-                err.span_suggestions_with_applicability(\n-                     expr.span,\n-                     \"try using a variant of the expected type\",\n-                     suggestions,\n-                     Applicability::MaybeIncorrect,\n-                );\n             }\n         }\n "}, {"sha": "1c79499ba590276610c31e1b179e6dcc5dc35bb7", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "patch": "@@ -20,4 +20,20 @@ fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n     //~^ ERROR mismatched types\n+    //~| HELP try using a variant of the expected type\n+}\n+\n+\n+// But don't issue the \"try using a variant\" help if the one-\"variant\" ADT is\n+// actually a one-field struct.\n+\n+struct Payload;\n+\n+struct Wrapper { payload: Payload }\n+\n+struct Context { wrapper: Wrapper }\n+\n+fn overton() {\n+    let _c = Context { wrapper: Payload{} };\n+    //~^ ERROR mismatched types\n }"}, {"sha": "e256a436affbad2bc4ad8bfe793d39bf835979ec", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=b0d3d3b959e34ecb6c0b7c29f22c77d8c301514d", "patch": "@@ -13,6 +13,15 @@ LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-42764.rs:37:33\n+   |\n+LL |     let _c = Context { wrapper: Payload{} };\n+   |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n+   |\n+   = note: expected type `Wrapper`\n+              found type `Payload`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}