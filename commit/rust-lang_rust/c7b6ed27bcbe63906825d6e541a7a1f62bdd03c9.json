{"sha": "c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YjZlZDI3YmNiZTYzOTA2ODI1ZDZlNTQxYTdhMWY2MmJkZDAzYzk=", "commit": {"author": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-04-08T03:29:01Z"}, "committer": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-07-27T17:24:36Z"}, "message": "librustc_back: add ToJson trait to Target\n\nTarget's can already be built up from JSON files as well as built into\nlibrustc_back so this adds the ability to convert any Target back into\nJSON.\n\nSigned-off-by: Doug Goldstein <cardoe@cardoe.com>", "tree": {"sha": "64160f65a9c26c942d0e34ddbb989f178a979dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64160f65a9c26c942d0e34ddbb989f178a979dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "html_url": "https://github.com/rust-lang/rust/commit/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9/comments", "author": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c83fa41b05dd0a2ffedc88e9b97508341e2b92a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c83fa41b05dd0a2ffedc88e9b97508341e2b92a", "html_url": "https://github.com/rust-lang/rust/commit/9c83fa41b05dd0a2ffedc88e9b97508341e2b92a"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "067885c92fdf4eeb1624c88b99841290d7a86cf5", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "patch": "@@ -44,7 +44,8 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n-use serialize::json::Json;\n+use serialize::json::{Json, ToJson};\n+use std::collections::BTreeMap;\n use std::default::Default;\n use std::io::prelude::*;\n use syntax::abi::Abi;\n@@ -364,7 +365,12 @@ impl Target {\n \n     /// Load a target descriptor from a JSON object.\n     pub fn from_json(obj: Json) -> Target {\n-        // this is 1. ugly, 2. error prone.\n+        // While ugly, this code must remain this way to retain\n+        // compatibility with existing JSON fields and the internal\n+        // expected naming of the Target and TargetOptions structs.\n+        // To ensure compatibility is retained, the built-in targets\n+        // are round-tripped through this code to catch cases where\n+        // the JSON parser is not updated to match the structs.\n \n         let get_req_field = |name: &str| {\n             match obj.find(name)\n@@ -535,6 +541,94 @@ impl Target {\n     }\n }\n \n+impl ToJson for Target {\n+    fn to_json(&self) -> Json {\n+        let mut d = BTreeMap::new();\n+        let default: TargetOptions = Default::default();\n+\n+        macro_rules! target_val {\n+            ($attr:ident) => ( {\n+                let name = (stringify!($attr)).replace(\"_\", \"-\");\n+                d.insert(name.to_string(), self.$attr.to_json());\n+            } );\n+            ($attr:ident, $key_name:expr) => ( {\n+                let name = $key_name;\n+                d.insert(name.to_string(), self.$attr.to_json());\n+            } );\n+        }\n+\n+        macro_rules! target_option_val {\n+            ($attr:ident) => ( {\n+                let name = (stringify!($attr)).replace(\"_\", \"-\");\n+                if default.$attr != self.options.$attr {\n+                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                }\n+            } );\n+            ($attr:ident, $key_name:expr) => ( {\n+                let name = $key_name;\n+                if default.$attr != self.options.$attr {\n+                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                }\n+            } );\n+        }\n+\n+        target_val!(llvm_target);\n+        target_val!(target_endian);\n+        target_val!(target_pointer_width);\n+        target_val!(arch);\n+        target_val!(target_os, \"os\");\n+        target_val!(target_env, \"env\");\n+        target_val!(target_vendor, \"vendor\");\n+        target_val!(arch);\n+        target_val!(data_layout);\n+\n+        target_option_val!(is_builtin);\n+        target_option_val!(linker);\n+        target_option_val!(ar);\n+        target_option_val!(pre_link_args);\n+        target_option_val!(pre_link_objects_exe);\n+        target_option_val!(pre_link_objects_dll);\n+        target_option_val!(late_link_args);\n+        target_option_val!(post_link_objects);\n+        target_option_val!(post_link_args);\n+        target_option_val!(cpu);\n+        target_option_val!(features);\n+        target_option_val!(dynamic_linking);\n+        target_option_val!(executables);\n+        target_option_val!(relocation_model);\n+        target_option_val!(code_model);\n+        target_option_val!(disable_redzone);\n+        target_option_val!(eliminate_frame_pointer);\n+        target_option_val!(function_sections);\n+        target_option_val!(dll_prefix);\n+        target_option_val!(dll_suffix);\n+        target_option_val!(exe_suffix);\n+        target_option_val!(staticlib_prefix);\n+        target_option_val!(staticlib_suffix);\n+        target_option_val!(target_family);\n+        target_option_val!(is_like_osx);\n+        target_option_val!(is_like_solaris);\n+        target_option_val!(is_like_windows);\n+        target_option_val!(is_like_msvc);\n+        target_option_val!(is_like_android);\n+        target_option_val!(linker_is_gnu);\n+        target_option_val!(has_rpath);\n+        target_option_val!(no_compiler_rt);\n+        target_option_val!(no_default_libraries);\n+        target_option_val!(position_independent_executables);\n+        target_option_val!(archive_format);\n+        target_option_val!(allow_asm);\n+        target_option_val!(custom_unwind_resume);\n+        target_option_val!(lib_allocation_crate);\n+        target_option_val!(exe_allocation_crate);\n+        target_option_val!(has_elf_tls);\n+        target_option_val!(obj_is_bitcode);\n+        target_option_val!(max_atomic_width);\n+\n+        Json::Object(d)\n+    }\n+}\n+\n fn maybe_jemalloc() -> String {\n     if cfg!(feature = \"jemalloc\") {\n         \"alloc_jemalloc\".to_string()"}]}