{"sha": "47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZWVhZDVhZGE5N2Y1MGFmNWUwMDQyNmJjMDhmMWRjYmViNWQ0ZDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T11:14:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T11:14:54Z"}, "message": "function definition style simplification", "tree": {"sha": "9a72d87f3b3641823df0aed6988cd6c5d04a3243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a72d87f3b3641823df0aed6988cd6c5d04a3243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWmQuAAoJEFbW7qD8Z6xGUYkP/0AlSlf9EhJwo9kyRERpgFYS\nOPWBotKjpfu+5owjfq8dzqwl7cMY9CxOT3UQbZMkM07AEyB0w0ZW4sckpxarZsUg\nOBNb/LksyRqlffv4V+fQDRut7+AMkh2IZWdXIQMrjfbvGpRTCRoPpGSBnn9OBGlu\nkcRq9Ibrs6Jkxiquo3NQxSG/Ut9T1dHPyenwiMu/v47KtPuLQJbP0bypmKUXSJVp\n4o4SVj5ZM+RpDQa/vjX1RNuqCICUecJQZ+NB9ZnBhz5alF0cVomiO67im6zjoEd2\nAaK/bGNniWS1F4o4/QKRLJR1c0htUcodpQfcoBK8USEGTT6TcCZddrHaderg3PJj\nl8YN/o/NSVF4iOAZFpmYCTmRPl7V7w8w4/EPr9efa/+z4EcEM2OP66OZhwH9MRus\nmNdPW3yoITtoHoQAVHF8y7+d9UMtAuWcHkPX9jzFJw+cSGRJZV809AwtwsDIxdNL\npy8MiouajXQqxVVyx+MKVbBLT7mjCjaWYOc4zuF3BtvfWT5wQTyqvfRZlVLD/NDQ\nCQoz9u/01ar3+CXwFHDoGBLD5nU/g3lU8IuXoXqNdxjPE2ob77Trjo8XKrlBuXEI\nbYg4Kl9nAhzwOa5wXhYME/D38nMoWRvfuqnGLC8zxEGmvlbEHULn845oSJr3ejpw\n+pEjmyx89Y9EAeNFbE/f\n=V0ht\n-----END PGP SIGNATURE-----", "payload": "tree 9a72d87f3b3641823df0aed6988cd6c5d04a3243\nparent ed9d71f2c9ff058f1b3ae02b8b7351dcace97190\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482318894 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482318894 +0100\n\nfunction definition style simplification"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "html_url": "https://github.com/rust-lang/rust/commit/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "html_url": "https://github.com/rust-lang/rust/commit/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190"}], "stats": {"total": 295, "additions": 231, "deletions": 64}, "files": [{"sha": "de13c0264e5032e0645f5bace35fe9ad4e0d601d", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -107,8 +107,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n }\n \n /// Returns an option containing a tuple with the start and end (exclusive) of the range.\n-fn to_const_range(start: Option<Option<ConstVal>>, end: Option<Option<ConstVal>>, limits: RangeLimits, array_size: ConstInt)\n-    -> Option<(ConstInt, ConstInt)> {\n+fn to_const_range(\n+    start: Option<Option<ConstVal>>,\n+    end: Option<Option<ConstVal>>,\n+    limits: RangeLimits,\n+    array_size: ConstInt\n+) -> Option<(ConstInt, ConstInt)> {\n     let start = match start {\n         Some(Some(ConstVal::Integral(x))) => x,\n         Some(_) => return None,"}, {"sha": "11b85edba3e696711e697ba8c94c3534dc1c3dc7", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -248,7 +248,11 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n \n /// Return the list of bindings in a pattern.\n fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<InternedString, ty::Ty<'tcx>> {\n-    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut HashMap<InternedString, ty::Ty<'tcx>>) {\n+    fn bindings_impl<'a, 'tcx>(\n+        cx: &LateContext<'a, 'tcx>,\n+        pat: &Pat,\n+        map: &mut HashMap<InternedString, ty::Ty<'tcx>>\n+    ) {\n         match pat.node {\n             PatKind::Box(ref pat) |\n             PatKind::Ref(ref pat, _) => bindings_impl(cx, pat, map),"}, {"sha": "cda82f46434e167b0144876b105df877444437ca", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -86,8 +86,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n }\n \n /// Implementation of the `DERIVE_HASH_XOR_EQ` lint.\n-fn check_hash_peq<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, trait_ref: &TraitRef, ty: ty::Ty<'tcx>,\n-                            hash_is_automatically_derived: bool) {\n+fn check_hash_peq<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    span: Span,\n+    trait_ref: &TraitRef,\n+    ty: ty::Ty<'tcx>,\n+    hash_is_automatically_derived: bool\n+) {\n     if_let_chain! {[\n         match_path_old(&trait_ref.path, &paths::HASH),\n         let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()"}, {"sha": "2fe53d8cacf4c30e2ee462cf442c55d4e100c144", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -78,8 +78,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n     }\n }\n \n-fn check_cond<'a, 'tcx, 'b>(cx: &'a LateContext<'a, 'tcx>, check: &'b Expr)\n-    -> Option<(&'static str, &'b Expr, &'b Expr)> {\n+fn check_cond<'a, 'tcx, 'b>(\n+    cx: &'a LateContext<'a, 'tcx>,\n+    check: &'b Expr\n+) -> Option<(&'static str, &'b Expr, &'b Expr)> {\n     if_let_chain! {[\n         let ExprMethodCall(ref name, _, ref params) = check.node,\n         params.len() >= 2,"}, {"sha": "5ae3fcbb2a1e19d8ff51f8522ca79665e94046f3", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -114,7 +114,14 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n \n // FIXME: #600\n #[allow(while_let_on_iterator)]\n-fn check_variant(cx: &EarlyContext, threshold: u64, def: &EnumDef, item_name: &str, item_name_chars: usize, span: Span) {\n+fn check_variant(\n+    cx: &EarlyContext,\n+    threshold: u64,\n+    def: &EnumDef,\n+    item_name: &str,\n+    item_name_chars: usize,\n+    span: Span\n+) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }"}, {"sha": "ee415b36382439cd000855a40eba0543984133fa", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -62,7 +62,12 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_fn(\n-        &mut self, cx: &LateContext<'a, 'tcx>, _: visit::FnKind<'tcx>, decl: &'tcx FnDecl, body: &'tcx Expr, _: Span,\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: visit::FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        body: &'tcx Expr,\n+        _: Span,\n         id: NodeId\n     ) {\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n@@ -146,8 +151,15 @@ impl<'a, 'tcx: 'a + 'gcx, 'gcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx,\n         }\n \n     }\n-    fn borrow(&mut self, borrow_id: NodeId, _: Span, cmt: cmt<'tcx>, _: &ty::Region, _: ty::BorrowKind,\n-              loan_cause: LoanCause) {\n+    fn borrow(\n+        &mut self,\n+        borrow_id: NodeId,\n+        _: Span,\n+        cmt: cmt<'tcx>,\n+        _: &ty::Region,\n+        _: ty::BorrowKind,\n+        loan_cause: LoanCause\n+    ) {\n         use rustc::ty::adjustment::Adjust;\n \n         if let Categorization::Local(lid) = cmt.cat {"}, {"sha": "5ad676e57a088644b4f938256666c00e7e346b99", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -70,8 +70,13 @@ impl LintPass for Functions {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     fn check_fn(\n-        &mut self, cx: &LateContext<'a, 'tcx>, kind: intravisit::FnKind<'tcx>, decl: &'tcx hir::FnDecl,\n-        expr: &'tcx hir::Expr, span: Span, nodeid: ast::NodeId\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: intravisit::FnKind<'tcx>,\n+        decl: &'tcx hir::FnDecl,\n+        expr: &'tcx hir::Expr,\n+        span: Span,\n+        nodeid: ast::NodeId\n     ) {\n         use rustc::hir::map::Node::*;\n \n@@ -127,7 +132,11 @@ impl<'a, 'tcx> Functions {\n     }\n \n     fn check_raw_ptr(\n-        &self, cx: &LateContext<'a, 'tcx>, unsafety: hir::Unsafety, decl: &'tcx hir::FnDecl, expr: &'tcx hir::Expr,\n+        &self,\n+        cx: &LateContext<'a, 'tcx>,\n+        unsafety: hir::Unsafety,\n+        decl: &'tcx hir::FnDecl,\n+        expr: &'tcx hir::Expr,\n         nodeid: ast::NodeId\n     ) {\n         if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {"}, {"sha": "88d74b01886335e69e58edbee8009119acaa78b1", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -149,8 +149,11 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n     }\n }\n \n-fn check_assign<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: hir::def_id::DefId, block: &'tcx hir::Block)\n-    -> Option<&'tcx hir::Expr> {\n+fn check_assign<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    decl: hir::def_id::DefId,\n+    block: &'tcx hir::Block\n+) -> Option<&'tcx hir::Expr> {\n     if_let_chain! {[\n         block.expr.is_none(),\n         let Some(expr) = block.stmts.iter().last(),"}, {"sha": "ba705a84089c3db6e33f5ee4787c2ef992659a60", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -116,8 +116,12 @@ fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, gene\n     report_extra_lifetimes(cx, decl, generics);\n }\n \n-fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, named_lts: &'tcx [LifetimeDef], bounds_lts: T)\n-    -> bool {\n+fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n+    cx: &LateContext<'a, 'tcx>,\n+    func: &'tcx FnDecl,\n+    named_lts: &'tcx [LifetimeDef],\n+    bounds_lts: T\n+) -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n     // * output references, exactly one input reference with same LT"}, {"sha": "9a3defec72df682535d76925c32c269dcf4bf0c8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -402,8 +402,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn check_for_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, arg: &'tcx Expr, body: &'tcx Expr,\n-                            expr: &'tcx Expr) {\n+fn check_for_loop<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    pat: &'tcx Pat,\n+    arg: &'tcx Expr,\n+    body: &'tcx Expr,\n+    expr: &'tcx Expr\n+) {\n     check_for_loop_range(cx, pat, arg, body, expr);\n     check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n@@ -413,8 +418,13 @@ fn check_for_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, arg: &'t\n \n /// Check for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n-fn check_for_loop_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, arg: &'tcx Expr, body: &'tcx Expr,\n-                                  expr: &'tcx Expr) {\n+fn check_for_loop_range<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    pat: &'tcx Pat,\n+    arg: &'tcx Expr,\n+    body: &'tcx Expr,\n+    expr: &'tcx Expr\n+) {\n     if let Some(higher::Range { start: Some(start), ref end, limits }) = higher::range(arg) {\n         // the var must be a single name\n         if let PatKind::Binding(_, def_id, ref ident, _) = pat.node {\n@@ -641,8 +651,12 @@ fn check_arg_type(cx: &LateContext, pat: &Pat, arg: &Expr) {\n     }\n }\n \n-fn check_for_loop_explicit_counter<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx Expr, body: &'tcx Expr,\n-                                             expr: &'tcx Expr) {\n+fn check_for_loop_explicit_counter<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    arg: &'tcx Expr,\n+    body: &'tcx Expr,\n+    expr: &'tcx Expr\n+) {\n     // Look for variables that are incremented once per loop iteration.\n     let mut visitor = IncrementVisitor {\n         cx: cx,\n@@ -687,8 +701,13 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'\n }\n \n /// Check for the `FOR_KV_MAP` lint.\n-fn check_for_loop_over_map_kv<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, arg: &'tcx Expr,\n-                                        body: &'tcx Expr, expr: &'tcx Expr) {\n+fn check_for_loop_over_map_kv<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    pat: &'tcx Pat,\n+    arg: &'tcx Expr,\n+    body: &'tcx Expr,\n+    expr: &'tcx Expr\n+) {\n     let pat_span = pat.span;\n \n     if let PatKind::Tuple(ref pat, _) = pat.node {"}, {"sha": "978e9f5a029fec8b2afe0a0bffa2b1e33fd9c7fa", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -196,7 +196,14 @@ fn check_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm],\n     }\n }\n \n-fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr, ty: ty::Ty, els: Option<&Expr>) {\n+fn check_single_match_opt_like(\n+    cx: &LateContext,\n+    ex: &Expr,\n+    arms: &[Arm],\n+    expr: &Expr,\n+    ty: ty::Ty,\n+    els: Option<&Expr>\n+) {\n     // list of candidate Enums we know will never get any more members\n     let candidates = &[(&paths::COW, \"Borrowed\"),\n                        (&paths::COW, \"Cow::Borrowed\"),"}, {"sha": "591b395fe7099d247b68bd427ea8eeeca372f0fb", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -696,7 +696,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n     fn check_unwrap_or_default(\n-        cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr, or_has_args: bool,\n+        cx: &LateContext,\n+        name: &str,\n+        fun: &hir::Expr,\n+        self_expr: &hir::Expr,\n+        arg: &hir::Expr,\n+        or_has_args: bool,\n         span: Span\n     ) -> bool {\n         if or_has_args {\n@@ -737,7 +742,12 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n \n     /// Check for `*or(foo())`.\n     fn check_general_case(\n-        cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr, or_has_args: bool,\n+        cx: &LateContext,\n+        name: &str,\n+        fun: &hir::Expr,\n+        self_expr: &hir::Expr,\n+        arg: &hir::Expr,\n+        or_has_args: bool,\n         span: Span\n     ) {\n         // don't lint for constant values\n@@ -1157,8 +1167,13 @@ fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[\n }\n \n /// lint searching an Iterator followed by `is_some()`\n-fn lint_search_is_some(cx: &LateContext, expr: &hir::Expr, search_method: &str, search_args: &[hir::Expr],\n-                       is_some_args: &[hir::Expr]) {\n+fn lint_search_is_some(\n+    cx: &LateContext,\n+    expr: &hir::Expr,\n+    search_method: &str,\n+    search_args: &[hir::Expr],\n+    is_some_args: &[hir::Expr]\n+) {\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n         let msg = format!(\"called `is_some()` after searching an `Iterator` with {}. This is more succinctly \\"}, {"sha": "409a7de86f06d4e57ae19521587d47437f1b73d2", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -170,8 +170,15 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, k: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span,\n-                _: NodeId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        k: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        _: &'tcx Expr,\n+        _: Span,\n+        _: NodeId\n+    ) {\n         if let FnKind::Closure(_) = k {\n             // Does not apply to closures\n             return;"}, {"sha": "9c7b132dd3d6d0b72e9453cbe66c442ffe479c76", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -91,8 +91,13 @@ impl LintPass for NewWithoutDefault {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     fn check_fn(\n-        &mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl, _: &'tcx hir::Expr,\n-        span: Span, id: ast::NodeId\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx hir::FnDecl,\n+        _: &'tcx hir::Expr,\n+        span: Span,\n+        id: ast::NodeId\n     ) {\n         if in_external_macro(cx, span) {\n             return;"}, {"sha": "9c5b032f6251e5b4636faaf8f1b3b76738c5a11c", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -80,8 +80,15 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, _: FnKind<'tcx>, decl: &'tcx FnDecl, expr: &'tcx Expr,\n-                _: Span, _: NodeId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        expr: &'tcx Expr,\n+        _: Span,\n+        _: NodeId\n+    ) {\n         if in_external_macro(cx, expr.span) {\n             return;\n         }\n@@ -143,8 +150,13 @@ fn is_binding(cx: &LateContext, pat_id: NodeId) -> bool {\n     }\n }\n \n-fn check_pat<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, init: Option<&'tcx Expr>, span: Span,\n-                       bindings: &mut Vec<(Name, Span)>) {\n+fn check_pat<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    pat: &'tcx Pat,\n+    init: Option<&'tcx Expr>,\n+    span: Span,\n+    bindings: &mut Vec<(Name, Span)>\n+) {\n     // TODO: match more stuff / destructuring\n     match pat.node {\n         PatKind::Binding(_, _, ref ident, ref inner) => {\n@@ -222,8 +234,14 @@ fn check_pat<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, init: Option<\n     }\n }\n \n-fn lint_shadow<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, span: Span, pattern_span: Span,\n-                             init: Option<&'tcx Expr>, prev_span: Span) {\n+fn lint_shadow<'a, 'tcx: 'a>(\n+    cx: &LateContext<'a, 'tcx>,\n+    name: Name,\n+    span: Span,\n+    pattern_span: Span,\n+    init: Option<&'tcx Expr>,\n+    prev_span: Span\n+) {\n     if let Some(expr) = init {\n         if is_self_shadow(name, expr) {\n             span_lint_and_then(cx,"}, {"sha": "89bc46074fda4adabf31d47a4428c16d31e0f10f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -528,8 +528,15 @@ impl LintPass for TypeComplexityPass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, _: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span,\n-                _: NodeId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        _: &'tcx Expr,\n+        _: Span,\n+        _: NodeId\n+    ) {\n         self.check_fndecl(cx, decl);\n     }\n \n@@ -740,8 +747,12 @@ enum AbsurdComparisonResult {\n \n \n \n-fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs: &'a Expr)\n-    -> Option<(ExtremeExpr<'a>, AbsurdComparisonResult)> {\n+fn detect_absurd_comparison<'a>(\n+    cx: &LateContext,\n+    op: BinOp_,\n+    lhs: &'a Expr,\n+    rhs: &'a Expr\n+) -> Option<(ExtremeExpr<'a>, AbsurdComparisonResult)> {\n     use types::ExtremeType::*;\n     use types::AbsurdComparisonResult::*;\n     use utils::comparisons::*;\n@@ -1008,8 +1019,13 @@ fn err_upcast_comparison(cx: &LateContext, span: &Span, expr: &Expr, always: boo\n }\n \n fn upcast_comparison_bounds_err(\n-    cx: &LateContext, span: &Span, rel: comparisons::Rel, lhs_bounds: Option<(FullInt, FullInt)>, lhs: &Expr,\n-    rhs: &Expr, invert: bool\n+    cx: &LateContext,\n+    span: &Span,\n+    rel: comparisons::Rel,\n+    lhs_bounds: Option<(FullInt, FullInt)>,\n+    lhs: &Expr,\n+    rhs: &Expr,\n+    invert: bool\n ) {\n     use utils::comparisons::*;\n "}, {"sha": "9017fd6933e81b04f6e66bad4b7aa04217947ceb", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -42,8 +42,13 @@ impl LintPass for UnusedLabel {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n     fn check_fn(\n-        &mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl, body: &'tcx hir::Expr,\n-        span: Span, fn_id: ast::NodeId\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx hir::FnDecl,\n+        body: &'tcx hir::Expr,\n+        span: Span,\n+        fn_id: ast::NodeId\n     ) {\n         if in_macro(cx, span) {\n             return;"}, {"sha": "77b33d7b58939b14652146a094042781f30a2d52", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -317,8 +317,12 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n \n /// Check whether a type implements a trait.\n /// See also `get_trait_def_id`.\n-pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId, ty_params: Vec<ty::Ty<'tcx>>)\n-    -> bool {\n+pub fn implements_trait<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    ty: ty::Ty<'tcx>,\n+    trait_id: DefId,\n+    ty_params: Vec<ty::Ty<'tcx>>\n+) -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n     let ty = cx.tcx.erase_regions(&ty);\n@@ -401,8 +405,12 @@ pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'\n \n /// Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n-pub fn expr_block<'a, 'b, T: LintContext<'b>>(cx: &T, expr: &Expr, option: Option<String>, default: &'a str)\n-    -> Cow<'a, str> {\n+pub fn expr_block<'a, 'b, T: LintContext<'b>>(\n+    cx: &T,\n+    expr: &Expr,\n+    option: Option<String>,\n+    default: &'a str\n+) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n     if let ExprBlock(_) = expr.node {\n@@ -515,17 +523,28 @@ pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span,\n     }\n }\n \n-pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str,\n-                                                              help: &str) {\n+pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    help: &str\n+) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n         db.0.help(help);\n         db.wiki_link(lint);\n     }\n }\n \n-pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str,\n-                                                              note_span: Span, note: &str) {\n+pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Span,\n+    note: &str\n+) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n         if note_span == span {\n@@ -537,9 +556,13 @@ pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(cx: &'a T, lint: &\n     }\n }\n \n-pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str,\n-                                                                 f: F)\n-    where F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>)\n+pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    f: F\n+) where F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>)\n {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n     if cx.current_level(lint) != Level::Allow {\n@@ -756,8 +779,12 @@ pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::T\n /// Check if two types are the same.\n // FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` == `for <'b> Foo<'b>` but\n // not for type parameters.\n-pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>, parameter_item: NodeId)\n-    -> bool {\n+pub fn same_tys<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    a: ty::Ty<'tcx>,\n+    b: ty::Ty<'tcx>,\n+    parameter_item: NodeId\n+) -> bool {\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, parameter_item);\n     cx.tcx.infer_ctxt(None, Some(parameter_env), Reveal::All).enter(|infcx| {\n         let new_a = a.subst(infcx.tcx, infcx.parameter_environment.free_substs);"}, {"sha": "18d146d49173afa0aa52acb60cb7d51a1e245569", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "patch": "@@ -1,8 +1,6 @@\n max_width = 120\n ideal_width = 100\n-fn_args_density = \"Compressed\"\n fn_call_width = 80\n-fn_args_paren_newline = false\n match_block_trailing_comma = true\n fn_args_layout = \"Block\"\n closure_block_indent_threshold = 0"}]}