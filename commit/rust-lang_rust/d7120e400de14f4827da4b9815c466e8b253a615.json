{"sha": "d7120e400de14f4827da4b9815c466e8b253a615", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTIwZTQwMGRlMTRmNDgyN2RhNGI5ODE1YzQ2NmU4YjI1M2E2MTU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T14:46:41Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T14:46:41Z"}, "message": "hir: remove some obsolete NodeId methods", "tree": {"sha": "244a3676eed888dd5d32894af2129e83dc2262bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/244a3676eed888dd5d32894af2129e83dc2262bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7120e400de14f4827da4b9815c466e8b253a615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7120e400de14f4827da4b9815c466e8b253a615", "html_url": "https://github.com/rust-lang/rust/commit/d7120e400de14f4827da4b9815c466e8b253a615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7120e400de14f4827da4b9815c466e8b253a615/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e780daf372886ac3e30e6d4580a0505da3471d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e780daf372886ac3e30e6d4580a0505da3471d02", "html_url": "https://github.com/rust-lang/rust/commit/e780daf372886ac3e30e6d4580a0505da3471d02"}], "stats": {"total": 84, "additions": 35, "deletions": 49}, "files": [{"sha": "86b6805cc9b4c39f600ddf7952e3217c27f501ee", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d7120e400de14f4827da4b9815c466e8b253a615", "patch": "@@ -618,11 +618,11 @@ impl<'hir> Map<'hir> {\n         }\n \n         for id in &module.trait_items {\n-            visitor.visit_trait_item(self.expect_trait_item_by_hir_id(id.hir_id));\n+            visitor.visit_trait_item(self.expect_trait_item(id.hir_id));\n         }\n \n         for id in &module.impl_items {\n-            visitor.visit_impl_item(self.expect_impl_item_by_hir_id(id.hir_id));\n+            visitor.visit_impl_item(self.expect_impl_item(id.hir_id));\n         }\n     }\n \n@@ -929,66 +929,52 @@ impl<'hir> Map<'hir> {\n \n     // FIXME(@ljedrz): replace the NodeId variant\n     pub fn expect_item_by_hir_id(&self, id: HirId) -> &'hir Item {\n-        let node_id = self.hir_to_node_id(id);\n-        self.expect_item(node_id)\n+        match self.find_by_hir_id(id) { // read recorded by `find`\n+            Some(Node::Item(item)) => item,\n+            _ => bug!(\"expected item, found {}\", self.hir_to_string(id))\n+        }\n     }\n \n-    pub fn expect_impl_item(&self, id: NodeId) -> &'hir ImplItem {\n-        match self.find(id) {\n+    pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem {\n+        match self.find_by_hir_id(id) {\n             Some(Node::ImplItem(item)) => item,\n-            _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected impl item, found {}\", self.hir_to_string(id))\n         }\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn expect_impl_item_by_hir_id(&self, id: HirId) -> &'hir ImplItem {\n-        let node_id = self.hir_to_node_id(id);\n-        self.expect_impl_item(node_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn expect_trait_item_by_hir_id(&self, id: HirId) -> &'hir TraitItem {\n-        let node_id = self.hir_to_node_id(id);\n-        self.expect_trait_item(node_id)\n-    }\n-\n-    pub fn expect_trait_item(&self, id: NodeId) -> &'hir TraitItem {\n-        match self.find(id) {\n+    pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem {\n+        match self.find_by_hir_id(id) {\n             Some(Node::TraitItem(item)) => item,\n-            _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected trait item, found {}\", self.hir_to_string(id))\n         }\n     }\n \n     pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData {\n-        let id = self.hir_to_node_id(id); // FIXME(@ljedrz): remove when possible\n-\n-        match self.find(id) {\n+        match self.find_by_hir_id(id) {\n             Some(Node::Item(i)) => {\n                 match i.node {\n                     ItemKind::Struct(ref struct_def, _) |\n                     ItemKind::Union(ref struct_def, _) => struct_def,\n-                    _ => bug!(\"struct ID bound to non-struct {}\", self.node_to_string(id))\n+                    _ => bug!(\"struct ID bound to non-struct {}\", self.hir_to_string(id))\n                 }\n             }\n             Some(Node::StructCtor(data)) => data,\n             Some(Node::Variant(variant)) => &variant.node.data,\n-            _ => bug!(\"expected struct or variant, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected struct or variant, found {}\", self.hir_to_string(id))\n         }\n     }\n \n     pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n-        let id = self.hir_to_node_id(id); // FIXME(@ljedrz): remove when possible\n-\n-        match self.find(id) {\n+        match self.find_by_hir_id(id) {\n             Some(Node::Variant(variant)) => variant,\n-            _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n+            _ => bug!(\"expected variant, found {}\", self.hir_to_string(id)),\n         }\n     }\n \n-    pub fn expect_foreign_item(&self, id: NodeId) -> &'hir ForeignItem {\n-        match self.find(id) {\n+    pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem {\n+        match self.find_by_hir_id(id) {\n             Some(Node::ForeignItem(item)) => item,\n-            _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected foreign item, found {}\", self.hir_to_string(id))\n         }\n     }\n "}, {"sha": "f9bd6f6e1fbf0a09744ea42289b0c2602caecd4b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d7120e400de14f4827da4b9815c466e8b253a615", "patch": "@@ -780,7 +780,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tcx = self.tcx;\n \n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-        let ast_item = tcx.hir().expect_trait_item_by_hir_id(hir_id);\n+        let ast_item = tcx.hir().expect_trait_item(hir_id);\n         let trait_item = tcx.associated_item(def_id);\n \n         let container = match trait_item.defaultness {\n@@ -890,7 +890,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tcx = self.tcx;\n \n         let hir_id = self.tcx.hir().as_local_hir_id(def_id).unwrap();\n-        let ast_item = self.tcx.hir().expect_impl_item_by_hir_id(hir_id);\n+        let ast_item = self.tcx.hir().expect_impl_item(hir_id);\n         let impl_item = self.tcx.associated_item(def_id);\n \n         let container = match impl_item.defaultness {"}, {"sha": "1e5f5d244e9c4895db89c2279a2b560f051de9b0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d7120e400de14f4827da4b9815c466e8b253a615", "patch": "@@ -417,7 +417,7 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n     let tcx = infcx.tcx;\n     let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n     let (impl_m_output, impl_m_iter) = match tcx.hir()\n-                                                .expect_impl_item_by_hir_id(impl_m_hir_id)\n+                                                .expect_impl_item(impl_m_hir_id)\n                                                 .node {\n         ImplItemKind::Method(ref impl_m_sig, _) => {\n             (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter())\n@@ -429,7 +429,7 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n         TypeError::Mutability => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.hir()\n-                                            .expect_trait_item_by_hir_id(trait_m_hir_id)\n+                                            .expect_trait_item(trait_m_hir_id)\n                                             .node {\n                     TraitItemKind::Method(ref trait_m_sig, _) => {\n                         trait_m_sig.decl.inputs.iter()\n@@ -456,7 +456,7 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n         TypeError::Sorts(ExpectedFound { .. }) => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n-                    match tcx.hir().expect_trait_item_by_hir_id(trait_m_hir_id).node {\n+                    match tcx.hir().expect_trait_item(trait_m_hir_id).node {\n                         TraitItemKind::Method(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n@@ -599,8 +599,8 @@ fn compare_number_of_generics<'a, 'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let impl_node_id = tcx.hir().as_local_node_id(impl_.def_id).unwrap();\n-            let impl_item = tcx.hir().expect_impl_item(impl_node_id);\n+            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n+            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n             let span = if impl_item.generics.params.is_empty()\n                 || impl_item.generics.span.is_dummy() { // argument position impl Trait (#55374)\n                 impl_span\n@@ -666,7 +666,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if trait_number_args != impl_number_args {\n         let trait_m_hir_id = tcx.hir().as_local_hir_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_hir_id {\n-            match tcx.hir().expect_trait_item_by_hir_id(trait_id).node {\n+            match tcx.hir().expect_trait_item(trait_id).node {\n                 TraitItemKind::Method(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 {\n                         trait_number_args - 1\n@@ -691,7 +691,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             trait_item_span\n         };\n         let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n-        let impl_span = match tcx.hir().expect_impl_item_by_hir_id(impl_m_hir_id).node {\n+        let impl_span = match tcx.hir().expect_impl_item(impl_m_hir_id).node {\n             ImplItemKind::Method(ref impl_m_sig, _) => {\n                 let pos = if impl_number_args > 0 {\n                     impl_number_args - 1\n@@ -962,7 +962,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    trait_ty);\n \n             // Locate the Span containing just the type of the offending impl\n-            match tcx.hir().expect_impl_item_by_hir_id(impl_c_hir_id).node {\n+            match tcx.hir().expect_impl_item(impl_c_hir_id).node {\n                 ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n                 _ => bug!(\"{:?} is not a impl const\", impl_c),\n             }\n@@ -977,7 +977,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let trait_c_hir_id = tcx.hir().as_local_hir_id(trait_c.def_id);\n             let trait_c_span = trait_c_hir_id.map(|trait_c_hir_id| {\n                 // Add a label to the Span containing just the type of the const\n-                match tcx.hir().expect_trait_item_by_hir_id(trait_c_hir_id).node {\n+                match tcx.hir().expect_trait_item(trait_c_hir_id).node {\n                     TraitItemKind::Const(ref ty, _) => ty.span,\n                     _ => bug!(\"{:?} is not a trait const\", trait_c),\n                 }"}, {"sha": "c7bab8d170904552cba8c313c3896d8dab595c63", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d7120e400de14f4827da4b9815c466e8b253a615", "patch": "@@ -152,7 +152,7 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n \n pub fn check_trait_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let trait_item = tcx.hir().expect_trait_item_by_hir_id(hir_id);\n+    let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n     let method_sig = match trait_item.node {\n         hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n@@ -163,7 +163,7 @@ pub fn check_trait_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n \n pub fn check_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let impl_item = tcx.hir().expect_impl_item_by_hir_id(hir_id);\n+    let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n     let method_sig = match impl_item.node {\n         hir::ImplItemKind::Method(ref sig, _) => Some(sig),"}, {"sha": "fb5b06470b957864d9839c03437590ddf8bb3684", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7120e400de14f4827da4b9815c466e8b253a615/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d7120e400de14f4827da4b9815c466e8b253a615", "patch": "@@ -479,7 +479,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: hir::HirId) {\n }\n \n fn convert_trait_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trait_item_id: hir::HirId) {\n-    let trait_item = tcx.hir().expect_trait_item_by_hir_id(trait_item_id);\n+    let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n \n@@ -504,7 +504,7 @@ fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_item_id: hir::H\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n-    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item_by_hir_id(impl_item_id).node {\n+    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item(impl_item_id).node {\n         tcx.fn_sig(def_id);\n     }\n }"}]}