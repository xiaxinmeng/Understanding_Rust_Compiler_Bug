{"sha": "d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjcwZjVhN2Q2MTkzNDNjMmQxZjYzYWU4ZTVhZGU0ODA1MWEwYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T23:26:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T23:26:30Z"}, "message": "auto merge of #11817 : salemtalha/rust/master, r=brson\n\nFixes Issue #11815", "tree": {"sha": "71a6b30347cbf8719bdc8ded37bee3e4e9cf4069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a6b30347cbf8719bdc8ded37bee3e4e9cf4069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "html_url": "https://github.com/rust-lang/rust/commit/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6743c650c1649dcbb38d17fb029ed738e79ef0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6743c650c1649dcbb38d17fb029ed738e79ef0ae", "html_url": "https://github.com/rust-lang/rust/commit/6743c650c1649dcbb38d17fb029ed738e79ef0ae"}, {"sha": "40df08a5c2cf126c3f1a17945ed9a3599b3ebadd", "url": "https://api.github.com/repos/rust-lang/rust/commits/40df08a5c2cf126c3f1a17945ed9a3599b3ebadd", "html_url": "https://github.com/rust-lang/rust/commit/40df08a5c2cf126c3f1a17945ed9a3599b3ebadd"}], "stats": {"total": 243, "additions": 121, "deletions": 122}, "files": [{"sha": "101034f346e1ea3b5a5122f3abce656d4e88802a", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -636,7 +636,7 @@ CFG_INFO := $(info cfg: *** compiler is in snapshot transition ***)\n CFG_INFO := $(info cfg: *** stage2 and later will not be built ***)\n CFG_INFO := $(info cfg:)\n \n-#XXX This is surely busted\n+#FIXME This is surely busted\n all: $(SREQ1$(CFG_BUILD)) $(GENERATED) docs\n \n else"}, {"sha": "eb95329ed561566bd5c50016a1752a78bf5b6ec7", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -2895,7 +2895,7 @@ and only if that results in no match look at items you brought in\n scope with corresponding `use` statements.\n \n ~~~ {.ignore}\n-# // XXX: Allow unused import in doc test\n+# // FIXME: Allow unused import in doc test\n use farm::cow;\n // ...\n # mod farm { pub fn cow() { println!(\"Hidden ninja cow is hidden.\") } }"}, {"sha": "a318348b7bbae10bc3d0797a38405051b811c74f", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -596,7 +596,7 @@ define CFG_MAKE_TOOLCHAIN\n   else\n \n   # For the ARM and MIPS crosses, use the toolchain assembler\n-  # XXX: We should be able to use the LLVM assembler\n+  # FIXME: We should be able to use the LLVM assembler\n   CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n \t\t    $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n "}, {"sha": "8157ffba3efede0641d16ce5101669f9ced0c8d3", "filename": "src/etc/tidy.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -45,9 +45,8 @@ def do_license_check(name, contents):\n                                 openhook=fileinput.hook_encoded(\"utf-8\")):\n \n         if fileinput.filename().find(\"tidy.py\") == -1:\n-            if line.find(\"FIXME\") != -1:\n-                if re.search(\"FIXME.*#\\d+\", line) == None:\n-                    report_err(\"FIXME without issue number\")\n+            if line.find(\"// XXX\") != -1:\n+                report_err(\"XXX is no longer necessary, use FIXME\")\n             if line.find(\"TODO\") != -1:\n                 report_err(\"TODO is deprecated; use FIXME\")\n             match = re.match(r'^.*//\\s*(NOTE.*)$', line)"}, {"sha": "87f6e27b6323ac51124c9d788d55ea88acc64435", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -276,7 +276,7 @@ impl Arena {\n     #[inline]\n     pub fn alloc<'a, T>(&'a self, op: || -> T) -> &'a T {\n         unsafe {\n-            // XXX: Borrow check\n+            // FIXME: Borrow check\n             let this = transmute_mut(self);\n             if intrinsics::needs_drop::<T>() {\n                 this.alloc_nonpod(op)"}, {"sha": "5bbea491ac208be083e0e96e7a1199226edb1904", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -630,7 +630,7 @@ pub mod writer {\n \n     // FIXME (#2741): Provide a function to write the standard ebml header.\n     impl<'a> Encoder<'a> {\n-        /// XXX(pcwalton): Workaround for badness in trans. DO NOT USE ME.\n+        /// FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.\n         pub unsafe fn unsafe_clone(&self) -> Encoder<'a> {\n             Encoder {\n                 writer: cast::transmute_copy(&self.writer),"}, {"sha": "fb760685254a5e82fea44af3d628f0dd0e98f907", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -93,7 +93,7 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n     let pat_root = Path::new(pattern).root_path();\n     if pat_root.is_some() {\n         if check_windows_verbatim(pat_root.get_ref()) {\n-            // XXX: How do we want to handle verbatim paths? I'm inclined to return nothing,\n+            // FIXME: How do we want to handle verbatim paths? I'm inclined to return nothing,\n             // since we can't very well find all UNC shares with a 1-letter server name.\n             return Paths { root: root, dir_patterns: ~[], options: options, todo: ~[] };\n         }"}, {"sha": "35c53c9307c49fdee13a7345a5cc0c64d8cd1332", "filename": "src/libextra/url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -174,7 +174,7 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n             let mut bytes = [0, 0];\n             match rdr.read(bytes) {\n                 Some(2) => {}\n-                _ => fail!() // XXX: malformed url?\n+                _ => fail!() // FIXME: malformed url?\n             }\n             let ch = uint::parse_bytes(bytes, 16u).unwrap() as u8 as char;\n \n@@ -308,7 +308,7 @@ pub fn decode_form_urlencoded(s: &[u8]) -> HashMap<~str, ~[~str]> {\n                         let mut bytes = [0, 0];\n                         match rdr.read(bytes) {\n                             Some(2) => {}\n-                            _ => fail!() // XXX: malformed?\n+                            _ => fail!() // FIXME: malformed?\n                         }\n                         uint::parse_bytes(bytes, 16u).unwrap() as u8 as char\n                     }"}, {"sha": "d8a97ae2077035a8ef41a2e91454a1bb3787c47e", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -413,7 +413,7 @@ impl<'a> Prep<'a> {\n                 let (port, chan) = Chan::new();\n                 let blk = bo.take_unwrap();\n \n-                // XXX: What happens if the task fails?\n+                // FIXME: What happens if the task fails?\n                 do spawn {\n                     let mut exe = Exec {\n                         discovered_inputs: WorkMap::new(),"}, {"sha": "f303f100e03553305d41ffc214519d83598c8f96", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -139,7 +139,7 @@ impl EventLoop for BasicLoop {\n         self.work.push(f);\n     }\n \n-    // XXX: Seems like a really weird requirement to have an event loop provide.\n+    // FIXME: Seems like a really weird requirement to have an event loop provide.\n     fn pausable_idle_callback(&mut self, cb: ~Callback) -> ~PausableIdleCallback {\n         let callback = ~BasicPausable::new(self, cb);\n         rtassert!(self.idle.is_none());"}, {"sha": "e07cc1ca00088951cd9c6cb50e1d7957128d5cc4", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// XXX: this file probably shouldn't exist\n+// FIXME: this file probably shouldn't exist\n \n #[macro_escape];\n \n use std::fmt;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n-// XXX: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n+// FIXME: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n pub static ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) || cfg!(rtassert);\n \n macro_rules! rterrln ("}, {"sha": "8fa1e6732dcc847aa98b60ccb90b6ec290e2fc38", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -32,7 +32,7 @@ use task::{TypeSched, GreenTask, HomeSched, AnySched};\n /// struct. The scheduler struct acts like a baton, all scheduling\n /// actions are transfers of the baton.\n ///\n-/// XXX: This creates too many callbacks to run_sched_once, resulting\n+/// FIXME: This creates too many callbacks to run_sched_once, resulting\n /// in too much allocation and too many events.\n pub struct Scheduler {\n     /// ID number of the pool that this scheduler is a member of. When\n@@ -171,7 +171,7 @@ impl Scheduler {\n         return sched;\n     }\n \n-    // XXX: This may eventually need to be refactored so that\n+    // FIXME: This may eventually need to be refactored so that\n     // the scheduler itself doesn't have to call event_loop.run.\n     // That will be important for embedding the runtime into external\n     // event loops.\n@@ -898,7 +898,7 @@ impl CleanupJob {\n     }\n }\n \n-// XXX: Some hacks to put a || closure in Scheduler without borrowck\n+// FIXME: Some hacks to put a || closure in Scheduler without borrowck\n // complaining\n type UnsafeTaskReceiver = raw::Closure;\n trait ClosureConverter {"}, {"sha": "4b3db5ef8ed908bb73e2a4c22b71da8cfa8bc83e", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -61,7 +61,7 @@ impl Stack {\n             valgrind_id: 0\n         };\n \n-        // XXX: Using the FFI to call a C macro. Slow\n+        // FIXME: Using the FFI to call a C macro. Slow\n         stk.valgrind_id = unsafe {\n             rust_valgrind_stack_register(stk.start(), stk.end())\n         };\n@@ -117,7 +117,7 @@ fn protect_last_page(stack: &MemoryMap) -> bool {\n impl Drop for Stack {\n     fn drop(&mut self) {\n         unsafe {\n-            // XXX: Using the FFI to call a C macro. Slow\n+            // FIXME: Using the FFI to call a C macro. Slow\n             rust_valgrind_stack_deregister(self.valgrind_id);\n         }\n     }"}, {"sha": "53386433d5361a1cff4ec841c7cc025f43226dc0", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -674,7 +674,7 @@ pub fn chown(p: &CString, uid: int, gid: int) -> IoResult<()> {\n pub fn readlink(p: &CString) -> IoResult<Path> {\n     return os_readlink(p);\n \n-    // XXX: I have a feeling that this reads intermediate symlinks as well.\n+    // FIXME: I have a feeling that this reads intermediate symlinks as well.\n     #[cfg(windows)]\n     fn os_readlink(p: &CString) -> IoResult<Path> {\n         let handle = unsafe {\n@@ -709,7 +709,7 @@ pub fn readlink(p: &CString) -> IoResult<Path> {\n         let p = p.with_ref(|p| p);\n         let mut len = unsafe { libc::pathconf(p, libc::_PC_NAME_MAX) };\n         if len == -1 {\n-            len = 1024; // XXX: read PATH_MAX from C ffi?\n+            len = 1024; // FIXME: read PATH_MAX from C ffi?\n         }\n         let mut buf = vec::with_capacity::<u8>(len as uint);\n         match retry(|| unsafe {\n@@ -877,7 +877,7 @@ pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n pub fn lstat(p: &CString) -> IoResult<io::FileStat> {\n     return os_lstat(p);\n \n-    // XXX: windows implementation is missing\n+    // FIXME: windows implementation is missing\n     #[cfg(windows)]\n     fn os_lstat(_p: &CString) -> IoResult<io::FileStat> {\n         Err(super::unimpl())"}, {"sha": "c94554f510e461da104e01615413f838cfdfb7a1", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -97,7 +97,7 @@ fn translate_error(errno: i32, detail: bool) -> IoError {\n \n     #[cfg(not(windows))]\n     fn get_err(errno: i32) -> (io::IoErrorKind, &'static str) {\n-        // XXX: this should probably be a bit more descriptive...\n+        // FIXME: this should probably be a bit more descriptive...\n         match errno {\n             libc::EOF => (io::EndOfFile, \"end of file\"),\n             libc::ECONNREFUSED => (io::ConnectionRefused, \"connection refused\"),"}, {"sha": "2bcaf4d5c7c76ae679bd4dafc8f9e72f7bd4ba3d", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -104,7 +104,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n                 let mut bits = [0, ..8];\n                 // drain the timerfd of how many times its fired\n                 //\n-                // XXX: should this perform a send() this number of\n+                // FIXME: should this perform a send() this number of\n                 //      times?\n                 FileDesc::new(fd, false).inner_read(bits);\n                 let remove = {"}, {"sha": "8aed56231664d8ddc056229ddb8f55bbb7c7b3e1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -330,7 +330,7 @@ fn parse_crate_attrs(sess: session::Session,\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor(f: proc(@diagnostic::Emitter)) {\n-    // XXX: This is a hack for newsched since it doesn't support split stacks.\n+    // FIXME: This is a hack for newsched since it doesn't support split stacks.\n     // rustc needs a lot of stack! When optimizations are disabled, it needs\n     // even *more* stack than usual as well.\n     #[cfg(rtopt)]\n@@ -341,7 +341,7 @@ pub fn monitor(f: proc(@diagnostic::Emitter)) {\n     let mut task_builder = task::task();\n     task_builder.name(\"rustc\");\n \n-    // XXX: Hacks on hacks. If the env is trying to override the stack size\n+    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly.\n     if os::getenv(\"RUST_MIN_STACK\").is_none() {\n         task_builder.opts.stack_size = Some(STACK_SIZE);"}, {"sha": "c7d238dac18e9d5e31775c52befaa26f47f1513d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -1275,7 +1275,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                     // If this is a static method, we've already encoded\n                     // this.\n                     if method_ty.explicit_self != SelfStatic {\n-                        // XXX: I feel like there is something funny going on.\n+                        // FIXME: I feel like there is something funny going on.\n                         let tpt = ty::lookup_item_type(tcx, method_def_id);\n                         encode_bounds_and_type(ebml_w, ecx, &tpt);\n                     }"}, {"sha": "b10b833f286f631a69ee8045a0abc49fc226d45b", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -187,7 +187,7 @@ impl Context {\n         for lib in libs.mut_iter() {\n             match lib.dylib {\n                 Some(ref p) if p.filename_str() == Some(file.as_slice()) => {\n-                    assert!(lib.rlib.is_none()); // XXX: legit compiler error\n+                    assert!(lib.rlib.is_none()); // FIXME: legit compiler error\n                     lib.rlib = Some(path.clone());\n                     return true;\n                 }\n@@ -207,7 +207,7 @@ impl Context {\n         for lib in libs.mut_iter() {\n             match lib.rlib {\n                 Some(ref p) if p.filename_str() == Some(file.as_slice()) => {\n-                    assert!(lib.dylib.is_none()); // XXX: legit compiler error\n+                    assert!(lib.dylib.is_none()); // FIXME: legit compiler error\n                     lib.dylib = Some(path.clone());\n                     return true;\n                 }"}, {"sha": "b990c5073d12b05984ba0296804c98dc61f531ca", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -913,7 +913,7 @@ impl<'a,'b> ast_util::IdVisitingOperation for\n         // it is mutable. But I believe it's harmless since we generate\n         // balanced EBML.\n         //\n-        // XXX(pcwalton): Don't copy this way.\n+        // FIXME(pcwalton): Don't copy this way.\n         let mut new_ebml_w = unsafe {\n             self.new_ebml_w.unsafe_clone()\n         };"}, {"sha": "0ae1fefa2a077a380032eae92364f64ce34dccff", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -416,7 +416,7 @@ impl<'a> GatherLoanCtxt<'a> {\n             }\n \n             ty::AutoObject(..) => {\n-                // XXX: Handle @Trait to &Trait casts here?\n+                // FIXME: Handle @Trait to &Trait casts here?\n             }\n         }\n     }"}, {"sha": "002f263209a5bc2b16f84dafb6daff33408354e3", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -50,7 +50,7 @@ pub mod move_data;\n \n pub struct LoanDataFlowOperator;\n \n-/// XXX(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n+/// FIXME(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n /// yet on unit structs.\n impl Clone for LoanDataFlowOperator {\n     fn clone(&self) -> LoanDataFlowOperator {"}, {"sha": "ca9bce19ab8a610d0989493e741ba70f2a9fe6cd", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -148,7 +148,7 @@ pub struct Assignment {\n \n pub struct MoveDataFlowOperator;\n \n-/// XXX(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n+/// FIXME(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n /// yet on unit structs.\n impl Clone for MoveDataFlowOperator {\n     fn clone(&self) -> MoveDataFlowOperator {\n@@ -160,7 +160,7 @@ pub type MoveDataFlow = DataFlowContext<MoveDataFlowOperator>;\n \n pub struct AssignDataFlowOperator;\n \n-/// XXX(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n+/// FIXME(pcwalton): Should just be #[deriving(Clone)], but that doesn't work\n /// yet on unit structs.\n impl Clone for AssignDataFlowOperator {\n     fn clone(&self) -> AssignDataFlowOperator {"}, {"sha": "071371c6b616c53607c68cfebe5c0eba06008b02", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -404,7 +404,7 @@ impl ReachableContext {\n \n     // Step 3: Mark all destructors as reachable.\n     //\n-    // XXX(pcwalton): This is a conservative overapproximation, but fixing\n+    // FIXME(pcwalton): This is a conservative overapproximation, but fixing\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&self) {"}, {"sha": "b6a4a55186c320398bfa07a674cb282fec0aa834", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -61,7 +61,7 @@ pub struct Export2 {\n // not contain any entries from local crates.\n pub type ExternalExports = HashSet<DefId>;\n \n-// XXX: dox\n+// FIXME: dox\n pub type LastPrivateMap = HashMap<NodeId, LastPrivate>;\n \n pub enum LastPrivate {\n@@ -1411,7 +1411,7 @@ impl Resolver {\n                                        parent: ReducedGraphParent,\n                                        parent_public: bool) {\n         let ident = variant.node.name;\n-        // XXX: this is unfortunate to have to do this privacy calculation\n+        // FIXME: this is unfortunate to have to do this privacy calculation\n         //      here. This should be living in middle::privacy, but it's\n         //      necessary to keep around in some form becaues of glob imports...\n         let is_public = parent_public && variant.node.vis != ast::Private;\n@@ -5282,7 +5282,7 @@ impl Resolver {\n                                                    `{}`\",\n                                                    interner_get(label))),\n                     Some(DlDef(def @ DefLabel(_))) => {\n-                        // XXX: is AllPublic correct?\n+                        // FIXME: is AllPublic correct?\n                         self.record_def(expr.id, (def, AllPublic))\n                     }\n                     Some(_) => {"}, {"sha": "c8d2cf36938007b2ce106e6e3413fcdaae4c251f", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -643,7 +643,7 @@ fn enter_opt<'r,'b>(\n             }\n             ast::PatEnum(_, ref subpats) => {\n                 if opt_eq(tcx, &variant_opt(bcx, p.id), opt) {\n-                    // XXX: Must we clone?\n+                    // FIXME: Must we clone?\n                     match *subpats {\n                         None => Some(vec::from_elem(variant_size, dummy)),\n                         _ => (*subpats).clone(),"}, {"sha": "9f28385aa5ca6900793a4badad2340353c50b2a3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -805,7 +805,7 @@ fn padding(size: u64) -> ValueRef {\n     C_undef(Type::array(&Type::i8(), size))\n }\n \n-// XXX this utility routine should be somewhere more general\n+// FIXME this utility routine should be somewhere more general\n #[inline]\n fn roundup(x: u64, a: u64) -> u64 { ((x + (a - 1)) / a) * a }\n "}, {"sha": "21091c4f88ea8d61abeb3129a3a6b22e75127415", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -384,7 +384,7 @@ pub fn trans_expr_fn<'a>(\n \n     let sub_path = vec::append_one(bcx.fcx.path.clone(),\n                                    PathName(special_idents::anon));\n-    // XXX: Bad copy.\n+    // FIXME: Bad copy.\n     let s = mangle_internal_name_by_path_and_seq(ccx,\n                                                  sub_path.clone(),\n                                                  \"expr_fn\");"}, {"sha": "a28cb1a030cddcf8dbe156ebd4e2d79f842a1dbb", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -283,7 +283,7 @@ pub fn const_expr(cx: @CrateContext, e: &ast::Expr) -> (ValueRef, bool) {\n     let tsize = machine::llsize_of_alloc(cx, llty);\n     if csize != tsize {\n         unsafe {\n-            // XXX these values could use some context\n+            // FIXME these values could use some context\n             llvm::LLVMDumpValue(llconst);\n             llvm::LLVMDumpValue(C_undef(llty));\n         }"}, {"sha": "fe2b3578a052f0024cfa4744d6211ac113c3d452", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -417,7 +417,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             RetVoid(bcx);\n         }\n         \"morestack_addr\" => {\n-            // XXX This is a hack to grab the address of this particular\n+            // FIXME This is a hack to grab the address of this particular\n             // native function. There should be a general in-language\n             // way to do this\n             let llfty = type_of_rust_fn(bcx.ccx(), None, [], ty::mk_nil());"}, {"sha": "338b487de46824d4d8ca008ade47262e9a01dbef", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -95,7 +95,7 @@ pub fn trans_impl(ccx: @CrateContext,\n /// * `llfn`: a closure returning the LLVM ValueRef for the method\n /// * `impl_id`: the node ID of the impl this method is inside\n ///\n-/// XXX(pcwalton) Can we take `path` by reference?\n+/// FIXME(pcwalton) Can we take `path` by reference?\n pub fn trans_method(ccx: @CrateContext,\n                     path: Path,\n                     method: &ast::Method,"}, {"sha": "5b038d3c9444dbaef0175834f0159dcc9d73cfc3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -2494,7 +2494,7 @@ pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_enum(did, ref substs) => {\n         let variants = enum_variants(cx, did);\n         for variant in (*variants).iter() {\n-            // XXX(pcwalton): This is an inefficient way to do this. Don't\n+            // FIXME(pcwalton): This is an inefficient way to do this. Don't\n             // synthesize a tuple!\n             //\n             // Perform any type parameter substitutions.\n@@ -2655,7 +2655,7 @@ pub fn node_id_to_type(cx: ctxt, id: ast::NodeId) -> t {\n     }\n }\n \n-// XXX(pcwalton): Makes a copy, bleh. Probably better to not do that.\n+// FIXME(pcwalton): Makes a copy, bleh. Probably better to not do that.\n pub fn node_id_to_type_params(cx: ctxt, id: ast::NodeId) -> ~[t] {\n     let node_type_substs = cx.node_type_substs.borrow();\n     match node_type_substs.get().find(&id) {"}, {"sha": "002dd0c002aa4f8301b6845098b17b5adb63a2b9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -861,7 +861,7 @@ impl<'a> LookupContext<'a> {\n                            rcvr_ty: ty::t,\n                            candidates: &mut ~[Candidate])\n                            -> Option<method_map_entry> {\n-        // XXX(pcwalton): Do we need to clone here?\n+        // FIXME(pcwalton): Do we need to clone here?\n         let relevant_candidates: ~[Candidate] =\n             candidates.iter().map(|c| (*c).clone()).\n                 filter(|c| self.is_relevant(rcvr_ty, c)).collect();\n@@ -1169,7 +1169,7 @@ impl<'a> LookupContext<'a> {\n                 let destructors = self.tcx().destructors.borrow();\n                 bad = destructors.get().contains(&method_id);\n             }\n-            // XXX: does this properly enforce this on everything now\n+            // FIXME: does this properly enforce this on everything now\n             // that self has been merged in? -sully\n             method_param(method_param { trait_id: trait_id, .. }) |\n             method_object(method_object { trait_id: trait_id, .. }) => {"}, {"sha": "5f221994787b8c0c8d0d574940b1738c9368e078", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -2691,7 +2691,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n           let mut checked = false;\n           match place.node {\n               ast::ExprPath(ref path) => {\n-                  // XXX(pcwalton): For now we hardcode the two permissible\n+                  // FIXME(pcwalton): For now we hardcode the two permissible\n                   // places: the exchange heap and the managed heap.\n                   let definition = lookup_def(fcx, path.span, place.id);\n                   let def_id = ast_util::def_id_of_def(definition);"}, {"sha": "43af40363cd36547ee57967088024f2f1677b85d", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -330,7 +330,7 @@ fn search_for_vtable(vcx: &VtableContext,\n     ty::populate_implementations_for_trait_if_necessary(tcx,\n                                                         trait_ref.def_id);\n \n-    // XXX: this is a bad way to do this, since we do\n+    // FIXME: this is a bad way to do this, since we do\n     // pointless allocations.\n     let impls = {\n         let trait_impls = tcx.trait_impls.borrow();\n@@ -371,7 +371,7 @@ fn search_for_vtable(vcx: &VtableContext,\n         // we're trying to cast to some_trait.  If not, then we try\n         // the next impl.\n         //\n-        // XXX: document a bit more what this means\n+        // FIXME: document a bit more what this means\n         //\n         // FIXME(#5781) this should be mk_eqty not mk_subty\n         let ty::ty_param_substs_and_ty {"}, {"sha": "d533f9b0b13f96ec9bf8499eda2871a78dc5f343", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -309,7 +309,7 @@ impl CoherenceChecker {\n                 // Nothing to do.\n             }\n             Some(base_type_def_id) => {\n-                // XXX: Gather up default methods?\n+                // FIXME: Gather up default methods?\n                 if associated_traits.len() == 0 {\n                     self.add_inherent_impl(base_type_def_id, implementation);\n                 }"}, {"sha": "11a8ca0dd45a2552108cba5cac3c782e7b17fda5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -323,7 +323,7 @@ impl fmt::Default for clean::Type {\n                        },\n                        arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n                        ret = decl.decl.output);\n-                // XXX: where are bounds and lifetimes printed?!\n+                // FIXME: where are bounds and lifetimes printed?!\n             }\n             clean::BareFunction(ref decl) => {\n                 write!(f.buf, \"{}{}fn{}{}\",\n@@ -481,7 +481,7 @@ impl fmt::Default for clean::ViewPath {\n impl fmt::Default for clean::ImportSource {\n     fn fmt(v: &clean::ImportSource, f: &mut fmt::Formatter) {\n         match v.did {\n-            // XXX: shouldn't be restricted to just local imports\n+            // FIXME: shouldn't be restricted to just local imports\n             Some(did) if ast_util::is_local(did) => {\n                 resolved_path(f.buf, did.node, &v.path, true);\n             }\n@@ -498,7 +498,7 @@ impl fmt::Default for clean::ImportSource {\n impl fmt::Default for clean::ViewListIdent {\n     fn fmt(v: &clean::ViewListIdent, f: &mut fmt::Formatter) {\n         match v.source {\n-            // XXX: shouldn't be limited to just local imports\n+            // FIXME: shouldn't be limited to just local imports\n             Some(did) if ast_util::is_local(did) => {\n                 let path = clean::Path {\n                     global: false,"}, {"sha": "768ed8ae078dbfcbb12e9fe3cd1187a2cab8c2d0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -301,7 +301,7 @@ fn json_input(input: &str) -> Result<Output, ~str> {\n                 }\n                 None => return Err(~\"malformed json\"),\n             };\n-            // XXX: this should read from the \"plugins\" field, but currently\n+            // FIXME: this should read from the \"plugins\" field, but currently\n             //      Json doesn't implement decodable...\n             let plugin_output = ~[];\n             Ok((crate, plugin_output))"}, {"sha": "6b4f1c1ae1abc60c40fdd3e908369095d36ada3b", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -459,7 +459,7 @@ impl PkgSrc {\n                                                subcfgs,\n                                                opt,\n                                                what);\n-                    // XXX: result is an Option<Path>. The following code did not take that\n+                    // FIXME: result is an Option<Path>. The following code did not take that\n                     // into account. I'm not sure if the workcache really likes seeing the\n                     // output as \"Some(\\\"path\\\")\". But I don't know what to do about it.\n                     // FIXME (#9639): This needs to handle non-utf8 paths"}, {"sha": "1817be8a5940b4336971bb841bba783913c7dd2f", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -259,7 +259,7 @@ impl Drop for Request {\n     }\n }\n \n-/// XXX: Loop(*handle) is buggy with destructors. Normal structs\n+/// FIXME: Loop(*handle) is buggy with destructors. Normal structs\n /// with dtors may not be destructured, but tuple structs can,\n /// but the results are not correct.\n pub struct Loop {\n@@ -284,7 +284,7 @@ impl Loop {\n     }\n }\n \n-// XXX: Need to define the error constants like EOF so they can be\n+// FIXME: Need to define the error constants like EOF so they can be\n // compared to the UvError type\n \n pub struct UvError(c_int);\n@@ -349,7 +349,7 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n             uvll::EADDRNOTAVAIL => io::ConnectionRefused,\n             err => {\n                 uvdebug!(\"uverr.code {}\", err as int);\n-                // XXX: Need to map remaining uv error types\n+                // FIXME: Need to map remaining uv error types\n                 io::OtherIoError\n             }\n         };"}, {"sha": "74489b70192783db497679ea137985e5aae8463b", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -343,7 +343,7 @@ impl rtio::RtioTcpListener for TcpListener {\n         let mut acceptor = ~TcpAcceptor { listener: self };\n \n         let _m = acceptor.fire_homing_missile();\n-        // XXX: the 128 backlog should be configurable\n+        // FIXME: the 128 backlog should be configurable\n         match unsafe { uvll::uv_listen(acceptor.listener.handle, 128, listen_cb) } {\n             0 => Ok(acceptor as ~rtio::RtioTcpAcceptor),\n             n => Err(uv_error_to_io_error(UvError(n))),"}, {"sha": "0fed29631a65a7d1f87716d3593c230a2e2e4885", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -179,7 +179,7 @@ impl RtioUnixListener for PipeListener {\n         let mut acceptor = ~PipeAcceptor { listener: self };\n \n         let _m = acceptor.fire_homing_missile();\n-        // XXX: the 128 backlog should be configurable\n+        // FIXME: the 128 backlog should be configurable\n         match unsafe { uvll::uv_listen(acceptor.listener.pipe, 128, listen_cb) } {\n             0 => Ok(acceptor as ~RtioUnixAcceptor),\n             n => Err(uv_error_to_io_error(UvError(n))),"}, {"sha": "262952f8890cb7be7ad314ce8fca68bce0489ef7", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -157,7 +157,7 @@ extern fn read_cb(handle: *uvll::uv_stream_t, nread: ssize_t, _buf: *Buf) {\n     };\n     // Stop reading so that no read callbacks are\n     // triggered before the user calls `read` again.\n-    // XXX: Is there a performance impact to calling\n+    // FIXME: Is there a performance impact to calling\n     // stop here?\n     unsafe { assert_eq!(uvll::uv_read_stop(handle), 0); }\n     rcx.result = nread;"}, {"sha": "c5ff5c60b80c934083afce4dbb5bd052f80aa66d", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -361,7 +361,7 @@ fn request_sanity_check() {\n     }\n }\n \n-// XXX Event loops ignore SIGPIPE by default.\n+// FIXME Event loops ignore SIGPIPE by default.\n pub unsafe fn loop_new() -> *c_void {\n     return rust_uv_loop_new();\n }"}, {"sha": "82c1ed7440c502f0b4e949844f939c1c1685af6f", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -55,7 +55,7 @@ unsafe fn each_live_alloc(read_next_before: bool,\n \n #[cfg(unix)]\n fn debug_mem() -> bool {\n-    // XXX: Need to port the environment struct to newsched\n+    // FIXME: Need to port the environment struct to newsched\n     false\n }\n "}, {"sha": "111eb70eb204a2cadb3fd629fabbaf06c8d04587", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -780,7 +780,7 @@ impl<'a> Formatter<'a> {\n                         rt::Keyword(parse::One) => value == 1,\n                         rt::Keyword(parse::Two) => value == 2,\n \n-                        // XXX: Few/Many should have a user-specified boundary\n+                        // FIXME: Few/Many should have a user-specified boundary\n                         //      One possible option would be in the function\n                         //      pointer of the 'arg: Argument' struct.\n                         rt::Keyword(parse::Few) => value < 8,\n@@ -1085,7 +1085,7 @@ integer!(i64, u64)\n macro_rules! floating(($ty:ident) => {\n     impl Float for $ty {\n         fn fmt(f: &$ty, fmt: &mut Formatter) {\n-            // XXX: this shouldn't perform an allocation\n+            // FIXME: this shouldn't perform an allocation\n             let s = match fmt.precision {\n                 Some(i) => ::$ty::to_str_exact(f.abs(), i),\n                 None => ::$ty::to_str_digits(f.abs(), 6)\n@@ -1096,7 +1096,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl LowerExp for $ty {\n         fn fmt(f: &$ty, fmt: &mut Formatter) {\n-            // XXX: this shouldn't perform an allocation\n+            // FIXME: this shouldn't perform an allocation\n             let s = match fmt.precision {\n                 Some(i) => ::$ty::to_str_exp_exact(f.abs(), i, false),\n                 None => ::$ty::to_str_exp_digits(f.abs(), 6, false)\n@@ -1107,7 +1107,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl UpperExp for $ty {\n         fn fmt(f: &$ty, fmt: &mut Formatter) {\n-            // XXX: this shouldn't perform an allocation\n+            // FIXME: this shouldn't perform an allocation\n             let s = match fmt.precision {\n                 Some(i) => ::$ty::to_str_exp_exact(f.abs(), i, true),\n                 None => ::$ty::to_str_exp_digits(f.abs(), 6, true)"}, {"sha": "26e0a0d09adb9d43659812a5f9e86e62cc23ea87", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -10,8 +10,8 @@\n \n //! Utility mixins that apply to all Readers and Writers\n \n-// XXX: Not sure how this should be structured\n-// XXX: Iteration should probably be considered separately\n+// FIXME: Not sure how this should be structured\n+// FIXME: Iteration should probably be considered separately\n \n use container::Container;\n use iter::Iterator;"}, {"sha": "8531edeb2c6447f92a9d6a8d2aa35453ee77b154", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -84,7 +84,7 @@ Some examples of obvious things you might want to do\n     ```\n \n * Make an simple HTTP request\n-  XXX This needs more improvement: TcpStream constructor taking &str,\n+  FIXME This needs more improvement: TcpStream constructor taking &str,\n   `write_str` and `write_line` methods.\n \n     ```rust,should_fail\n@@ -101,7 +101,7 @@ Some examples of obvious things you might want to do\n * Connect based on URL? Requires thinking about where the URL type lives\n   and how to make protocol handlers extensible, e.g. the \"tcp\" protocol\n   yields a `TcpStream`.\n-  XXX this is not implemented now.\n+  FIXME this is not implemented now.\n \n     ```rust\n     // connect(\"tcp://localhost:8080\");\n@@ -209,7 +209,7 @@ if error.is_some() {\n # ::std::io::fs::unlink(&Path::new(\"diary.txt\"));\n ```\n \n-XXX: Need better condition handling syntax\n+FIXME: Need better condition handling syntax\n \n In this case the condition handler will have the opportunity to\n inspect the IoError raised by either the call to `new` or the call to\n@@ -232,8 +232,8 @@ to errors similar to null pointer dereferences.\n In particular code written to ignore errors and expect conditions to be unhandled\n will start passing around null or zero objects when wrapped in a condition handler.\n \n-* XXX: How should we use condition handlers that return values?\n-* XXX: Should EOF raise default conditions when EOF is not an error?\n+* FIXME: How should we use condition handlers that return values?\n+* FIXME: Should EOF raise default conditions when EOF is not an error?\n \n # Issues with i/o scheduler affinity, work stealing, task pinning\n \n@@ -263,7 +263,7 @@ Out of scope\n * Async I/O. We'll probably want it eventually\n \n \n-# XXX Questions and issues\n+# FIXME Questions and issues\n \n * Should default constructors take `Path` or `&str`? `Path` makes simple cases verbose.\n   Overloading would be nice.\n@@ -375,7 +375,7 @@ static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n \n /// The type passed to I/O condition handlers to indicate error\n ///\n-/// # XXX\n+/// # FIXME\n ///\n /// Is something like this sufficient? It's kind of archaic\n pub struct IoError {\n@@ -446,7 +446,7 @@ impl ToStr for IoErrorKind {\n     }\n }\n \n-// XXX: Can't put doc comments on macros\n+// FIXME: Can't put doc comments on macros\n // Raised by `I/O` operations on error.\n condition! {\n     pub io_error: IoError -> ();\n@@ -491,9 +491,9 @@ pub trait Reader {\n     /// Raises the `io_error` condition on error. If the condition\n     /// is handled then no guarantee is made about the number of bytes\n     /// read and the contents of `buf`. If the condition is handled\n-    /// returns `None` (XXX see below).\n+    /// returns `None` (FIXME see below).\n     ///\n-    /// # XXX\n+    /// # FIXME\n     ///\n     /// * Should raise_default error on eof?\n     /// * If the condition is handled it should still return the bytes read,\n@@ -1218,7 +1218,7 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n-/// # XXX\n+/// # FIXME\n /// * Are `u64` and `i64` the right choices?\n pub trait Seek {\n     /// Return position of file cursor in the stream\n@@ -1228,7 +1228,7 @@ pub trait Seek {\n     ///\n     /// A successful seek clears the EOF indicator.\n     ///\n-    /// # XXX\n+    /// # FIXME\n     ///\n     /// * What is the behavior when seeking past the end of a stream?\n     fn seek(&mut self, pos: i64, style: SeekStyle);"}, {"sha": "a1650c9a3a33cf6e5c6e810745d9c6de03a796ea", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -91,7 +91,7 @@ pub fn get_host_addresses(host: &str) -> Option<~[IpAddr]> {\n ///\n /// On failure, this will raise on the `io_error` condition.\n ///\n-/// XXX: this is not public because the `Hint` structure is not ready for public\n+/// FIXME: this is not public because the `Hint` structure is not ready for public\n ///      consumption just yet.\n fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n           -> Option<~[Info]> {"}, {"sha": "9f0bf84c8d83db21703dbbe95c3c282d82db7605", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -584,7 +584,7 @@ mod test {\n     })\n \n     iotest!(fn socket_and_peer_name_ip6() {\n-        // XXX: peer name is not consistent\n+        // FIXME: peer name is not consistent\n         //peer_name(next_test_ip6());\n         socket_name(next_test_ip6());\n     })"}, {"sha": "140323110df682e0c2efc1ef91c7c42d8b11b49f", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -51,7 +51,7 @@ pub trait Sample<Support> {\n /// Since no state is recorded, each sample is (statistically)\n /// independent of all others, assuming the `Rng` used has this\n /// property.\n-// XXX maybe having this separate is overkill (the only reason is to\n+// FIXME maybe having this separate is overkill (the only reason is to\n // take &self rather than &mut self)? or maybe this should be the\n // trait called `Sample` and the other should be `DependentSample`.\n pub trait IndependentSample<Support>: Sample<Support> {"}, {"sha": "8567f0e02516121ffceb1eab9ec48edb26008fb8", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -108,7 +108,7 @@ fn do_iter_crate_map<'a>(\n \n /// Iterates recursively over `crate_map` and all child crate maps\n pub fn iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: |&ModEntry|) {\n-    // XXX: use random numbers as keys from the OS-level RNG when there is a nice\n+    // FIXME: use random numbers as keys from the OS-level RNG when there is a nice\n     //        way to do this\n     let mut v: HashSet<*CrateMap<'a>> = HashSet::with_capacity_and_keys(0, 0, 32);\n     do_iter_crate_map(crate_map, f, &mut v);"}, {"sha": "42a7e7867f94d321e90ded3e0b158e9dc568b6fa", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -293,7 +293,7 @@ impl Drop for MemoryRegion {\n \n #[inline]\n pub unsafe fn local_malloc(td: *u8, size: uint) -> *u8 {\n-    // XXX: Unsafe borrow for speed. Lame.\n+    // FIXME: Unsafe borrow for speed. Lame.\n     let task: Option<*mut Task> = Local::try_unsafe_borrow();\n     match task {\n         Some(task) => {\n@@ -306,7 +306,7 @@ pub unsafe fn local_malloc(td: *u8, size: uint) -> *u8 {\n // A little compatibility function\n #[inline]\n pub unsafe fn local_free(ptr: *u8) {\n-    // XXX: Unsafe borrow for speed. Lame.\n+    // FIXME: Unsafe borrow for speed. Lame.\n     let task_ptr: Option<*mut Task> = Local::try_unsafe_borrow();\n     match task_ptr {\n         Some(task) => {"}, {"sha": "56f6c8f8e6c5ba459fac8079ce568e12f18ae730", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -52,7 +52,7 @@ Several modules in `core` are clients of `rt`:\n \n */\n \n-// XXX: this should not be here.\n+// FIXME: this should not be here.\n #[allow(missing_doc)];\n \n use any::Any;\n@@ -71,7 +71,7 @@ pub use self::util::default_sched_threads;\n // Export unwinding facilities used by the failure macros\n pub use self::unwind::{begin_unwind, begin_unwind_raw};\n \n-// XXX: these probably shouldn't be public...\n+// FIXME: these probably shouldn't be public...\n #[doc(hidden)]\n pub mod shouldnt_be_public {\n     pub use super::local_ptr::native::maybe_tls_key;\n@@ -155,7 +155,7 @@ pub trait Runtime {\n     /// The (low, high) edges of the current stack.\n     fn stack_bounds(&self) -> (uint, uint); // (lo, hi)\n \n-    // XXX: This is a serious code smell and this should not exist at all.\n+    // FIXME: This is a serious code smell and this should not exist at all.\n     fn wrap(~self) -> ~Any;\n }\n \n@@ -165,7 +165,7 @@ pub trait Runtime {\n /// the crate's logging flags, registering GC\n /// metadata, and storing the process arguments.\n pub fn init(argc: int, argv: **u8) {\n-    // XXX: Derefing these pointers is not safe.\n+    // FIXME: Derefing these pointers is not safe.\n     // Need to propagate the unsafety to `start`.\n     unsafe {\n         args::init(argc, argv);"}, {"sha": "455a84b4ce3cf33079f791db864c386333cada37", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -86,7 +86,7 @@ pub struct LocalIo<'a> {\n #[unsafe_destructor]\n impl<'a> Drop for LocalIo<'a> {\n     fn drop(&mut self) {\n-        // XXX(pcwalton): Do nothing here for now, but eventually we may want\n+        // FIXME(pcwalton): Do nothing here for now, but eventually we may want\n         // something. For now this serves to make `LocalIo` noncopyable.\n     }\n }\n@@ -143,7 +143,7 @@ impl<'a> LocalIo<'a> {\n     /// Returns the underlying I/O factory as a trait reference.\n     #[inline]\n     pub fn get<'a>(&'a mut self) -> &'a mut IoFactory {\n-        // XXX(pcwalton): I think this is actually sound? Could borrow check\n+        // FIXME(pcwalton): I think this is actually sound? Could borrow check\n         // allow this safely?\n         unsafe {\n             cast::transmute_copy(&self.factory)"}, {"sha": "e99e7fa4edd7056195835d3e523ae0d0a9be1e00", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -212,7 +212,7 @@ impl Task {\n         // pretty sketchy and involves shuffling vtables of trait objects\n         // around, but it gets the job done.\n         //\n-        // XXX: This function is a serious code smell and should be avoided at\n+        // FIXME: This function is a serious code smell and should be avoided at\n         //      all costs. I have yet to think of a method to avoid this\n         //      function, and I would be saddened if more usage of the function\n         //      crops up."}, {"sha": "9c17c624987b5fb220df6d75208628545a70b8eb", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -20,7 +20,7 @@ use unstable::running_on_valgrind;\n use vec::ImmutableVector;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n-// XXX: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n+// FIXME: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n pub static ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) || cfg!(rtassert);\n \n /// Get the number of cores available"}, {"sha": "b6c9acd26723d0d46b2aef74be28e03590ff11f2", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -119,7 +119,7 @@ impl Str for SendStr {\n     fn as_slice<'r>(&'r self) -> &'r str {\n         match *self {\n             SendStrOwned(ref s) => s.as_slice(),\n-            // XXX: Borrowchecker doesn't recognize lifetime as static unless prompted\n+            // FIXME: Borrowchecker doesn't recognize lifetime as static unless prompted\n             // SendStrStatic(s) => s.as_slice()\n             SendStrStatic(s)    => {let tmp: &'static str = s; tmp}\n         }"}, {"sha": "b65feedb2ae5e45dddb6af56cdbd9a29217bce77", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -45,7 +45,7 @@\n // NB: the \"buffer pool\" strategy is not done for speed, but rather for\n //     correctness. For more info, see the comment on `swap_buffer`\n \n-// XXX: all atomic operations in this module use a SeqCst ordering. That is\n+// FIXME: all atomic operations in this module use a SeqCst ordering. That is\n //      probably overkill\n \n use cast;"}, {"sha": "b4b327cc9d163e4e644f0459a5e83fc8b799631f", "filename": "src/libstd/sync/spsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fspsc_queue.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -43,7 +43,7 @@ use sync::atomics::{AtomicPtr, Relaxed, AtomicUint, Acquire, Release};\n \n // Node within the linked list queue of messages to send\n struct Node<T> {\n-    // XXX: this could be an uninitialized T if we're careful enough, and\n+    // FIXME: this could be an uninitialized T if we're careful enough, and\n     //      that would reduce memory usage (and be a bit faster).\n     //      is it worth it?\n     value: Option<T>,           // nullable for re-use of nodes\n@@ -225,7 +225,7 @@ impl<T: Send, P: Send> State<T, P> {\n         if self.cache_bound == 0 {\n             self.tail_prev.store(tail, Release);\n         } else {\n-            // XXX: this is dubious with overflow.\n+            // FIXME: this is dubious with overflow.\n             let additions = self.cache_additions.load(Relaxed);\n             let subtractions = self.cache_subtractions.load(Relaxed);\n             let size = additions - subtractions;"}, {"sha": "49bea6a33a9d1bba8a056b8a5e1ec1ff5a91caab", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -86,7 +86,7 @@ pub fn path_elem_to_str(pe: PathElem, itr: @IdentInterner) -> ~str {\n /// from, even if it's hard to read (previously they would all just be\n /// listed as `__extensions__::method_name::hash`, with no indication\n /// of the type).\n-// XXX: these dollar signs and the names in general are actually a\n+// FIXME: these dollar signs and the names in general are actually a\n //      relic of $ being one of the very few valid symbol names on\n //      unix. These kinds of details shouldn't be exposed way up here\n //      in the ast."}, {"sha": "d4a412bbe9ff2d67437f8ed2f90312cd8fc60f43", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -41,7 +41,7 @@ pub struct BytePos(u32);\n #[deriving(Eq,IterBytes, Ord)]\n pub struct CharPos(uint);\n \n-// XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n+// FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n impl Pos for BytePos {"}, {"sha": "3b2cc4ca6ede99c8348cb48b6b3cb180bead8f2c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -179,7 +179,7 @@ pub trait AstBuilder {\n             name: Ident, attrs: ~[ast::Attribute], node: ast::Item_) -> @ast::Item;\n \n     fn arg(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::Arg;\n-    // XXX unused self\n+    // FIXME unused self\n     fn fn_decl(&self, inputs: ~[ast::Arg], output: P<ast::Ty>) -> P<ast::FnDecl>;\n \n     fn item_fn_poly(&self,\n@@ -724,7 +724,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    // XXX unused self\n+    // FIXME unused self\n     fn fn_decl(&self, inputs: ~[ast::Arg], output: P<ast::Ty>) -> P<ast::FnDecl> {\n         P(ast::FnDecl {\n             inputs: inputs,\n@@ -736,7 +736,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn item(&self, span: Span,\n             name: Ident, attrs: ~[ast::Attribute], node: ast::Item_) -> @ast::Item {\n-        // XXX: Would be nice if our generated code didn't violate\n+        // FIXME: Would be nice if our generated code didn't violate\n         // Rust coding conventions\n         @ast::Item { ident: name,\n                     attrs: attrs,"}, {"sha": "1ffff03a80f4a78444eea620184deefb9cb48671", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -115,7 +115,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n \n                     // Keep going, outside-in.\n                     //\n-                    // XXX(pcwalton): Is it necessary to clone the\n+                    // FIXME(pcwalton): Is it necessary to clone the\n                     // node here?\n                     let fully_expanded =\n                         fld.fold_expr(marked_after).node.clone();"}, {"sha": "87a2f374c900517be9bcb1686f5182621f95a3f0", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -173,7 +173,7 @@ fn lockstep_iter_size(t: &TokenTree, r: &TtReader) -> LockstepIterSize {\n // return the next token from the TtReader.\n // EFFECT: advances the reader's token field\n pub fn tt_next_token(r: &TtReader) -> TokenAndSpan {\n-    // XXX(pcwalton): Bad copy?\n+    // FIXME(pcwalton): Bad copy?\n     let ret_val = TokenAndSpan {\n         tok: r.cur_tok.get(),\n         sp: r.cur_span.get(),\n@@ -231,7 +231,7 @@ pub fn tt_next_token(r: &TtReader) -> TokenAndSpan {\n     }\n     loop { /* because it's easiest, this handles `TTDelim` not starting\n     with a `TTTok`, even though it won't happen */\n-        // XXX(pcwalton): Bad copy.\n+        // FIXME(pcwalton): Bad copy.\n         match r.stack.get().forest[r.stack.get().idx.get()].clone() {\n           TTDelim(tts) => {\n             r.stack.set(@TtFrame {\n@@ -250,7 +250,7 @@ pub fn tt_next_token(r: &TtReader) -> TokenAndSpan {\n             return ret_val;\n           }\n           TTSeq(sp, tts, sep, zerok) => {\n-            // XXX(pcwalton): Bad copy.\n+            // FIXME(pcwalton): Bad copy.\n             let t = TTSeq(sp, tts, sep.clone(), zerok);\n             match lockstep_iter_size(&t, r) {\n               LisUnconstrained => {\n@@ -306,7 +306,7 @@ pub fn tt_next_token(r: &TtReader) -> TokenAndSpan {\n                 return ret_val;\n               }\n               MatchedNonterminal(ref other_whole_nt) => {\n-                // XXX(pcwalton): Bad copy.\n+                // FIXME(pcwalton): Bad copy.\n                 r.cur_span.set(sp);\n                 r.cur_tok.set(INTERPOLATED((*other_whole_nt).clone()));\n                 r.stack.get().idx.set(r.stack.get().idx.get() + 1u);"}, {"sha": "2521bb515f769ba418ec3734a3c5bd2f91654a97", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -123,7 +123,7 @@ impl Reader for StringReader {\n     }\n     fn span_diag(@self) -> @SpanHandler { self.span_diagnostic }\n     fn peek(@self) -> TokenAndSpan {\n-        // XXX(pcwalton): Bad copy!\n+        // FIXME(pcwalton): Bad copy!\n         TokenAndSpan {\n             tok: self.peek_tok.get(),\n             sp: self.peek_span.get(),"}, {"sha": "e110ebae0930d3f5b63b878394992858bacd37dc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -1237,7 +1237,7 @@ impl Parser {\n                 Parser::token_is_lifetime(&self.token) {\n             // CLOSURE\n             //\n-            // XXX(pcwalton): Eventually `token::LT` will not unambiguously\n+            // FIXME(pcwalton): Eventually `token::LT` will not unambiguously\n             // introduce a closure, once procs can have lifetime bounds. We\n             // will need to refactor the grammar a little bit at that point.\n \n@@ -3949,7 +3949,7 @@ impl Parser {\n         let generics = self.parse_generics();\n \n         // This is a new-style impl declaration.\n-        // XXX: clownshoes\n+        // FIXME: clownshoes\n         let ident = special_idents::clownshoes_extensions;\n \n         // Special case: if the next identifier that follows is '(', don't\n@@ -4071,7 +4071,7 @@ impl Parser {\n                                token_str))\n         }\n \n-        let _ = ast::DUMMY_NODE_ID;  // XXX: Workaround for crazy bug.\n+        let _ = ast::DUMMY_NODE_ID;  // FIXME: Workaround for crazy bug.\n         let new_id = ast::DUMMY_NODE_ID;\n         (class_name,\n          ItemStruct(@ast::StructDef {"}, {"sha": "36a87658c111f139468cea445689b5a24b2c6e1e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -2311,7 +2311,7 @@ pub fn print_string(s: &mut State, st: &str, style: ast::StrStyle) {\n     word(&mut s.s, st);\n }\n \n-// XXX(pcwalton): A nasty function to extract the string from an `io::Writer`\n+// FIXME(pcwalton): A nasty function to extract the string from an `io::Writer`\n // that we \"know\" to be a `MemWriter` that works around the lack of checked\n // downcasts.\n unsafe fn get_mem_writer(writer: &mut ~io::Writer) -> ~str {"}, {"sha": "c8f041c65622765dbe91493109eb4f1428f0b479", "filename": "src/rt/rust_uv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Frt%2Frust_uv.c", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Frt%2Frust_uv.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.c?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -25,7 +25,7 @@\n \n void*\n rust_uv_loop_new() {\n-// XXX libuv doesn't always ignore SIGPIPE even though we don't need it.\n+// FIXME libuv doesn't always ignore SIGPIPE even though we don't need it.\n #ifndef __WIN32__\n     signal(SIGPIPE, SIG_IGN);\n #endif"}, {"sha": "3719e76b30fc2dd0eaa47d51fb9d0df240966868", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -56,7 +56,7 @@ static HOMO_SAPIENS: [AminoAcid, ..4] = [\n     AminoAcid { c: 't' as u8, p: 0.3015094502008 },\n ];\n \n-// XXX: Use map().\n+// FIXME: Use map().\n fn sum_and_scale(a: &'static [AminoAcid]) -> ~[AminoAcid] {\n     let mut result = ~[];\n     let mut p = 0f32;"}, {"sha": "94569dc5ac0a2fd785312d5c70f1930d2a0a8089", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -49,7 +49,7 @@ impl Code {\n         code\n     }\n \n-    // XXX: Inefficient.\n+    // FIXME: Inefficient.\n     fn unpack(&self, frame: i32) -> ~str {\n         let mut key = **self;\n         let mut result = ~[];"}, {"sha": "ee683d4de46867ceafa0f8ca820b9118085cbc6a", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -22,7 +22,7 @@ mod cross_crate {\n     use self::lint_stability::*;\n \n     fn test() {\n-        // XXX: attributes on methods are not encoded cross crate.\n+        // FIXME: attributes on methods are not encoded cross crate.\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated item"}, {"sha": "eae791b6b08a62294b11fff47d469c7ce831e05e", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n     (@\"test\").test_imm();\n     (&\"test\").test_imm();\n \n-    // XXX: Other types of mutable vecs don't currently exist\n+    // FIXME: Other types of mutable vecs don't currently exist\n \n     // NB: We don't do this double autoreffing for &mut self because that would\n     // allow creating a mutable pointer to a temporary, which would be a source"}]}