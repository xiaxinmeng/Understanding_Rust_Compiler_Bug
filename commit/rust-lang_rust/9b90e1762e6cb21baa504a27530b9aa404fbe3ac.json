{"sha": "9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTBlMTc2MmU2Y2IyMWJhYTUwNGEyNzUzMGI5YWE0MDRmYmUzYWM=", "commit": {"author": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-01T09:13:38Z"}, "committer": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-23T09:41:19Z"}, "message": "add `insert` and `insert_with` to `Option`\n\nThis removes a cause of `unwrap` and code complexity.\n\nThis allows replacing\n\n```\noption_value = Some(build());\noption_value.as_mut().unwrap()\n```\n\nwith\n\n```\noption_value.insert(build())\n```\n\nor\n\n```\noption_value.insert_with(build)\n```\n\nIt's also useful in contexts not requiring the mutability of the reference.\n\nHere's a typical cache example:\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => {\n\t    cache = Some(compute_cache_entry());\n\t    // unwrap is OK because we just filled the option\n\t    &cache.as_ref().unwrap().content\n\t}\n};\n```\n\nIt can be changed into\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => &cache.insert_with(compute_cache_entry).content,\n};\n```", "tree": {"sha": "564fe16c2a195a1d5b2a57dd05d6da597cb7cafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/564fe16c2a195a1d5b2a57dd05d6da597cb7cafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "html_url": "https://github.com/rust-lang/rust/commit/9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b90e1762e6cb21baa504a27530b9aa404fbe3ac/comments", "author": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cd294cf2775441e713c7ee2918b728733b99f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cd294cf2775441e713c7ee2918b728733b99f5", "html_url": "https://github.com/rust-lang/rust/commit/a9cd294cf2775441e713c7ee2918b728733b99f5"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "394be746ec2facf3aca2a28a564f198ee403092f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e1762e6cb21baa504a27530b9aa404fbe3ac/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e1762e6cb21baa504a27530b9aa404fbe3ac/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "patch": "@@ -562,6 +562,52 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /////////////////////////////////////////////////////////////////////////\n+    // Setting a new value\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Inserts `v` into the option then returns a mutable reference\n+    /// to the contained value.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(option_insert)]\n+    ///\n+    /// let mut o = None;\n+    /// let v = o.insert(3);\n+    /// assert_eq!(*v, 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_insert\", reason = \"new API\", issue = \"none\")]\n+    pub fn insert(&mut self, v: T) -> &mut T {\n+        self.insert_with(|| v)\n+    }\n+\n+    /// Inserts a value computed from `f` into the option, then returns a\n+    /// mutable reference to the contained value.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(option_insert)]\n+    ///\n+    /// let mut o = None;\n+    /// let v = o.insert_with(|| 3);\n+    /// assert_eq!(*v, 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_insert\", reason = \"new API\", issue = \"none\")]\n+    pub fn insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n+        *self = Some(f());\n+\n+        match *self {\n+            Some(ref mut v) => v,\n+            // SAFETY: the code above just filled the option\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////"}]}