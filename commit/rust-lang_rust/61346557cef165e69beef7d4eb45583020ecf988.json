{"sha": "61346557cef165e69beef7d4eb45583020ecf988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzQ2NTU3Y2VmMTY1ZTY5YmVlZjdkNGViNDU1ODMwMjBlY2Y5ODg=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-13T09:45:36Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-21T15:46:32Z"}, "message": "Enforce consistent drop order w/ async methods.\n\nThis commit extends the previous commit to apply to trait methods as\nwell as free functions.", "tree": {"sha": "fb29d4cb07897c49d7a04a85a517869afd6952d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb29d4cb07897c49d7a04a85a517869afd6952d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61346557cef165e69beef7d4eb45583020ecf988", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAly8kFgACgkQAXYLT59T\n8VTleg//WlMeEypEFQ8dUwTPkINYwUSboERsqfRcPdKiLs10z6uFC/MsiE//ykAp\nmAv7jkmV7pRv+Uo9G6bhZMLcv9tmeU9bKY1fyKAgewdvzc7HAzOjJZX9ErOwyuvZ\n8ZvbXb02T2pU3H9qD0mdOPxfAFo3Cf9ptv2mE3NUmP/UZ9p3XTkg9AznKh76wyO9\n9Wuma0GC6GRAzE4ToJ7lZOqJQ1nGifrzHdbpJCRCziHNBWbIwCUlldaU7t6Tfhsn\n81CH7C1+mpg3sW7Yje5zB7CGvApS2sYhOjkVJ8xr9xCErcpmUZoMZQIiOvl22ghe\nwKXiQS3w/mlz5R8Wwsgw22sXDB3nxkOX5K+TxYUETpmKFf215mesmfSE7yiIEqvq\nbPbyI+tny4zixj4uwtpP8EJMxtH2rDML28QYRw6JaP1+lpb6TYtfoLbz27PaQB/7\nXNIOU4l2YLPsjefM0yI28BID+i+sFFlangr5etahqG+7aoArBLemCdvGXHL37yLo\nvolu0j/v7ZWoBiGlXCSvjdgOL4N3QtvqzXvemeCYwhCDKDTLYHefP4FMg1KWOMlJ\ntMf/+texI1jT3Qk2fxfCC+qR5BGY7Vdu2WhuAOUpbfsGgLGUyoQnlDA45Z0i4ErD\n/zcTFD/5Ke6P46B4BvgmuKqQdmBtmUY+5mV6DkgvUVvG0FGht4E=\n=b7ba\n-----END PGP SIGNATURE-----", "payload": "tree fb29d4cb07897c49d7a04a85a517869afd6952d2\nparent 7c6dc7a254eacec43b95862a5a943b3e8435aaa6\nauthor David Wood <david@davidtw.co> 1552470336 +0100\ncommitter David Wood <david@davidtw.co> 1555861592 +0100\n\nEnforce consistent drop order w/ async methods.\n\nThis commit extends the previous commit to apply to trait methods as\nwell as free functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61346557cef165e69beef7d4eb45583020ecf988", "html_url": "https://github.com/rust-lang/rust/commit/61346557cef165e69beef7d4eb45583020ecf988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61346557cef165e69beef7d4eb45583020ecf988/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "html_url": "https://github.com/rust-lang/rust/commit/7c6dc7a254eacec43b95862a5a943b3e8435aaa6"}], "stats": {"total": 139, "additions": 130, "deletions": 9}, "files": [{"sha": "5afac999fc0e6747f51d8f422f5ab881cba259af", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/61346557cef165e69beef7d4eb45583020ecf988/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61346557cef165e69beef7d4eb45583020ecf988/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=61346557cef165e69beef7d4eb45583020ecf988", "patch": "@@ -3611,15 +3611,33 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                let body_id = self.lower_async_body(&sig.decl, &sig.header.asyncness.node, body);\n-                let impl_trait_return_allow = !self.is_in_trait_impl;\n-                let (generics, sig) = self.lower_method_sig(\n-                    &i.generics,\n-                    sig,\n-                    impl_item_def_id,\n-                    impl_trait_return_allow,\n-                    sig.header.asyncness.node.opt_return_id(),\n-                );\n+                let mut lower_method = |sig: &MethodSig| {\n+                    let body_id = self.lower_async_body(\n+                        &sig.decl, &sig.header.asyncness.node, body\n+                    );\n+                    let impl_trait_return_allow = !self.is_in_trait_impl;\n+                    let (generics, sig) = self.lower_method_sig(\n+                        &i.generics,\n+                        sig,\n+                        impl_item_def_id,\n+                        impl_trait_return_allow,\n+                        sig.header.asyncness.node.opt_return_id(),\n+                    );\n+                    (body_id, generics, sig)\n+                };\n+\n+                let (body_id, generics, sig) = if let IsAsync::Async {\n+                    ref arguments, ..\n+                } = sig.header.asyncness.node {\n+                    let mut sig = sig.clone();\n+                    // Replace the arguments of this async function with the generated\n+                    // arguments that will be moved into the closure.\n+                    sig.decl.inputs = arguments.clone().drain(..).map(|a| a.arg).collect();\n+                    lower_method(&sig)\n+                } else {\n+                    lower_method(sig)\n+                };\n+\n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n             ImplItemKind::Type(ref ty) => ("}, {"sha": "d075d2d619106ec4350566a1b34e634e45536b87", "filename": "src/test/run-pass/issue-54716.rs", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/61346557cef165e69beef7d4eb45583020ecf988/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61346557cef165e69beef7d4eb45583020ecf988/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-54716.rs?ref=61346557cef165e69beef7d4eb45583020ecf988", "patch": "@@ -10,6 +10,7 @@ extern crate arc_wake;\n use arc_wake::ArcWake;\n use std::cell::RefCell;\n use std::future::Future;\n+use std::marker::PhantomData;\n use std::sync::Arc;\n use std::task::Context;\n \n@@ -49,6 +50,46 @@ async fn foobar(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n     x.1.borrow_mut().push(DropOrder::Function);\n }\n \n+struct Foo;\n+\n+impl Foo {\n+    async fn foo(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn bar(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn baz((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn foobar(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    async fn foo(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn bar(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn baz(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    async fn foobar(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n fn main() {\n     let empty = Arc::new(EmptyWaker);\n     let waker = ArcWake::into_waker(empty);\n@@ -60,6 +101,8 @@ fn main() {\n     // non-async functions. This is because the drop order of captured variables doesn't match the\n     // drop order of arguments in a function.\n \n+    // Free functions\n+\n     let af = Arc::new(RefCell::new(Vec::new()));\n     let mut fut = Box::pin(foo(D(\"x\", af.clone()), D(\"_y\", af.clone())));\n     let _ = fut.as_mut().poll(&mut cx);\n@@ -86,4 +129,64 @@ fn main() {\n     assert_eq!(*af.borrow(), &[\n        Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\"),\n     ]);\n+\n+    // Methods w/out self\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(Foo::foo(D(\"x\", af.clone()), D(\"_y\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"_y\"), Val(\"x\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(Foo::bar(D(\"x\", af.clone()), D(\"_\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(Foo::baz((D(\"x\", af.clone()), D(\"_\", af.clone()))));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(Foo::foobar(\n+        D(\"x\", af.clone()),\n+        (D(\"a\", af.clone()), D(\"_\", af.clone()), D(\"_c\", af.clone())),\n+        D(\"_\", af.clone()),\n+        D(\"_y\", af.clone()),\n+    ));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[\n+       Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\"),\n+    ]);\n+\n+    // Methods\n+\n+    let b = Bar(Default::default());\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(b.foo(D(\"x\", af.clone()), D(\"_y\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"_y\"), Val(\"x\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(b.bar(D(\"x\", af.clone()), D(\"_\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(b.baz((D(\"x\", af.clone()), D(\"_\", af.clone()))));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(b.foobar(\n+        D(\"x\", af.clone()),\n+        (D(\"a\", af.clone()), D(\"_\", af.clone()), D(\"_c\", af.clone())),\n+        D(\"_\", af.clone()),\n+        D(\"_y\", af.clone()),\n+    ));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[\n+       Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\"),\n+    ]);\n }"}]}