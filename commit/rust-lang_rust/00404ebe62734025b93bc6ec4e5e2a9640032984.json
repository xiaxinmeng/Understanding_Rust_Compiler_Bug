{"sha": "00404ebe62734025b93bc6ec4e5e2a9640032984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNDA0ZWJlNjI3MzQwMjViOTNiYzZlYzRlNWUyYTk2NDAwMzI5ODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T18:17:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T18:29:04Z"}, "message": "Cleanup in std::task", "tree": {"sha": "95eb56a66d931a9e2c055be0da9b5b90de99c704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95eb56a66d931a9e2c055be0da9b5b90de99c704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00404ebe62734025b93bc6ec4e5e2a9640032984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00404ebe62734025b93bc6ec4e5e2a9640032984", "html_url": "https://github.com/rust-lang/rust/commit/00404ebe62734025b93bc6ec4e5e2a9640032984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00404ebe62734025b93bc6ec4e5e2a9640032984/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20e4f793e22e7078435259e8fe65ca60f92fec1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e4f793e22e7078435259e8fe65ca60f92fec1c", "html_url": "https://github.com/rust-lang/rust/commit/20e4f793e22e7078435259e8fe65ca60f92fec1c"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "44c1a2ce3417ccb9fd0114cdfc426ba6ada5b777", "filename": "src/lib/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00404ebe62734025b93bc6ec4e5e2a9640032984/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00404ebe62734025b93bc6ec4e5e2a9640032984/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=00404ebe62734025b93bc6ec4e5e2a9640032984", "patch": "@@ -132,5 +132,5 @@ Constructs a channel.\n The channel is bound to the port used to construct it.\n */\n fn chan<unique T>(p: port<T>) -> chan<T> {\n-    chan_t(task::get_task_id(), rustrt::get_port_id(***p))\n+    chan_t(task::get_task(), rustrt::get_port_id(***p))\n }"}, {"sha": "f90ebe45ed9e9b1a95d5faf64b6b1c16ec579815", "filename": "src/lib/task.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00404ebe62734025b93bc6ec4e5e2a9640032984/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00404ebe62734025b93bc6ec4e5e2a9640032984/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=00404ebe62734025b93bc6ec4e5e2a9640032984", "patch": "@@ -22,7 +22,7 @@ export set_min_stack;\n export task_result;\n export tr_success;\n export tr_failure;\n-export get_task_id;\n+export get_task;\n export spawn;\n export spawn_notify;\n export spawn_joinable;\n@@ -31,7 +31,7 @@ native \"cdecl\" mod rustrt {\n     // these must run on the Rust stack so that they can swap stacks etc:\n     fn task_sleep(time_in_us: uint);\n     fn task_yield();\n-    fn start_task(id: task_id, closure: *u8);\n+    fn start_task(id: task, closure: *u8);\n }\n \n native \"c-stack-cdecl\" mod rustrt2 = \"rustrt\" {\n@@ -43,7 +43,7 @@ native \"c-stack-cdecl\" mod rustrt2 = \"rustrt\" {\n     fn set_min_stack(stack_size: uint);\n \n     fn new_task() -> task_id;\n-    fn drop_task(task: *rust_task);\n+    fn drop_task(task_id: *rust_task);\n     fn get_task_pointer(id: task_id) -> *rust_task;\n \n     fn migrate_alloc(alloc: *u8, target: task_id);\n@@ -57,11 +57,11 @@ type rust_task =\n \n resource rust_task_ptr(task: *rust_task) { rustrt2::drop_task(task); }\n \n-type task = int;\n-type task_id = task;\n-type joinable_task = (task_id, comm::port<task_notification>);\n+type task_id = int;\n+type task = task_id;\n+type joinable_task = (task, comm::port<task_notification>);\n \n-fn get_task_id() -> task_id { rustrt2::get_task_id() }\n+fn get_task() -> task { rustrt2::get_task_id() }\n \n /**\n  * Hints the scheduler to yield this task for a specified ammount of time.\n@@ -76,7 +76,7 @@ tag task_result { tr_success; tr_failure; }\n \n tag task_notification { exit(task, task_result); }\n \n-fn join(task_port: (task_id, comm::port<task_notification>)) -> task_result {\n+fn join(task_port: joinable_task) -> task_result {\n     let (id, port) = task_port;\n     alt comm::recv::<task_notification>(port) {\n       exit(_id, res) {\n@@ -96,12 +96,12 @@ fn unpin() { rustrt2::unpin_task(); }\n fn set_min_stack(stack_size: uint) { rustrt2::set_min_stack(stack_size); }\n \n fn spawn<unique T>(-data: T, f: fn(T)) -> task {\n-    spawn_inner2(data, f, none)\n+    spawn_inner(data, f, none)\n }\n \n fn spawn_notify<unique T>(-data: T, f: fn(T),\n                          notify: comm::chan<task_notification>) -> task {\n-    spawn_inner2(data, f, some(notify))\n+    spawn_inner(data, f, some(notify))\n }\n \n fn spawn_joinable<unique T>(-data: T, f: fn(T)) -> joinable_task {\n@@ -120,9 +120,9 @@ fn spawn_joinable<unique T>(-data: T, f: fn(T)) -> joinable_task {\n //\n // After the transition this should all be rewritten.\n \n-fn spawn_inner2<unique T>(-data: T, f: fn(T),\n+fn spawn_inner<unique T>(-data: T, f: fn(T),\n                           notify: option<comm::chan<task_notification>>)\n-    -> task_id {\n+    -> task {\n \n     fn wrapper<unique T>(-data: *u8, f: fn(T)) {\n         let data: ~T = unsafe::reinterpret_cast(data);\n@@ -140,7 +140,7 @@ fn spawn_inner2<unique T>(-data: T, f: fn(T),\n // It is a hack and needs to be rewritten.\n fn unsafe_spawn_inner(-thunk: fn@(),\n                       notify: option<comm::chan<task_notification>>) ->\n-   task_id unsafe {\n+   task unsafe {\n     let id = rustrt2::new_task();\n \n     let raw_thunk: {code: u32, env: u32} = cast(thunk);"}]}