{"sha": "86734b04a7c36da0f84226f687f0da331b7f921f", "node_id": "C_kwDOAAsO6NoAKDg2NzM0YjA0YTdjMzZkYTBmODQyMjZmNjg3ZjBkYTMzMWI3ZjkyMWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T08:51:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T04:16:09Z"}, "message": "Bless tests", "tree": {"sha": "6b58b51a6221c502d4721a4cda4b375509f216c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b58b51a6221c502d4721a4cda4b375509f216c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86734b04a7c36da0f84226f687f0da331b7f921f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86734b04a7c36da0f84226f687f0da331b7f921f", "html_url": "https://github.com/rust-lang/rust/commit/86734b04a7c36da0f84226f687f0da331b7f921f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86734b04a7c36da0f84226f687f0da331b7f921f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79450360d279f169a40bc8fd55536830f5a939fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/79450360d279f169a40bc8fd55536830f5a939fe", "html_url": "https://github.com/rust-lang/rust/commit/79450360d279f169a40bc8fd55536830f5a939fe"}], "stats": {"total": 109, "additions": 14, "deletions": 95}, "files": [{"sha": "e2062e82725c0507fad934ec9f6720dfab28ea71", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -1,11 +1,8 @@\n // edition:2018\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n-    //~^ ERROR mismatched types\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n-    //~^ ERROR mismatched types\n     async fn baz() { //~ ERROR functions in traits cannot be declared `async`\n-        //~^ ERROR mismatched types\n         // Nested item must not ICE.\n         fn a() {}\n     }"}, {"sha": "afbe25cf7ab74d4c232d8c8ce16f7e1ae967e29e", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -12,7 +12,7 @@ LL |     async fn foo() {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn bar(&self) {}\n    |     -----^^^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     async fn bar(&self) {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:7:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn baz() {\n    |     -----^^^^^^^^^\n@@ -37,54 +37,6 @@ LL |     async fn baz() {\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:3:20\n-   |\n-LL |     async fn foo() {}\n-   |                    ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:3:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:5:25\n-   |\n-LL |     async fn bar(&self) {}\n-   |                         ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:5:25>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:7:20\n-   |\n-LL |       async fn baz() {\n-   |  ____________________^\n-LL | |\n-LL | |         // Nested item must not ICE.\n-LL | |         fn a() {}\n-LL | |     }\n-   | |_____^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                             ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:7:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "6bd6d879a4acef4cbcd581f8729dccffe9d81fd0", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -17,7 +17,6 @@ impl Foo {\n trait Bar {\n     async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n     //~^ ERROR functions in traits cannot be declared `async`\n-    //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "ba918eb28def198022db11f1baba0e2201d8b583", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:37:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:27:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:32:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -92,21 +92,7 @@ LL |     async fn foo() {}\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n-error[E0308]: mismatched types\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:20\n-   |\n-LL |     async fn foo() {}\n-   |                    ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/edition-deny-async-fns-2015.rs:18:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0308, E0670, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "4559da91e47a8b37313dbd575ecbb5e4a57822fb", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -12,7 +12,6 @@ impl A {\n \n trait C{async fn new(val: T) {} //~ ERROR  `async fn` is not permitted in Rust 2015\n //~^ ERROR functions in traits cannot be declared `async`\n-//~| ERROR mismatched types\n //~| ERROR cannot find type `T` in this scope\n //~| WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n "}, {"sha": "f7109d406d57af13ff8dab3e06c4a9ca5ea12b1b", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86734b04a7c36da0f84226f687f0da331b7f921f/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=86734b04a7c36da0f84226f687f0da331b7f921f", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:19:53\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:18:53\n    |\n LL | trait C{async fn new(val: T) {}\n    |        - unclosed delimiter\n@@ -74,20 +74,6 @@ help: add a dummy let to cause `path` to be fully captured\n LL |     async fn create(path: impl AsRef<std::path::Path>)  { let _ = &path;\n    |                                                           ++++++++++++++\n \n-error[E0308]: mismatched types\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n-   |\n-LL | trait C{async fn new(val: T) {}\n-   |                              ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n    |\n@@ -103,7 +89,7 @@ help: add a dummy let to cause `val` to be fully captured\n LL | trait C{async fn new(val: T) { let _ = &val;}\n    |                                +++++++++++++\n \n-error: aborting due to 7 previous errors; 2 warnings emitted\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0308, E0412, E0423, E0670, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0412, E0423, E0670, E0706.\n+For more information about an error, try `rustc --explain E0412`."}]}