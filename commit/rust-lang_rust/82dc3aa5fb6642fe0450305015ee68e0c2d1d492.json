{"sha": "82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZGMzYWE1ZmI2NjQyZmUwNDUwMzA1MDE1ZWU2OGUwYzJkMWQ0OTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-05T08:32:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-05T08:32:47Z"}, "message": "link from raw slice creation methods to safety requirements", "tree": {"sha": "4f3ba3064e27e1ba740b14b7aadc251039498fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3ba3064e27e1ba740b14b7aadc251039498fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "html_url": "https://github.com/rust-lang/rust/commit/82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82dc3aa5fb6642fe0450305015ee68e0c2d1d492/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab6e47851b51a413db5d721f25d714653e7549fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e47851b51a413db5d721f25d714653e7549fd", "html_url": "https://github.com/rust-lang/rust/commit/ab6e47851b51a413db5d721f25d714653e7549fd"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "649244a46830545881d2aa783b167a7c392262b8", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/82dc3aa5fb6642fe0450305015ee68e0c2d1d492/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc3aa5fb6642fe0450305015ee68e0c2d1d492/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "patch": "@@ -221,10 +221,15 @@ pub(crate) struct FatPtr<T> {\n     pub(crate) len: usize,\n }\n \n-/// Forms a slice from a pointer and a length.\n+/// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes.\n ///\n+/// This function is safe, but actually using the return value is unsafe.\n+/// See the documentation of [`from_raw_parts`] for slice safety requirements.\n+///\n+/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -243,12 +248,16 @@ pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n     unsafe { Repr { raw: FatPtr { data, len } }.rust }\n }\n \n-/// Performs the same functionality as [`from_raw_parts`], except that a\n-/// mutable slice is returned.\n+/// Performs the same functionality as [`slice_from_raw_parts`], except that a\n+/// raw mutable slice is returned.\n ///\n-/// See the documentation of [`from_raw_parts`] for more details.\n+/// See the documentation of [`slice_from_raw_parts`] for more details.\n ///\n-/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+/// This function is safe, but actually using the return value is unsafe.\n+/// See the documentation of [`from_raw_parts_mut`] for slice safety requirements.\n+///\n+/// [`slice_from_raw_parts`]: fn.slice_from_raw_parts.html\n+/// [`from_raw_parts_mut`]: ../../std/slice/fn.from_raw_parts_mut.html\n #[inline]\n #[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n pub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {"}]}