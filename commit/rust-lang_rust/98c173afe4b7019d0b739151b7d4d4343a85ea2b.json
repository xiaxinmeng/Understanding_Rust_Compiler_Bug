{"sha": "98c173afe4b7019d0b739151b7d4d4343a85ea2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzE3M2FmZTRiNzAxOWQwYjczOTE1MWI3ZDRkNDM0M2E4NWVhMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-09T05:57:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-09T05:57:14Z"}, "message": "Auto merge of #65879 - ohadravid:stabilize-re-rebalance-coherence, r=nikomatsakis\n\nStabilize the `re_rebalance_coherence` feature\n\nThis PR stabilizes [RFC 2451](https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html), re-rebalance coherence.\n\nChanges include removing the attribute from tests which tested both the old and new behavior, moving the feature to `accepted` and removing the old logic.\n\nI'll also open a [PR](https://github.com/rust-lang-nursery/reference/pull/703) against the reference, updating it with the content of the RFC.\n\nCloses #63599\n\nr? @nikomatsakis", "tree": {"sha": "ad8151204408e5025fe614b37d6019b649d59b9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8151204408e5025fe614b37d6019b649d59b9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c173afe4b7019d0b739151b7d4d4343a85ea2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c173afe4b7019d0b739151b7d4d4343a85ea2b", "html_url": "https://github.com/rust-lang/rust/commit/98c173afe4b7019d0b739151b7d4d4343a85ea2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c173afe4b7019d0b739151b7d4d4343a85ea2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "html_url": "https://github.com/rust-lang/rust/commit/475c713b2f8c41eb06fd1a65f226c77f84fea4a5"}, {"sha": "3e0759dc0565c3b8e5ca0ab3ace15ae7e91b6ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0759dc0565c3b8e5ca0ab3ace15ae7e91b6ffd", "html_url": "https://github.com/rust-lang/rust/commit/3e0759dc0565c3b8e5ca0ab3ace15ae7e91b6ffd"}], "stats": {"total": 1909, "additions": 269, "deletions": 1640}, "files": [{"sha": "1e74652a890f6e48b73aa4016d341921e430fcde", "filename": "src/doc/unstable-book/src/language-features/re-rebalance-coherence.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,23 +0,0 @@\n-# `re_rebalance_coherence`\n-\n-The tracking issue for this feature is: [#55437]\n-\n-[#55437]: https://github.com/rust-lang/rust/issues/55437\n-\n-------------------------\n-\n-The `re_rebalance_coherence` feature tweaks the rules regarding which trait\n-impls are allowed in crates.\n-The following rule is used:\n-\n-Given `impl<P1..=Pn> Trait<T1..=Tn> for T0`, an impl is valid only if at\n-least one of the following is true:\n-- `Trait` is a local trait\n-- All of\n-  - At least one of the types `T0..=Tn` must be a local type. Let `Ti` be the\n-    first such type.\n-  - No uncovered type parameters `P1..=Pn` may appear in `T0..Ti` (excluding\n-    `Ti`)\n-\n-\n-See the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2451-re-rebalancing-coherence.md) for details."}, {"sha": "5058e58d0eb9cb6fb1f4c5384342a457d58e748c", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -205,11 +205,12 @@ pub trait AsMut<T: ?Sized> {\n /// A value-to-value conversion that consumes the input value. The\n /// opposite of [`From`].\n ///\n-/// One should only implement [`Into`] if a conversion to a type outside the current crate is\n-/// required. Otherwise one should always prefer implementing [`From`] over [`Into`] because\n-/// implementing [`From`] automatically provides one with a implementation of [`Into`] thanks to\n-/// the blanket implementation in the standard library. [`From`] cannot do these type of\n-/// conversions because of Rust's orphaning rules.\n+/// One should avoid implementing [`Into`] and implement [`From`] instead.\n+/// Implementing [`From`] automatically provides one with an implementation of [`Into`]\n+/// thanks to the blanket implementation in the standard library.\n+///\n+/// Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function\n+/// to ensure that types that only implement [`Into`] can be used as well.\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use [`TryInto`].\n ///\n@@ -218,23 +219,22 @@ pub trait AsMut<T: ?Sized> {\n /// - [`From`]`<T> for U` implies `Into<U> for T`\n /// - [`Into`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n-/// # Implementing [`Into`] for conversions to external types\n+/// # Implementing [`Into`] for conversions to external types in old versions of Rust\n ///\n-/// If the destination type is not part of the current crate\n-/// then you can't implement [`From`] directly.\n+/// Prior to Rust 1.40, if the destination type was not part of the current crate\n+/// then you couldn't implement [`From`] directly.\n /// For example, take this code:\n ///\n-/// ```compile_fail\n+/// ```\n /// struct Wrapper<T>(Vec<T>);\n /// impl<T> From<Wrapper<T>> for Vec<T> {\n ///     fn from(w: Wrapper<T>) -> Vec<T> {\n ///         w.0\n ///     }\n /// }\n /// ```\n-/// This will fail to compile because we cannot implement a trait for a type\n-/// if both the trait and the type are not defined by the current crate.\n-/// This is due to Rust's orphaning rules. To bypass this, you can implement [`Into`] directly:\n+/// This will fail to compile in older versions of the language because Rust's orphaning rules\n+/// used to be a little bit more strict. To bypass this, you could implement [`Into`] directly:\n ///\n /// ```\n /// struct Wrapper<T>(Vec<T>);\n@@ -249,9 +249,6 @@ pub trait AsMut<T: ?Sized> {\n /// (as [`From`] does with [`Into`]). Therefore, you should always try to implement [`From`]\n /// and then fall back to [`Into`] if [`From`] can't be implemented.\n ///\n-/// Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function\n-/// to ensure that types that only implement [`Into`] can be used as well.\n-///\n /// # Examples\n ///\n /// [`String`] implements [`Into`]`<`[`Vec`]`<`[`u8`]`>>`:"}, {"sha": "1645f94535ff2cf395df1e65ab02a6b6558a7698", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 40, "deletions": 106, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -367,118 +367,52 @@ fn orphan_check_trait_ref<'tcx>(\n              trait_ref);\n     }\n \n-    if tcx.features().re_rebalance_coherence {\n-        // Given impl<P1..=Pn> Trait<T1..=Tn> for T0, an impl is valid only\n-        // if at least one of the following is true:\n-        //\n-        // - Trait is a local trait\n-        // (already checked in orphan_check prior to calling this function)\n-        // - All of\n-        //     - At least one of the types T0..=Tn must be a local type.\n-        //      Let Ti be the first such type.\n-        //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n-        //\n-        fn uncover_fundamental_ty<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n-            ty: Ty<'tcx>,\n-            in_crate: InCrate,\n-        ) -> Vec<Ty<'tcx>> {\n-            if fundamental_ty(ty) && ty_is_non_local(tcx, ty, in_crate).is_some() {\n-                ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate)).collect()\n-            } else {\n-                vec![ty]\n-            }\n+    // Given impl<P1..=Pn> Trait<T1..=Tn> for T0, an impl is valid only\n+    // if at least one of the following is true:\n+    //\n+    // - Trait is a local trait\n+    // (already checked in orphan_check prior to calling this function)\n+    // - All of\n+    //     - At least one of the types T0..=Tn must be a local type.\n+    //      Let Ti be the first such type.\n+    //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n+    //\n+    fn uncover_fundamental_ty<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        ty: Ty<'tcx>,\n+        in_crate: InCrate,\n+    ) -> Vec<Ty<'tcx>> {\n+        if fundamental_ty(ty) && ty_is_non_local(tcx, ty, in_crate).is_some() {\n+            ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate)).collect()\n+        } else {\n+            vec![ty]\n         }\n+    }\n \n-        let mut non_local_spans = vec![];\n-        for (i, input_ty) in trait_ref\n-            .input_types()\n-            .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n-            .enumerate()\n-        {\n-            debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n-            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n-            if non_local_tys.is_none() {\n-                debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n-                return Ok(());\n-            } else if let ty::Param(_) = input_ty.kind {\n-                debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n-                return Err(OrphanCheckErr::UncoveredTy(input_ty))\n-            }\n-            if let Some(non_local_tys) = non_local_tys {\n-                for input_ty in non_local_tys {\n-                    non_local_spans.push((input_ty, i == 0));\n-                }\n-            }\n+    let mut non_local_spans = vec![];\n+    for (i, input_ty) in trait_ref\n+        .input_types()\n+        .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+        .enumerate()\n+    {\n+        debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n+        let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+        if non_local_tys.is_none() {\n+            debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n+            return Ok(());\n+        } else if let ty::Param(_) = input_ty.kind {\n+            debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n+            return Err(OrphanCheckErr::UncoveredTy(input_ty))\n         }\n-        // If we exit above loop, never found a local type.\n-        debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n-    } else {\n-        let mut non_local_spans = vec![];\n-        // First, create an ordered iterator over all the type\n-        // parameters to the trait, with the self type appearing\n-        // first.  Find the first input type that either references a\n-        // type parameter OR some local type.\n-        for (i, input_ty) in trait_ref.input_types().enumerate() {\n-            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n-            if non_local_tys.is_none() {\n-                debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n-\n-                // First local input type. Check that there are no\n-                // uncovered type parameters.\n-                let uncovered_tys = uncovered_tys(tcx, input_ty, in_crate);\n-                for uncovered_ty in uncovered_tys {\n-                    if let Some(param) = uncovered_ty.walk()\n-                        .find(|t| is_possibly_remote_type(t, in_crate))\n-                    {\n-                        debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-                        return Err(OrphanCheckErr::UncoveredTy(param));\n-                    }\n-                }\n-\n-                // OK, found local type, all prior types upheld invariant.\n-                return Ok(());\n-            }\n-\n-            // Otherwise, enforce invariant that there are no type\n-            // parameters reachable.\n-            if let Some(param) = input_ty.walk()\n-                .find(|t| is_possibly_remote_type(t, in_crate))\n-            {\n-                debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-                return Err(OrphanCheckErr::UncoveredTy(param));\n-            }\n-\n-            if let Some(non_local_tys) = non_local_tys {\n-                for input_ty in non_local_tys {\n-                    non_local_spans.push((input_ty, i == 0));\n-                }\n+        if let Some(non_local_tys) = non_local_tys {\n+            for input_ty in non_local_tys {\n+                non_local_spans.push((input_ty, i == 0));\n             }\n         }\n-        // If we exit above loop, never found a local type.\n-        debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n-    }\n-}\n-\n-fn uncovered_tys<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n-    if ty_is_non_local_constructor(tcx, ty, in_crate).is_none() {\n-        vec![]\n-    } else if fundamental_ty(ty) {\n-        ty.walk_shallow()\n-          .flat_map(|t| uncovered_tys(tcx, t, in_crate))\n-          .collect()\n-    } else {\n-        vec![ty]\n-    }\n-}\n-\n-fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n-    match ty.kind {\n-        ty::Projection(..) | ty::Param(..) => true,\n-        _ => false,\n     }\n+    // If we exit above loop, never found a local type.\n+    debug!(\"orphan_check_trait_ref: no local type\");\n+    Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n }\n \n fn ty_is_non_local<'t>(tcx: TyCtxt<'t>, ty: Ty<'t>, in_crate: InCrate) -> Option<Vec<Ty<'t>>> {"}, {"sha": "0107611460b092b5e947686c243015ef34608d56", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -253,6 +253,9 @@ declare_features! (\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n     /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n+    /// Allows relaxing the coherence rules such that\n+    /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n+    (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "1d198fca56b65ac36298f8f20f5b6f8eb4da9c9e", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -466,10 +466,6 @@ declare_features! (\n     /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n-    /// Allows relaxing the coherence rules such that\n-    /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n-    (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n-\n     /// Allows using `#[ffi_returns_twice]` on foreign functions.\n     (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n "}, {"sha": "0541db2b8505f829a9573d01895f8cceab40e718", "filename": "src/test/ui/coherence/coherence-all-remote.re.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:6\n-   |\n-LL | impl<T> Remote1<T> for isize { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "5c3bfee822f1c5b51aef740ef1b10e841005d971", "filename": "src/test/ui/coherence/coherence-all-remote.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,9 @@\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n impl<T> Remote1<T> for isize { }\n-//[old]~^ ERROR E0210\n-//[re]~^^ ERROR E0210\n+//~^ ERROR E0210\n \n fn main() { }"}, {"sha": "b35ae46f8882dc1cbe75773fd4801b928916ef2e", "filename": "src/test/ui/coherence/coherence-all-remote.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:6\n+  --> $DIR/coherence-all-remote.rs:6:6\n    |\n LL | impl<T> Remote1<T> for isize { }\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-all-remote.old.stderr"}, {"sha": "02945e9dade3a98ddb80e11a9200ddce706297e6", "filename": "src/test/ui/coherence/coherence-bigint-int.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-int.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,8 +1,5 @@\n // run-pass\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "816ad949a2bce88eb677bb7043087188b72241ec", "filename": "src/test/ui/coherence/coherence-bigint-param.old.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:6\n-   |\n-LL | impl<T> Remote1<BigInt> for T { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "c6543aaf67d53522310fb648f06622083537f558", "filename": "src/test/ui/coherence/coherence-bigint-param.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,15 +1,11 @@\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;\n \n impl<T> Remote1<BigInt> for T { }\n-//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re]~^^ ERROR E0210\n+//~^ ERROR E0210\n \n fn main() { }"}, {"sha": "bb81d7adea243a3b3a50f8711898180a579c6af2", "filename": "src/test/ui/coherence/coherence-bigint-param.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:6\n+  --> $DIR/coherence-bigint-param.rs:8:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-bigint-param.re.stderr"}, {"sha": "a5dba90be5c5971777e5eb087b0e72858d7c648f", "filename": "src/test/ui/coherence/coherence-bigint-vecint.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-vecint.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,8 +1,5 @@\n // run-pass\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "a6d29048b4d8ccbfa8dc287599dd7057470a13b1", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n-   |\n-LL | impl<T:Even> MyTrait for T {\n-   | -------------------------- first implementation here\n-...\n-LL | impl<T:Odd> MyTrait for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "93a4bc5fe7895208e0fdc8da97a7616315c53ac4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -26,8 +22,7 @@ impl<T:Even> MyTrait for T {\n }\n \n impl<T:Odd> MyTrait for T {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n     fn get(&self) -> usize { 0 }\n }"}, {"sha": "e95826ed4d53ddfdfd91c6261d966e1c1cb8901d", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:24:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.old.stderr"}, {"sha": "1f3ddd1dc42c6d2b114da853807a8777c59515b4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n-   |\n-LL | impl<T:Even> MyTrait for T {\n-   | -------------------------- first implementation here\n-...\n-LL | impl<T:Odd> MyTrait for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "950a08ff22452df9d0ae8dc851f996ab0e3dbd72", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -22,8 +18,7 @@ impl<T:Even> MyTrait for T {\n }\n \n impl<T:Odd> MyTrait for T {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "ea9838b4520e0beac9f801756072694e91778f91", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:20:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.old.stderr"}, {"sha": "298ac6d1f21694b892cf3cc7266e5dae2316a2cc", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n-   |\n-LL | impl GoMut for MyThingy {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `go_trait`:\n-           - impl<G> go_trait::GoMut for G\n-             where G: go_trait::Go;\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "bccbac2ff1606591392c7e4c40f50487983aab53", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // aux-build:go_trait.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate go_trait;\n \n@@ -16,8 +13,7 @@ impl Go for MyThingy {\n }\n \n impl GoMut for MyThingy {\n-//[old]~^ ERROR conflicting implementations\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn go_mut(&mut self, arg: isize) { }\n }\n "}, {"sha": "91cf925e680a385b529960b86da697a5577b1d1e", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n    |\n LL | impl GoMut for MyThingy {\n    | ^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.old.stderr"}, {"sha": "94bbbdbe0a404ad0ae7d8dbdc32df885418206d8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n-   |\n-LL | impl<T> MyTrait<T> for T {\n-   | ------------------------ first implementation here\n-...\n-LL | impl MyTrait<MyType> for MyType {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "6a9db217373f9417a44d33ca7ceccff1e03ea25d", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -24,8 +20,7 @@ struct MyType {\n }\n \n impl MyTrait<MyType> for MyType {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn get(&self) -> usize { (*self).clone() }\n }\n "}, {"sha": "af4f4d09d7abd797e0af321df9cfebbf090a6b97", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:22:1\n    |\n LL | impl<T> MyTrait<T> for T {\n    | ------------------------ first implementation here", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.old.stderr"}, {"sha": "cf799c20cb49cff6afd4d187e4110b3391552074", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n-   |\n-LL | impl<T:OtherTrait> MyTrait for T {\n-   | -------------------------------- first implementation here\n-...\n-LL | impl MyTrait for MyType {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "02f9217da68408b16d0857b2169a3deccbfeb24b", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,10 +1,6 @@\n // Test that a blank impl for all T:PartialEq conflicts with an impl for some\n // specific T when T:PartialEq.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait OtherTrait {\n     fn noop(&self);\n }\n@@ -22,8 +18,7 @@ struct MyType {\n }\n \n impl MyTrait for MyType {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "6922f3ebffaff27c1ecef8a6f2b6f302b0950a0c", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:20:1\n    |\n LL | impl<T:OtherTrait> MyTrait for T {\n    | -------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.old.stderr"}, {"sha": "0807b11a434f98fa5a6d950bf0ae0ca8be8285e5", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n-   |\n-LL | impl<T> MyTrait for T {\n-   | --------------------- first implementation here\n-...\n-LL | impl MyTrait for MyType {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "5a562ff6ab93714c4a8ebd11068275d6522f418f", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -21,8 +17,7 @@ struct MyType {\n }\n \n impl MyTrait for MyType {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "4bc282764796b4c898cf6e3aaef02ed5f6911d2e", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:19:1\n    |\n LL | impl<T> MyTrait for T {\n    | --------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.old.stderr"}, {"sha": "55fa89d75070a469d0e98ecff75c8f537a73bc91", "filename": "src/test/ui/coherence/coherence-blanket.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n #![allow(unused_imports)]\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "bb3641f224780f045d9a2addb1ddb1fd03fe6e24", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.old.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n-   |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n-LL | \n-LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n-   |\n-LL | unsafe impl<T:'static> Send for TestType<T> {}\n-   | ------------------------------------------- first implementation here\n-LL | \n-LL | impl !Send for TestType<i32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "66d0958e4c9a450bfeec935a4e84b71b82ab0ce7", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,6 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -11,13 +8,11 @@ struct TestType<T>(::std::marker::PhantomData<T>);\n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n \n impl<T: MyTrait> !Send for TestType<T> {}\n-//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n unsafe impl<T:'static> Send for TestType<T> {}\n \n impl !Send for TestType<i32> {}\n-//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "0a8bbc4bc50a8be30d25faa2d09d13c7f9584fc1", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:10:1\n    |\n LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n    | ---------------------------------------------------- first implementation here\n@@ -8,7 +8,7 @@ LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n    |\n LL | unsafe impl<T:'static> Send for TestType<T> {}\n    | ------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.re.stderr"}, {"sha": "bb95c59d183f9ea97d45f2474e0cc167f7cd6438", "filename": "src/test/ui/coherence/coherence-covered-type-parameter.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-covered-type-parameter.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "d3f8ba63f07eb911803117837238249a656a9f19", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:18:6\n-   |\n-LL | impl<T> Remote for Pair<T,Cover<T>> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "d8db025cbcf2768dac7803fd112f2bb91527fee0", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:23:6\n-   |\n-LL | impl<T> Remote for Pair<Cover<T>,T> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "ff46d7ea280323dbfa924b6f672dee4918ce4147", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:28:6\n-   |\n-LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "39f211eff3615f1e50f3e454fcceaf7002ef5fd5", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-cow.rs:23:1\n+  --> $DIR/coherence-cow.rs:22:1\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^----------------"}, {"sha": "94bb0d2166c3af083de7dfd62ad16582cc918d45", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-cow.rs:28:1\n+  --> $DIR/coherence-cow.rs:26:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^----------------"}, {"sha": "86a8d0963b84bfd51f07e852f6bdfebb3c6b3c46", "filename": "src/test/ui/coherence/coherence-cow.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,6 +1,6 @@\n-// revisions: a b c re_a re_b re_c\n+// revisions: re_a re_b re_c\n \n-#![cfg_attr(any(re_a, re_b, re_c), feature(re_rebalance_coherence))]\n+#![cfg_attr(any(), re_a, re_b, re_c)]\n \n // aux-build:coherence_lib.rs\n \n@@ -14,19 +14,16 @@ use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n-#[cfg(any(a, re_a))]\n+#[cfg(any(re_a))]\n impl<T> Remote for Pair<T,Cover<T>> { }\n-//[a]~^ ERROR E0210\n-//[re_a]~^^ ERROR E0117\n+//[re_a]~^ ERROR E0117\n \n-#[cfg(any(b, re_b))]\n+#[cfg(any(re_b))]\n impl<T> Remote for Pair<Cover<T>,T> { }\n-//[b]~^ ERROR E0210\n-//[re_b]~^^ ERROR E0117\n+//[re_b]~^ ERROR E0117\n \n-#[cfg(any(c, re_c))]\n+#[cfg(any(re_c))]\n impl<T,U> Remote for Pair<Cover<T>,U> { }\n-//[c]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re_c]~^^ ERROR E0117\n+//[re_c]~^ ERROR E0117\n \n fn main() { }"}, {"sha": "971abe29639ff614b76a5c923bbde31334bbbaee", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.re.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n-   |\n-LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `trait_impl_conflict`:\n-           - impl trait_impl_conflict::Foo for isize;\n-\n-error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n-   |\n-LL | impl<A> Foo for A {\n-   |      ^ type parameter `A` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`."}, {"sha": "648e290a4b888fa3b30dea17a43e74246abd2462", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,18 +2,13 @@\n // generalizes the one upstream\n \n // aux-build:trait_impl_conflict.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {\n-    //[old]~^ ERROR type parameter `A` must be used as the type parameter for some local type\n-    //[old]~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n-    //[re]~^^^ ERROR E0119\n-    //[re]~| ERROR E0210\n+    //~^ ERROR E0119\n+    //~| ERROR E0210\n }\n \n fn main() {"}, {"sha": "cb66f9b0c7ff9373f56878b0656ca024b28d1326", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:9:1\n    |\n LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n+  --> $DIR/coherence-cross-crate-conflict.rs:9:6\n    |\n LL | impl<A> Foo for A {\n    |      ^ type parameter `A` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-cross-crate-conflict.old.stderr"}, {"sha": "3f644e3a6e7fa179ed693fe22d522d243225fbd6", "filename": "src/test/ui/coherence/coherence-default-trait-impl.re.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,16 +0,0 @@\n-error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:10:1\n-   |\n-LL | unsafe impl MySafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:16:1\n-   |\n-LL | impl MyUnsafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0199, E0200.\n-For more information about an error, try `rustc --explain E0199`."}, {"sha": "db24662e2d5add83e7f23c749aa8391c4339b52c", "filename": "src/test/ui/coherence/coherence-default-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,20 +1,15 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n auto trait MySafeTrait {}\n \n struct Foo;\n \n unsafe impl MySafeTrait for Foo {}\n-//[old]~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n-//[re]~^^ ERROR E0199\n+//~^ ERROR E0199\n \n unsafe auto trait MyUnsafeTrait {}\n \n impl MyUnsafeTrait for Foo {}\n-//[old]~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-//[re]~^^ ERROR E0200\n+//~^ ERROR E0200\n \n fn main() {}"}, {"sha": "f6a163268a14a798c8fdc75fd258b467a88c5c9c", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,11 +1,11 @@\n error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:10:1\n+  --> $DIR/coherence-default-trait-impl.rs:7:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:16:1\n+  --> $DIR/coherence-default-trait-impl.rs:12:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-default-trait-impl.old.stderr"}, {"sha": "b81f75533176f086af77d297a803d1e05ffc8733", "filename": "src/test/ui/coherence/coherence-error-suppression.re.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,9 +0,0 @@\n-error[E0412]: cannot find type `DoesNotExist` in this scope\n-  --> $DIR/coherence-error-suppression.rs:13:14\n-   |\n-LL | impl Foo for DoesNotExist {}\n-   |              ^^^^^^^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0412`."}, {"sha": "909214c1b6e379b782872f79c820a782fcaded29", "filename": "src/test/ui/coherence/coherence-error-suppression.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,18 +1,13 @@\n // check that error types in coherence do not cause error cascades.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait Foo {}\n \n impl Foo for i8 {}\n impl Foo for i16 {}\n impl Foo for i32 {}\n impl Foo for i64 {}\n impl Foo for DoesNotExist {}\n-//[old]~^ ERROR cannot find type `DoesNotExist` in this scope\n-//[re]~^^ ERROR E0412\n+//~^ ERROR E0412\n impl Foo for u8 {}\n impl Foo for u16 {}\n impl Foo for u32 {}"}, {"sha": "aadc80cb1c3ea65b90a269db81ec095f3e179de4", "filename": "src/test/ui/coherence/coherence-error-suppression.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `DoesNotExist` in this scope\n-  --> $DIR/coherence-error-suppression.rs:13:14\n+  --> $DIR/coherence-error-suppression.rs:9:14\n    |\n LL | impl Foo for DoesNotExist {}\n    |              ^^^^^^^^^^^^ not found in this scope", "previous_filename": "src/test/ui/coherence/coherence-error-suppression.old.stderr"}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n-   |\n-LL | impl Misc for dyn Fundamental<Local> {}\n-   | ^^^^^^^^^^^^^^----------------------\n-   | |             |\n-   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "dd127bf7f4bffa93678967bc15fed74e06233cef", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -3,17 +3,13 @@\n // are distinct.\n \n // aux-build:coherence_fundamental_trait_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_fundamental_trait_lib;\n \n use coherence_fundamental_trait_lib::{Fundamental, Misc};\n \n pub struct Local;\n impl Misc for dyn Fundamental<Local> {}\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() {}"}, {"sha": "06cfdeb39076e2e5a73a20069f51d1f7059479a6", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n+  --> $DIR/coherence-fundamental-trait-objects.rs:12:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^----------------------", "previous_filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr"}, {"sha": "b97197317488c68c1f1561e81550ed6dc6ef374a", "filename": "src/test/ui/coherence/coherence-impl-in-fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-in-fn.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n-   |\n-LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |                          -- method `eq` references the `Self` type in its parameters or return type\n-LL | impl NotObjectSafe for dyn NotObjectSafe { }\n-   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0038`."}, {"sha": "20ff875491ff435cf29c40e6d814322df34d720c", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,15 +1,10 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n // If the trait is not object-safe, we give a more tailored message\n // because we're such schnuckels:\n trait NotObjectSafe { fn eq(&self, other: Self); }\n impl NotObjectSafe for dyn NotObjectSafe { }\n-//[old]~^ ERROR E0038\n-//[re]~^^ ERROR E0038\n+//~^ ERROR E0038\n \n fn main() { }"}, {"sha": "ed6be60de460cb14f7531bf10d9f955e9fa5678e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n    |                          -- method `eq` references the `Self` type in its parameters or return type", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr"}, {"sha": "4819ce9260e708cc2dd7150d80bab95474ffab04", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.re.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,21 +0,0 @@\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n-   |\n-LL | impl Foo for dyn Baz { }\n-   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n-\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n-   |\n-LL | impl Bar for dyn Baz { }\n-   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n-\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n-   |\n-LL | impl Baz for dyn Baz { }\n-   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0371`."}, {"sha": "195a37f15a47eca80675075255bd52bdd3a5f4c5", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,24 +1,17 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait Foo { fn dummy(&self) { } }\n trait Bar: Foo { }\n trait Baz: Bar { }\n \n // Supertraits of Baz are not legal:\n impl Foo for dyn Baz { }\n-//[old]~^ ERROR E0371\n-//[re]~^^ ERROR E0371\n+//~^ ERROR E0371\n impl Bar for dyn Baz { }\n-//[old]~^ ERROR E0371\n-//[re]~^^ ERROR E0371\n+//~^ ERROR E0371\n impl Baz for dyn Baz { }\n-//[old]~^ ERROR E0371\n-//[re]~^^ ERROR E0371\n+//~^ ERROR E0371\n \n // But other random traits are:\n trait Other { }"}, {"sha": "cf0b38c5bb8b6f2bb7c9732aca7fc6f00fc99473", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,17 +1,17 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:9:1\n    |\n LL | impl Foo for dyn Baz { }\n    | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:11:1\n    |\n LL | impl Bar for dyn Baz { }\n    | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n LL | impl Baz for dyn Baz { }\n    | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.old.stderr"}, {"sha": "742845b190737c9bc1f5f4c00c25f2de6caa7705", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,95 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-  --> $DIR/coherence-impls-copy.rs:8:1\n-   |\n-LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl std::marker::Copy for i32;\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-  --> $DIR/coherence-impls-copy.rs:37:1\n-   |\n-LL | impl Copy for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n-             where T: ?Sized;\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-  --> $DIR/coherence-impls-copy.rs:45:1\n-   |\n-LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n-             where T: ?Sized;\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:27:15\n-   |\n-LL | impl Copy for &'static mut MyType {}\n-   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:32:15\n-   |\n-LL | impl Copy for (MyType, MyType) {}\n-   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:40:15\n-   |\n-LL | impl Copy for [MyType] {}\n-   |               ^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:8:1\n-   |\n-LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^---\n-   | |             |\n-   | |             `i32` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:32:1\n-   |\n-LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^----------------\n-   | |             |\n-   | |             this is not defined in the current crate because tuples are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:40:1\n-   |\n-LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^--------\n-   | |             |\n-   | |             this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:45:1\n-   |\n-LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^------------------\n-   | |             |\n-   | |             this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 10 previous errors\n-\n-Some errors have detailed explanations: E0117, E0119, E0206.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "dec40f9dd40aa0f828aa1aa1779a840f58e9c5c3", "filename": "src/test/ui/coherence/coherence-impls-copy.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,15 +1,10 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n \n impl Copy for i32 {}\n-//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//[re]~^^^ ERROR E0119\n-//[re]~| ERROR E0117\n+//~^ ERROR E0119\n+//~| ERROR E0117\n enum TestE {\n   A\n }\n@@ -25,27 +20,19 @@ impl Clone for TestE { fn clone(&self) -> Self { *self } }\n impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n-//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n-//[re]~^^ ERROR E0206\n+//~^ ERROR E0206\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n-//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n-//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//[re]~^^^ ERROR E0206\n-//[re]~| ERROR E0117\n+//~^ ERROR E0206\n+//~| ERROR E0117\n impl Copy for &'static NotSync {}\n-//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-//[re]~^^  ERROR E0119\n+//~^  ERROR E0119\n impl Copy for [MyType] {}\n-//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n-//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//[re]~^^^ ERROR E0206\n-//[re]~| ERROR E0117\n+//~^ ERROR E0206\n+//~| ERROR E0117\n impl Copy for &'static [NotSync] {}\n-//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//[re]~^^^ ERROR E0119\n-//[re]~| ERROR E0117\n+//~^ ERROR E0119\n+//~| ERROR E0117\n fn main() {\n }"}, {"sha": "be040b38d6bf68ad2b3b120ef8774ca7dfde6f33", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-  --> $DIR/coherence-impls-copy.rs:8:1\n+  --> $DIR/coherence-impls-copy.rs:5:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl Copy for i32 {}\n            - impl std::marker::Copy for i32;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-  --> $DIR/coherence-impls-copy.rs:37:1\n+  --> $DIR/coherence-impls-copy.rs:29:1\n    |\n LL | impl Copy for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl Copy for &'static NotSync {}\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-  --> $DIR/coherence-impls-copy.rs:45:1\n+  --> $DIR/coherence-impls-copy.rs:34:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,25 +28,25 @@ LL | impl Copy for &'static [NotSync] {}\n              where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:27:15\n+  --> $DIR/coherence-impls-copy.rs:22:15\n    |\n LL | impl Copy for &'static mut MyType {}\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:32:15\n+  --> $DIR/coherence-impls-copy.rs:26:15\n    |\n LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:40:15\n+  --> $DIR/coherence-impls-copy.rs:31:15\n    |\n LL | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:8:1\n+  --> $DIR/coherence-impls-copy.rs:5:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^---\n@@ -57,7 +57,7 @@ LL | impl Copy for i32 {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:32:1\n+  --> $DIR/coherence-impls-copy.rs:26:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^----------------\n@@ -68,7 +68,7 @@ LL | impl Copy for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:40:1\n+  --> $DIR/coherence-impls-copy.rs:31:1\n    |\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^--------\n@@ -79,7 +79,7 @@ LL | impl Copy for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:45:1\n+  --> $DIR/coherence-impls-copy.rs:34:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^------------------", "previous_filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr"}, {"sha": "7584b01ca893018a1c957ac85c1d6392302fb444", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,43 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:20:1\n-   |\n-LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^----------------\n-   | |                    |\n-   | |                    this is not defined in the current crate because tuples are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:24:1\n-   |\n-LL | unsafe impl Send for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:28:1\n-   |\n-LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^--------\n-   | |                    |\n-   | |                    this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:32:1\n-   |\n-LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^------------------\n-   | |                    |\n-   | |                    this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0117, E0321.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "b2a9c5be658439dd1714c4631ab6333f462192df", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,6 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -18,20 +15,16 @@ impl !Sync for NotSync {}\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n unsafe impl Send for &'static NotSync {}\n-//[old]~^ ERROR E0321\n-//[re]~^^ ERROR E0321\n+//~^ ERROR E0321\n \n unsafe impl Send for [MyType] {}\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n unsafe impl Send for &'static [NotSync] {}\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() {\n }"}, {"sha": "a5b3c7657bdfebc4fc9c6ed336b45b2911c8d84e", "filename": "src/test/ui/coherence/coherence-impls-send.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:20:1\n+  --> $DIR/coherence-impls-send.rs:17:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^----------------\n@@ -10,13 +10,13 @@ LL | unsafe impl Send for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:24:1\n+  --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:28:1\n+  --> $DIR/coherence-impls-send.rs:23:1\n    |\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^--------\n@@ -27,7 +27,7 @@ LL | unsafe impl Send for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:32:1\n+  --> $DIR/coherence-impls-send.rs:26:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^------------------", "previous_filename": "src/test/ui/coherence/coherence-impls-send.old.stderr"}, {"sha": "ef999bcf461bc3f13a3173410ef38e79ca87f01b", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,73 +0,0 @@\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:17:1\n-   |\n-LL | impl Sized for TestE {}\n-   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:22:1\n-   |\n-LL | impl Sized for MyType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:27:1\n-   |\n-LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:34:1\n-   |\n-LL | impl Sized for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:39:1\n-   |\n-LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:46:1\n-   |\n-LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:27:1\n-   |\n-LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^----------------\n-   | |              |\n-   | |              this is not defined in the current crate because tuples are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:39:1\n-   |\n-LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^--------\n-   | |              |\n-   | |              this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:46:1\n-   |\n-LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^------------------\n-   | |              |\n-   | |              this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 9 previous errors\n-\n-Some errors have detailed explanations: E0117, E0322.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "19e7349c507ef305549e7b1ffa67ddb64c1aa330", "filename": "src/test/ui/coherence/coherence-impls-sized.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,6 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n@@ -15,40 +12,25 @@ struct NotSync;\n impl !Sync for NotSync {}\n \n impl Sized for TestE {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[re]~^^^ ERROR E0322\n+//~^ ERROR E0322\n \n impl Sized for MyType {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[re]~^^^ ERROR E0322\n+//~^ ERROR E0322\n \n impl Sized for (MyType, MyType) {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[old]~| ERROR E0117\n-//[re]~^^^^ ERROR E0322\n-//[re]~| ERROR E0117\n+//~^ ERROR E0322\n+//~| ERROR E0117\n \n impl Sized for &'static NotSync {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[re]~^^^ ERROR E0322\n+//~^ ERROR E0322\n \n impl Sized for [MyType] {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[old]~| ERROR E0117\n-//[re]~^^^^ ERROR E0322\n-//[re]~| ERROR E0117\n+//~^ ERROR E0322\n+//~| ERROR E0117\n \n impl Sized for &'static [NotSync] {}\n-//[old]~^ ERROR E0322\n-//[old]~| impl of 'Sized' not allowed\n-//[old]~| ERROR E0117\n-//[re]~^^^^ ERROR E0322\n-//[re]~| ERROR E0117\n+//~^ ERROR E0322\n+//~| ERROR E0117\n \n fn main() {\n }"}, {"sha": "3b0a9fc60a2e070fc2e8a2a9d685e6516472016f", "filename": "src/test/ui/coherence/coherence-impls-sized.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,41 +1,41 @@\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:17:1\n+  --> $DIR/coherence-impls-sized.rs:14:1\n    |\n LL | impl Sized for TestE {}\n    | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:22:1\n+  --> $DIR/coherence-impls-sized.rs:17:1\n    |\n LL | impl Sized for MyType {}\n    | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:20:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:34:1\n+  --> $DIR/coherence-impls-sized.rs:24:1\n    |\n LL | impl Sized for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:39:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:46:1\n+  --> $DIR/coherence-impls-sized.rs:31:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:20:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^----------------\n@@ -46,7 +46,7 @@ LL | impl Sized for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:39:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^--------\n@@ -57,7 +57,7 @@ LL | impl Sized for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:46:1\n+  --> $DIR/coherence-impls-sized.rs:31:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^------------------", "previous_filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr"}, {"sha": "a2fa49acd2c906404a6f8d27961a86e177eaf946", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.re.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,16 +0,0 @@\n-error[E0391]: cycle detected when processing `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n-   |\n-LL | trait Trait<T> { type Assoc; }\n-   | ^^^^^^^^^^^^^^\n-   |\n-   = note: ...which again requires processing `Trait`, completing the cycle\n-note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n-   |\n-LL | trait Trait<T> { type Assoc; }\n-   | ^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "7f0e5472c3c2ee2772ddf7e8b0d323465cfa9f50", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -3,15 +3,10 @@\n // which is currently not supported.\n //\n // No we expect to run into a more user-friendly cycle error instead.\n-\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(specialization)]\n \n trait Trait<T> { type Assoc; }\n-//[old]~^ cycle detected\n-//[re]~^^ ERROR E0391\n+//~^ ERROR E0391\n \n impl<T> Trait<T> for Vec<T> {\n     type Assoc = ();"}, {"sha": "e5cc298a4355d2b25012f2c7104b02214f8156b5", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,12 +1,12 @@\n error[E0391]: cycle detected when processing `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires processing `Trait`, completing the cycle\n note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.old.stderr"}, {"sha": "43a0a5c42777419b059b1eae7b0abc76d2cd9019", "filename": "src/test/ui/coherence/coherence-iterator-vec-any-elem.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n "}, {"sha": "386fe40ac3ca89524b2cc9dae22eb85582212b3c", "filename": "src/test/ui/coherence/coherence-iterator-vec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-iterator-vec.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n "}, {"sha": "731752045cd34820a7167bf5823f05025195a6ae", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.re.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:6\n-   |\n-LL | impl<T> Remote for T { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "5368fef76d0b445bb7fc83832debc93fc02d41c5", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,14 +1,10 @@\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n impl<T> Remote for T { }\n-//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re]~^^ ERROR E0210\n+//~^ ERROR E0210\n \n \n fn main() { }"}, {"sha": "3791d96302bc20ef934aebba874a1085f8a3b528", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:6\n+  --> $DIR/coherence-lone-type-parameter.rs:6:6\n    |\n LL | impl<T> Remote for T { }\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-lone-type-parameter.old.stderr"}, {"sha": "fa1d4bbb496656222bc2537b1ef0cb806fe2c6f2", "filename": "src/test/ui/coherence/coherence-multidispatch-tuple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-multidispatch-tuple.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "695a71cbd2d7c6230fe1e4d67b6c981648bf8520", "filename": "src/test/ui/coherence/coherence-negative-impls-safe-rpass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "7ed47dca4972de3c16fb636e6c61d16dfc78f107", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.re.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,9 +0,0 @@\n-error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:10:1\n-   |\n-LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0198`."}, {"sha": "45c478ecc03627d45aca3915cd0817a54c12ece2", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,14 +1,10 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Send;\n \n struct TestType;\n \n unsafe impl !Send for TestType {}\n-//[old]~^ ERROR negative impls cannot be unsafe\n-//[re]~^^ ERROR E0198\n+//~^ ERROR E0198\n \n fn main() {}"}, {"sha": "c47c9d25e3614260155173240739b08c892d539d", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:10:1\n+  --> $DIR/coherence-negative-impls-safe.rs:7:1\n    |\n LL | unsafe impl !Send for TestType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-negative-impls-safe.old.stderr"}, {"sha": "81465e718567669dfca3ced49a27b7769e88838a", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.re.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n-   |\n-LL | impl<T> MyTrait for T {}\n-   | --------------------- first implementation here\n-LL | impl<T: 'static> MyTrait for T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "d466dcac1c48cdde09775f8fc4b5b386ef4064c5", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,14 +1,9 @@\n // Test that you cannot *directly* dispatch on lifetime requirements\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait MyTrait { fn foo() {} }\n \n impl<T> MyTrait for T {}\n impl<T: 'static> MyTrait for T {}\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "a74ffbb3afd9622248051666d9c3309219413180", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:6:1\n    |\n LL | impl<T> MyTrait for T {}\n    | --------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.old.stderr"}, {"sha": "a353acf0679dc543a90ec2f0888192122c37146e", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,26 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:13:1\n-   |\n-LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^---------------^^^^^-----\n-   | |    |                   |\n-   | |    |                   `isize` is not defined in the current crate\n-   | |    `usize` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:21:1\n-   |\n-LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^----------\n-   | |              |\n-   | |              `std::vec::Vec` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "a7b48825d7c0281016a0e292dc65529844446d9b", "filename": "src/test/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // aux-build:coherence_orphan_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n extern crate coherence_orphan_lib as lib;\n@@ -11,15 +8,13 @@ use lib::TheTrait;\n struct TheType;\n \n impl TheTrait<usize> for isize { }\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n impl !Send for Vec<isize> { }\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "fb518f8ecba2de5ab88ca317d1c8cdfadbc2efc9", "filename": "src/test/ui/coherence/coherence-orphan.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:13:1\n+  --> $DIR/coherence-orphan.rs:10:1\n    |\n LL | impl TheTrait<usize> for isize { }\n    | ^^^^^---------------^^^^^-----\n@@ -11,7 +11,7 @@ LL | impl TheTrait<usize> for isize { }\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:21:1\n+  --> $DIR/coherence-orphan.rs:17:1\n    |\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^----------", "previous_filename": "src/test/ui/coherence/coherence-orphan.old.stderr"}, {"sha": "c7f85b0b59078517b12fa348e9eb84f09bf3bf52", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n-  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n-   |\n-LL | impl <T> From<T> for T {\n-   | ---------------------- first implementation here\n-...\n-LL | impl <T11, U11> From<(U11,)> for (T11,) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "574a16a191156c151048d630b77ef30a0cb2a211", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -6,10 +6,6 @@\n //\n // Seems pretty basic, but then there was issue #24241. :)\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait From<U> {\n     fn foo() {}\n }\n@@ -18,8 +14,7 @@ impl <T> From<T> for T {\n }\n \n impl <T11, U11> From<(U11,)> for (T11,) {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n }\n \n fn main() { }"}, {"sha": "5e8bfbcc3cafa0b1cfe54e954790e6f3098b51d2", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n-  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:16:1\n    |\n LL | impl <T> From<T> for T {\n    | ---------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.old.stderr"}, {"sha": "dcfc017f1b0387a620a9125175545a7bedffb2af", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.re.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,23 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n-   |\n-LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-   |                          ------------------- other definition for `dummy`\n-\n-error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n-   |\n-LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-...\n-LL | impl<X> A<i32, X> { fn f(&self) {} }\n-   |                     -------------- other definition for `f`\n-   |\n-   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "5dea33e330b62fcb453058e98313b2f50cf5a5cb", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,23 +1,17 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n struct Sweet<X>(X);\n pub trait Sugar {}\n pub trait Fruit {}\n impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-//[old]~^ ERROR E0592\n-//[re]~^^ ERROR E0592\n+//~^ ERROR E0592\n impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n \n trait Bar<X> {}\n struct A<T, X>(T, X);\n impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-//[old]~^ ERROR E0592\n-//[re]~^^ ERROR E0592\n+//~^ ERROR E0592\n impl<X> A<i32, X> { fn f(&self) {} }\n \n fn main() {}"}, {"sha": "4cb7390453c8826f7152e83a2bcb90aacf6ace52", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,18 +1,18 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:7:26\n    |\n LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n+LL |\n LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:13:38\n    |\n LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-...\n+LL |\n LL | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.old.stderr"}, {"sha": "b4847c03d417990e1ef3743cd795db486cac7138", "filename": "src/test/ui/coherence/coherence-overlap-downstream.re.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:12:1\n-   |\n-LL | impl<T:Sugar> Sweet for T { }\n-   | ------------------------- first implementation here\n-LL | impl<T:Fruit> Sweet for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:19:1\n-   |\n-LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n-   | --------------------------------------- first implementation here\n-LL | impl<X> Foo<X> for i32 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-   |\n-   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "738ec0e3d4550bb682b5535f4877ed4c457c51df", "filename": "src/test/ui/coherence/coherence-overlap-downstream.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,23 +1,17 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n pub trait Sugar {}\n pub trait Fruit {}\n pub trait Sweet {}\n impl<T:Sugar> Sweet for T { }\n impl<T:Fruit> Sweet for T { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n pub trait Foo<X> {}\n pub trait Bar<X> {}\n impl<X, T> Foo<X> for T where T: Bar<X> {}\n impl<X> Foo<X> for i32 {}\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() { }"}, {"sha": "6fb398562d6be382f2be170e4e512b8321c6cbe1", "filename": "src/test/ui/coherence/coherence-overlap-downstream.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:12:1\n+  --> $DIR/coherence-overlap-downstream.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:19:1\n+  --> $DIR/coherence-overlap-downstream.rs:14:1\n    |\n LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n    | --------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream.old.stderr"}, {"sha": "6fd9307754033b1aba0efd541986c7eed51b451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n-   |\n-LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-   |                              ------------------- other definition for `dummy`\n-   |\n-   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "a272e620fcab33df5aa80c5cbc30e6e7801063dc", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,17 +2,12 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n pub trait Sugar {}\n \n struct Cake<X>(X);\n \n impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-//[old]~^ ERROR E0592\n-//[re]~^^ ERROR E0592\n+//~^ ERROR E0592\n impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n \n fn main() { }"}, {"sha": "e63f8a997af67f565232ff675f2d0dbfaded7297", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:9:25\n    |\n LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n+LL |\n LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.old.stderr"}, {"sha": "d17d67adf0eae97c0a5d72d94ce1dcb4f5368a29", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.re.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n-   |\n-LL | impl<T:Sugar> Sweet for T { }\n-   | ------------------------- first implementation here\n-LL | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n-   |\n-   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "63e42e8f412dd45b780f56a69fa7881c02462db3", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,15 +2,10 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n impl<T:Sugar> Sweet for T { }\n impl<U:Sugar> Sweet for Box<U> { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() { }"}, {"sha": "fe4c5cf3490dd2557c2cdbb12baa9b94adb39c3f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n+  --> $DIR/coherence-overlap-issue-23516.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516.old.stderr"}, {"sha": "429e67573b59befec12b3cd68c4e5f5de79091ad", "filename": "src/test/ui/coherence/coherence-overlap-messages.re.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,44 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo`:\n-  --> $DIR/coherence-overlap-messages.rs:8:1\n-   |\n-LL | impl<T> Foo for T {}\n-   | ----------------- first implementation here\n-LL | impl<U> Foo for U {}\n-   | ^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-  --> $DIR/coherence-overlap-messages.rs:16:1\n-   |\n-LL | impl<T> Bar for (T, u8) {}\n-   | ----------------------- first implementation here\n-LL | impl<T> Bar for (u8, T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n-\n-error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n-  --> $DIR/coherence-overlap-messages.rs:23:1\n-   |\n-LL | impl<T> Baz<u8> for T {}\n-   | --------------------- first implementation here\n-LL | impl<T> Baz<T> for u8 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n-\n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:30:1\n-   |\n-LL | impl<T, U, V> Quux<U, V> for T {}\n-   | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:33:1\n-   |\n-LL | impl<T, U, V> Quux<U, V> for T {}\n-   | ------------------------------ first implementation here\n-...\n-LL | impl<T, V> Quux<T, V> for T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "1258a2371142f4ce8022daa9d8254765f6a899b5", "filename": "src/test/ui/coherence/coherence-overlap-messages.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,37 +1,28 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait Foo { fn foo() {} }\n \n impl<T> Foo for T {}\n impl<U> Foo for U {}\n-//[old]~^ ERROR conflicting implementations of trait `Foo`:\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n \n trait Bar { fn bar() {} }\n \n impl<T> Bar for (T, u8) {}\n impl<T> Bar for (u8, T) {}\n-//[old]~^ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n trait Baz<T> { fn baz() {} }\n \n impl<T> Baz<u8> for T {}\n impl<T> Baz<T> for u8 {}\n-//[old]~^ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n trait Quux<U, V> { fn quux() {} }\n \n impl<T, U, V> Quux<U, V> for T {}\n impl<T, U> Quux<U, U> for T {}\n-//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n impl<T, V> Quux<T, V> for T {}\n-//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "28147f52fa614f69038d47cce6face579a8ee7df", "filename": "src/test/ui/coherence/coherence-overlap-messages.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,37 +1,37 @@\n error[E0119]: conflicting implementations of trait `Foo`:\n-  --> $DIR/coherence-overlap-messages.rs:8:1\n+  --> $DIR/coherence-overlap-messages.rs:4:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- first implementation here\n LL | impl<U> Foo for U {}\n    | ^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-  --> $DIR/coherence-overlap-messages.rs:16:1\n+  --> $DIR/coherence-overlap-messages.rs:11:1\n    |\n LL | impl<T> Bar for (T, u8) {}\n    | ----------------------- first implementation here\n LL | impl<T> Bar for (u8, T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n \n error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n-  --> $DIR/coherence-overlap-messages.rs:23:1\n+  --> $DIR/coherence-overlap-messages.rs:17:1\n    |\n LL | impl<T> Baz<u8> for T {}\n    | --------------------- first implementation here\n LL | impl<T> Baz<T> for u8 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:30:1\n+  --> $DIR/coherence-overlap-messages.rs:23:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n LL | impl<T, U> Quux<U, U> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:33:1\n+  --> $DIR/coherence-overlap-messages.rs:25:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-messages.old.stderr"}, {"sha": "3a3e1a4afc3bb9596b4f7cb004e2cffe25491a91", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n-   |\n-LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-LL | impl A<i16> { fn dummy(&self) { } }\n-   |               ------------------- other definition for `dummy`\n-   |\n-   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "082d753debbe190ed70f6e0ff1d38104d054176f", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_lib;\n@@ -13,8 +10,7 @@ use coherence_lib::Remote;\n \n struct A<X>(X);\n impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-//[old]~^ ERROR E0592\n-//[re]~^^ ERROR E0592\n+//~^ ERROR E0592\n impl A<i16> { fn dummy(&self) { } }\n \n fn main() {}"}, {"sha": "51316f249756c1c776f9600088cb57f11378bfc7", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:12:32\n    |\n LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n+LL |\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.old.stderr"}, {"sha": "bd6f59f346b6d6937e0329c8ec2c2b7f1aed913a", "filename": "src/test/ui/coherence/coherence-overlap-upstream.re.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:16:1\n-   |\n-LL | impl<T> Foo for T where T: Remote {}\n-   | --------------------------------- first implementation here\n-LL | impl Foo for i16 {}\n-   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n-   |\n-   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "8f1e6558b15ebb1e9da230d8a2de6f65d98a6fde", "filename": "src/test/ui/coherence/coherence-overlap-upstream.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_lib;\n@@ -14,7 +11,6 @@ use coherence_lib::Remote;\n trait Foo {}\n impl<T> Foo for T where T: Remote {}\n impl Foo for i16 {}\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "8d3de9a243e8e460ec2720c7ed9c1bbf983e62f9", "filename": "src/test/ui/coherence/coherence-overlap-upstream.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:16:1\n+  --> $DIR/coherence-overlap-upstream.rs:13:1\n    |\n LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream.old.stderr"}, {"sha": "7c62716f7058cff687180bf988de1b0568b6f0f6", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.old.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-overlapping-pairs.rs:11:6\n-   |\n-LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "d5d18217bd6a5992308590f09df12f220395049e", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,15 +1,11 @@\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Foo;\n \n impl<T> Remote for lib::Pair<T,Foo> { }\n-//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "69a4627a7b86a637935efe8f7b34979018d81c9e", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-overlapping-pairs.rs:11:1\n+  --> $DIR/coherence-overlapping-pairs.rs:8:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n    | ^^^^^^^^^^^^^^^^^^^----------------", "previous_filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr"}, {"sha": "9f55df4c974b8da20861878ca1673fee37d3dae9", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.old.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:6\n-   |\n-LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "15868ca868610a4422da6739d5e77997daa63f2a", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // list of type parameters, not the self type.\n \n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_lib as lib;\n@@ -13,7 +10,6 @@ use lib::{Remote1, Pair};\n pub struct Local<T>(T);\n \n impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "f6b9869e177d2ec24653720ec929d4f428c40b23", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:12:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n    | ^^^^^^^^^^^--------------------------^^^^^---", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr"}, {"sha": "4084061eb4ac50fc71ae2670d5f32f9e550bd0f7", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.old.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered.rs:11:6\n-   |\n-LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "da970572fdee2db54cd6e77fd8ade674066d4943", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,15 +1,11 @@\n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::{Remote, Pair};\n \n struct Local<T>(T);\n \n impl<T,U> Remote for Pair<T,Local<U>> { }\n-//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "d1a4993e0f2570626e6d2876386643d9a542b809", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n+  --> $DIR/coherence-pair-covered-uncovered.rs:8:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^----------------", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr"}, {"sha": "728eae5e547dabbe6569807e86cbd0301abef98f", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n-   |\n-LL | impl Foo<i32> for i32 { }\n-   | --------------------- first implementation here\n-LL | \n-LL | impl<A:Iterator> Foo<A::Item> for A { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-   |\n-   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `i32` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "637dd250638bb08bacf62343bdc83d997529de42", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,6 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(rustc_attrs)]\n \n // Here we expect a coherence conflict because, even though `i32` does\n@@ -17,7 +14,6 @@ pub trait Bar {\n impl Foo<i32> for i32 { }\n \n impl<A:Iterator> Foo<A::Item> for A { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "06a840255bd9a0b4b292b45f72471870c7f9d015", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n+  --> $DIR/coherence-projection-conflict-orphan.rs:16:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.old.stderr"}, {"sha": "b53a4c973edac4a660b08bb853e0982cfcec06b9", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n-  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n-   |\n-LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n-   | ---------------------------------------- first implementation here\n-LL | \n-LL | impl<T, U> Foo<T> for Option<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "3e4141fa8cb1e1d21a370ffe2ac01de176d3a331", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,18 +1,13 @@\n // Coherence error results because we do not know whether `T: Foo<P>` or not\n // for the second impl.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n \n impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n \n impl<T, U> Foo<T> for Option<U> { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "c5c9b0ac33c2a3372385d6d2e9866fc9ee38c280", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n-  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.old.stderr"}, {"sha": "c2e5fc86175126dc4f9a69f8b0de444c0f1b6cfa", "filename": "src/test/ui/coherence/coherence-projection-conflict.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict.rs:15:1\n-   |\n-LL | impl Foo<i32> for i32 { }\n-   | --------------------- first implementation here\n-LL | \n-LL | impl<A:Bar> Foo<A::Output> for A { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "daab2a2f8b403f24015403626e5416868fabea7f", "filename": "src/test/ui/coherence/coherence-projection-conflict.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n@@ -13,8 +9,7 @@ pub trait Bar {\n impl Foo<i32> for i32 { }\n \n impl<A:Bar> Foo<A::Output> for A { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n impl Bar for i32 {\n     type Output = i32;"}, {"sha": "aed6910b529091a4f921fa192592fa108dcfd901", "filename": "src/test/ui/coherence/coherence-projection-conflict.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict.rs:15:1\n+  --> $DIR/coherence-projection-conflict.rs:11:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict.old.stderr"}, {"sha": "42b4b1912e22524506b08fbfecc0e79e6295f70b", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // does not hold and (due to the orphan rules), we can rely on that.\n \n // check-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n pub trait Foo<P> {}\n "}, {"sha": "44fc02a5c20e77b220978561b676ad0a2729a7af", "filename": "src/test/ui/coherence/coherence-projection-ok.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // check-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n pub trait Foo<P> {}\n "}, {"sha": "9d1d86883259fa3b2c3a5021188cc9d72ac3a1eb", "filename": "src/test/ui/coherence/coherence-rfc447-constrained.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-rfc447-constrained.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n // check that trait matching can handle impls whose types are only\n // constrained by a projection.\n "}, {"sha": "a742bf2884e3c1b8fe3cf4445269b539add9cec3", "filename": "src/test/ui/coherence/coherence-subtyping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -7,8 +7,6 @@\n // revisions: old re\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n trait TheTrait {\n     fn foo(&self) { }\n }"}, {"sha": "e832bdebbddebfd80a561872a702e4e526c8345f", "filename": "src/test/ui/coherence/coherence-tuple-conflict.re.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n-  --> $DIR/coherence-tuple-conflict.rs:19:1\n-   |\n-LL | impl<T> MyTrait for (T,T) {\n-   | ------------------------- first implementation here\n-...\n-LL | impl<A,B> MyTrait for (A,B) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "8cc829726681f8c5162edb87accc5d24e5777f8a", "filename": "src/test/ui/coherence/coherence-tuple-conflict.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -17,8 +13,7 @@ impl<T> MyTrait for (T,T) {\n }\n \n impl<A,B> MyTrait for (A,B) {\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "f6c2bc32aa8705b785b6a6b82dcf6990137bd995", "filename": "src/test/ui/coherence/coherence-tuple-conflict.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n-  --> $DIR/coherence-tuple-conflict.rs:19:1\n+  --> $DIR/coherence-tuple-conflict.rs:15:1\n    |\n LL | impl<T> MyTrait for (T,T) {\n    | ------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-tuple-conflict.old.stderr"}, {"sha": "fbcf8fb762a010ff243079e249d0b2ba6b4403da", "filename": "src/test/ui/coherence/coherence-vec-local-2.old.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-vec-local-2.rs:14:6\n-   |\n-LL | impl<T> Remote for Vec<Local<T>> { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "47df06bac6c14ee8e7f330655e01bf74eb1c5346", "filename": "src/test/ui/coherence/coherence-vec-local-2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,17 +2,13 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local<T>(T);\n \n impl<T> Remote for Vec<Local<T>> { }\n-//[old]~^ ERROR E0210\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "198314d5ce524e1b02dbea6b3cd893ddf8c8ca98", "filename": "src/test/ui/coherence/coherence-vec-local-2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local-2.rs:14:1\n+  --> $DIR/coherence-vec-local-2.rs:11:1\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^-------------", "previous_filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr"}, {"sha": "4b199dd91421794c559bc72f0a9249413c3fa6b7", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local.rs:14:1\n-   |\n-LL | impl Remote for Vec<Local> { }\n-   | ^^^^^^^^^^^^^^^^----------\n-   | |               |\n-   | |               `std::vec::Vec` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "130cc39d0af817a334d11a1dd0ecb4e14341dd0a", "filename": "src/test/ui/coherence/coherence-vec-local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,17 +2,13 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local;\n \n impl Remote for Vec<Local> { }\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "dc5a0a6895979efba881fd700dd8212f631bdd50", "filename": "src/test/ui/coherence/coherence-vec-local.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local.rs:14:1\n+  --> $DIR/coherence-vec-local.rs:11:1\n    |\n LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^----------", "previous_filename": "src/test/ui/coherence/coherence-vec-local.re.stderr"}, {"sha": "5c40def86bba0662fb1ace9e9869ea3cf2d16622", "filename": "src/test/ui/coherence/coherence-where-clause.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-where-clause.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n use std::fmt::Debug;\n use std::default::Default;"}, {"sha": "92af341ccb529001881f35c2a4f6ebb4db5272f2", "filename": "src/test/ui/coherence/coherence_copy_like.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers."}, {"sha": "edee6cd7b6cf69ab276f3a887c19b258887fe061", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -4,9 +4,6 @@\n // aux-build:coherence_copy_like_lib.rs\n // build-pass (FIXME(62277): could be check-pass?)\n // skip-codgen\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "599c804d213dbf414d439379eab1d19a0ea4c924", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -3,9 +3,6 @@\n \n // check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n "}, {"sha": "4d9f55c1215471cc99eb97190130b9bdafb1337f", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n-   |\n-   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "7d851b52884571fa83e16393f0668ee06b3a90dd", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_copy_like_lib as lib;\n@@ -17,8 +14,7 @@ impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental.\n impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n \n fn main() { }"}, {"sha": "cf6c6fb8c7a9dac76d8a3553d07c5fc378ac7b17", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:16:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.old.stderr"}, {"sha": "f0bcf659bb696946741bdccbdf5dd9af2b727ccd", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n-  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n-   |\n-   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "fe39370c9017eefef6c76b5dff097812ac2ccc40", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n@@ -20,7 +17,6 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //\n // which we cannot approve.\n impl MyTrait for lib::MyStruct<MyType> { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() { }"}, {"sha": "cf79e851bf4ab21ec454e06bf2ccf08b2cf0241f", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n-  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n+  --> $DIR/coherence_copy_like_err_struct.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_struct.old.stderr"}, {"sha": "a40153af2cf30daf331b75e2086eab64f2375402", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n-  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n-   |\n-   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "f63e205c9f82b2a5d823cde7738bffb7ecdb5688", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -19,7 +16,6 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //\n // which we cannot approve.\n impl MyTrait for (MyType,) { }\n-//[old]~^ ERROR E0119\n-//[re]~^^ ERROR E0119\n+//~^ ERROR E0119\n \n fn main() { }"}, {"sha": "52f66427dfae4aa3f63d583da8b1d8e69576dbff", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n-  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n+  --> $DIR/coherence_copy_like_err_tuple.rs:18:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.old.stderr"}, {"sha": "e71547cb89f9c7a96129477e7cd8cb7687a58b4c", "filename": "src/test/ui/coherence/coherence_inherent.re.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent.rs:35:11\n-   |\n-LL |         s.the_fn();\n-   |           ^^^^^^ method not found in `&Lib::TheStruct`\n-   |\n-   = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use Lib::TheTrait;`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "f3ebf00038698ed0c4f65ce0ad45bcc01fea7d9a", "filename": "src/test/ui/coherence/coherence_inherent.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,10 +1,6 @@\n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n \n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n-\n mod Lib {\n     pub trait TheTrait {\n         fn the_fn(&self);\n@@ -33,8 +29,7 @@ mod NoImport {\n \n     fn call_the_fn(s: &TheStruct) {\n         s.the_fn();\n-        //[old]~^ ERROR no method named `the_fn` found\n-        //[re]~^^ ERROR E0599\n+        //~^ ERROR E0599\n     }\n }\n "}, {"sha": "e719d5254f639a2862588c1e0cfa60255df9876b", "filename": "src/test/ui/coherence/coherence_inherent.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent.rs:35:11\n+  --> $DIR/coherence_inherent.rs:31:11\n    |\n LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&Lib::TheStruct`", "previous_filename": "src/test/ui/coherence/coherence_inherent.old.stderr"}, {"sha": "3683943c5c819da5f7b355a3d9cbca17eacf5765", "filename": "src/test/ui/coherence/coherence_inherent_cc.re.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent_cc.rs:26:11\n-   |\n-LL |         s.the_fn();\n-   |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n-   |\n-   = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use coherence_inherent_cc_lib::TheTrait;`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "759ada248f47c9b0dca6125881d025c224087de5", "filename": "src/test/ui/coherence/coherence_inherent_cc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,7 +1,4 @@\n // aux-build:coherence_inherent_cc_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n@@ -24,8 +21,7 @@ mod NoImport {\n \n     fn call_the_fn(s: &TheStruct) {\n         s.the_fn();\n-        //[old]~^ ERROR no method named `the_fn` found\n-        //[re]~^^ ERROR E0599\n+        //~^ ERROR E0599\n     }\n }\n "}, {"sha": "c666c1a3d1b3f9de395e07ec56f09628cf1b55bb", "filename": "src/test/ui/coherence/coherence_inherent_cc.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent_cc.rs:26:11\n+  --> $DIR/coherence_inherent_cc.rs:23:11\n    |\n LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`", "previous_filename": "src/test/ui/coherence/coherence_inherent_cc.old.stderr"}, {"sha": "ea724ada7025b458e9f3be988da9553652942385", "filename": "src/test/ui/coherence/coherence_local.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -3,9 +3,6 @@\n \n // check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n "}, {"sha": "0782f823128728cae1a82f057ae946f860475027", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_struct.rs:17:1\n-   |\n-LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^---------------------\n-   | |                    |\n-   | |                    `lib::MyStruct` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "a24038eb28075991198b657fc0f733eedf3a2dd5", "filename": "src/test/ui/coherence/coherence_local_err_struct.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -15,8 +12,7 @@ struct MyType { x: i32 }\n \n // MyStruct is not fundamental.\n impl lib::MyCopy for lib::MyStruct<MyType> { }\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "0a1aee9b5c18e104ca3259e4cde27c01bd3296b3", "filename": "src/test/ui/coherence/coherence_local_err_struct.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_struct.rs:17:1\n+  --> $DIR/coherence_local_err_struct.rs:14:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^---------------------", "previous_filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr"}, {"sha": "f01623f76217e1fd263a9e7d9d0c537a90cdd23f", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,14 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_tuple.rs:17:1\n-   |\n-LL | impl lib::MyCopy for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^---------\n-   | |                    |\n-   | |                    this is not defined in the current crate because tuples are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "f4033862a3eb9512cba6e87b52ae7d8f183f9490", "filename": "src/test/ui/coherence/coherence_local_err_tuple.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,9 +2,6 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -15,8 +12,7 @@ struct MyType { x: i32 }\n \n // Tuples are not fundamental, so this is not a local impl.\n impl lib::MyCopy for (MyType,) { }\n-//[old]~^ ERROR E0117\n-//[re]~^^ ERROR E0117\n+//~^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "a4953859f77fd87173125874b8263836061fc088", "filename": "src/test/ui/coherence/coherence_local_err_tuple.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_tuple.rs:17:1\n+  --> $DIR/coherence_local_err_tuple.rs:14:1\n    |\n LL | impl lib::MyCopy for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^---------", "previous_filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr"}, {"sha": "2e28839c8a41670548e1a0c7ff5aec5ba0123919", "filename": "src/test/ui/coherence/coherence_local_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -3,9 +3,6 @@\n \n // check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// revisions: old re\n-\n-#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n "}, {"sha": "4c0d46045e959028b0f59995551f9f83185149ba", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "fe7c9b93f5401245b540b1f3efad88c3c819aaf9", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-foreign.rs:12:1\n+  --> $DIR/impl-foreign-for-foreign.rs:10:1\n    |\n LL | impl Remote for i32 {\n    | ^^^^^^^^^^^^^^^^---"}, {"sha": "e79f66c0e132081119a14fdc0f5347962a08b053", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "a33cff2a4d4ecc785689cc3a33eb890372f5d1b4", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-foreign[foreign].rs:12:1\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:10:1\n    |\n LL | impl Remote1<Rc<i32>> for i32 {\n    | ^^^^^----------------^^^^^---\n@@ -11,7 +11,7 @@ LL | impl Remote1<Rc<i32>> for i32 {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-foreign[foreign].rs:16:1\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:14:1\n    |\n LL | impl Remote1<Rc<Local>> for f64 {\n    | ^^^^^------------------^^^^^---\n@@ -23,7 +23,7 @@ LL | impl Remote1<Rc<Local>> for f64 {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-foreign[foreign].rs:20:1\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:18:1\n    |\n LL | impl<T> Remote1<Rc<T>> for f32 {\n    | ^^^^^^^^--------------^^^^^---"}, {"sha": "0b1413edf37896946109ecfae69861f51029135c", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[local].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "10bdf2db8bbffaec0361c16072bbe88a9f8d6c9f", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "bd1a933b7668efcc47b0b971efbe03fe32fe29ef", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-fundamental[foreign].rs:12:1\n+  --> $DIR/impl-foreign-for-fundamental[foreign].rs:10:1\n    |\n LL | impl Remote for Box<i32> {\n    | ^^^^^^^^^^^^^^^^--------\n@@ -10,7 +10,7 @@ LL | impl Remote for Box<i32> {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign-for-fundamental[foreign].rs:16:1\n+  --> $DIR/impl-foreign-for-fundamental[foreign].rs:14:1\n    |\n LL | impl<T> Remote for Box<Rc<T>> {\n    | ^^^^^^^^^^^^^^^^^^^----------"}, {"sha": "c3fc0e6b8a7c5ca49e0072f88afd28b2e987e2f2", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[local].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "04405bc46fbcc0159c498f4052b6b52245e58c28", "filename": "src/test/ui/coherence/impl-foreign-for-local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "49b3abc99b731d9fe248e7c9742708cbfc681f0c", "filename": "src/test/ui/coherence/impl-foreign-for-locally-defined-fundamental.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,4 @@\n #![feature(fundamental)]\n-#![feature(re_rebalance_coherence)]\n \n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs"}, {"sha": "1e11789ef398dbfdb33eb5a758125cff46211cab", "filename": "src/test/ui/coherence/impl-foreign-for-locally-defined-fundamental[foreign].rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,4 @@\n #![feature(fundamental)]\n-#![feature(re_rebalance_coherence)]\n \n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs"}, {"sha": "99a399ddc632de697c3b53bf239d53c6a3d4fb3e", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "5552d825793715a819cd74ff5edd60da5062f692", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign[foreign]-for-foreign.rs:12:1\n+  --> $DIR/impl-foreign[foreign]-for-foreign.rs:10:1\n    |\n LL | impl Remote1<u32> for f64 {\n    | ^^^^^------------^^^^^---"}, {"sha": "bc6595bb340826f4ae2c075de8bc49906d341a57", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "0476cdaffe77e5c547ea05caeae8f3db72144dd5", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "3ca40e007292c4a69604e7bfe9805e67f3266941", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:13:1\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:11:1\n    |\n LL | impl Remote1<Box<String>> for i32 {\n    | ^^^^^--------------------^^^^^---\n@@ -11,7 +11,7 @@ LL | impl Remote1<Box<String>> for i32 {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:17:1\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:15:1\n    |\n LL | impl Remote1<Box<Rc<i32>>> for f64 {\n    | ^^^^^---------------------^^^^^---\n@@ -23,7 +23,7 @@ LL | impl Remote1<Box<Rc<i32>>> for f64 {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:21:1\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:19:1\n    |\n LL | impl<T> Remote1<Box<Rc<T>>> for f32 {\n    | ^^^^^^^^-------------------^^^^^---"}, {"sha": "7b83b048548eba3240733ff49f6903355b20a56d", "filename": "src/test/ui/coherence/impl-foreign[fundemental[local]]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "5282de4b2710caa74129eece0060ccd22d91027f", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "95889022bd7a162f4e3228cc367f9ba1edf3c64e", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl[t]-foreign-for-foreign[t].rs:13:1\n+  --> $DIR/impl[t]-foreign-for-foreign[t].rs:11:1\n    |\n LL | impl Remote for Rc<Local> {\n    | ^^^^^^^^^^^^^^^^---------\n@@ -10,7 +10,7 @@ LL | impl Remote for Rc<Local> {\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/impl[t]-foreign-for-foreign[t].rs:18:1\n+  --> $DIR/impl[t]-foreign-for-foreign[t].rs:16:1\n    |\n LL | impl<T> Remote for Arc<T> {\n    | ^^^^^^^^^^^^^^^^^^^------"}, {"sha": "6f5605a21938e351a262aeafe13a104bff189a6d", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "69194bdaf569bb6e04e0747f289b1dd26db2d965", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:6\n+  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:10:6\n    |\n LL | impl<T> Remote for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "99f3ce4476043d4932e4fed4c36496459196d0bb", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign[t]_local]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5Bt%5D_local%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5Bt%5D_local%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5Bt%5D_local%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // check-pass\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs"}, {"sha": "81044cd0529af6194129941954cfac85d74442f7", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-fundamental[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "b0f34419bb39decf0663e79ce1bf55bf47ccb28f", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:12:6\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:10:6\n    |\n LL | impl<T> Remote1<u32> for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:16:10\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:14:10\n    |\n LL | impl<'a, T> Remote1<u32> for &'a T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "680ba9f2226f794c75ac101f8920158543bdb74d", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-t.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "002f8b7286a2c7fd154dcc0f65ef67843250b058", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-t.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:12:6\n+  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:10:6\n    |\n LL | impl<T> Remote1<u32> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "fc7649085c36853c3825a34542bcb69846345bdf", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "0c43936e6d40152962e0c1337087f80315687731", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-foreign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:12:6\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:10:6\n    |\n LL | impl<T> Remote1<Box<T>> for u32 {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:16:10\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:14:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for u32 {\n    |          ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "703f25dd60a62bf0ae2154ad5179f10b8ecdd8c0", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "f81f15b204b9c0b375d9ef9f81950ea07ab2daf7", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:12:10\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:10:10\n    |\n LL | impl<'a, T> Remote1<Box<T>> for &'a T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:15:10\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:13:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for Box<T> {\n    |          ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "ec21fdd4e04bcece8916a010e4e68b03581c1316", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "5bdab87bf4e00cb397f99b4e3d3614d58a29bf05", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-t.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "24fd492c57c1ee734fda331c895ef14e7e04cdd7", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:12:6\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:10:6\n    |\n LL | impl<T> Remote1<Box<T>> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:15:10\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:13:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "4666e449ca98f702654cb19aac00f012493cc782", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "6a1db165416bd3cb16845001e54b0782cd5534c1", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:12:6\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:10:6\n    |\n LL | impl<T> Remote2<Box<T>, Local> for u32 {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:16:10\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:14:10\n    |\n LL | impl<'a, T> Remote2<&'a T, Local> for u32 {\n    |          ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "62e69357e3a2d0ca2cbf17024581ebae8b7bfbdd", "filename": "src/test/ui/coherence/impl[t]-foreign[fundemental[local]]-for-foreign[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "1fec19bbab9185504111a807c17f859d637cdff4", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "c8ed28be6f0cc74c1cb36020f58f3c0330a11def", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-foreign[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "f9b88c6459bddb9a3faf4377a5ea20025ec4dc04", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[foreign[t]].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "db88c330b39e1e874cae0ee1f77900dee771d199", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "b5fdb16c2f35dc201d4250a02be18aff87a435f0", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:6\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:10:6\n    |\n LL | impl<T> Remote1<Local> for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:6\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:14:6\n    |\n LL | impl<T> Remote1<Local> for &T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "9c14eea1be22b9e8de00807bb475ab1dd127c61c", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "dd4110d31e6f561e2f6f76efd37dca7b6c10ca87", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "7b65212f62a4d47eccdd4c8ded0f26102126d126", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-t.rs:12:6\n+  --> $DIR/impl[t]-foreign[local]-for-t.rs:10:6\n    |\n LL | impl<T> Remote1<Local> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "63c342b76f186e5feefe90377a75f5892ed8bd5b", "filename": "src/test/ui/coherence/impl[t]-foreign[local_fundamental[t]]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal_fundamental%5Bt%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal_fundamental%5Bt%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal_fundamental%5Bt%5D%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "9bb37c2baab8a7a4a585502ab1d78975691d0086", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "2e5ae6a8eb312abfad8bfa01709b309de432d921", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:12:6\n+  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:10:6\n    |\n LL | impl<T> Remote1<T> for u32 {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "79b5aa3fc62027c53db5b41d01885e0ec8280bf1", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-fundamental.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "3976f06947f437a44b759c451333246685668096", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-fundamental.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,13 +1,13 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:12:6\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:10:6\n    |\n LL | impl<T> Remote1<T> for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `B` must be used as the type parameter for some local type (e.g., `MyStruct<B>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:16:13\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:14:13\n    |\n LL | impl<'a, A, B> Remote1<A> for &'a B {\n    |             ^ type parameter `B` must be used as the type parameter for some local type"}, {"sha": "bc59721c088726fcfbd38f70726174f17316cefe", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-local.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n // check-pass"}, {"sha": "bcd6b269a382a4481ef258f4ed0d48dc8866ea9f", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-t.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n "}, {"sha": "8d858b8abeedfb6c7491cb6eef02133393ceb015", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-t.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-t.rs:12:6\n+  --> $DIR/impl[t]-foreign[t]-for-t.rs:10:6\n    |\n LL | impl<T> Remote1<T> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "d18e3f453c9147af58fb7e980dc87fd54c18ad4c", "filename": "src/test/ui/coherence/re-rebalance-coherence-default-generic-associated-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -2,7 +2,6 @@\n // aux-build:re_rebalance_coherence_lib-rpass.rs\n \n #![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n // check that a generic type with a default value from an associated type can be used without\n // specifying the value, and without invoking coherence errors.\n "}, {"sha": "38d096b08e14811fa142a8765bfc0550e88f8a0a", "filename": "src/test/ui/coherence/re-rebalance-coherence.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(re_rebalance_coherence)]\n-\n // run-pass\n // aux-build:re_rebalance_coherence_lib.rs\n "}, {"sha": "7dbf93ada5e5b9a948379009ec9195959e489831", "filename": "src/test/ui/error-codes/e0119/complex-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -6,7 +6,7 @@ use complex_impl_support::{External, M};\n \n struct Q;\n \n-impl<R> External for (Q, R) {} //~ ERROR must be used\n+impl<R> External for (Q, R) {} //~ ERROR only traits defined\n //~^ ERROR conflicting implementations of trait\n \n fn main() {}"}, {"sha": "0c18a1fbd1fd2a419eddee6c03bf8068a377c702", "filename": "src/test/ui/error-codes/e0119/complex-impl.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c173afe4b7019d0b739151b7d4d4343a85ea2b/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr?ref=98c173afe4b7019d0b739151b7d4d4343a85ea2b", "patch": "@@ -8,15 +8,18 @@ LL | impl<R> External for (Q, R) {}\n            - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)\n              where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n \n-error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g., `MyStruct<R>`)\n-  --> $DIR/complex-impl.rs:9:6\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/complex-impl.rs:9:1\n    |\n LL | impl<R> External for (Q, R) {}\n-   |      ^ type parameter `R` must be used as the type parameter for some local type\n+   | ^^^^^^^^^^^^^^^^^^^^^------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`.\n+Some errors have detailed explanations: E0117, E0119.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "505a45379cdca1391e8fa9dfd7d3d93877b2e75c", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,13 +0,0 @@\n-// Test that the use of the box syntax is gated by `re-rebalance-coherence` feature gate.\n-\n-// aux-build:re_rebalance_coherence_lib.rs\n-\n-extern crate re_rebalance_coherence_lib as lib;\n-use lib::*;\n-\n-struct Oracle;\n-impl Backend for Oracle {}\n-impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n-//~^ ERROR E0210\n-\n-fn main() {}"}, {"sha": "504bfb56979609c0c0c6102ca84f58cf16077cb1", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/475c713b2f8c41eb06fd1a65f226c77f84fea4a5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr?ref=475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:10\n-   |\n-LL | impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n-   |          ^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}]}