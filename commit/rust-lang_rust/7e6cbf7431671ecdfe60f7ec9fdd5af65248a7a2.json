{"sha": "7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNmNiZjc0MzE2NzFlY2RmZTYwZjdlYzlmZGQ1YWY2NTI0OGE3YTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-25T20:41:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-25T21:25:48Z"}, "message": "Remove redundant 'extension' mods from numeric mods", "tree": {"sha": "970ecf66dd2a057824ef8db83532c37fbba66894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970ecf66dd2a057824ef8db83532c37fbba66894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "html_url": "https://github.com/rust-lang/rust/commit/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a48ca5bba2698e253d6229139328d353276ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a48ca5bba2698e253d6229139328d353276ee8", "html_url": "https://github.com/rust-lang/rust/commit/43a48ca5bba2698e253d6229139328d353276ee8"}], "stats": {"total": 183, "additions": 92, "deletions": 91}, "files": [{"sha": "ed61c587116b74838cd275179474ca2b7140f1f2", "filename": "src/libcore/core.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -12,19 +12,19 @@ import option_iter::extensions;\n import ptr::extensions;\n import rand::extensions;\n import result::extensions;\n-import int::extensions::*;\n-import i8::extensions::*;\n-import i16::extensions::*;\n-import i32::extensions::*;\n-import i64::extensions::*;\n-import uint::extensions::*;\n-import u8::extensions::*;\n-import u16::extensions::*;\n-import u32::extensions::*;\n-import u64::extensions::*;\n-import float::extensions::*;\n-import f32::extensions::*;\n-import f64::extensions::*;\n+import int::num;\n+import i8::num;\n+import i16::num;\n+import i32::num;\n+import i64::num;\n+import uint::num;\n+import u8::num;\n+import u16::num;\n+import u32::num;\n+import u64::num;\n+import float::num;\n+import f32::num;\n+import f64::num;\n \n export path, option, some, none, unreachable;\n export extensions;"}, {"sha": "d84438f484561ef459d08eb95f174d1bb48b2cf6", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -4,9 +4,8 @@\n \n import cmath::c_float::*;\n import cmath::c_float_targ_consts::*;\n-import num::num;\n \n-export add, sub, mul, div, rem, lt, le, gt, eq, eq, ne;\n+export add, sub, mul, div, rem, lt, le, gt, eq, ne;\n export is_positive, is_negative, is_nonpositive, is_nonnegative;\n export is_zero, is_infinite, is_finite;\n export NaN, is_NaN, infinity, neg_infinity;\n@@ -18,7 +17,8 @@ export mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp;\n export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n-export extensions;\n+\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -173,18 +173,16 @@ pure fn log2(n: f32) -> f32 {\n     ret ln(n) / consts::ln_2;\n }\n \n-mod extensions {\n-    impl num of num for f32 {\n-        fn add(&&other: f32)    -> f32 { ret self + other; }\n-        fn sub(&&other: f32)    -> f32 { ret self - other; }\n-        fn mul(&&other: f32)    -> f32 { ret self * other; }\n-        fn div(&&other: f32)    -> f32 { ret self / other; }\n-        fn modulo(&&other: f32) -> f32 { ret self % other; }\n-        fn neg()                -> f32 { ret -self;        }\n-\n-        fn to_int()         -> int { ret self as int; }\n-        fn from_int(n: int) -> f32 { ret n as f32;    }\n-    }\n+impl num of num::num for f32 {\n+    fn add(&&other: f32)    -> f32 { ret self + other; }\n+    fn sub(&&other: f32)    -> f32 { ret self - other; }\n+    fn mul(&&other: f32)    -> f32 { ret self * other; }\n+    fn div(&&other: f32)    -> f32 { ret self / other; }\n+    fn modulo(&&other: f32) -> f32 { ret self % other; }\n+    fn neg()                -> f32 { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f32 { ret n as f32;    }\n }\n \n //"}, {"sha": "72f1b6b866a4637f2e36a0371b3d1278f20fe89e", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -4,12 +4,11 @@\n \n import cmath::c_double::*;\n import cmath::c_double_targ_consts::*;\n-import num::num;\n \n // Even though this module exports everything defined in it,\n // because it contains re-exports, we also have to explicitly\n // export locally defined things. That's a bit annoying.\n-export add, sub, mul, div, rem, lt, le, gt, eq, eq, ne;\n+export add, sub, mul, div, rem, lt, le, gt, eq, ne;\n export is_positive, is_negative, is_nonpositive, is_nonnegative;\n export is_zero, is_infinite, is_finite;\n export NaN, is_NaN, infinity, neg_infinity;\n@@ -22,7 +21,10 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export epsilon;\n-export extensions;\n+\n+export j0, j1, jn, y0, y1, yn;\n+\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -196,18 +198,16 @@ pure fn log2(n: f64) -> f64 {\n     ret ln(n) / consts::ln_2;\n }\n \n-mod extensions {\n-    impl num of num for f64 {\n-        fn add(&&other: f64)    -> f64 { ret self + other; }\n-        fn sub(&&other: f64)    -> f64 { ret self - other; }\n-        fn mul(&&other: f64)    -> f64 { ret self * other; }\n-        fn div(&&other: f64)    -> f64 { ret self / other; }\n-        fn modulo(&&other: f64) -> f64 { ret self % other; }\n-        fn neg()                -> f64 { ret -self;        }\n-\n-        fn to_int()         -> int { ret self as int; }\n-        fn from_int(n: int) -> f64 { ret n as f64;    }\n-    }\n+impl num of num::num for f64 {\n+    fn add(&&other: f64)    -> f64 { ret self + other; }\n+    fn sub(&&other: f64)    -> f64 { ret self - other; }\n+    fn mul(&&other: f64)    -> f64 { ret self * other; }\n+    fn div(&&other: f64)    -> f64 { ret self / other; }\n+    fn modulo(&&other: f64) -> f64 { ret self % other; }\n+    fn neg()                -> f64 { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f64 { ret n as f64;    }\n }\n \n //"}, {"sha": "cd6e830ab4f3af7eae6df30fe7a8fb734f6989c3", "filename": "src/libcore/float.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -4,7 +4,7 @@\n // because it contains re-exports, we also have to explicitly\n // export locally defined things. That's a bit annoying.\n export to_str_common, to_str_exact, to_str, from_str;\n-export add, sub, mul, div, rem, lt, le, gt, eq, eq, ne;\n+export add, sub, mul, div, rem, lt, le, gt, eq, ne;\n export is_positive, is_negative, is_nonpositive, is_nonnegative;\n export is_zero, is_infinite, is_finite;\n export NaN, is_NaN, infinity, neg_infinity;\n@@ -17,7 +17,8 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export pow_with_uint;\n-export extensions;\n+\n+export num;\n \n // export when m_float == c_double\n \n@@ -26,8 +27,16 @@ export j0, j1, jn, y0, y1, yn;\n // PORT this must match in width according to architecture\n \n import m_float = f64;\n-import f64::*;\n-import num::num;\n+\n+import f64::{add, sub, mul, div, rem, lt, le, gt, eq, ne};\n+import f64::logarithm;\n+import f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n+import f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n+import f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n+import f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n+import f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n+import f64::signbit;\n+import f64::{j0, j1, jn, y0, y1, yn};\n \n const NaN: float = 0.0/0.0;\n \n@@ -410,18 +419,16 @@ fn sin(x: float) -> float { f64::sin(x as f64) as float }\n fn cos(x: float) -> float { f64::cos(x as f64) as float }\n fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n-mod extensions {\n-    impl num of num for float {\n-        fn add(&&other: float)    -> float { ret self + other; }\n-        fn sub(&&other: float)    -> float { ret self - other; }\n-        fn mul(&&other: float)    -> float { ret self * other; }\n-        fn div(&&other: float)    -> float { ret self / other; }\n-        fn modulo(&&other: float) -> float { ret self % other; }\n-        fn neg()                  -> float { ret -self;        }\n-\n-        fn to_int()         -> int   { ret self as int; }\n-        fn from_int(n: int) -> float { ret n as float;  }\n-    }\n+impl num of num::num for float {\n+    fn add(&&other: float)    -> float { ret self + other; }\n+    fn sub(&&other: float)    -> float { ret self - other; }\n+    fn mul(&&other: float)    -> float { ret self * other; }\n+    fn div(&&other: float)    -> float { ret self / other; }\n+    fn modulo(&&other: float) -> float { ret self % other; }\n+    fn neg()                  -> float { ret -self;        }\n+\n+    fn to_int()         -> int   { ret self as int; }\n+    fn from_int(n: int) -> float { ret n as float;  }\n }\n \n #[test]\n@@ -519,7 +526,7 @@ fn test_to_str_inf() {\n \n #[test]\n fn test_ifaces() {\n-    fn test<U:num>(ten: U) {\n+    fn test<U:num::num>(ten: U) {\n         assert (ten.to_int() == 10);\n \n         let two = ten.from_int(2);"}, {"sha": "7f3d385dca0ed725effff3a5176cfea46fcb117c", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -1,6 +1,5 @@\n import T = inst::T;\n import cmp::{eq, ord};\n-import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -12,7 +11,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export ord, eq, extensions;\n+export num, ord, eq;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -124,18 +123,16 @@ impl eq of eq for T {\n     }\n }\n \n-mod extensions {\n-    impl num of num::num for T {\n-        fn add(&&other: T)    -> T { ret self + other; }\n-        fn sub(&&other: T)    -> T { ret self - other; }\n-        fn mul(&&other: T)    -> T { ret self * other; }\n-        fn div(&&other: T)    -> T { ret self / other; }\n-        fn modulo(&&other: T) -> T { ret self % other; }\n-        fn neg()              -> T { ret -self;        }\n-\n-        fn to_int()         -> int { ret self as int; }\n-        fn from_int(n: int) -> T   { ret n as T;      }\n-    }\n+impl num of num::num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+    fn neg()              -> T { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n }\n \n "}, {"sha": "d341921eb03c0cb5b8d1b7c55c8562befc5bb07c", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -1,6 +1,5 @@\n import T = inst::T;\n import cmp::{eq, ord};\n-import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -12,7 +11,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export ord, eq, extensions;\n+export num, ord, eq;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -65,18 +64,16 @@ impl eq of eq for T {\n     }\n }\n \n-mod extensions {\n-    impl num of num::num for T {\n-        fn add(&&other: T)    -> T { ret self + other; }\n-        fn sub(&&other: T)    -> T { ret self - other; }\n-        fn mul(&&other: T)    -> T { ret self * other; }\n-        fn div(&&other: T)    -> T { ret self / other; }\n-        fn modulo(&&other: T) -> T { ret self % other; }\n-        fn neg()              -> T { ret -self;        }\n-\n-        fn to_int()         -> int { ret self as int; }\n-        fn from_int(n: int) -> T   { ret n as T;      }\n-    }\n+impl num of num::num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+    fn neg()              -> T { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n }\n \n #[doc = \""}, {"sha": "6a7bd93b9293842b95b66375be89a8cbfae5463c", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=7e6cbf7431671ecdfe60f7ec9fdd5af65248a7a2", "patch": "@@ -1,23 +1,25 @@\n+\n+\n // This file is intended to test only that methods are automatically\n // reachable for each numeric type, for each exported impl, with no imports\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n fn main() {\n-    // extensions::num\n+    // num\n     assert 15.add(6) == 21;\n     assert 15i8.add(6i8) == 21i8;\n     assert 15i16.add(6i16) == 21i16;\n     assert 15i32.add(6i32) == 21i32;\n     assert 15i64.add(6i64) == 21i64;\n \n-    // extensions::num\n+    // num\n     assert 15u.add(6u) == 21u;\n     assert 15u8.add(6u8) == 21u8;\n     assert 15u16.add(6u16) == 21u16;\n     assert 15u32.add(6u32) == 21u32;\n     assert 15u64.add(6u64) == 21u64;\n \n-    // extensions::num\n+    // num\n     assert 10f.to_int() == 10;\n     assert 10f32.to_int() == 10;\n     assert 10f64.to_int() == 10;"}]}