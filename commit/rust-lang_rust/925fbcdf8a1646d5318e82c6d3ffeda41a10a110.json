{"sha": "925fbcdf8a1646d5318e82c6d3ffeda41a10a110", "node_id": "C_kwDOAAsO6NoAKDkyNWZiY2RmOGExNjQ2ZDUzMThlODJjNmQzZmZlZGE0MWExMGExMTA", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:25Z"}, "message": "Rollup merge of #109408 - RalfJung:retags, r=compiler-errors\n\nnot *all* retags might be explicit in Runtime MIR\n\nIn https://github.com/rust-lang/rust/pull/105317 I made Miri treat `Rvalue::Ref/AddrOf` as implicit retagging sites. This updates the MIR docs accordingly.\n\nFor `Rvalue::Ref` I think this makes a lot more sense: creating a new reference is their entire point, so we can avoid bloating the MIR with retags. Also this seems to be the best way to handle cases like `*ptr = &[mut] ...`, where doing a retag is somewhat questionable since maybe `*ptr` points to another place now?\n\nFor `Rvalue::AddrOf`, Stacked Borrows needs this because even raw ptrs need some retagging, but Tree Borrows doesn't do ant retagging here and I hope we'll end up with a model where raw pointers don't get retagged.", "tree": {"sha": "6253002cc0f9d198fe8747567aee1dd07636379b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6253002cc0f9d198fe8747567aee1dd07636379b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925fbcdf8a1646d5318e82c6d3ffeda41a10a110", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxZCRBK7hj4Ov3rIwAA6s8IABTcPG/6GBeyxfQekqmZ4WMB\nqRQ3yxTTTKZzk7MV7GBu37zbQKdzA1J+4IQBBmtZfKXxa+TER2Ox2k6B32oqQUHJ\nrqFWpy1jAqPLkUv5utq77cDQysoWi4sdNmlEUHI9FqyifWuif4QsaczA4LPS7ul4\n85T4rU5YORktcQDZH/K0Hyoa154zDrybXKuBEzdfsRgPVi7xYJHq0XIAQrYnXbYX\nPexR/VOJOMWwaGpertLhpZ2enIs0PVKFaiJoImxXOa/Vc0YGYacsg8mlQF0bWXtg\nZvBsGrcuQ4xTenInhkd7ZEsAolGqR4s3r+101c4qcR75b46Y/N60vNvCbAjY2qA=\n=VEHI\n-----END PGP SIGNATURE-----\n", "payload": "tree 6253002cc0f9d198fe8747567aee1dd07636379b\nparent b2e48edded0955ed95c1824e8ec7ab48694c7f16\nparent 5058cc8e62f1557f684d90ff0dde7cedc6c5d529\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400025 +0100\ncommitter GitHub <noreply@github.com> 1679400025 +0100\n\nRollup merge of #109408 - RalfJung:retags, r=compiler-errors\n\nnot *all* retags might be explicit in Runtime MIR\n\nIn https://github.com/rust-lang/rust/pull/105317 I made Miri treat `Rvalue::Ref/AddrOf` as implicit retagging sites. This updates the MIR docs accordingly.\n\nFor `Rvalue::Ref` I think this makes a lot more sense: creating a new reference is their entire point, so we can avoid bloating the MIR with retags. Also this seems to be the best way to handle cases like `*ptr = &[mut] ...`, where doing a retag is somewhat questionable since maybe `*ptr` points to another place now?\n\nFor `Rvalue::AddrOf`, Stacked Borrows needs this because even raw ptrs need some retagging, but Tree Borrows doesn't do ant retagging here and I hope we'll end up with a model where raw pointers don't get retagged.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925fbcdf8a1646d5318e82c6d3ffeda41a10a110", "html_url": "https://github.com/rust-lang/rust/commit/925fbcdf8a1646d5318e82c6d3ffeda41a10a110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925fbcdf8a1646d5318e82c6d3ffeda41a10a110/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e48edded0955ed95c1824e8ec7ab48694c7f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e48edded0955ed95c1824e8ec7ab48694c7f16", "html_url": "https://github.com/rust-lang/rust/commit/b2e48edded0955ed95c1824e8ec7ab48694c7f16"}, {"sha": "5058cc8e62f1557f684d90ff0dde7cedc6c5d529", "url": "https://api.github.com/repos/rust-lang/rust/commits/5058cc8e62f1557f684d90ff0dde7cedc6c5d529", "html_url": "https://github.com/rust-lang/rust/commit/5058cc8e62f1557f684d90ff0dde7cedc6c5d529"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "3a893cdabf67eba0dc23a512dae950637ec71229", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/925fbcdf8a1646d5318e82c6d3ffeda41a10a110/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925fbcdf8a1646d5318e82c6d3ffeda41a10a110/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=925fbcdf8a1646d5318e82c6d3ffeda41a10a110", "patch": "@@ -78,7 +78,8 @@ pub enum MirPhase {\n     ///    MIR, this is UB.\n     ///  - Retags: If `-Zmir-emit-retag` is enabled, analysis MIR has \"implicit\" retags in the same way\n     ///    that Rust itself has them. Where exactly these are is generally subject to change, and so we\n-    ///    don't document this here. Runtime MIR has all retags explicit.\n+    ///    don't document this here. Runtime MIR has most retags explicit (though implicit retags\n+    ///    can still occur at `Rvalue::{Ref,AddrOf}`).\n     ///  - Generator bodies: In analysis MIR, locals may actually be behind a pointer that user code has\n     ///    access to. This occurs in generator bodies. Such locals do not behave like other locals,\n     ///    because they eg may be aliased in surprising ways. Runtime MIR has no such special locals -"}]}