{"sha": "227d30414ca88aad644ea4fde2c33852b1fd6ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyN2QzMDQxNGNhODhhYWQ2NDRlYTRmZGUyYzMzODUyYjFmZDZhZDk=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T18:37:52Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T21:20:35Z"}, "message": "std: Update docs for removal of ReadExt, WriteExt", "tree": {"sha": "2dd62adc79f8b67d1ea5a778cbc84fc2838aa0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd62adc79f8b67d1ea5a778cbc84fc2838aa0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227d30414ca88aad644ea4fde2c33852b1fd6ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227d30414ca88aad644ea4fde2c33852b1fd6ad9", "html_url": "https://github.com/rust-lang/rust/commit/227d30414ca88aad644ea4fde2c33852b1fd6ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227d30414ca88aad644ea4fde2c33852b1fd6ad9/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed810385045ab0db90303574ba3ea47dfa2a36d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed810385045ab0db90303574ba3ea47dfa2a36d5", "html_url": "https://github.com/rust-lang/rust/commit/ed810385045ab0db90303574ba3ea47dfa2a36d5"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "28ac23571d0d09d3835efce416f1d488de329151", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/227d30414ca88aad644ea4fde2c33852b1fd6ad9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d30414ca88aad644ea4fde2c33852b1fd6ad9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=227d30414ca88aad644ea4fde2c33852b1fd6ad9", "patch": "@@ -647,14 +647,14 @@ pub trait BufRead: Read {\n \n /// A `Write` adaptor which will write data to multiple locations.\n ///\n-/// For more information, see `WriteExt::broadcast`.\n-#[unstable(feature = \"io\", reason = \"awaiting stability of WriteExt::broadcast\")]\n+/// For more information, see `Write::broadcast`.\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n pub struct Broadcast<T, U> {\n     first: T,\n     second: U,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of WriteExt::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     fn write(&mut self, data: &[u8]) -> Result<usize> {\n         let n = try!(self.first.write(data));\n@@ -670,7 +670,7 @@ impl<T: Write, U: Write> Write for Broadcast<T, U> {\n \n /// Adaptor to chain together two instances of `Read`.\n ///\n-/// For more information, see `ReadExt::chain`.\n+/// For more information, see `Read::chain`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -693,7 +693,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n \n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n-/// For more information, see `ReadExt::take`.\n+/// For more information, see `Read::take`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<T> {\n     inner: T,\n@@ -746,14 +746,14 @@ impl<T: BufRead> BufRead for Take<T> {\n \n /// An adaptor which will emit all read data to a specified writer as well.\n ///\n-/// For more information see `ReadExt::tee`\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::tee\")]\n+/// For more information see `Read::tee`\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n pub struct Tee<R, W> {\n     reader: R,\n     writer: W,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n impl<R: Read, W: Write> Read for Tee<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         let n = try!(self.reader.read(buf));\n@@ -765,7 +765,7 @@ impl<R: Read, W: Write> Read for Tee<R, W> {\n \n /// A bridge from implementations of `Read` to an `Iterator` of `u8`.\n ///\n-/// See `ReadExt::bytes` for more information.\n+/// See `Read::bytes` for more information.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Bytes<R> {\n     inner: R,\n@@ -787,16 +787,16 @@ impl<R: Read> Iterator for Bytes<R> {\n \n /// A bridge from implementations of `Read` to an `Iterator` of `char`.\n ///\n-/// See `ReadExt::chars` for more information.\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+/// See `Read::chars` for more information.\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n #[derive(PartialEq, Clone, Debug)]\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -806,7 +806,7 @@ pub enum CharsError {\n     Other(Error),\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -838,7 +838,7 @@ impl<R: Read> Iterator for Chars<R> {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -854,7 +854,7 @@ impl std_error::Error for CharsError {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "333ae8f26a0d7fa028429ebedeca4218b96cb6a6", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/227d30414ca88aad644ea4fde2c33852b1fd6ad9/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d30414ca88aad644ea4fde2c33852b1fd6ad9/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=227d30414ca88aad644ea4fde2c33852b1fd6ad9", "patch": "@@ -18,7 +18,7 @@\n //! ```\n //!\n //! This module contains reexports of many core I/O traits such as `Read`,\n-//! `Write`, `ReadExt`, and `WriteExt`. Structures and functions are not\n+//! `Write` and `BufRead`. Structures and functions are not\n //! contained in this module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}