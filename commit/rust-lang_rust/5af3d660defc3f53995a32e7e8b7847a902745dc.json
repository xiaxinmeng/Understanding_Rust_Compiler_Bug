{"sha": "5af3d660defc3f53995a32e7e8b7847a902745dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjNkNjYwZGVmYzNmNTM5OTVhMzJlN2U4Yjc4NDdhOTAyNzQ1ZGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T21:50:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T21:50:51Z"}, "message": "Rollup merge of #22739 - tbu-:pr_error_net, r=alexcrichton\n\n This affects the `set_non_blocking` function which cannot fail for Unix or\nWindows, given correct parameters. Additionally, the short UDP write error case\nhas been removed as there is no such thing as \\\"short UDP writes\\\", instead, the\noperating system will error out if the application tries to send a packet\nlarger than the MTU of the network path.", "tree": {"sha": "d2a9f94297255b36975a442a071b0d8c73c468fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a9f94297255b36975a442a071b0d8c73c468fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af3d660defc3f53995a32e7e8b7847a902745dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af3d660defc3f53995a32e7e8b7847a902745dc", "html_url": "https://github.com/rust-lang/rust/commit/5af3d660defc3f53995a32e7e8b7847a902745dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af3d660defc3f53995a32e7e8b7847a902745dc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e36a27ec3dada93256622af20b2f8a2c85286ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e36a27ec3dada93256622af20b2f8a2c85286ba", "html_url": "https://github.com/rust-lang/rust/commit/0e36a27ec3dada93256622af20b2f8a2c85286ba"}, {"sha": "0fc1a7da93e5d431f5cd54a3f1263e2a5f9e5748", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc1a7da93e5d431f5cd54a3f1263e2a5f9e5748", "html_url": "https://github.com/rust-lang/rust/commit/0fc1a7da93e5d431f5cd54a3f1263e2a5f9e5748"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "228362e3d62ae2450ed349fae0b518f02db651b6", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -503,7 +503,7 @@ pub fn connect_timeout(fd: sock_t,\n     #[cfg(windows)] use libc::WSAEWOULDBLOCK as WOULDBLOCK;\n \n     // Make sure the call to connect() doesn't block\n-    try!(set_nonblocking(fd, true));\n+    set_nonblocking(fd, true);\n \n     let ret = match unsafe { libc::connect(fd, addrp, len) } {\n         // If the connection is in progress, then we need to wait for it to\n@@ -533,7 +533,7 @@ pub fn connect_timeout(fd: sock_t,\n     };\n \n     // be sure to turn blocking I/O back on\n-    try!(set_nonblocking(fd, false));\n+    set_nonblocking(fd, false);\n     return ret;\n \n     #[cfg(unix)]\n@@ -626,7 +626,7 @@ pub struct Guard<'a> {\n #[unsafe_destructor]\n impl<'a> Drop for Guard<'a> {\n     fn drop(&mut self) {\n-        assert!(set_nonblocking(self.fd, false).is_ok());\n+        set_nonblocking(self.fd, false);\n     }\n }\n \n@@ -723,7 +723,7 @@ impl TcpStream {\n             fd: self.fd(),\n             guard: self.inner.lock.lock().unwrap(),\n         };\n-        assert!(set_nonblocking(self.fd(), true).is_ok());\n+        set_nonblocking(self.fd(), true);\n         ret\n     }\n \n@@ -862,7 +862,7 @@ impl UdpSocket {\n             fd: self.fd(),\n             guard: self.inner.lock.lock().unwrap(),\n         };\n-        assert!(set_nonblocking(self.fd(), true).is_ok());\n+        set_nonblocking(self.fd(), true);\n         ret\n     }\n \n@@ -887,9 +887,7 @@ impl UdpSocket {\n                            storagep,\n                            &mut addrlen) as libc::c_int\n         }));\n-        sockaddr_to_addr(&storage, addrlen as uint).and_then(|addr| {\n-            Ok((n as uint, addr))\n-        })\n+        Ok((n as uint, sockaddr_to_addr(&storage, addrlen as uint).unwrap()))\n     }\n \n     pub fn send_to(&mut self, buf: &[u8], dst: SocketAddr) -> IoResult<()> {\n@@ -910,11 +908,8 @@ impl UdpSocket {\n         };\n \n         let n = try!(write(fd, self.write_deadline, buf, false, dolock, dowrite));\n-        if n != buf.len() {\n-            Err(short_write(n, \"couldn't send entire packet at once\"))\n-        } else {\n-            Ok(())\n-        }\n+        assert!(n == buf.len(), \"UDP packet not completely written.\");\n+        Ok(())\n     }\n \n     pub fn join_multicast(&mut self, multi: IpAddr) -> IoResult<()> {"}, {"sha": "632270bc5ccbf250286bc176d1f7c08ce9ea4935", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -214,9 +214,9 @@ pub fn wouldblock() -> bool {\n     err == libc::EWOULDBLOCK as i32 || err == libc::EAGAIN as i32\n }\n \n-pub fn set_nonblocking(fd: sock_t, nb: bool) -> IoResult<()> {\n+pub fn set_nonblocking(fd: sock_t, nb: bool) {\n     let set = nb as libc::c_int;\n-    mkerr_libc(retry(|| unsafe { c::ioctl(fd, c::FIONBIO, &set) }))\n+    mkerr_libc(retry(|| unsafe { c::ioctl(fd, c::FIONBIO, &set) })).unwrap();\n }\n \n // nothing needed on unix platforms"}, {"sha": "1446600a77ed75c53cd74fb70f07699f4cc45a93", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -235,9 +235,9 @@ impl UnixListener {\n \n             _ => {\n                 let (reader, writer) = try!(unsafe { sys::os::pipe() });\n-                try!(set_nonblocking(reader.fd(), true));\n-                try!(set_nonblocking(writer.fd(), true));\n-                try!(set_nonblocking(self.fd(), true));\n+                set_nonblocking(reader.fd(), true);\n+                set_nonblocking(writer.fd(), true);\n+                set_nonblocking(self.fd(), true);\n                 Ok(UnixAcceptor {\n                     inner: Arc::new(AcceptorInner {\n                         listener: self,"}, {"sha": "dc067e7e0c5bafec19fc3d314f8ab9b39a78f7fb", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -345,8 +345,8 @@ impl Process {\n             unsafe {\n                 let mut pipes = [0; 2];\n                 assert_eq!(libc::pipe(pipes.as_mut_ptr()), 0);\n-                set_nonblocking(pipes[0], true).ok().unwrap();\n-                set_nonblocking(pipes[1], true).ok().unwrap();\n+                set_nonblocking(pipes[0], true);\n+                set_nonblocking(pipes[1], true);\n                 WRITE_FD = pipes[1];\n \n                 let mut old: c::sigaction = mem::zeroed();\n@@ -362,7 +362,7 @@ impl Process {\n         fn waitpid_helper(input: libc::c_int,\n                           messages: Receiver<Req>,\n                           (read_fd, old): (libc::c_int, c::sigaction)) {\n-            set_nonblocking(input, true).ok().unwrap();\n+            set_nonblocking(input, true);\n             let mut set: c::fd_set = unsafe { mem::zeroed() };\n             let mut tv: libc::timeval;\n             let mut active = Vec::<(libc::pid_t, Sender<ProcessExit>, u64)>::new();"}, {"sha": "b08f6ef9b9032ebe19b9af176d086164f0de2d7a", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -67,9 +67,9 @@ impl TcpListener {\n             -1 => Err(last_net_error()),\n             _ => {\n                 let (reader, writer) = try!(unsafe { sys::os::pipe() });\n-                try!(set_nonblocking(reader.fd(), true));\n-                try!(set_nonblocking(writer.fd(), true));\n-                try!(set_nonblocking(self.fd(), true));\n+                set_nonblocking(reader.fd(), true);\n+                set_nonblocking(writer.fd(), true);\n+                set_nonblocking(self.fd(), true);\n                 Ok(TcpAcceptor {\n                     inner: Arc::new(AcceptorInner {\n                         listener: self,"}, {"sha": "3acb372f658c52b6e19c8dadb1b5bed23f693e47", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -192,12 +192,12 @@ pub fn wouldblock() -> bool {\n     err == libc::WSAEWOULDBLOCK as i32\n }\n \n-pub fn set_nonblocking(fd: sock_t, nb: bool) -> IoResult<()> {\n+pub fn set_nonblocking(fd: sock_t, nb: bool) {\n     let mut set = nb as libc::c_ulong;\n-    if unsafe { c::ioctlsocket(fd, c::FIONBIO, &mut set) != 0 } {\n-        Err(last_error())\n-    } else {\n-        Ok(())\n+    if unsafe { c::ioctlsocket(fd, c::FIONBIO, &mut set) } != 0 {\n+        // The above function should not return an error unless we passed it\n+        // invalid parameters. Panic on errors.\n+        Err(last_error()).unwrap();\n     }\n }\n "}, {"sha": "6caa4df5dfe6269e58bd3fa903e4ee19d70dfe81", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -25,6 +25,8 @@ pub type wrlen_t = i32;\n \n pub struct Socket(libc::SOCKET);\n \n+/// Checks whether the Windows socket interface has been started already, and\n+/// if not, starts it.\n pub fn init() {\n     static START: Once = ONCE_INIT;\n \n@@ -38,10 +40,16 @@ pub fn init() {\n     });\n }\n \n+/// Returns the last error from the Windows socket interface.\n fn last_error() -> io::Error {\n     io::Error::from_os_error(unsafe { c::WSAGetLastError() })\n }\n \n+/// Checks if the signed integer is the Windows constant `SOCKET_ERROR` (-1)\n+/// and if so, returns the last error from the Windows socket interface. . This\n+/// function must be called before another call to the socket API is made.\n+///\n+/// FIXME: generics needed?\n pub fn cvt<T: SignedInt>(t: T) -> io::Result<T> {\n     let one: T = Int::one();\n     if t == -one {\n@@ -51,11 +59,14 @@ pub fn cvt<T: SignedInt>(t: T) -> io::Result<T> {\n     }\n }\n \n+/// Provides the functionality of `cvt` for the return values of `getaddrinfo`\n+/// and similar, meaning that they return an error if the return value is 0.\n pub fn cvt_gai(err: c_int) -> io::Result<()> {\n     if err == 0 { return Ok(()) }\n     cvt(err).map(|_| ())\n }\n \n+/// Provides the functionality of `cvt` for a closure.\n pub fn cvt_r<T: SignedInt, F>(mut f: F) -> io::Result<T> where F: FnMut() -> T {\n     cvt(f())\n }\n@@ -112,7 +123,7 @@ impl Socket {\n \n impl Drop for Socket {\n     fn drop(&mut self) {\n-        unsafe { let _ = libc::closesocket(self.0); }\n+        unsafe { cvt(libc::closesocket(self.0)).unwrap(); }\n     }\n }\n "}, {"sha": "25b70918591d0fc54c6ad488f36f8e42643013ac", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3d660defc3f53995a32e7e8b7847a902745dc/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=5af3d660defc3f53995a32e7e8b7847a902745dc", "patch": "@@ -192,7 +192,7 @@ impl TcpAcceptor {\n                         c::WSAEventSelect(socket, events[1], 0)\n                     };\n                     if ret != 0 { return Err(last_net_error()) }\n-                    try!(set_nonblocking(socket, false));\n+                    set_nonblocking(socket, false);\n                     return Ok(stream)\n                 }\n             }"}]}