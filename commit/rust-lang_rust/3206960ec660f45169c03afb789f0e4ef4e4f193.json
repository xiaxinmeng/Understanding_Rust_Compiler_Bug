{"sha": "3206960ec660f45169c03afb789f0e4ef4e4f193", "node_id": "C_kwDOAAsO6NoAKDMyMDY5NjBlYzY2MGY0NTE2OWMwM2FmYjc4OWYwZTRlZjRlNGYxOTM", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T08:44:17Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:14:04Z"}, "message": "minor tweaks", "tree": {"sha": "bb881e95440ce04b8cccc428cfdb76c619d847ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb881e95440ce04b8cccc428cfdb76c619d847ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3206960ec660f45169c03afb789f0e4ef4e4f193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3206960ec660f45169c03afb789f0e4ef4e4f193", "html_url": "https://github.com/rust-lang/rust/commit/3206960ec660f45169c03afb789f0e4ef4e4f193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3206960ec660f45169c03afb789f0e4ef4e4f193/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92294f76b130f44659a2e8a1fc4b3bd16c5b20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92294f76b130f44659a2e8a1fc4b3bd16c5b20b", "html_url": "https://github.com/rust-lang/rust/commit/f92294f76b130f44659a2e8a1fc4b3bd16c5b20b"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "aeb0c762020418617622331155469ee1c8dc9109", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -558,14 +558,13 @@ impl<'a> State<'a> {\n                 self.word(\",\");\n                 self.space();\n \n-                let (&first, rest) =\n-                    fields.split_first().expect(\"offset_of! should have at least 1 field\");\n+                if let Some((&first, rest)) = fields.split_first() {\n+                    self.print_ident(first);\n \n-                self.print_ident(first);\n-\n-                for &field in rest {\n-                    self.word(\".\");\n-                    self.print_ident(field);\n+                    for &field in rest {\n+                        self.word(\".\");\n+                        self.print_ident(field);\n+                    }\n                 }\n \n                 self.end();"}, {"sha": "4d3a11935085d6ea73e6048d719a9efaeac3b439", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -287,7 +287,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     // FIXME: This should be a span_bug (#80742)\n                     self.tcx.sess.delay_span_bug(\n                         self.frame().current_span(),\n-                        &format!(\"Nullary MIR operator called for unsized type {}\", ty),\n+                        &format!(\"{null_op:?} MIR operator called for unsized type {ty}\"),\n                     );\n                     throw_inval!(SizeOfUnsizedType(ty));\n                 }"}, {"sha": "2db4f1e50d48e4c2fab57aa6cea8cabd69e699fc", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -1557,14 +1557,13 @@ impl<'a> State<'a> {\n                 self.word(\",\");\n                 self.space();\n \n-                let (&first, rest) =\n-                    fields.split_first().expect(\"offset_of! should have at least 1 field\");\n+                if let Some((&first, rest)) = fields.split_first() {\n+                    self.print_ident(first);\n \n-                self.print_ident(first);\n-\n-                for &field in rest {\n-                    self.word(\".\");\n-                    self.print_ident(field);\n+                    for &field in rest {\n+                        self.word(\".\");\n+                        self.print_ident(field);\n+                    }\n                 }\n \n                 self.word(\")\");"}, {"sha": "3ffc583d43f6125a4b652b99b5fb9d215faaa24d", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -3084,6 +3084,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n \n+                        // FIXME: DSTs with static alignment should be allowed\n                         self.require_type_is_sized(field_ty, expr.span, traits::MiscObligation);\n \n                         if field.vis.is_accessible_from(def_scope, self.tcx) {"}, {"sha": "d9aa461c19d409d84b71115f996db90f33bca049", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -53,7 +53,8 @@ impl Category {\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n             | ExprKind::Yield { .. }\n-            | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n+            | ExprKind::Call { .. }\n+            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }\n@@ -67,7 +68,6 @@ impl Category {\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n             | ExprKind::ThreadLocalRef(_)\n-            | ExprKind::InlineAsm { .. }\n             | ExprKind::OffsetOf { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::ConstBlock { .. }"}, {"sha": "9fec3ce16ee900ec1b84179e2b1493d69b7e7e83", "filename": "compiler/rustc_mir_build/src/thir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> ThirPrinter<'a, 'tcx> {\n                 print_indented!(self, \"}\", depth_lvl);\n             }\n             OffsetOf { container, fields } => {\n-                print_indented!(self, \"InlineAsm {\", depth_lvl);\n+                print_indented!(self, \"OffsetOf {\", depth_lvl);\n                 print_indented!(self, format!(\"container: {:?}\", container), depth_lvl + 1);\n                 print_indented!(self, \"fields: [\", depth_lvl + 1);\n "}, {"sha": "7d2f297152365ce72432c3cb1b0fa5b5a1892ba2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -1319,5 +1319,5 @@ impl<T> SizedTypeProperties for T {}\n #[rustc_builtin_macro]\n #[cfg(not(bootstrap))]\n pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {\n-    // ...implementation defined...\n+    /* compiler built-in */\n }"}, {"sha": "a0882eff707f2c44f0fad3c2b62d84f206694740", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3206960ec660f45169c03afb789f0e4ef4e4f193/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3206960ec660f45169c03afb789f0e4ef4e4f193/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=3206960ec660f45169c03afb789f0e4ef4e4f193", "patch": "@@ -345,7 +345,6 @@ pub(crate) fn format_expr(\n         // Style Guide RFC for InlineAsm variant pending\n         // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n         ast::ExprKind::InlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n-        ast::ExprKind::OffsetOf(..) => Some(context.snippet(expr.span).to_owned()),\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)\n@@ -400,7 +399,7 @@ pub(crate) fn format_expr(\n             }\n         }\n         ast::ExprKind::Underscore => Some(\"_\".to_owned()),\n-        ast::ExprKind::FormatArgs(..) | ast::ExprKind::IncludedBytes(..) => {\n+        ast::ExprKind::FormatArgs(..) | ast::ExprKind::IncludedBytes(..) | ast::ExprKind::OffsetOf(..) => {\n             // These do not occur in the AST because macros aren't expanded.\n             unreachable!()\n         }"}]}