{"sha": "e7e6dec06a050c5bc4e7a93e6700fad28570779a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTZkZWMwNmEwNTBjNWJjNGU3YTkzZTY3MDBmYWQyODU3MDc3OWE=", "commit": {"author": {"name": "Felix S Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-03T08:46:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-03T08:46:01Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "f09037ec3fc26922864d09328b2514049c7527f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09037ec3fc26922864d09328b2514049c7527f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e6dec06a050c5bc4e7a93e6700fad28570779a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlbVJCRBK7hj4Ov3rIwAAdHIIAI+rxrkPC8PyktpH+Gd7ZEqn\n4eC9W3xkviJLLKp9iT/FO2CmkPaBgbS//VdDTZA7rGMC2+oyJeZYBcexAF7nLs5q\nCTURnL/49gjHyFyBdcyYRNLl+FXChiABFhtaYCakXGERx+Sr1IR3vSsWGlfNfyGU\nuDZ/aGymAFzI4OYmg8aUGeOVzRs2IeEWgZjMJUXPe+9W9TtEr01ZpgilcDsVGRK5\nAExY9yU8RMebRBPAb8yBIM4T/4GqqD9klQpiXo3+rPmrIScmNOWhn6VzpuUF8coI\nU5wM9CqSiy+64st/lDeQh9nxD5psnalyLmpMimnGunpVGsgcEvgoMT+mn53pNZY=\n=7WFV\n-----END PGP SIGNATURE-----\n", "payload": "tree f09037ec3fc26922864d09328b2514049c7527f4\nparent 3adcc3ed222bdc6fc669281c42ef933aa3f6116b\nauthor Felix S Klock II <pnkfelix@pnkfx.org> 1570092361 +0200\ncommitter GitHub <noreply@github.com> 1570092361 +0200\n\nApply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>\nCo-Authored-By: Ralf Jung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e6dec06a050c5bc4e7a93e6700fad28570779a", "html_url": "https://github.com/rust-lang/rust/commit/e7e6dec06a050c5bc4e7a93e6700fad28570779a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e6dec06a050c5bc4e7a93e6700fad28570779a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3adcc3ed222bdc6fc669281c42ef933aa3f6116b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3adcc3ed222bdc6fc669281c42ef933aa3f6116b", "html_url": "https://github.com/rust-lang/rust/commit/3adcc3ed222bdc6fc669281c42ef933aa3f6116b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "73d43289d19c5fc28748768cfe420305d36d92a3", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e7e6dec06a050c5bc4e7a93e6700fad28570779a", "patch": "@@ -281,7 +281,7 @@ pub fn from_fn_attrs(\n         //\n         // However, in the long term we should either:\n         // - fold this into final else (i.e. stop inspecting `id`)\n-        // - or better still: whole-heartedly adopt Rust PR #63909.\n+        // - adopt Rust PR #63909.\n         //\n         // see also Rust RFC 2753.\n \n@@ -294,7 +294,7 @@ pub fn from_fn_attrs(\n         } else {\n             // Anything else is either:\n             //\n-            //  1. A foreign item (like `extern \"C\" { fn foo(); }`), or\n+            //  1. A foreign item using a non-Rust ABI (like `extern \"C\" { fn foo(); }`), or\n             //\n             //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n             //"}, {"sha": "63e373e5b59bb22e21e9e764e52a136401278b19", "filename": "src/test/ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs?ref=e7e6dec06a050c5bc4e7a93e6700fad28570779a", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n // rust-lang/rust#64655: with panic=unwind, a panic from a subroutine\n-// should still run desstructors as it unwindws the stack. However,\n+// should still run destructors as it unwinds the stack. However,\n // bugs with how the nounwind LLVM attribute was applied led to this\n // simple case being mishandled *if* you had fat LTO turned on.\n \n@@ -54,7 +54,7 @@ fn main() {\n \n     let wait = handle.join();\n \n-    // reinstate handler to ease observation of assertion failures.\n+    // Reinstate handler to ease observation of assertion failures.\n     std::panic::set_hook(old_hook);\n \n     assert!(wait.is_err());"}, {"sha": "346d176ad3bcc05999e2a0e178ca07e158d7008f", "filename": "src/test/ui/extern/issue-64655-extern-rust-must-allow-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6dec06a050c5bc4e7a93e6700fad28570779a/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs?ref=e7e6dec06a050c5bc4e7a93e6700fad28570779a", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n // rust-lang/rust#64655: with panic=unwind, a panic from a subroutine\n-// should still run desstructors as it unwinds the stack. However,\n+// should still run destructors as it unwinds the stack. However,\n // bugs with how the nounwind LLVM attribute was applied led to this\n // simple case being mishandled *if* you had optimization *and* fat\n // LTO turned on.\n@@ -13,7 +13,7 @@\n // This test takes the code from the above issue and adapts it to\n // better fit our test infrastructure:\n //\n-// * Instead of relying on println! to observe whether the destructor\n+// * Instead of relying on `println!` to observe whether the destructor\n //   is run, we instead run the code in a spawned thread and\n //   communicate the destructor's operation via a synchronous atomic\n //   in static memory."}]}