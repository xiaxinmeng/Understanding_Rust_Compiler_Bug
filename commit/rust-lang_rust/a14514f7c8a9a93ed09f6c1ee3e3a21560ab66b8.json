{"sha": "a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDUxNGY3YzhhOWE5M2VkMDlmNmMxZWUzZTNhMjE1NjBhYjY2Yjg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-05T15:48:35Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-05T16:29:41Z"}, "message": "fixed span position and README", "tree": {"sha": "fc64789457b13cbdf3ee24838117040ae42d897e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc64789457b13cbdf3ee24838117040ae42d897e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "html_url": "https://github.com/rust-lang/rust/commit/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d85cc24e7c9a62359ca837570d5e08105d22036", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d85cc24e7c9a62359ca837570d5e08105d22036", "html_url": "https://github.com/rust-lang/rust/commit/3d85cc24e7c9a62359ca837570d5e08105d22036"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "eb843daab208af3e3f72a6c77fa98a7aac533046", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 111 lints included in this crate:\n+There are 110 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -86,7 +86,6 @@ name\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                       | warn    | zipping iterator with a range when enumerate() would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                         | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                         | warn    | using `name @ _` in a pattern\n-[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                     | allow   | finds use of `regex!(_)`, suggests `Regex::new(_)` instead\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                       | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                       | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                               | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`"}, {"sha": "a77f6829b90f46719e1162c0bd39a8a6a012f04f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "patch": "@@ -167,6 +167,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,\n+        strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_POSSIBLE_WRAP,"}, {"sha": "259bbb1b64bd7667471a8f25c4c6389f5c102be0", "filename": "src/regex.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "patch": "@@ -1,6 +1,8 @@\n use regex_syntax;\n use std::error::Error;\n-use syntax::codemap::{Span, BytePos, Pos};\n+use syntax::ast::Lit_::LitStr;\n+use syntax::codemap::{Span, BytePos};\n+use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n@@ -35,19 +37,47 @@ impl LateLintPass for RegexPass {\n         if_let_chain!{[\n             let ExprCall(ref fun, ref args) = expr.node,\n             let ExprPath(_, ref path) = fun.node,\n-            match_path(path, &REGEX_NEW_PATH) && args.len() == 1,\n-            let Ok(ConstVal::Str(r)) = eval_const_expr_partial(cx.tcx, \n-                                                               &*args[0],\n-                                                               ExprTypeChecked,\n-                                                               None),\n-            let Err(e) = regex_syntax::Expr::parse(&r)\n+            match_path(path, &REGEX_NEW_PATH) && args.len() == 1\n         ], {\n-            let lo = args[0].span.lo + BytePos::from_usize(e.position());\n-            let span = Span{ lo: lo, hi: lo, expn_id: args[0].span.expn_id };\n-            span_lint(cx,\n-                      INVALID_REGEX,\n-                      span,\n-                      &format!(\"Regex syntax error: {}\", e.description()));\n+            if let ExprLit(ref lit) = args[0].node {\n+                if let LitStr(ref r, _) = lit.node {\n+                    if let Err(e) = regex_syntax::Expr::parse(r) {\n+                        span_lint(cx,\n+                                  INVALID_REGEX,\n+                                  str_span(args[0].span, &r, e.position()),\n+                                  &format!(\"Regex syntax error: {}\",\n+                                           e.description()));\n+                    }\n+                }\n+            } else {\n+                if_let_chain!{[\n+                    let Some(r) = const_str(cx, &*args[0]),\n+                    let Err(e) = regex_syntax::Expr::parse(&r)\n+                ], {\n+                    span_lint(cx,\n+                              INVALID_REGEX,\n+                              args[0].span,\n+                              &format!(\"Regex syntax error on position {}: {}\",\n+                                       e.position(),\n+                                       e.description()));\n+                }}\n+            }\n         }}\n     }\n }\n+\n+#[allow(cast_possible_truncation)]\n+fn str_span(base: Span, s: &str, c: usize) -> Span {\n+    let lo = match s.char_indices().nth(c) {\n+        Some((b, _)) => base.lo + BytePos(b as u32),\n+        _ => base.hi\n+    };\n+    Span{ lo: lo, hi: lo, ..base }\n+}\n+\n+fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n+    match eval_const_expr_partial(cx.tcx, e, ExprTypeChecked, None) {\n+        Ok(ConstVal::Str(r)) => Some(r),\n+        _ => None\n+    }\n+}"}, {"sha": "34dfc1ef25b37039a9362bfe6a36739d66090705", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=a14514f7c8a9a93ed09f6c1ee3e3a21560ab66b8", "patch": "@@ -8,9 +8,17 @@ extern crate regex;\n \n use regex::Regex;\n \n+const OPENING_PAREN : &'static str = \"(\";\n+\n fn main() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n     //~^ERROR: Regex syntax error: empty alternate\n-    let wrong_char_range = Regex::new(\"[z-a]\"); \n+    let wrong_char_ranice = Regex::new(\"[z-a]\"); \n     //~^ERROR: Regex syntax error: invalid character class range\n+    \n+    let some_regex = Regex::new(OPENING_PAREN);\n+    //~^ERROR: Regex syntax error on position 0: unclosed\n+\n+    let closing_paren = \")\";\n+    let not_linted = Regex::new(closing_paren);\n }"}]}