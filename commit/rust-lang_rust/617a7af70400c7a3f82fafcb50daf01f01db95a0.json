{"sha": "617a7af70400c7a3f82fafcb50daf01f01db95a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxN2E3YWY3MDQwMGM3YTNmODJmYWZjYjUwZGFmMDFmMDFkYjk1YTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-16T17:24:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-22T06:05:37Z"}, "message": "syntax: Respect allow_internal_unstable in macros\n\nThis change modifies the feature gating of special `#[cfg]` attributes to not\nrequire a `#![feature]` directive in the crate-of-use if the source of the macro\nwas declared with `#[allow_internal_unstable]`. This enables the standard\nlibrary's macro for `thread_local!` to make use of the\n`#[cfg(target_thread_local)]` attribute despite it being feature gated (e.g.\nit's a hidden implementation detail).", "tree": {"sha": "7d6e3b7b770d47e2eb670d1e050c347852b310d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d6e3b7b770d47e2eb670d1e050c347852b310d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617a7af70400c7a3f82fafcb50daf01f01db95a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617a7af70400c7a3f82fafcb50daf01f01db95a0", "html_url": "https://github.com/rust-lang/rust/commit/617a7af70400c7a3f82fafcb50daf01f01db95a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617a7af70400c7a3f82fafcb50daf01f01db95a0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67b5a8d0149096712e75336f6aa32daffcaa42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67b5a8d0149096712e75336f6aa32daffcaa42d", "html_url": "https://github.com/rust-lang/rust/commit/b67b5a8d0149096712e75336f6aa32daffcaa42d"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "89299c01199756ca5e7c6578f1806e6ee7b5d56e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/617a7af70400c7a3f82fafcb50daf01f01db95a0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617a7af70400c7a3f82fafcb50daf01f01db95a0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=617a7af70400c7a3f82fafcb50daf01f01db95a0", "patch": "@@ -606,7 +606,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         feature_gated_cfgs.sort();\n         feature_gated_cfgs.dedup();\n         for cfg in &feature_gated_cfgs {\n-            cfg.check_and_emit(sess.diagnostic(), &features);\n+            cfg.check_and_emit(sess.diagnostic(), &features, sess.codemap());\n         }\n     });\n "}, {"sha": "caad7c6e7f54243d83a5b8bc4cafa85815f23ceb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/617a7af70400c7a3f82fafcb50daf01f01db95a0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617a7af70400c7a3f82fafcb50daf01f01db95a0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=617a7af70400c7a3f82fafcb50daf01f01db95a0", "patch": "@@ -454,10 +454,13 @@ impl PartialOrd for GatedCfgAttr {\n }\n \n impl GatedCfgAttr {\n-    pub fn check_and_emit(&self, diagnostic: &Handler, features: &Features) {\n+    pub fn check_and_emit(&self,\n+                          diagnostic: &Handler,\n+                          features: &Features,\n+                          codemap: &CodeMap) {\n         match *self {\n             GatedCfgAttr::GatedCfg(ref cfg) => {\n-                cfg.check_and_emit(diagnostic, features);\n+                cfg.check_and_emit(diagnostic, features, codemap);\n             }\n             GatedCfgAttr::GatedAttr(span) => {\n                 if !features.stmt_expr_attributes {\n@@ -484,9 +487,12 @@ impl GatedCfg {\n                       }\n                   })\n     }\n-    fn check_and_emit(&self, diagnostic: &Handler, features: &Features) {\n+    fn check_and_emit(&self,\n+                      diagnostic: &Handler,\n+                      features: &Features,\n+                      codemap: &CodeMap) {\n         let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n-        if !has_feature(features) {\n+        if !has_feature(features) && !codemap.span_allows_unstable(self.span) {\n             let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n             emit_feature_err(diagnostic, feature, self.span, GateIssue::Language, &explain);\n         }"}]}