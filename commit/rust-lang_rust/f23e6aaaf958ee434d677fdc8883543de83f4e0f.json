{"sha": "f23e6aaaf958ee434d677fdc8883543de83f4e0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2U2YWFhZjk1OGVlNDM0ZDY3N2ZkYzg4ODM1NDNkZTgzZjRlMGY=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-08-16T17:55:15Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-08-16T17:55:15Z"}, "message": "fix the identification of a block comment.\n\nBlock comments like below were not properly supported:\n\n    /*\n       something here but it doesn't start with a star\n     */\n\nbecause of the line that didn't start with a star.", "tree": {"sha": "b7358b1448d0d9777a7f7320db52bf8ba68bb6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7358b1448d0d9777a7f7320db52bf8ba68bb6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23e6aaaf958ee434d677fdc8883543de83f4e0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlt1uzsACgkQbVYg2Qgh\nATOIgwf/SyvrsM9NWv5xiS4Ddba8fKWCRGBR902tFU1uQwWmpOUHIexB2ZyoscVH\n5VmJNQ3Q+brKBISJNPyeMrcuSh+ROvm+nTyQY7yZWs4o0wseuVOX8LEEGuOdS7wN\nJpeL+OF2wo9TlGGxlqla66n6t/jc6JRaZoz3bIOdHfCpwE3k8Fnv9SZwcJ8Qd84t\nh0R9YWni35xFWntDCXR5LEPjM0QVEWnQXw0ktkZyrf8G068U8/blX//mvmzNzuJs\nMeyzKEaVBYkS5A2MlCrbcYNqpNjPfWEf48xhaW2afZ4KWTT/vxSjj9UsOKNR4V0z\npJqyT5XjkPr2ZWY25T001Mw9ZJeNKg==\n=Qcif\n-----END PGP SIGNATURE-----", "payload": "tree b7358b1448d0d9777a7f7320db52bf8ba68bb6dc\nparent 7c1ad96e9fca2186e691f64be55e96fec6a204be\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1534442115 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1534442115 +0200\n\nfix the identification of a block comment.\n\nBlock comments like below were not properly supported:\n\n    /*\n       something here but it doesn't start with a star\n     */\n\nbecause of the line that didn't start with a star.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23e6aaaf958ee434d677fdc8883543de83f4e0f", "html_url": "https://github.com/rust-lang/rust/commit/f23e6aaaf958ee434d677fdc8883543de83f4e0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23e6aaaf958ee434d677fdc8883543de83f4e0f/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1ad96e9fca2186e691f64be55e96fec6a204be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1ad96e9fca2186e691f64be55e96fec6a204be", "html_url": "https://github.com/rust-lang/rust/commit/7c1ad96e9fca2186e691f64be55e96fec6a204be"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "e9d91818d0dd58834330e192d1737fe1d9f14545", "filename": "src/comment.rs", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f23e6aaaf958ee434d677fdc8883543de83f4e0f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23e6aaaf958ee434d677fdc8883543de83f4e0f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=f23e6aaaf958ee434d677fdc8883543de83f4e0f", "patch": "@@ -96,21 +96,6 @@ impl<'a> CommentStyle<'a> {\n     pub fn to_str_tuplet(&self) -> (&'a str, &'a str, &'a str) {\n         (self.opener(), self.closer(), self.line_start())\n     }\n-\n-    pub fn line_with_same_comment_style(&self, line: &str, normalize_comments: bool) -> bool {\n-        match *self {\n-            CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n-                line.trim_left().starts_with(self.line_start().trim_left())\n-                    || comment_style(line, normalize_comments) == *self\n-            }\n-            CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n-                line.trim_left().starts_with(self.closer().trim_left())\n-                    || line.trim_left().starts_with(self.line_start().trim_left())\n-                    || comment_style(line, normalize_comments) == *self\n-            }\n-            CommentStyle::Custom(opener) => line.trim_left().starts_with(opener.trim_right()),\n-        }\n-    }\n }\n \n fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n@@ -273,19 +258,56 @@ fn identify_comment(\n     is_doc_comment: bool,\n ) -> Option<String> {\n     let style = comment_style(orig, false);\n-    let first_group = orig\n-        .lines()\n-        .take_while(|l| style.line_with_same_comment_style(l, false))\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-    let rest = orig\n-        .lines()\n-        .skip(first_group.lines().count())\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n+    let mut first_group_ending = 0;\n+\n+    fn compute_len(orig: &str, line: &str) -> usize {\n+        if orig.len() > line.len() {\n+            if orig.as_bytes()[line.len()] == b'\\r' {\n+                line.len() + 2\n+            } else {\n+                line.len() + 1\n+            }\n+        } else {\n+            line.len()\n+        }\n+    }\n+\n+    match style {\n+        CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n+            let line_start = style.line_start().trim_left();\n+            for line in orig.lines() {\n+                if line.trim_left().starts_with(line_start) || comment_style(line, false) == style {\n+                    first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+        CommentStyle::Custom(opener) => {\n+            let trimmed_opener = opener.trim_right();\n+            for line in orig.lines() {\n+                if line.trim_left().starts_with(trimmed_opener) {\n+                    first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+        // for a block comment, search for the closing symbol\n+        CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n+            let closer = style.closer().trim_left();\n+            for line in orig.lines() {\n+                first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                if line.trim_left().ends_with(closer) {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n \n+    let (first_group, rest) = orig.split_at(first_group_ending);\n     let first_group_str = rewrite_comment_inner(\n-        &first_group,\n+        first_group,\n         block_style,\n         style,\n         shape,\n@@ -295,7 +317,7 @@ fn identify_comment(\n     if rest.is_empty() {\n         Some(first_group_str)\n     } else {\n-        identify_comment(&rest, block_style, shape, config, is_doc_comment).map(|rest_str| {\n+        identify_comment(rest, block_style, shape, config, is_doc_comment).map(|rest_str| {\n             format!(\n                 \"{}\\n{}{}\",\n                 first_group_str,"}, {"sha": "d70682e3bee4686fe6573c1f79ac58c6d33d6676", "filename": "tests/source/issue-539.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Fsource%2Fissue-539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Fsource%2Fissue-539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-539.rs?ref=f23e6aaaf958ee434d677fdc8883543de83f4e0f", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-normalize_comments: true\n+/*\n+  FIXME (#3300): Should allow items to be anonymous. Right now\n+  we just use dummy names for anon items.\n+ */"}, {"sha": "fd99015ea51ca04f694358b932de785dd3019801", "filename": "tests/source/issue-683.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Fsource%2Fissue-683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Fsource%2Fissue-683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-683.rs?ref=f23e6aaaf958ee434d677fdc8883543de83f4e0f", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-normalize_comments: true\n+/*\n+ * FIXME (#3300): Should allow items to be anonymous. Right now\n+ * we just use dummy names for anon items.\n+ */"}, {"sha": "adeb33555fb5c04e8378af52527ff3effae6de12", "filename": "tests/target/issue-539.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Ftarget%2Fissue-539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Ftarget%2Fissue-539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-539.rs?ref=f23e6aaaf958ee434d677fdc8883543de83f4e0f", "patch": "@@ -0,0 +1,3 @@\n+// rustfmt-normalize_comments: true\n+// FIXME (#3300): Should allow items to be anonymous. Right now\n+// we just use dummy names for anon items."}, {"sha": "adeb33555fb5c04e8378af52527ff3effae6de12", "filename": "tests/target/issue-683.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Ftarget%2Fissue-683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23e6aaaf958ee434d677fdc8883543de83f4e0f/tests%2Ftarget%2Fissue-683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-683.rs?ref=f23e6aaaf958ee434d677fdc8883543de83f4e0f", "patch": "@@ -0,0 +1,3 @@\n+// rustfmt-normalize_comments: true\n+// FIXME (#3300): Should allow items to be anonymous. Right now\n+// we just use dummy names for anon items."}]}