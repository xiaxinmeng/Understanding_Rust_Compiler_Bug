{"sha": "715e3fc1199628f8badb90f918182aca1b074410", "node_id": "C_kwDOAAsO6NoAKDcxNWUzZmMxMTk5NjI4ZjhiYWRiOTBmOTE4MTgyYWNhMWIwNzQ0MTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-23T16:06:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-23T16:06:32Z"}, "message": "Re-export standard semantic token types and mods", "tree": {"sha": "9921175c598a5bb76ec763bd1b8a61a44fbe84bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9921175c598a5bb76ec763bd1b8a61a44fbe84bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/715e3fc1199628f8badb90f918182aca1b074410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/715e3fc1199628f8badb90f918182aca1b074410", "html_url": "https://github.com/rust-lang/rust/commit/715e3fc1199628f8badb90f918182aca1b074410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/715e3fc1199628f8badb90f918182aca1b074410/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dcf4c70c4f6b06eb86a128223321cd526fad10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcf4c70c4f6b06eb86a128223321cd526fad10a", "html_url": "https://github.com/rust-lang/rust/commit/8dcf4c70c4f6b06eb86a128223321cd526fad10a"}], "stats": {"total": 238, "additions": 133, "deletions": 105}, "files": [{"sha": "c48410ed55e98472d4f0bc774703225e80048cad", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 107, "deletions": 79, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/715e3fc1199628f8badb90f918182aca1b074410/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715e3fc1199628f8badb90f918182aca1b074410/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=715e3fc1199628f8badb90f918182aca1b074410", "patch": "@@ -8,102 +8,130 @@ use lsp_types::{\n };\n \n macro_rules! define_semantic_token_types {\n-    ($(($ident:ident, $string:literal)),*$(,)?) => {\n-        $(pub(crate) const $ident: SemanticTokenType = SemanticTokenType::new($string);)*\n+    (\n+        standard {\n+            $($standard:ident),*$(,)?\n+        }\n+        custom {\n+            $(($custom:ident, $string:literal)),*$(,)?\n+        }\n+\n+    ) => {\n+        $(pub(crate) const $standard: SemanticTokenType = SemanticTokenType::$standard;)*\n+        $(pub(crate) const $custom: SemanticTokenType = SemanticTokenType::new($string);)*\n \n         pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n-            SemanticTokenType::CLASS,\n-            SemanticTokenType::COMMENT,\n-            SemanticTokenType::ENUM_MEMBER,\n-            SemanticTokenType::ENUM,\n-            SemanticTokenType::FUNCTION,\n-            SemanticTokenType::INTERFACE,\n-            SemanticTokenType::KEYWORD,\n-            SemanticTokenType::MACRO,\n-            SemanticTokenType::METHOD,\n-            SemanticTokenType::NAMESPACE,\n-            SemanticTokenType::NUMBER,\n-            SemanticTokenType::OPERATOR,\n-            SemanticTokenType::PARAMETER,\n-            SemanticTokenType::PROPERTY,\n-            SemanticTokenType::REGEXP,\n-            SemanticTokenType::STRING,\n-            SemanticTokenType::STRUCT,\n-            SemanticTokenType::TYPE_PARAMETER,\n-            SemanticTokenType::TYPE,\n-            SemanticTokenType::VARIABLE,\n-            SemanticTokenType::DECORATOR,\n-            $($ident),*\n+            $(SemanticTokenType::$standard,)*\n+            $($custom),*\n         ];\n     };\n }\n \n define_semantic_token_types![\n-    (ANGLE, \"angle\"),\n-    (ARITHMETIC, \"arithmetic\"),\n-    (ATTRIBUTE_BRACKET, \"attributeBracket\"),\n-    (BITWISE, \"bitwise\"),\n-    (BOOLEAN, \"boolean\"),\n-    (BRACE, \"brace\"),\n-    (BRACKET, \"bracket\"),\n-    (BUILTIN_ATTRIBUTE, \"builtinAttribute\"),\n-    (BUILTIN_TYPE, \"builtinType\"),\n-    (CHAR, \"character\"),\n-    (COLON, \"colon\"),\n-    (COMMA, \"comma\"),\n-    (COMPARISON, \"comparison\"),\n-    (CONST_PARAMETER, \"constParameter\"),\n-    (DERIVE, \"derive\"),\n-    (DERIVE_HELPER, \"deriveHelper\"),\n-    (DOT, \"dot\"),\n-    (ESCAPE_SEQUENCE, \"escapeSequence\"),\n-    (FORMAT_SPECIFIER, \"formatSpecifier\"),\n-    (GENERIC, \"generic\"),\n-    (LABEL, \"label\"),\n-    (LIFETIME, \"lifetime\"),\n-    (LOGICAL, \"logical\"),\n-    (MACRO_BANG, \"macroBang\"),\n-    (PARENTHESIS, \"parenthesis\"),\n-    (PUNCTUATION, \"punctuation\"),\n-    (SELF_KEYWORD, \"selfKeyword\"),\n-    (SELF_TYPE_KEYWORD, \"selfTypeKeyword\"),\n-    (SEMICOLON, \"semicolon\"),\n-    (TYPE_ALIAS, \"typeAlias\"),\n-    (TOOL_MODULE, \"toolModule\"),\n-    (UNION, \"union\"),\n-    (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n+    standard {\n+        COMMENT,\n+        DECORATOR,\n+        ENUM_MEMBER,\n+        ENUM,\n+        FUNCTION,\n+        INTERFACE,\n+        KEYWORD,\n+        MACRO,\n+        METHOD,\n+        NAMESPACE,\n+        NUMBER,\n+        OPERATOR,\n+        PARAMETER,\n+        PROPERTY,\n+        STRING,\n+        STRUCT,\n+        TYPE_PARAMETER,\n+        VARIABLE,\n+    }\n+\n+    custom {\n+        (ANGLE, \"angle\"),\n+        (ARITHMETIC, \"arithmetic\"),\n+        (ATTRIBUTE, \"attribute\"),\n+        (ATTRIBUTE_BRACKET, \"attributeBracket\"),\n+        (BITWISE, \"bitwise\"),\n+        (BOOLEAN, \"boolean\"),\n+        (BRACE, \"brace\"),\n+        (BRACKET, \"bracket\"),\n+        (BUILTIN_ATTRIBUTE, \"builtinAttribute\"),\n+        (BUILTIN_TYPE, \"builtinType\"),\n+        (CHAR, \"character\"),\n+        (COLON, \"colon\"),\n+        (COMMA, \"comma\"),\n+        (COMPARISON, \"comparison\"),\n+        (CONST_PARAMETER, \"constParameter\"),\n+        (DERIVE, \"derive\"),\n+        (DERIVE_HELPER, \"deriveHelper\"),\n+        (DOT, \"dot\"),\n+        (ESCAPE_SEQUENCE, \"escapeSequence\"),\n+        (FORMAT_SPECIFIER, \"formatSpecifier\"),\n+        (GENERIC, \"generic\"),\n+        (LABEL, \"label\"),\n+        (LIFETIME, \"lifetime\"),\n+        (LOGICAL, \"logical\"),\n+        (MACRO_BANG, \"macroBang\"),\n+        (PARENTHESIS, \"parenthesis\"),\n+        (PUNCTUATION, \"punctuation\"),\n+        (SELF_KEYWORD, \"selfKeyword\"),\n+        (SELF_TYPE_KEYWORD, \"selfTypeKeyword\"),\n+        (SEMICOLON, \"semicolon\"),\n+        (TYPE_ALIAS, \"typeAlias\"),\n+        (TOOL_MODULE, \"toolModule\"),\n+        (UNION, \"union\"),\n+        (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n+    }\n ];\n \n macro_rules! define_semantic_token_modifiers {\n-    ($(($ident:ident, $string:literal)),*$(,)?) => {\n-        $(pub(crate) const $ident: SemanticTokenModifier = SemanticTokenModifier::new($string);)*\n+    (\n+        standard {\n+            $($standard:ident),*$(,)?\n+        }\n+        custom {\n+            $(($custom:ident, $string:literal)),*$(,)?\n+        }\n+\n+    ) => {\n+\n+        $(pub(crate) const $standard: SemanticTokenModifier = SemanticTokenModifier::$standard;)*\n+        $(pub(crate) const $custom: SemanticTokenModifier = SemanticTokenModifier::new($string);)*\n \n         pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n-            SemanticTokenModifier::DOCUMENTATION,\n-            SemanticTokenModifier::DECLARATION,\n-            SemanticTokenModifier::STATIC,\n-            SemanticTokenModifier::DEFAULT_LIBRARY,\n-            $($ident),*\n+            $(SemanticTokenModifier::$standard,)*\n+            $($custom),*\n         ];\n     };\n }\n \n define_semantic_token_modifiers![\n-    (ASYNC, \"async\"),\n-    (ATTRIBUTE_MODIFIER, \"attribute\"),\n-    (CALLABLE, \"callable\"),\n-    (CONSTANT, \"constant\"),\n-    (CONSUMING, \"consuming\"),\n-    (CONTROL_FLOW, \"controlFlow\"),\n-    (CRATE_ROOT, \"crateRoot\"),\n-    (INJECTED, \"injected\"),\n-    (INTRA_DOC_LINK, \"intraDocLink\"),\n-    (LIBRARY, \"library\"),\n-    (MUTABLE, \"mutable\"),\n-    (PUBLIC, \"public\"),\n-    (REFERENCE, \"reference\"),\n-    (TRAIT_MODIFIER, \"trait\"),\n-    (UNSAFE, \"unsafe\"),\n+    standard {\n+        DOCUMENTATION,\n+        DECLARATION,\n+        STATIC,\n+        DEFAULT_LIBRARY,\n+    }\n+    custom {\n+        (ASYNC, \"async\"),\n+        (ATTRIBUTE_MODIFIER, \"attribute\"),\n+        (CALLABLE, \"callable\"),\n+        (CONSTANT, \"constant\"),\n+        (CONSUMING, \"consuming\"),\n+        (CONTROL_FLOW, \"controlFlow\"),\n+        (CRATE_ROOT, \"crateRoot\"),\n+        (INJECTED, \"injected\"),\n+        (INTRA_DOC_LINK, \"intraDocLink\"),\n+        (LIBRARY, \"library\"),\n+        (MUTABLE, \"mutable\"),\n+        (PUBLIC, \"public\"),\n+        (REFERENCE, \"reference\"),\n+        (TRAIT_MODIFIER, \"trait\"),\n+        (UNSAFE, \"unsafe\"),\n+    }\n ];\n \n #[derive(Default)]"}, {"sha": "102cd602950439a4188b5006116353dd164299f8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/715e3fc1199628f8badb90f918182aca1b074410/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715e3fc1199628f8badb90f918182aca1b074410/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=715e3fc1199628f8badb90f918182aca1b074410", "patch": "@@ -558,64 +558,64 @@ fn semantic_token_type_and_modifiers(\n     let mut mods = semantic_tokens::ModifierSet::default();\n     let type_ = match highlight.tag {\n         HlTag::Symbol(symbol) => match symbol {\n-            SymbolKind::Attribute => lsp_types::SemanticTokenType::DECORATOR,\n+            SymbolKind::Attribute => semantic_tokens::DECORATOR,\n             SymbolKind::Derive => semantic_tokens::DERIVE,\n             SymbolKind::DeriveHelper => semantic_tokens::DERIVE_HELPER,\n-            SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n+            SymbolKind::Module => semantic_tokens::NAMESPACE,\n             SymbolKind::Impl => semantic_tokens::TYPE_ALIAS,\n-            SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,\n-            SymbolKind::TypeParam => lsp_types::SemanticTokenType::TYPE_PARAMETER,\n+            SymbolKind::Field => semantic_tokens::PROPERTY,\n+            SymbolKind::TypeParam => semantic_tokens::TYPE_PARAMETER,\n             SymbolKind::ConstParam => semantic_tokens::CONST_PARAMETER,\n             SymbolKind::LifetimeParam => semantic_tokens::LIFETIME,\n             SymbolKind::Label => semantic_tokens::LABEL,\n-            SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,\n+            SymbolKind::ValueParam => semantic_tokens::PARAMETER,\n             SymbolKind::SelfParam => semantic_tokens::SELF_KEYWORD,\n             SymbolKind::SelfType => semantic_tokens::SELF_TYPE_KEYWORD,\n-            SymbolKind::Local => lsp_types::SemanticTokenType::VARIABLE,\n+            SymbolKind::Local => semantic_tokens::VARIABLE,\n             SymbolKind::Function => {\n                 if highlight.mods.contains(HlMod::Associated) {\n-                    lsp_types::SemanticTokenType::METHOD\n+                    semantic_tokens::METHOD\n                 } else {\n-                    lsp_types::SemanticTokenType::FUNCTION\n+                    semantic_tokens::FUNCTION\n                 }\n             }\n             SymbolKind::Const => {\n                 mods |= semantic_tokens::CONSTANT;\n-                mods |= lsp_types::SemanticTokenModifier::STATIC;\n-                lsp_types::SemanticTokenType::VARIABLE\n+                mods |= semantic_tokens::STATIC;\n+                semantic_tokens::VARIABLE\n             }\n             SymbolKind::Static => {\n-                mods |= lsp_types::SemanticTokenModifier::STATIC;\n-                lsp_types::SemanticTokenType::VARIABLE\n+                mods |= semantic_tokens::STATIC;\n+                semantic_tokens::VARIABLE\n             }\n-            SymbolKind::Struct => lsp_types::SemanticTokenType::STRUCT,\n-            SymbolKind::Enum => lsp_types::SemanticTokenType::ENUM,\n-            SymbolKind::Variant => lsp_types::SemanticTokenType::ENUM_MEMBER,\n+            SymbolKind::Struct => semantic_tokens::STRUCT,\n+            SymbolKind::Enum => semantic_tokens::ENUM,\n+            SymbolKind::Variant => semantic_tokens::ENUM_MEMBER,\n             SymbolKind::Union => semantic_tokens::UNION,\n             SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n-            SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n-            SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n+            SymbolKind::Trait => semantic_tokens::INTERFACE,\n+            SymbolKind::Macro => semantic_tokens::MACRO,\n             SymbolKind::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n             SymbolKind::ToolModule => semantic_tokens::TOOL_MODULE,\n         },\n         HlTag::AttributeBracket => semantic_tokens::ATTRIBUTE_BRACKET,\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n-        HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,\n+        HlTag::ByteLiteral | HlTag::NumericLiteral => semantic_tokens::NUMBER,\n         HlTag::CharLiteral => semantic_tokens::CHAR,\n-        HlTag::Comment => lsp_types::SemanticTokenType::COMMENT,\n+        HlTag::Comment => semantic_tokens::COMMENT,\n         HlTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n         HlTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,\n-        HlTag::Keyword => lsp_types::SemanticTokenType::KEYWORD,\n+        HlTag::Keyword => semantic_tokens::KEYWORD,\n         HlTag::None => semantic_tokens::GENERIC,\n         HlTag::Operator(op) => match op {\n             HlOperator::Bitwise => semantic_tokens::BITWISE,\n             HlOperator::Arithmetic => semantic_tokens::ARITHMETIC,\n             HlOperator::Logical => semantic_tokens::LOGICAL,\n             HlOperator::Comparison => semantic_tokens::COMPARISON,\n-            HlOperator::Other => lsp_types::SemanticTokenType::OPERATOR,\n+            HlOperator::Other => semantic_tokens::OPERATOR,\n         },\n-        HlTag::StringLiteral => lsp_types::SemanticTokenType::STRING,\n+        HlTag::StringLiteral => semantic_tokens::STRING,\n         HlTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,\n         HlTag::Punctuation(punct) => match punct {\n             HlPunct::Bracket => semantic_tokens::BRACKET,\n@@ -640,16 +640,16 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::ControlFlow => semantic_tokens::CONTROL_FLOW,\n             HlMod::CrateRoot => semantic_tokens::CRATE_ROOT,\n-            HlMod::DefaultLibrary => lsp_types::SemanticTokenModifier::DEFAULT_LIBRARY,\n-            HlMod::Definition => lsp_types::SemanticTokenModifier::DECLARATION,\n-            HlMod::Documentation => lsp_types::SemanticTokenModifier::DOCUMENTATION,\n+            HlMod::DefaultLibrary => semantic_tokens::DEFAULT_LIBRARY,\n+            HlMod::Definition => semantic_tokens::DECLARATION,\n+            HlMod::Documentation => semantic_tokens::DOCUMENTATION,\n             HlMod::Injected => semantic_tokens::INJECTED,\n             HlMod::IntraDocLink => semantic_tokens::INTRA_DOC_LINK,\n             HlMod::Library => semantic_tokens::LIBRARY,\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Public => semantic_tokens::PUBLIC,\n             HlMod::Reference => semantic_tokens::REFERENCE,\n-            HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,\n+            HlMod::Static => semantic_tokens::STATIC,\n             HlMod::Trait => semantic_tokens::TRAIT_MODIFIER,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n         };"}]}