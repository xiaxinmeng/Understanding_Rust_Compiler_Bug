{"sha": "321c530fadb766c594698be7c83ab7cbc443bf1c", "node_id": "C_kwDOAAsO6NoAKDMyMWM1MzBmYWRiNzY2YzU5NDY5OGJlN2M4M2FiN2NiYzQ0M2JmMWM", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-01-03T18:04:28Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-01-12T17:32:47Z"}, "message": "Don't pass `--sysroot` twice if SYSROOT is set\n\nThis is useful for rust-lang/rust to allow setting a sysroot that's\n*only* for build scripts, different from the regular sysroot passed in\nRUSTFLAGS (since cargo doesn't apply RUSTFLAGS to build scripts or\nproc-macros).\n\nThat said, the exact motivation is not particularly important: this\nfixes a regression from\nhttps://github.com/rust-lang/rust-clippy/pull/9881/commits/5907e9155ed7f1312d108aa2110853472da3b029#r1060215684.\n\nNote that only RUSTFLAGS is tested in the new integration test; passing\n--sysroot through `clippy-driver` never worked as far as I can tell, and\nno one is using it, so I didn't fix it here.", "tree": {"sha": "2eca63c107f0fdd2af615012c9c5f23fbca91ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eca63c107f0fdd2af615012c9c5f23fbca91ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/321c530fadb766c594698be7c83ab7cbc443bf1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmPARD8ACgkQHKDfKvWd\naKVRDhAA02Rqhv7FwFPOJ1+73myQ4uogyAgWqVnfQuH3z/05uEH6Bbomb2B9vtQk\ndqWeQ0+5B7QR4wmzOfvlYKSRQi+3uGoM77py908kSzP71w6MSW9Y6vKkgyPZy2rU\nJC++9lpOaaS11RNHJuUdCt7QtCI/KvDWyaJZPBMMS6EegQKUAjJz1PpoGNKS1AKv\nnV/OFVINdWy+hqdcdazOMl6xYdCznQ0bTLzG1K13f6WazLyGS0tgpCN0uJ+catGy\ndXmi2OnkMbnKaBg21MZoO5vyKQE54Y6iJKLpDwnLHbXy9WKfsEx+voLUhM2P/Hth\n+/OqQQHhsnqdIOy/hS2vzBu0/jPgWEWDZFud8QKuOVKIftvreJ5JbBUaWfniy1aX\nSlIl9e747XdMKe9J1jcTPjvCgHMU6q//LhW3chQ7uZAo2VtGyZ45IdY+KsjOd6X4\nDQm+nhiMc1XhIFiRb2srjl3DvsCr4ooFjBk6ej4qbXPRiaehKZDUXUNxcgWqw9Pi\ntVRnOFpe42ertr6/lipOoLd+CXg9TR+MLSNNLfHg3XgBwtSJ46p7Os03o4VdjayI\n5d4h91oIBkR5J8IBD6/t0KLdm8B0uBBB10pieZaTk8qmdj1/FZTy2PgJZDaSdeyq\nek61z63DvEPaF1u0YXXkt/l99R6dMN3f6SXitPwphkYlTxuHm/Y=\n=mp/n\n-----END PGP SIGNATURE-----", "payload": "tree 2eca63c107f0fdd2af615012c9c5f23fbca91ff6\nparent decaba97cc0e682a7b44b3f06f10ad1a8ebe9cba\nauthor Joshua Nelson <github@jyn.dev> 1672769068 +0000\ncommitter Philipp Krones <hello@philkrones.com> 1673544767 +0100\n\nDon't pass `--sysroot` twice if SYSROOT is set\n\nThis is useful for rust-lang/rust to allow setting a sysroot that's\n*only* for build scripts, different from the regular sysroot passed in\nRUSTFLAGS (since cargo doesn't apply RUSTFLAGS to build scripts or\nproc-macros).\n\nThat said, the exact motivation is not particularly important: this\nfixes a regression from\nhttps://github.com/rust-lang/rust-clippy/pull/9881/commits/5907e9155ed7f1312d108aa2110853472da3b029#r1060215684.\n\nNote that only RUSTFLAGS is tested in the new integration test; passing\n--sysroot through `clippy-driver` never worked as far as I can tell, and\nno one is using it, so I didn't fix it here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/321c530fadb766c594698be7c83ab7cbc443bf1c", "html_url": "https://github.com/rust-lang/rust/commit/321c530fadb766c594698be7c83ab7cbc443bf1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/321c530fadb766c594698be7c83ab7cbc443bf1c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decaba97cc0e682a7b44b3f06f10ad1a8ebe9cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/decaba97cc0e682a7b44b3f06f10ad1a8ebe9cba", "html_url": "https://github.com/rust-lang/rust/commit/decaba97cc0e682a7b44b3f06f10ad1a8ebe9cba"}], "stats": {"total": 102, "additions": 77, "deletions": 25}, "files": [{"sha": "d521e8d883983da345bd4df530e242a97d67f186", "filename": "src/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321c530fadb766c594698be7c83ab7cbc443bf1c/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321c530fadb766c594698be7c83ab7cbc443bf1c/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=321c530fadb766c594698be7c83ab7cbc443bf1c", "patch": "@@ -256,11 +256,14 @@ pub fn main() {\n     LazyLock::force(&ICE_HOOK);\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n+        let has_sysroot_arg = arg_value(&orig_args, \"--sysroot\", |_| true).is_some();\n \n         let sys_root_env = std::env::var(\"SYSROOT\").ok();\n         let pass_sysroot_env_if_given = |args: &mut Vec<String>, sys_root_env| {\n             if let Some(sys_root) = sys_root_env {\n-                args.extend(vec![\"--sysroot\".into(), sys_root]);\n+                if !has_sysroot_arg {\n+                    args.extend(vec![\"--sysroot\".into(), sys_root]);\n+                }\n             };\n         };\n "}, {"sha": "319e8eb2da602bc951bc7c6327e3b6cb4e5305d8", "filename": "tests/integration.rs", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/321c530fadb766c594698be7c83ab7cbc443bf1c/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321c530fadb766c594698be7c83ab7cbc443bf1c/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=321c530fadb766c594698be7c83ab7cbc443bf1c", "patch": "@@ -1,19 +1,42 @@\n+//! To run this test, use\n+//! `env INTEGRATION=rust-lang/log cargo test --test integration --features=integration`\n+//!\n+//! You can use a different `INTEGRATION` value to test different repositories.\n+\n #![cfg(feature = \"integration\")]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use std::env;\n use std::ffi::OsStr;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::{env, eprintln};\n \n #[cfg(not(windows))]\n const CARGO_CLIPPY: &str = \"cargo-clippy\";\n #[cfg(windows)]\n const CARGO_CLIPPY: &str = \"cargo-clippy.exe\";\n \n-#[cfg_attr(feature = \"integration\", test)]\n-fn integration_test() {\n-    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n+// NOTE: arguments passed to the returned command will be `clippy-driver` args, not `cargo-clippy`\n+// args. Use `cargo_args` to pass arguments to cargo-clippy.\n+fn clippy_command(repo_dir: &Path, cargo_args: &[&str]) -> Command {\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = option_env!(\"CARGO_TARGET_DIR\").map_or_else(|| root_dir.join(\"target\"), PathBuf::from);\n+    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(CARGO_CLIPPY);\n+\n+    let mut cargo_clippy = Command::new(clippy_binary);\n+    cargo_clippy\n+        .current_dir(repo_dir)\n+        .env(\"RUST_BACKTRACE\", \"full\")\n+        .env(\"CARGO_TARGET_DIR\", root_dir.join(\"target\"))\n+        .args([\"clippy\", \"--all-targets\", \"--all-features\"])\n+        .args(cargo_args)\n+        .args([\"--\", \"--cap-lints\", \"warn\", \"-Wclippy::pedantic\", \"-Wclippy::nursery\"]);\n+    cargo_clippy\n+}\n+\n+/// Return a directory with a checkout of the repository in `INTEGRATION`.\n+fn repo_dir(repo_name: &str) -> PathBuf {\n     let repo_url = format!(\"https://github.com/{repo_name}\");\n     let crate_name = repo_name\n         .split('/')\n@@ -34,28 +57,19 @@ fn integration_test() {\n         .expect(\"unable to run git\");\n     assert!(st.success());\n \n-    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let target_dir = std::path::Path::new(&root_dir).join(\"target\");\n-    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(CARGO_CLIPPY);\n-\n-    let output = Command::new(clippy_binary)\n-        .current_dir(repo_dir)\n-        .env(\"RUST_BACKTRACE\", \"full\")\n-        .env(\"CARGO_TARGET_DIR\", target_dir)\n-        .args([\n-            \"clippy\",\n-            \"--all-targets\",\n-            \"--all-features\",\n-            \"--\",\n-            \"--cap-lints\",\n-            \"warn\",\n-            \"-Wclippy::pedantic\",\n-            \"-Wclippy::nursery\",\n-        ])\n-        .output()\n-        .expect(\"unable to run clippy\");\n+    repo_dir\n+}\n \n+#[cfg_attr(feature = \"integration\", test)]\n+fn integration_test() {\n+    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n+    let repo_dir = repo_dir(&repo_name);\n+    let output = clippy_command(&repo_dir, &[]).output().expect(\"failed to run clippy\");\n     let stderr = String::from_utf8_lossy(&output.stderr);\n+    if !stderr.is_empty() {\n+        eprintln!(\"{stderr}\");\n+    }\n+\n     if let Some(backtrace_start) = stderr.find(\"error: internal compiler error\") {\n         static BACKTRACE_END_MSG: &str = \"end of query stack\";\n         let backtrace_end = stderr[backtrace_start..]\n@@ -90,3 +104,38 @@ fn integration_test() {\n         None => panic!(\"Process terminated by signal\"),\n     }\n }\n+\n+#[cfg_attr(feature = \"integration\", test)]\n+fn test_sysroot() {\n+    #[track_caller]\n+    fn verify_cmd(cmd: &mut Command) {\n+        // Test that SYSROOT is ignored if `--sysroot` is passed explicitly.\n+        cmd.env(\"SYSROOT\", \"/dummy/value/does/not/exist\");\n+        // We don't actually care about emitting lints, we only want to verify clippy doesn't give a hard\n+        // error.\n+        cmd.arg(\"-Awarnings\");\n+        let output = cmd.output().expect(\"failed to run clippy\");\n+        let stderr = String::from_utf8_lossy(&output.stderr);\n+        assert!(stderr.is_empty(), \"clippy printed an error: {stderr}\");\n+        assert!(output.status.success(), \"clippy exited with an error\");\n+    }\n+\n+    let rustc = std::env::var(\"RUSTC\").unwrap_or(\"rustc\".to_string());\n+    let rustc_output = Command::new(rustc)\n+        .args([\"--print\", \"sysroot\"])\n+        .output()\n+        .expect(\"unable to run rustc\");\n+    assert!(rustc_output.status.success());\n+    let sysroot = String::from_utf8(rustc_output.stdout).unwrap();\n+    let sysroot = sysroot.trim_end();\n+\n+    // This is a fairly small repo; we want to avoid checking out anything heavy twice, so just\n+    // hard-code it.\n+    let repo_name = \"rust-lang/log\";\n+    let repo_dir = repo_dir(repo_name);\n+    // Pass the sysroot through RUSTFLAGS.\n+    verify_cmd(clippy_command(&repo_dir, &[\"--quiet\"]).env(\"RUSTFLAGS\", format!(\"--sysroot={sysroot}\")));\n+    // NOTE: we don't test passing the arguments directly to clippy-driver (with `-- --sysroot`)\n+    // because it breaks for some reason. I (@jyn514) haven't taken time to track down the bug\n+    // because rust-lang/rust uses RUSTFLAGS and nearly no one else uses --sysroot.\n+}"}]}