{"sha": "634cfe3d72e785c843ca5d412b12be137b2e14fb", "node_id": "C_kwDOAAsO6NoAKDYzNGNmZTNkNzJlNzg1Yzg0M2NhNWQ0MTJiMTJiZTEzN2IyZTE0ZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-07T08:50:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-07T08:50:23Z"}, "message": "Auto merge of #12956 - oxalica:feat/la-arena-apis, r=lnicola\n\nMore methods and traits for `la_arena::ArenaMap`\n\nContinue of #12931. Seems that I forgot some methods in the previous PR :(\n\nI also changed `ArenaMap::insert` to return the old value, to match the map-like collection API of std. **So this is a breaking change.**\n\nr? `@lnicola`", "tree": {"sha": "aefdbeb4ecbaa6a34c1226d9e81fa4798dcc1a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefdbeb4ecbaa6a34c1226d9e81fa4798dcc1a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/634cfe3d72e785c843ca5d412b12be137b2e14fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/634cfe3d72e785c843ca5d412b12be137b2e14fb", "html_url": "https://github.com/rust-lang/rust/commit/634cfe3d72e785c843ca5d412b12be137b2e14fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/634cfe3d72e785c843ca5d412b12be137b2e14fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec91252214af203d13c6b6b784bf1e28977ed51", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec91252214af203d13c6b6b784bf1e28977ed51", "html_url": "https://github.com/rust-lang/rust/commit/6ec91252214af203d13c6b6b784bf1e28977ed51"}, {"sha": "326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "html_url": "https://github.com/rust-lang/rust/commit/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "469b28c2d9ede6a8edc9904792215579df6285af", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=634cfe3d72e785c843ca5d412b12be137b2e14fb", "patch": "@@ -451,7 +451,7 @@ impl HasChildSource<LocalTypeOrConstParamId> for GenericDefId {\n         if let GenericDefId::TraitId(id) = *self {\n             let trait_ref = id.lookup(db).source(db).value;\n             let idx = idx_iter.next().unwrap();\n-            params.insert(idx, Either::Right(trait_ref))\n+            params.insert(idx, Either::Right(trait_ref));\n         }\n \n         if let Some(generic_params_list) = generic_params_list {"}, {"sha": "087268a9ecee4f2c3cac07835bb92b13277d7b0e", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=634cfe3d72e785c843ca5d412b12be137b2e14fb", "patch": "@@ -224,7 +224,7 @@ pub(crate) fn field_visibilities_query(\n     let resolver = variant_id.module(db).resolver(db);\n     let mut res = ArenaMap::default();\n     for (field_id, field_data) in var_data.fields().iter() {\n-        res.insert(field_id, field_data.visibility.resolve(db, &resolver))\n+        res.insert(field_id, field_data.visibility.resolve(db, &resolver));\n     }\n     Arc::new(res)\n }"}, {"sha": "239f66bcb7e798f813a0e2d9206f78897a1d0c95", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634cfe3d72e785c843ca5d412b12be137b2e14fb/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=634cfe3d72e785c843ca5d412b12be137b2e14fb", "patch": "@@ -1126,7 +1126,7 @@ pub(crate) fn field_types_query(\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);\n     for (field_id, field_data) in var_data.fields().iter() {\n-        res.insert(field_id, make_binders(db, &generics, ctx.lower_ty(&field_data.type_ref)))\n+        res.insert(field_id, make_binders(db, &generics, ctx.lower_ty(&field_data.type_ref)));\n     }\n     Arc::new(res)\n }"}, {"sha": "5f347e274500eefe7b5fcf0cda0b5d281cf8c040", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/634cfe3d72e785c843ca5d412b12be137b2e14fb/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634cfe3d72e785c843ca5d412b12be137b2e14fb/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=634cfe3d72e785c843ca5d412b12be137b2e14fb", "patch": "@@ -21,12 +21,42 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         Self { v: Vec::with_capacity(capacity), _ty: PhantomData }\n     }\n \n+    /// Reserves capacity for at least additional more elements to be inserted in the map.\n+    pub fn reserve(&mut self, additional: usize) {\n+        self.v.reserve(additional);\n+    }\n+\n+    /// Clears the map, removing all elements.\n+    pub fn clear(&mut self) {\n+        self.v.clear();\n+    }\n+\n+    /// Shrinks the capacity of the map as much as possible.\n+    pub fn shrink_to_fit(&mut self) {\n+        let min_len = self.v.iter().rposition(|slot| slot.is_some()).map_or(0, |i| i + 1);\n+        self.v.truncate(min_len);\n+        self.v.shrink_to_fit();\n+    }\n+\n+    /// Returns whether the map contains a value for the specified index.\n+    pub fn contains_idx(&self, idx: Idx<T>) -> bool {\n+        matches!(self.v.get(Self::to_idx(idx)), Some(Some(_)))\n+    }\n+\n+    /// Removes an index from the map, returning the value at the index if the index was previously in the map.\n+    pub fn remove(&mut self, idx: Idx<T>) -> Option<V> {\n+        self.v.get_mut(Self::to_idx(idx))?.take()\n+    }\n+\n     /// Inserts a value associated with a given arena index into the map.\n-    pub fn insert(&mut self, idx: Idx<T>, t: V) {\n+    ///\n+    /// If the map did not have this index present, None is returned.\n+    /// Otherwise, the value is updated, and the old value is returned.\n+    pub fn insert(&mut self, idx: Idx<T>, t: V) -> Option<V> {\n         let idx = Self::to_idx(idx);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n-        self.v[idx] = Some(t);\n+        self.v[idx].replace(t)\n     }\n \n     /// Returns a reference to the value associated with the provided index\n@@ -94,6 +124,22 @@ impl<T, V> Default for ArenaMap<Idx<V>, T> {\n     }\n }\n \n+impl<T, V> Extend<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n+    fn extend<I: IntoIterator<Item = (Idx<V>, T)>>(&mut self, iter: I) {\n+        iter.into_iter().for_each(move |(k, v)| {\n+            self.insert(k, v);\n+        });\n+    }\n+}\n+\n+impl<T, V> FromIterator<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n+    fn from_iter<I: IntoIterator<Item = (Idx<V>, T)>>(iter: I) -> Self {\n+        let mut this = Self::new();\n+        this.extend(iter);\n+        this\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n ///\n /// This `enum` is constructed from the [`entry`] method on [`ArenaMap`]."}]}