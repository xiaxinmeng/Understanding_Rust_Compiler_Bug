{"sha": "359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWQ3MmI0ZDA0N2MzZWI2ZmExM2IwYWU3YjRhNzQzMmMwYWY3ODU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-04T23:19:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-12T20:26:23Z"}, "message": "Change mod_index_entry to point directly to items and view_items.", "tree": {"sha": "fc28d1b9d339e8433f81334609de9dca77ddfb5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc28d1b9d339e8433f81334609de9dca77ddfb5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "html_url": "https://github.com/rust-lang/rust/commit/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa36777f1da8383cd62be6f75ecdaed283b253d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa36777f1da8383cd62be6f75ecdaed283b253d", "html_url": "https://github.com/rust-lang/rust/commit/2aa36777f1da8383cd62be6f75ecdaed283b253d"}], "stats": {"total": 124, "additions": 66, "deletions": 58}, "files": [{"sha": "c8e36dde698c139f9b7580033f8c78cecfa01d4c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "patch": "@@ -1,6 +1,7 @@\n \n import std.map.hashmap;\n import std.option;\n+import std._vec;\n import util.common.span;\n import util.common.spanned;\n import util.common.ty_mach;\n@@ -213,9 +214,9 @@ type _obj = rec(vec[obj_field] fields,\n \n \n tag mod_index_entry {\n-    mie_view_item(uint);\n-    mie_item(uint);\n-    mie_tag_variant(uint /* tag item index */, uint /* variant index */);\n+    mie_view_item(@view_item);\n+    mie_item(@item);\n+    mie_tag_variant(@item /* tag item */, uint /* variant index */);\n }\n \n type mod_index = hashmap[ident,mod_index_entry];\n@@ -242,6 +243,47 @@ tag item_ {\n     item_obj(ident, _obj, vec[ty_param], def_id, ann);\n }\n \n+fn index_view_item(mod_index index, @view_item it) {\n+    alt (it.node) {\n+        case(ast.view_item_use(?id, _, _)) {\n+            index.insert(id, ast.mie_view_item(it));\n+        }\n+        case(ast.view_item_import(?ids,_)) {\n+            auto len = _vec.len[ast.ident](ids);\n+            auto last_id = ids.(len - 1u);\n+            index.insert(last_id, ast.mie_view_item(it));\n+        }\n+    }\n+}\n+\n+fn index_item(mod_index index, @item it) {\n+    alt (it.node) {\n+        case (ast.item_const(?id, _, _, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n+        case (ast.item_fn(?id, _, _, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n+        case (ast.item_mod(?id, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n+        case (ast.item_ty(?id, _, _, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n+        case (ast.item_tag(?id, ?variants, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+            let uint variant_idx = 0u;\n+            for (ast.variant v in variants) {\n+                index.insert(v.name,\n+                             ast.mie_tag_variant(it, variant_idx));\n+                variant_idx += 1u;\n+            }\n+        }\n+        case (ast.item_obj(?id, _, _, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n+    }\n+}\n \n //\n // Local Variables:"}, {"sha": "5428510dfcea55715101490370407ab4afbb4163", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 8, "deletions": 46, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "patch": "@@ -1418,44 +1418,16 @@ impure fn parse_item_obj(parser p, ast.layer lyr) -> @ast.item {\n     ret @spanned(lo, meths.span, item);\n }\n \n-fn index_mod_item(@ast.item item, ast.mod_index index, uint u) {\n-    alt (item.node) {\n-        case (ast.item_const(?id, _, _, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-        }\n-        case (ast.item_fn(?id, _, _, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-        }\n-        case (ast.item_mod(?id, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-        }\n-        case (ast.item_ty(?id, _, _, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-        }\n-        case (ast.item_tag(?id, ?variants, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-            let uint variant_idx = 0u;\n-            for (ast.variant v in variants) {\n-                index.insert(v.name, ast.mie_tag_variant(u, variant_idx));\n-                variant_idx += 1u;\n-            }\n-        }\n-        case (ast.item_obj(?id, _, _, _, _)) {\n-            index.insert(id, ast.mie_item(u));\n-        }\n-    }\n-}\n-\n impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n     auto index = new_str_hash[ast.mod_index_entry]();\n     auto view_items = parse_view(p, index);\n-    let uint u = 0u;\n     let vec[@ast.item] items = vec();\n     while (p.peek() != term) {\n         auto item = parse_item(p);\n         items += vec(item);\n-        index_mod_item(item, index, u);\n-        u += 1u;\n+\n+        // Index the item.\n+        ast.index_item(index, item);\n     }\n     ret rec(view_items=view_items, items=items, index=index);\n }\n@@ -1760,21 +1732,11 @@ fn is_use_or_import(token.token t) -> bool {\n \n impure fn parse_view(parser p, ast.mod_index index) -> vec[@ast.view_item] {\n     let vec[@ast.view_item] items = vec();\n-    let uint u = 0u;\n     while (is_use_or_import(p.peek())) {\n         auto item = parse_use_or_import(p);\n         items += vec(item);\n-        alt (item.node) {\n-            case(ast.view_item_use(?id, _, _)) {\n-                index.insert(id, ast.mie_view_item(u));\n-            }\n-            case(ast.view_item_import(?ids,_)) {\n-                auto len = _vec.len[ast.ident](ids);\n-                auto last_id = ids.(len - 1u);\n-                index.insert(last_id, ast.mie_view_item(u));\n-            }\n-        }\n-        u = u + 1u;\n+\n+        ast.index_view_item(index, item);\n     }\n     ret items;\n }\n@@ -1801,7 +1763,7 @@ impure fn parse_crate_directive(str prefix, parser p,\n     alt (p.peek()) {\n         case (token.CONST) {\n             auto c = parse_item_const(p);\n-            index_mod_item(c, index, _vec.len[@ast.item](items));\n+            ast.index_item(index, c);\n             append[@ast.item](items, c);\n          }\n         case (token.MOD) {\n@@ -1834,7 +1796,7 @@ impure fn parse_crate_directive(str prefix, parser p,\n                     auto m0 = parse_mod_items(p0, token.EOF);\n                     auto im = ast.item_mod(id, m0, p.next_def_id());\n                     auto i = @spanned(lo, hi, im);\n-                    index_mod_item(i, index, _vec.len[@ast.item](items));\n+                    ast.index_item(index, i);\n                     append[@ast.item](items, i);\n                 }\n \n@@ -1848,7 +1810,7 @@ impure fn parse_crate_directive(str prefix, parser p,\n                     expect(p, token.RBRACE);\n                     auto im = ast.item_mod(id, m0, p.next_def_id());\n                     auto i = @spanned(lo, hi, im);\n-                    index_mod_item(i, index, _vec.len[@ast.item](items));\n+                    ast.index_item(index, i);\n                     append[@ast.item](items, i);\n                 }\n "}, {"sha": "4adf5ff9887754d8da8b8eca86d8b4a84ea589e4", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "patch": "@@ -779,14 +779,18 @@ fn fold_mod[ENV](&ENV e, ast_fold[ENV] fld, &ast._mod m) -> ast._mod {\n \n     let vec[@view_item] view_items = vec();\n     let vec[@item] items = vec();\n-    auto index = m.index;\n+    auto index = new_str_hash[ast.mod_index_entry]();\n \n     for (@view_item vi in m.view_items) {\n-        append[@view_item](view_items, fold_view_item[ENV](e, fld, vi));\n+        auto new_vi = fold_view_item[ENV](e, fld, vi);\n+        append[@view_item](view_items, new_vi);\n+        ast.index_view_item(index, new_vi);\n     }\n \n     for (@item i in m.items) {\n-        append[@item](items, fold_item[ENV](e, fld, i));\n+        auto new_item = fold_item[ENV](e, fld, i);\n+        append[@item](items, new_item);\n+        ast.index_item(index, new_item);\n     }\n \n     ret fld.fold_mod(e, rec(view_items=view_items, items=items, index=index));"}, {"sha": "e3b3c5a7a32e5ca0c82e91039c475c260706c897", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d72b4d047c3eb6fa13b0ae7b4a7432c0af785/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=359d72b4d047c3eb6fa13b0ae7b4a7432c0af785", "patch": "@@ -166,14 +166,14 @@ fn lookup_name(&env e, option.t[import_map] index,\n         alt (m.index.find(i)) {\n             case (some[ast.mod_index_entry](?ent)) {\n                 alt (ent) {\n-                    case (ast.mie_view_item(?ix)) {\n-                        ret found_def_view(e, index, m.view_items.(ix));\n+                    case (ast.mie_view_item(?view_item)) {\n+                        ret found_def_view(e, index, view_item);\n                     }\n-                    case (ast.mie_item(?ix)) {\n-                        ret found_def_item(m.items.(ix));\n+                    case (ast.mie_item(?item)) {\n+                        ret found_def_item(item);\n                     }\n-                    case (ast.mie_tag_variant(?item_idx, ?variant_idx)) {\n-                        alt (m.items.(item_idx).node) {\n+                    case (ast.mie_tag_variant(?item, ?variant_idx)) {\n+                        alt (item.node) {\n                             case (ast.item_tag(_, ?variants, _, ?tid)) {\n                                 auto vid = variants.(variant_idx).id;\n                                 auto t = ast.def_variant(tid, vid);"}]}