{"sha": "99345d8d17f3045d27def1bae9c02c9b72298370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MzQ1ZDhkMTdmMzA0NWQyN2RlZjFiYWU5YzAyYzliNzIyOTgzNzA=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-28T08:41:26Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-28T08:44:12Z"}, "message": "Fixed MemoryMap on Windows.", "tree": {"sha": "74b3c2fd91ce6ded624cc9ca09c053a30f6ca1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b3c2fd91ce6ded624cc9ca09c053a30f6ca1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99345d8d17f3045d27def1bae9c02c9b72298370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99345d8d17f3045d27def1bae9c02c9b72298370", "html_url": "https://github.com/rust-lang/rust/commit/99345d8d17f3045d27def1bae9c02c9b72298370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99345d8d17f3045d27def1bae9c02c9b72298370/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546e2ae850c17478330fb0f8c3cdcc464b43aaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/546e2ae850c17478330fb0f8c3cdcc464b43aaf0", "html_url": "https://github.com/rust-lang/rust/commit/546e2ae850c17478330fb0f8c3cdcc464b43aaf0"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "07e0b0857a181984ac64220e41eaf2b411e5be91", "filename": "src/libstd/os.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/99345d8d17f3045d27def1bae9c02c9b72298370/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99345d8d17f3045d27def1bae9c02c9b72298370/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=99345d8d17f3045d27def1bae9c02c9b72298370", "patch": "@@ -1418,12 +1418,12 @@ pub fn page_size() -> uint {\n pub fn page_size() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n \n-  unsafe {\n-    let mut info = libc::SYSTEM_INFO::new();\n-    libc::GetSystemInfo(&mut info);\n+    unsafe {\n+        let mut info = libc::SYSTEM_INFO::new();\n+        libc::GetSystemInfo(&mut info);\n \n-    return info.dwPageSize as uint;\n-  }\n+        return info.dwPageSize as uint;\n+    }\n }\n \n pub struct MemoryMap {\n@@ -1458,7 +1458,6 @@ pub enum MapError {\n     // Windows-specific errors\n     ErrUnsupProt,\n     ErrUnsupOffset,\n-    ErrNeedRW,\n     ErrAlreadyExists,\n     ErrVirtualAlloc(uint),\n     ErrCreateFileMappingW(uint),\n@@ -1477,7 +1476,6 @@ impl to_str::ToStr for MapError {\n             ErrUnknown(code) => fmt!(\"Unknown error=%?\", code),\n             ErrUnsupProt => ~\"Protection mode unsupported\",\n             ErrUnsupOffset => ~\"Offset in virtual memory mode is unsupported\",\n-            ErrNeedRW => ~\"File mapping should be at least readable/writable\",\n             ErrAlreadyExists => ~\"File mapping for specified file already exists\",\n             ErrVirtualAlloc(code) => fmt!(\"VirtualAlloc failure=%?\", code),\n             ErrCreateFileMappingW(code) => fmt!(\"CreateFileMappingW failure=%?\", code),\n@@ -1542,6 +1540,10 @@ impl MemoryMap {\n             })\n         }\n     }\n+\n+    pub fn granularity() -> uint {\n+        page_size()\n+    }\n }\n \n #[cfg(unix)]\n@@ -1617,21 +1619,21 @@ impl MemoryMap {\n                 })\n             }\n         } else {\n-            let dwDesiredAccess = match (readable, writable) {\n-                (true, true) => libc::FILE_MAP_ALL_ACCESS,\n-                (true, false) => libc::FILE_MAP_READ,\n-                (false, true) => libc::FILE_MAP_WRITE,\n-                _ => {\n-                    return Err(ErrNeedRW);\n-                }\n+            let dwDesiredAccess = match (executable, readable, writable) {\n+                (false, true, false) => libc::FILE_MAP_READ,\n+                (false, true, true) => libc::FILE_MAP_WRITE,\n+                (true, true, false) => libc::FILE_MAP_READ | libc::FILE_MAP_EXECUTE,\n+                (true, true, true) => libc::FILE_MAP_WRITE | libc::FILE_MAP_EXECUTE,\n+                _ => return Err(ErrUnsupProt) // Actually, because of the check above,\n+                                              // we should never get here.\n             };\n             unsafe {\n                 let hFile = libc::get_osfhandle(fd) as HANDLE;\n                 let mapping = libc::CreateFileMappingW(hFile,\n                                                        ptr::mut_null(),\n                                                        flProtect,\n-                                                       (len >> 32) as DWORD,\n-                                                       (len & 0xffff_ffff) as DWORD,\n+                                                       0,\n+                                                       0,\n                                                        ptr::null());\n                 if mapping == ptr::mut_null() {\n                     return Err(ErrCreateFileMappingW(errno()));\n@@ -1641,7 +1643,7 @@ impl MemoryMap {\n                 }\n                 let r = libc::MapViewOfFile(mapping,\n                                             dwDesiredAccess,\n-                                            (offset >> 32) as DWORD,\n+                                            ((len as u64) >> 32) as DWORD,\n                                             (offset & 0xffff_ffff) as DWORD,\n                                             0);\n                 match r as uint {\n@@ -1655,6 +1657,19 @@ impl MemoryMap {\n             }\n         }\n     }\n+\n+    /// Granularity of MapAddr() and MapOffset() parameter values.\n+    /// This may be greater than the value returned by page_size().\n+    pub fn granularity() -> uint {\n+        #[fixed_stack_segment]; #[inline(never)];\n+\n+        unsafe {\n+            let mut info = libc::SYSTEM_INFO::new();\n+            libc::GetSystemInfo(&mut info);\n+\n+            return info.dwAllocationGranularity as uint;\n+        }\n+    }\n }\n \n #[cfg(windows)]\n@@ -1663,20 +1678,22 @@ impl Drop for MemoryMap {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::{LPCVOID, HANDLE};\n+        use libc::consts::os::extra::FALSE;\n \n         unsafe {\n             match self.kind {\n-                MapVirtual => match libc::VirtualFree(self.data as *mut c_void,\n-                                                      self.len,\n-                                                      libc::MEM_RELEASE) {\n-                    0 => error!(fmt!(\"VirtualFree failed: %?\", errno())),\n-                    _ => ()\n+                MapVirtual => {\n+                    if libc::VirtualFree(self.data as *mut c_void,\n+                                         self.len,\n+                                         libc::MEM_RELEASE) == FALSE {\n+                        error!(fmt!(\"VirtualFree failed: %?\", errno()));\n+                    }\n                 },\n                 MapFile(mapping) => {\n-                    if libc::UnmapViewOfFile(self.data as LPCVOID) != 0 {\n+                    if libc::UnmapViewOfFile(self.data as LPCVOID) == FALSE {\n                         error!(fmt!(\"UnmapViewOfFile failed: %?\", errno()));\n                     }\n-                    if libc::CloseHandle(mapping as HANDLE) != 0 {\n+                    if libc::CloseHandle(mapping as HANDLE) == FALSE {\n                         error!(fmt!(\"CloseHandle failed: %?\", errno()));\n                     }\n                 }\n@@ -2108,7 +2125,7 @@ mod tests {\n         }\n \n         let path = tmpdir().push(\"mmap_file.tmp\");\n-        let size = page_size() * 2;\n+        let size = MemoryMap::granularity() * 2;\n         remove_file(&path);\n \n         let fd = unsafe {"}]}