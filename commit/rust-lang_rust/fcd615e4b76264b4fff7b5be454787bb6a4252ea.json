{"sha": "fcd615e4b76264b4fff7b5be454787bb6a4252ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDYxNWU0Yjc2MjY0YjRmZmY3YjViZTQ1NDc4N2JiNmE0MjUyZWE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-05T22:10:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T10:15:25Z"}, "message": "Extract project model to separate crate", "tree": {"sha": "112d17480bd065551a9d18c21ab51326f3e3a295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112d17480bd065551a9d18c21ab51326f3e3a295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd615e4b76264b4fff7b5be454787bb6a4252ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd615e4b76264b4fff7b5be454787bb6a4252ea", "html_url": "https://github.com/rust-lang/rust/commit/fcd615e4b76264b4fff7b5be454787bb6a4252ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd615e4b76264b4fff7b5be454787bb6a4252ea/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34398a8756b56c323d3b4b2ef32fbca32d88a105", "url": "https://api.github.com/repos/rust-lang/rust/commits/34398a8756b56c323d3b4b2ef32fbca32d88a105", "html_url": "https://github.com/rust-lang/rust/commit/34398a8756b56c323d3b4b2ef32fbca32d88a105"}], "stats": {"total": 162, "additions": 109, "deletions": 53}, "files": [{"sha": "2f6a132a5f31ac384669a598cbec1410b3a1fedf", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -1008,7 +1008,6 @@ dependencies = [\n name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1021,6 +1020,7 @@ dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n+ \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"ra_vfs 0.1.0\",\n@@ -1045,6 +1045,20 @@ dependencies = [\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_project_model\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n+ \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ra_syntax\"\n version = \"0.1.0\""}, {"sha": "f46d7789309e14fcdcdc8e6e935672f81bfa2a96", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -19,7 +19,6 @@ url_serde = \"0.2.0\"\n lsp-types = \"0.55.0\"\n walkdir = \"2.2.7\"\n im = \"12.0.0\"\n-cargo_metadata = \"0.7.0\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n \n@@ -30,6 +29,7 @@ ra_ide_api = { path = \"../ra_ide_api\" }\n ra_arena = { path = \"../ra_arena\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_vfs = { path = \"../ra_vfs\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "6800eb1388cf3b38bf1bf5c107e8572288c3f437", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -1,34 +1,13 @@\n-mod cargo_workspace;\n-mod sysroot;\n+use std::path::PathBuf;\n \n-use std::path::{Path, PathBuf};\n-\n-use failure::bail;\n use thread_worker::{WorkerHandle, Worker};\n \n use crate::Result;\n \n-pub use crate::project_model::{\n-    cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n-    sysroot::Sysroot,\n+pub use ra_project_model::{\n+    ProjectWorkspace, CargoWorkspace, Package, Target, TargetKind, Sysroot,\n };\n \n-#[derive(Debug, Clone)]\n-pub struct ProjectWorkspace {\n-    pub(crate) cargo: CargoWorkspace,\n-    pub(crate) sysroot: Sysroot,\n-}\n-\n-impl ProjectWorkspace {\n-    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n-        let cargo_toml = find_cargo_toml(path)?;\n-        let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n-        let sysroot = Sysroot::discover(&cargo_toml)?;\n-        let res = ProjectWorkspace { cargo, sysroot };\n-        Ok(res)\n-    }\n-}\n-\n pub fn workspace_loader() -> (Worker<PathBuf, Result<ProjectWorkspace>>, WorkerHandle) {\n     thread_worker::spawn::<PathBuf, Result<ProjectWorkspace>, _>(\n         \"workspace loader\",\n@@ -42,18 +21,3 @@ pub fn workspace_loader() -> (Worker<PathBuf, Result<ProjectWorkspace>>, WorkerH\n         },\n     )\n }\n-\n-fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n-    if path.ends_with(\"Cargo.toml\") {\n-        return Ok(path.to_path_buf());\n-    }\n-    let mut curr = Some(path);\n-    while let Some(path) = curr {\n-        let candidate = path.join(\"Cargo.toml\");\n-        if candidate.exists() {\n-            return Ok(candidate);\n-        }\n-        curr = path.parent();\n-    }\n-    bail!(\"can't find Cargo.toml at {}\", path.display())\n-}"}, {"sha": "5215e523265659fc7f38b98c745edd18580abaa8", "filename": "crates/ra_project_model/Cargo.toml", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -0,0 +1,30 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_project_model\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+# itertools = \"0.8.0\"\n+# join_to_string = \"0.1.3\"\n+# log = \"0.4.5\"\n+# relative-path = \"0.4.0\"\n+# rayon = \"1.0.2\"\n+# fst = \"0.3.1\"\n+rustc-hash = \"1.0\"\n+# parking_lot = \"0.7.0\"\n+# unicase = \"2.2.0\"\n+\n+# TODO get rid of these?\n+failure = \"0.1.4\"\n+failure_derive = \"0.1.4\"\n+\n+smol_str = { version = \"0.1.9\", features = [\"serde\"] }\n+walkdir = \"2.2.7\"\n+\n+cargo_metadata = \"0.7.0\"\n+\n+ra_arena = { path = \"../ra_arena\" }\n+\n+[dev-dependencies]\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "f3e67d0e54ad89766f1740758bb09b0d28c14f26", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -1,17 +1,17 @@\n use std::path::{Path, PathBuf};\n \n use cargo_metadata::{MetadataCommand, CargoOpt};\n-use ra_syntax::SmolStr;\n+use smol_str::SmolStr;\n use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n use failure::format_err;\n \n use crate::Result;\n \n-/// `CargoWorksapce` represents the logical structure of, well, a Cargo\n+/// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n-/// Note that internally, rust analyzer uses a differnet structure:\n+/// Note that internally, rust analyzer uses a different structure:\n /// `CrateGraph`. `CrateGraph` is lower-level: it knows only about the crates,\n /// while this knows about `Pacakges` & `Targets`: purely cargo-related\n /// concepts.\n@@ -162,9 +162,11 @@ impl CargoWorkspace {\n \n         Ok(CargoWorkspace { packages, targets })\n     }\n+\n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + 'a {\n         self.packages.iter().map(|(id, _pkg)| id)\n     }\n+\n     pub fn target_by_root(&self, root: &Path) -> Option<Target> {\n         self.packages().filter_map(|pkg| pkg.targets(self).find(|it| it.root(self) == root)).next()\n     }", "previous_filename": "crates/ra_lsp_server/src/project_model/cargo_workspace.rs"}, {"sha": "3a7bbace75fca91aa9eabc84779c357884adb703", "filename": "crates/ra_project_model/src/lib.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -0,0 +1,45 @@\n+mod cargo_workspace;\n+mod sysroot;\n+\n+use std::path::{Path, PathBuf};\n+\n+use failure::bail;\n+\n+pub use crate::{\n+    cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n+    sysroot::Sysroot,\n+};\n+\n+// TODO use own error enum?\n+pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+\n+#[derive(Debug, Clone)]\n+pub struct ProjectWorkspace {\n+    pub cargo: CargoWorkspace,\n+    pub sysroot: Sysroot,\n+}\n+\n+impl ProjectWorkspace {\n+    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n+        let cargo_toml = find_cargo_toml(path)?;\n+        let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n+        let sysroot = Sysroot::discover(&cargo_toml)?;\n+        let res = ProjectWorkspace { cargo, sysroot };\n+        Ok(res)\n+    }\n+}\n+\n+fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+    if path.ends_with(\"Cargo.toml\") {\n+        return Ok(path.to_path_buf());\n+    }\n+    let mut curr = Some(path);\n+    while let Some(path) = curr {\n+        let candidate = path.join(\"Cargo.toml\");\n+        if candidate.exists() {\n+            return Ok(candidate);\n+        }\n+        curr = path.parent();\n+    }\n+    bail!(\"can't find Cargo.toml at {}\", path.display())\n+}"}, {"sha": "18824dbe57545fcf176477dc965e05078835a942", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -3,7 +3,8 @@ use std::{\n     process::Command,\n };\n \n-use ra_syntax::SmolStr;\n+use smol_str::SmolStr;\n+\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::Result;\n@@ -25,15 +26,15 @@ struct SysrootCrateData {\n }\n \n impl Sysroot {\n-    pub(crate) fn std(&self) -> Option<SysrootCrate> {\n+    pub fn std(&self) -> Option<SysrootCrate> {\n         self.by_name(\"std\")\n     }\n \n-    pub(crate) fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + 'a {\n+    pub fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + 'a {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub(super) fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n+    pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n         let rustc_output = Command::new(\"rustc\")\n             .current_dir(cargo_toml.parent().unwrap())\n             .args(&[\"--print\", \"sysroot\"])\n@@ -80,16 +81,16 @@ impl Sysroot {\n }\n \n impl SysrootCrate {\n-    pub(crate) fn name(self, sysroot: &Sysroot) -> &SmolStr {\n+    pub fn name(self, sysroot: &Sysroot) -> &SmolStr {\n         &sysroot.crates[self].name\n     }\n-    pub(crate) fn root(self, sysroot: &Sysroot) -> &Path {\n+    pub fn root(self, sysroot: &Sysroot) -> &Path {\n         sysroot.crates[self].root.as_path()\n     }\n-    pub(crate) fn root_dir(self, sysroot: &Sysroot) -> &Path {\n+    pub fn root_dir(self, sysroot: &Sysroot) -> &Path {\n         self.root(sysroot).parent().unwrap()\n     }\n-    pub(crate) fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n+    pub fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n         sysroot.crates[self].deps.iter().map(|&it| it)\n     }\n }", "previous_filename": "crates/ra_lsp_server/src/project_model/sysroot.rs"}, {"sha": "7c7a85a75c4d470adaba5b4a75cac11377881174", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcd615e4b76264b4fff7b5be454787bb6a4252ea/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=fcd615e4b76264b4fff7b5be454787bb6a4252ea", "patch": "@@ -15,7 +15,7 @@ drop_bomb = \"0.1.4\"\n parking_lot = \"0.7.0\"\n rowan = \"0.3.3\"\n \n-# ideally, `serde` should be enabled by `ra_lsp_serder`, but we enable it here\n+# ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations\n text_unit = { version = \"0.1.6\", features = [\"serde\"] }\n smol_str = { version = \"0.1.9\", features = [\"serde\"] }"}]}