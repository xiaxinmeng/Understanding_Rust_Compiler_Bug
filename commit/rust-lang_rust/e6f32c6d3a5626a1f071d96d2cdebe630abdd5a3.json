{"sha": "e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjMyYzZkM2E1NjI2YTFmMDcxZDk2ZDJjZGViZTYzMGFiZGQ1YTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T19:54:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T22:10:07Z"}, "message": "fast path for disabled profiler", "tree": {"sha": "6d2d34a7aa9a67224b1418c15076bd62e5cf1de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2d34a7aa9a67224b1418c15076bd62e5cf1de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "html_url": "https://github.com/rust-lang/rust/commit/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a4099ea7d882e5d5f62c373ccf7b8af23e09c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a4099ea7d882e5d5f62c373ccf7b8af23e09c5", "html_url": "https://github.com/rust-lang/rust/commit/30a4099ea7d882e5d5f62c373ccf7b8af23e09c5"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "121a62813d6b20f7819e9d431b9a345eb324d3af", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "patch": "@@ -6,7 +6,7 @@ use std::iter::repeat;\n use std::collections::{HashSet};\n use std::default::Default;\n use std::iter::FromIterator;\n-use std::sync::RwLock;\n+use std::sync::{RwLock, atomic::{AtomicBool, Ordering}};\n use lazy_static::lazy_static;\n \n /// Set profiling filter. It specifies descriptions allowed to profile.\n@@ -24,6 +24,7 @@ use lazy_static::lazy_static;\n /// ```\n ///\n pub fn set_filter(f: Filter) {\n+    PROFILING_ENABLED.store(f.depth > 0, Ordering::SeqCst);\n     let set = HashSet::from_iter(f.allowed.iter().cloned());\n     let mut old = FILTER.write().unwrap();\n     let filter_data = FilterData { depth: f.depth, allowed: set, version: old.version + 1 };\n@@ -62,6 +63,11 @@ pub fn set_filter(f: Filter) {\n /// ```\n ///\n pub fn profile(desc: &str) -> Profiler {\n+    assert!(!desc.is_empty());\n+    if !PROFILING_ENABLED.load(Ordering::Relaxed) {\n+        return Profiler { desc: None };\n+    }\n+\n     PROFILE_STACK.with(|stack| {\n         let mut stack = stack.borrow_mut();\n         if stack.starts.len() == 0 {\n@@ -74,14 +80,14 @@ pub fn profile(desc: &str) -> Profiler {\n                 Err(_) => (),\n             };\n         }\n-        let desc_str = desc.to_string();\n-        if desc_str.is_empty() {\n-            Profiler { desc: None }\n-        } else if stack.starts.len() < stack.filter_data.depth\n-            && stack.filter_data.allowed.contains(&desc_str)\n-        {\n+\n+        if stack.starts.len() > stack.filter_data.depth {\n+            return Profiler { desc: None };\n+        }\n+\n+        if stack.filter_data.allowed.is_empty() || stack.filter_data.allowed.contains(desc) {\n             stack.starts.push(Instant::now());\n-            Profiler { desc: Some(desc_str) }\n+            Profiler { desc: Some(desc.to_string()) }\n         } else {\n             Profiler { desc: None }\n         }\n@@ -128,6 +134,8 @@ struct FilterData {\n     allowed: HashSet<String>,\n }\n \n+static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n+\n lazy_static! {\n     static ref FILTER: RwLock<FilterData> = RwLock::new(Default::default());\n }"}]}