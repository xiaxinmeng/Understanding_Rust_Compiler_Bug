{"sha": "3752958e4029e9d9cfb1ff020e92142b53fb810f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTI5NThlNDAyOWU5ZDljZmIxZmYwMjBlOTIxNDJiNTNmYjgxMGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-26T20:30:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-26T20:53:52Z"}, "message": "syntax: Remove support for #[should_fail]\n\nThis attribute has been deprecated in favor of #[should_panic]. This also\nupdates rustdoc to no longer accept the `should_fail` directive and instead\nrenames it to `should_panic`.", "tree": {"sha": "d87fa6b5d90a8df3b9be713860800963ec5982c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87fa6b5d90a8df3b9be713860800963ec5982c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3752958e4029e9d9cfb1ff020e92142b53fb810f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3752958e4029e9d9cfb1ff020e92142b53fb810f", "html_url": "https://github.com/rust-lang/rust/commit/3752958e4029e9d9cfb1ff020e92142b53fb810f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3752958e4029e9d9cfb1ff020e92142b53fb810f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557d4346a26266d2eb13f6b0adf106b8873b0da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/557d4346a26266d2eb13f6b0adf106b8873b0da1", "html_url": "https://github.com/rust-lang/rust/commit/557d4346a26266d2eb13f6b0adf106b8873b0da1"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "43b49c09ae4ac7ace50eaee3c728c9d0059a7a77", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -352,7 +352,7 @@ Here\u2019s an example of documenting a macro:\n /// # }\n /// ```\n ///\n-/// ```should_fail\n+/// ```should_panic\n /// # #[macro_use] extern crate foo;\n /// # fn main() {\n /// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);"}, {"sha": "623fcc56e6a2d63b3ad853fb2af65d2bd2dbbbfa", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -320,7 +320,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.expect(\"the world is ending\"), \"value\");\n     /// ```\n     ///\n-    /// ```{.should_fail}\n+    /// ```{.should_panic}\n     /// let x: Option<&str> = None;\n     /// x.expect(\"the world is ending\"); // panics with `world is ending`\n     /// ```\n@@ -352,7 +352,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.unwrap(), \"air\");\n     /// ```\n     ///\n-    /// ```{.should_fail}\n+    /// ```{.should_panic}\n     /// let x: Option<&str> = None;\n     /// assert_eq!(x.unwrap(), \"air\"); // fails\n     /// ```"}, {"sha": "6b25bbdb0bb6856bdf0b08ea27abd9be4e2d7503", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -762,7 +762,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// assert_eq!(x.unwrap(), 2);\n     /// ```\n     ///\n-    /// ```{.should_fail}\n+    /// ```{.should_panic}\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n@@ -788,7 +788,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// ```{.should_fail}\n+    /// ```{.should_panic}\n     /// let x: Result<u32, &str> = Ok(2);\n     /// x.unwrap_err(); // panics with `2`\n     /// ```"}, {"sha": "8022f2d466f78efa7cae4934d240d9496920e5e9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -356,7 +356,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             });\n             let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n             tests.add_test(text.to_string(),\n-                           block_info.should_fail, block_info.no_run,\n+                           block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness);\n         }\n     }\n@@ -397,7 +397,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n \n #[derive(Eq, PartialEq, Clone, Debug)]\n struct LangString {\n-    should_fail: bool,\n+    should_panic: bool,\n     no_run: bool,\n     ignore: bool,\n     rust: bool,\n@@ -407,7 +407,7 @@ struct LangString {\n impl LangString {\n     fn all_false() -> LangString {\n         LangString {\n-            should_fail: false,\n+            should_panic: false,\n             no_run: false,\n             ignore: false,\n             rust: true,  // NB This used to be `notrust = false`\n@@ -427,7 +427,7 @@ impl LangString {\n         for token in tokens {\n             match token {\n                 \"\" => {},\n-                \"should_fail\" => { data.should_fail = true; seen_rust_tags = true; },\n+                \"should_panic\" => { data.should_panic = true; seen_rust_tags = true; },\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = true; },\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = true; },\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; },\n@@ -528,26 +528,26 @@ mod tests {\n     #[test]\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n-            should_fail: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool) {\n+            should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool) {\n             assert_eq!(LangString::parse(s), LangString {\n-                should_fail: should_fail,\n+                should_panic: should_panic,\n                 no_run: no_run,\n                 ignore: ignore,\n                 rust: rust,\n                 test_harness: test_harness,\n             })\n         }\n \n-        // marker                | should_fail | no_run | ignore | rust | test_harness\n+        // marker                | should_panic| no_run | ignore | rust | test_harness\n         t(\"\",                      false,        false,   false,   true,  false);\n         t(\"rust\",                  false,        false,   false,   true,  false);\n         t(\"sh\",                    false,        false,   false,   false, false);\n         t(\"ignore\",                false,        false,   true,    true,  false);\n-        t(\"should_fail\",           true,         false,   false,   true,  false);\n+        t(\"should_panic\",          true,         false,   false,   true,  false);\n         t(\"no_run\",                false,        true,    false,   true,  false);\n         t(\"test_harness\",          false,        false,   false,   true,  true);\n         t(\"{.no_run .example}\",    false,        true,    false,   true,  false);\n-        t(\"{.sh .should_fail}\",    true,         false,   false,   true,  false);\n+        t(\"{.sh .should_panic}\",   true,         false,   false,   true,  false);\n         t(\"{.example .rust}\",      false,        false,   false,   true,  false);\n         t(\"{.test_harness .rust}\", false,        false,   false,   true,  true);\n     }"}, {"sha": "23cbe79145a0fb692f40a8210d902b8d942e2598", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -681,7 +681,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn dont_panic_in_drop_on_panicked_flush() {\n         struct FailFlushWriter;\n "}, {"sha": "52492a019a2988170e2e94f52457b438264c5958", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -28,7 +28,7 @@\n ///\n /// # Examples\n ///\n-/// ```should_fail\n+/// ```should_panic\n /// # #![allow(unreachable_code)]\n /// panic!();\n /// panic!(\"this is a terrible mistake!\");"}, {"sha": "c2a0477b4d1704abac98528b2ca55b0e094ed3c7", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -105,7 +105,7 @@ impl File {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,should_fail\n+    /// ```rust,should_panic\n     /// # #![feature(old_io, old_path)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;"}, {"sha": "40be2a8b9d9c97ccbfac9a6fd7b31041255d3cb3", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -60,7 +60,7 @@ use thread;\n ///\n /// # Examples\n ///\n-/// ```should_fail\n+/// ```should_panic\n /// # #![feature(old_io)]\n /// use std::old_io::*;\n ///"}, {"sha": "b4bd513e8f027ce7c7514ce3ce0c3e613970fbb2", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -37,7 +37,7 @@ use thread;\n ///\n /// # Examples\n ///\n-/// ```should_fail\n+/// ```should_panic\n /// # #![feature(process)]\n ///\n /// use std::process::Command;"}, {"sha": "8f08bf76fc47f2f6417ace1f3d6bc38f69b9c882", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -821,13 +821,13 @@ mod test {\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_scoped_panic() {\n         thread::scoped(|| panic!()).join();\n     }\n \n     #[test]\n-    #[should_fail]\n+    #[should_panic]\n     fn test_scoped_implicit_panic() {\n         let _ = thread::scoped(|| panic!());\n     }"}, {"sha": "d5a8d3cc4390b4183685fb613a38b1f9dbd6cd4b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -201,7 +201,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"no_mangle\", Normal),\n     (\"no_link\", Normal),\n     (\"derive\", Normal),\n-    (\"should_fail\", Normal),\n     (\"should_panic\", Normal),\n     (\"ignore\", Normal),\n     (\"no_implicit_prelude\", Normal),"}, {"sha": "fbee11ee657c3411740dc29305edf7296c42acd7", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752958e4029e9d9cfb1ff020e92142b53fb810f/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=3752958e4029e9d9cfb1ff020e92142b53fb810f", "patch": "@@ -134,7 +134,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &*i),\n                         ignore: is_ignored(&*i),\n-                        should_panic: should_panic(&*i, self.cx.span_diagnostic)\n+                        should_panic: should_panic(&*i)\n                     };\n                     self.cx.testfns.push(test);\n                     self.tests.push(i.ident);\n@@ -386,16 +386,8 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n-fn should_panic(i: &ast::Item, diag: &diagnostic::SpanHandler) -> ShouldPanic {\n-    match i.attrs.iter().find(|attr| {\n-        if attr.check_name(\"should_panic\") { return true; }\n-        if attr.check_name(\"should_fail\") {\n-            diag.span_warn(attr.span, \"`#[should_fail]` is deprecated. Use `#[should_panic]` \\\n-                                       instead\");\n-            return true;\n-        }\n-        false\n-    }) {\n+fn should_panic(i: &ast::Item) -> ShouldPanic {\n+    match i.attrs.iter().find(|attr| attr.check_name(\"should_panic\")) {\n         Some(attr) => {\n             let msg = attr.meta_item_list()\n                 .and_then(|list| list.iter().find(|mi| mi.check_name(\"expected\")))"}]}