{"sha": "8bca85c4b6203dbbb3524dd2139d07621a7a449e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2E4NWM0YjYyMDNkYmJiMzUyNGRkMjEzOWQwNzYyMWE3YTQ0OWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-27T21:43:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-27T21:43:46Z"}, "message": "Support block indent for function calls\n\nUses the `fn_call_style` option.\n\nFixes #1358", "tree": {"sha": "f3a9023bc00d75803f2ed5ceee52bcfac3dccd99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a9023bc00d75803f2ed5ceee52bcfac3dccd99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bca85c4b6203dbbb3524dd2139d07621a7a449e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bca85c4b6203dbbb3524dd2139d07621a7a449e", "html_url": "https://github.com/rust-lang/rust/commit/8bca85c4b6203dbbb3524dd2139d07621a7a449e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bca85c4b6203dbbb3524dd2139d07621a7a449e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f53d5dd90c5ef2f17779a08de9bec441c609026b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53d5dd90c5ef2f17779a08de9bec441c609026b", "html_url": "https://github.com/rust-lang/rust/commit/f53d5dd90c5ef2f17779a08de9bec441c609026b"}], "stats": {"total": 147, "additions": 119, "deletions": 28}, "files": [{"sha": "914d19d6cb233915c04a7838c79e74d16003bf97", "filename": "rfc-rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/rfc-rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/rfc-rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc-rustfmt.toml?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -2,3 +2,4 @@ fn_args_layout = \"Block\"\n array_layout = \"Block\"\n where_style = \"Rfc\"\n generics_indent = \"Block\"\n+fn_call_style = \"Block\""}, {"sha": "11816945f7131424883db2a232cb0f89909ce1e0", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -366,6 +366,7 @@ create_config! {\n     struct_lit_style: IndentStyle, IndentStyle::Block, \"Style of struct definition\";\n     struct_lit_multiline_style: MultilineStyle, MultilineStyle::PreferSingle,\n         \"Multiline style on literal structs\";\n+    fn_call_style: IndentStyle, IndentStyle::Visual, \"Indentation for function calls, etc.\";\n     report_todo: ReportTactic, ReportTactic::Never,\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never,"}, {"sha": "5af8742c3b2326f785e25e1457679827dac4ef28", "filename": "src/expr.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -367,7 +367,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n \n     let tactic = match context.config.array_layout {\n         IndentStyle::Block => {\n-            // TODO wrong shape in one-line case\n+            // FIXME wrong shape in one-line case\n             match shape.width.checked_sub(2 * bracket_size) {\n                 Some(width) => definitive_tactic(&items, ListTactic::HorizontalVertical, width),\n                 None => DefinitiveListTactic::Vertical,\n@@ -1102,7 +1102,7 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n     let first = missed_str.find(|c: char| !c.is_whitespace()).unwrap_or(missed_str.len());\n     if missed_str[..first].chars().filter(|c| c == &'\\n').count() >= 2 {\n         // Excessive vertical whitespace before comment should be preserved\n-        // TODO handle vertical whitespace better\n+        // FIXME handle vertical whitespace better\n         result.push('\\n');\n     }\n     let missed_str = missed_str[first..].trim();\n@@ -1607,27 +1607,28 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     let span = mk_sp(span_lo, span.hi);\n \n     let used_width = extra_offset(&callee_str, shape);\n-    // 2 is for parens.\n-    let remaining_width = match shape.width.checked_sub(used_width + 2) {\n+\n+    let nested_shape = match context.config.fn_call_style {\n+        IndentStyle::Block => {\n+            shape.block()\n+                .block_indent(context.config.tab_spaces)\n+                .sub_width(context.config.tab_spaces)\n+        }\n+        // 1 = (, 2 = ().\n+        IndentStyle::Visual => shape.visual_indent(used_width + 1).sub_width(used_width + 2),\n+    };\n+    let nested_shape = match nested_shape {\n         Some(s) => s,\n         None => return Err(Ordering::Greater),\n     };\n-    // 1 = (\n-    let nested_shape = shape.visual_indent(used_width + 1);\n     let arg_count = args.len();\n \n     let items = itemize_list(context.codemap,\n                              args.iter(),\n                              \")\",\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n-                             |item| {\n-                                 item.rewrite(context,\n-                                              Shape {\n-                                                  width: remaining_width,\n-                                                  ..nested_shape\n-                                              })\n-                             },\n+                             |item| item.rewrite(context, nested_shape),\n                              span.lo,\n                              span.hi);\n     let mut item_vec: Vec<_> = items.collect();\n@@ -1648,7 +1649,6 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     // first arguments.\n     if overflow_last {\n         let nested_shape = Shape {\n-            width: remaining_width,\n             indent: nested_shape.indent.block_only(),\n             ..nested_shape\n         };\n@@ -1666,7 +1666,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     let tactic =\n         definitive_tactic(&item_vec,\n                           ListTactic::LimitedHorizontalVertical(context.config.fn_call_width),\n-                          remaining_width);\n+                          nested_shape.width);\n \n     // Replace the stub with the full overflowing last argument if the rewrite\n     // succeeded and its first line fits with the other arguments.\n@@ -1683,7 +1683,10 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n+        trailing_separator: match context.config.fn_call_style {\n+            IndentStyle::Visual => SeparatorTactic::Never,\n+            IndentStyle::Block => context.config.trailing_comma,\n+        },\n         shape: nested_shape,\n         ends_with_newline: false,\n         config: context.config,\n@@ -1694,11 +1697,22 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         None => return Err(Ordering::Less),\n     };\n \n-    Ok(if context.config.spaces_within_parens && list_str.len() > 0 {\n-           format!(\"{}( {} )\", callee_str, list_str)\n-       } else {\n-           format!(\"{}({})\", callee_str, list_str)\n-       })\n+    let result = if context.config.fn_call_style == IndentStyle::Visual ||\n+                    !list_str.contains('\\n') {\n+        if context.config.spaces_within_parens && list_str.len() > 0 {\n+            format!(\"{}( {} )\", callee_str, list_str)\n+        } else {\n+            format!(\"{}({})\", callee_str, list_str)\n+        }\n+    } else {\n+        format!(\"{}(\\n{}{}\\n{})\",\n+                callee_str,\n+                nested_shape.indent.to_string(context.config),\n+                list_str,\n+                shape.block().indent.to_string(context.config))\n+    };\n+\n+    Ok(result)\n }\n \n fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) -> Option<String> {"}, {"sha": "57319012bc390c6f4fa158d4c9196f932a9662c1", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -7,7 +7,6 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n fn_args_density = \"Tall\"\n fn_args_layout = \"Visual\"\n-fn_arg_indent = \"Visual\"\n where_density = \"Tall\"\n where_indent = \"Block\"\n where_layout = \"Vertical\""}, {"sha": "54132ea862a77f6d96016782ab7bb3abf0ad51fd", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-array_layout: Block\n+// rustfmt-fn_call_style: Block\n // Test expressions with block formatting.\n \n fn arrays() {\n@@ -76,3 +77,35 @@ fn arrays() {\n \n     [ 1 +   3, 4 ,  5, 6, 7, 7, fncall::<Vec<_>>(3-1)]\n }\n+\n+fn function_calls() {\n+    let items = itemize_list(context.codemap,\n+                             args.iter(),\n+                             \")\",\n+                             |item| item.span.lo,\n+                             |item| item.span.hi,\n+                             |item| {\n+                                 item.rewrite(context,\n+                                              Shape {\n+                                                  width: remaining_width,\n+                                                  ..nested_shape\n+                                              })\n+                             },\n+                             span.lo,\n+                             span.hi);\n+\n+    itemize_list(context.codemap,\n+                             args.iter(),\n+                             \")\",\n+                             |item| item.span.lo,\n+                             |item| item.span.hi,\n+                             |item| {\n+                                 item.rewrite(context,\n+                                              Shape {\n+                                                  width: remaining_width,\n+                                                  ..nested_shape\n+                                              })\n+                             },\n+                             span.lo,\n+                             span.hi)\n+}"}, {"sha": "fe393dcad73397c9e978e8551e17f3335a8fa064", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bca85c4b6203dbbb3524dd2139d07621a7a449e/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=8bca85c4b6203dbbb3524dd2139d07621a7a449e", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-array_layout: Block\n+// rustfmt-fn_call_style: Block\n // Test expressions with block formatting.\n \n fn arrays() {\n@@ -94,15 +95,57 @@ fn arrays() {\n         1,\n     ];\n \n-    let a = WeightedChoice::new(&mut [\n-        Weighted { weight: x, item: 0 },\n-        Weighted { weight: 1, item: 1 },\n-        Weighted { weight: x, item: 2 },\n-        Weighted { weight: 1, item: 3 },\n-    ]);\n+    let a = WeightedChoice::new(\n+        &mut [\n+            Weighted { weight: x, item: 0 },\n+            Weighted { weight: 1, item: 1 },\n+            Weighted { weight: x, item: 2 },\n+            Weighted { weight: 1, item: 3 },\n+        ],\n+    );\n \n     let z =\n         [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzz, q];\n \n     [1 + 3, 4, 5, 6, 7, 7, fncall::<Vec<_>>(3 - 1)]\n }\n+\n+fn function_calls() {\n+    let items = itemize_list(\n+        context.codemap,\n+        args.iter(),\n+        \")\",\n+        |item| item.span.lo,\n+        |item| item.span.hi,\n+        |item| {\n+            item.rewrite(\n+                context,\n+                Shape {\n+                    width: remaining_width,\n+                    ..nested_shape\n+                },\n+            )\n+        },\n+        span.lo,\n+        span.hi,\n+    );\n+\n+    itemize_list(\n+        context.codemap,\n+        args.iter(),\n+        \")\",\n+        |item| item.span.lo,\n+        |item| item.span.hi,\n+        |item| {\n+            item.rewrite(\n+                context,\n+                Shape {\n+                    width: remaining_width,\n+                    ..nested_shape\n+                },\n+            )\n+        },\n+        span.lo,\n+        span.hi,\n+    )\n+}"}]}