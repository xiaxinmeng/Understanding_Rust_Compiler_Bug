{"sha": "14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YmY1YmI3ZWUwMWU4OWQzMWQwNWUxZWYwOGNjZGU4NTgwOWZiN2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-01T15:06:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T15:06:13Z"}, "message": "Merge #5167\n\n5167: Reuse Semantics instances r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "cba093593541a43f9243d2b78316d945e0daa50d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba093593541a43f9243d2b78316d945e0daa50d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/KZlCRBK7hj4Ov3rIwAAdHIIAF92NWu9dTooUo61i55qN61I\nelckQP/4W5aYNTWuxfdzV3pYg5WT96gUuP1NcsIMAvvNKy1kChKyRYwRODttSZnD\nh1IJTBahfMenl4LMlm8uWuBnIob5hOZH46eZ5AyWhee++akY26QBGIZh0zZfHHQ2\nml7IXsmEmBupPTCCyJNXE1+15OTdkp8lRsDpZRfho8Ah31LCF8qLd1n240qS5HNi\n2KKnJp27o4JeFIR1H2TOHuwN4W2xYlOflbhvN5pjpvQJrpaRnq4QvJ9RDbc2DQv3\nTnm748NoS3GdkNv1Gx2CMrF0yIstqwBzuJ6RiDmIjLkScg2Wj7Hy1I3ZgK8LUWU=\n=oyHl\n-----END PGP SIGNATURE-----\n", "payload": "tree cba093593541a43f9243d2b78316d945e0daa50d\nparent f565447775a532c5b3b2d0d4b9fa8ee9fb36d12f\nparent 9710ad8c488e63fc46ab911e2d0787dafacb87e4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593615973 +0000\ncommitter GitHub <noreply@github.com> 1593615973 +0000\n\nMerge #5167\n\n5167: Reuse Semantics instances r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "html_url": "https://github.com/rust-lang/rust/commit/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f565447775a532c5b3b2d0d4b9fa8ee9fb36d12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f565447775a532c5b3b2d0d4b9fa8ee9fb36d12f", "html_url": "https://github.com/rust-lang/rust/commit/f565447775a532c5b3b2d0d4b9fa8ee9fb36d12f"}, {"sha": "9710ad8c488e63fc46ab911e2d0787dafacb87e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9710ad8c488e63fc46ab911e2d0787dafacb87e4", "html_url": "https://github.com/rust-lang/rust/commit/9710ad8c488e63fc46ab911e2d0787dafacb87e4"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "ca19cf1988f82c377db910aa0a00fcb2f3a9b902", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n         target,\n         |builder| {\n             let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n-            let res = definition.find_usages(&ctx.db(), None);\n+            let res = definition.find_usages(&ctx.sema, None);\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n             let mut visited_modules_set = FxHashSet::default();\n             visited_modules_set.insert(current_module);"}, {"sha": "259839535c3667067a95ecc5c583ef7576a69419", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n     let def = ctx.sema.to_def(&bind_pat)?;\n     let def = Definition::Local(def);\n-    let refs = def.find_usages(ctx.db(), None);\n+    let refs = def.find_usages(&ctx.sema, None);\n     if refs.is_empty() {\n         mark::hit!(test_not_applicable_if_variable_unused);\n         return None;"}, {"sha": "884353808e4a30b90d81da5a65962eeb792df38a", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -39,10 +39,11 @@ pub(crate) fn call_hierarchy(\n \n pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Option<Vec<CallItem>> {\n     let sema = Semantics::new(db);\n+\n     // 1. Find all refs\n     // 2. Loop through refs and determine unique fndef. This will become our `from: CallHierarchyItem,` in the reply.\n     // 3. Add ranges relative to the start of the fndef.\n-    let refs = references::find_all_refs(db, position, None)?;\n+    let refs = references::find_all_refs(&sema, position, None)?;\n \n     let mut calls = CallLocations::default();\n "}, {"sha": "8660278f153a8b38e3976db9f44768b66b8b99ec", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     },\n };\n \n-pub use hir::Documentation;\n+pub use hir::{Documentation, Semantics};\n pub use ra_assists::{Assist, AssistConfig, AssistId, ResolvedAssist};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n@@ -385,7 +385,9 @@ impl Analysis {\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n     ) -> Cancelable<Option<ReferenceSearchResult>> {\n-        self.with_db(|db| references::find_all_refs(db, position, search_scope).map(|it| it.info))\n+        self.with_db(|db| {\n+            references::find_all_refs(&Semantics::new(db), position, search_scope).map(|it| it.info)\n+        })\n     }\n \n     /// Returns a short text describing element at position."}, {"sha": "c2b0d5efea54112e06e821956a5962cfd617e0e0", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -86,12 +86,11 @@ impl IntoIterator for ReferenceSearchResult {\n }\n \n pub(crate) fn find_all_refs(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n ) -> Option<RangeInfo<ReferenceSearchResult>> {\n     let _p = profile(\"find_all_refs\");\n-    let sema = Semantics::new(db);\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n     let (opt_name, search_kind) = if let Some(name) =\n@@ -108,15 +107,15 @@ pub(crate) fn find_all_refs(\n     let RangeInfo { range, info: def } = find_name(&sema, &syntax, position, opt_name)?;\n \n     let references = def\n-        .find_usages(db, search_scope)\n+        .find_usages(sema, search_scope)\n         .into_iter()\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();\n \n-    let decl_range = def.try_to_nav(db)?.range();\n+    let decl_range = def.try_to_nav(sema.db)?.range();\n \n     let declaration = Declaration {\n-        nav: def.try_to_nav(db)?,\n+        nav: def.try_to_nav(sema.db)?,\n         kind: ReferenceKind::Other,\n         access: decl_access(&def, &syntax, decl_range),\n     };"}, {"sha": "b6a2266b4bcf29c11544952da97a6a85199b9169", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -24,23 +24,24 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n+    let sema = Semantics::new(db);\n+\n     match lex_single_valid_syntax_kind(new_name)? {\n         SyntaxKind::IDENT | SyntaxKind::UNDERSCORE => (),\n-        SyntaxKind::SELF_KW => return rename_to_self(db, position),\n+        SyntaxKind::SELF_KW => return rename_to_self(&sema, position),\n         _ => return None,\n     }\n \n-    let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n     if let Some(module) = find_module_at_offset(&sema, position, syntax) {\n-        rename_mod(db, position, module, new_name)\n+        rename_mod(&sema, position, module, new_name)\n     } else if let Some(self_token) =\n         syntax.token_at_offset(position.offset).find(|t| t.kind() == SyntaxKind::SELF_KW)\n     {\n-        rename_self_to_param(db, position, self_token, new_name)\n+        rename_self_to_param(&sema, position, self_token, new_name)\n     } else {\n-        rename_reference(sema.db, position, new_name)\n+        rename_reference(&sema, position, new_name)\n     }\n }\n \n@@ -97,20 +98,20 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n }\n \n fn rename_mod(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n     module: Module,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n \n-    let src = module.definition_source(db);\n-    let file_id = src.file_id.original_file(db);\n+    let src = module.definition_source(sema.db);\n+    let file_id = src.file_id.original_file(sema.db);\n     match src.value {\n         ModuleSource::SourceFile(..) => {\n             // mod is defined in path/to/dir/mod.rs\n-            let dst = if module.is_mod_rs(db) {\n+            let dst = if module.is_mod_rs(sema.db) {\n                 format!(\"../{}/mod.rs\", new_name)\n             } else {\n                 format!(\"{}.rs\", new_name)\n@@ -122,17 +123,17 @@ fn rename_mod(\n         ModuleSource::Module(..) => {}\n     }\n \n-    if let Some(src) = module.declaration_source(db) {\n-        let file_id = src.file_id.original_file(db);\n+    if let Some(src) = module.declaration_source(sema.db) {\n+        let file_id = src.file_id.original_file(sema.db);\n         let name = src.value.name()?;\n         let edit = SourceFileEdit {\n-            file_id: file_id,\n+            file_id,\n             edit: TextEdit::replace(name.syntax().text_range(), new_name.into()),\n         };\n         source_file_edits.push(edit);\n     }\n \n-    let RangeInfo { range, info: refs } = find_all_refs(db, position, None)?;\n+    let RangeInfo { range, info: refs } = find_all_refs(sema, position, None)?;\n     let ref_edits = refs\n         .references\n         .into_iter()\n@@ -142,8 +143,10 @@ fn rename_mod(\n     Some(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n }\n \n-fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<SourceChange>> {\n-    let sema = Semantics::new(db);\n+fn rename_to_self(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+) -> Option<RangeInfo<SourceChange>> {\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n@@ -158,7 +161,7 @@ fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo\n         _ => return None, // not renaming other types\n     };\n \n-    let RangeInfo { range, info: refs } = find_all_refs(db, position, None)?;\n+    let RangeInfo { range, info: refs } = find_all_refs(sema, position, None)?;\n \n     let param_range = first_param.syntax().text_range();\n     let (param_ref, usages): (Vec<Reference>, Vec<Reference>) = refs\n@@ -210,16 +213,15 @@ fn text_edit_from_self_param(\n }\n \n fn rename_self_to_param(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n     self_token: SyntaxToken,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n-    let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n-    let text = db.file_text(position.file_id);\n+    let text = sema.db.file_text(position.file_id);\n     let fn_def = find_node_at_offset::<ast::FnDef>(syn, position.offset)?;\n     let search_range = fn_def.syntax().text_range();\n \n@@ -249,11 +251,11 @@ fn rename_self_to_param(\n }\n \n fn rename_reference(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n-    let RangeInfo { range, info: refs } = find_all_refs(db, position, None)?;\n+    let RangeInfo { range, info: refs } = find_all_refs(sema, position, None)?;\n \n     let edit = refs\n         .into_iter()"}, {"sha": "81553150b54a1e0189c41a13de6ed4e456fcc92d", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=14bf5bb7ee01e89d31d05e1ef08ccde85809fb7a", "patch": "@@ -180,20 +180,20 @@ impl Definition {\n \n     pub fn find_usages(\n         &self,\n-        db: &RootDatabase,\n+        sema: &Semantics<RootDatabase>,\n         search_scope: Option<SearchScope>,\n     ) -> Vec<Reference> {\n         let _p = profile(\"Definition::find_usages\");\n \n         let search_scope = {\n-            let base = self.search_scope(db);\n+            let base = self.search_scope(sema.db);\n             match search_scope {\n                 None => base,\n                 Some(scope) => base.intersection(&scope),\n             }\n         };\n \n-        let name = match self.name(db) {\n+        let name = match self.name(sema.db) {\n             None => return Vec::new(),\n             Some(it) => it.to_string(),\n         };\n@@ -202,11 +202,10 @@ impl Definition {\n         let mut refs = vec![];\n \n         for (file_id, search_range) in search_scope {\n-            let text = db.file_text(file_id);\n+            let text = sema.db.file_text(file_id);\n             let search_range =\n                 search_range.unwrap_or(TextRange::up_to(TextSize::of(text.as_str())));\n \n-            let sema = Semantics::new(db);\n             let tree = Lazy::new(|| sema.parse(file_id).syntax().clone());\n \n             for (idx, _) in text.match_indices(pat) {\n@@ -222,9 +221,6 @@ impl Definition {\n                         continue;\n                     };\n \n-                // FIXME: reuse sb\n-                // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n-\n                 match classify_name_ref(&sema, &name_ref) {\n                     Some(NameRefClass::Definition(def)) if &def == self => {\n                         let kind = if is_record_lit_name_ref(&name_ref)"}]}