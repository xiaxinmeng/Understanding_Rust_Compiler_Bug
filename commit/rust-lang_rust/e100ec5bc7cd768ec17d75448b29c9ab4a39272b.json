{"sha": "e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "node_id": "C_kwDOAAsO6NoAKGUxMDBlYzViYzdjZDc2OGVjMTdkNzU0NDhiMjljOWFiNGEzOTI3MmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-21T16:04:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-21T16:04:54Z"}, "message": "Auto merge of #92095 - vacuus:master, r=jyn514\n\nrustdoc: Remove 'need_backline' field from `DocFragment`\n\nFixes [#92084](https://github.com/rust-lang/rust/issues/92084)", "tree": {"sha": "15b80052c3bc64ed101a73ff33d50c79f973f197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b80052c3bc64ed101a73ff33d50c79f973f197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "html_url": "https://github.com/rust-lang/rust/commit/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad3c1dd1d47f9ce7dfdf4a14c70c67e1790b0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad3c1dd1d47f9ce7dfdf4a14c70c67e1790b0f5", "html_url": "https://github.com/rust-lang/rust/commit/8ad3c1dd1d47f9ce7dfdf4a14c70c67e1790b0f5"}, {"sha": "386ab1ed5ccc83b1fd5b50034929b3ee78b9ad15", "url": "https://api.github.com/repos/rust-lang/rust/commits/386ab1ed5ccc83b1fd5b50034929b3ee78b9ad15", "html_url": "https://github.com/rust-lang/rust/commit/386ab1ed5ccc83b1fd5b50034929b3ee78b9ad15"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "cb4896fbfd23ddfed38c3d9bbc026b2dd8286b5b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e100ec5bc7cd768ec17d75448b29c9ab4a39272b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e100ec5bc7cd768ec17d75448b29c9ab4a39272b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "patch": "@@ -914,7 +914,6 @@ crate struct DocFragment {\n     crate parent_module: Option<DefId>,\n     crate doc: Symbol,\n     crate kind: DocFragmentKind,\n-    crate need_backline: bool,\n     crate indent: usize,\n }\n \n@@ -930,28 +929,25 @@ crate enum DocFragmentKind {\n     RawDoc,\n }\n \n-// The goal of this function is to apply the `DocFragment` transformations that are required when\n-// transforming into the final markdown. So the transformations in here are:\n-//\n-// * Applying the computed indent to each lines in each doc fragment (a `DocFragment` can contain\n-//   multiple lines in case of `#[doc = \"\"]`).\n-// * Adding backlines between `DocFragment`s and adding an extra one if required (stored in the\n-//   `need_backline` field).\n+/// The goal of this function is to apply the `DocFragment` transformation that is required when\n+/// transforming into the final Markdown, which is applying the computed indent to each line in\n+/// each doc fragment (a `DocFragment` can contain multiple lines in case of `#[doc = \"\"]`).\n+///\n+/// Note: remove the trailing newline where appropriate\n fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\n     let s = frag.doc.as_str();\n-    let mut iter = s.lines().peekable();\n+    let mut iter = s.lines();\n+    if s == \"\" {\n+        out.push('\\n');\n+        return;\n+    }\n     while let Some(line) = iter.next() {\n         if line.chars().any(|c| !c.is_whitespace()) {\n             assert!(line.len() >= frag.indent);\n             out.push_str(&line[frag.indent..]);\n         } else {\n             out.push_str(line);\n         }\n-        if iter.peek().is_some() {\n-            out.push('\\n');\n-        }\n-    }\n-    if frag.need_backline {\n         out.push('\\n');\n     }\n }\n@@ -963,6 +959,7 @@ crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n     for frag in doc_strings {\n         add_doc_fragment(&mut acc, frag);\n     }\n+    acc.pop();\n     acc\n }\n \n@@ -1028,7 +1025,6 @@ impl Attributes {\n         additional_attrs: Option<(&[ast::Attribute], DefId)>,\n     ) -> Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n-\n         let clean_attr = |(attr, parent_module): (&ast::Attribute, Option<DefId>)| {\n             if let Some(value) = attr.doc_str() {\n                 trace!(\"got doc_str={:?}\", value);\n@@ -1039,18 +1035,8 @@ impl Attributes {\n                     DocFragmentKind::RawDoc\n                 };\n \n-                let frag = DocFragment {\n-                    span: attr.span,\n-                    doc: value,\n-                    kind,\n-                    parent_module,\n-                    need_backline: false,\n-                    indent: 0,\n-                };\n-\n-                if let Some(prev) = doc_strings.last_mut() {\n-                    prev.need_backline = true;\n-                }\n+                let frag =\n+                    DocFragment { span: attr.span, doc: value, kind, parent_module, indent: 0 };\n \n                 doc_strings.push(frag);\n \n@@ -1086,6 +1072,7 @@ impl Attributes {\n             }\n             add_doc_fragment(&mut out, new_frag);\n         }\n+        out.pop();\n         if out.is_empty() { None } else { Some(out) }\n     }\n \n@@ -1094,10 +1081,17 @@ impl Attributes {\n     /// The module can be different if this is a re-export with added documentation.\n     crate fn collapsed_doc_value_by_module_level(&self) -> FxHashMap<Option<DefId>, String> {\n         let mut ret = FxHashMap::default();\n+        if self.doc_strings.len() == 0 {\n+            return ret;\n+        }\n+        let last_index = self.doc_strings.len() - 1;\n \n-        for new_frag in self.doc_strings.iter() {\n+        for (i, new_frag) in self.doc_strings.iter().enumerate() {\n             let out = ret.entry(new_frag.parent_module).or_default();\n             add_doc_fragment(out, new_frag);\n+            if i == last_index {\n+                out.pop();\n+            }\n         }\n         ret\n     }"}, {"sha": "baff839cdc88c8befd5709048285cca5b8cb8419", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e100ec5bc7cd768ec17d75448b29c9ab4a39272b/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e100ec5bc7cd768ec17d75448b29c9ab4a39272b/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "patch": "@@ -12,7 +12,6 @@ fn create_doc_fragment(s: &str) -> Vec<DocFragment> {\n         parent_module: None,\n         doc: Symbol::intern(s),\n         kind: DocFragmentKind::SugaredDoc,\n-        need_backline: false,\n         indent: 0,\n     }]\n }"}]}