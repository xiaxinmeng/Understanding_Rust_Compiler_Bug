{"sha": "1343ffd564fbaed96e800a125e3d2b43de09beea", "node_id": "C_kwDOAAsO6NoAKDEzNDNmZmQ1NjRmYmFlZDk2ZTgwMGExMjVlM2QyYjQzZGUwOWJlZWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-18T00:24:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-21T22:04:15Z"}, "message": "Split `MacArgs` in two.\n\n`MacArgs` is an enum with three variants: `Empty`, `Delimited`, and `Eq`. It's\nused in two ways:\n- For representing attribute macro arguments (e.g. in `AttrItem`), where all\n  three variants are used.\n- For representing function-like macros (e.g. in `MacCall` and `MacroDef`),\n  where only the `Delimited` variant is used.\n\nIn other words, `MacArgs` is used in two quite different places due to them\nhaving partial overlap. I find this makes the code hard to read. It also leads\nto various unreachable code paths, and allows invalid values (such as\naccidentally using `MacArgs::Empty` in a `MacCall`).\n\nThis commit splits `MacArgs` in two:\n- `DelimArgs` is a new struct just for the \"delimited arguments\" case. It is\n  now used in `MacCall` and `MacroDef`.\n- `AttrArgs` is a renaming of the old `MacArgs` enum for the attribute macro\n  case. Its `Delimited` variant now contains a `DelimArgs`.\n\nVarious other related things are renamed as well.\n\nThese changes make the code clearer, avoids several unreachable paths, and\ndisallows the invalid values.", "tree": {"sha": "c05d1607c909b73e0e1c7d1e4270d0beb0c2d863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05d1607c909b73e0e1c7d1e4270d0beb0c2d863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1343ffd564fbaed96e800a125e3d2b43de09beea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1343ffd564fbaed96e800a125e3d2b43de09beea", "html_url": "https://github.com/rust-lang/rust/commit/1343ffd564fbaed96e800a125e3d2b43de09beea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1343ffd564fbaed96e800a125e3d2b43de09beea/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4addc5980e95e4f7883f2d56aedcd08626ba73", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4addc5980e95e4f7883f2d56aedcd08626ba73", "html_url": "https://github.com/rust-lang/rust/commit/4a4addc5980e95e4f7883f2d56aedcd08626ba73"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d5611082f01030048acbfca4e587271d777a3d8a", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1343ffd564fbaed96e800a125e3d2b43de09beea", "patch": "@@ -1341,7 +1341,7 @@ pub(crate) fn can_be_overflowed_expr(\n         }\n         ast::ExprKind::MacCall(ref mac) => {\n             match (\n-                rustc_ast::ast::MacDelimiter::from_token(mac.args.delim().unwrap()),\n+                rustc_ast::ast::MacDelimiter::from_token(mac.args.delim.to_token()),\n                 context.config.overflow_delimited_expr(),\n             ) {\n                 (Some(ast::MacDelimiter::Bracket), true)"}, {"sha": "df949388037880dfbf3dbde847b83807561b1269", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=1343ffd564fbaed96e800a125e3d2b43de09beea", "patch": "@@ -208,7 +208,7 @@ fn rewrite_macro_inner(\n         original_style\n     };\n \n-    let ts = mac.args.inner_tokens();\n+    let ts = mac.args.tokens.clone();\n     let has_comment = contains_comment(context.snippet(mac.span()));\n     if ts.is_empty() && !has_comment {\n         return match style {\n@@ -392,7 +392,7 @@ pub(crate) fn rewrite_macro_def(\n         return snippet;\n     }\n \n-    let ts = def.body.inner_tokens();\n+    let ts = def.body.tokens.clone();\n     let mut parser = MacroParser::new(ts.into_trees());\n     let parsed_def = match parser.parse() {\n         Some(def) => def,\n@@ -1087,7 +1087,7 @@ pub(crate) fn convert_try_mac(\n ) -> Option<ast::Expr> {\n     let path = &pprust::path_to_string(&mac.path);\n     if path == \"try\" || path == \"r#try\" {\n-        let ts = mac.args.inner_tokens();\n+        let ts = mac.args.tokens.clone();\n \n         Some(ast::Expr {\n             id: ast::NodeId::root(), // dummy value"}, {"sha": "01edfab36547cc615f6f0f8e2e3a7de60cc78d9d", "filename": "src/parse/macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fparse%2Fmacros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fparse%2Fmacros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fasm.rs?ref=1343ffd564fbaed96e800a125e3d2b43de09beea", "patch": "@@ -5,7 +5,7 @@ use crate::rewrite::RewriteContext;\n \n #[allow(dead_code)]\n pub(crate) fn parse_asm(context: &RewriteContext<'_>, mac: &ast::MacCall) -> Option<AsmArgs> {\n-    let ts = mac.args.inner_tokens();\n+    let ts = mac.args.tokens.clone();\n     let mut parser = super::build_parser(context, ts);\n     parse_asm_args(&mut parser, context.parse_sess.inner(), mac.span(), false).ok()\n }"}, {"sha": "ace1a76b3fe7d12babfb0530b105279e7b81abe2", "filename": "src/parse/macros/cfg_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fparse%2Fmacros%2Fcfg_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1343ffd564fbaed96e800a125e3d2b43de09beea/src%2Fparse%2Fmacros%2Fcfg_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fcfg_if.rs?ref=1343ffd564fbaed96e800a125e3d2b43de09beea", "patch": "@@ -23,7 +23,7 @@ fn parse_cfg_if_inner<'a>(\n     sess: &'a ParseSess,\n     mac: &'a ast::MacCall,\n ) -> Result<Vec<ast::Item>, &'static str> {\n-    let ts = mac.args.inner_tokens();\n+    let ts = mac.args.tokens.clone();\n     let mut parser = build_stream_parser(sess.inner(), ts);\n \n     let mut items = vec![];"}]}