{"sha": "603481f534e7da99dc759e0d25f25f18a100ac10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMzQ4MWY1MzRlN2RhOTlkYzc1OWUwZDI1ZjI1ZjE4YTEwMGFjMTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-03T13:29:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-03T13:29:56Z"}, "message": "Merge #7861\n\n7861: Special-case parenthesized and negated expressions in demorgan assist r=lnicola a=Jesse-Bakker\n\nFixes #7831 \n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>", "tree": {"sha": "d97b8da8dc02add4f1c127bb155ce8ac97f95171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97b8da8dc02add4f1c127bb155ce8ac97f95171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/603481f534e7da99dc759e0d25f25f18a100ac10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgP49UCRBK7hj4Ov3rIwAAdHIIAKQr21xmkKYrCqgzLYpDO3AD\nouBv6LvHBVu3fE9b79GFhAryRGR+GTjwuv6v2Yu6Z7CG9aOgjhcZkYczgwvYtI3R\nPDyAUP+0qPGICaAkMzocF2AznCAyc2UASdAcVotk6DnwUFx5/LKUDWOekf8OLWJF\nKNglkCxNr+pOxBg18lZRloHotgvnyQqW9Ot/e71KoPo/XnNrD//SH7Y79EnQ8Cvd\ndEw9z/RTEG0pYYHxG+NCYphtECBbfXtNZ5WZHpdI8vypumlvwLvDgfaUACr7vMJN\nqvI7C5NBCIM6fbn7UhY+frioXQ9evdJtTz/2vU0dk9ZKfp+2lc17xkRxbByR6aQ=\n=YI8I\n-----END PGP SIGNATURE-----\n", "payload": "tree d97b8da8dc02add4f1c127bb155ce8ac97f95171\nparent 2b22fc929a5f13d6cddb9458b1b205f9aee60299\nparent 1363d60111ee70d2069a8296e4a5bfd339418288\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614778196 +0000\ncommitter GitHub <noreply@github.com> 1614778196 +0000\n\nMerge #7861\n\n7861: Special-case parenthesized and negated expressions in demorgan assist r=lnicola a=Jesse-Bakker\n\nFixes #7831 \n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/603481f534e7da99dc759e0d25f25f18a100ac10", "html_url": "https://github.com/rust-lang/rust/commit/603481f534e7da99dc759e0d25f25f18a100ac10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/603481f534e7da99dc759e0d25f25f18a100ac10/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b22fc929a5f13d6cddb9458b1b205f9aee60299", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b22fc929a5f13d6cddb9458b1b205f9aee60299", "html_url": "https://github.com/rust-lang/rust/commit/2b22fc929a5f13d6cddb9458b1b205f9aee60299"}, {"sha": "1363d60111ee70d2069a8296e4a5bfd339418288", "url": "https://api.github.com/repos/rust-lang/rust/commits/1363d60111ee70d2069a8296e4a5bfd339418288", "html_url": "https://github.com/rust-lang/rust/commit/1363d60111ee70d2069a8296e4a5bfd339418288"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "128b1eb56cc7bfad510ac293d178551f4cd1400a", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/603481f534e7da99dc759e0d25f25f18a100ac10/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603481f534e7da99dc759e0d25f25f18a100ac10/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=603481f534e7da99dc759e0d25f25f18a100ac10", "patch": "@@ -1,4 +1,5 @@\n use syntax::ast::{self, AstNode};\n+use test_utils::mark;\n \n use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKind, Assists};\n \n@@ -43,9 +44,36 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         \"Apply De Morgan's law\",\n         op_range,\n         |edit| {\n+            let paren_expr = expr.syntax().parent().and_then(|parent| ast::ParenExpr::cast(parent));\n+\n+            let neg_expr = paren_expr\n+                .clone()\n+                .and_then(|paren_expr| paren_expr.syntax().parent())\n+                .and_then(|parent| ast::PrefixExpr::cast(parent))\n+                .and_then(|prefix_expr| {\n+                    if prefix_expr.op_kind().unwrap() == ast::PrefixOp::Not {\n+                        Some(prefix_expr)\n+                    } else {\n+                        None\n+                    }\n+                });\n+\n             edit.replace(op_range, opposite_op);\n-            edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n-            edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+\n+            if let Some(paren_expr) = paren_expr {\n+                edit.replace(lhs_range, not_lhs.syntax().text());\n+                edit.replace(rhs_range, not_rhs.syntax().text());\n+                if let Some(neg_expr) = neg_expr {\n+                    mark::hit!(demorgan_double_negation);\n+                    edit.replace(neg_expr.op_token().unwrap().text_range(), \"\");\n+                } else {\n+                    mark::hit!(demorgan_double_parens);\n+                    edit.replace(paren_expr.l_paren_token().unwrap().text_range(), \"!(\");\n+                }\n+            } else {\n+                edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+                edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+            }\n         },\n     )\n }\n@@ -62,6 +90,7 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n #[cfg(test)]\n mod tests {\n     use ide_db::helpers::FamousDefs;\n+    use test_utils::mark;\n \n     use super::*;\n \n@@ -156,4 +185,16 @@ fn f() {\n     fn demorgan_doesnt_apply_with_cursor_not_on_op() {\n         check_assist_not_applicable(apply_demorgan, \"fn f() { $0 !x || !x }\")\n     }\n+\n+    #[test]\n+    fn demorgan_doesnt_double_negation() {\n+        mark::check!(demorgan_double_negation);\n+        check_assist(apply_demorgan, \"fn f() { !(x ||$0 x) }\", \"fn f() { (!x && !x) }\")\n+    }\n+\n+    #[test]\n+    fn demorgan_doesnt_double_parens() {\n+        mark::check!(demorgan_double_parens);\n+        check_assist(apply_demorgan, \"fn f() { (x ||$0 x) }\", \"fn f() { !(!x && !x) }\")\n+    }\n }"}]}