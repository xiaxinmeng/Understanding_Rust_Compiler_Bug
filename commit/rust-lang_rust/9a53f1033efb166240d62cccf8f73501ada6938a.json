{"sha": "9a53f1033efb166240d62cccf8f73501ada6938a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTNmMTAzM2VmYjE2NjI0MGQ2MmNjY2Y4ZjczNTAxYWRhNjkzOGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T14:16:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T14:16:32Z"}, "message": "Implement yield point highlighting", "tree": {"sha": "7003cda47cd8adf607b1818e8bc682e29d5652dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7003cda47cd8adf607b1818e8bc682e29d5652dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a53f1033efb166240d62cccf8f73501ada6938a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a53f1033efb166240d62cccf8f73501ada6938a", "html_url": "https://github.com/rust-lang/rust/commit/9a53f1033efb166240d62cccf8f73501ada6938a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a53f1033efb166240d62cccf8f73501ada6938a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b66bb4589569895d35742e995d1d1670b912cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b66bb4589569895d35742e995d1d1670b912cc", "html_url": "https://github.com/rust-lang/rust/commit/14b66bb4589569895d35742e995d1d1670b912cc"}], "stats": {"total": 136, "additions": 125, "deletions": 11}, "files": [{"sha": "1daaeb43fa2fed9166a6732b452aa490fe06cb94", "filename": "crates/ide/src/highlight_related.rs", "status": "renamed", "additions": 122, "deletions": 8, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/9a53f1033efb166240d62cccf8f73501ada6938a/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53f1033efb166240d62cccf8f73501ada6938a/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=9a53f1033efb166240d62cccf8f73501ada6938a", "patch": "@@ -7,9 +7,9 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    AstNode,\n+    ast, match_ast, AstNode,\n     SyntaxKind::{ASYNC_KW, AWAIT_KW, QUESTION, RETURN_KW, THIN_ARROW},\n-    SyntaxNode, TextRange,\n+    SyntaxNode, SyntaxToken, TextRange, WalkEvent,\n };\n \n use crate::{display::TryToNav, references, NavigationTarget};\n@@ -36,17 +36,59 @@ pub(crate) fn highlight_related(\n     })?;\n \n     match token.kind() {\n-        QUESTION | RETURN_KW | THIN_ARROW => highlight_exit_points(),\n-        AWAIT_KW | ASYNC_KW => highlight_yield_points(),\n+        QUESTION | RETURN_KW | THIN_ARROW => highlight_exit_points(token),\n+        AWAIT_KW | ASYNC_KW => highlight_yield_points(token),\n         _ => highlight_references(sema, &syntax, position),\n     }\n }\n \n-fn highlight_exit_points() -> Option<Vec<DocumentHighlight>> {\n+fn highlight_exit_points(_token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n     None\n }\n \n-fn highlight_yield_points() -> Option<Vec<DocumentHighlight>> {\n+fn highlight_yield_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n+    fn hl(\n+        async_token: Option<SyntaxToken>,\n+        body: Option<ast::BlockExpr>,\n+    ) -> Option<Vec<DocumentHighlight>> {\n+        let mut highlights = Vec::new();\n+        highlights.push(DocumentHighlight { access: None, range: async_token?.text_range() });\n+        if let Some(body) = body {\n+            let mut preorder = body.syntax().preorder();\n+            while let Some(event) = preorder.next() {\n+                let node = match event {\n+                    WalkEvent::Enter(node) => node,\n+                    WalkEvent::Leave(_) => continue,\n+                };\n+                match_ast! {\n+                    match node {\n+                        ast::AwaitExpr(expr) => if let Some(token) = expr.await_token() {\n+                            highlights.push(DocumentHighlight {\n+                                access: None,\n+                                range: token.text_range(),\n+                            });\n+                        },\n+                        ast::EffectExpr(__) => preorder.skip_subtree(),\n+                        ast::ClosureExpr(__) => preorder.skip_subtree(),\n+                        ast::Item(__) => preorder.skip_subtree(),\n+                        ast::Path(__) => preorder.skip_subtree(),\n+                        _ => (),\n+                    }\n+                }\n+            }\n+        }\n+        Some(highlights)\n+    }\n+    for anc in token.ancestors() {\n+        return match_ast! {\n+            match anc {\n+                ast::Fn(fn_) => hl(fn_.async_token(), fn_.body()),\n+                ast::EffectExpr(effect) => hl(effect.async_token(), effect.block_expr()),\n+                ast::ClosureExpr(__) => None,\n+                _ => continue,\n+            }\n+        };\n+    }\n     None\n }\n \n@@ -135,7 +177,6 @@ struct Foo;\n     fn test_hl_self_in_crate_root() {\n         check(\n             r#\"\n-//- /lib.rs\n use self$0;\n \"#,\n         );\n@@ -157,13 +198,86 @@ use self$0;\n     fn test_hl_local() {\n         check(\n             r#\"\n-//- /lib.rs\n fn foo() {\n     let mut bar = 3;\n          // ^^^ write\n     bar$0;\n  // ^^^ read\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_yield_points() {\n+        check(\n+            r#\"\n+pub async fn foo() {\n+ // ^^^^^\n+    let x = foo()\n+        .await$0\n+      // ^^^^^\n+        .await;\n+      // ^^^^^\n+    || { 0.await };\n+    (async { 0.await }).await\n+                     // ^^^^^\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_yield_points2() {\n+        check(\n+            r#\"\n+pub async$0 fn foo() {\n+ // ^^^^^\n+    let x = foo()\n+        .await\n+      // ^^^^^\n+        .await;\n+      // ^^^^^\n+    || { 0.await };\n+    (async { 0.await }).await\n+                     // ^^^^^\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_yield_nested_fn() {\n+        check(\n+            r#\"\n+async fn foo() {\n+    async fn foo2() {\n+ // ^^^^^\n+        async fn foo3() {\n+            0.await\n+        }\n+        0.await$0\n+       // ^^^^^\n+    }\n+    0.await\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_yield_nested_async_blocks() {\n+        check(\n+            r#\"\n+async fn foo() {\n+    (async {\n+  // ^^^^^\n+        (async {\n+           0.await\n+        }).await$0 }\n+        // ^^^^^\n+    ).await;\n+}\n \"#,\n         );\n     }", "previous_filename": "crates/ide/src/highlight_references.rs"}, {"sha": "bb10ce5e8ae70b7bf561e1b3f41e93aa2987a830", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a53f1033efb166240d62cccf8f73501ada6938a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53f1033efb166240d62cccf8f73501ada6938a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=9a53f1033efb166240d62cccf8f73501ada6938a", "patch": "@@ -25,7 +25,7 @@ mod display;\n mod annotations;\n mod call_hierarchy;\n mod doc_links;\n-mod highlight_references;\n+mod highlight_related;\n mod expand_macro;\n mod extend_selection;\n mod file_structure;\n@@ -76,7 +76,7 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},\n     folding_ranges::{Fold, FoldKind},\n-    highlight_references::DocumentHighlight,\n+    highlight_related::DocumentHighlight,\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n@@ -490,7 +490,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancellable<Option<Vec<DocumentHighlight>>> {\n-        self.with_db(|db| highlight_references::highlight_related(&Semantics::new(db), position))\n+        self.with_db(|db| highlight_related::highlight_related(&Semantics::new(db), position))\n     }\n \n     /// Computes syntax highlighting for the given file range."}]}