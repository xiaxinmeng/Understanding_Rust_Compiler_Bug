{"sha": "0d1c9c08d7afd83644c825305804eb694bddb881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMWM5YzA4ZDdhZmQ4MzY0NGM4MjUzMDU4MDRlYjY5NGJkZGI4ODE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:15:49Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:11:04Z"}, "message": "Pretty printing for const generics\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "fc85ee1f92ff03f5cf252581ef6e0c513e756076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc85ee1f92ff03f5cf252581ef6e0c513e756076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1c9c08d7afd83644c825305804eb694bddb881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c9c08d7afd83644c825305804eb694bddb881", "html_url": "https://github.com/rust-lang/rust/commit/0d1c9c08d7afd83644c825305804eb694bddb881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c9c08d7afd83644c825305804eb694bddb881/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8", "html_url": "https://github.com/rust-lang/rust/commit/cbf5d22bcdd8674db1f3945326e4ff8d6b6986c8"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "cdc0c3371ebcd9218e178c8cd3915b1a66c4c296", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c9c08d7afd83644c825305804eb694bddb881/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c9c08d7afd83644c825305804eb694bddb881/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=0d1c9c08d7afd83644c825305804eb694bddb881", "patch": "@@ -8,7 +8,8 @@ use crate::ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind, ParamConst};\n+use crate::mir::interpret::ConstValue;\n use crate::util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n@@ -478,6 +479,7 @@ impl PrintContext {\n                         GenericParamDefKind::Type { has_default, .. } => {\n                             Some((param.def_id, has_default))\n                         }\n+                        GenericParamDefKind::Const => None, // FIXME(const_generics:defaults)\n                     }).peekable();\n                 let has_default = {\n                     let has_default = type_params.peek().map(|(_, has_default)| has_default);\n@@ -571,6 +573,14 @@ impl PrintContext {\n             )?;\n         }\n \n+        // FIXME(const_generics::defaults)\n+        let consts = substs.consts();\n+\n+        for ct in consts {\n+            start_or_continue(f, \"<\", \", \")?;\n+            ct.print_display(f, self)?;\n+        }\n+\n         start_or_continue(f, \"\", \">\")?;\n \n         // For values, also print their name and type parameters.\n@@ -763,7 +773,8 @@ impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let type_name = match self.kind {\n             ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n-            ty::GenericParamDefKind::Type {..} => \"Type\",\n+            ty::GenericParamDefKind::Type { .. } => \"Type\",\n+            ty::GenericParamDefKind::Const => \"Const\",\n         };\n         write!(f, \"{}({}, {:?}, {})\",\n                type_name,\n@@ -1088,6 +1099,12 @@ impl fmt::Debug for ty::TyVid {\n     }\n }\n \n+impl<'tcx> fmt::Debug for ty::ConstVid<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"_#{}f\", self.index)\n+    }\n+}\n+\n impl fmt::Debug for ty::IntVid {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"_#{}i\", self.index)\n@@ -1448,7 +1465,12 @@ define_print! {\n                             write!(f, \"_\")?;\n                         }\n                         ty::LazyConst::Evaluated(c) => ty::tls::with(|tcx| {\n-                            write!(f, \"{}\", c.unwrap_usize(tcx))\n+                            match c.val {\n+                                ConstValue::Infer(..) => write!(f, \"_\"),\n+                                ConstValue::Param(ParamConst { name, .. }) =>\n+                                    write!(f, \"{}\", name),\n+                                _ => write!(f, \"{}\", c.unwrap_usize(tcx)),\n+                            }\n                         })?,\n                     }\n                     write!(f, \"]\")\n@@ -1472,6 +1494,37 @@ define_print! {\n     }\n }\n \n+define_print! {\n+    ('tcx) ConstValue<'tcx>, (self, f, cx) {\n+        display {\n+            match self {\n+                ConstValue::Infer(..) => write!(f, \"_\"),\n+                ConstValue::Param(ParamConst { name, .. }) => write!(f, \"{}\", name),\n+                _ => write!(f, \"{:?}\", self),\n+            }\n+        }\n+    }\n+}\n+\n+define_print! {\n+    ('tcx) ty::Const<'tcx>, (self, f, cx) {\n+        display {\n+            write!(f, \"{} : {}\", self.val, self.ty)\n+        }\n+    }\n+}\n+\n+define_print! {\n+    ('tcx) ty::LazyConst<'tcx>, (self, f, cx) {\n+        display {\n+            match self {\n+                ty::LazyConst::Unevaluated(..) => write!(f, \"_ : _\"),\n+                ty::LazyConst::Evaluated(c) => write!(f, \"{}\", c),\n+            }\n+        }\n+    }\n+}\n+\n define_print! {\n     () ty::ParamTy, (self, f, cx) {\n         display {\n@@ -1483,6 +1536,17 @@ define_print! {\n     }\n }\n \n+define_print! {\n+    () ty::ParamConst, (self, f, cx) {\n+        display {\n+            write!(f, \"{}\", self.name)\n+        }\n+        debug {\n+            write!(f, \"{}/#{}\", self.name, self.index)\n+        }\n+    }\n+}\n+\n define_print! {\n     ('tcx, T: Print + fmt::Debug, U: Print + fmt::Debug) ty::OutlivesPredicate<T, U>,\n     (self, f, cx) {"}]}