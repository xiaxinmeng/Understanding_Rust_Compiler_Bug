{"sha": "64a68ae69adf508c73e642ff8739d3e547878467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YTY4YWU2OWFkZjUwOGM3M2U2NDJmZjg3MzlkM2U1NDc4Nzg0Njc=", "commit": {"author": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-19T18:39:04Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-19T18:39:04Z"}, "message": "No longer need to add attrs to ImportSource.", "tree": {"sha": "1209999e6a414bd7c358e1c7a52c3223d473181c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1209999e6a414bd7c358e1c7a52c3223d473181c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a68ae69adf508c73e642ff8739d3e547878467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a68ae69adf508c73e642ff8739d3e547878467", "html_url": "https://github.com/rust-lang/rust/commit/64a68ae69adf508c73e642ff8739d3e547878467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a68ae69adf508c73e642ff8739d3e547878467/comments", "author": null, "committer": null, "parents": [{"sha": "c975fe25e4b5756b03033e4819a5c5044ca353f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c975fe25e4b5756b03033e4819a5c5044ca353f2", "html_url": "https://github.com/rust-lang/rust/commit/c975fe25e4b5756b03033e4819a5c5044ca353f2"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "277ec91f15ed7205e737a183fdb393aadd0d2f61", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=64a68ae69adf508c73e642ff8739d3e547878467", "patch": "@@ -477,7 +477,6 @@ fn build_module(\n                                 }],\n                             },\n                             did: None,\n-                            attrs: None,\n                         },\n                         true,\n                     )),"}, {"sha": "2b25c6a26bcc4c8e18ec8fea81c0332874066336", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=64a68ae69adf508c73e642ff8739d3e547878467", "patch": "@@ -2081,7 +2081,6 @@ crate enum ImportKind {\n crate struct ImportSource {\n     crate path: Path,\n     crate did: Option<DefId>,\n-    crate attrs: Option<Box<Attributes>>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "c2a971d6375133761279e2adbaba1f3cfab214f7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=64a68ae69adf508c73e642ff8739d3e547878467", "patch": "@@ -468,10 +468,10 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n }\n \n crate fn resolve_use_source(cx: &mut DocContext<'_>, path: Path) -> ImportSource {\n-    let did = if path.res.opt_def_id().is_none() { None } else { Some(register_res(cx, path.res)) };\n-    let attrs = did.map(|did| Box::new(cx.tcx.get_attrs(did).clean(cx)));\n-\n-    ImportSource { did, path, attrs }\n+    ImportSource {\n+        did: if path.res.opt_def_id().is_none() { None } else { Some(register_res(cx, path.res)) },\n+        path,\n+    }\n }\n \n crate fn enter_impl_trait<F, R>(cx: &mut DocContext<'_>, f: F) -> R"}, {"sha": "a303ca956d8fe9bd84c0ebaf429361e65cd85d4f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a68ae69adf508c73e642ff8739d3e547878467/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=64a68ae69adf508c73e642ff8739d3e547878467", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::dep_graph::DepContext;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n@@ -282,11 +283,19 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n             }\n \n             clean::ImportItem(ref import) => {\n-                let (stab, stab_tags) = if let (Some(def_id), Some(attrs)) =\n-                    (import.source.did, import.source.attrs.clone())\n-                {\n+                let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n+                    let import_attrs = Box::new(clean::Attributes::from_ast(\n+                        cx.tcx().sess().diagnostic(),\n+                        cx.tcx().get_attrs(import_def_id),\n+                        None,\n+                    ));\n+\n                     // Just need an item with the correct def_id and attrs\n-                    let import_item = clean::Item { def_id, attrs, ..myitem.clone() };\n+                    let import_item = clean::Item {\n+                        def_id: import_def_id,\n+                        attrs: import_attrs,\n+                        ..myitem.clone()\n+                    };\n \n                     let stab = import_item.stability_class(cx.tcx());\n                     let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));"}]}