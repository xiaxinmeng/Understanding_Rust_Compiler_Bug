{"sha": "14c24accbc4908e470ef615c1d18edba5262203a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzI0YWNjYmM0OTA4ZTQ3MGVmNjE1YzFkMThlZGJhNTI2MjIwM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T14:26:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T14:26:52Z"}, "message": "auto merge of #11271 : adridu59/rust/patch-io, r=huonw", "tree": {"sha": "fc7ae5d1d3a7106405eb147bba7d07d63cdc19cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7ae5d1d3a7106405eb147bba7d07d63cdc19cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c24accbc4908e470ef615c1d18edba5262203a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c24accbc4908e470ef615c1d18edba5262203a", "html_url": "https://github.com/rust-lang/rust/commit/14c24accbc4908e470ef615c1d18edba5262203a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c24accbc4908e470ef615c1d18edba5262203a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48dc2cbf2344d1237dd3e10ad274a5ded3e93677", "url": "https://api.github.com/repos/rust-lang/rust/commits/48dc2cbf2344d1237dd3e10ad274a5ded3e93677", "html_url": "https://github.com/rust-lang/rust/commit/48dc2cbf2344d1237dd3e10ad274a5ded3e93677"}, {"sha": "95ace50643218f97849a8073bb201583f9639fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ace50643218f97849a8073bb201583f9639fdb", "html_url": "https://github.com/rust-lang/rust/commit/95ace50643218f97849a8073bb201583f9639fdb"}], "stats": {"total": 144, "additions": 87, "deletions": 57}, "files": [{"sha": "52894c03e3ced8517f131ce0c257a00a6003cf58", "filename": "doc/tutorial-conditions.md", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/14c24accbc4908e470ef615c1d18edba5262203a/doc%2Ftutorial-conditions.md", "raw_url": "https://github.com/rust-lang/rust/raw/14c24accbc4908e470ef615c1d18edba5262203a/doc%2Ftutorial-conditions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-conditions.md?ref=14c24accbc4908e470ef615c1d18edba5262203a", "patch": "@@ -43,12 +43,13 @@ $ ./example numbers.txt\n \n An example program that does this task reads like this:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -71,10 +72,9 @@ fn main() {\n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n \n-    let args = std::os::args();\n-\n     // Path takes a generic by-value, rather than by reference\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n     let mut reader = BufferedReader::new(File::open(&path));\n \n     // 1. Iterate over the lines of our file.\n@@ -242,13 +242,14 @@ If the example is rewritten to use failure, these error cases can be trapped.\n In this rewriting, failures are trapped by placing the I/O logic in a sub-task,\n and trapping its exit status using `task::try`:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n use std::task;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -280,8 +281,8 @@ fn main() {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {\n@@ -346,12 +347,13 @@ If no handler is found, `Condition::raise` will fail the task with an appropriat\n Rewriting the example to use a condition in place of ignoring malformed lines makes it slightly longer,\n but similarly clear as the version that used `fail!` in the logic where the error occurs:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -378,8 +380,8 @@ fn main() {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {\n@@ -415,12 +417,13 @@ To trap a condition, use `Condition::trap` in some caller of the site that calls\n For example, this version of the program traps the `malformed_line` condition\n and replaces bad input lines with the pair `(-1,-1)`:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -452,8 +455,8 @@ fn main() {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {\n@@ -490,12 +493,13 @@ In the example program, the first form of the `malformed_line` API implicitly as\n This assumption may not be correct; some callers may wish to skip malformed lines, for example.\n Changing the condition's return type from `(int,int)` to `Option<(int,int)>` will suffice to support this type of recovery:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -528,8 +532,8 @@ fn main() {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {\n@@ -575,12 +579,13 @@ until all relevant combinations encountered in practice are encoded.\n In the example, suppose a third possible recovery form arose: reusing the previous value read.\n This can be encoded in the handler API by introducing a helper type: `enum MalformedLineFix`.\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -622,8 +627,8 @@ fn main() {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {\n@@ -699,12 +704,13 @@ task <unnamed> failed at 'called `Option::unwrap()` on a `None` value', .../libs\n To make the program robust &mdash; or at least flexible &mdash; in the face of this potential failure,\n a second condition and a helper function will suffice:\n \n-~~~~{.xfail-test}\n+~~~~\n # #[allow(unused_imports)];\n+# extern mod extra;\n use std::io::buffered::BufferedReader;\n-use std::io::fs::File;\n+use std::io::File;\n # mod BufferedReader {\n-#     use std::io::fs::File;\n+#     use std::io::File;\n #     use std::io::mem::MemReader;\n #     use std::io::buffered::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n@@ -760,8 +766,8 @@ fn parse_int(x: &str) -> int {\n \n fn read_int_pairs() -> ~[(int,int)] {\n     let mut pairs = ~[];\n-    let args = std::os::args();\n-    let path = Path::new(args.get_opt(1).expect(\"No input file parameter!\").as_slice());\n+#    let _g = std::io::ignore_io_error();\n+    let path = Path::new(&\"foo.txt\");\n \n     let mut reader = BufferedReader::new(File::open(&path));\n     for line in reader.lines() {"}, {"sha": "9c181aa56c22378785b58244049ae6a28406a8d1", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/14c24accbc4908e470ef615c1d18edba5262203a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c24accbc4908e470ef615c1d18edba5262203a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=14c24accbc4908e470ef615c1d18edba5262203a", "patch": "@@ -186,23 +186,29 @@ while still providing feedback about errors. The basic strategy:\n   so that nullable values do not have to be 'unwrapped' before use.\n \n These features combine in the API to allow for expressions like\n-`File::new(\"diary.txt\").write_line(\"met a girl\")` without having to\n-worry about whether \"diary.txt\" exists or whether the write\n-succeeds. As written, if either `new` or `write_line` encounters\n-an error the task will fail.\n-\n-If you wanted to handle the error though you might write\n-\n-    let mut error = None;\n-    do io_error::cond(|e: IoError| {\n-        error = Some(e);\n-    }).in {\n-        File::new(\"diary.txt\").write_line(\"met a girl\");\n-    }\n-\n-    if error.is_some() {\n-        println(\"failed to write my diary\");\n-    }\n+`File::create(&Path::new(\"diary.txt\")).write(bytes!(\"Met a girl.\\n\"))`\n+without having to worry about whether \"diary.txt\" exists or whether\n+the write succeeds. As written, if either `new` or `write_line`\n+encounters an error the task will fail.\n+\n+If you wanted to handle the error though you might write:\n+\n+```rust\n+use std::io::File;\n+use std::io::{IoError, io_error};\n+\n+let mut error = None;\n+io_error::cond.trap(|e: IoError| {\n+    error = Some(e);\n+}).inside(|| {\n+    File::create(&Path::new(\"diary.txt\")).write(bytes!(\"Met a girl.\\n\"));\n+});\n+\n+if error.is_some() {\n+    println(\"failed to write my diary\");\n+}\n+# ::std::io::fs::unlink(&Path::new(\"diary.txt\"));\n+```\n \n XXX: Need better condition handling syntax\n \n@@ -500,10 +506,16 @@ pub trait Reader {\n     ///\n     /// # Example\n     ///\n-    ///     let mut reader = BufferedReader::new(File::open(&Path::new(\"foo.txt\")));\n-    ///     for line in reader.lines() {\n-    ///         println(line);\n-    ///     }\n+    /// ```rust\n+    /// use std::io;\n+    /// # let _g = ::std::io::ignore_io_error();\n+    /// let mut reader = io::stdin();\n+    ///\n+    /// let mut bytes = [0, .. 10];\n+    /// reader.read(bytes);\n+    ///\n+    /// if reader.eof() { println(\"stdin() had at most 10 bytes of data.\"); }\n+    /// ```\n     ///\n     /// # Failure\n     ///\n@@ -1098,6 +1110,18 @@ pub trait Buffer: Reader {\n     /// encoded unicode codepoints. If a newline is encountered, then the\n     /// newline is contained in the returned string.\n     ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::io::buffered::BufferedReader;\n+    /// use std::io;\n+    /// # let _g = ::std::io::ignore_io_error();\n+    ///\n+    /// let mut reader = BufferedReader::new(io::stdin());\n+    ///\n+    /// let input = reader.read_line().unwrap_or(~\"nothing\");\n+    /// ```\n+    ///\n     /// # Failure\n     ///\n     /// This function will raise on the `io_error` condition (except for"}]}