{"sha": "3a3013613a437e0f10cf3d978c9352c94dc284df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzAxMzYxM2E0MzdlMGYxMGNmM2Q5NzhjOTM1MmM5NGRjMjg0ZGY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-02T15:07:04Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "rustc: Remove the unnecessary ast_ty_to_ty_cache.", "tree": {"sha": "42bcd6dec61dcbabcf2f0baaf99a280a7d39b4d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42bcd6dec61dcbabcf2f0baaf99a280a7d39b4d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a3013613a437e0f10cf3d978c9352c94dc284df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3013613a437e0f10cf3d978c9352c94dc284df", "html_url": "https://github.com/rust-lang/rust/commit/3a3013613a437e0f10cf3d978c9352c94dc284df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a3013613a437e0f10cf3d978c9352c94dc284df/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20652162ca5e330cb9d637924c6d93cb43fbb6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/20652162ca5e330cb9d637924c6d93cb43fbb6aa", "html_url": "https://github.com/rust-lang/rust/commit/20652162ca5e330cb9d637924c6d93cb43fbb6aa"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "a056ba588b807998d4675e4fe18156b1c0cb7a42", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -17,8 +17,7 @@ use hir;\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     Fn(DefId),\n-    SelfTy(Option<DefId>,                    // trait id\n-              Option<(ast::NodeId, ast::NodeId)>),   // (impl id, self type id)\n+    SelfTy(Option<DefId> /* trait */, Option<ast::NodeId> /* impl */),\n     Mod(DefId),\n     ForeignMod(DefId),\n     Static(DefId, bool /* is_mutbl */),"}, {"sha": "69e979f62735457abcef68c8fa43fd5add60907b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -356,11 +356,6 @@ pub struct GlobalCtxt<'tcx> {\n     // Cache for the type-contents routine. FIXME -- track deps?\n     pub tc_cache: RefCell<FnvHashMap<Ty<'tcx>, ty::contents::TypeContents>>,\n \n-    // Cache for various types within a method body and so forth.\n-    //\n-    // FIXME this should be made local to typeck, but it is currently used by one lint\n-    pub ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n-\n     // FIXME no dep tracking, but we should be able to remove this\n     pub ty_param_defs: RefCell<NodeMap<ty::TypeParameterDef<'tcx>>>,\n \n@@ -664,7 +659,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             tcache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             rcache: RefCell::new(FnvHashMap()),\n             tc_cache: RefCell::new(FnvHashMap()),\n-            ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             impl_or_trait_items: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_item_def_ids: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_items_cache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),"}, {"sha": "32434d40e61a9d4ece268d69dcc99162bb41f16b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -93,10 +93,8 @@ pub enum TypeVariants<'tcx> {\n     /// Substs here, possibly against intuition, *may* contain `TyParam`s.\n     /// That is, even after substitution it is possible that there are type\n     /// variables. This happens when the `TyEnum` corresponds to an enum\n-    /// definition and not a concrete use of it. To get the correct `TyEnum`\n-    /// from the tcx, use the `NodeId` from the `ast::Ty` and look it up in\n-    /// the `ast_ty_to_ty_cache`. This is probably true for `TyStruct` as\n-    /// well.\n+    /// definition and not a concrete use of it. This is true for `TyStruct`\n+    /// as well.\n     TyEnum(AdtDef<'tcx>, &'tcx Substs<'tcx>),\n \n     /// A structure type, defined with `struct`."}, {"sha": "6da2e5b17a5e8ebd8d45381fa27a4bfe37b3840c", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -362,11 +362,8 @@ impl tr for Def {\n         match *self {\n           Def::Fn(did) => Def::Fn(did.tr(dcx)),\n           Def::Method(did) => Def::Method(did.tr(dcx)),\n-          Def::SelfTy(opt_did, impl_ids) => { Def::SelfTy(opt_did.map(|did| did.tr(dcx)),\n-                                                                impl_ids.map(|(nid1, nid2)| {\n-                                                                    (dcx.tr_id(nid1),\n-                                                                     dcx.tr_id(nid2))\n-                                                                })) }\n+          Def::SelfTy(opt_did, impl_id) => { Def::SelfTy(opt_did.map(|did| did.tr(dcx)),\n+                                                         impl_id.map(|id| dcx.tr_id(id))) }\n           Def::Mod(did) => { Def::Mod(did.tr(dcx)) }\n           Def::ForeignMod(did) => { Def::ForeignMod(did.tr(dcx)) }\n           Def::Static(did, m) => { Def::Static(did.tr(dcx), m) }"}, {"sha": "fc048c86dc9ddff838ffe77d09451ffbb625b730", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -1938,7 +1938,7 @@ impl<'a> Resolver<'a> {\n                 // Resolve the self type.\n                 this.visit_ty(self_type);\n \n-                this.with_self_rib(Def::SelfTy(trait_id, Some((item_id, self_type.id))), |this| {\n+                this.with_self_rib(Def::SelfTy(trait_id, Some(item_id)), |this| {\n                     this.with_current_self_type(self_type, |this| {\n                         for impl_item in impl_items {\n                             this.resolve_visibility(&impl_item.vis);"}, {"sha": "9825829e3bdfc0c5e51e9c72ced6e4940c9dddcc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -1272,7 +1272,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx, 'tcx>,\n     // Find the type of the associated item, and the trait where the associated\n     // item is declared.\n     let bound = match (&ty.sty, ty_path_def) {\n-        (_, Def::SelfTy(Some(trait_did), Some((impl_id, _)))) => {\n+        (_, Def::SelfTy(Some(trait_did), Some(impl_id))) => {\n             // `Self` in an impl of a trait - we have a concrete self type and a\n             // trait reference.\n             let trait_ref = tcx.impl_trait_ref(tcx.map.local_def_id(impl_id)).unwrap();\n@@ -1479,17 +1479,14 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx, 'tcx>,\n             tcx.prohibit_type_params(base_segments);\n             tcx.mk_param(space, index, name)\n         }\n-        Def::SelfTy(_, Some((_, self_ty_id))) => {\n+        Def::SelfTy(_, Some(impl_id)) => {\n             // Self in impl (we know the concrete type).\n             tcx.prohibit_type_params(base_segments);\n-            if let Some(&ty) = tcx.ast_ty_to_ty_cache.borrow().get(&self_ty_id) {\n-                if let Some(free_substs) = this.get_free_substs() {\n-                    ty.subst(tcx, free_substs)\n-                } else {\n-                    ty\n-                }\n+            let ty = tcx.node_id_to_type(impl_id);\n+            if let Some(free_substs) = this.get_free_substs() {\n+                ty.subst(tcx, free_substs)\n             } else {\n-                span_bug!(span, \"self type has not been fully resolved\")\n+                ty\n             }\n         }\n         Def::SelfTy(Some(_), None) => {\n@@ -1585,12 +1582,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx, 'tcx>,\n \n     let tcx = this.tcx();\n \n-    if let Some(&ty) = tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n-        debug!(\"ast_ty_to_ty: id={:?} ty={:?} (cached)\", ast_ty.id, ty);\n-        return ty;\n-    }\n-\n-    let typ = match ast_ty.node {\n+    match ast_ty.node {\n         hir::TyVec(ref ty) => {\n             tcx.mk_slice(ast_ty_to_ty(this, rscope, &ty))\n         }\n@@ -1714,11 +1706,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx, 'tcx>,\n             // handled specially and will not descend into this routine.\n             this.ty_infer(None, None, None, ast_ty.span)\n         }\n-    };\n-\n-    debug!(\"ast_ty_to_ty: id={:?} ty={:?}\", ast_ty.id, typ);\n-    tcx.ast_ty_to_ty_cache.borrow_mut().insert(ast_ty.id, typ);\n-    return typ;\n+    }\n }\n \n pub fn ty_of_arg<'tcx>(this: &AstConv<'tcx, 'tcx>,"}, {"sha": "a89609fad6b6ecaf5bc7564193b35f3108db0af5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3013613a437e0f10cf3d978c9352c94dc284df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a3013613a437e0f10cf3d978c9352c94dc284df", "patch": "@@ -2696,7 +2696,7 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Static(i, _) => (i, TypeStatic),\n         Def::Variant(i, _) => (i, TypeEnum),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeTrait),\n-        Def::SelfTy(_, Some((impl_id, _))) => return cx.map.local_def_id(impl_id),\n+        Def::SelfTy(_, Some(impl_id)) => return cx.map.local_def_id(impl_id),\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }"}]}