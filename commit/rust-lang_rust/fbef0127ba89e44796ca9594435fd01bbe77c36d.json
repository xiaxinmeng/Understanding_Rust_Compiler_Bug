{"sha": "fbef0127ba89e44796ca9594435fd01bbe77c36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZWYwMTI3YmE4OWU0NDc5NmNhOTU5NDQzNWZkMDFiYmU3N2MzNmQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-24T19:06:03Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Small style fix", "tree": {"sha": "81999ed03245179b26df405bba3b6bf013223454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81999ed03245179b26df405bba3b6bf013223454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbef0127ba89e44796ca9594435fd01bbe77c36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbef0127ba89e44796ca9594435fd01bbe77c36d", "html_url": "https://github.com/rust-lang/rust/commit/fbef0127ba89e44796ca9594435fd01bbe77c36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbef0127ba89e44796ca9594435fd01bbe77c36d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b892a48740eef7a505bfbe2213c42c71e87f0bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b892a48740eef7a505bfbe2213c42c71e87f0bea", "html_url": "https://github.com/rust-lang/rust/commit/b892a48740eef7a505bfbe2213c42c71e87f0bea"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "0ab5b9ef528cdcb1741b473e60afd0491b24acd4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fbef0127ba89e44796ca9594435fd01bbe77c36d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbef0127ba89e44796ca9594435fd01bbe77c36d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fbef0127ba89e44796ca9594435fd01bbe77c36d", "patch": "@@ -416,20 +416,27 @@ fn loop_turn(\n \n                 if Some(resp.id) == loop_state.configuration_request_id {\n                     loop_state.configuration_request_id = None;\n-                    if let Some(err) = resp.error {\n-                        log::error!(\"failed to fetch the server settings: {:?}\", err)\n-                    } else if let Some(result) = resp.result {\n-                        let new_config = serde_json::from_value::<Vec<ServerConfig>>(result)?\n-                            .first()\n-                            .expect(\"The client is expected to always send a non-empty config data\")\n-                            .to_owned();\n-                        world_state.update_configuration(\n-                            new_config.lru_capacity,\n-                            get_options(&new_config, text_document_caps),\n-                            get_feature_flags(&new_config, connection),\n-                        );\n-                    } else {\n-                        log::error!(\"received empty server settings response from the client\")\n+                    let Response { error, result, .. } = resp;\n+                    match (error, result) {\n+                        (Some(err), _) => {\n+                            log::error!(\"failed to fetch the server settings: {:?}\", err)\n+                        }\n+                        (None, Some(result)) => {\n+                            let new_config = serde_json::from_value::<Vec<ServerConfig>>(result)?\n+                                .first()\n+                                .expect(\n+                                    \"The client is expected to always send a non-empty config data\",\n+                                )\n+                                .to_owned();\n+                            world_state.update_configuration(\n+                                new_config.lru_capacity,\n+                                get_options(&new_config, text_document_caps),\n+                                get_feature_flags(&new_config, connection),\n+                            );\n+                        }\n+                        (None, None) => {\n+                            log::error!(\"received empty server settings response from the client\")\n+                        }\n                     }\n                 }\n             }"}]}