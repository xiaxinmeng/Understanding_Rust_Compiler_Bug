{"sha": "09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Y2JjZGMyYzMxMzI1ZWM2NzA0N2M1YjljZTg3ZGVlMDNhZjYyZGM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:34:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:58:50Z"}, "message": "Add BTreeMap::try_insert and btree_map::OccupiedError.", "tree": {"sha": "9950c952d581034ce6c3c0f366aa6c162ce276c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9950c952d581034ce6c3c0f366aa6c162ce276c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "html_url": "https://github.com/rust-lang/rust/commit/09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09cbcdc2c31325ec67047c5b9ce87dee03af62dc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f32f62aa5ceba1b795f3702e502d8473238be6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f32f62aa5ceba1b795f3702e502d8473238be6b", "html_url": "https://github.com/rust-lang/rust/commit/7f32f62aa5ceba1b795f3702e502d8473238be6b"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "12a7322d8e7ee481f850b1f86f6c827a07c9af37", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/09cbcdc2c31325ec67047c5b9ce87dee03af62dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cbcdc2c31325ec67047c5b9ce87dee03af62dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "patch": "@@ -14,7 +14,7 @@ use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n \n mod entry;\n-pub use entry::{Entry, OccupiedEntry, VacantEntry};\n+pub use entry::{Entry, OccupiedEntry, OccupiedError, VacantEntry};\n use Entry::*;\n \n /// Minimum number of elements in nodes that are not a root.\n@@ -836,6 +836,40 @@ impl<K, V> BTreeMap<K, V> {\n         }\n     }\n \n+    /// Tries to insert a key-value pair into the map, and returns\n+    /// a mutable reference to the value in the entry.\n+    ///\n+    /// If the map already had this key present, nothing is updated, and\n+    /// an error containing the occupied entry and the value is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(map_try_insert)]\n+    ///\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n+    ///\n+    /// let err = map.try_insert(37, \"b\").unwrap_err();\n+    /// assert_eq!(err.entry.key(), &37);\n+    /// assert_eq!(err.entry.get(), &\"a\");\n+    /// assert_eq!(err.value, \"b\");\n+    /// ```\n+    #[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+    pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>>\n+    where\n+        K: Ord,\n+    {\n+        match self.entry(key) {\n+            Occupied(entry) => Err(OccupiedError { entry, value }),\n+            Vacant(entry) => Ok(entry.insert(value)),\n+        }\n+    }\n+\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///"}, {"sha": "bd7114f8a82b70ec7a248879f879019be5cac9c8", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09cbcdc2c31325ec67047c5b9ce87dee03af62dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cbcdc2c31325ec67047c5b9ce87dee03af62dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "patch": "@@ -71,6 +71,27 @@ impl<K: Debug + Ord, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     }\n }\n \n+/// The error returned by [`try_insert`](BTreeMap::try_insert) when the key already exists.\n+///\n+/// Contains the occupied entry, and the value that was not inserted.\n+#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+pub struct OccupiedError<'a, K: 'a, V: 'a> {\n+    /// The entry in the map that was already occupied.\n+    pub entry: OccupiedEntry<'a, K, V>,\n+    /// The value which was not inserted, because the entry was already occupied.\n+    pub value: V,\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+impl<K: Debug + Ord, V: Debug> Debug for OccupiedError<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OccupiedError\")\n+            .field(\"entry\", &self.entry)\n+            .field(\"value\", &self.value)\n+            .finish()\n+    }\n+}\n+\n impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry."}]}