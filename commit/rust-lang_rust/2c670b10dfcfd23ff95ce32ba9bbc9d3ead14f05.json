{"sha": "2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "node_id": "C_kwDOAAsO6NoAKDJjNjcwYjEwZGZjZmQyM2ZmOTVjZTMyYmE5YmJjOWQzZWFkMTRmMDU", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-02-25T06:11:20Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-03-20T01:14:11Z"}, "message": "add new version of backtrace api using flags=1", "tree": {"sha": "cb063a2c876f75ed0e912042873e24eac4fca524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb063a2c876f75ed0e912042873e24eac4fca524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "html_url": "https://github.com/rust-lang/rust/commit/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a284d4f551ee12f7761128998efccdabebc4922f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a284d4f551ee12f7761128998efccdabebc4922f", "html_url": "https://github.com/rust-lang/rust/commit/a284d4f551ee12f7761128998efccdabebc4922f"}], "stats": {"total": 413, "additions": 333, "deletions": 80}, "files": [{"sha": "086ed1b0efa8e230f626bb7c982fd0c990ba535b", "filename": "README.md", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -358,23 +358,28 @@ extern \"Rust\" {\n     /// `ptr` has to point to the beginning of an allocated block.\n     fn miri_static_root(ptr: *const u8);\n \n+    // Miri-provided extern function to get the amount of frames in the current backtrace.\n+    // The `flags` argument must be `0`.\n+    fn miri_backtrace_size(flags: u64) -> usize;\n+\n     /// Miri-provided extern function to obtain a backtrace of the current call stack.\n-    /// This returns a boxed slice of pointers - each pointer is an opaque value\n-    /// that is only useful when passed to `miri_resolve_frame`\n-    /// The `flags` argument must be `0`.\n-    fn miri_get_backtrace(flags: u64) -> Box<[*mut ()]>;\n+    /// This writes a slice of pointers into `buf` - each pointer is an opaque value\n+    /// that is only useful when passed to `miri_resolve_frame`.\n+    /// `buf` must have `miri_backtrace_size(0) * pointer_size` bytes of space.\n+    /// The `flags` argument must be `1`.\n+    fn miri_get_backtrace(flags: u64, buf: *mut *mut ());\n \n     /// Miri-provided extern function to resolve a frame pointer obtained\n-    /// from `miri_get_backtrace`. The `flags` argument must be `0`,\n+    /// from `miri_get_backtrace`. The `flags` argument must be `1`,\n     /// and `MiriFrame` should be declared as follows:\n     ///\n     /// ```rust\n     /// #[repr(C)]\n     /// struct MiriFrame {\n-    ///     // The name of the function being executed, encoded in UTF-8\n-    ///     name: Box<[u8]>,\n-    ///     // The filename of the function being executed, encoded in UTF-8\n-    ///     filename: Box<[u8]>,\n+    ///     // The size of the name of the function being executed, encoded in UTF-8\n+    ///     name_len: usize,\n+    ///     // The size of filename of the function being executed, encoded in UTF-8\n+    ///     filename_len: usize,\n     ///     // The line number currently being executed in `filename`, starting from '1'.\n     ///     lineno: u32,\n     ///     // The column number currently being executed in `filename`, starting from '1'.\n@@ -390,6 +395,11 @@ extern \"Rust\" {\n     /// This function can be called on any thread (not just the one which obtained `frame`).\n     fn miri_resolve_frame(frame: *mut (), flags: u64) -> MiriFrame;\n \n+    /// Miri-provided extern function to get the name and filename of the frame provided by `miri_resolve_frame`.\n+    /// `name_buf` and `filename_buf` should be allocated with the `name_len` and `filename_len` fields of `MiriFrame`.\n+    /// The flags argument must be `0`.\n+    fn miri_resolve_frame_names(ptr: *mut (), flags: u64, name_buf: *mut u8, filename_buf: *mut u8);\n+\n     /// Miri-provided extern function to begin unwinding with the given payload.\n     ///\n     /// This is internal and unstable and should not be used; we give it here"}, {"sha": "52a8ac98f2de9d90eb918fb59113df8b20852609", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 148, "deletions": 52, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -1,29 +1,49 @@\n use crate::*;\n use rustc_ast::ast::Mutability;\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{self, TypeAndMut};\n-use rustc_span::{BytePos, Symbol};\n+use rustc_middle::ty::{self, Instance, TypeAndMut};\n+use rustc_span::{BytePos, Loc, Symbol};\n use rustc_target::{abi::Size, spec::abi::Abi};\n use std::convert::TryInto as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    fn handle_miri_get_backtrace(\n+    fn handle_miri_backtrace_size(\n         &mut self,\n         abi: Abi,\n         link_name: Symbol,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let tcx = this.tcx;\n         let &[ref flags] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n \n         let flags = this.read_scalar(flags)?.to_u64()?;\n         if flags != 0 {\n-            throw_unsup_format!(\"unknown `miri_get_backtrace` flags {}\", flags);\n+            throw_unsup_format!(\"unknown `miri_backtrace_size` flags {}\", flags);\n         }\n \n+        let frame_count = this.active_thread_stack().len();\n+\n+        this.write_scalar(Scalar::from_machine_usize(frame_count.try_into().unwrap(), this), dest)\n+    }\n+\n+    fn handle_miri_get_backtrace(\n+        &mut self,\n+        abi: Abi,\n+        link_name: Symbol,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: &PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let tcx = this.tcx;\n+\n+        let flags = if let Some(flags_op) = args.get(0) {\n+            this.read_scalar(flags_op)?.to_u64()?\n+        } else {\n+            throw_ub_format!(\"expected at least 1 argument\")\n+        };\n+\n         let mut data = Vec::new();\n         for frame in this.active_thread_stack().iter().rev() {\n             let mut span = frame.current_span();\n@@ -49,46 +69,60 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             })\n             .collect();\n \n-        let len = ptrs.len();\n+        let len: u64 = ptrs.len().try_into().unwrap();\n \n         let ptr_ty = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n \n-        let array_ty = tcx.mk_array(ptr_ty, ptrs.len().try_into().unwrap());\n+        let array_layout = this.layout_of(tcx.mk_array(ptr_ty, len)).unwrap();\n \n-        // Write pointers into array\n-        let alloc =\n-            this.allocate(this.layout_of(array_ty).unwrap(), MiriMemoryKind::Rust.into())?;\n-        for (i, ptr) in ptrs.into_iter().enumerate() {\n-            let place = this.mplace_index(&alloc, i as u64)?;\n-            this.write_pointer(ptr, &place.into())?;\n-        }\n+        match flags {\n+            // storage for pointers is allocated by miri\n+            // deallocating the slice is undefined behavior with a custom global allocator\n+            0 => {\n+                let &[_flags] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+\n+                let alloc = this.allocate(array_layout, MiriMemoryKind::Rust.into())?;\n+\n+                // Write pointers into array\n+                for (i, ptr) in ptrs.into_iter().enumerate() {\n+                    let place = this.mplace_index(&alloc, i as u64)?;\n+\n+                    this.write_pointer(ptr, &place.into())?;\n+                }\n+\n+                this.write_immediate(\n+                    Immediate::new_slice(Scalar::from_maybe_pointer(alloc.ptr, this), len, this),\n+                    dest,\n+                )?;\n+            }\n+            // storage for pointers is allocated by the caller\n+            1 => {\n+                let &[_flags, ref buf] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+\n+                let buf_place = this.deref_operand(buf)?;\n+\n+                let ptr_layout = this.layout_of(ptr_ty)?;\n+\n+                for (i, ptr) in ptrs.into_iter().enumerate() {\n+                    let offset = ptr_layout.size * i.try_into().unwrap();\n+\n+                    let op_place =\n+                        buf_place.offset(offset, MemPlaceMeta::None, ptr_layout, this)?;\n+\n+                    this.write_pointer(ptr, &op_place.into())?;\n+                }\n+            }\n+            _ => throw_unsup_format!(\"unknown `miri_get_backtrace` flags {}\", flags),\n+        };\n \n-        this.write_immediate(\n-            Immediate::new_slice(\n-                Scalar::from_maybe_pointer(alloc.ptr, this),\n-                len.try_into().unwrap(),\n-                this,\n-            ),\n-            dest,\n-        )?;\n         Ok(())\n     }\n \n-    fn handle_miri_resolve_frame(\n+    fn resolve_frame_pointer(\n         &mut self,\n-        abi: Abi,\n-        link_name: Symbol,\n-        args: &[OpTy<'tcx, Tag>],\n-        dest: &PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        ptr: &OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, (Instance<'tcx>, Loc, String, String)> {\n         let this = self.eval_context_mut();\n-        let tcx = this.tcx;\n-        let &[ref ptr, ref flags] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-\n-        let flags = this.read_scalar(flags)?.to_u64()?;\n-        if flags != 0 {\n-            throw_unsup_format!(\"unknown `miri_resolve_frame` flags {}\", flags);\n-        }\n \n         let ptr = this.read_pointer(ptr)?;\n         // Take apart the pointer, we need its pieces.\n@@ -101,6 +135,29 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 throw_ub_format!(\"expected function pointer, found {:?}\", ptr);\n             };\n \n+        let lo =\n+            this.tcx.sess.source_map().lookup_char_pos(BytePos(offset.bytes().try_into().unwrap()));\n+\n+        let name = fn_instance.to_string();\n+        let filename = lo.file.name.prefer_remapped().to_string();\n+\n+        Ok((fn_instance, lo, name, filename))\n+    }\n+\n+    fn handle_miri_resolve_frame(\n+        &mut self,\n+        abi: Abi,\n+        link_name: Symbol,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: &PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let &[ref ptr, ref flags] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+\n+        let flags = this.read_scalar(flags)?.to_u64()?;\n+\n+        let (fn_instance, lo, name, filename) = this.resolve_frame_pointer(ptr)?;\n+\n         // Reconstruct the original function pointer,\n         // which we pass to user code.\n         let fn_ptr = this.memory.create_fn_alloc(FnVal::Instance(fn_instance));\n@@ -115,23 +172,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             );\n         }\n \n-        let pos = BytePos(offset.bytes().try_into().unwrap());\n-        let name = fn_instance.to_string();\n-\n-        let lo = tcx.sess.source_map().lookup_char_pos(pos);\n-\n-        let filename = lo.file.name.prefer_remapped().to_string();\n         let lineno: u32 = lo.line as u32;\n         // `lo.col` is 0-based - add 1 to make it 1-based for the caller.\n         let colno: u32 = lo.col.0 as u32 + 1;\n \n-        // These are \"mutable\" allocations as we consider them to be owned by the callee.\n-        let name_alloc = this.allocate_str(&name, MiriMemoryKind::Rust.into(), Mutability::Mut);\n-        let filename_alloc =\n-            this.allocate_str(&filename, MiriMemoryKind::Rust.into(), Mutability::Mut);\n-        let lineno_alloc = Scalar::from_u32(lineno);\n-        let colno_alloc = Scalar::from_u32(colno);\n-\n         let dest = this.force_allocation(dest)?;\n         if let ty::Adt(adt, _) = dest.layout.ty.kind() {\n             if !adt.repr.c() {\n@@ -141,10 +185,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n \n-        this.write_immediate(name_alloc.to_ref(this), &this.mplace_field(&dest, 0)?.into())?;\n-        this.write_immediate(filename_alloc.to_ref(this), &this.mplace_field(&dest, 1)?.into())?;\n-        this.write_scalar(lineno_alloc, &this.mplace_field(&dest, 2)?.into())?;\n-        this.write_scalar(colno_alloc, &this.mplace_field(&dest, 3)?.into())?;\n+        match flags {\n+            0 => {\n+                // These are \"mutable\" allocations as we consider them to be owned by the callee.\n+                let name_alloc =\n+                    this.allocate_str(&name, MiriMemoryKind::Rust.into(), Mutability::Mut);\n+                let filename_alloc =\n+                    this.allocate_str(&filename, MiriMemoryKind::Rust.into(), Mutability::Mut);\n+\n+                this.write_immediate(\n+                    name_alloc.to_ref(this),\n+                    &this.mplace_field(&dest, 0)?.into(),\n+                )?;\n+                this.write_immediate(\n+                    filename_alloc.to_ref(this),\n+                    &this.mplace_field(&dest, 1)?.into(),\n+                )?;\n+            }\n+            1 => {\n+                this.write_scalar(\n+                    Scalar::from_machine_usize(name.len().try_into().unwrap(), this),\n+                    &this.mplace_field(&dest, 0)?.into(),\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_machine_usize(filename.len().try_into().unwrap(), this),\n+                    &this.mplace_field(&dest, 1)?.into(),\n+                )?;\n+            }\n+            _ => throw_unsup_format!(\"unknown `miri_resolve_frame` flags {}\", flags),\n+        }\n+\n+        this.write_scalar(Scalar::from_u32(lineno), &this.mplace_field(&dest, 2)?.into())?;\n+        this.write_scalar(Scalar::from_u32(colno), &this.mplace_field(&dest, 3)?.into())?;\n \n         // Support a 4-field struct for now - this is deprecated\n         // and slated for removal.\n@@ -154,4 +226,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(())\n     }\n+\n+    fn handle_miri_resolve_frame_names(\n+        &mut self,\n+        abi: Abi,\n+        link_name: Symbol,\n+        args: &[OpTy<'tcx, Tag>],\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        let &[ref ptr, ref flags, ref name_ptr, ref filename_ptr] =\n+            this.check_shim(abi, Abi::Rust, link_name, args)?;\n+\n+        let flags = this.read_scalar(flags)?.to_u64()?;\n+        if flags != 0 {\n+            throw_unsup_format!(\"unknown `miri_resolve_frame_names` flags {}\", flags);\n+        }\n+\n+        let (_, _, name, filename) = this.resolve_frame_pointer(ptr)?;\n+\n+        this.memory.write_bytes(this.read_pointer(name_ptr)?, name.bytes())?;\n+        this.memory.write_bytes(this.read_pointer(filename_ptr)?, filename.bytes())?;\n+\n+        Ok(())\n+    }\n }"}, {"sha": "ecffd310de5698c410f1f6d7c374fc86f89b77ef", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -380,6 +380,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.machine.static_roots.push(alloc_id);\n             }\n \n+            // Obtains the size of a Miri backtrace. See the README for details.\n+            \"miri_backtrace_size\" => {\n+                this.handle_miri_backtrace_size(abi, link_name, args, dest)?;\n+            }\n+\n             // Obtains a Miri backtrace. See the README for details.\n             \"miri_get_backtrace\" => {\n                 // `check_shim` happens inside `handle_miri_get_backtrace`.\n@@ -392,6 +397,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.handle_miri_resolve_frame(abi, link_name, args, dest)?;\n             }\n \n+            // Writes the function and file names of a Miri backtrace frame into a user provided buffer. See the README for details.\n+            \"miri_resolve_frame_names\" => {\n+                this.handle_miri_resolve_frame_names(abi, link_name, args)?;\n+            }\n \n             // Standard C allocation\n             \"malloc\" => {"}, {"sha": "5f30513e931ef1a580559ba77ab02e74999a7fdf", "filename": "tests/compile-fail/backtrace/bad-backtrace-flags.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,9 @@\n+extern \"Rust\" {\n+    fn miri_get_backtrace(flags: u64, buf: *mut *mut ());\n+}\n+\n+fn main() {\n+    unsafe {\n+        miri_get_backtrace(2, 0 as *mut _); //~ ERROR  unsupported operation: unknown `miri_get_backtrace` flags 2\n+    }\n+}"}, {"sha": "5a30253a893b8a17e02f1d011c6aac91bf51cdea", "filename": "tests/compile-fail/backtrace/bad-backtrace-resolve-flags.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,25 @@\n+#[repr(C)]\n+struct MiriFrame {\n+    name_len: usize,\n+    filename_len: usize,\n+    lineno: u32,\n+    colno: u32,\n+    fn_ptr: *mut (),\n+}\n+\n+extern \"Rust\" {\n+    fn miri_backtrace_size(flags: u64) -> usize;\n+    fn miri_get_backtrace(flags: u64, buf: *mut *mut ());\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64) -> MiriFrame;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n+\n+        miri_get_backtrace(1, buf.as_mut_ptr());\n+\n+        // miri_resolve_frame will error from an invalid backtrace before it will from invalid flags\n+        miri_resolve_frame(buf[0], 2); //~ ERROR  unsupported operation: unknown `miri_resolve_frame` flags 2\n+    }\n+}"}, {"sha": "8e69a275753f173e5e628f6fbe8335b42a31745d", "filename": "tests/compile-fail/backtrace/bad-backtrace-resolve-names-flags.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,16 @@\n+extern \"Rust\" {\n+    fn miri_backtrace_size(flags: u64) -> usize;\n+    fn miri_get_backtrace(flags: u64, buf: *mut *mut ());\n+    fn miri_resolve_frame_names(ptr: *mut (), flags: u64, name_buf: *mut u8, filename_buf: *mut u8);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n+\n+        miri_get_backtrace(1, buf.as_mut_ptr());\n+\n+        // miri_resolve_frame_names will error from an invalid backtrace before it will from invalid flags\n+        miri_resolve_frame_names(buf[0], 2, 0 as *mut _, 0 as *mut _); //~ ERROR  unsupported operation: unknown `miri_resolve_frame_names` flags 2\n+    }\n+}"}, {"sha": "25eded9e48df792f44de4d5fbd96e24644323224", "filename": "tests/compile-fail/backtrace/bad-backtrace-size-flags.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,9 @@\n+extern \"Rust\" {\n+    fn miri_backtrace_size(flags: u64) -> usize;\n+}\n+\n+fn main() {\n+    unsafe {\n+        miri_backtrace_size(2); //~ ERROR  unsupported operation: unknown `miri_backtrace_size` flags 2\n+    }\n+}"}, {"sha": "4579b5d0ade89bd1830a98e6a87ab6c1b54eb63a", "filename": "tests/compile-fail/backtrace/bad-backtrace-version.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a284d4f551ee12f7761128998efccdabebc4922f/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a284d4f551ee12f7761128998efccdabebc4922f/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs?ref=a284d4f551ee12f7761128998efccdabebc4922f", "patch": "@@ -1,9 +0,0 @@\n-extern \"Rust\" {\n-    fn miri_resolve_frame(ptr: *mut (), flags: u64);\n-}\n-\n-fn main() {\n-    unsafe {\n-        miri_resolve_frame(0 as *mut _, 1); //~ ERROR  unsupported operation: unknown `miri_resolve_frame` flags 1\n-    }\n-}"}, {"sha": "cb3706e9f513271e37eb8e9a273f0256e217941a", "filename": "tests/run-pass/backtrace-api-v0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v0.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "previous_filename": "tests/run-pass/backtrace-api.rs"}, {"sha": "8a697a44ea9dc9d8674ffe8a8d864364f509239c", "filename": "tests/run-pass/backtrace-api-v0.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v0.stderr?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -1,8 +1,8 @@\n-$DIR/backtrace-api.rs:13:59 (func_d)\n-$DIR/backtrace-api.rs:12:50 (func_c)\n-$DIR/backtrace-api.rs:6:53 (func_b)\n-$DIR/backtrace-api.rs:5:50 (func_a)\n-$DIR/backtrace-api.rs:17:18 (main)\n+$DIR/backtrace-api-v0.rs:13:59 (func_d)\n+$DIR/backtrace-api-v0.rs:12:50 (func_c)\n+$DIR/backtrace-api-v0.rs:6:53 (func_b)\n+$DIR/backtrace-api-v0.rs:5:50 (func_a)\n+$DIR/backtrace-api-v0.rs:17:18 (main)\n RUSTLIB/core/src/ops/function.rs:LL:COL (<fn() as std::ops::FnOnce<()>>::call_once - shim(fn()))\n RUSTLIB/std/src/sys_common/backtrace.rs:LL:COL (std::sys_common::backtrace::__rust_begin_short_backtrace)\n RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start::{closure#0})", "previous_filename": "tests/run-pass/backtrace-api.stderr"}, {"sha": "c80a3f3bbcab610e851b1bd4d52ea80ac2f74453", "filename": "tests/run-pass/backtrace-api-v0.stdout", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v0.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v0.stdout?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,5 @@\n+$DIR/backtrace-api-v0.rs:13:59 (func_d)\n+$DIR/backtrace-api-v0.rs:12:50 (func_c)\n+$DIR/backtrace-api-v0.rs:6:53 (func_b::<u8>)\n+$DIR/backtrace-api-v0.rs:5:50 (func_a)\n+$DIR/backtrace-api-v0.rs:17:18 (main)"}, {"sha": "7b72c85812eb017835f60b156c44691c59aab418", "filename": "tests/run-pass/backtrace-api-v1.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v1.rs?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,65 @@\n+// normalize-stderr-test \".*/(rust[^/]*|checkout)/library/\" -> \"RUSTLIB/\"\n+// normalize-stderr-test \"RUSTLIB/(.*):\\d+:\\d+ \"-> \"RUSTLIB/$1:LL:COL \"\n+// normalize-stderr-test \"::<.*>\" -> \"\"\n+\n+#[inline(never)] fn func_a() -> Box<[*mut ()]> { func_b::<u8>() }\n+#[inline(never)] fn func_b<T>() -> Box<[*mut ()]> { func_c() }\n+\n+macro_rules! invoke_func_d {\n+    () => { func_d() }\n+}\n+\n+#[inline(never)] fn func_c() -> Box<[*mut ()]> { invoke_func_d!() }\n+#[inline(never)] fn func_d() -> Box<[*mut ()]> { unsafe { let count = miri_backtrace_size(0); let mut buf = vec![std::ptr::null_mut(); count]; miri_get_backtrace(1, buf.as_mut_ptr()); buf.into() } }\n+\n+fn main() {\n+    let mut seen_main = false;\n+    let frames = func_a();\n+    for frame in frames.into_iter() {\n+        let miri_frame = unsafe { miri_resolve_frame(*frame, 1) };\n+\n+        let mut name = vec![0; miri_frame.name_len];\n+        let mut filename = vec![0; miri_frame.filename_len];\n+\n+        unsafe {\n+            miri_resolve_frame_names(*frame, 0, name.as_mut_ptr(), filename.as_mut_ptr());\n+        }\n+        \n+        let name = String::from_utf8(name).unwrap();\n+        let filename = String::from_utf8(filename).unwrap();\n+\n+        if name == \"func_a\" {\n+            assert_eq!(func_a as *mut (), miri_frame.fn_ptr);\n+        }\n+\n+        // Print every frame to stderr.\n+        let out = format!(\"{}:{}:{} ({})\", filename, miri_frame.lineno, miri_frame.colno, name);\n+        eprintln!(\"{}\", out);\n+        // Print the 'main' frame (and everything before it) to stdout, skipping\n+        // the printing of internal (and possibly fragile) libstd frames.\n+        if !seen_main {\n+            println!(\"{}\", out);\n+            seen_main = name == \"main\";\n+        }\n+    }\n+}\n+\n+// This goes at the bottom of the file so that we can change it\n+// without disturbing line numbers of the functions in the backtrace.\n+\n+extern \"Rust\" {\n+    fn miri_backtrace_size(flags: u64) -> usize;\n+    fn miri_get_backtrace(flags: u64, buf: *mut *mut ());\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64) -> MiriFrame;\n+    fn miri_resolve_frame_names(ptr: *mut (), flags: u64, name_buf: *mut u8, filename_buf: *mut u8);\n+}\n+\n+#[derive(Debug)]\n+#[repr(C)]\n+struct MiriFrame {\n+    name_len: usize,\n+    filename_len: usize,\n+    lineno: u32,\n+    colno: u32,\n+    fn_ptr: *mut (),\n+}\n\\ No newline at end of file"}, {"sha": "806a1c60f5a04849d34e382c4abc6720f272862c", "filename": "tests/run-pass/backtrace-api-v1.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v1.stderr?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,18 @@\n+$DIR/backtrace-api-v1.rs:13:144 (func_d)\n+$DIR/backtrace-api-v1.rs:12:50 (func_c)\n+$DIR/backtrace-api-v1.rs:6:53 (func_b)\n+$DIR/backtrace-api-v1.rs:5:50 (func_a)\n+$DIR/backtrace-api-v1.rs:17:18 (main)\n+RUSTLIB/core/src/ops/function.rs:LL:COL (<fn() as std::ops::FnOnce<()>>::call_once - shim(fn()))\n+RUSTLIB/std/src/sys_common/backtrace.rs:LL:COL (std::sys_common::backtrace::__rust_begin_short_backtrace)\n+RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start::{closure#0})\n+RUSTLIB/core/src/ops/function.rs:LL:COL (std::ops::function::impls::call_once)\n+RUSTLIB/std/src/panicking.rs:LL:COL (std::panicking::r#try::do_call)\n+RUSTLIB/std/src/panicking.rs:LL:COL (std::panicking::r#try)\n+RUSTLIB/std/src/panic.rs:LL:COL (std::panic::catch_unwind)\n+RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start_internal::{closure#2})\n+RUSTLIB/std/src/panicking.rs:LL:COL (std::panicking::r#try::do_call)\n+RUSTLIB/std/src/panicking.rs:LL:COL (std::panicking::r#try)\n+RUSTLIB/std/src/panic.rs:LL:COL (std::panic::catch_unwind)\n+RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start_internal)\n+RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start)"}, {"sha": "2670d560eb193b23cfed882af40ab2e88da188b4", "filename": "tests/run-pass/backtrace-api-v1.stdout", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05/tests%2Frun-pass%2Fbacktrace-api-v1.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v1.stdout?ref=2c670b10dfcfd23ff95ce32ba9bbc9d3ead14f05", "patch": "@@ -0,0 +1,5 @@\n+$DIR/backtrace-api-v1.rs:13:144 (func_d)\n+$DIR/backtrace-api-v1.rs:12:50 (func_c)\n+$DIR/backtrace-api-v1.rs:6:53 (func_b::<u8>)\n+$DIR/backtrace-api-v1.rs:5:50 (func_a)\n+$DIR/backtrace-api-v1.rs:17:18 (main)"}, {"sha": "175ff3b82946194c62ffdf20cf9de0ece53aaa8c", "filename": "tests/run-pass/backtrace-api.stdout", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a284d4f551ee12f7761128998efccdabebc4922f/tests%2Frun-pass%2Fbacktrace-api.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a284d4f551ee12f7761128998efccdabebc4922f/tests%2Frun-pass%2Fbacktrace-api.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api.stdout?ref=a284d4f551ee12f7761128998efccdabebc4922f", "patch": "@@ -1,5 +0,0 @@\n-$DIR/backtrace-api.rs:13:59 (func_d)\n-$DIR/backtrace-api.rs:12:50 (func_c)\n-$DIR/backtrace-api.rs:6:53 (func_b::<u8>)\n-$DIR/backtrace-api.rs:5:50 (func_a)\n-$DIR/backtrace-api.rs:17:18 (main)"}]}