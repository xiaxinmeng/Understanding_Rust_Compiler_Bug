{"sha": "f19488064a4752703fde8a3596a9d90ca2095534", "node_id": "C_kwDOAAsO6NoAKGYxOTQ4ODA2NGE0NzUyNzAzZmRlOGEzNTk2YTlkOTBjYTIwOTU1MzQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-14T02:55:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-15T18:15:41Z"}, "message": "Suggest constraining type parameter with `Clone`\n\nFix #34896.", "tree": {"sha": "85707ce865df42a8ca156f99fc45d9efd6d29637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85707ce865df42a8ca156f99fc45d9efd6d29637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19488064a4752703fde8a3596a9d90ca2095534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19488064a4752703fde8a3596a9d90ca2095534", "html_url": "https://github.com/rust-lang/rust/commit/f19488064a4752703fde8a3596a9d90ca2095534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19488064a4752703fde8a3596a9d90ca2095534/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984eab57f708e62c09b3d708033fe620130b5f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/984eab57f708e62c09b3d708033fe620130b5f39", "html_url": "https://github.com/rust-lang/rust/commit/984eab57f708e62c09b3d708033fe620130b5f39"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "08ef2484776b2df18f147debffe7f789f0f81e3d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f19488064a4752703fde8a3596a9d90ca2095534/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19488064a4752703fde8a3596a9d90ca2095534/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=f19488064a4752703fde8a3596a9d90ca2095534", "patch": "@@ -13,7 +13,9 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, Ty};\n+use rustc_middle::ty::{\n+    self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, Ty,\n+};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -1293,6 +1295,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n                 ),\n             );\n+            let owner = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n+            if let ty::Param(param) = expected_ty.kind()\n+                && let Some(generics) = self.tcx.hir().get_generics(owner)\n+            {\n+                suggest_constraining_type_params(\n+                    self.tcx,\n+                    generics,\n+                    diag,\n+                    vec![(param.name.as_str(), \"Clone\", Some(clone_trait_did))].into_iter(),\n+                );\n+            }\n         }\n     }\n "}, {"sha": "3e5ded6738b316b1127e7e20ac13cdce273a23cd", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed?ref=f19488064a4752703fde8a3596a9d90ca2095534", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn wat<T: Clone>(t: &T) -> T {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+fn main() {\n+    wat(&42);\n+}"}, {"sha": "1a5a38369ec52471767ee8aa4dd0989cc72c9e4a", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs?ref=f19488064a4752703fde8a3596a9d90ca2095534", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn wat<T>(t: &T) -> T {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+fn main() {\n+    wat(&42);\n+}"}, {"sha": "01246955fae8a8d2313ff5be3eae940ab04ad814", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19488064a4752703fde8a3596a9d90ca2095534/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr?ref=f19488064a4752703fde8a3596a9d90ca2095534", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:3:5\n+   |\n+LL | fn wat<T>(t: &T) -> T {\n+   |        -            - expected `T` because of return type\n+   |        |\n+   |        this type parameter\n+LL |     t.clone()\n+   |     ^^^^^^^^^ expected type parameter `T`, found `&T`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&T`\n+note: `T` does not implement `Clone`, so `&T` was cloned instead\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:3:5\n+   |\n+LL |     t.clone()\n+   |     ^\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn wat<T: Clone>(t: &T) -> T {\n+   |         +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}