{"sha": "fde94538bf893fe11148354bc2da0028207ea47c", "node_id": "C_kwDOAAsO6NoAKGZkZTk0NTM4YmY4OTNmZTExMTQ4MzU0YmMyZGEwMDI4MjA3ZWE0N2M", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T02:27:06Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T19:48:47Z"}, "message": "Use fragment instead of side channel in another place", "tree": {"sha": "7f8e548b5d5149d8b752bf334c540baccaf858c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f8e548b5d5149d8b752bf334c540baccaf858c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fde94538bf893fe11148354bc2da0028207ea47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fde94538bf893fe11148354bc2da0028207ea47c", "html_url": "https://github.com/rust-lang/rust/commit/fde94538bf893fe11148354bc2da0028207ea47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fde94538bf893fe11148354bc2da0028207ea47c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1064003f8c39e138c3fefa9104fd74ffe81df3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1064003f8c39e138c3fefa9104fd74ffe81df3e8", "html_url": "https://github.com/rust-lang/rust/commit/1064003f8c39e138c3fefa9104fd74ffe81df3e8"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "6711028ab1b0e56e3c8ee9f4745fa3a748c4cdb2", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fde94538bf893fe11148354bc2da0028207ea47c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde94538bf893fe11148354bc2da0028207ea47c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fde94538bf893fe11148354bc2da0028207ea47c", "patch": "@@ -1309,7 +1309,11 @@ impl LinkCollector<'_, '_> {\n         };\n \n         let verify = |kind: DefKind, id: DefId| {\n-            let (kind, id) = self.kind_side_channel.take().unwrap_or((kind, id));\n+            let (kind, id) = if let Some(UrlFragment::Def(_, id)) = fragment {\n+                (self.cx.tcx.def_kind(id), id)\n+            } else {\n+                (kind, id)\n+            };\n             debug!(\"intra-doc link to {} resolved to {:?} (id: {:?})\", path_str, res, id);\n \n             // Disallow e.g. linking to enums with `struct@`"}]}