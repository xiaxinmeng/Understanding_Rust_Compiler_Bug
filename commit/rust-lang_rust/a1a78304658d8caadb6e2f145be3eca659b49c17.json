{"sha": "a1a78304658d8caadb6e2f145be3eca659b49c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYTc4MzA0NjU4ZDhjYWFkYjZlMmYxNDViZTNlY2E2NTliNDljMTc=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2021-01-27T22:03:36Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2021-01-27T22:03:36Z"}, "message": "Use symbol interning to avoid string alloc.", "tree": {"sha": "96bf047325f9fad7d3e511cafeabb958ce935ce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bf047325f9fad7d3e511cafeabb958ce935ce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a78304658d8caadb6e2f145be3eca659b49c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a78304658d8caadb6e2f145be3eca659b49c17", "html_url": "https://github.com/rust-lang/rust/commit/a1a78304658d8caadb6e2f145be3eca659b49c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a78304658d8caadb6e2f145be3eca659b49c17/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613ef740f3f37702728c6324f948d0abd1e9c82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/613ef740f3f37702728c6324f948d0abd1e9c82b", "html_url": "https://github.com/rust-lang/rust/commit/613ef740f3f37702728c6324f948d0abd1e9c82b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d0e44550ee6e7a1675dd8192b417484ed03d131f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a78304658d8caadb6e2f145be3eca659b49c17/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a78304658d8caadb6e2f145be3eca659b49c17/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a1a78304658d8caadb6e2f145be3eca659b49c17", "patch": "@@ -2607,7 +2607,7 @@ pub struct ClashingExternDeclarations {\n     /// the symbol should be reported as a clashing declaration.\n     // FIXME: Technically, we could just store a &'tcx str here without issue; however, the\n     // `impl_lint_pass` macro doesn't currently support lints parametric over a lifetime.\n-    seen_decls: FxHashMap<String, HirId>,\n+    seen_decls: FxHashMap<Symbol, HirId>,\n }\n \n /// Differentiate between whether the name for an extern decl came from the link_name attribute or\n@@ -2641,14 +2641,14 @@ impl ClashingExternDeclarations {\n         let local_did = tcx.hir().local_def_id(fi.hir_id);\n         let did = local_did.to_def_id();\n         let instance = Instance::new(did, ty::List::identity_for_item(tcx, did));\n-        let name = tcx.symbol_name(instance).name;\n-        if let Some(&hir_id) = self.seen_decls.get(name) {\n+        let name = Symbol::intern(tcx.symbol_name(instance).name);\n+        if let Some(&hir_id) = self.seen_decls.get(&name) {\n             // Avoid updating the map with the new entry when we do find a collision. We want to\n             // make sure we're always pointing to the first definition as the previous declaration.\n             // This lets us avoid emitting \"knock-on\" diagnostics.\n             Some(hir_id)\n         } else {\n-            self.seen_decls.insert(name.to_owned(), hid)\n+            self.seen_decls.insert(name, hid)\n         }\n     }\n "}]}