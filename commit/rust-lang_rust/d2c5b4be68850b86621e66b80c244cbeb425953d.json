{"sha": "d2c5b4be68850b86621e66b80c244cbeb425953d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzViNGJlNjg4NTBiODY2MjFlNjZiODBjMjQ0Y2JlYjQyNTk1M2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T15:41:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T15:41:05Z"}, "message": "Use vector icmp in simd_cmp! when possible", "tree": {"sha": "81d05baecf890b47cc492f1857a7178de88db32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d05baecf890b47cc492f1857a7178de88db32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c5b4be68850b86621e66b80c244cbeb425953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c5b4be68850b86621e66b80c244cbeb425953d", "html_url": "https://github.com/rust-lang/rust/commit/d2c5b4be68850b86621e66b80c244cbeb425953d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c5b4be68850b86621e66b80c244cbeb425953d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f33fcbd30d6cf5151ed8185a566c6495e456bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f33fcbd30d6cf5151ed8185a566c6495e456bbd", "html_url": "https://github.com/rust-lang/rust/commit/3f33fcbd30d6cf5151ed8185a566c6495e456bbd"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "1e6a7957835729655ba06439cc760e02791c89a6", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d2c5b4be68850b86621e66b80c244cbeb425953d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c5b4be68850b86621e66b80c244cbeb425953d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=d2c5b4be68850b86621e66b80c244cbeb425953d", "patch": "@@ -154,6 +154,21 @@ fn lane_type_and_count<'tcx>(\n     (lane_layout, lane_count)\n }\n \n+fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> Option<Type> {\n+    let (element, count) = match &layout.abi {\n+        Abi::Vector { element, count } => (element.clone(), *count),\n+        _ => unreachable!(),\n+    };\n+\n+    match scalar_to_clif_type(tcx, element).by(u16::try_from(count).unwrap()) {\n+        // Cranelift currently only implements icmp for 128bit vectors. While 64bit lanes are\n+        // supported, this needs either the `use_sse41_simd` or `use_sse42_simd` target flag\n+        // to be enabled.\n+        Some(vector_ty) if vector_ty.bits() == 128 && vector_ty.lane_type() != types::I64 => Some(vector_ty),\n+        _ => None,\n+    }\n+}\n+\n fn simd_for_each_lane<'tcx, B: Backend>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n     val: CValue<'tcx>,\n@@ -237,6 +252,18 @@ fn bool_to_zero_or_max_uint<'tcx>(\n \n macro simd_cmp {\n     ($fx:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n+\n+        if let Some(vector_ty) = vector_ty {\n+            let x = $x.load_scalar($fx);\n+            let y = $y.load_scalar($fx);\n+            let val = codegen_icmp($fx, IntCC::$cc, x, y);\n+\n+            // HACK This depends on the fact that icmp for vectors represents bools as 0 and !0, not 0 and 1.\n+            let val = $fx.bcx.ins().raw_bitcast(vector_ty, val);\n+\n+            $ret.write_cvalue($fx, CValue::by_val(val, $ret.layout()));\n+        } else {\n         simd_pair_for_each_lane(\n             $fx,\n             $x,\n@@ -250,8 +277,10 @@ macro simd_cmp {\n                 bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n             },\n         );\n+        }\n     },\n     ($fx:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        // FIXME use vector icmp when possible\n         simd_pair_for_each_lane(\n             $fx,\n             $x,"}]}