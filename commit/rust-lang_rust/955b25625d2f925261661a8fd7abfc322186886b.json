{"sha": "955b25625d2f925261661a8fd7abfc322186886b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWIyNTYyNWQyZjkyNTI2MTY2MWE4ZmQ3YWJmYzMyMjE4Njg4NmI=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-08-11T13:16:24Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-08-12T09:28:28Z"}, "message": "Use attribute span", "tree": {"sha": "708fe6a4df81b2f363d832a9db64de5d44c1d5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/708fe6a4df81b2f363d832a9db64de5d44c1d5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955b25625d2f925261661a8fd7abfc322186886b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955b25625d2f925261661a8fd7abfc322186886b", "html_url": "https://github.com/rust-lang/rust/commit/955b25625d2f925261661a8fd7abfc322186886b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955b25625d2f925261661a8fd7abfc322186886b/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea3080f915cbf75b100bbba1f0b99d2839ca5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea3080f915cbf75b100bbba1f0b99d2839ca5e0", "html_url": "https://github.com/rust-lang/rust/commit/fea3080f915cbf75b100bbba1f0b99d2839ca5e0"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "8c911465722b7273a68c5542006790393fed33cc", "filename": "src/visitor.rs", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/955b25625d2f925261661a8fd7abfc322186886b/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955b25625d2f925261661a8fd7abfc322186886b/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=955b25625d2f925261661a8fd7abfc322186886b", "patch": "@@ -12,7 +12,8 @@ use std::cmp;\n \n use strings::string_buffer::StringBuffer;\n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{self, BytePos, CodeMap, Span};\n+use syntax::attr::HasAttrs;\n+use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n use {Indent, Shape, Spanned};\n@@ -132,22 +133,45 @@ impl<'a> FmtVisitor<'a> {\n         self.buffer.push_str(\"{\");\n \n         if self.config.remove_blank_lines_at_start_or_end_of_block() {\n-            if let Some(stmt) = b.stmts.first() {\n-                let snippet = self.snippet(mk_sp(self.last_pos, stmt.span.lo));\n-                let len = CommentCodeSlices::new(&snippet)\n-                    .nth(0)\n-                    .and_then(|(kind, _, s)| {\n-                        if kind == CodeCharKind::Normal {\n-                            // There may be inner attributes\n-                            let s = &s[..s.len() -\n-                                           s.trim_left_matches(&[' ', '\\t', '\\r', '\\n'][..]).len()];\n-                            s.rfind('\\n')\n+            if let Some(first_stmt) = b.stmts.first() {\n+                let attr_lo = inner_attrs\n+                    .and_then(|attrs| {\n+                        attrs\n+                            .iter()\n+                            .filter(|a| a.style == ast::AttrStyle::Inner)\n+                            .nth(0)\n+                            .map(|attr| attr.span.lo)\n+                    })\n+                    .or_else(|| {\n+                        // Attributes for an item in a statement position\n+                        // do not belong to the statement. (rust-lang/rust#34459)\n+                        if let ast::StmtKind::Item(ref item) = first_stmt.node {\n+                            item.attrs.first()\n                         } else {\n-                            None\n-                        }\n+                            first_stmt.attrs().first()\n+                        }.and_then(|attr| {\n+                            // Some stmts can have embedded attributes.\n+                            // e.g. `match { #![attr] ... }`\n+                            let attr_lo = attr.span.lo;\n+                            if attr_lo < first_stmt.span.lo {\n+                                Some(attr_lo)\n+                            } else {\n+                                None\n+                            }\n+                        })\n                     });\n+\n+                let snippet =\n+                    self.snippet(mk_sp(self.last_pos, attr_lo.unwrap_or(first_stmt.span.lo)));\n+                let len = CommentCodeSlices::new(&snippet).nth(0).and_then(\n+                    |(kind, _, s)| if kind == CodeCharKind::Normal {\n+                        s.rfind('\\n')\n+                    } else {\n+                        None\n+                    },\n+                );\n                 if let Some(len) = len {\n-                    self.last_pos = self.last_pos + BytePos(len as u32);\n+                    self.last_pos = self.last_pos + BytePos::from_usize(len);\n                 }\n             }\n         }\n@@ -186,7 +210,7 @@ impl<'a> FmtVisitor<'a> {\n                         }\n                     });\n                 if let Some(len) = len {\n-                    remove_len = BytePos(len as u32);\n+                    remove_len = BytePos::from_usize(len);\n                 }\n             }\n         }"}]}