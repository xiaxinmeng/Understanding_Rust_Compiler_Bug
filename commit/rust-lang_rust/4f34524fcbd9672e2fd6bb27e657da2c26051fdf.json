{"sha": "4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzQ1MjRmY2JkOTY3MmUyZmQ2YmIyN2U2NTdkYTJjMjYwNTFmZGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-12T19:55:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-19T08:29:30Z"}, "message": "Move `leak_check` into its own method, and ensure that all higher-ranked code is in\n`higher_ranked.rs`.", "tree": {"sha": "1f8641b18cec69d1b81403e4f6a98988cc6b305e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8641b18cec69d1b81403e4f6a98988cc6b305e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "html_url": "https://github.com/rust-lang/rust/commit/4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f34524fcbd9672e2fd6bb27e657da2c26051fdf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1205fd88df2b87c682f2e98e30ba9e2d8d44d656", "url": "https://api.github.com/repos/rust-lang/rust/commits/1205fd88df2b87c682f2e98e30ba9e2d8d44d656", "html_url": "https://github.com/rust-lang/rust/commit/1205fd88df2b87c682f2e98e30ba9e2d8d44d656"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "ca4a6b28c2a1cbeab20c37ac845d6a890e5c9d26", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4f34524fcbd9672e2fd6bb27e657da2c26051fdf/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f34524fcbd9672e2fd6bb27e657da2c26051fdf/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "patch": "@@ -11,7 +11,7 @@\n //! Helper routines for higher-ranked things. See the `doc` module at\n //! the end of the file for details.\n \n-use super::{CombinedSnapshot, cres, InferCtxt, HigherRankedType};\n+use super::{CombinedSnapshot, cres, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::{Combine, Combineable};\n \n use middle::ty::{mod, Binder};\n@@ -81,7 +81,7 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n \n             // Presuming type comparison succeeds, we need to check\n             // that the skolemized regions do not \"leak\".\n-            match leak_check(self.infcx(), &skol_map, snapshot) {\n+            match self.infcx().leak_check(&skol_map, snapshot) {\n                 Ok(()) => { }\n                 Err((skol_br, tainted_region)) => {\n                     if self.a_is_expected() {\n@@ -455,11 +455,47 @@ impl<'a,'tcx> InferCtxtExt<'tcx> for InferCtxt<'a,'tcx> {\n     }\n }\n \n-fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n-                       skol_map: &FnvHashMap<ty::BoundRegion,ty::Region>,\n-                       snapshot: &CombinedSnapshot)\n-                       -> Result<(),(ty::BoundRegion,ty::Region)>\n+pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n+                                               binder: &ty::Binder<T>,\n+                                               snapshot: &CombinedSnapshot)\n+                                               -> (T, SkolemizationMap)\n+    where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n+    /*!\n+     * Replace all regions bound by `binder` with skolemized regions and\n+     * return a map indicating which bound-region was replaced with what\n+     * skolemized region. This is the first step of checking subtyping\n+     * when higher-ranked things are involved. See `doc.rs` for more details.\n+     */\n+\n+    let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br, _| {\n+        infcx.region_vars.new_skolemized(br, &snapshot.region_vars_snapshot)\n+    });\n+\n+    debug!(\"skolemize_bound_regions(binder={}, result={}, map={})\",\n+           binder.repr(infcx.tcx),\n+           result.repr(infcx.tcx),\n+           map.repr(infcx.tcx));\n+\n+    (result, map)\n+}\n+\n+pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n+                           skol_map: &SkolemizationMap,\n+                           snapshot: &CombinedSnapshot)\n+                           -> Result<(),(ty::BoundRegion,ty::Region)>\n+{\n+    /*!\n+     * Searches the region constriants created since `snapshot` was started\n+     * and checks to determine whether any of the skolemized regions created\n+     * in `skol_map` would \"escape\" -- meaning that they are related to\n+     * other regions in some way. If so, the higher-ranked subtyping doesn't\n+     * hold. See `doc.rs` for more details.\n+     */\n+\n+    debug!(\"leak_check: skol_map={}\",\n+           skol_map.repr(infcx.tcx));\n+\n     let new_vars = infcx.region_vars_confined_to_snapshot(snapshot);\n     for (&skol_br, &skol) in skol_map.iter() {\n         let tainted = infcx.tainted_regions(snapshot, skol);\n@@ -475,6 +511,11 @@ fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n                 }\n             };\n \n+            debug!(\"{} (which replaced {}) is tainted by {}\",\n+                   skol.repr(infcx.tcx),\n+                   skol_br.repr(infcx.tcx),\n+                   tainted_region.repr(infcx.tcx));\n+\n             // A is not as polymorphic as B:\n             return Err((skol_br, tainted_region));\n         }"}, {"sha": "0dfae4b882b7fa7c84d8829dc766f366db201a85", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f34524fcbd9672e2fd6bb27e657da2c26051fdf/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f34524fcbd9672e2fd6bb27e657da2c26051fdf/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=4f34524fcbd9672e2fd6bb27e657da2c26051fdf", "patch": "@@ -52,7 +52,7 @@ pub mod doc;\n pub mod equate;\n pub mod error_reporting;\n pub mod glb;\n-pub mod higher_ranked;\n+mod higher_ranked;\n pub mod lattice;\n pub mod lub;\n pub mod region_inference;\n@@ -90,7 +90,7 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n         RegionVarBindings<'a, 'tcx>,\n }\n \n-/// A map returned by `skolemize_bound_regions()` indicating the skolemized\n+/// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n /// region that each late-bound region was replaced with.\n pub type SkolemizationMap = FnvHashMap<ty::BoundRegion,ty::Region>;\n \n@@ -709,16 +709,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                            -> (T, SkolemizationMap)\n         where T : TypeFoldable<'tcx> + Repr<'tcx>\n     {\n-        let (result, map) = replace_late_bound_regions(self.tcx, value, |br, _| {\n-            self.region_vars.new_skolemized(br, &snapshot.region_vars_snapshot)\n-        });\n+        /*! See `higher_ranked::skolemize_late_bound_regions` */\n \n-        debug!(\"skolemize_bound_regions(value={}, result={}, map={})\",\n-               value.repr(self.tcx),\n-               result.repr(self.tcx),\n-               map.repr(self.tcx));\n+        higher_ranked::skolemize_late_bound_regions(self, value, snapshot)\n+    }\n+\n+    pub fn leak_check(&self,\n+                      skol_map: &SkolemizationMap,\n+                      snapshot: &CombinedSnapshot)\n+                      -> Result<(),(ty::BoundRegion,ty::Region)>\n+    {\n+        /*! See `higher_ranked::leak_check` */\n \n-        (result, map)\n+        higher_ranked::leak_check(self, skol_map, snapshot)\n     }\n \n     pub fn next_ty_var_id(&self, diverging: bool) -> TyVid {"}]}