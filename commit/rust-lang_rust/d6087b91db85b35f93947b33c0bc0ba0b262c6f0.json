{"sha": "d6087b91db85b35f93947b33c0bc0ba0b262c6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDg3YjkxZGI4NWIzNWY5Mzk0N2IzM2MwYmMwYmEwYjI2MmM2ZjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-08T23:53:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-08T23:53:56Z"}, "message": "Rollup merge of #68946 - mjbshaw:must_use, r=mjbshaw\n\nMark several functions and methods in core::cmp as #[must_use]\n\nThese functions and methods aren't mutating functions and ignoring the result of them is likely a bug in the user's code.", "tree": {"sha": "3e3c0cfe6d6c1b04b0cced14fb469804c74515fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3c0cfe6d6c1b04b0cced14fb469804c74515fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6087b91db85b35f93947b33c0bc0ba0b262c6f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeP0oVCRBK7hj4Ov3rIwAAdHIIAFa66LMli2ng8aSXUmc8vr+2\nj4gQi/sSfyrIJIVIA8keHCXdeLiQK12X5Uh0AFCzxIqxaG18qPkhy3CfUvFEBQ1Y\nljTSU/wyCvgIFkQesuBOcPuhZG2vtZrMdWtawZ0sT6J4nkXiSV608hpgpoVZxbzk\nWER4G4LxqXuKAPuTK7l28MmFn76NKyTBAndt9n4H7n6ayij28d6kZ0y6JhBX8UJ6\nhlSxrjAhUubUSrtahjfTmyt50XYUutSshVlQ/vAo3c7uRUNzjjPPdLXdoAzHH62W\nXVTNBcCYqo0La/jLBn6SeEjVzsA2M8gpwZcH23uZ1f0zJoNmIIyB9eZBh1BPuOM=\n=vSmB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e3c0cfe6d6c1b04b0cced14fb469804c74515fb\nparent 2be062a4b08c4d0c108f41c8714f380cb5a05873\nparent 4ac468c038e2d24efd2228c201fd0b3211ca8ba5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581206036 +0100\ncommitter GitHub <noreply@github.com> 1581206036 +0100\n\nRollup merge of #68946 - mjbshaw:must_use, r=mjbshaw\n\nMark several functions and methods in core::cmp as #[must_use]\n\nThese functions and methods aren't mutating functions and ignoring the result of them is likely a bug in the user's code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6087b91db85b35f93947b33c0bc0ba0b262c6f0", "html_url": "https://github.com/rust-lang/rust/commit/d6087b91db85b35f93947b33c0bc0ba0b262c6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6087b91db85b35f93947b33c0bc0ba0b262c6f0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be062a4b08c4d0c108f41c8714f380cb5a05873", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be062a4b08c4d0c108f41c8714f380cb5a05873", "html_url": "https://github.com/rust-lang/rust/commit/2be062a4b08c4d0c108f41c8714f380cb5a05873"}, {"sha": "4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "html_url": "https://github.com/rust-lang/rust/commit/4ac468c038e2d24efd2228c201fd0b3211ca8ba5"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "604be7d5f68d0f78f8617ee809c1149b468d517d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6087b91db85b35f93947b33c0bc0ba0b262c6f0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6087b91db85b35f93947b33c0bc0ba0b262c6f0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d6087b91db85b35f93947b33c0bc0ba0b262c6f0", "patch": "@@ -361,6 +361,7 @@ impl Ordering {\n     /// assert!(data == b);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reverse(self) -> Ordering {\n         match self {\n@@ -398,6 +399,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then(self, other: Ordering) -> Ordering {\n         match self {\n@@ -435,6 +437,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {\n         match self {\n@@ -576,6 +579,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(10.cmp(&5), Ordering::Greater);\n     /// assert_eq!(5.cmp(&5), Ordering::Equal);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cmp(&self, other: &Self) -> Ordering;\n \n@@ -591,6 +595,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n+    #[must_use]\n     fn max(self, other: Self) -> Self\n     where\n         Self: Sized,\n@@ -610,6 +615,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n+    #[must_use]\n     fn min(self, other: Self) -> Self\n     where\n         Self: Sized,\n@@ -635,6 +641,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert!(0.clamp(-2, 1) == 0);\n     /// assert!(2.clamp(-2, 1) == 1);\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     fn clamp(self, min: Self, max: Self) -> Self\n     where\n@@ -915,6 +922,7 @@ pub macro PartialOrd($item:item) {\n /// assert_eq!(2, cmp::min(2, 2));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n@@ -935,6 +943,7 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n@@ -958,6 +967,7 @@ pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n     min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n@@ -978,6 +988,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n /// assert_eq!(2, cmp::max(2, 2));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n@@ -998,6 +1009,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n@@ -1021,6 +1033,7 @@ pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n     max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))"}]}