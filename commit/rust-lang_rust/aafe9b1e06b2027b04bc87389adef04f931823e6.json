{"sha": "aafe9b1e06b2027b04bc87389adef04f931823e6", "node_id": "C_kwDOAAsO6NoAKGFhZmU5YjFlMDZiMjAyN2IwNGJjODczODlhZGVmMDRmOTMxODIzZTY", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-03T15:24:30Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-04T21:47:11Z"}, "message": "Lazy evaluate consts in `path_to_const`", "tree": {"sha": "9fa897ed0c966481ac9a44d8662d764374d552cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa897ed0c966481ac9a44d8662d764374d552cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafe9b1e06b2027b04bc87389adef04f931823e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafe9b1e06b2027b04bc87389adef04f931823e6", "html_url": "https://github.com/rust-lang/rust/commit/aafe9b1e06b2027b04bc87389adef04f931823e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafe9b1e06b2027b04bc87389adef04f931823e6/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd94d3b078fa524272f942f69239a9564532fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd94d3b078fa524272f942f69239a9564532fe1", "html_url": "https://github.com/rust-lang/rust/commit/0dd94d3b078fa524272f942f69239a9564532fe1"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "c3726905b676b99fdb8b45b769edf656eb29bb76", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -76,6 +76,7 @@ pub(crate) fn path_to_const(\n     mode: ParamLoweringMode,\n     args_lazy: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n+    expected_ty: Ty,\n ) -> Option<Const> {\n     match resolver.resolve_path_in_value_ns_fully(db.upcast(), path) {\n         Some(ValueNs::GenericParam(p)) => {\n@@ -100,6 +101,10 @@ pub(crate) fn path_to_const(\n             };\n             Some(ConstData { ty, value }.intern(Interner))\n         }\n+        Some(ValueNs::ConstId(c)) => Some(intern_const_scalar(\n+            ConstScalar::UnevaluatedConst(c.into(), Substitution::empty(Interner)),\n+            expected_ty,\n+        )),\n         _ => None,\n     }\n }\n@@ -227,9 +232,10 @@ pub(crate) fn eval_to_const(\n     debruijn: DebruijnIndex,\n ) -> Const {\n     let db = ctx.db;\n+    let infer = ctx.clone().resolve_all();\n     if let Expr::Path(p) = &ctx.body.exprs[expr] {\n         let resolver = &ctx.resolver;\n-        if let Some(c) = path_to_const(db, resolver, p, mode, args, debruijn) {\n+        if let Some(c) = path_to_const(db, resolver, p, mode, args, debruijn, infer[expr].clone()) {\n             return c;\n         }\n     }"}, {"sha": "32e870314380aa0f0b03bab09ee35fa3b45c9abc", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -17,7 +17,7 @@ use std::{convert::identity, ops::Index};\n \n use chalk_ir::{\n     cast::Cast, fold::TypeFoldable, interner::HasInterner, DebruijnIndex, Mutability, Safety,\n-    Scalar, TypeFlags,\n+    Scalar, TyKind, TypeFlags,\n };\n use either::Either;\n use hir_def::{\n@@ -44,7 +44,7 @@ use crate::{\n     db::HirDatabase, fold_tys, infer::coerce::CoerceMany, lower::ImplTraitLoweringMode,\n     static_lifetime, to_assoc_type_id, traits::FnTrait, AliasEq, AliasTy, ClosureId, DomainGoal,\n     GenericArg, Goal, ImplTraitId, InEnvironment, Interner, ProjectionTy, RpitId, Substitution,\n-    TraitEnvironment, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n+    TraitEnvironment, TraitRef, Ty, TyBuilder, TyExt,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -118,7 +118,12 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n /// This is appropriate to use only after type-check: it assumes\n /// that normalization will succeed, for example.\n pub(crate) fn normalize(db: &dyn HirDatabase, trait_env: Arc<TraitEnvironment>, ty: Ty) -> Ty {\n-    if !ty.data(Interner).flags.intersects(TypeFlags::HAS_PROJECTION) {\n+    // FIXME: TypeFlags::HAS_CT_PROJECTION is not implemented in chalk, so TypeFlags::HAS_PROJECTION only\n+    // works for the type case, so we check array unconditionally. Remove the array part\n+    // when the bug in chalk becomes fixed.\n+    if !ty.data(Interner).flags.intersects(TypeFlags::HAS_PROJECTION)\n+        && !matches!(ty.kind(Interner), TyKind::Array(..))\n+    {\n         return ty;\n     }\n     let mut table = unify::InferenceTable::new(db, trait_env);"}, {"sha": "21b962a48f246f1c16dc1b9526f0010ec940679a", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -15,11 +15,11 @@ use triomphe::Arc;\n \n use super::{InferOk, InferResult, InferenceContext, TypeError};\n use crate::{\n-    db::HirDatabase, fold_tys, fold_tys_and_consts, static_lifetime, to_chalk_trait_id,\n-    traits::FnTrait, AliasEq, AliasTy, BoundVar, Canonical, Const, ConstValue, DebruijnIndex,\n-    GenericArg, GenericArgData, Goal, Guidance, InEnvironment, InferenceVar, Interner, Lifetime,\n-    ParamKind, ProjectionTy, ProjectionTyExt, Scalar, Solution, Substitution, TraitEnvironment, Ty,\n-    TyBuilder, TyExt, TyKind, VariableKind,\n+    db::HirDatabase, fold_tys_and_consts, static_lifetime, to_chalk_trait_id, traits::FnTrait,\n+    AliasEq, AliasTy, BoundVar, Canonical, Const, ConstValue, DebruijnIndex, GenericArg,\n+    GenericArgData, Goal, Guidance, InEnvironment, InferenceVar, Interner, Lifetime, ParamKind,\n+    ProjectionTy, ProjectionTyExt, Scalar, Solution, Substitution, TraitEnvironment, Ty, TyBuilder,\n+    TyExt, TyKind, VariableKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -236,13 +236,36 @@ impl<'a> InferenceTable<'a> {\n     where\n         T: HasInterner<Interner = Interner> + TypeFoldable<Interner>,\n     {\n-        fold_tys(\n+        fold_tys_and_consts(\n             ty,\n-            |ty, _| match ty.kind(Interner) {\n-                TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n-                    self.normalize_projection_ty(proj_ty.clone())\n-                }\n-                _ => ty,\n+            |e, _| match e {\n+                Either::Left(ty) => Either::Left(match ty.kind(Interner) {\n+                    TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n+                        self.normalize_projection_ty(proj_ty.clone())\n+                    }\n+                    _ => ty,\n+                }),\n+                Either::Right(c) => Either::Right(match &c.data(Interner).value {\n+                    chalk_ir::ConstValue::Concrete(cc) => match &cc.interned {\n+                        crate::ConstScalar::UnevaluatedConst(c_id, subst) => {\n+                            // FIXME: Ideally here we should do everything that we do with type alias, i.e. adding a variable\n+                            // and registering an obligation. But it needs chalk support, so we handle the most basic\n+                            // case (a non associated const without generic parameters) manually.\n+                            if subst.len(Interner) == 0 {\n+                                if let Ok(eval) = self.db.const_eval((*c_id).into(), subst.clone())\n+                                {\n+                                    eval\n+                                } else {\n+                                    c\n+                                }\n+                            } else {\n+                                c\n+                            }\n+                        }\n+                        _ => c,\n+                    },\n+                    _ => c,\n+                }),\n             },\n             DebruijnIndex::INNERMOST,\n         )"}, {"sha": "e1038c0affe942dbc5ba84489d59c8dc0d57efd5", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -353,6 +353,14 @@ fn niche_optimization() {\n     }\n }\n \n+#[test]\n+fn const_eval() {\n+    size_and_align! {\n+        const X: usize = 5;\n+        struct Goal([i32; X]);\n+    }\n+}\n+\n #[test]\n fn enums_with_discriminants() {\n     size_and_align! {"}, {"sha": "0f823580cba61a3254ebca87611cf7e642506373", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -2023,6 +2023,7 @@ pub(crate) fn const_or_path_to_chalk(\n                 mode,\n                 args,\n                 debruijn,\n+                expected_ty.clone(),\n             )\n             .unwrap_or_else(|| unknown_const(expected_ty))\n         }"}, {"sha": "e249cddc2fc351c25275e02b21f07323915b9b10", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe9b1e06b2027b04bc87389adef04f931823e6/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=aafe9b1e06b2027b04bc87389adef04f931823e6", "patch": "@@ -3529,14 +3529,30 @@ fn main() {\n \n #[test]\n fn issue_14275() {\n-    // FIXME: evaluate const generic\n     check_types(\n         r#\"\n struct Foo<const T: bool>;\n fn main() {\n     const B: bool = false;\n     let foo = Foo::<B>;\n-      //^^^ Foo<_>\n+      //^^^ Foo<false>\n+}\n+\"#,\n+    );\n+    check_types(\n+        r#\"\n+struct Foo<const T: bool>;\n+impl Foo<true> {\n+    fn foo(self) -> u8 { 2 }\n+}\n+impl Foo<false> {\n+    fn foo(self) -> u16 { 5 }\n+}\n+fn main() {\n+    const B: bool = false;\n+    let foo: Foo<B> = Foo;\n+    let x = foo.foo();\n+      //^ u16\n }\n \"#,\n     );"}]}