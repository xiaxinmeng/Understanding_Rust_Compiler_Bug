{"sha": "2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzE2OThjMjYzYzZmYzNhNmU1ZDBiYTA3YjJlYTliODgyYTVjOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T21:45:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:37:02Z"}, "message": "use `RegionBoundPairs` type alias", "tree": {"sha": "d862f20fb535e5015a7253ee82d6a4a208b5269b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d862f20fb535e5015a7253ee82d6a4a208b5269b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "html_url": "https://github.com/rust-lang/rust/commit/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d2232838d9d0fd1a933a87b7659b65918dfb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d2232838d9d0fd1a933a87b7659b65918dfb52", "html_url": "https://github.com/rust-lang/rust/commit/d5d2232838d9d0fd1a933a87b7659b65918dfb52"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "8deabacab5c837918c1e94be6c2d2af053ace826", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     }\n \n     /// Borrows current value of the `region_bound_pairs`.\n-    pub fn region_bound_pairs(&self) -> &[(ty::Region<'tcx>, GenericKind<'tcx>)] {\n+    pub fn region_bound_pairs(&self) -> &RegionBoundPairs<'tcx> {\n         &self.region_bound_pairs_accum\n     }\n "}, {"sha": "e1f7dcfd90acb5e40715a08b171c8e83cd79ddd2", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "patch": "@@ -71,6 +71,7 @@\n \n use hir::def_id::DefId;\n use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use infer::outlives::env::RegionBoundPairs;\n use syntax::ast;\n use traits::{self, ObligationCause};\n use ty::outlives::Component;\n@@ -158,7 +159,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// processed.\n     pub fn process_registered_region_obligations(\n         &self,\n-        region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        region_bound_pairs: &RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: ast::NodeId,\n@@ -207,7 +208,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// registered in advance.\n     pub fn type_must_outlive(\n         &self,\n-        region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        region_bound_pairs: &RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n         origin: infer::SubregionOrigin<'tcx>,\n@@ -240,7 +241,7 @@ where\n     // of these fields.\n     delegate: D,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    region_bound_pairs: &'cx [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+    region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n@@ -269,7 +270,7 @@ where\n     pub fn new(\n         delegate: D,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-        region_bound_pairs: &'cx [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {"}, {"sha": "e177382430b3b39267d9cfa3c0a0c90b7a66cecb", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .collect();\n \n             for id in body_ids {\n-                infcx.process_registered_region_obligations(&[], None, full_env.clone(), id);\n+                infcx.process_registered_region_obligations(&vec![], None, full_env.clone(), id);\n             }\n \n             let region_data = infcx"}, {"sha": "220cbfe4fff3d833df9665cbec5df46791d1e3eb", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "patch": "@@ -15,6 +15,7 @@ use borrow_check::nll::region_infer::{RegionTest, TypeTest};\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};\n use rustc::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc::infer::{self, SubregionOrigin};\n@@ -26,7 +27,7 @@ crate struct ConstraintConversion<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     location_table: &'a LocationTable,\n-    region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+    region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n@@ -41,7 +42,7 @@ impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n         location_table: &'a LocationTable,\n-        region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,"}, {"sha": "d4719064c28a153166967e3844ed738641a1cc30", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2f31698c263c6fc3a6e5d0ba07b2ea9b882a5c9c", "patch": "@@ -29,7 +29,7 @@ use dataflow::MaybeInitializedPlaces;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::infer::region_constraints::GenericKind;\n+use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n@@ -182,7 +182,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &'a Mir<'tcx>,\n-    region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+    region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     borrowck_context: Option<&'a mut BorrowCheckContext<'a, 'tcx>>,\n     universal_region_relations: Option<&'a UniversalRegionRelations<'tcx>>,\n@@ -693,7 +693,7 @@ struct TypeChecker<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     last_span: Span,\n     mir: &'a Mir<'tcx>,\n     mir_def_id: DefId,\n-    region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+    region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     borrowck_context: Option<&'a mut BorrowCheckContext<'a, 'tcx>>,\n@@ -802,7 +802,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         mir: &'a Mir<'tcx>,\n         mir_def_id: DefId,\n         param_env: ty::ParamEnv<'gcx>,\n-        region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         borrowck_context: Option<&'a mut BorrowCheckContext<'a, 'tcx>>,\n         universal_region_relations: Option<&'a UniversalRegionRelations<'tcx>>,\n@@ -2232,7 +2232,7 @@ impl MirPass for TypeckMir {\n                 def_id,\n                 param_env,\n                 mir,\n-                &[],\n+                &vec![],\n                 None,\n                 None,\n                 None,"}]}