{"sha": "bea1bde8c7e5616a9dc9d501622bdeb5772501b9", "node_id": "C_kwDOAAsO6NoAKGJlYTFiZGU4YzdlNTYxNmE5ZGM5ZDUwMTYyMmJkZWI1NzcyNTAxYjk", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-11-11T00:21:37Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-11-13T19:16:57Z"}, "message": "Mark mutably borrowed places as maybe initialized", "tree": {"sha": "515f1c6e4532a2654757e9d0fe4af76b1d2452a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515f1c6e4532a2654757e9d0fe4af76b1d2452a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea1bde8c7e5616a9dc9d501622bdeb5772501b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea1bde8c7e5616a9dc9d501622bdeb5772501b9", "html_url": "https://github.com/rust-lang/rust/commit/bea1bde8c7e5616a9dc9d501622bdeb5772501b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea1bde8c7e5616a9dc9d501622bdeb5772501b9/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82af160c2cb9c349a0373cba98d8ad7f911f0d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/82af160c2cb9c349a0373cba98d8ad7f911f0d34", "html_url": "https://github.com/rust-lang/rust/commit/82af160c2cb9c349a0373cba98d8ad7f911f0d34"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "2585701f60c66b5ff2e0c90f4d418f98bd973a44", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/bea1bde8c7e5616a9dc9d501622bdeb5772501b9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea1bde8c7e5616a9dc9d501622bdeb5772501b9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=bea1bde8c7e5616a9dc9d501622bdeb5772501b9", "patch": "@@ -4,17 +4,18 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n+use rustc_middle::mir::visit::{MirVisitable, Visitor};\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n \n-use crate::drop_flag_effects;\n use crate::drop_flag_effects_for_function_entry;\n use crate::drop_flag_effects_for_location;\n use crate::elaborate_drops::DropFlagState;\n use crate::framework::SwitchIntEdgeEffects;\n-use crate::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n+use crate::move_paths::{HasMoveData, InitIndex, InitKind, LookupResult, MoveData, MovePathIndex};\n use crate::on_lookup_result_bits;\n use crate::MoveDataParamEnv;\n+use crate::{drop_flag_effects, on_all_children_bits};\n use crate::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n \n mod borrowed_locals;\n@@ -307,22 +308,45 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n-        _statement: &mir::Statement<'tcx>,\n+        statement: &mir::Statement<'tcx>,\n         location: Location,\n     ) {\n         drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {\n             Self::update_bits(trans, path, s)\n+        });\n+\n+        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+            return;\n+        }\n+\n+        // Mark all places as \"maybe init\" if they are mutably borrowed. See #90752.\n+        for_each_mut_borrow(statement, location, |place| {\n+            let LookupResult::Exact(mpi) = self.move_data().rev_lookup.find(place.as_ref()) else { return };\n+            on_all_children_bits(self.tcx, self.body, self.move_data(), mpi, |child| {\n+                trans.gen(child);\n+            })\n         })\n     }\n \n     fn terminator_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n-        _terminator: &mir::Terminator<'tcx>,\n+        terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n         drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {\n             Self::update_bits(trans, path, s)\n+        });\n+\n+        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+            return;\n+        }\n+\n+        for_each_mut_borrow(terminator, location, |place| {\n+            let LookupResult::Exact(mpi) = self.move_data().rev_lookup.find(place.as_ref()) else { return };\n+            on_all_children_bits(self.tcx, self.body, self.move_data(), mpi, |child| {\n+                trans.gen(child);\n+            })\n         })\n     }\n \n@@ -427,7 +451,10 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     ) {\n         drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {\n             Self::update_bits(trans, path, s)\n-        })\n+        });\n+\n+        // Unlike in `MaybeInitializedPlaces` above, we don't need to change the state when a\n+        // mutable borrow occurs. Places cannot become uninitialized through a mutable reference.\n     }\n \n     fn terminator_effect(\n@@ -438,7 +465,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     ) {\n         drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {\n             Self::update_bits(trans, path, s)\n-        })\n+        });\n     }\n \n     fn call_return_effect(\n@@ -704,3 +731,37 @@ fn switch_on_enum_discriminant(\n         _ => None,\n     }\n }\n+\n+struct OnMutBorrow<F>(F);\n+\n+impl<F> Visitor<'_> for OnMutBorrow<F>\n+where\n+    F: FnMut(&mir::Place<'_>),\n+{\n+    fn visit_rvalue(&mut self, rvalue: &mir::Rvalue<'_>, location: Location) {\n+        // FIXME: Does `&raw const foo` allow mutation? See #90413.\n+        match rvalue {\n+            mir::Rvalue::Ref(_, mir::BorrowKind::Mut { .. }, place)\n+            | mir::Rvalue::AddressOf(_, place) => (self.0)(place),\n+\n+            _ => {}\n+        }\n+\n+        self.super_rvalue(rvalue, location)\n+    }\n+}\n+\n+/// Calls `f` for each mutable borrow or raw reference in the program.\n+///\n+/// This DOES NOT call `f` for a shared borrow of a type with interior mutability.  That's okay for\n+/// initializedness, because we cannot move from an `UnsafeCell` (outside of `core::cell`), but\n+/// other analyses will likely need to check for `!Freeze`.\n+fn for_each_mut_borrow<'tcx>(\n+    mir: &impl MirVisitable<'tcx>,\n+    location: Location,\n+    f: impl FnMut(&mir::Place<'_>),\n+) {\n+    let mut vis = OnMutBorrow(f);\n+\n+    mir.apply(location, &mut vis);\n+}"}]}