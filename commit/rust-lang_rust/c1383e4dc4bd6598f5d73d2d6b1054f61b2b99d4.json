{"sha": "c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMzgzZTRkYzRiZDY1OThmNWQ3M2QyZDZiMTA1NGY2MWIyYjk5ZDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-20T03:57:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T23:06:20Z"}, "message": "Add filtering options to `rustc_on_unimplemented`\n\n - filter error on the evaluated value of `Self`\n - filter error on the evaluated value of the type arguments\n - add argument to include custom note in diagnostic\n - allow the parser to parse `Self` when processing attributes\n - add custom message to binops", "tree": {"sha": "edf364f3770e1626b806a05c569ca8b57c3107cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf364f3770e1626b806a05c569ca8b57c3107cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "html_url": "https://github.com/rust-lang/rust/commit/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56733bc9f8302409a2b6110f422512923c878154", "url": "https://api.github.com/repos/rust-lang/rust/commits/56733bc9f8302409a2b6110f422512923c878154", "html_url": "https://github.com/rust-lang/rust/commit/56733bc9f8302409a2b6110f422512923c878154"}], "stats": {"total": 715, "additions": 312, "deletions": 403}, "files": [{"sha": "59a18d6cb75ed28b25fa3f0a7b415e72d7c8dd9a", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 105, "deletions": 10, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -75,7 +75,93 @@\n /// ```\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        any(\n+            all(_Self=\"i128\", RHS=\"i64\"),\n+            all(_Self=\"i128\", RHS=\"i32\"),\n+            all(_Self=\"i128\", RHS=\"i16\"),\n+            all(_Self=\"i128\", RHS=\"i8\"),\n+            all(_Self=\"i64\",  RHS=\"i32\"),\n+            all(_Self=\"i64\",  RHS=\"i16\"),\n+            all(_Self=\"i64\",  RHS=\"i8\"),\n+            all(_Self=\"i32\",  RHS=\"i16\"),\n+            all(_Self=\"i32\",  RHS=\"i8\"),\n+            all(_Self=\"i16\",  RHS=\"i8\"),\n+            all(_Self=\"u128\", RHS=\"u64\"),\n+            all(_Self=\"u128\", RHS=\"u32\"),\n+            all(_Self=\"u128\", RHS=\"u16\"),\n+            all(_Self=\"u128\", RHS=\"u8\"),\n+            all(_Self=\"u64\",  RHS=\"u32\"),\n+            all(_Self=\"u64\",  RHS=\"u16\"),\n+            all(_Self=\"u64\",  RHS=\"u8\"),\n+            all(_Self=\"u32\",  RHS=\"u16\"),\n+            all(_Self=\"u32\",  RHS=\"u8\"),\n+            all(_Self=\"u16\",  RHS=\"u8\"),\n+            all(_Self=\"f64\",  RHS=\"i32\"),\n+            all(_Self=\"f64\",  RHS=\"i16\"),\n+            all(_Self=\"f64\",  RHS=\"i8\"),\n+            all(_Self=\"f64\",  RHS=\"u32\"),\n+            all(_Self=\"f64\",  RHS=\"u16\"),\n+            all(_Self=\"f64\",  RHS=\"u8\"),\n+            all(_Self=\"f32\",  RHS=\"i16\"),\n+            all(_Self=\"f32\",  RHS=\"i8\"),\n+            all(_Self=\"f32\",  RHS=\"u16\"),\n+            all(_Self=\"f32\",  RHS=\"u8\"),\n+        ),\n+        message=\"cannot add `{RHS}` to `{Self}`\",\n+        label=\"no implementation for `{Self} + {RHS}`, but you can safely cast \\\n+               `{RHS}` into `{Self}` using `as {Self}`\",\n+    ),\n+    on(\n+        any(\n+            all(RHS=\"i128\", _Self=\"i64\"),\n+            all(RHS=\"i128\", _Self=\"i32\"),\n+            all(RHS=\"i128\", _Self=\"i16\"),\n+            all(RHS=\"i128\", _Self=\"i8\"),\n+            all(RHS=\"i64\",  _Self=\"i32\"),\n+            all(RHS=\"i64\",  _Self=\"i16\"),\n+            all(RHS=\"i64\",  _Self=\"i8\"),\n+            all(RHS=\"i32\",  _Self=\"i16\"),\n+            all(RHS=\"i32\",  _Self=\"i8\"),\n+            all(RHS=\"i16\",  _Self=\"i8\"),\n+            all(RHS=\"u128\", _Self=\"u64\"),\n+            all(RHS=\"u128\", _Self=\"u32\"),\n+            all(RHS=\"u128\", _Self=\"u16\"),\n+            all(RHS=\"u128\", _Self=\"u8\"),\n+            all(RHS=\"u64\",  _Self=\"u32\"),\n+            all(RHS=\"u64\",  _Self=\"u16\"),\n+            all(RHS=\"u64\",  _Self=\"u8\"),\n+            all(RHS=\"u32\",  _Self=\"u16\"),\n+            all(RHS=\"u32\",  _Self=\"u8\"),\n+            all(RHS=\"u16\",  _Self=\"u8\"),\n+            all(RHS=\"f64\",  _Self=\"i32\"),\n+            all(RHS=\"f64\",  _Self=\"i16\"),\n+            all(RHS=\"f64\",  _Self=\"i8\"),\n+            all(RHS=\"f64\",  _Self=\"u32\"),\n+            all(RHS=\"f64\",  _Self=\"u16\"),\n+            all(RHS=\"f64\",  _Self=\"u8\"),\n+            all(RHS=\"f32\",  _Self=\"i16\"),\n+            all(RHS=\"f32\",  _Self=\"i8\"),\n+            all(RHS=\"f32\",  _Self=\"u16\"),\n+            all(RHS=\"f32\",  _Self=\"u8\"),\n+        ),\n+        message=\"cannot add `{RHS}` to `{Self}`\",\n+        label=\"no implementation for `{Self} + {RHS}`, but you can safely turn \\\n+               `{Self}` into `{RHS}` using `as {RHS}`\",\n+    ),\n+    on(\n+        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        message=\"cannot add a float to an integer\",\n+        label=\"no implementation for `{Self} + {RHS}`\",\n+    ),\n+    on(\n+        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        message=\"cannot add an integer to a float\",\n+        label=\"no implementation for `{Self} + {RHS}`\",\n+    ),\n+    message=\"cannot add `{RHS}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {RHS}`\")]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -170,7 +256,8 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract `{RHS}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {RHS}`\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -287,7 +374,8 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {RHS}`\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -408,7 +496,8 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} / {RHS}`\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -490,7 +579,8 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} % {RHS}`\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -647,7 +737,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"add_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot add-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} += {Rhs}`\")]\n pub trait AddAssign<Rhs=Self> {\n     /// Performs the `+=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -700,7 +791,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract-assign `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} -= {Rhs}`\")]\n pub trait SubAssign<Rhs=Self> {\n     /// Performs the `-=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -744,7 +836,8 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} *= {Rhs}`\")]\n pub trait MulAssign<Rhs=Self> {\n     /// Performs the `*=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -788,7 +881,8 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide-assign `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} /= {Rhs}`\")]\n pub trait DivAssign<Rhs=Self> {\n     /// Performs the `/=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -835,7 +929,8 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod-assign `{Self}` by `{Rhs}``\",\n+                         label=\"no implementation for `{Self} %= {Rhs}`\")]\n pub trait RemAssign<Rhs=Self> {\n     /// Performs the `%=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "a0ecd6cf75ce99277d279f4bc81aaccde0893045", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -120,7 +120,8 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n+                         label=\"no implementation for `{Self} & {RHS}`\")]\n pub trait BitAnd<RHS=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,7 +202,8 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n+                         label=\"no implementation for `{Self} | {RHS}`\")]\n pub trait BitOr<RHS=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +287,8 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n+                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n pub trait BitXor<RHS=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -365,7 +368,8 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n+                         label=\"no implementation for `{Self} << {RHS}`\")]\n pub trait Shl<RHS> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -466,7 +470,8 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// ```\n #[lang = \"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n+                         label=\"no implementation for `{Self} >> {RHS}`\")]\n pub trait Shr<RHS> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -579,7 +584,8 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"bitand_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} &= {Rhs}`\",\n+                         label=\"no implementation for `{Self} &= {Rhs}`\")]\n pub trait BitAndAssign<Rhs=Self> {\n     /// Performs the `&=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -626,7 +632,8 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} |= {Rhs}`\",\n+                         label=\"no implementation for `{Self} |= {Rhs}`\")]\n pub trait BitOrAssign<Rhs=Self> {\n     /// Performs the `|=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -673,7 +680,8 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^= {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^= {Rhs}`\")]\n pub trait BitXorAssign<Rhs=Self> {\n     /// Performs the `^=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -718,7 +726,8 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} <<= {Rhs}`\",\n+                         label=\"no implementation for `{Self} <<= {Rhs}`\")]\n pub trait ShlAssign<Rhs> {\n     /// Performs the `<<=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -784,7 +793,8 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"shr_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >>= {Rhs}`\",\n+                         label=\"no implementation for `{Self} >>= {Rhs}`\")]\n pub trait ShrAssign<Rhs=Self> {\n     /// Performs the `>>=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "f5ff122668558895ab35340d967ce1e6aa63c2a2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if direct {\n             // this is a \"direct\", user-specified, rather than derived,\n             // obligation.\n-            flags.push((\"direct\", None));\n+            flags.push((\"direct\".to_string(), None));\n         }\n \n         if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n@@ -359,21 +359,35 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // Currently I'm leaving it for what I need for `try`.\n             if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n                 method = self.tcx.item_name(item);\n-                flags.push((\"from_method\", None));\n-                flags.push((\"from_method\", Some(&*method)));\n+                flags.push((\"from_method\".to_string(), None));\n+                flags.push((\"from_method\".to_string(), Some(method.to_string())));\n             }\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n             desugaring = k.as_symbol().as_str();\n-            flags.push((\"from_desugaring\", None));\n-            flags.push((\"from_desugaring\", Some(&*desugaring)));\n+            flags.push((\"from_desugaring\".to_string(), None));\n+            flags.push((\"from_desugaring\".to_string(), Some(desugaring.to_string())));\n+        }\n+        let generics = self.tcx.generics_of(def_id);\n+        let self_ty = trait_ref.self_ty();\n+        let self_ty_str = self_ty.to_string();\n+        // FIXME: remove once `Self` is accepted by the compiler\n+        flags.push((\"_Self\".to_string(), Some(self_ty_str.clone())));\n+        flags.push((\"Self\".to_string(), Some(self_ty_str.clone())));\n+\n+        for param in generics.types.iter() {\n+            let name = param.name.as_str().to_string();\n+            let ty = trait_ref.substs.type_for_def(param);\n+            let ty_str = ty.to_string();\n+            flags.push((name.clone(),\n+                        Some(ty_str.clone())));\n         }\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {\n-            command.evaluate(self.tcx, trait_ref, &flags)\n+            command.evaluate(self.tcx, trait_ref, &flags[..])\n         } else {\n             OnUnimplementedNote::empty()\n         }\n@@ -549,7 +563,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n                             .unwrap_or((String::new(), String::new()));\n \n-                        let OnUnimplementedNote { message, label }\n+                        let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n \n@@ -578,6 +592,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                      trait_ref,\n                                                      trait_ref.self_ty()));\n                         }\n+                        if let Some(ref s) = note {\n+                            // If it has a custom \"#[rustc_on_unimplemented]\" note, let's display it\n+                            err.note(s.as_str());\n+                        }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n "}, {"sha": "a493b7f0bb60347cc9acc979fc0a8a305f0c5a3f", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -29,16 +29,18 @@ pub struct OnUnimplementedDirective {\n     pub subcommands: Vec<OnUnimplementedDirective>,\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n+    pub note: Option<OnUnimplementedFormatString>,\n }\n \n pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n+    pub note: Option<String>,\n }\n \n impl OnUnimplementedNote {\n     pub fn empty() -> Self {\n-        OnUnimplementedNote { message: None, label: None }\n+        OnUnimplementedNote { message: None, label: None, note: None }\n     }\n }\n \n@@ -89,6 +91,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n \n         let mut message = None;\n         let mut label = None;\n+        let mut note = None;\n         let mut subcommands = vec![];\n         for item in item_iter {\n             if item.check_name(\"message\") && message.is_none() {\n@@ -103,8 +106,14 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                         tcx, trait_def_id, label_.as_str(), span)?);\n                     continue;\n                 }\n+            } else if item.check_name(\"note\") && note.is_none() {\n+                if let Some(note_) = item.value_str() {\n+                    note = Some(OnUnimplementedFormatString::try_parse(\n+                        tcx, trait_def_id, note_.as_str(), span)?);\n+                    continue;\n+                }\n             } else if item.check_name(\"on\") && is_root &&\n-                message.is_none() && label.is_none()\n+                message.is_none() && label.is_none() && note.is_none()\n             {\n                 if let Some(items) = item.meta_item_list() {\n                     if let Ok(subcommand) =\n@@ -128,7 +137,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         if errored {\n             Err(ErrorReported)\n         } else {\n-            Ok(OnUnimplementedDirective { condition, message, label, subcommands })\n+            Ok(OnUnimplementedDirective { condition, message, label, subcommands, note })\n         }\n     }\n \n@@ -154,7 +163,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?)\n+                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                note: None,\n             }))\n         } else {\n             return Err(parse_error(tcx, attr.span,\n@@ -169,20 +179,21 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     pub fn evaluate(&self,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     trait_ref: ty::TraitRef<'tcx>,\n-                    options: &[(&str, Option<&str>)])\n+                    options: &[(String, Option<String>)])\n                     -> OnUnimplementedNote\n     {\n         let mut message = None;\n         let mut label = None;\n+        let mut note = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\",\n               self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.contains(&(&c.name().as_str(),\n-                                      match c.value_str().map(|s| s.as_str()) {\n-                                          Some(ref s) => Some(s),\n+                    options.contains(&(c.name().as_str().to_string(),\n+                                      match c.value_str().map(|s| s.as_str().to_string()) {\n+                                          Some(s) => Some(s),\n                                           None => None\n                                       }))\n                 }) {\n@@ -198,11 +209,16 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             if let Some(ref label_) = command.label {\n                 label = Some(label_.clone());\n             }\n+\n+            if let Some(ref note_) = command.note {\n+                note = Some(note_.clone());\n+            }\n         }\n \n         OnUnimplementedNote {\n             label: label.map(|l| l.format(tcx, trait_ref)),\n-            message: message.map(|m| m.format(tcx, trait_ref))\n+            message: message.map(|m| m.format(tcx, trait_ref)),\n+            note: note.map(|n| n.format(tcx, trait_ref)),\n         }\n     }\n }"}, {"sha": "b01f479895b10d64afe608be036923dbfa3be067", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -235,7 +235,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.span;\n-        let ident = self.parse_ident()?;\n+        let ident = self.parse_ident_attr()?;\n         let node = self.parse_meta_item_kind()?;\n         Ok(ast::MetaItem { name: ident.name, node: node, span: lo.to(self.prev_span) })\n     }"}, {"sha": "9e8c4d3de2220fbdad425c8c94468d8f9fd76d25", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -762,13 +762,19 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n-        self.parse_ident_common(true)\n+        self.parse_ident_common(true, false)\n     }\n \n-    fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n+    pub fn parse_ident_attr(&mut self) -> PResult<'a, ast::Ident> {\n+        self.parse_ident_common(true, true)\n+    }\n+\n+    fn parse_ident_common(&mut self, recover: bool, accept_self: bool) -> PResult<'a, ast::Ident> {\n         match self.token {\n             token::Ident(i) => {\n-                if self.token.is_reserved_ident() {\n+                if self.token.is_reserved_ident()\n+                    && !(accept_self && i.name == keywords::SelfType.name())\n+                {\n                     let mut err = self.struct_span_err(self.span,\n                                                        &format!(\"expected identifier, found {}\",\n                                                                 self.this_token_descr()));\n@@ -2111,7 +2117,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::with_empty_ctxt(name))\n         } else {\n-            self.parse_ident_common(false)\n+            self.parse_ident_common(false, false)\n         }\n     }\n \n@@ -2128,7 +2134,7 @@ impl<'a> Parser<'a> {\n             hi = self.prev_span;\n             (fieldname, self.parse_expr()?, false)\n         } else {\n-            let fieldname = self.parse_ident_common(false)?;\n+            let fieldname = self.parse_ident_common(false, false)?;\n             hi = self.prev_span;\n \n             // Mimic `x: x` for the `x` field shorthand."}, {"sha": "e364a4d8b1441f9837647eacfbde4f7b6313c258", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 55, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -6,11 +6,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n-note: required by `f1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n-   |\n-26 | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n@@ -20,11 +16,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n-note: required by `f2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n-   |\n-27 | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -34,11 +26,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n-note: required by `f3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n-   |\n-28 | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n@@ -48,11 +36,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n-note: required by `f4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n-   |\n-29 | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -62,11 +46,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n-note: required by `f5`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n-   |\n-30 | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n@@ -76,11 +56,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n-note: required by `g1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n-   |\n-33 | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -90,11 +66,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n-note: required by `g2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n-   |\n-34 | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n@@ -104,11 +76,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n-note: required by `g3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n-   |\n-35 | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -118,11 +86,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n-note: required by `g4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n-   |\n-36 | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n@@ -132,11 +96,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n-note: required by `h1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n-   |\n-39 | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -146,11 +106,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n-note: required by `h2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n-   |\n-40 | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `h2`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "d5c4add34b526392761133bf7ec1f9fcaa879669", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -10,11 +10,7 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<bool>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n-   |\n-12 |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n+   = note: required by `Foo::bar`\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n@@ -27,11 +23,7 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n              <u8 as Foo<bool>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n-   |\n-12 |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n+   = note: required by `Foo::bar`\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n@@ -45,11 +37,7 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n              <bool as Foo<u32>>\n              <bool as Foo<u64>>\n            and 2 others\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n-   |\n-12 |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n+   = note: required by `Foo::bar`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7fac604ba49d735955ab7f85fca125e6cf1eaf78", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -15,11 +15,7 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n    = note: required because it appears within the type `C`\n    = note: required because it appears within the type `B`\n    = note: required because it appears within the type `A`\n-note: required by `is_send`\n-  --> $DIR/recursion_limit.rs:41:1\n-   |\n-41 | fn is_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "3cc43847156a1d6fba3c5e943987f183e5e9284b", "filename": "src/test/ui/feature-gate-abi_unadjusted.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: unadjusted ABI is an implementation detail and perma-unstable\n+error: unadjusted ABI is an implementation detail and perma-unstable\n   --> $DIR/feature-gate-abi_unadjusted.rs:11:1\n    |\n 11 | / extern \"unadjusted\" fn foo() {"}, {"sha": "f486373d225c3fc82dc602de1dc87cdaf383b774", "filename": "src/test/ui/feature-gate-catch_expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `catch` expression is experimental (see issue #31436)\n+error: `catch` expression is experimental (see issue #31436)\n   --> $DIR/feature-gate-catch_expr.rs:12:24\n    |\n 12 |       let catch_result = do catch { //~ ERROR `catch` expression is experimental"}, {"sha": "26653a5739b2c922a465640013a1c34f1496b176", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,28 +1,28 @@\n-error[E0658]: 128-bit type is unstable (see issue #35118)\n+error: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:13:15\n    |\n 13 | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n    |               ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error[E0658]: 128-bit type is unstable (see issue #35118)\n+error: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:17:17\n    |\n 17 | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n    |                 ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error[E0658]: 128-bit type is unstable (see issue #35118)\n+error: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:22:12\n    |\n 22 |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n    |            ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error[E0658]: 128-bit type is unstable (see issue #35118)\n+error: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:26:12\n    |\n 26 |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n@@ -32,7 +32,7 @@ error[E0658]: 128-bit type is unstable (see issue #35118)\n \n error[E0601]: main function not found\n \n-error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n+error: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:30:1\n    |\n 30 | / enum A { //~ ERROR 128-bit type is unstable"}, {"sha": "5382122e30edd80d2329dc2cdc3ee44182b8a078", "filename": "src/test/ui/feature-gate-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: intrinsics are subject to change\n+error: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:11:1\n    |\n 11 | / extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n@@ -8,7 +8,7 @@ error[E0658]: intrinsics are subject to change\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n+error: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:15:1\n    |\n 15 | / extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change"}, {"sha": "90d0b8daee71ce5423a354697058a887214113a9", "filename": "src/test/ui/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,28 +1,28 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:11:1\n    |\n 11 | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:13:5\n    |\n 13 | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n    |     ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:15:1\n    |\n 15 | mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:19:1\n    |\n 19 | / fn b\u00e4r( //~ ERROR non-ascii idents\n@@ -36,71 +36,71 @@ error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n    |\n 20 |     b\u00e4z: isize //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:22:9\n    |\n 22 |     let _\u00f6: isize; //~ ERROR non-ascii idents\n    |         ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:25:10\n    |\n 25 |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n    |          ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:29:1\n    |\n 29 | struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:30:5\n    |\n 30 |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n    |     ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:33:1\n    |\n 33 | enum B\u00e4r { //~ ERROR non-ascii idents\n    | ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:34:5\n    |\n 34 |     B\u00e4z { //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:35:9\n    |\n 35 |         q\u00fcx: isize //~ ERROR non-ascii idents\n    |         ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:40:5\n    |\n 40 |     fn q\u00fcx();  //~ ERROR non-ascii idents"}, {"sha": "c59964887b58f92a30409d62263bca95d92eea62", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n+error: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-repr128.rs:12:1\n    |\n 12 | / enum A { //~ ERROR repr with 128-bit type is unstable"}, {"sha": "b79165147e590681031b7a6c3187087801be951c", "filename": "src/test/ui/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures.rs:16:5\n    |\n 16 | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "26b698912bc95eae650633169341256634329fc5", "filename": "src/test/ui/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:19:1\n    |\n 19 | / union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -8,7 +8,7 @@ error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:23:1\n    |\n 23 | / union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -18,7 +18,7 @@ error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error[E0658]: unions with `Drop` implementations are unstable (see issue #32836)\n+error: unions with `Drop` implementations are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:27:1\n    |\n 27 | / union U5 { //~ ERROR unions with `Drop` implementations are unstable"}, {"sha": "9e0e563c35f6581c0e35b82307e86467cb2c3876", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -12,11 +12,7 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-note: required by `send`\n-  --> $DIR/send-sync.rs:11:1\n-   |\n-11 | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `send`\n \n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n   --> $DIR/send-sync.rs:19:5\n@@ -32,11 +28,7 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-note: required by `sync`\n-  --> $DIR/send-sync.rs:12:1\n-   |\n-12 | fn sync<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `sync`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd8f3b8e6463df6efa329a9e77a58759c49d8a27", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -7,11 +7,7 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:26:17: 30:6 a:&std::cell::Cell<i32> _]`\n-note: required by `main::assert_send`\n-  --> $DIR/not-send-sync.rs:17:5\n-   |\n-17 |     fn assert_send<T: Send>(_: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `main::assert_send`\n \n error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied in `[generator@$DIR/not-send-sync.rs:19:17: 23:6 {std::cell::Cell<i32>, ()}]`\n   --> $DIR/not-send-sync.rs:19:5"}, {"sha": "ffd6a3fe4ffb1fbc240b137bbd6d3bdb39eb6f05", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -7,11 +7,7 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:21:5: 21:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:24:1\n-   |\n-24 | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `send`\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n   --> $DIR/auto-trait-leak.rs:30:5\n@@ -22,11 +18,7 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:24:1\n-   |\n-24 | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `send`\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n   --> $DIR/auto-trait-leak.rs:44:1"}, {"sha": "8ec819038031b45bfd7299dd3ada8ed5668754a6", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n    = note: expected type `i32`\n               found type `u32`\n \n-error[E0277]: the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:34:11\n    |\n 34 |         n + sum_to(n - 1)"}, {"sha": "acdf348791b204f84dbcc3e15f34903415dd62ce", "filename": "src/test/ui/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -4,11 +4,7 @@ error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n 14 | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required by `Trait0`\n-  --> $DIR/issue-24424.rs:12:1\n-   |\n-12 | trait Trait0<'l0>  {}\n-   | ^^^^^^^^^^^^^^^^^\n+   = note: required by `Trait0`\n \n error: aborting due to previous error\n "}, {"sha": "701a95222183a6f9369292f0fd9c1100dde9ec3f", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,7 +1,7 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:46:21\n+  --> $DIR/suggestions.rs:36:21\n    |\n-46 |         let mut a = (1); // should suggest no `mut`, no parens\n+36 |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n@@ -11,17 +11,17 @@ note: lint level defined here\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:41:1\n+  --> $DIR/suggestions.rs:31:1\n    |\n-41 | #[no_debug] // should suggest removal of deprecated attribute\n+31 | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:46:13\n+  --> $DIR/suggestions.rs:36:13\n    |\n-46 |         let mut a = (1); // should suggest no `mut`, no parens\n+36 |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ---^^\n    |             |\n    |             help: remove this `mut`\n@@ -72,30 +72,18 @@ warning: function is marked #[no_mangle], but not exported\n    |\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n-warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:31:18\n-   |\n-31 |     #[no_mangle] pub static DAUNTLESS: bool = true;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:33:18\n-   |\n-33 |     #[no_mangle] pub fn val_jean() {}\n-   |                  ^^^^^^^^^^^^^^^^^^^^\n-\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:44:5\n+  --> $DIR/suggestions.rs:34:5\n    |\n-44 |     while true { // should suggest `loop`\n+34 |     while true { // should suggest `loop`\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:51:23\n+  --> $DIR/suggestions.rs:41:23\n    |\n-51 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+41 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n    |                       ------------^^^^^^^^^^^^\n    |                       |\n    |                       help: remove this"}, {"sha": "abbf3da513a6faf6272002919d26057e50d9aefd", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -2,72 +2,7 @@\n   \"message\": \"cannot find type `Iter` in this scope\",\n   \"code\": {\n     \"code\": \"E0412\",\n-    \"explanation\": \"\n-The type name used is not in scope.\n-\n-Erroneous code examples:\n-\n-```compile_fail,E0412\n-impl Something {} // error: type name `Something` is not in scope\n-\n-// or:\n-\n-trait Foo {\n-    fn bar(N); // error: type name `N` is not in scope\n-}\n-\n-// or:\n-\n-fn foo(x: T) {} // type name `T` is not in scope\n-```\n-\n-To fix this error, please verify you didn't misspell the type name, you did\n-declare it or imported it into the scope. Examples:\n-\n-```\n-struct Something;\n-\n-impl Something {} // ok!\n-\n-// or:\n-\n-trait Foo {\n-    type N;\n-\n-    fn bar(_: Self::N); // ok!\n-}\n-\n-// or:\n-\n-fn foo<T>(x: T) {} // ok!\n-```\n-\n-Another case that causes this error is when a type is imported into a parent\n-module. To fix this, you can follow the suggestion and use File directly or\n-`use super::File;` which will import the types from the parent namespace. An\n-example that causes this error is below:\n-\n-```compile_fail,E0412\n-use std::fs::File;\n-\n-mod foo {\n-    fn some_function(f: File) {}\n-}\n-```\n-\n-```\n-use std::fs::File;\n-\n-mod foo {\n-    // either\n-    use super::File;\n-    // or\n-    // use std::fs::File;\n-    fn foo(f: File) {}\n-}\n-# fn main() {} // don't insert it for us; that'll break imports\n-```\n-\"\n+    \"explanation\": null\n   },\n   \"level\": \"error\",\n   \"spans\": ["}, {"sha": "d0229957b682ed2ed198c1661aaf9876eadb243d", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,8 +1,12 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-foreign.rs:12:30\n+  --> $DIR/format-foreign.rs:12:5\n    |\n-12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n-   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n+12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^--------^^-------^^-^^\n+   |                              |         |        |\n+   |                              |         |        unused\n+   |                              |         unused\n+   |                              unused\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`"}, {"sha": "9efdca12dea0307f7d88046b02f8334f91d41e06", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,43 +1,49 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:12:22\n+  --> $DIR/format-unused-lables.rs:12:5\n    |\n 12 |     println!(\"Test\", 123, 456, 789);\n-   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n+   |     ^^^^^^^^^^^^^^^^^---^^---^^---^^\n+   |                      |    |    |\n+   |                      |    |    unused\n+   |                      |    unused\n+   |                      unused\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:16:9\n+  --> $DIR/format-unused-lables.rs:14:5\n    |\n-15 | /     println!(\"Test2\",\n-16 | |         123,  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^\n-17 | |         456,\n-   | |         ^^^\n-18 | |         789\n-   | |         ^^^\n-19 | |     );\n-   | |______- multiple unused arguments in this statement\n+14 | /     println!(\"Test2\",\n+15 | |         123,\n+   | |         --- unused\n+16 | |         456,\n+   | |         --- unused\n+17 | |         789\n+   | |         --- unused\n+18 | |     );\n+   | |______^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n-  --> $DIR/format-unused-lables.rs:21:35\n+  --> $DIR/format-unused-lables.rs:20:35\n    |\n-21 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n+20 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n    |                                   ^^^^^^\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:24:9\n+  --> $DIR/format-unused-lables.rs:22:5\n    |\n-23 | /     println!(\"Some more $STUFF\",\n-24 | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^^^^\n-25 | |             STUFF=\n-26 | |        \"things\"\n-   | |        ^^^^^^^^\n-27 | |              , UNUSED=\"args\");\n-   | |_______________________^^^^^^_- multiple unused arguments in this statement\n+22 | /     println!(\"Some more $STUFF\",\n+23 | |         \"woo!\",\n+   | |         ------ unused\n+24 | |             STUFF=\n+25 | |        \"things\"\n+   | |        -------- unused\n+26 | |              , UNUSED=\"args\");\n+   | |_______________________------_^\n+   |                         |\n+   |                         unused\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`"}, {"sha": "442900e0a836aa8d9247162cdac0b20f60721d83", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -6,11 +6,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-note: required by `foo`\n-  --> $DIR/E0631.rs:13:1\n-   |\n-13 | fn foo<F: Fn(usize)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `foo`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:18:5\n@@ -20,11 +16,7 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-note: required by `bar`\n-  --> $DIR/E0631.rs:14:1\n-   |\n-14 | fn bar<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `bar`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:19:5\n@@ -35,11 +27,7 @@ error[E0631]: type mismatch in function arguments\n 19 |     foo(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-note: required by `foo`\n-  --> $DIR/E0631.rs:13:1\n-   |\n-13 | fn foo<F: Fn(usize)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `foo`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:20:5\n@@ -50,11 +38,7 @@ error[E0631]: type mismatch in function arguments\n 20 |     bar(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-note: required by `bar`\n-  --> $DIR/E0631.rs:14:1\n-   |\n-14 | fn bar<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `bar`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "57e66794a58a96d7d575542fcbc703598251d551", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,28 +1,28 @@\n-error[E0277]: the trait bound `{integer}: std::ops::Add<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot add `std::option::Option<{integer}>` to `{integer}`\n   --> $DIR/binops.rs:12:7\n    |\n 12 |     1 + Some(1); //~ ERROR is not satisfied\n    |       ^ no implementation for `{integer} + std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `usize: std::ops::Sub<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot substract `std::option::Option<{integer}>` from `usize`\n   --> $DIR/binops.rs:13:16\n    |\n 13 |     2 as usize - Some(1); //~ ERROR is not satisfied\n    |                ^ no implementation for `usize - std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Mul<()>` is not satisfied\n+error[E0277]: cannot multiply `()` to `{integer}`\n   --> $DIR/binops.rs:14:7\n    |\n 14 |     3 * (); //~ ERROR is not satisfied\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Div<&str>` is not satisfied\n+error[E0277]: cannot divide `{integer}` by `&str`\n   --> $DIR/binops.rs:15:7\n    |\n 15 |     4 / \"\"; //~ ERROR is not satisfied"}, {"sha": "d904831ba4e32a86078efd1f3383ab94a7f225ac", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -46,11 +46,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n-note: required by `f`\n-  --> $DIR/closure-arg-count.rs:13:1\n-   |\n-13 | fn f<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `f`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:26:53"}, {"sha": "77d3a332767378b34e32f4c81147a8036902040a", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -31,23 +31,15 @@ error[E0631]: type mismatch in function arguments\n    |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n    |     found signature of `fn(*mut &'a u32) -> _`\n    |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:18:1\n-   |\n-18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `baz`\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:20:5\n    |\n 20 |     baz(f); //~ ERROR type mismatch\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:18:1\n-   |\n-18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `baz`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "99767ba1afaefafafda8476ab5b80b9e1f25d2ea", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -5,11 +5,7 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:15:1\n-   |\n-15 | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `baz`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:18:5\n@@ -20,11 +16,7 @@ error[E0631]: type mismatch in closure arguments\n    |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:15:1\n-   |\n-15 | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2a27ffd1062473fcc9b5a89439862d2754e9d53e", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -7,11 +7,7 @@ error[E0631]: type mismatch in function arguments\n 21 |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n-note: required by `apply`\n-  --> $DIR/fn-variance-1.rs:15:1\n-   |\n-15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `apply`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:25:5\n@@ -22,11 +18,7 @@ error[E0631]: type mismatch in function arguments\n 25 |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n-note: required by `apply`\n-  --> $DIR/fn-variance-1.rs:15:1\n-   |\n-15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `apply`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8539c8818c025ed161eeb21b3f66d9001dc81209", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,17 +1,12 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:23:13\n    |\n-23 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-24 |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n-25 |     let z = call_it(3, f);\n+23 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:17:1\n-   |\n-17 | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `call_it`\n \n error: aborting due to previous error\n "}, {"sha": "1f71be446efb50a3ea67dcad52a2a7bb3f8dd963", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -5,11 +5,7 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:22:5\n-   |\n-22 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `Index::index`\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:43:5\n@@ -26,11 +22,7 @@ error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:22:5\n-   |\n-22 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `Index::index`\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:46:5\n@@ -47,11 +39,7 @@ error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:22:5\n-   |\n-22 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `Index::index`\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:49:5"}, {"sha": "c8c06bf44fd6fe9d2f9be3e62bc8b122b028d720", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -5,11 +5,7 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/on-impl.rs:19:5\n-   |\n-19 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `Index::index`\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:32:5"}, {"sha": "cde56022faea27364470201bbbc90bc868cc5679", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -5,11 +5,7 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n-note: required by `collect`\n-  --> $DIR/on-trait.rs:31:1\n-   |\n-31 | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `collect`\n \n error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:40:21\n@@ -18,11 +14,7 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n    |\n    = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n-note: required by `foobar`\n-  --> $DIR/on-trait.rs:21:1\n-   |\n-21 | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `foobar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "81ba0057d717341dbc4dd8f75984f62d20370545", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -4,11 +4,7 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n 17 |     let a: u8 = Tr::C; //~ ERROR the trait bound `u8: Tr` is not satisfied\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n    |\n-note: required by `Tr::C`\n-  --> $DIR/issue-29595.rs:13:5\n-   |\n-13 |     const C: Self;\n-   |     ^^^^^^^^^^^^^^\n+   = note: required by `Tr::C`\n \n error: aborting due to previous error\n "}, {"sha": "b6182825fc27808e2a7739366dbbc7c024381c91", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n+error[E0277]: cannot add `()` to `u32`\n   --> $DIR/multiline-span-simple.rs:23:18\n    |\n 23 |     foo(1 as u32 + //~ ERROR not satisfied"}, {"sha": "36cdd558b0faf86ea576418672fc26ed8115b791", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -22,11 +22,7 @@ error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n 25 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n-note: required by `try_trait_generic`\n-  --> $DIR/try-operator-on-main.rs:30:1\n-   |\n-30 | fn try_trait_generic<T: Try>() -> T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required by `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:32:5"}, {"sha": "2ca97aa3ef0676c919ab7e0494f1e7cec3d338d8", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "patch": "@@ -10,11 +10,7 @@ error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n 21 | | }\n    | |_^\n    |\n-note: required by `Foo`\n-  --> $DIR/issue-40294.rs:11:1\n-   |\n-11 | trait Foo: Sized {\n-   | ^^^^^^^^^^^^^^^^\n+   = note: required by `Foo`\n \n error: aborting due to previous error\n "}]}