{"sha": "db591778ac3c93285fec6a5b7332b218131ccf94", "node_id": "C_kwDOAAsO6NoAKGRiNTkxNzc4YWMzYzkzMjg1ZmVjNmE1YjczMzJiMjE4MTMxY2NmOTQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-26T11:52:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-26T11:52:21Z"}, "message": "Sync from rust bc881e83d1cced71046e844fa55c0b0e9f9af382", "tree": {"sha": "a5477feceee139e69723c076bb440af6b5172d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5477feceee139e69723c076bb440af6b5172d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db591778ac3c93285fec6a5b7332b218131ccf94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db591778ac3c93285fec6a5b7332b218131ccf94", "html_url": "https://github.com/rust-lang/rust/commit/db591778ac3c93285fec6a5b7332b218131ccf94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db591778ac3c93285fec6a5b7332b218131ccf94/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22e15b954d2be638ab0b15cee6e93cf301dc159", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22e15b954d2be638ab0b15cee6e93cf301dc159", "html_url": "https://github.com/rust-lang/rust/commit/a22e15b954d2be638ab0b15cee6e93cf301dc159"}, {"sha": "fadd1c536a1cc7b2b605abc8e8482fb15363b3a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadd1c536a1cc7b2b605abc8e8482fb15363b3a7", "html_url": "https://github.com/rust-lang/rust/commit/fadd1c536a1cc7b2b605abc8e8482fb15363b3a7"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "c761e5aabd1071d3c4f22f58d63155e6b0e8a3c2", "filename": "src/allocator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -1,7 +1,8 @@\n-use gccjit::{FunctionType, ToRValue};\n+use gccjit::{FunctionType, GlobalKind, ToRValue};\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::OomStrategy;\n use rustc_span::symbol::sym;\n \n use crate::GccContext;\n@@ -113,4 +114,10 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let _ret = context.new_call(None, callee, &args);\n     //llvm::LLVMSetTailCall(ret, True);\n     block.end_with_void_return(None);\n+\n+    let name = OomStrategy::SYMBOL.to_string();\n+    let global = context.new_global(None, GlobalKind::Exported, i8, name);\n+    let value = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let value = context.new_rvalue_from_int(i8, value as i32);\n+    global.global_set_initializer_rvalue(value);\n }"}, {"sha": "94b1e2ce13a8ee7677df252423039b0aae81db2b", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -934,7 +934,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let val_type = value.get_type();\n         match (type_is_pointer(val_type), type_is_pointer(dest_ty)) {\n             (false, true) => {\n-                // NOTE: Projecting a field of a pointer type will attemp a cast from a signed char to\n+                // NOTE: Projecting a field of a pointer type will attempt a cast from a signed char to\n                 // a pointer, which is not supported by gccjit.\n                 return self.cx.context.new_cast(None, self.inttoptr(value, val_type.make_pointer()), dest_ty);\n             },\n@@ -1251,8 +1251,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn apply_attrs_to_cleanup_callsite(&mut self, _llret: RValue<'gcc>) {\n-        // TODO\n+    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n+        unimplemented!();\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "61709dd92de7961e17524100ae7bdbfe02ac1f15", "filename": "src/common.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -11,7 +11,7 @@ use rustc_codegen_ssa::traits::{\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n-use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n+use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n@@ -24,18 +24,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         bytes_in_context(self, bytes)\n     }\n \n-    fn const_cstr(&self, symbol: Symbol, _null_terminated: bool) -> LValue<'gcc> {\n-        // TODO(antoyo): handle null_terminated.\n-        if let Some(&value) = self.const_cstr_cache.borrow().get(&symbol) {\n-            return value;\n-        }\n-\n-        let global = self.global_string(symbol.as_str());\n-\n-        self.const_cstr_cache.borrow_mut().insert(symbol, global);\n-        global\n-    }\n-\n     fn global_string(&self, string: &str) -> LValue<'gcc> {\n         // TODO(antoyo): handle non-null-terminated strings.\n         let string = self.context.new_string_literal(&*string);\n@@ -134,8 +122,12 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let len = s.as_str().len();\n-        let cs = self.const_ptrcast(self.const_cstr(s, false).get_address(None),\n+        let s_str = s.as_str();\n+        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n+            self.global_string(s_str)\n+        });\n+        let len = s_str.len();\n+        let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );\n         (cs, self.const_usize(len as u64))\n@@ -190,6 +182,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                     match self.tcx.global_alloc(alloc_id) {\n                         GlobalAlloc::Memory(alloc) => {\n                             let init = const_alloc_to_gcc(self, alloc);\n+                            let alloc = alloc.inner();\n                             let value =\n                                 match alloc.mutability {\n                                     Mutability::Mut => self.static_addr_of_mut(init, alloc.align, None),\n@@ -222,21 +215,21 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n-    fn const_data_from_alloc(&self, alloc: &Allocation) -> Self::Value {\n+    fn const_data_from_alloc(&self, alloc: ConstAllocation<'tcx>) -> Self::Value {\n         const_alloc_to_gcc(self, alloc)\n     }\n \n-    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: &Allocation, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n-        assert_eq!(alloc.align, layout.align.abi);\n+    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: ConstAllocation<'tcx>, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n+        assert_eq!(alloc.inner().align, layout.align.abi);\n         let ty = self.type_ptr_to(layout.gcc_type(self, true));\n         let value =\n             if layout.size == Size::ZERO {\n-                let value = self.const_usize(alloc.align.bytes());\n+                let value = self.const_usize(alloc.inner().align.bytes());\n                 self.context.new_cast(None, value, ty)\n             }\n             else {\n                 let init = const_alloc_to_gcc(self, alloc);\n-                let base_addr = self.static_addr_of(init, alloc.align, None);\n+                let base_addr = self.static_addr_of(init, alloc.inner().align, None);\n \n                 let array = self.const_bitcast(base_addr, self.type_i8p());\n                 let value = self.context.new_array_access(None, array, self.const_usize(offset.bytes())).get_address(None);"}, {"sha": "de52f3ea2255e7092863403dd028d568b9900b18", "filename": "src/consts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::mir::interpret::{self, Allocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n+use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n@@ -293,7 +293,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n-pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Allocation) -> RValue<'gcc> {\n+pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n+    let alloc = alloc.inner();\n     let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n@@ -347,7 +348,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Alloca\n     cx.const_struct(&llvals, true)\n }\n \n-pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, &'tcx Allocation), ErrorHandled> {\n+pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, ConstAllocation<'tcx>), ErrorHandled> {\n     let alloc = cx.tcx.eval_static_initializer(def_id)?;\n     Ok((const_alloc_to_gcc(cx, alloc), alloc))\n }"}, {"sha": "5e5b9e7e9b1b7e85e64dcec0aee15ba37fc55a00", "filename": "src/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -89,12 +89,13 @@ pub struct CodegenCx<'gcc, 'tcx> {\n \n     /// Cache of emitted const globals (value -> global)\n     pub const_globals: RefCell<FxHashMap<RValue<'gcc>, RValue<'gcc>>>,\n+\n     /// Map from the address of a global variable (rvalue) to the global variable itself (lvalue).\n     /// TODO(antoyo): remove when the rustc API is fixed.\n     pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,\n@@ -219,7 +220,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             vtables: Default::default(),\n             const_globals: Default::default(),\n             global_lvalues: Default::default(),\n-            const_cstr_cache: Default::default(),\n+            const_str_cache: Default::default(),\n             globals: Default::default(),\n             scalar_types: Default::default(),\n             types: Default::default(),"}, {"sha": "266759ed6cfa16e9d5d853340009b13a890aebb1", "filename": "src/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n+    fn create_vtable_debuginfo(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n         // TODO(antoyo)\n     }\n "}, {"sha": "08e584a46f33b16dfebc212fe5c3c8ab02fec3fd", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -260,20 +260,20 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     use rustc_target::abi::Abi::*;\n                     let tp_ty = substs.type_at(0);\n                     let layout = self.layout_of(tp_ty).layout;\n-                    let _use_integer_compare = match layout.abi {\n+                    let _use_integer_compare = match layout.abi() {\n                         Scalar(_) | ScalarPair(_, _) => true,\n                         Uninhabited | Vector { .. } => false,\n                         Aggregate { .. } => {\n                             // For rusty ABIs, small aggregates are actually passed\n                             // as `RegKind::Integer` (see `FnAbi::adjust_for_abi`),\n                             // so we re-use that same threshold here.\n-                            layout.size <= self.data_layout().pointer_size * 2\n+                            layout.size() <= self.data_layout().pointer_size * 2\n                         }\n                     };\n \n                     let a = args[0].immediate();\n                     let b = args[1].immediate();\n-                    if layout.size.bytes() == 0 {\n+                    if layout.size().bytes() == 0 {\n                         self.const_bool(true)\n                     }\n                     /*else if use_integer_compare {\n@@ -289,7 +289,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         let void_ptr_type = self.context.new_type::<*const ()>();\n                         let a_ptr = self.bitcast(a, void_ptr_type);\n                         let b_ptr = self.bitcast(b, void_ptr_type);\n-                        let n = self.context.new_cast(None, self.const_usize(layout.size.bytes()), self.sizet_type);\n+                        let n = self.context.new_cast(None, self.const_usize(layout.size().bytes()), self.sizet_type);\n                         let builtin = self.context.get_builtin_function(\"memcmp\");\n                         let cmp = self.context.new_call(None, builtin, &[a_ptr, b_ptr, n]);\n                         self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0))"}, {"sha": "8e197ea31a8e7be7b7badbfa866a31cfe56ec7bb", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -60,7 +60,7 @@ use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModul\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorReported, Handler};\n+use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -108,7 +108,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -117,7 +117,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Ok((codegen_results, work_products))\n     }\n \n-    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorReported> {\n+    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n@@ -147,7 +147,7 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         base::compile_codegen_unit(tcx, cgu_name, *self.supports_128bit_integers.lock().expect(\"lock\"))\n     }\n \n-    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel) -> TargetMachineFactoryFn<Self> {\n+    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel, _features: &[String]) -> TargetMachineFactoryFn<Self> {\n         // TODO(antoyo): set opt level.\n         Arc::new(|_| {\n             Ok(())"}, {"sha": "ed8f0445ca3e20d07dc67de469b089e6b7cab5a5", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db591778ac3c93285fec6a5b7332b218131ccf94/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=db591778ac3c93285fec6a5b7332b218131ccf94", "patch": "@@ -56,8 +56,8 @@ pub fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLa\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (layout.ty.kind(), &layout.variants)\n             {\n-                if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n+                if def.is_enum() && !def.variants().is_empty() {\n+                    write!(&mut name, \"::{}\", def.variant(index).name).unwrap();\n                 }\n             }\n             if let (&ty::Generator(_, _, _), &Variants::Single { index }) ="}]}