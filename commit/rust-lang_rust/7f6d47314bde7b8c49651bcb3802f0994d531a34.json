{"sha": "7f6d47314bde7b8c49651bcb3802f0994d531a34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNmQ0NzMxNGJkZTdiOGM0OTY1MWJjYjM4MDJmMDk5NGQ1MzFhMzQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-30T23:13:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-01T17:46:32Z"}, "message": "Correct initial field alignment for repr(C)/repr(int)", "tree": {"sha": "02807ea908c0eaa1cb67b5d8e9dcad8019de2b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02807ea908c0eaa1cb67b5d8e9dcad8019de2b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6d47314bde7b8c49651bcb3802f0994d531a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6d47314bde7b8c49651bcb3802f0994d531a34", "html_url": "https://github.com/rust-lang/rust/commit/7f6d47314bde7b8c49651bcb3802f0994d531a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6d47314bde7b8c49651bcb3802f0994d531a34/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8321b5e87c87aa4dbea729b4dd722740fac645", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8321b5e87c87aa4dbea729b4dd722740fac645", "html_url": "https://github.com/rust-lang/rust/commit/0d8321b5e87c87aa4dbea729b4dd722740fac645"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "a319b341ebbf06ee2bbc82d07829668c31393ad8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d47314bde7b8c49651bcb3802f0994d531a34/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d47314bde7b8c49651bcb3802f0994d531a34/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7f6d47314bde7b8c49651bcb3802f0994d531a34", "patch": "@@ -940,11 +940,15 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 // We increase the size of the discriminant to avoid LLVM copying\n                 // padding when it doesn't need to. This normally causes unaligned\n                 // load/stores and excessive memcpy/memset operations. By using a\n-                // bigger integer size, LLVM can be sure about it's contents and\n+                // bigger integer size, LLVM can be sure about its contents and\n                 // won't be so conservative.\n \n                 // Use the initial field alignment\n-                let mut ity = Integer::for_abi_align(dl, start_align).unwrap_or(min_ity);\n+                let mut ity = if def.repr.c() || def.repr.int.is_some() {\n+                    min_ity\n+                } else {\n+                    Integer::for_abi_align(dl, start_align).unwrap_or(min_ity)\n+                };\n \n                 // If the alignment is not larger than the chosen discriminant size,\n                 // don't use the alignment as the final size."}, {"sha": "32d015c3ca2e56356b1dbf0761313a08679131eb", "filename": "src/test/run-pass/repr_c_int_align.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d47314bde7b8c49651bcb3802f0994d531a34/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d47314bde7b8c49651bcb3802f0994d531a34/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepr_c_int_align.rs?ref=7f6d47314bde7b8c49651bcb3802f0994d531a34", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![allow(dead_code)]\n+\n+#[repr(C, u8)]\n+enum ReprCu8 {\n+    A(u16),\n+    B,\n+}\n+\n+#[repr(C)]\n+struct ReprC {\n+    tag: u8,\n+    padding: u8,\n+    payload: u16,\n+}\n+\n+fn main() {\n+    let r1 = ReprC { tag: 0, padding: 0, payload: 0 };\n+    let r2 = ReprC { tag: 0, padding: 1, payload: 1 };\n+\n+    let t1: &ReprCu8 = unsafe { std::mem::transmute(&r1) };\n+    let t2: &ReprCu8 = unsafe { std::mem::transmute(&r2) };\n+\n+    match (t1, t2) {\n+        (ReprCu8::A(_), ReprCu8::A(_)) => (),\n+        _ => assert!(false)\n+    };\n+}"}]}