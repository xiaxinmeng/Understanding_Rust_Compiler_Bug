{"sha": "f067935ab2d87c9dfc542f9398483e0538a91e36", "node_id": "C_kwDOAAsO6NoAKGYwNjc5MzVhYjJkODdjOWRmYzU0MmY5Mzk4NDgzZTA1MzhhOTFlMzY", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2023-05-17T21:28:58Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2023-05-17T22:12:13Z"}, "message": "CFI: Fix encode_ty: unexpected Param(B/#1)\n\nFixes #111510 and complements #106547 by adding support for encoding\ntype parameters and also by transforming trait objects' traits into\ntheir identities before emitting type checks.", "tree": {"sha": "c9889b1fa9c88d347810f039d5faac91a347adc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9889b1fa9c88d347810f039d5faac91a347adc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f067935ab2d87c9dfc542f9398483e0538a91e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f067935ab2d87c9dfc542f9398483e0538a91e36", "html_url": "https://github.com/rust-lang/rust/commit/f067935ab2d87c9dfc542f9398483e0538a91e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f067935ab2d87c9dfc542f9398483e0538a91e36/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077fc26f0acfa54e9c580534616c17ffc279a9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/077fc26f0acfa54e9c580534616c17ffc279a9d4", "html_url": "https://github.com/rust-lang/rust/commit/077fc26f0acfa54e9c580534616c17ffc279a9d4"}], "stats": {"total": 253, "additions": 189, "deletions": 64}, "files": [{"sha": "51d508a580b928d74328c679137f1fe91d929a21", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f067935ab2d87c9dfc542f9398483e0538a91e36/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f067935ab2d87c9dfc542f9398483e0538a91e36/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=f067935ab2d87c9dfc542f9398483e0538a91e36", "patch": "@@ -673,14 +673,21 @@ fn encode_ty<'tcx>(\n             typeid.push_str(&s);\n         }\n \n+        // Type parameters\n+        ty::Param(..) => {\n+            // u5param as vendor extended type\n+            let mut s = String::from(\"u5param\");\n+            compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n+            typeid.push_str(&s);\n+        }\n+\n         // Unexpected types\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n         | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)\n-        | ty::Param(..)\n         | ty::Placeholder(..) => {\n             bug!(\"encode_ty: unexpected `{:?}`\", ty.kind());\n         }\n@@ -689,6 +696,41 @@ fn encode_ty<'tcx>(\n     typeid\n }\n \n+/// Transforms predicates for being encoded and used in the substitution dictionary.\n+fn transform_predicates<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    predicates: &List<ty::PolyExistentialPredicate<'tcx>>,\n+    _options: EncodeTyOptions,\n+) -> &'tcx List<ty::PolyExistentialPredicate<'tcx>> {\n+    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> = predicates\n+        .iter()\n+        .map(|predicate| match predicate.skip_binder() {\n+            ty::ExistentialPredicate::Trait(trait_ref) => {\n+                let trait_ref = ty::TraitRef::identity(tcx, trait_ref.def_id);\n+                ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+                    ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n+                ))\n+            }\n+            _ => predicate,\n+        })\n+        .collect();\n+    tcx.mk_poly_existential_predicates(&predicates)\n+}\n+\n+/// Transforms substs for being encoded and used in the substitution dictionary.\n+fn transform_substs<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+    options: TransformTyOptions,\n+) -> SubstsRef<'tcx> {\n+    let substs = substs.iter().map(|subst| match subst.unpack() {\n+        GenericArgKind::Type(ty) if ty.is_c_void(tcx) => tcx.mk_unit().into(),\n+        GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n+        _ => subst,\n+    });\n+    tcx.mk_substs_from_iter(substs)\n+}\n+\n // Transforms a ty:Ty for being encoded and used in the substitution dictionary. It transforms all\n // c_void types into unit types unconditionally, generalizes pointers if\n // TransformTyOptions::GENERALIZE_POINTERS option is set, and normalizes integers if\n@@ -697,7 +739,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n     let mut ty = ty;\n \n     match ty.kind() {\n-        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) | ty::Dynamic(..) => {}\n+        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) => {}\n \n         ty::Bool => {\n             if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n@@ -870,6 +912,14 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n             }\n         }\n \n+        ty::Dynamic(predicates, _region, kind) => {\n+            ty = tcx.mk_dynamic(\n+                transform_predicates(tcx, predicates, options),\n+                tcx.lifetimes.re_erased,\n+                *kind,\n+            );\n+        }\n+\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n@@ -885,20 +935,6 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n     ty\n }\n \n-/// Transforms substs for being encoded and used in the substitution dictionary.\n-fn transform_substs<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    substs: SubstsRef<'tcx>,\n-    options: TransformTyOptions,\n-) -> SubstsRef<'tcx> {\n-    let substs = substs.iter().map(|subst| match subst.unpack() {\n-        GenericArgKind::Type(ty) if ty.is_c_void(tcx) => tcx.mk_unit().into(),\n-        GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n-        _ => subst,\n-    });\n-    tcx.mk_substs_from_iter(substs)\n-}\n-\n /// Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor\n /// extended type qualifiers and types for Rust types that are not used at the FFI boundary.\n #[instrument(level = \"trace\", skip(tcx))]"}, {"sha": "3aa16d9f64550199944d460d10ab8d7cb355b5a6", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=f067935ab2d87c9dfc542f9398483e0538a91e36", "patch": "@@ -44,7 +44,7 @@ impl<T> Trait1<T> for i32 {\n }\n \n // Trait implementation\n-impl<T> Trait1<T> for Struct1<T> {\n+impl<T, U> Trait1<T> for Struct1<U> {\n     fn foo(&self) { }\n }\n \n@@ -536,15 +536,15 @@ pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n // CHECK: ![[TYPE93]] = !{i64 0, !\"_ZTSFvPFu3i32S_EE\"}\n // CHECK: ![[TYPE94]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_E\"}\n // CHECK: ![[TYPE95]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_S0_E\"}\n-// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEEE\"}\n-// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_E\"}\n-// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_S5_E\"}\n-// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEEE\"}\n-// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_E\"}\n-// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_S5_E\"}\n-// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEEE\"}\n-// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_E\"}\n-// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5tupleIu3i32EEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIS0_ES_u6regionEES5_S5_E\"}\n+// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n+// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n+// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n+// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n+// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n+// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n+// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n+// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n+// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n // CHECK: ![[TYPE105]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEEE\"}\n // CHECK: ![[TYPE106]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_E\"}\n // CHECK: ![[TYPE107]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_S2_E\"}\n@@ -566,9 +566,9 @@ pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n // CHECK: ![[TYPE123]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNINvC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3fn18{{[{}][{}]}}impl{{[}][}]}}3fooIu3i32EE\"}\n // CHECK: ![[TYPE124]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNINvC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3fn18{{[{}][{}]}}impl{{[}][}]}}3fooIu3i32ES0_E\"}\n // CHECK: ![[TYPE125]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNINvC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3fn18{{[{}][{}]}}impl{{[}][}]}}3fooIu3i32ES0_S0_E\"}\n-// CHECK: ![[TYPE126]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu3i32Eu6regionES_EE\"}\n-// CHECK: ![[TYPE127]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu3i32Eu6regionES_ES3_E\"}\n-// CHECK: ![[TYPE128]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu3i32Eu6regionES_ES3_S3_E\"}\n+// CHECK: ![[TYPE126]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu5paramEu6regionEu3i32EE\"}\n+// CHECK: ![[TYPE127]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu5paramEu6regionEu3i32ES4_E\"}\n+// CHECK: ![[TYPE128]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3dynIu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait1Iu5paramEu6regionEu3i32ES4_S4_E\"}\n // CHECK: ![[TYPE129]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3i32S_EE\"}\n // CHECK: ![[TYPE130]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3i32S_ES0_E\"}\n // CHECK: ![[TYPE131]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NvNtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi6Trait13fooIu3i32S_ES0_S0_E\"}"}, {"sha": "18914049a103d69976f9213f65819817f238672f", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs?ref=f067935ab2d87c9dfc542f9398483e0538a91e36", "patch": "@@ -1,44 +1,89 @@\n // Verifies that type metadata identifiers for trait objects are emitted correctly.\n //\n // needs-sanitizer-cfi\n-// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Copt-level=0 -Ctarget-feature=-crt-static -Zsanitizer=cfi\n \n #![crate_type=\"lib\"]\n \n-trait Trait1 {\n+pub trait Trait1 {\n     fn foo(&self);\n }\n \n-struct Type1;\n+#[derive(Clone, Copy)]\n+pub struct Type1;\n \n impl Trait1 for Type1 {\n     fn foo(&self) {\n     }\n }\n \n-pub fn foo() {\n-    let a = Type1;\n+pub trait Trait2<T> {\n+    fn bar(&self);\n+}\n+\n+pub struct Type2;\n+\n+impl Trait2<i32> for Type2 {\n+    fn bar(&self) {\n+    }\n+}\n+\n+pub trait Trait3<T> {\n+    fn baz(&self, _: &T);\n+}\n+\n+pub struct Type3;\n+\n+impl<T, U> Trait3<U> for T {\n+    fn baz(&self, _: &U) {\n+    }\n+}\n+\n+pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n-    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}}\n-    // CHECK:       call <sanitizer_cfi_emit_type_metadata_trait_objects::Type1 as sanitizer_cfi_emit_type_metadata_trait_objects::Trait1>::foo\n+    // CHECK-LABEL: define{{.*}}4foo1{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE1:[[:print:]]+]]\")\n }\n \n-pub fn bar() {\n+pub fn bar1() {\n     let a = Type1;\n     let b = &a as &dyn Trait1;\n     b.foo();\n-    // CHECK-LABEL: define{{.*}}bar{{.*}}!type !{{[0-9]+}}\n-    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0|%1}}, metadata !\"[[TYPE1:[[:print:]]+]]\")\n+    // CHECK-LABEL: define{{.*}}4bar1{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE2:[[:print:]]+]]\")\n }\n \n-pub fn baz() {\n-    let a = Type1;\n-    let b = &a as &dyn Trait1;\n-    a.foo();\n-    b.foo();\n-    // CHECK-LABEL: define{{.*}}baz{{.*}}!type !{{[0-9]+}}\n-    // CHECK:       call <sanitizer_cfi_emit_type_metadata_trait_objects::Type1 as sanitizer_cfi_emit_type_metadata_trait_objects::Trait1>::foo\n-    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0|%1}}, metadata !\"[[TYPE1:[[:print:]]+]]\")\n+pub fn foo2<T>(a: &dyn Trait2<T>) {\n+    a.bar();\n+    // CHECK-LABEL: define{{.*}}4foo2{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE2:[[:print:]]+]]\")\n+}\n+\n+pub fn bar2() {\n+    let a = Type2;\n+    foo2(&a);\n+    let b = &a as &dyn Trait2<i32>;\n+    b.bar();\n+    // CHECK-LABEL: define{{.*}}4bar2{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE2:[[:print:]]+]]\")\n+}\n+\n+pub fn foo3(a: &dyn Trait3<Type3>) {\n+    let b = Type3;\n+    a.baz(&b);\n+    // CHECK-LABEL: define{{.*}}4foo3{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE3:[[:print:]]+]]\")\n+}\n+\n+pub fn bar3() {\n+    let a = Type3;\n+    foo3(&a);\n+    let b = &a as &dyn Trait3<Type3>;\n+    b.baz(&a);\n+    // CHECK-LABEL: define{{.*}}4bar3{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE3:[[:print:]]+]]\")\n }\n \n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE1]]\"}\n+// CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE2]]\"}\n+// CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE3]]\"}"}, {"sha": "a46f09556966fe6fe12b8991a78e99b172e60813", "filename": "tests/codegen/sanitizer-kcfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 61, "deletions": 17, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f067935ab2d87c9dfc542f9398483e0538a91e36/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs?ref=f067935ab2d87c9dfc542f9398483e0538a91e36", "patch": "@@ -30,40 +30,84 @@ trait Freeze { }\n #[lang=\"drop_in_place\"]\n fn drop_in_place_fn<T>() { }\n \n-trait Trait1 {\n+pub trait Trait1 {\n     fn foo(&self);\n }\n \n-struct Type1;\n+pub struct Type1;\n \n impl Trait1 for Type1 {\n     fn foo(&self) {\n     }\n }\n \n-pub fn foo() {\n-    let a = Type1;\n+pub trait Trait2<T> {\n+    fn bar(&self);\n+}\n+\n+pub struct Type2;\n+\n+impl Trait2<i32> for Type2 {\n+    fn bar(&self) {\n+    }\n+}\n+\n+pub trait Trait3<T> {\n+    fn baz(&self, _: &T);\n+}\n+\n+pub struct Type3;\n+\n+impl<T, U> Trait3<U> for T {\n+    fn baz(&self, _: &U) {\n+    }\n+}\n+\n+pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n-    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n-    // CHECK:       call <sanitizer_kcfi_emit_type_metadata_trait_objects::Type1 as sanitizer_kcfi_emit_type_metadata_trait_objects::Trait1>::foo\n+    // CHECK-LABEL: define{{.*}}4foo1{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n }\n \n-pub fn bar() {\n+pub fn bar1() {\n     let a = Type1;\n     let b = &a as &dyn Trait1;\n     b.foo();\n-    // CHECK-LABEL: define{{.*}}bar{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n-    // CHECK:       call void %0({{\\{\\}\\*|ptr}} align 1 {{%b\\.0|%_1}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n+    // CHECK-LABEL: define{{.*}}4bar1{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n }\n \n-pub fn baz() {\n-    let a = Type1;\n-    let b = &a as &dyn Trait1;\n-    a.foo();\n-    b.foo();\n-    // CHECK-LABEL: define{{.*}}baz{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n-    // CHECK:       call <sanitizer_kcfi_emit_type_metadata_trait_objects::Type1 as sanitizer_kcfi_emit_type_metadata_trait_objects::Trait1>::foo\n-    // CHECK:       call void %0({{\\{\\}\\*|ptr}} align 1 {{%b\\.0|%_1}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n+pub fn foo2<T>(a: &dyn Trait2<T>) {\n+    a.bar();\n+    // CHECK-LABEL: define{{.*}}4foo2{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE2:[[:print:]]+]]) ]\n+}\n+\n+pub fn bar2() {\n+    let a = Type2;\n+    foo2(&a);\n+    let b = &a as &dyn Trait2<i32>;\n+    b.bar();\n+    // CHECK-LABEL: define{{.*}}4bar2{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE2:[[:print:]]+]]) ]\n+}\n+\n+pub fn foo3(a: &dyn Trait3<Type3>) {\n+    let b = Type3;\n+    a.baz(&b);\n+    // CHECK-LABEL: define{{.*}}4foo3{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type3\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE3:[[:print:]]+]]) ]\n+}\n+\n+pub fn bar3() {\n+    let a = Type3;\n+    foo3(&a);\n+    let b = &a as &dyn Trait3<Type3>;\n+    b.baz(&a);\n+    // CHECK-LABEL: define{{.*}}4bar3{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type3\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE3:[[:print:]]+]]) ]\n }\n \n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE1]]}\n+// CHECK: !{{[0-9]+}} = !{i32 [[TYPE2]]}\n+// CHECK: !{{[0-9]+}} = !{i32 [[TYPE3]]}"}]}