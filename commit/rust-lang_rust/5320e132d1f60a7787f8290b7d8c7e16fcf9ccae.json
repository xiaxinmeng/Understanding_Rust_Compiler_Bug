{"sha": "5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjBlMTMyZDFmNjBhNzc4N2Y4MjkwYjdkOGM3ZTE2ZmNmOWNjYWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-20T19:18:24Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-20T20:12:52Z"}, "message": "add a LinearSet type (implementing the Set trait)", "tree": {"sha": "47fc78b76cb85ff8c62db4e35ba63515c9cf8df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47fc78b76cb85ff8c62db4e35ba63515c9cf8df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "html_url": "https://github.com/rust-lang/rust/commit/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "html_url": "https://github.com/rust-lang/rust/commit/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "5c7b0643d3dec535d918aa72c216028f949d6fb0", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -46,6 +46,8 @@ pub trait SendMap<K:Eq Hash, V: Copy> {\n \n /// Open addressing with linear probing.\n pub mod linear {\n+    use iter::BaseIter;\n+    use container::Set;\n     use cmp::Eq;\n     use cmp;\n     use hash::Hash;\n@@ -442,7 +444,7 @@ pub mod linear {\n         }\n     }\n \n-    impl<K:Hash IterBytes Eq, V: Eq> LinearMap<K, V>: cmp::Eq {\n+    impl<K:Hash IterBytes Eq, V: Eq> LinearMap<K, V>: Eq {\n         pure fn eq(&self, other: &LinearMap<K, V>) -> bool {\n             if self.len() != other.len() { return false; }\n \n@@ -460,6 +462,47 @@ pub mod linear {\n             !self.eq(other)\n         }\n     }\n+\n+    pub struct LinearSet<T: Hash IterBytes Eq> {\n+        priv map: LinearMap<T, ()>\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: BaseIter<T> {\n+        /// Visit all values in order\n+        pure fn each(&self, f: fn(&T) -> bool) { self.map.each_key(f) }\n+        pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: Eq {\n+        pure fn eq(&self, other: &LinearSet<T>) -> bool { self.map == other.map }\n+        pure fn ne(&self, other: &LinearSet<T>) -> bool { self.map != other.map }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: Set<T> {\n+        /// Return true if the set contains a value\n+        pure fn contains(&self, value: &T) -> bool {\n+            self.map.contains_key(value)\n+        }\n+\n+        /// Add a value to the set. Return true if the value was not already\n+        /// present in the set.\n+        fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n+\n+        /// Remove a value from the set. Return true if the value was\n+        /// present in the set.\n+        fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T> {\n+        /// Create an empty LinearSet\n+        static fn new() -> LinearSet<T> { LinearSet{map: LinearMap()} }\n+\n+        /// Return the number of elements in the set\n+        pure fn len(&self) -> uint { self.map.len() }\n+\n+        /// Return true if the set contains no elements\n+        pure fn is_empty(&self) -> bool { self.map.is_empty() }\n+    }\n }\n \n #[test]"}]}