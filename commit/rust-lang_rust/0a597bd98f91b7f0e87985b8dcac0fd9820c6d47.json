{"sha": "0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTk3YmQ5OGY5MWI3ZjBlODc5ODViOGRjYWMwZmQ5ODIwYzZkNDc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-06T02:48:53Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-09T21:12:59Z"}, "message": "Remove `CowBoxSymStr`.\n\n`CowBoxSymStr` is a type that either holds a `SymbolStr` (which is much\nthe same as a `Symbol`), or an owned string. When computing skeletons,\na `SymbolStr` is stored if the skeleton is the same as the original\nstring, otherwise an owned string is stored.\n\nSo, basically, `CowBoxSymStr` is a type for string interning. But we\nalready have one of those: `Symbol` itself. This PR removes\n`CowBoxSymStr`, using `Symbol` instead. A good thing about this is that\nit avoids storing `SymbolStr` values in `skeleton_map`, something that\nis discouraged.\n\nThe PR also inlines and removes the `calc_skeleton()` function because\nthat simplifies the code.", "tree": {"sha": "c743ffb9380a285605cb60e94a891da53009e278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c743ffb9380a285605cb60e94a891da53009e278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "html_url": "https://github.com/rust-lang/rust/commit/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b67c2d5e12d98b70323bd7874886dd650c5499", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b67c2d5e12d98b70323bd7874886dd650c5499", "html_url": "https://github.com/rust-lang/rust/commit/75b67c2d5e12d98b70323bd7874886dd650c5499"}], "stats": {"total": 84, "additions": 23, "deletions": 61}, "files": [{"sha": "ab1658b2229829e263195a5dc5706e2056e5ced9", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 23, "deletions": 61, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "patch": "@@ -1,7 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -39,7 +39,6 @@ impl EarlyLintPass for NonAsciiIdents {\n         use rustc_span::Span;\n         use std::collections::BTreeMap;\n         use unicode_security::GeneralSecurityProfile;\n-        use utils::CowBoxSymStr;\n \n         let check_non_ascii_idents = cx.builder.lint_level(NON_ASCII_IDENTS).0 != Level::Allow;\n         let check_uncommon_codepoints =\n@@ -83,33 +82,34 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n \n         if has_non_ascii_idents && check_confusable_idents {\n-            let mut skeleton_map: FxHashMap<CowBoxSymStr, (SymbolStr, Span, bool)> =\n+            let mut skeleton_map: FxHashMap<Symbol, (Symbol, Span, bool)> =\n                 FxHashMap::with_capacity_and_hasher(symbols.len(), Default::default());\n-            let mut str_buf = String::new();\n-            for (symbol, &sp) in symbols.iter() {\n-                fn calc_skeleton(symbol_str: &SymbolStr, buffer: &mut String) -> CowBoxSymStr {\n-                    use std::mem::replace;\n-                    use unicode_security::confusable_detection::skeleton;\n-                    buffer.clear();\n-                    buffer.extend(skeleton(symbol_str));\n-                    if *symbol_str == *buffer {\n-                        CowBoxSymStr::Interned(symbol_str.clone())\n-                    } else {\n-                        let owned = replace(buffer, String::new());\n-                        CowBoxSymStr::Owned(owned.into_boxed_str())\n-                    }\n-                }\n+            let mut skeleton_buf = String::new();\n+\n+            for (&symbol, &sp) in symbols.iter() {\n+                use unicode_security::confusable_detection::skeleton;\n+\n                 let symbol_str = symbol.as_str();\n                 let is_ascii = symbol_str.is_ascii();\n-                let skeleton = calc_skeleton(&symbol_str, &mut str_buf);\n+\n+                // Get the skeleton as a `Symbol`.\n+                skeleton_buf.clear();\n+                skeleton_buf.extend(skeleton(&symbol_str));\n+                let skeleton_sym = if *symbol_str == *skeleton_buf {\n+                    symbol\n+                } else {\n+                    Symbol::intern(&skeleton_buf)\n+                };\n+\n                 skeleton_map\n-                    .entry(skeleton)\n-                    .and_modify(|(existing_symbolstr, existing_span, existing_is_ascii)| {\n+                    .entry(skeleton_sym)\n+                    .and_modify(|(existing_symbol, existing_span, existing_is_ascii)| {\n                         if !*existing_is_ascii || !is_ascii {\n                             cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n                                 lint.build(&format!(\n                                     \"identifier pair considered confusable between `{}` and `{}`\",\n-                                    existing_symbolstr, symbol_str\n+                                    existing_symbol.as_str(),\n+                                    symbol.as_str()\n                                 ))\n                                 .span_label(\n                                     *existing_span,\n@@ -119,12 +119,12 @@ impl EarlyLintPass for NonAsciiIdents {\n                             });\n                         }\n                         if *existing_is_ascii && !is_ascii {\n-                            *existing_symbolstr = symbol_str.clone();\n+                            *existing_symbol = symbol;\n                             *existing_span = sp;\n                             *existing_is_ascii = is_ascii;\n                         }\n                     })\n-                    .or_insert((symbol_str, sp, is_ascii));\n+                    .or_insert((symbol, sp, is_ascii));\n             }\n         }\n \n@@ -238,41 +238,3 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n     }\n }\n-\n-mod utils {\n-    use rustc_span::symbol::SymbolStr;\n-    use std::hash::{Hash, Hasher};\n-    use std::ops::Deref;\n-\n-    pub(super) enum CowBoxSymStr {\n-        Interned(SymbolStr),\n-        Owned(Box<str>),\n-    }\n-\n-    impl Deref for CowBoxSymStr {\n-        type Target = str;\n-\n-        fn deref(&self) -> &str {\n-            match self {\n-                CowBoxSymStr::Interned(interned) => interned,\n-                CowBoxSymStr::Owned(ref owned) => owned,\n-            }\n-        }\n-    }\n-\n-    impl Hash for CowBoxSymStr {\n-        #[inline]\n-        fn hash<H: Hasher>(&self, state: &mut H) {\n-            Hash::hash(&**self, state)\n-        }\n-    }\n-\n-    impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n-        #[inline]\n-        fn eq(&self, other: &CowBoxSymStr) -> bool {\n-            PartialEq::eq(&**self, &**other)\n-        }\n-    }\n-\n-    impl Eq for CowBoxSymStr {}\n-}"}]}