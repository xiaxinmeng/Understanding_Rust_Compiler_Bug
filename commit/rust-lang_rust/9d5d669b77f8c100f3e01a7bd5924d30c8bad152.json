{"sha": "9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWQ2NjliNzdmOGMxMDBmM2UwMWE3YmQ1OTI0ZDMwYzhiYWQxNTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-03-07T22:19:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-03-07T22:24:47Z"}, "message": "diagnostics: Differentiate between edition meanings of ::foo in resolve diagnostics for ::foo::Bar", "tree": {"sha": "5ee539fa8a3d94fa3159d285ca4f4d17515ee718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee539fa8a3d94fa3159d285ca4f4d17515ee718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "html_url": "https://github.com/rust-lang/rust/commit/9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac7f9ccb6f84922d316a3efa2f50061d4af22801", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7f9ccb6f84922d316a3efa2f50061d4af22801", "html_url": "https://github.com/rust-lang/rust/commit/ac7f9ccb6f84922d316a3efa2f50061d4af22801"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "2ee7f53ffa847e4f800838fc69920666df438865", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::parse::feature_err;\n+use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -133,7 +134,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n         // Make the base error.\n-        let expected = source.descr_expected();\n+        let mut expected = source.descr_expected();\n         let path_str = Segment::names_to_string(path);\n         let item_str = path.last().unwrap().ident;\n         let (base_msg, fallback_label, base_span, could_be_expr) = if let Some(res) = res {\n@@ -166,6 +167,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             let (mod_prefix, mod_str) = if path.len() == 1 {\n                 (String::new(), \"this scope\".to_string())\n             } else if path.len() == 2 && path[0].ident.name == kw::PathRoot {\n+                if self.r.session.edition() > Edition::Edition2015 {\n+                    // In edition 2018 onwards, the `::foo` syntax may only pull from the extern prelude\n+                    // which overrides all other expectations of item type\n+                    expected = \"crate\";\n+                    (String::new(), \"the list of imported crates\".to_string())\n+                } else {\n+                    (String::new(), \"the crate root\".to_string())\n+                }\n+            } else if path.len() == 2 && path[0].ident.name == kw::Crate {\n                 (String::new(), \"the crate root\".to_string())\n             } else {\n                 let mod_path = &path[..path.len() - 1];"}, {"sha": "fc35b001a60da53a8697f95b1f3b162f0e25495f", "filename": "src/test/ui/editions-crate-root-2015.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -7,6 +7,13 @@ mod inner {\n     fn crate_inner(_: crate::nonexistant::Foo) {\n         //~^ ERROR failed to resolve: maybe a missing crate `nonexistant`?\n     }\n+\n+    fn bare_global(_: ::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n+    fn bare_crate(_: crate::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n }\n \n fn main() {"}, {"sha": "f8d65fec3d12def79add8452fc4cf944570a6f25", "filename": "src/test/ui/editions-crate-root-2015.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -5,11 +5,24 @@ LL |     fn global_inner(_: ::nonexistant::Foo) {\n    |                          ^^^^^^^^^^^ maybe a missing crate `nonexistant`?\n \n error[E0433]: failed to resolve: maybe a missing crate `nonexistant`?\n-  --> $DIR/editions-crate-root-2015.rs:8:30\n+  --> $DIR/editions-crate-root-2015.rs:7:30\n    |\n LL |     fn crate_inner(_: crate::nonexistant::Foo) {\n    |                              ^^^^^^^^^^^ maybe a missing crate `nonexistant`?\n \n-error: aborting due to 2 previous errors\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2015.rs:11:25\n+   |\n+LL |     fn bare_global(_: ::nonexistant) {\n+   |                         ^^^^^^^^^^^ not found in the crate root\n+\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2015.rs:14:29\n+   |\n+LL |     fn bare_crate(_: crate::nonexistant) {\n+   |                             ^^^^^^^^^^^ not found in the crate root\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0433`.\n+Some errors have detailed explanations: E0412, E0433.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "7b96c1d294b8ab16dfde3303db13005a26b3a2a6", "filename": "src/test/ui/editions-crate-root-2018.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -7,6 +7,13 @@ mod inner {\n     fn crate_inner(_: crate::nonexistant::Foo) {\n         //~^ ERROR failed to resolve: maybe a missing crate `nonexistant`?\n     }\n+\n+    fn bare_global(_: ::nonexistant) {\n+        //~^ ERROR cannot find crate `nonexistant` in the list of imported crates\n+    }\n+    fn bare_crate(_: crate::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n }\n \n fn main() {"}, {"sha": "7dfd344226043c4160cdaf7f8f1bd41de8e81abc", "filename": "src/test/ui/editions-crate-root-2018.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -10,6 +10,19 @@ error[E0433]: failed to resolve: maybe a missing crate `nonexistant`?\n LL |     fn crate_inner(_: crate::nonexistant::Foo) {\n    |                              ^^^^^^^^^^^ maybe a missing crate `nonexistant`?\n \n-error: aborting due to 2 previous errors\n+error[E0412]: cannot find crate `nonexistant` in the list of imported crates\n+  --> $DIR/editions-crate-root-2018.rs:11:25\n+   |\n+LL |     fn bare_global(_: ::nonexistant) {\n+   |                         ^^^^^^^^^^^ not found in the list of imported crates\n+\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2018.rs:14:29\n+   |\n+LL |     fn bare_crate(_: crate::nonexistant) {\n+   |                             ^^^^^^^^^^^ not found in the crate root\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0433`.\n+Some errors have detailed explanations: E0412, E0433.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "7f1163bebde67b9327021e4a2d059a2c39a61c8b", "filename": "src/test/ui/resolve/raw-ident-in-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -1,5 +1,5 @@\n // Regression test for issue #63882.\n \n-type A = crate::r#break; //~ ERROR cannot find type `r#break` in module `crate`\n+type A = crate::r#break; //~ ERROR cannot find type `r#break` in the crate root\n \n fn main() {}"}, {"sha": "771dacbbb20d9402089eef0f7bf365980220ecf3", "filename": "src/test/ui/resolve/raw-ident-in-path.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d669b77f8c100f3e01a7bd5924d30c8bad152/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr?ref=9d5d669b77f8c100f3e01a7bd5924d30c8bad152", "patch": "@@ -1,8 +1,8 @@\n-error[E0412]: cannot find type `r#break` in module `crate`\n+error[E0412]: cannot find type `r#break` in the crate root\n   --> $DIR/raw-ident-in-path.rs:3:17\n    |\n LL | type A = crate::r#break;\n-   |                 ^^^^^^^ not found in `crate`\n+   |                 ^^^^^^^ not found in the crate root\n \n error: aborting due to previous error\n "}]}