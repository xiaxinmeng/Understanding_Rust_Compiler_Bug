{"sha": "f045f146263b1816f0b3472b528841b5877c020f", "node_id": "C_kwDOAAsO6NoAKGYwNDVmMTQ2MjYzYjE4MTZmMGIzNDcyYjUyODg0MWI1ODc3YzAyMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T12:39:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T12:39:57Z"}, "message": "Auto merge of #13084 - Veykril:highlight-config, r=Veykril\n\nAdd some more highlighting configurations\n\nThe following can be enabled/disabled now in terms of highlighting:\n- doc comment injection (enabled by default)\n- punctuation highlighting (disabled by default)\n- operator highlighting (enabled by default)\n- punctuation specialized highlighting (disabled by default)\n- operator specialized highlighting (disabled by default)\n- macro call bang highlighting (disabled by default)\n\nThis PR also changes our `attribute` semantic token type to the `decorator` type which landed upstream (but not yet in lsp-types).\n\nSpecialized highlighting is disabled by default, as all clients will have to ship something to map these back to the standard punctuation/operator token (we do this in VSCode via the inheritance mapping for example). This is a lot of maintenance work, and not something every client wants to do, pushing that need to use the user. As this is a rather niche use in the first place this will just be disabled by default.\n\nPunctuation highlighting is disabled by default, punctuation is usually something that can be done by the native syntactic highlighting of the client, so there is no loss in quality. The main reason for this though is that punctuation adds a lot of extra token data that we sent over, a lot of clients struggle with applying this, so disabling this improves the UX for a lot of people. Note that we still highlight punctuations with special meaning as that special entity, (the never type `!` will still be tagged as a builtin type if it occurs as such)\n\nSeparate highlighting of the macro call bang `!` is disabled by default, as I think people actually didn't like that change that much, though at the same time I feel like not many people even noticed that change (I prefer it be separate, but that's not enough reason for it to be enabled by default I believe :^) )\n\ncc https://github.com/rust-lang/rust-analyzer/issues/12783 https://github.com/rust-lang/rust-analyzer/issues/13066", "tree": {"sha": "222f1c46b71de803c8894de464eac1b3899580f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222f1c46b71de803c8894de464eac1b3899580f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f045f146263b1816f0b3472b528841b5877c020f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f045f146263b1816f0b3472b528841b5877c020f", "html_url": "https://github.com/rust-lang/rust/commit/f045f146263b1816f0b3472b528841b5877c020f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f045f146263b1816f0b3472b528841b5877c020f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631ed2a518e81b73630162e1330bb0447e76c30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/631ed2a518e81b73630162e1330bb0447e76c30c", "html_url": "https://github.com/rust-lang/rust/commit/631ed2a518e81b73630162e1330bb0447e76c30c"}, {"sha": "2a26b054b722f0d7bdb973d1cfa193b88fbdeae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a26b054b722f0d7bdb973d1cfa193b88fbdeae6", "html_url": "https://github.com/rust-lang/rust/commit/2a26b054b722f0d7bdb973d1cfa193b88fbdeae6"}], "stats": {"total": 358, "additions": 277, "deletions": 81}, "files": [{"sha": "8f4a17dc5cac6c1d94efa9453ecddcdf9333cf69", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -871,9 +871,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.93.0\"\n+version = \"0.93.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"70c74e2173b2b31f8655d33724b4b45ac13f439386f66290f539c22b144c2212\"\n+checksum = \"a3bcfee315dde785ba887edb540b08765fd7df75a7d948844be6bf5712246734\"\n dependencies = [\n  \"bitflags\",\n  \"serde\","}, {"sha": "d61d69a090b33850049acfa36b8327ba7b887965", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -98,7 +98,7 @@ pub use crate::{\n     static_index::{StaticIndex, StaticIndexedFile, TokenId, TokenStaticData},\n     syntax_highlighting::{\n         tags::{Highlight, HlMod, HlMods, HlOperator, HlPunct, HlTag},\n-        HlRange,\n+        HighlightConfig, HlRange,\n     },\n };\n pub use hir::{Documentation, Semantics};\n@@ -517,8 +517,12 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file\n-    pub fn highlight(&self, file_id: FileId) -> Cancellable<Vec<HlRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n+    pub fn highlight(\n+        &self,\n+        highlight_config: HighlightConfig,\n+        file_id: FileId,\n+    ) -> Cancellable<Vec<HlRange>> {\n+        self.with_db(|db| syntax_highlighting::highlight(db, highlight_config, file_id, None))\n     }\n \n     /// Computes all ranges to highlight for a given item in a file.\n@@ -533,9 +537,13 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file range.\n-    pub fn highlight_range(&self, frange: FileRange) -> Cancellable<Vec<HlRange>> {\n+    pub fn highlight_range(\n+        &self,\n+        highlight_config: HighlightConfig,\n+        frange: FileRange,\n+    ) -> Cancellable<Vec<HlRange>> {\n         self.with_db(|db| {\n-            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n+            syntax_highlighting::highlight(db, highlight_config, frange.file_id, Some(frange.range))\n         })\n     }\n "}, {"sha": "50371d620eb2a41954412a3f1dd79bc33c18756e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -14,7 +14,7 @@ mod html;\n mod tests;\n \n use hir::{Name, Semantics};\n-use ide_db::{FxHashMap, RootDatabase};\n+use ide_db::{FxHashMap, RootDatabase, SymbolKind};\n use syntax::{\n     ast, AstNode, AstToken, NodeOrToken, SyntaxKind::*, SyntaxNode, TextRange, WalkEvent, T,\n };\n@@ -24,7 +24,7 @@ use crate::{\n         escape::highlight_escape_string, format::highlight_format_string, highlights::Highlights,\n         macro_::MacroHighlighter, tags::Highlight,\n     },\n-    FileId, HlMod, HlTag,\n+    FileId, HlMod, HlOperator, HlPunct, HlTag,\n };\n \n pub(crate) use html::highlight_as_html;\n@@ -36,6 +36,26 @@ pub struct HlRange {\n     pub binding_hash: Option<u64>,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct HighlightConfig {\n+    /// Whether to highlight strings\n+    pub strings: bool,\n+    /// Whether to highlight punctuation\n+    pub punctuation: bool,\n+    /// Whether to specialize punctuation highlights\n+    pub specialize_punctuation: bool,\n+    /// Whether to highlight operator\n+    pub operator: bool,\n+    /// Whether to specialize operator highlights\n+    pub specialize_operator: bool,\n+    /// Whether to inject highlights into doc comments\n+    pub inject_doc_comment: bool,\n+    /// Whether to highlight the macro call bang\n+    pub macro_bang: bool,\n+    /// Whether to highlight unresolved things be their syntax\n+    pub syntactic_name_ref_highlighting: bool,\n+}\n+\n // Feature: Semantic Syntax Highlighting\n //\n // rust-analyzer highlights the code semantically.\n@@ -155,9 +175,9 @@ pub struct HlRange {\n // image::https://user-images.githubusercontent.com/48062697/113187625-f7f50100-9250-11eb-825e-91c58f236071.png[]\n pub(crate) fn highlight(\n     db: &RootDatabase,\n+    config: HighlightConfig,\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n-    syntactic_name_ref_highlighting: bool,\n ) -> Vec<HlRange> {\n     let _p = profile::span(\"highlight\");\n     let sema = Semantics::new(db);\n@@ -183,26 +203,18 @@ pub(crate) fn highlight(\n         Some(it) => it.krate(),\n         None => return hl.to_vec(),\n     };\n-    traverse(\n-        &mut hl,\n-        &sema,\n-        file_id,\n-        &root,\n-        krate,\n-        range_to_highlight,\n-        syntactic_name_ref_highlighting,\n-    );\n+    traverse(&mut hl, &sema, config, file_id, &root, krate, range_to_highlight);\n     hl.to_vec()\n }\n \n fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     file_id: FileId,\n     root: &SyntaxNode,\n     krate: hir::Crate,\n     range_to_highlight: TextRange,\n-    syntactic_name_ref_highlighting: bool,\n ) {\n     let is_unlinked = sema.to_module_def(file_id).is_none();\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n@@ -323,9 +335,11 @@ fn traverse(\n             Enter(it) => it,\n             Leave(NodeOrToken::Token(_)) => continue,\n             Leave(NodeOrToken::Node(node)) => {\n-                // Doc comment highlighting injection, we do this when leaving the node\n-                // so that we overwrite the highlighting of the doc comment itself.\n-                inject::doc_comment(hl, sema, file_id, &node);\n+                if config.inject_doc_comment {\n+                    // Doc comment highlighting injection, we do this when leaving the node\n+                    // so that we overwrite the highlighting of the doc comment itself.\n+                    inject::doc_comment(hl, sema, config, file_id, &node);\n+                }\n                 continue;\n             }\n         };\n@@ -400,7 +414,8 @@ fn traverse(\n                 let string_to_highlight = ast::String::cast(descended_token.clone());\n                 if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n                     if string.is_raw() {\n-                        if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n+                        if inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n+                        {\n                             continue;\n                         }\n                     }\n@@ -421,7 +436,7 @@ fn traverse(\n                 sema,\n                 krate,\n                 &mut bindings_shadow_count,\n-                syntactic_name_ref_highlighting,\n+                config.syntactic_name_ref_highlighting,\n                 name_like,\n             ),\n             NodeOrToken::Token(token) => highlight::token(sema, token).zip(Some(None)),\n@@ -439,6 +454,29 @@ fn traverse(\n                 // something unresolvable. FIXME: There should be a way to prevent that\n                 continue;\n             }\n+\n+            // apply config filtering\n+            match &mut highlight.tag {\n+                HlTag::StringLiteral if !config.strings => continue,\n+                // If punctuation is disabled, make the macro bang part of the macro call again.\n+                tag @ HlTag::Punctuation(HlPunct::MacroBang) => {\n+                    if !config.macro_bang {\n+                        *tag = HlTag::Symbol(SymbolKind::Macro);\n+                    } else if !config.specialize_punctuation {\n+                        *tag = HlTag::Punctuation(HlPunct::Other);\n+                    }\n+                }\n+                HlTag::Punctuation(_) if !config.punctuation => continue,\n+                tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n+                    *tag = HlTag::Punctuation(HlPunct::Other);\n+                }\n+                HlTag::Operator(_) if !config.operator && highlight.mods.is_empty() => continue,\n+                tag @ HlTag::Operator(_) if !config.specialize_operator => {\n+                    *tag = HlTag::Operator(HlOperator::Other);\n+                }\n+                _ => (),\n+            }\n+\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }"}, {"sha": "e91fd7f12571649cee96e51e652165cad39bc993", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -5,7 +5,10 @@ use oorandom::Rand32;\n use stdx::format_to;\n use syntax::AstNode;\n \n-use crate::{syntax_highlighting::highlight, FileId, RootDatabase};\n+use crate::{\n+    syntax_highlighting::{highlight, HighlightConfig},\n+    FileId, RootDatabase,\n+};\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n     let parse = db.parse(file_id);\n@@ -20,7 +23,21 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let hl_ranges = highlight(db, file_id, None, false);\n+    let hl_ranges = highlight(\n+        db,\n+        HighlightConfig {\n+            strings: true,\n+            punctuation: true,\n+            specialize_punctuation: true,\n+            specialize_operator: true,\n+            operator: true,\n+            inject_doc_comment: true,\n+            macro_bang: true,\n+            syntactic_name_ref_highlighting: false,\n+        },\n+        file_id,\n+        None,\n+    );\n     let text = parse.tree().syntax().to_string();\n     let mut buf = String::new();\n     buf.push_str(STYLE);"}, {"sha": "9139528c7ed96d08685e6bb646e50aa7482bf5e4", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -15,13 +15,14 @@ use syntax::{\n \n use crate::{\n     doc_links::{doc_attributes, extract_definitions_from_docs, resolve_doc_path_for_def},\n-    syntax_highlighting::{highlights::Highlights, injector::Injector},\n+    syntax_highlighting::{highlights::Highlights, injector::Injector, HighlightConfig},\n     Analysis, HlMod, HlRange, HlTag, RootDatabase,\n };\n \n pub(super) fn ra_fixture(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     literal: &ast::String,\n     expanded: &ast::String,\n ) -> Option<()> {\n@@ -63,7 +64,13 @@ pub(super) fn ra_fixture(\n \n     let (analysis, tmp_file_id) = Analysis::from_single_file(inj.take_text());\n \n-    for mut hl_range in analysis.highlight(tmp_file_id).unwrap() {\n+    for mut hl_range in analysis\n+        .highlight(\n+            HighlightConfig { syntactic_name_ref_highlighting: false, ..config },\n+            tmp_file_id,\n+        )\n+        .unwrap()\n+    {\n         for range in inj.map_range_up(hl_range.range) {\n             if let Some(range) = literal.map_range_up(range) {\n                 hl_range.range = range;\n@@ -86,6 +93,7 @@ const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n pub(super) fn doc_comment(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     src_file_id: FileId,\n     node: &SyntaxNode,\n ) {\n@@ -206,7 +214,14 @@ pub(super) fn doc_comment(\n \n     let (analysis, tmp_file_id) = Analysis::from_single_file(inj.take_text());\n \n-    if let Ok(ranges) = analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)) {\n+    if let Ok(ranges) = analysis.with_db(|db| {\n+        super::highlight(\n+            db,\n+            HighlightConfig { syntactic_name_ref_highlighting: true, ..config },\n+            tmp_file_id,\n+            None,\n+        )\n+    }) {\n         for HlRange { range, highlight, binding_hash } in ranges {\n             for range in inj.map_range_up(range) {\n                 hl.add(HlRange { range, highlight: highlight | HlMod::Injected, binding_hash });"}, {"sha": "3949f1189bd5ed47d946d46dec67cc2102c7bd40", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -199,7 +199,7 @@ impl fmt::Display for HlTag {\n }\n \n impl HlMod {\n-    const ALL: &'static [HlMod; HlMod::Unsafe as u8 as usize + 1] = &[\n+    const ALL: &'static [HlMod; 19] = &[\n         HlMod::Associated,\n         HlMod::Async,\n         HlMod::Attribute,\n@@ -296,7 +296,7 @@ impl Highlight {\n         Highlight { tag, mods: HlMods::default() }\n     }\n     pub fn is_empty(&self) -> bool {\n-        self.tag == HlTag::None && self.mods == HlMods::default()\n+        self.tag == HlTag::None && self.mods.is_empty()\n     }\n }\n \n@@ -330,6 +330,10 @@ impl ops::BitOr<HlMod> for Highlight {\n }\n \n impl HlMods {\n+    pub fn is_empty(&self) -> bool {\n+        self.0 == 0\n+    }\n+\n     pub fn contains(self, m: HlMod) -> bool {\n         self.0 & m.mask() == m.mask()\n     }"}, {"sha": "51ddea63ac1363c79dab2726ce2f21d8d1171260", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -4,7 +4,18 @@ use expect_test::{expect_file, ExpectFile};\n use ide_db::SymbolKind;\n use test_utils::{bench, bench_fixture, skip_slow_tests, AssertLinear};\n \n-use crate::{fixture, FileRange, HlTag, TextRange};\n+use crate::{fixture, FileRange, HighlightConfig, HlTag, TextRange};\n+\n+const HL_CONFIG: HighlightConfig = HighlightConfig {\n+    strings: true,\n+    punctuation: true,\n+    specialize_punctuation: true,\n+    specialize_operator: true,\n+    operator: true,\n+    inject_doc_comment: true,\n+    macro_bang: true,\n+    syntactic_name_ref_highlighting: false,\n+};\n \n #[test]\n fn attributes() {\n@@ -996,7 +1007,10 @@ struct Foo {\n \n     // The \"x\"\n     let highlights = &analysis\n-        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n+        .highlight_range(\n+            HL_CONFIG,\n+            FileRange { file_id, range: TextRange::at(45.into(), 1.into()) },\n+        )\n         .unwrap();\n \n     assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n@@ -1011,7 +1025,7 @@ macro_rules! test {}\n }\"#\n         .trim(),\n     );\n-    let _ = analysis.highlight(file_id).unwrap();\n+    let _ = analysis.highlight(HL_CONFIG, file_id).unwrap();\n }\n \n /// Highlights the code given by the `ra_fixture` argument, renders the\n@@ -1035,7 +1049,7 @@ fn benchmark_syntax_highlighting_long_struct() {\n     let hash = {\n         let _pt = bench(\"syntax highlighting long struct\");\n         analysis\n-            .highlight(file_id)\n+            .highlight(HL_CONFIG, file_id)\n             .unwrap()\n             .iter()\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n@@ -1061,7 +1075,7 @@ fn syntax_highlighting_not_quadratic() {\n             let time = Instant::now();\n \n             let hash = analysis\n-                .highlight(file_id)\n+                .highlight(HL_CONFIG, file_id)\n                 .unwrap()\n                 .iter()\n                 .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n@@ -1086,7 +1100,7 @@ fn benchmark_syntax_highlighting_parser() {\n     let hash = {\n         let _pt = bench(\"syntax highlighting parser\");\n         analysis\n-            .highlight(file_id)\n+            .highlight(HL_CONFIG, file_id)\n             .unwrap()\n             .iter()\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))"}, {"sha": "5392589186d1db8bcb563f90808b16f29ebd79d9", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -22,8 +22,8 @@ anyhow = \"1.0.57\"\n crossbeam-channel = \"0.5.5\"\n dissimilar = \"1.0.4\"\n itertools = \"0.10.3\"\n-lsp-types = { version = \"0.93.0\", features = [\"proposed\"] }\n scip = \"0.1.1\"\n+lsp-types = { version = \"0.93.1\", features = [\"proposed\"] }\n parking_lot = \"0.12.1\"\n xflags = \"0.2.4\"\n oorandom = \"11.1.3\"\n@@ -89,5 +89,5 @@ in-rust-tree = [\n     \"proc-macro-srv/sysroot-abi\",\n     \"sourcegen/in-rust-tree\",\n     \"ide/in-rust-tree\",\n-    \"syntax/in-rust-tree\"\n+    \"syntax/in-rust-tree\",\n ]"}, {"sha": "54dcb42d99c789ea142e8873dee91d246114692e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -12,8 +12,8 @@ use std::{ffi::OsString, fmt, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CallableSnippets, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode,\n-    HighlightRelatedConfig, HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig,\n-    Snippet, SnippetScope,\n+    HighlightConfig, HighlightRelatedConfig, HoverConfig, HoverDocFormat, InlayHintsConfig,\n+    JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::{\n     imports::insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -385,6 +385,34 @@ config_data! {\n         /// available on a nightly build.\n         rustfmt_rangeFormatting_enable: bool = \"false\",\n \n+        /// Inject additional highlighting into doc comments.\n+        ///\n+        /// When enabled, rust-analyzer will highlight rust source in doc comments as well as intra\n+        /// doc links.\n+        semanticHighlighting_doc_comment_inject_enable: bool = \"true\",\n+        /// Use semantic tokens for operators.\n+        ///\n+        /// When disabled, rust-analyzer will emit semantic tokens only for operator tokens when\n+        /// they are tagged with modifiers.\n+        semanticHighlighting_operator_enable: bool = \"true\",\n+        /// Use specialized semantic tokens for operators.\n+        ///\n+        /// When enabled, rust-analyzer will emit special token types for operator tokens instead\n+        /// of the generic `operator` token type.\n+        semanticHighlighting_operator_specialization_enable: bool = \"false\",\n+        /// Use semantic tokens for punctuations.\n+        ///\n+        /// When disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\n+        /// they are tagged with modifiers or have a special role.\n+        semanticHighlighting_punctuation_enable: bool = \"false\",\n+        /// When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\n+        /// calls.\n+        semanticHighlighting_punctuation_separate_macro_bang: bool = \"false\",\n+        /// Use specialized semantic tokens for punctuations.\n+        ///\n+        /// When enabled, rust-analyzer will emit special token types for punctuation tokens instead\n+        /// of the generic `punctuation` token type.\n+        semanticHighlighting_punctuation_specialization_enable: bool = \"false\",\n         /// Use semantic tokens for strings.\n         ///\n         /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n@@ -1171,8 +1199,19 @@ impl Config {\n         }\n     }\n \n-    pub fn highlighting_strings(&self) -> bool {\n-        self.data.semanticHighlighting_strings_enable\n+    pub fn highlighting_config(&self) -> HighlightConfig {\n+        HighlightConfig {\n+            strings: self.data.semanticHighlighting_strings_enable,\n+            punctuation: self.data.semanticHighlighting_punctuation_enable,\n+            specialize_punctuation: self\n+                .data\n+                .semanticHighlighting_punctuation_specialization_enable,\n+            macro_bang: self.data.semanticHighlighting_punctuation_separate_macro_bang,\n+            operator: self.data.semanticHighlighting_operator_enable,\n+            specialize_operator: self.data.semanticHighlighting_operator_specialization_enable,\n+            inject_doc_comment: self.data.semanticHighlighting_doc_comment_inject_enable,\n+            syntactic_name_ref_highlighting: false,\n+        }\n     }\n \n     pub fn hover(&self) -> HoverConfig {"}, {"sha": "d89f0f5a3cf456d24c7889deec9355b3098e7a34", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -1504,10 +1504,8 @@ pub(crate) fn handle_semantic_tokens_full(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(file_id)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1525,10 +1523,8 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(file_id)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1556,10 +1552,8 @@ pub(crate) fn handle_semantic_tokens_range(\n     let text = snap.analysis.file_text(frange.file_id)?;\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n-    let highlights = snap.analysis.highlight_range(frange)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+    let highlights = snap.analysis.highlight_range(snap.config.highlighting_config(), frange)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "b3f5493bf2078d0a80078040df91f83de3d5aa0f", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -12,26 +12,26 @@ macro_rules! define_semantic_token_types {\n         $(pub(crate) const $ident: SemanticTokenType = SemanticTokenType::new($string);)*\n \n         pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n+            SemanticTokenType::CLASS,\n             SemanticTokenType::COMMENT,\n+            SemanticTokenType::ENUM_MEMBER,\n+            SemanticTokenType::ENUM,\n+            SemanticTokenType::FUNCTION,\n+            SemanticTokenType::INTERFACE,\n             SemanticTokenType::KEYWORD,\n-            SemanticTokenType::STRING,\n+            SemanticTokenType::MACRO,\n+            SemanticTokenType::METHOD,\n+            SemanticTokenType::NAMESPACE,\n             SemanticTokenType::NUMBER,\n-            SemanticTokenType::REGEXP,\n             SemanticTokenType::OPERATOR,\n-            SemanticTokenType::NAMESPACE,\n-            SemanticTokenType::TYPE,\n+            SemanticTokenType::PARAMETER,\n+            SemanticTokenType::PROPERTY,\n+            SemanticTokenType::REGEXP,\n+            SemanticTokenType::STRING,\n             SemanticTokenType::STRUCT,\n-            SemanticTokenType::CLASS,\n-            SemanticTokenType::INTERFACE,\n-            SemanticTokenType::ENUM,\n-            SemanticTokenType::ENUM_MEMBER,\n             SemanticTokenType::TYPE_PARAMETER,\n-            SemanticTokenType::FUNCTION,\n-            SemanticTokenType::METHOD,\n-            SemanticTokenType::PROPERTY,\n-            SemanticTokenType::MACRO,\n+            SemanticTokenType::TYPE,\n             SemanticTokenType::VARIABLE,\n-            SemanticTokenType::PARAMETER,\n             $($ident),*\n         ];\n     };\n@@ -40,7 +40,6 @@ macro_rules! define_semantic_token_types {\n define_semantic_token_types![\n     (ANGLE, \"angle\"),\n     (ARITHMETIC, \"arithmetic\"),\n-    (ATTRIBUTE, \"attribute\"),\n     (ATTRIBUTE_BRACKET, \"attributeBracket\"),\n     (BITWISE, \"bitwise\"),\n     (BOOLEAN, \"boolean\"),\n@@ -63,7 +62,6 @@ define_semantic_token_types![\n     (LIFETIME, \"lifetime\"),\n     (LOGICAL, \"logical\"),\n     (MACRO_BANG, \"macroBang\"),\n-    (OPERATOR, \"operator\"),\n     (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),\n@@ -82,11 +80,7 @@ macro_rules! define_semantic_token_modifiers {\n         pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n             SemanticTokenModifier::DOCUMENTATION,\n             SemanticTokenModifier::DECLARATION,\n-            SemanticTokenModifier::DEFINITION,\n             SemanticTokenModifier::STATIC,\n-            SemanticTokenModifier::ABSTRACT,\n-            SemanticTokenModifier::DEPRECATED,\n-            SemanticTokenModifier::READONLY,\n             SemanticTokenModifier::DEFAULT_LIBRARY,\n             $($ident),*\n         ];"}, {"sha": "99f7b573999e5196fa5c286ecad8a2237ffa59fe", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -517,7 +517,6 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n-    highlight_strings: bool,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -526,10 +525,8 @@ pub(crate) fn semantic_tokens(\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n+\n         let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n-        if !highlight_strings && ty == lsp_types::SemanticTokenType::STRING {\n-            continue;\n-        }\n         let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;\n \n@@ -561,7 +558,7 @@ fn semantic_token_type_and_modifiers(\n     let mut mods = semantic_tokens::ModifierSet::default();\n     let type_ = match highlight.tag {\n         HlTag::Symbol(symbol) => match symbol {\n-            SymbolKind::Attribute => semantic_tokens::ATTRIBUTE,\n+            SymbolKind::Attribute => lsp_types::SemanticTokenType::DECORATOR,\n             SymbolKind::Derive => semantic_tokens::DERIVE,\n             SymbolKind::DeriveHelper => semantic_tokens::DERIVE_HELPER,\n             SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n@@ -616,7 +613,7 @@ fn semantic_token_type_and_modifiers(\n             HlOperator::Arithmetic => semantic_tokens::ARITHMETIC,\n             HlOperator::Logical => semantic_tokens::LOGICAL,\n             HlOperator::Comparison => semantic_tokens::COMPARISON,\n-            HlOperator::Other => semantic_tokens::OPERATOR,\n+            HlOperator::Other => lsp_types::SemanticTokenType::OPERATOR,\n         },\n         HlTag::StringLiteral => lsp_types::SemanticTokenType::STRING,\n         HlTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,"}, {"sha": "72b925726479e014c18142acb6b4546bffc2b2b8", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -587,6 +587,52 @@ Enables the use of rustfmt's unstable range formatting command for the\n `textDocument/rangeFormatting` request. The rustfmt option is unstable and only\n available on a nightly build.\n --\n+[[rust-analyzer.semanticHighlighting.doc.comment.inject.enable]]rust-analyzer.semanticHighlighting.doc.comment.inject.enable (default: `true`)::\n++\n+--\n+Inject additional highlighting into doc comments.\n+\n+When enabled, rust-analyzer will highlight rust source in doc comments as well as intra\n+doc links.\n+--\n+[[rust-analyzer.semanticHighlighting.operator.enable]]rust-analyzer.semanticHighlighting.operator.enable (default: `true`)::\n++\n+--\n+Use semantic tokens for operators.\n+\n+When disabled, rust-analyzer will emit semantic tokens only for operator tokens when\n+they are tagged with modifiers.\n+--\n+[[rust-analyzer.semanticHighlighting.operator.specialization.enable]]rust-analyzer.semanticHighlighting.operator.specialization.enable (default: `false`)::\n++\n+--\n+Use specialized semantic tokens for operators.\n+\n+When enabled, rust-analyzer will emit special token types for operator tokens instead\n+of the generic `operator` token type.\n+--\n+[[rust-analyzer.semanticHighlighting.punctuation.enable]]rust-analyzer.semanticHighlighting.punctuation.enable (default: `false`)::\n++\n+--\n+Use semantic tokens for punctuations.\n+\n+When disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\n+they are tagged with modifiers or have a special role.\n+--\n+[[rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang]]rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang (default: `false`)::\n++\n+--\n+When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\n+calls.\n+--\n+[[rust-analyzer.semanticHighlighting.punctuation.specialization.enable]]rust-analyzer.semanticHighlighting.punctuation.specialization.enable (default: `false`)::\n++\n+--\n+Use specialized semantic tokens for punctuations.\n+\n+When enabled, rust-analyzer will emit special token types for punctuation tokens instead\n+of the generic `punctuation` token type.\n+--\n [[rust-analyzer.semanticHighlighting.strings.enable]]rust-analyzer.semanticHighlighting.strings.enable (default: `true`)::\n +\n --"}, {"sha": "767c5875bf7e7e844c1178675ee082288ff1ac29", "filename": "editors/code/package.json", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f045f146263b1816f0b3472b528841b5877c020f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f045f146263b1816f0b3472b528841b5877c020f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f045f146263b1816f0b3472b528841b5877c020f", "patch": "@@ -1084,6 +1084,36 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.semanticHighlighting.doc.comment.inject.enable\": {\n+                    \"markdownDescription\": \"Inject additional highlighting into doc comments.\\n\\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\\ndoc links.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.semanticHighlighting.operator.enable\": {\n+                    \"markdownDescription\": \"Use semantic tokens for operators.\\n\\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\\nthey are tagged with modifiers.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.semanticHighlighting.operator.specialization.enable\": {\n+                    \"markdownDescription\": \"Use specialized semantic tokens for operators.\\n\\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\\nof the generic `operator` token type.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.semanticHighlighting.punctuation.enable\": {\n+                    \"markdownDescription\": \"Use semantic tokens for punctuations.\\n\\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\\nthey are tagged with modifiers or have a special role.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang\": {\n+                    \"markdownDescription\": \"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\\ncalls.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.semanticHighlighting.punctuation.specialization.enable\": {\n+                    \"markdownDescription\": \"Use specialized semantic tokens for punctuations.\\n\\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\\nof the generic `punctuation` token type.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.semanticHighlighting.strings.enable\": {\n                     \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n                     \"default\": true,"}]}