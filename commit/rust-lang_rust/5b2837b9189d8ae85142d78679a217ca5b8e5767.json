{"sha": "5b2837b9189d8ae85142d78679a217ca5b8e5767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjgzN2I5MTg5ZDhhZTg1MTQyZDc4Njc5YTIxN2NhNWI4ZTU3Njc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-05-19T21:12:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T01:20:36Z"}, "message": "syntax: document the ptr module.", "tree": {"sha": "b0a0115fae602031ce725a24842afe15f56baeef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a0115fae602031ce725a24842afe15f56baeef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2837b9189d8ae85142d78679a217ca5b8e5767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2837b9189d8ae85142d78679a217ca5b8e5767", "html_url": "https://github.com/rust-lang/rust/commit/5b2837b9189d8ae85142d78679a217ca5b8e5767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2837b9189d8ae85142d78679a217ca5b8e5767/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8df4fadc86f44cb5f6e69f29634dcfa6701b070", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8df4fadc86f44cb5f6e69f29634dcfa6701b070", "html_url": "https://github.com/rust-lang/rust/commit/f8df4fadc86f44cb5f6e69f29634dcfa6701b070"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "bd560abf3bda70d46bf7e30671def56a3a143fe0", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b2837b9189d8ae85142d78679a217ca5b8e5767/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2837b9189d8ae85142d78679a217ca5b8e5767/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=5b2837b9189d8ae85142d78679a217ca5b8e5767", "patch": "@@ -8,6 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! The AST pointer\n+//!\n+//! Provides `P<T>`, a frozen owned smart pointer, as a replacement for `@T` in the AST.\n+//!\n+//! # Motivations and benefits\n+//!\n+//! * **Identity**: sharing AST nodes is problematic for the various analysis passes\n+//!   (e.g. one may be able to bypass the borrow checker with a shared `ExprAddrOf`\n+//!   node taking a mutable borrow). The only reason `@T` in the AST hasn't caused\n+//!   issues is because of inefficient folding passes which would always deduplicate\n+//!   any such shared nodes. Even if the AST were to switch to an arena, this would\n+//!   still hold, i.e. it couldn't use `&'a T`, but rather a wrapper like `P<'a, T>`.\n+//!\n+//! * **Immutability**: `P<T>` disallows mutating its inner `T`, unlike `Box<T>`\n+//!   (unless it contains an `Unsafe` interior, but that may be denied later).\n+//!   This mainly prevents mistakes, but can also enforces a kind of \"purity\".\n+//!\n+//! * **Efficiency**: folding can reuse allocation space for `P<T>` and `Vec<T>`,\n+//!   the latter even when the input and output types differ (as it would be the\n+//!   case with arenas or a GADT AST using type parameters to toggle features).\n+//!\n+//! * **Maintainability**: `P<T>` provides a fixed interface - `Deref`,\n+//!   `and_then` and `map` - which can remain fully functional even if the\n+//!   implementation changes (using a special thread-local heap, for example).\n+//!   Moreover, a switch to, e.g. `P<'a, T>` would be easy and mostly automated.\n+\n use std::fmt;\n use std::fmt::Show;\n use std::hash::Hash;\n@@ -19,18 +45,21 @@ pub struct P<T> {\n }\n \n #[allow(non_snake_case)]\n-/// Construct a P<T> from a T value.\n+/// Construct a `P<T>` from a `T` value.\n pub fn P<T: 'static>(value: T) -> P<T> {\n     P {\n         ptr: box value\n     }\n }\n \n impl<T: 'static> P<T> {\n+    /// Move out of the pointer.\n+    /// Intended for chaining transformations not covered by `map`.\n     pub fn and_then<U>(self, f: |T| -> U) -> U {\n         f(*self.ptr)\n     }\n \n+    /// Transform the inner value, consuming `self` and producing a new `P<T>`.\n     pub fn map(mut self, f: |T| -> T) -> P<T> {\n         use std::{mem, ptr};\n         unsafe {"}]}