{"sha": "03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "node_id": "C_kwDOAAsO6NoAKDAzYThhNGZmM2U3Y2YwNjMzY2VhZjBhNWZhOGQzNDdjZmU0OWU4MDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T23:13:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T23:13:54Z"}, "message": "Replacing bound vars is actually instantiating a binder", "tree": {"sha": "7af9c93f2e09b358dd965de68373c61ec8e8e1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af9c93f2e09b358dd965de68373c61ec8e8e1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "html_url": "https://github.com/rust-lang/rust/commit/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "html_url": "https://github.com/rust-lang/rust/commit/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd"}], "stats": {"total": 127, "additions": 67, "deletions": 60}, "files": [{"sha": "3006e27e1d5b53882bfaa8528bcee7b4f8ab849b", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -1139,7 +1139,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if let ty::Adt(def, substs) = ty.kind()\n                             && Some(def.did()) == tcx.lang_items().pin_type()\n                             && let ty::Ref(_, _, hir::Mutability::Mut) = substs.type_at(0).kind()\n-                            && let self_ty = infcx.replace_bound_vars_with_fresh_vars(\n+                            && let self_ty = infcx.instantiate_binder_with_fresh_vars(\n                                 fn_call_span,\n                                 LateBoundRegionConversionTime::FnCall,\n                                 tcx.fn_sig(method_did).subst(tcx, method_substs).input(0),"}, {"sha": "c6b78df9a5ff033db5671483da5f41c53ae772c0", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -38,7 +38,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // so that they represent the view from \"inside\" the closure.\n         let user_provided_sig = self\n             .instantiate_canonical_with_fresh_inference_vars(body.span, &user_provided_poly_sig);\n-        let user_provided_sig = self.infcx.replace_bound_vars_with_fresh_vars(\n+        let user_provided_sig = self.infcx.instantiate_binder_with_fresh_vars(\n             body.span,\n             LateBoundRegionConversionTime::FnCall,\n             user_provided_sig,"}, {"sha": "236e36f28ca474e5261a54a0b2565149811179d6", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -246,7 +246,7 @@ fn compare_method_predicate_entailment<'tcx>(\n \n     let mut wf_tys = FxIndexSet::default();\n \n-    let unnormalized_impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n+    let unnormalized_impl_sig = infcx.instantiate_binder_with_fresh_vars(\n         impl_m_span,\n         infer::HigherRankedType,\n         tcx.fn_sig(impl_m.def_id).subst_identity(),\n@@ -640,7 +640,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     let impl_sig = ocx.normalize(\n         &norm_cause,\n         param_env,\n-        infcx.replace_bound_vars_with_fresh_vars(\n+        infcx.instantiate_binder_with_fresh_vars(\n             return_span,\n             infer::HigherRankedType,\n             tcx.fn_sig(impl_m.def_id).subst_identity(),"}, {"sha": "089863a66e73be9843af6ea4a5f42098aeb81edf", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(substs).is_none() {\n                     let closure_sig = substs.as_closure().sig();\n-                    let closure_sig = self.replace_bound_vars_with_fresh_vars(\n+                    let closure_sig = self.instantiate_binder_with_fresh_vars(\n                         call_expr.span,\n                         infer::FnCall,\n                         closure_sig,\n@@ -437,7 +437,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // renormalize the associated types at this point, since they\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n-        let fn_sig = self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig);\n+        let fn_sig = self.instantiate_binder_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig);\n         let fn_sig = self.normalize(call_expr.span, fn_sig);\n \n         // Call the generic checker."}, {"sha": "211fe477a2d8d77bd77890602796e55bfe103a80", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             )\n             .map(|(hir_ty, &supplied_ty)| {\n                 // Instantiate (this part of..) S to S', i.e., with fresh variables.\n-                self.replace_bound_vars_with_fresh_vars(\n+                self.instantiate_binder_with_fresh_vars(\n                     hir_ty.span,\n                     LateBoundRegionConversionTime::FnCall,\n                     // (*) binder moved to here\n@@ -566,7 +566,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 all_obligations.extend(obligations);\n             }\n \n-            let supplied_output_ty = self.replace_bound_vars_with_fresh_vars(\n+            let supplied_output_ty = self.instantiate_binder_with_fresh_vars(\n                 decl.output.span(),\n                 LateBoundRegionConversionTime::FnCall,\n                 supplied_sig.output(),"}, {"sha": "bb235a4836153aedb9883677474e83942bdda263", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n                     let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n-                    let input = self.replace_bound_vars_with_fresh_vars(\n+                    let input = self.instantiate_binder_with_fresh_vars(\n                         span,\n                         infer::LateBoundRegionConversionTime::FnCall,\n                         fn_sig.input(i),\n@@ -586,7 +586,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Also, as we just want to check sizedness, instead of introducing\n             // placeholder lifetimes with probing, we just replace higher lifetimes\n             // with fresh vars.\n-            let output = self.replace_bound_vars_with_fresh_vars(\n+            let output = self.instantiate_binder_with_fresh_vars(\n                 expr.span,\n                 infer::LateBoundRegionConversionTime::FnCall,\n                 fn_sig.output(),"}, {"sha": "3814ddaf73f44b8e64ebeb89418f1c875dc1da16", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         item_segment: &hir::PathSegment<'_>,\n         poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Ty<'tcx> {\n-        let trait_ref = self.replace_bound_vars_with_fresh_vars(\n+        let trait_ref = self.instantiate_binder_with_fresh_vars(\n             span,\n             infer::LateBoundRegionConversionTime::AssocTypeProjection(item_def_id),\n             poly_trait_ref,"}, {"sha": "fa0dc4d84150636f57bcebd7014b102d8bd57596", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     let original_poly_trait_ref = principal.with_self_ty(this.tcx, object_ty);\n                     let upcast_poly_trait_ref = this.upcast(original_poly_trait_ref, trait_def_id);\n                     let upcast_trait_ref =\n-                        this.replace_bound_vars_with_fresh_vars(upcast_poly_trait_ref);\n+                        this.instantiate_binder_with_fresh_vars(upcast_poly_trait_ref);\n                     debug!(\n                         \"original_poly_trait_ref={:?} upcast_trait_ref={:?} target_trait={:?}\",\n                         original_poly_trait_ref, upcast_trait_ref, trait_def_id\n@@ -285,7 +285,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             probe::WhereClausePick(poly_trait_ref) => {\n                 // Where clauses can have bound regions in them. We need to instantiate\n                 // those to convert from a poly-trait-ref to a trait-ref.\n-                self.replace_bound_vars_with_fresh_vars(poly_trait_ref).substs\n+                self.instantiate_binder_with_fresh_vars(poly_trait_ref).substs\n             }\n         }\n     }\n@@ -506,7 +506,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let sig = self.tcx.fn_sig(def_id).subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, sig={:?}\", sig);\n \n-        let sig = self.replace_bound_vars_with_fresh_vars(sig);\n+        let sig = self.instantiate_binder_with_fresh_vars(sig);\n         debug!(\"late-bound lifetimes from method instantiated, sig={:?}\", sig);\n \n         (sig, method_predicates)\n@@ -625,10 +625,10 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         upcast_trait_refs.into_iter().next().unwrap()\n     }\n \n-    fn replace_bound_vars_with_fresh_vars<T>(&self, value: ty::Binder<'tcx, T>) -> T\n+    fn instantiate_binder_with_fresh_vars<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx> + Copy,\n     {\n-        self.fcx.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, value)\n+        self.fcx.instantiate_binder_with_fresh_vars(self.span, infer::FnCall, value)\n     }\n }"}, {"sha": "d5d10cf272afad674cced63f4473b4c934562a5b", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // with bound regions.\n         let fn_sig = tcx.fn_sig(def_id).subst(self.tcx, substs);\n         let fn_sig =\n-            self.replace_bound_vars_with_fresh_vars(obligation.cause.span, infer::FnCall, fn_sig);\n+            self.instantiate_binder_with_fresh_vars(obligation.cause.span, infer::FnCall, fn_sig);\n \n         let InferOk { value, obligations: o } =\n             self.at(&obligation.cause, self.param_env).normalize(fn_sig);"}, {"sha": "4ce401b52bd269292890b3b9bd3da39132ef1825", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -924,7 +924,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             ty::AssocKind::Fn => self.probe(|_| {\n                 let substs = self.fresh_substs_for_item(self.span, method.def_id);\n                 let fty = self.tcx.fn_sig(method.def_id).subst(self.tcx, substs);\n-                let fty = self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n+                let fty = self.instantiate_binder_with_fresh_vars(self.span, infer::FnCall, fty);\n \n                 if let Some(self_ty) = self_ty {\n                     if self"}, {"sha": "7db4d92a177a1b89b13e9c93f58a3a6f9babe43d", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n                 let a_types = infcx.tcx.anonymize_bound_vars(a_types);\n                 let b_types = infcx.tcx.anonymize_bound_vars(b_types);\n                 if a_types.bound_vars() == b_types.bound_vars() {\n-                    let (a_types, b_types) = infcx.replace_bound_vars_with_placeholders(\n+                    let (a_types, b_types) = infcx.instantiate_binder_with_placeholders(\n                         a_types.map_bound(|a_types| (a_types, b_types.skip_binder())),\n                     );\n                     for (a, b) in std::iter::zip(a_types, b_types) {"}, {"sha": "412e52d8fd7e21bbd2f9143ba587dbabcb7fa7ad", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -38,13 +38,13 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n         // First, we instantiate each bound region in the supertype with a\n         // fresh placeholder region. Note that this automatically creates\n         // a new universe if needed.\n-        let sup_prime = self.infcx.replace_bound_vars_with_placeholders(sup);\n+        let sup_prime = self.infcx.instantiate_binder_with_placeholders(sup);\n \n         // Next, we instantiate each bound region in the subtype\n         // with a fresh region variable. These region variables --\n         // but no other pre-existing region variables -- can name\n         // the placeholders.\n-        let sub_prime = self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, sub);\n+        let sub_prime = self.infcx.instantiate_binder_with_fresh_vars(span, HigherRankedType, sub);\n \n         debug!(\"a_prime={:?}\", sub_prime);\n         debug!(\"b_prime={:?}\", sup_prime);\n@@ -70,7 +70,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n     #[instrument(level = \"debug\", skip(self), ret)]\n-    pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n+    pub fn instantiate_binder_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx> + Copy,\n     {"}, {"sha": "35918b8bae1c20b10290401962683d9a88ed13df", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -995,7 +995,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         Ok(self.commit_if_ok(|_snapshot| {\n             let ty::SubtypePredicate { a_is_expected, a, b } =\n-                self.replace_bound_vars_with_placeholders(predicate);\n+                self.instantiate_binder_with_placeholders(predicate);\n \n             let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;\n \n@@ -1008,7 +1008,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         cause: &traits::ObligationCause<'tcx>,\n         predicate: ty::PolyRegionOutlivesPredicate<'tcx>,\n     ) {\n-        let ty::OutlivesPredicate(r_a, r_b) = self.replace_bound_vars_with_placeholders(predicate);\n+        let ty::OutlivesPredicate(r_a, r_b) = self.instantiate_binder_with_placeholders(predicate);\n         let origin =\n             SubregionOrigin::from_obligation_cause(cause, || RelateRegionParamBound(cause.span));\n         self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n@@ -1447,7 +1447,14 @@ impl<'tcx> InferCtxt<'tcx> {\n         value\n     }\n \n-    pub fn replace_bound_vars_with_fresh_vars<T>(\n+    // Instantiates the bound variables in a given binder with fresh inference\n+    // variables in the current universe.\n+    //\n+    // Use this method if you'd like to find some substitution of the binder's\n+    // variables (e.g. during a method call). If there isn't a [`LateBoundRegionConversionTime`]\n+    // that corresponds to your use case, consider whether or not you should\n+    // use [`InferCtxt::instantiate_binder_with_placeholders`] instead.\n+    pub fn instantiate_binder_with_fresh_vars<T>(\n         &self,\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,"}, {"sha": "532fbd0ffe4c40c685a47ef74098d5945fdacd60", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 let a_types = infcx.tcx.anonymize_bound_vars(a_types);\n                 let b_types = infcx.tcx.anonymize_bound_vars(b_types);\n                 if a_types.bound_vars() == b_types.bound_vars() {\n-                    let (a_types, b_types) = infcx.replace_bound_vars_with_placeholders(\n+                    let (a_types, b_types) = infcx.instantiate_binder_with_placeholders(\n                         a_types.map_bound(|a_types| (a_types, b_types.skip_binder())),\n                     );\n                     for (a, b) in std::iter::zip(a_types, b_types) {"}, {"sha": "c1936b7dbe41ec0743130a33af65837e39b92345", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                     )\n                                 }\n                                 ty::PredicateKind::Subtype(pred) => {\n-                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                    let (a, b) = infcx.instantiate_binder_with_placeholders(\n                                         goal.predicate.kind().rebind((pred.a, pred.b)),\n                                     );\n                                     let expected_found = ExpectedFound::new(true, a, b);\n@@ -84,7 +84,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                     )\n                                 }\n                                 ty::PredicateKind::Coerce(pred) => {\n-                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                    let (a, b) = infcx.instantiate_binder_with_placeholders(\n                                         goal.predicate.kind().rebind((pred.a, pred.b)),\n                                     );\n                                     let expected_found = ExpectedFound::new(false, a, b);\n@@ -94,7 +94,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                     )\n                                 }\n                                 ty::PredicateKind::ConstEquate(a, b) => {\n-                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                    let (a, b) = infcx.instantiate_binder_with_placeholders(\n                                         goal.predicate.kind().rebind((a, b)),\n                                     );\n                                     let expected_found = ExpectedFound::new(true, a, b);"}, {"sha": "36f987c9f9cb6d3e1a2db0bbcd2e588e9c40c373", "filename": "compiler/rustc_trait_selection/src/solve/infcx_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -26,7 +26,7 @@ pub(super) trait InferCtxtExt<'tcx> {\n         rhs: T,\n     ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution>;\n \n-    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n+    fn instantiate_binder_with_infer<T: TypeFoldable<'tcx> + Copy>(\n         &self,\n         value: ty::Binder<'tcx, T>,\n     ) -> T;\n@@ -65,11 +65,11 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             })\n     }\n \n-    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n+    fn instantiate_binder_with_infer<T: TypeFoldable<'tcx> + Copy>(\n         &self,\n         value: ty::Binder<'tcx, T>,\n     ) -> T {\n-        self.replace_bound_vars_with_fresh_vars(\n+        self.instantiate_binder_with_fresh_vars(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::HigherRankedType,\n             value,"}, {"sha": "9f092b6018f483303bc1691784701619f33fff14", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 }\n             }\n         } else {\n-            let kind = self.infcx.replace_bound_vars_with_placeholders(kind);\n+            let kind = self.infcx.instantiate_binder_with_placeholders(kind);\n             let goal = goal.with(self.tcx(), ty::Binder::dummy(kind));\n             let (_, certainty) = self.evaluate_goal(goal)?;\n             self.make_canonical_response(certainty)"}, {"sha": "205dde4064fbe6a5a8914c2f438f5a8a2828b4e8", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -323,7 +323,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         {\n             ecx.infcx.probe(|_| {\n                 let assumption_projection_pred =\n-                    ecx.infcx.instantiate_bound_vars_with_infer(poly_projection_pred);\n+                    ecx.infcx.instantiate_binder_with_infer(poly_projection_pred);\n                 let nested_goals = ecx.infcx.eq(\n                     goal.param_env,\n                     goal.predicate.projection_ty,"}, {"sha": "098efaac8355edd9bf30cf83e8b935b577d5a64d", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             // FIXME: Constness and polarity\n             ecx.infcx.probe(|_| {\n                 let assumption_trait_pred =\n-                    ecx.infcx.instantiate_bound_vars_with_infer(poly_trait_pred);\n+                    ecx.infcx.instantiate_binder_with_infer(poly_trait_pred);\n                 let nested_goals = ecx.infcx.eq(\n                     goal.param_env,\n                     goal.predicate.trait_ref,"}, {"sha": "1ee35a86e626424a3c6a0871f9b84f3f01145423", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -54,7 +54,7 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         }\n \n         ty::GeneratorWitness(types) => {\n-            Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n+            Ok(infcx.instantiate_binder_with_placeholders(types).to_vec())\n         }\n \n         ty::GeneratorWitnessMIR(..) => todo!(),\n@@ -174,7 +174,7 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         }\n \n         ty::GeneratorWitness(types) => {\n-            Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n+            Ok(infcx.instantiate_binder_with_placeholders(types).to_vec())\n         }\n \n         ty::GeneratorWitnessMIR(..) => todo!(),"}, {"sha": "84045c4d0edea11f5e61f766a0f1bc3cf1f607e8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -22,7 +22,7 @@ pub fn recompute_applicable_impls<'tcx>(\n     let impl_may_apply = |impl_def_id| {\n         let ocx = ObligationCtxt::new_in_snapshot(infcx);\n         let placeholder_obligation =\n-            infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+            infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let obligation_trait_ref =\n             ocx.normalize(&ObligationCause::dummy(), param_env, placeholder_obligation.trait_ref);\n \n@@ -47,11 +47,11 @@ pub fn recompute_applicable_impls<'tcx>(\n     let param_env_candidate_may_apply = |poly_trait_predicate: ty::PolyTraitPredicate<'tcx>| {\n         let ocx = ObligationCtxt::new_in_snapshot(infcx);\n         let placeholder_obligation =\n-            infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+            infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let obligation_trait_ref =\n             ocx.normalize(&ObligationCause::dummy(), param_env, placeholder_obligation.trait_ref);\n \n-        let param_env_predicate = infcx.replace_bound_vars_with_fresh_vars(\n+        let param_env_predicate = infcx.instantiate_binder_with_fresh_vars(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::HigherRankedType,\n             poly_trait_predicate,"}, {"sha": "cf1e05ada4713615087d28181215dd5dd9d95660", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -1716,7 +1716,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let (values, err) = if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n                 bound_predicate.skip_binder()\n             {\n-                let data = self.replace_bound_vars_with_fresh_vars(\n+                let data = self.instantiate_binder_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),"}, {"sha": "59aef52910ee3f287b359383db57b2fcb1e31d61", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -898,7 +898,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             return false;\n         }\n \n-        let self_ty = self.replace_bound_vars_with_fresh_vars(\n+        let self_ty = self.instantiate_binder_with_fresh_vars(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::FnCall,\n             trait_pred.self_ty(),\n@@ -1191,7 +1191,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n         }) else { return None; };\n \n-        let output = self.replace_bound_vars_with_fresh_vars(\n+        let output = self.instantiate_binder_with_fresh_vars(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::FnCall,\n             output,\n@@ -1200,7 +1200,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .skip_binder()\n             .iter()\n             .map(|ty| {\n-                self.replace_bound_vars_with_fresh_vars(\n+                self.instantiate_binder_with_fresh_vars(\n                     DUMMY_SP,\n                     LateBoundRegionConversionTime::FnCall,\n                     inputs.rebind(*ty),\n@@ -3806,13 +3806,13 @@ fn hint_missing_borrow<'tcx>(\n     err: &mut Diagnostic,\n ) {\n     let found_args = match found.kind() {\n-        ty::FnPtr(f) => infcx.replace_bound_vars_with_placeholders(*f).inputs().iter(),\n+        ty::FnPtr(f) => infcx.instantiate_binder_with_placeholders(*f).inputs().iter(),\n         kind => {\n             span_bug!(span, \"found was converted to a FnPtr above but is now {:?}\", kind)\n         }\n     };\n     let expected_args = match expected.kind() {\n-        ty::FnPtr(f) => infcx.replace_bound_vars_with_placeholders(*f).inputs().iter(),\n+        ty::FnPtr(f) => infcx.instantiate_binder_with_placeholders(*f).inputs().iter(),\n         kind => {\n             span_bug!(span, \"expected was converted to a FnPtr above but is now {:?}\", kind)\n         }"}, {"sha": "3adc1e62e0d4853368bb663dba6e88d5f978431d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => {\n                     let pred =\n-                        ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n+                        ty::Binder::dummy(infcx.instantiate_binder_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![obligation.with(infcx.tcx, pred)]))\n                 }\n                 ty::PredicateKind::Ambiguous => ProcessResult::Unchanged,"}, {"sha": "aa81bc640aa6c56367e4e9cdf87abf9e7e73984e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -215,7 +215,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     let r = infcx.commit_if_ok(|_snapshot| {\n         let old_universe = infcx.universe();\n         let placeholder_predicate =\n-            infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+            infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let new_universe = infcx.universe();\n \n         let placeholder_obligation = obligation.with(infcx.tcx, placeholder_predicate);\n@@ -2046,7 +2046,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n     let cause = &obligation.cause;\n     let param_env = obligation.param_env;\n \n-    let cache_entry = infcx.replace_bound_vars_with_fresh_vars(\n+    let cache_entry = infcx.instantiate_binder_with_fresh_vars(\n         cause.span,\n         LateBoundRegionConversionTime::HigherRankedType,\n         poly_cache_entry,"}, {"sha": "e2af843870400f9add4e022ca1bdc8911a173885", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -488,7 +488,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             let poly_trait_predicate = self.infcx.resolve_vars_if_possible(obligation.predicate);\n             let placeholder_trait_predicate =\n-                self.infcx.replace_bound_vars_with_placeholders(poly_trait_predicate);\n+                self.infcx.instantiate_binder_with_placeholders(poly_trait_predicate);\n \n             // Count only those upcast versions that match the trait-ref\n             // we are looking for. Specifically, do not only check for the"}, {"sha": "fcc4820c2a6b6ff424131ceaac1a69ec4b5399a8", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -151,7 +151,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let trait_predicate = self.infcx.shallow_resolve(obligation.predicate);\n         let placeholder_trait_predicate =\n-            self.infcx.replace_bound_vars_with_placeholders(trait_predicate).trait_ref;\n+            self.infcx.instantiate_binder_with_placeholders(trait_predicate).trait_ref;\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n@@ -336,7 +336,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let cause = obligation.derived_cause(BuiltinDerivedObligation);\n \n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n-            let trait_ref = self.infcx.replace_bound_vars_with_placeholders(poly_trait_ref);\n+            let trait_ref = self.infcx.instantiate_binder_with_placeholders(poly_trait_ref);\n             let trait_obligations: Vec<PredicateObligation<'_>> = self.impl_or_trait_obligations(\n                 &cause,\n                 obligation.recursion_depth + 1,\n@@ -427,7 +427,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         debug!(?obligation, ?index, \"confirm_object_candidate\");\n \n-        let trait_predicate = self.infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+        let trait_predicate = self.infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let self_ty = self.infcx.shallow_resolve(trait_predicate.self_ty());\n         let obligation_trait_ref = ty::Binder::dummy(trait_predicate.trait_ref);\n         let ty::Dynamic(data, ..) = *self_ty.kind() else {\n@@ -437,7 +437,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let object_trait_ref = data.principal().unwrap_or_else(|| {\n             span_bug!(obligation.cause.span, \"object candidate with no principal\")\n         });\n-        let object_trait_ref = self.infcx.replace_bound_vars_with_fresh_vars(\n+        let object_trait_ref = self.infcx.instantiate_binder_with_fresh_vars(\n             obligation.cause.span,\n             HigherRankedType,\n             object_trait_ref,\n@@ -629,7 +629,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // Confirm the `type Output: Sized;` bound that is present on `FnOnce`\n-        let output_ty = self.infcx.replace_bound_vars_with_placeholders(sig.output());\n+        let output_ty = self.infcx.instantiate_binder_with_placeholders(sig.output());\n         let output_ty = normalize_with_depth_to(\n             self,\n             obligation.param_env,\n@@ -652,7 +652,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?obligation, \"confirm_trait_alias_candidate\");\n \n         let alias_def_id = obligation.predicate.def_id();\n-        let predicate = self.infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+        let predicate = self.infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let trait_ref = predicate.trait_ref;\n         let trait_def_id = trait_ref.def_id;\n         let substs = trait_ref.substs;"}, {"sha": "984d6fde2686c58384a99a272062b95191794f84", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=03a8a4ff3e7cf0633ceaf0a5fa8d347cfe49e809", "patch": "@@ -1618,7 +1618,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> smallvec::SmallVec<[(usize, ty::BoundConstness); 2]> {\n         let poly_trait_predicate = self.infcx.resolve_vars_if_possible(obligation.predicate);\n         let placeholder_trait_predicate =\n-            self.infcx.replace_bound_vars_with_placeholders(poly_trait_predicate);\n+            self.infcx.instantiate_binder_with_placeholders(poly_trait_predicate);\n         debug!(?placeholder_trait_predicate);\n \n         let tcx = self.infcx.tcx;\n@@ -1738,7 +1738,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         potentially_unnormalized_candidates: bool,\n     ) -> ProjectionMatchesProjection {\n         let mut nested_obligations = Vec::new();\n-        let infer_predicate = self.infcx.replace_bound_vars_with_fresh_vars(\n+        let infer_predicate = self.infcx.instantiate_binder_with_fresh_vars(\n             obligation.cause.span,\n             LateBoundRegionConversionTime::HigherRankedType,\n             env_predicate,\n@@ -2339,7 +2339,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .flat_map(|ty| {\n                 let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(*ty); // <----/\n \n-                let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);\n+                let placeholder_ty = self.infcx.instantiate_binder_with_placeholders(ty);\n                 let Normalized { value: normalized_ty, mut obligations } =\n                     ensure_sufficient_stack(|| {\n                         project::normalize_with_depth(\n@@ -2418,7 +2418,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n     ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n         let placeholder_obligation =\n-            self.infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+            self.infcx.instantiate_binder_with_placeholders(obligation.predicate);\n         let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);"}]}