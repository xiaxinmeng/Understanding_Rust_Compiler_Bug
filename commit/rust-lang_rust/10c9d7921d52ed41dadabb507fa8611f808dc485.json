{"sha": "10c9d7921d52ed41dadabb507fa8611f808dc485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzlkNzkyMWQ1MmVkNDFkYWRhYmI1MDdmYTg2MTFmODA4ZGM0ODU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-07T23:09:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-07T23:54:17Z"}, "message": "Trait constraints are separated by space, not comma", "tree": {"sha": "91a5480ba64945d2a83bb9a6257f67783f2234b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a5480ba64945d2a83bb9a6257f67783f2234b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c9d7921d52ed41dadabb507fa8611f808dc485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c9d7921d52ed41dadabb507fa8611f808dc485", "html_url": "https://github.com/rust-lang/rust/commit/10c9d7921d52ed41dadabb507fa8611f808dc485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c9d7921d52ed41dadabb507fa8611f808dc485/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecdc8aae4193a4306b379803897ff367f1f65379", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecdc8aae4193a4306b379803897ff367f1f65379", "html_url": "https://github.com/rust-lang/rust/commit/ecdc8aae4193a4306b379803897ff367f1f65379"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "7509e43e4029caf831e0d670f18c0b54a3b046c1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -2826,7 +2826,7 @@ impl Parser {\n \n     fn parse_trait_ref_list(ket: token::Token) -> ~[@trait_ref] {\n         self.parse_seq_to_before_end(\n-            ket, seq_sep_trailing_disallowed(token::COMMA),\n+            ket, seq_sep_none(),\n             |p| p.parse_trait_ref())\n     }\n "}, {"sha": "cdb3cfa1bc6a0fb33776a0a481e55a0a80f2fd48", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -2,6 +2,6 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo, Bar, Baz { }\n+trait Quux: Foo Bar Baz { }\n \n impl<T: Foo Bar Baz> T: Quux { }"}, {"sha": "ba8ae0757e49b6b7222cc26cbb1f33ef9d5be7e2", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -1,11 +1,11 @@\n use cmp::Eq;\n \n-trait Hahaha: Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, //~ ERROR Duplicate supertrait in trait declaration\n-              Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq,\n-              Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq,\n-              Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq,\n-              Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq,\n-              Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq {}\n+trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicate supertrait in trait declaration\n+              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n+              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n+              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n+              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n+              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq {}\n \n enum Lol = int;\n "}, {"sha": "1da4eb161ddadcae0eb62511182a5428aed512d3", "filename": "src/test/run-pass/trait-inheritance-auto-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -7,7 +7,7 @@ extern mod aux(name = \"trait_inheritance_auto_xc_2_aux\");\n use aux::{Foo, Bar, Baz, A};\n \n // We want to extend all Foo, Bar, Bazes to Quuxes\n-pub trait Quux: Foo, Bar, Baz { }\n+pub trait Quux: Foo Bar Baz { }\n impl<T: Foo Bar Baz> T: Quux { }\n \n fn f<T: Quux>(a: &T) {"}, {"sha": "1c6d3ee2ccaf444b3a582156b7ea2c5e9aaf7abd", "filename": "src/test/run-pass/trait-inheritance-auto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -6,7 +6,7 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo, Bar, Baz { }\n+trait Quux: Foo Bar Baz { }\n \n struct A { x: int }\n "}, {"sha": "e36dfe76bb096d24498de4f9b17f87f15c46a9a3", "filename": "src/test/run-pass/trait-inheritance-diamond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -3,7 +3,7 @@\n trait A { fn a(&self) -> int; }\n trait B: A { fn b(&self) -> int; }\n trait C: A { fn c(&self) -> int; }\n-trait D: B, C { fn d(&self) -> int; }\n+trait D: B C { fn d(&self) -> int; }\n \n struct S { bogus: () }\n "}, {"sha": "7e00694604a9eb45f76905d4ce97c3f6e1b70aa2", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -4,9 +4,9 @@ use num::from_int;\n extern mod std;\n use std::cmp::FuzzyEq;\n \n-pub trait NumExt: Num, Eq, Ord {}\n+pub trait NumExt: Num Eq Ord {}\n \n-pub trait FloatExt: NumExt, FuzzyEq {}\n+pub trait FloatExt: NumExt FuzzyEq {}\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool { *n > from_int(1) }\n fn greater_than_one_float<T:FloatExt>(n: &T) -> bool { *n > from_int(1) }"}, {"sha": "94ac65670e8a5e16f241ce5f8ce8f86e41704ff7", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -3,7 +3,7 @@\n use cmp::Ord;\n use num::from_int;\n \n-pub trait NumExt: Num, Ord { }\n+pub trait NumExt: Num Ord { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     *n > from_int(1)"}, {"sha": "66489babc5b638f6cf9dc5ba2fa93f7757db2c34", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -26,7 +26,7 @@ pub impl f64: TypeExt {}\n pub impl float: TypeExt {}\n \n \n-pub trait NumExt: TypeExt, Eq, Ord, Num {}\n+pub trait NumExt: TypeExt Eq Ord Num {}\n \n pub impl u8: NumExt {}\n pub impl u16: NumExt {}\n@@ -82,7 +82,7 @@ pub impl i64: IntegerExt {}\n pub impl int: IntegerExt {}\n \n \n-pub trait FloatExt: NumExt , FuzzyEq {}\n+pub trait FloatExt: NumExt FuzzyEq {}\n \n pub impl f32: FloatExt {}\n pub impl f64: FloatExt {}"}, {"sha": "41ec9d0a226aade8228f2c2dc71e26bf69b6ed7b", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -1,7 +1,7 @@\n use cmp::{Eq, Ord};\n use num::from_int;\n \n-pub trait NumExt: Eq, Ord, Num {}\n+pub trait NumExt: Eq Ord Num {}\n \n pub impl f32: NumExt {}\n "}, {"sha": "76a19da830d186327df62f81bae3c201b6edbf05", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -1,7 +1,7 @@\n use cmp::{Eq, Ord};\n use num::from_int;\n \n-pub trait NumExt: Eq, Num {}\n+pub trait NumExt: Eq Num {}\n \n pub impl f32: NumExt {}\n pub impl int: NumExt {}"}, {"sha": "7d5919752ca10721404068484d6ab6d745d3b2d6", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -1,6 +1,6 @@\n use cmp::Eq;\n \n-trait MyNum : Add<self,self>, Sub<self,self>, Mul<self,self>, Eq { }\n+trait MyNum : Add<self,self> Sub<self,self> Mul<self,self> Eq { }\n \n struct MyInt { val: int }\n "}, {"sha": "7877cda1fe77371ebf114e15773aa0818c7712bd", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -4,7 +4,7 @@ trait MyNum {\n     static fn from_int(int) -> self;\n }\n \n-pub trait NumExt: MyEq, MyNum { }\n+pub trait NumExt: MyEq MyNum { }\n \n struct S { v: int }\n "}, {"sha": "dfca75dabda1a37a7f98a62a74a67ae72ddb097b", "filename": "src/test/run-pass/trait-inheritance2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9d7921d52ed41dadabb507fa8611f808dc485/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs?ref=10c9d7921d52ed41dadabb507fa8611f808dc485", "patch": "@@ -2,7 +2,7 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo, Bar, Baz { }\n+trait Quux: Foo Bar Baz { }\n \n struct A { x: int }\n "}]}