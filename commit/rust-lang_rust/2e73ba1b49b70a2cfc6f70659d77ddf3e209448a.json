{"sha": "2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNzNiYTFiNDliNzBhMmNmYzZmNzA2NTlkNzdkZGYzZTIwOTQ0OGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-22T11:00:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T11:00:17Z"}, "message": "Merge #5479\n\n5479: Allow gathering memory stats on non-jemalloc Linux r=matklad a=jonas-schievink\n\nI could also parse `/proc/$PID/statm` to get the resident set size, but decided against that for now as it isn't terribly useful.\r\n\r\nNote that `mallinfo()` is incredibly slow for some reason, and unfortunately this will be exposed to users via the \"Memory Usage\" command (even worse, the opened document will show the outdated values while the server is processing). So, not very ideal, but it keeps me from recompiling r-a with different feature sets all the time.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "e06cb44bd6702343665b6c070bf151c1acfce05d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e06cb44bd6702343665b6c070bf151c1acfce05d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGBxBCRBK7hj4Ov3rIwAAdHIIAH0j9Vgk7VS5DPOv8eBMvluy\nyn1SPq9BLlOp5sP4Mv84/r8A1tWPCEnfl0f1Xo1Yvfn6BM/e7sUT/+W+i3xIpzeg\niJshvcRYIhoBHobXlSG13YjPJ7U6nAyheKxx5wim5ejk2fO2uJIO/i27KM5T+cLJ\nye39SbrhE9Uyfz3yco0bJ1iCtK6n7kvhxYbguOQGUN+gJJjMN8TavF8bx8aQ5ULO\nKxRdrn0D0Upp0XWQtRvDWAli0A+SY04tgrRQrNCEzT89kVRCNXhB6pQSP0eQEE2I\ndwVHi+IEQXxXO4kZ+5hirKoDFYLmQF8zQGMLhOsxkLujTysSn9rkvE/KKbi3x/0=\n=ggU6\n-----END PGP SIGNATURE-----\n", "payload": "tree e06cb44bd6702343665b6c070bf151c1acfce05d\nparent 8b98eaa573f42e346049bb90473b9f821e7fbaf3\nparent 56c090d0d0ad68c0dd195684e4d8180ea149692f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595415617 +0000\ncommitter GitHub <noreply@github.com> 1595415617 +0000\n\nMerge #5479\n\n5479: Allow gathering memory stats on non-jemalloc Linux r=matklad a=jonas-schievink\n\nI could also parse `/proc/$PID/statm` to get the resident set size, but decided against that for now as it isn't terribly useful.\r\n\r\nNote that `mallinfo()` is incredibly slow for some reason, and unfortunately this will be exposed to users via the \"Memory Usage\" command (even worse, the opened document will show the outdated values while the server is processing). So, not very ideal, but it keeps me from recompiling r-a with different feature sets all the time.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "html_url": "https://github.com/rust-lang/rust/commit/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b98eaa573f42e346049bb90473b9f821e7fbaf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b98eaa573f42e346049bb90473b9f821e7fbaf3", "html_url": "https://github.com/rust-lang/rust/commit/8b98eaa573f42e346049bb90473b9f821e7fbaf3"}, {"sha": "56c090d0d0ad68c0dd195684e4d8180ea149692f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c090d0d0ad68c0dd195684e4d8180ea149692f", "html_url": "https://github.com/rust-lang/rust/commit/56c090d0d0ad68c0dd195684e4d8180ea149692f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "4a8271f09dad3c96c083236f914d9cf76fa6c492", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "patch": "@@ -1198,8 +1198,10 @@ name = \"ra_prof\"\n version = \"0.1.0\"\n dependencies = [\n  \"backtrace\",\n+ \"cfg-if\",\n  \"jemalloc-ctl\",\n  \"jemallocator\",\n+ \"libc\",\n  \"mimalloc\",\n  \"once_cell\",\n  \"ra_arena\","}, {"sha": "2e60858f1c9ee3511bbc9af4dcd3fd90a50126e7", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "patch": "@@ -14,6 +14,8 @@ ra_arena = { path = \"../ra_arena\" }\n once_cell = \"1.3.1\"\n backtrace = { version = \"0.3.44\", optional = true }\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n+cfg-if = \"0.1.10\"\n+libc = \"0.2.73\"\n \n [target.'cfg(not(target_env = \"msvc\"))'.dependencies]\n jemallocator = { version = \"0.3.2\", optional = true }"}, {"sha": "b1858b06f902900588ab86ca5a90eadbf7b7858e", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e73ba1b49b70a2cfc6f70659d77ddf3e209448a/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=2e73ba1b49b70a2cfc6f70659d77ddf3e209448a", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use cfg_if::cfg_if;\n use std::fmt;\n \n pub struct MemoryUsage {\n@@ -8,19 +9,23 @@ pub struct MemoryUsage {\n }\n \n impl MemoryUsage {\n-    #[cfg(all(feature = \"jemalloc\", not(target_env = \"msvc\")))]\n     pub fn current() -> MemoryUsage {\n-        jemalloc_ctl::epoch::advance().unwrap();\n-        MemoryUsage {\n-            allocated: Bytes(jemalloc_ctl::stats::allocated::read().unwrap()),\n-            resident: Bytes(jemalloc_ctl::stats::resident::read().unwrap()),\n+        cfg_if! {\n+            if #[cfg(all(feature = \"jemalloc\", not(target_env = \"msvc\")))] {\n+                jemalloc_ctl::epoch::advance().unwrap();\n+                MemoryUsage {\n+                    allocated: Bytes(jemalloc_ctl::stats::allocated::read().unwrap()),\n+                    resident: Bytes(jemalloc_ctl::stats::resident::read().unwrap()),\n+                }\n+            } else if #[cfg(target_os = \"linux\")] {\n+                // Note: This is incredibly slow.\n+                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as usize;\n+                MemoryUsage { allocated: Bytes(alloc), resident: Bytes(0) }\n+            } else {\n+                MemoryUsage { allocated: Bytes(0), resident: Bytes(0) }\n+            }\n         }\n     }\n-\n-    #[cfg(any(not(feature = \"jemalloc\"), target_env = \"msvc\"))]\n-    pub fn current() -> MemoryUsage {\n-        MemoryUsage { allocated: Bytes(0), resident: Bytes(0) }\n-    }\n }\n \n impl fmt::Display for MemoryUsage {"}]}