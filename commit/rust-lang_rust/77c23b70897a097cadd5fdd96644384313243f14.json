{"sha": "77c23b70897a097cadd5fdd96644384313243f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YzIzYjcwODk3YTA5N2NhZGQ1ZmRkOTY2NDQzODQzMTMyNDNmMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T19:38:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T19:38:04Z"}, "message": "Auto merge of #5527 - flip1995:rollup-pr2htfd, r=flip1995\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #5408 (Downgrade match_bool to pedantic)\n - #5505 (Avoid running cargo+internal lints when not enabled)\n - #5516 (Add a note to the beta sections of release.md)\n - #5517 (Deploy time travel)\n - #5523 (Add lifetime test case for `new_ret_no_self`)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "07e88fff00a80da35a46d32d271e8246af4a623d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e88fff00a80da35a46d32d271e8246af4a623d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77c23b70897a097cadd5fdd96644384313243f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77c23b70897a097cadd5fdd96644384313243f14", "html_url": "https://github.com/rust-lang/rust/commit/77c23b70897a097cadd5fdd96644384313243f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77c23b70897a097cadd5fdd96644384313243f14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "html_url": "https://github.com/rust-lang/rust/commit/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7"}, {"sha": "9b882bab2683de8926aed3ae89fb540c497c5dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b882bab2683de8926aed3ae89fb540c497c5dd3", "html_url": "https://github.com/rust-lang/rust/commit/9b882bab2683de8926aed3ae89fb540c497c5dd3"}], "stats": {"total": 181, "additions": 124, "deletions": 57}, "files": [{"sha": "6675a1029bbc8ad2cf7b86adbc6fc65c672530c2", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -77,8 +77,6 @@ jobs:\n       run: |\n         sudo dpkg --add-architecture i386\n         sudo apt-get update\n-        # perform system upgrade to work around https://github.com/rust-lang/rust-clippy/issues/5477 , revert as soon as that is fixed\n-        sudo apt-get -y upgrade\n         sudo apt-get install gcc-multilib libssl-dev:i386 libgit2-dev:i386\n       if: matrix.host == 'i686-unknown-linux-gnu'\n "}, {"sha": "f542f9b02c17b3d16903329df6d9d2fb2348462a", "filename": ".github/workflows/deploy.yml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/.github%2Fworkflows%2Fdeploy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/.github%2Fworkflows%2Fdeploy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdeploy.yml?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -38,6 +38,12 @@ jobs:\n     - name: Set beta to true\n       if: github.ref == 'refs/heads/beta'\n       run: echo \"::set-env name=BETA::true\"\n+\n+    - name: Use scripts and templates from master branch\n+      run: |\n+        git fetch --no-tags --prune --depth=1 origin master\n+        git checkout origin/master -- .github/deploy.sh util/gh-pages/ util/*.py\n+\n     - name: Deploy\n       run: |\n         eval \"$(ssh-agent -s)\""}, {"sha": "782da249808d0e71b3af319d9ef86cdb66236338", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -2,9 +2,9 @@\n \n use std::path::PathBuf;\n \n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -35,11 +35,11 @@ declare_clippy_lint! {\n     \"common metadata is defined in `Cargo.toml`\"\n }\n \n-fn warning(cx: &EarlyContext<'_>, message: &str) {\n+fn warning(cx: &LateContext<'_, '_>, message: &str) {\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, message);\n }\n \n-fn missing_warning(cx: &EarlyContext<'_>, package: &cargo_metadata::Package, field: &str) {\n+fn missing_warning(cx: &LateContext<'_, '_>, package: &cargo_metadata::Package, field: &str) {\n     let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n     warning(cx, &message);\n }\n@@ -59,8 +59,12 @@ fn is_empty_vec(value: &[String]) -> bool {\n \n declare_lint_pass!(CargoCommonMetadata => [CARGO_COMMON_METADATA]);\n \n-impl EarlyLintPass for CargoCommonMetadata {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for CargoCommonMetadata {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata\n         } else {"}, {"sha": "ac867cc4e4af0ea641c8aa2d693a6d7f37cbae52", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1024,9 +1024,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n-    store.register_early_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n-    store.register_early_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n-    store.register_early_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n+    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n+    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n     store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n@@ -1134,6 +1134,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n+        LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n@@ -1279,7 +1280,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_AS_REF),\n-        LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_SINGLE_BINDING),\n@@ -1470,7 +1470,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&main_recursion::MAIN_RECURSION),\n         LintId::of(&map_clone::MAP_CLONE),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-        LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_WILD_ERR_ARM),"}, {"sha": "8f86535ef1e0f25aeea9de1792099c8541815bc0", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -138,7 +138,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub MATCH_BOOL,\n-    style,\n+    pedantic,\n     \"a `match` on a boolean expression instead of an `if..else` block\"\n }\n "}, {"sha": "ed85d0315bd25d7d232de53e96c9ef97bf53ca0a", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,8 +1,8 @@\n //! lint on multiple versions of a crate being used\n \n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -33,8 +33,12 @@ declare_clippy_lint! {\n \n declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n-impl EarlyLintPass for MultipleCrateVersions {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for MultipleCrateVersions {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[MULTIPLE_CRATE_VERSIONS], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().exec() {\n             metadata\n         } else {"}, {"sha": "5bf9acdc5f7ce21e25144e2aa0d3b6cc3055ff58", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::SpanlessEq;\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, snippet, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, walk_ptrs_ty,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, run_lints, snippet, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n@@ -10,7 +10,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -252,6 +253,10 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id) {\n+            return;\n+        }\n+\n         if let hir::ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 let expr = &cx.tcx.hir().body(body_id).value;\n@@ -306,6 +311,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate<'_>) {\n+        if !run_lints(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         for (lint_name, &lint_span) in &self.declared_lints {\n             // When using the `declare_tool_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\".\n@@ -355,15 +364,12 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        walk_expr(self, expr);\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::All(self.cx.tcx.hir())\n     }\n@@ -391,6 +397,10 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if !run_lints(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n             let fn_name = path.ident;\n@@ -416,6 +426,10 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n+            return;\n+        }\n+\n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n         let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n@@ -462,6 +476,10 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::Call(ref func, ref and_then_args) = expr.kind;\n             if let ExprKind::Path(ref path) = func.kind;"}, {"sha": "0d37932ddab53e86df673fa93f87fdb9714e46d9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1399,6 +1399,15 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_, '_>, did: DefId) -> bool\n     )\n }\n \n+pub fn run_lints(cx: &LateContext<'_, '_>, lints: &[&'static Lint], id: HirId) -> bool {\n+    lints.iter().any(|lint| {\n+        matches!(\n+            cx.tcx.lint_level_at_node(lint, id),\n+            (Level::Forbid | Level::Deny | Level::Warn, _)\n+        )\n+    })\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}, {"sha": "d8d48eb15358d19d70cb82b07343e476714440ae", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,6 +1,6 @@\n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -28,8 +28,12 @@ declare_clippy_lint! {\n \n declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n-impl EarlyLintPass for WildcardDependencies {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for WildcardDependencies {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[WILDCARD_DEPENDENCIES], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata\n         } else {"}, {"sha": "9d69fa8a7f69a3f17de0df63721b723fca6b4f8b", "filename": "doc/release.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/doc%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/doc%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frelease.md?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -63,6 +63,16 @@ to the beta Rust release. The remerge is then necessary, to make sure that the\n Clippy commit, that was used by the now stable Rust release, persists in the\n tree of the Clippy repository.\n \n+To find out if this step is necessary run\n+\n+```bash\n+# Assumes that the local master branch is up-to-date\n+$ git fetch upstream\n+$ git branch master --contains upstream/beta\n+```\n+\n+If this command outputs `master`, this step is **not** necessary.\n+\n ```bash\n # Assuming `HEAD` is the current `master` branch of rust-lang/rust-clippy\n $ git checkout -b backport_remerge\n@@ -97,5 +107,5 @@ be updated.\n # Assuming the current directory corresponds to the Clippy repository\n $ git checkout beta\n $ git rebase $BETA_SHA\n-$ git push upstream beta [-f]   # This requires a force push, if a remerge was done\n+$ git push upstream beta\n ```"}, {"sha": "9b67bacc35d72dd6aec24e1012c1b5a5bac2c082", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1139,7 +1139,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"match_bool\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"a `match` on a boolean expression instead of an `if..else` block\",\n         deprecation: None,\n         module: \"matches\","}, {"sha": "9066dc3fedfd60fc5377adbfa78d2df368c2ed3a", "filename": "tests/ui/implicit_return.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -21,7 +21,6 @@ fn test_if_block() -> bool {\n     }\n }\n \n-#[allow(clippy::match_bool)]\n #[rustfmt::skip]\n fn test_match(x: bool) -> bool {\n     match x {\n@@ -30,7 +29,7 @@ fn test_match(x: bool) -> bool {\n     }\n }\n \n-#[allow(clippy::match_bool, clippy::needless_return)]\n+#[allow(clippy::needless_return)]\n fn test_match_with_unreachable(x: bool) -> bool {\n     match x {\n         true => return false,"}, {"sha": "c0d70ecf502ed6167fe7205866045f24d66c6ceb", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -21,7 +21,6 @@ fn test_if_block() -> bool {\n     }\n }\n \n-#[allow(clippy::match_bool)]\n #[rustfmt::skip]\n fn test_match(x: bool) -> bool {\n     match x {\n@@ -30,7 +29,7 @@ fn test_match(x: bool) -> bool {\n     }\n }\n \n-#[allow(clippy::match_bool, clippy::needless_return)]\n+#[allow(clippy::needless_return)]\n fn test_match_with_unreachable(x: bool) -> bool {\n     match x {\n         true => return false,"}, {"sha": "fb2ec9027645459c8ae221a1962e61e49df03ce9", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -19,49 +19,49 @@ LL |         false\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:28:17\n+  --> $DIR/implicit_return.rs:27:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:29:20\n+  --> $DIR/implicit_return.rs:28:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:44:9\n+  --> $DIR/implicit_return.rs:43:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:52:13\n+  --> $DIR/implicit_return.rs:51:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:61:13\n+  --> $DIR/implicit_return.rs:60:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:79:18\n+  --> $DIR/implicit_return.rs:78:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:80:16\n+  --> $DIR/implicit_return.rs:79:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:88:5\n+  --> $DIR/implicit_return.rs:87:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`"}, {"sha": "9ed55ca7ae7f9cef1bc2eb858a853d7a9a33d351", "filename": "tests/ui/match_bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,3 +1,5 @@\n+#![deny(clippy::match_bool)]\n+\n fn match_bool() {\n     let test: bool = true;\n "}, {"sha": "1ad78c740c68bf104e9b3fd8a6e9fc1b84cc6703", "filename": "tests/ui/match_bool.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fmatch_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fmatch_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.stderr?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,24 +1,28 @@\n error: this boolean expression can be simplified\n-  --> $DIR/match_bool.rs:29:11\n+  --> $DIR/match_bool.rs:31:11\n    |\n LL |     match test && test {\n    |           ^^^^^^^^^^^^ help: try: `test`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:4:5\n+  --> $DIR/match_bool.rs:6:5\n    |\n LL | /     match test {\n LL | |         true => 0,\n LL | |         false => 42,\n LL | |     };\n    | |_____^ help: consider using an `if`/`else` expression: `if test { 0 } else { 42 }`\n    |\n-   = note: `-D clippy::match-bool` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/match_bool.rs:1:9\n+   |\n+LL | #![deny(clippy::match_bool)]\n+   |         ^^^^^^^^^^^^^^^^^^\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:10:5\n+  --> $DIR/match_bool.rs:12:5\n    |\n LL | /     match option == 1 {\n LL | |         true => 1,\n@@ -27,7 +31,7 @@ LL | |     };\n    | |_____^ help: consider using an `if`/`else` expression: `if option == 1 { 1 } else { 0 }`\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:15:5\n+  --> $DIR/match_bool.rs:17:5\n    |\n LL | /     match test {\n LL | |         true => (),\n@@ -45,7 +49,7 @@ LL |     };\n    |\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:22:5\n+  --> $DIR/match_bool.rs:24:5\n    |\n LL | /     match test {\n LL | |         false => {\n@@ -63,7 +67,7 @@ LL |     };\n    |\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:29:5\n+  --> $DIR/match_bool.rs:31:5\n    |\n LL | /     match test && test {\n LL | |         false => {\n@@ -81,15 +85,15 @@ LL |     };\n    |\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/match_bool.rs:29:11\n+  --> $DIR/match_bool.rs:31:11\n    |\n LL |     match test && test {\n    |           ^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::eq_op)]` on by default\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/match_bool.rs:36:5\n+  --> $DIR/match_bool.rs:38:5\n    |\n LL | /     match test {\n LL | |         false => {"}, {"sha": "ad20e2381073aae324d7f90474f89befe77aa24b", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused, clippy::needless_bool, clippy::match_bool)]\n+#![allow(unused, clippy::needless_bool)]\n #![allow(clippy::if_same_then_else, clippy::single_match)]\n #![warn(clippy::needless_return)]\n "}, {"sha": "af0cdfb207ff568f9e0cbc29225437196be17868", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused, clippy::needless_bool, clippy::match_bool)]\n+#![allow(unused, clippy::needless_bool)]\n #![allow(clippy::if_same_then_else, clippy::single_match)]\n #![warn(clippy::needless_return)]\n "}, {"sha": "2c2d1e275893fae41e3965c9c4568f2afad8c6e8", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c23b70897a097cadd5fdd96644384313243f14/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=77c23b70897a097cadd5fdd96644384313243f14", "patch": "@@ -199,3 +199,14 @@ impl NestedReturnerOk3 {\n         unimplemented!();\n     }\n }\n+\n+struct WithLifetime<'a> {\n+    cat: &'a str,\n+}\n+\n+impl<'a> WithLifetime<'a> {\n+    // should not trigger the lint, because the lifetimes are different\n+    pub fn new<'b: 'a>(s: &'b str) -> WithLifetime<'b> {\n+        unimplemented!();\n+    }\n+}"}]}