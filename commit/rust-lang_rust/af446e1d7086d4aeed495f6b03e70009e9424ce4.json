{"sha": "af446e1d7086d4aeed495f6b03e70009e9424ce4", "node_id": "C_kwDOAAsO6NoAKGFmNDQ2ZTFkNzA4NmQ0YWVlZDQ5NWY2YjAzZTcwMDA5ZTk0MjRjZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T01:24:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T01:24:37Z"}, "message": "Auto merge of #94861 - aDotInTheVoid:rdj-trait-tests, r=CraftSpider\n\nrustdoc-json: More tests, and better jsondocck errors\n\nHelps with #81359\n\nr? `@CraftSpider`\n\n`@rustbot` modify labels: +A-rustdoc-json +T-rustdoc +A-testsuite", "tree": {"sha": "73ce631307e60b8802ff3b505c499ef381929b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ce631307e60b8802ff3b505c499ef381929b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af446e1d7086d4aeed495f6b03e70009e9424ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af446e1d7086d4aeed495f6b03e70009e9424ce4", "html_url": "https://github.com/rust-lang/rust/commit/af446e1d7086d4aeed495f6b03e70009e9424ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af446e1d7086d4aeed495f6b03e70009e9424ce4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21488a12cf819947741e9e3549f7670ada9d26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f21488a12cf819947741e9e3549f7670ada9d26a", "html_url": "https://github.com/rust-lang/rust/commit/f21488a12cf819947741e9e3549f7670ada9d26a"}, {"sha": "26829c03b0689c53e09e5bdfc329de78e95791f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/26829c03b0689c53e09e5bdfc329de78e95791f4", "html_url": "https://github.com/rust-lang/rust/commit/26829c03b0689c53e09e5bdfc329de78e95791f4"}], "stats": {"total": 157, "additions": 155, "deletions": 2}, "files": [{"sha": "3b03724b040aea2bcb67882c9ded04d0ca0e8d4d", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -0,0 +1,47 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n+pub trait Foo {}\n+\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n+// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" '$foo'\n+// @count - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+pub fn generics<F: Foo>(f: F) {}\n+\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n+pub fn impl_trait(f: impl Foo) {}\n+\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+pub fn where_clase<F>(f: F)\n+where\n+    F: Foo,\n+{\n+}"}, {"sha": "1a0f33fe3d28e50567b115b16e83526b873e9a61", "filename": "src/test/rustdoc-json/fns/generic_returns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count generic_returns.json \"$.index[*][?(@.name=='generic_returns')].inner.items[*]\" 2\n+\n+// @set foo = - \"$.index[*][?(@.name=='Foo')].id\"\n+pub trait Foo {}\n+\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n+// @count - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.inner.id\" $foo\n+pub fn get_foo() -> impl Foo {\n+    Fooer {}\n+}\n+\n+struct Fooer {}\n+\n+impl Foo for Fooer {}"}, {"sha": "95b99599e737d44595ff697113d5dde49dd55e43", "filename": "src/test/rustdoc-json/lifetime/longest.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @is longest.json \"$.index[*][?(@.name=='longest')].inner.generics.params[0].name\"  \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @is - \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @count - \"$.index[*][?(@.name=='longest')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='longest')].inner.generics.where_predicates\" []\n+\n+// @count - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[*]\" 2\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][0]\" '\"l\"'\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][0]\" '\"r\"'\n+\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.mutable\" false\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.mutable\" false\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.mutable\" false\n+// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+\n+pub fn longest<'a>(l: &'a str, r: &'a str) -> &'a str {\n+    if l.len() > r.len() { l } else { r }\n+}"}, {"sha": "096dd7f7a6918814ee8c66bf40795871d47f507c", "filename": "src/test/rustdoc-json/lifetime/outlives.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -0,0 +1,23 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count outlives.json \"$.index[*][?(@.name=='foo')].inner.generics.params[*]\" 3\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates\" []\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[1].name\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].name\" '\"T\"'\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[0].kind.lifetime.outlives\" []\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[1].kind.lifetime.outlives\" [\\\"\\'a\\\"]\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.default\" null\n+// @count - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[0].outlives\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.mutable\" false\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.mutable\" false\n+// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.type\" '{\"inner\": \"T\", \"kind\": \"generic\"}'\n+pub fn foo<'a, 'b: 'a, T: 'b>(_: &'a &'b T) {}"}, {"sha": "486a8e713f811b50a860337df062bd6d204230dd", "filename": "src/test/rustdoc-json/traits/supertrait.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![feature(lang_items)]\n+#![no_core]\n+\n+// @set loud_id = supertrait.json \"$.index[*][?(@.name=='Loud')].id\"\n+pub trait Loud {}\n+\n+// @set very_loud_id = - \"$.index[*][?(@.name=='VeryLoud')].id\"\n+// @count - \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n+// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.inner.id\" $loud_id\n+pub trait VeryLoud: Loud {}\n+\n+// @set sounds_good_id = - \"$.index[*][?(@.name=='SoundsGood')].id\"\n+pub trait SoundsGood {}\n+\n+// @count - \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.inner.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.inner.id\" $sounds_good_id\n+pub trait MetalBand: VeryLoud + SoundsGood {}\n+\n+// @count - \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.inner.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.inner.id\" $sounds_good_id\n+pub trait DnabLatem: SoundsGood + VeryLoud {}"}, {"sha": "c44624666465e7101ad067d0cae9c66e07add7d1", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af446e1d7086d4aeed495f6b03e70009e9424ce4/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=af446e1d7086d4aeed495f6b03e70009e9424ce4", "patch": "@@ -73,7 +73,10 @@ impl CommandKind {\n \n         if let CommandKind::Count = self {\n             if args[2].parse::<usize>().is_err() {\n-                print_err(&format!(\"Third argument to @count must be a valid usize\"), lineno);\n+                print_err(\n+                    &format!(\"Third argument to @count must be a valid usize (got `{}`)\", args[2]),\n+                    lineno,\n+                );\n                 return false;\n             }\n         }\n@@ -277,7 +280,7 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             assert_eq!(\n                 results.len(),\n                 1,\n-                \"Didn't get 1 result for `{}`: got {:?}\",\n+                \"Expected 1 match for `{}` (because of @set): matched to {:?}\",\n                 command.args[3],\n                 results\n             );"}]}