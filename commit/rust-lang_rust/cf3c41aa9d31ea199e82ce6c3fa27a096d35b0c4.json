{"sha": "cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4", "node_id": "C_kwDOAAsO6NoAKGNmM2M0MWFhOWQzMWVhMTk5ZTgyY2U2YzNmYTI3YTA5NmQzNWIwYzQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-12T10:14:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-12T10:14:27Z"}, "message": "Rollup merge of #97970 - dtolnay:terminate, r=joshtriplett\n\nFix Termination impl panic on closed stderr\n\nRepro:\n\n```rust\n#![feature(backtrace)]\n\nuse std::backtrace::Backtrace;\nuse std::io::{self, Write as _};\nuse std::panic::{self, PanicInfo};\n\n#[derive(Debug)]\npub struct Error;\n\nfn panic_hook(panic_info: &PanicInfo) {\n    let backtrace = Backtrace::force_capture();\n    let _ = write!(io::stdout(), \"{}\\n{}\", panic_info, backtrace);\n}\n\nfn main() -> Result<(), Error> {\n    panic::set_hook(Box::new(panic_hook));\n    let stderr = io::stderr();\n    let mut stderr = stderr.lock();\n    while stderr.write_all(b\".\\n\").is_ok() {}\n    Err(Error)\n}\n```\n\n### Before:\n\n```console\n$ target/debug/repro 3>&2 2>&1 1>&3 | head\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\npanicked at 'failed printing to stderr: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\n   0: testing::panic_hook\n             at ./src/main.rs:11:21\n   1: core::ops::function::Fn::call\n             at /git/rust/library/core/src/ops/function.rs:77:5\n   2: std::panicking::rust_panic_with_hook\n   3: std::panicking::begin_panic_handler::{{closure}}\n   4: std::sys_common::backtrace::__rust_end_short_backtrace\n   5: rust_begin_unwind\n   6: core::panicking::panic_fmt\n   7: std::io::stdio::_eprint\n   8: <core::result::Result<!,E> as std::process::Termination>::report\n             at /git/rust/library/std/src/process.rs:2164:9\n   9: <core::result::Result<(),E> as std::process::Termination>::report\n             at /git/rust/library/std/src/process.rs:2148:25\n  10: std::rt::lang_start::{{closure}}\n             at /git/rust/library/std/src/rt.rs:145:18\n  11: std::rt::lang_start_internal\n  12: std::rt::lang_start\n             at /git/rust/library/std/src/rt.rs:144:17\n  13: main\n  14: __libc_start_main\n             at /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n  15: _start\n```\n\n### After:\n\n```console\n$ target/debug/repro 3>&2 2>&1 1>&3 | head\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n```", "tree": {"sha": "0ff67abaea2c2bdb30b57b2a7b5a1013f276d8fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff67abaea2c2bdb30b57b2a7b5a1013f276d8fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipbyDCRBK7hj4Ov3rIwAAp4EIAILxDDLwu7pjEHGFwMhMaX47\nifUlUkfMdeXLEu7BynGWCGLgIv0+t+swEXB2IXaknUYTTlmTKQj+9fvZxZ6nsL4Z\n8Wx8+00YdZ90eJEQpjAQ7bUZRyY/xzEWf9g1iiRXD7PI3JH/SioBQZ8jFdoxpDSM\nGqpNPZ+H3ZmIqZNed1yZrSClB02qIteUkM/+zc04hZqStHa4ShmNmyKuLH+mR4pG\nfDHV1Cc7/sGLYPUgNgJ5nmXZcdbB0x0GJtV8x0an/gD5BHD7224fXlsizLM/72U9\nv2wipONs7zUiyXAlXgH5G9PnmaxuyUbuQ+7hOvsnCXSaQfCi4hSI7Lf4O9GBRlY=\n=pB9A\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ff67abaea2c2bdb30b57b2a7b5a1013f276d8fe\nparent b2172b7a5340f9f23d02cfe532a6fd1e363881ea\nparent 563aa12a22a53d277bfb49083c1a4fe0b8b8286c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655028867 +0200\ncommitter GitHub <noreply@github.com> 1655028867 +0200\n\nRollup merge of #97970 - dtolnay:terminate, r=joshtriplett\n\nFix Termination impl panic on closed stderr\n\nRepro:\n\n```rust\n#![feature(backtrace)]\n\nuse std::backtrace::Backtrace;\nuse std::io::{self, Write as _};\nuse std::panic::{self, PanicInfo};\n\n#[derive(Debug)]\npub struct Error;\n\nfn panic_hook(panic_info: &PanicInfo) {\n    let backtrace = Backtrace::force_capture();\n    let _ = write!(io::stdout(), \"{}\\n{}\", panic_info, backtrace);\n}\n\nfn main() -> Result<(), Error> {\n    panic::set_hook(Box::new(panic_hook));\n    let stderr = io::stderr();\n    let mut stderr = stderr.lock();\n    while stderr.write_all(b\".\\n\").is_ok() {}\n    Err(Error)\n}\n```\n\n### Before:\n\n```console\n$ target/debug/repro 3>&2 2>&1 1>&3 | head\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\npanicked at 'failed printing to stderr: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\n   0: testing::panic_hook\n             at ./src/main.rs:11:21\n   1: core::ops::function::Fn::call\n             at /git/rust/library/core/src/ops/function.rs:77:5\n   2: std::panicking::rust_panic_with_hook\n   3: std::panicking::begin_panic_handler::{{closure}}\n   4: std::sys_common::backtrace::__rust_end_short_backtrace\n   5: rust_begin_unwind\n   6: core::panicking::panic_fmt\n   7: std::io::stdio::_eprint\n   8: <core::result::Result<!,E> as std::process::Termination>::report\n             at /git/rust/library/std/src/process.rs:2164:9\n   9: <core::result::Result<(),E> as std::process::Termination>::report\n             at /git/rust/library/std/src/process.rs:2148:25\n  10: std::rt::lang_start::{{closure}}\n             at /git/rust/library/std/src/rt.rs:145:18\n  11: std::rt::lang_start_internal\n  12: std::rt::lang_start\n             at /git/rust/library/std/src/rt.rs:144:17\n  13: main\n  14: __libc_start_main\n             at /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n  15: _start\n```\n\n### After:\n\n```console\n$ target/debug/repro 3>&2 2>&1 1>&3 | head\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4", "html_url": "https://github.com/rust-lang/rust/commit/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2172b7a5340f9f23d02cfe532a6fd1e363881ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2172b7a5340f9f23d02cfe532a6fd1e363881ea", "html_url": "https://github.com/rust-lang/rust/commit/b2172b7a5340f9f23d02cfe532a6fd1e363881ea"}, {"sha": "563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "url": "https://api.github.com/repos/rust-lang/rust/commits/563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "html_url": "https://github.com/rust-lang/rust/commit/563aa12a22a53d277bfb49083c1a4fe0b8b8286c"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "e733766741d5e9ccd4fa3442507b6ac8e43a0830", "filename": "library/std/src/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=cf3c41aa9d31ea199e82ce6c3fa27a096d35b0c4", "patch": "@@ -2161,7 +2161,9 @@ impl Termination for ! {\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n-        eprintln!(\"Error: {err:?}\");\n+        // Ignore error if the write fails, for example because stderr is\n+        // already closed. There is not much point panicking at this point.\n+        let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n         ExitCode::FAILURE\n     }\n }"}]}