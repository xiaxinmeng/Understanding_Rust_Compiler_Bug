{"sha": "eb68e27e4c77af3e8fe3883cdf682592e910f3df", "node_id": "C_kwDOAAsO6NoAKGViNjhlMjdlNGM3N2FmM2U4ZmUzODgzY2RmNjgyNTkyZTkxMGYzZGY", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-16T22:46:46Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-20T14:54:02Z"}, "message": "fix rust-lang#101880: suggest let for assignment, and some code refactor", "tree": {"sha": "b0e131c4a19ca7d71ae3a1584b7e65aeb278328a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e131c4a19ca7d71ae3a1584b7e65aeb278328a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb68e27e4c77af3e8fe3883cdf682592e910f3df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb68e27e4c77af3e8fe3883cdf682592e910f3df", "html_url": "https://github.com/rust-lang/rust/commit/eb68e27e4c77af3e8fe3883cdf682592e910f3df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb68e27e4c77af3e8fe3883cdf682592e910f3df/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb376115066d111dbf5f13d5ac2a2dbe8c12add", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb376115066d111dbf5f13d5ac2a2dbe8c12add", "html_url": "https://github.com/rust-lang/rust/commit/dcb376115066d111dbf5f13d5ac2a2dbe8c12add"}], "stats": {"total": 218, "additions": 165, "deletions": 53}, "files": [{"sha": "58853346a92889e8cdca7d8ddaaf34ef3640e9eb", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -524,6 +524,9 @@ struct DiagnosticMetadata<'ast> {\n     /// Used to detect possible `if let` written without `let` and to provide structured suggestion.\n     in_if_condition: Option<&'ast Expr>,\n \n+    /// Used to detect possible new binding written without `let` and to provide structured suggestion.\n+    in_assignment: Option<&'ast Expr>,\n+\n     /// If we are currently in a trait object definition. Used to point at the bounds when\n     /// encountering a struct or enum.\n     current_trait_object: Option<&'ast [ast::GenericBound]>,\n@@ -3905,6 +3908,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_expr(elem, Some(expr));\n                 self.visit_expr(idx);\n             }\n+            ExprKind::Assign(..) => {\n+                let old = self.diagnostic_metadata.in_assignment.replace(expr);\n+                visit::walk_expr(self, expr);\n+                self.diagnostic_metadata.in_assignment = old;\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "5748881d3c58f1892be0e728af33618cc6a1e793", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 53, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -679,7 +679,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n             // If the trait has a single item (which wasn't matched by Levenshtein), suggest it\n             let suggestion = self.get_single_associated_item(&path, &source, is_expected);\n-            self.r.add_typo_suggestion(err, suggestion, ident_span);\n+            if !self.r.add_typo_suggestion(err, suggestion, ident_span) {\n+                fallback = !self.let_binding_suggestion(err, ident_span);\n+            }\n         }\n         fallback\n     }\n@@ -1076,41 +1078,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         // where a brace being opened means a block is being started. Look\n         // ahead for the next text to see if `span` is followed by a `{`.\n         let sm = self.r.session.source_map();\n-        let mut sp = span;\n-        loop {\n-            sp = sm.next_point(sp);\n-            match sm.span_to_snippet(sp) {\n-                Ok(ref snippet) => {\n-                    if snippet.chars().any(|c| !c.is_whitespace()) {\n-                        break;\n-                    }\n-                }\n-                _ => break,\n-            }\n-        }\n+        let sp = sm.span_look_ahead(span, None, Some(50));\n         let followed_by_brace = matches!(sm.span_to_snippet(sp), Ok(ref snippet) if snippet == \"{\");\n         // In case this could be a struct literal that needs to be surrounded\n         // by parentheses, find the appropriate span.\n-        let mut i = 0;\n-        let mut closing_brace = None;\n-        loop {\n-            sp = sm.next_point(sp);\n-            match sm.span_to_snippet(sp) {\n-                Ok(ref snippet) => {\n-                    if snippet == \"}\" {\n-                        closing_brace = Some(span.to(sp));\n-                        break;\n-                    }\n-                }\n-                _ => break,\n-            }\n-            i += 1;\n-            // The bigger the span, the more likely we're incorrect --\n-            // bound it to 100 chars long.\n-            if i > 100 {\n-                break;\n-            }\n-        }\n+        let closing_span = sm.span_look_ahead(span, Some(\"}\"), Some(50));\n+        let closing_brace: Option<Span> = sm\n+            .span_to_snippet(closing_span)\n+            .map_or(None, |s| if s == \"}\" { Some(span.to(closing_span)) } else { None });\n         (followed_by_brace, closing_brace)\n     }\n \n@@ -1727,26 +1702,16 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             }\n                         }\n                         if let Ok(base_snippet) = base_snippet {\n-                            let mut sp = after_colon_sp;\n-                            for _ in 0..100 {\n-                                // Try to find an assignment\n-                                sp = sm.next_point(sp);\n-                                let snippet = sm.span_to_snippet(sp);\n-                                match snippet {\n-                                    Ok(ref x) if x.as_str() == \"=\" => {\n-                                        err.span_suggestion(\n-                                            base_span,\n-                                            \"maybe you meant to write an assignment here\",\n-                                            format!(\"let {}\", base_snippet),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                        show_label = false;\n-                                        break;\n-                                    }\n-                                    Ok(ref x) if x.as_str() == \"\\n\" => break,\n-                                    Err(_) => break,\n-                                    Ok(_) => {}\n-                                }\n+                            // Try to find an assignment\n+                            let eq_span = sm.span_look_ahead(after_colon_sp, Some(\"=\"), Some(50));\n+                            if let Ok(ref snippet) = sm.span_to_snippet(eq_span) && snippet == \"=\" {\n+                                err.span_suggestion(\n+                                    base_span,\n+                                    \"maybe you meant to write an assignment here\",\n+                                    format!(\"let {}\", base_snippet),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                show_label = false;\n                             }\n                         }\n                     }\n@@ -1763,6 +1728,31 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         false\n     }\n \n+    fn let_binding_suggestion(&self, err: &mut Diagnostic, ident_span: Span) -> bool {\n+        // try to give a suggestion for this pattern: `name = 1`, which is common in other languages\n+        let mut added_suggestion = false;\n+        if let Some(Expr { kind: ExprKind::Assign(lhs, _rhs, _), .. }) = self.diagnostic_metadata.in_assignment &&\n+            let ast::ExprKind::Path(None, _) = lhs.kind {\n+                let sm = self.r.session.source_map();\n+                let line_span = sm.span_extend_to_line(ident_span);\n+                let ident_name = sm.span_to_snippet(ident_span).unwrap();\n+                // HACK(chenyukang): make sure ident_name is at the starting of the line to protect against macros\n+                if sm\n+                    .span_to_snippet(line_span)\n+                    .map_or(false, |s| s.trim().starts_with(&ident_name))\n+                {\n+                    err.span_suggestion_verbose(\n+                        ident_span.shrink_to_lo(),\n+                        \"you might have meant to introduce a new binding\",\n+                        \"let \".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    added_suggestion = true;\n+                }\n+            }\n+        added_suggestion\n+    }\n+\n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {\n         let mut result = None;\n         let mut seen_modules = FxHashSet::default();"}, {"sha": "f9566eeee9465949b17e4c133a7b7f3d5d31e1ff", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -877,6 +877,26 @@ impl SourceMap {\n         Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)\n     }\n \n+    /// Returns a new span to check next none-whitespace character or some specified expected character\n+    /// If `expect` is none, the first span of non-whitespace character is returned.\n+    /// If `expect` presented, the first span of the character `expect` is returned\n+    /// Otherwise, the span reached to limit is returned.\n+    pub fn span_look_ahead(&self, span: Span, expect: Option<&str>, limit: Option<usize>) -> Span {\n+        let mut sp = span;\n+        for _ in 0..limit.unwrap_or(100 as usize) {\n+            sp = self.next_point(sp);\n+            if let Ok(ref snippet) = self.span_to_snippet(sp) {\n+                if expect.map_or(false, |es| snippet == es) {\n+                    break;\n+                }\n+                if expect.is_none() && snippet.chars().any(|c| !c.is_whitespace()) {\n+                    break;\n+                }\n+            }\n+        }\n+        sp\n+    }\n+\n     /// Finds the width of the character, either before or after the end of provided span,\n     /// depending on the `forwards` parameter.\n     fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {"}, {"sha": "3a25e25eede62b42ffd190101ee4577543389e8a", "filename": "src/test/ui/suggestions/suggest-let-for-assignment.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.fixed?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+fn main() {\n+    let demo = 1; //~ ERROR cannot find value `demo` in this scope\n+    dbg!(demo); //~ ERROR cannot find value `demo` in this scope\n+\n+    let x = \"x\"; //~ ERROR cannot find value `x` in this scope\n+    println!(\"x: {}\", x); //~ ERROR cannot find value `x` in this scope\n+\n+    if x == \"x\" {\n+        //~^ ERROR cannot find value `x` in this scope\n+        println!(\"x is 1\");\n+    }\n+\n+    let y = 1 + 2; //~ ERROR cannot find value `y` in this scope\n+    println!(\"y: {}\", y); //~ ERROR cannot find value `y` in this scope\n+}"}, {"sha": "67705fe063a79e5e0474fb941cc9a3b155984f6c", "filename": "src/test/ui/suggestions/suggest-let-for-assignment.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.rs?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+fn main() {\n+    demo = 1; //~ ERROR cannot find value `demo` in this scope\n+    dbg!(demo); //~ ERROR cannot find value `demo` in this scope\n+\n+    x = \"x\"; //~ ERROR cannot find value `x` in this scope\n+    println!(\"x: {}\", x); //~ ERROR cannot find value `x` in this scope\n+\n+    if x == \"x\" {\n+        //~^ ERROR cannot find value `x` in this scope\n+        println!(\"x is 1\");\n+    }\n+\n+    y = 1 + 2; //~ ERROR cannot find value `y` in this scope\n+    println!(\"y: {}\", y); //~ ERROR cannot find value `y` in this scope\n+}"}, {"sha": "3f6a3da4be2b35810e007e266d4e0a801b5d1fd6", "filename": "src/test/ui/suggestions/suggest-let-for-assignment.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb68e27e4c77af3e8fe3883cdf682592e910f3df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-let-for-assignment.stderr?ref=eb68e27e4c77af3e8fe3883cdf682592e910f3df", "patch": "@@ -0,0 +1,60 @@\n+error[E0425]: cannot find value `demo` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:4:5\n+   |\n+LL |     demo = 1;\n+   |     ^^^^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let demo = 1;\n+   |     +++\n+\n+error[E0425]: cannot find value `demo` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:5:10\n+   |\n+LL |     dbg!(demo);\n+   |          ^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:7:5\n+   |\n+LL |     x = \"x\";\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = \"x\";\n+   |     +++\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:8:23\n+   |\n+LL |     println!(\"x: {}\", x);\n+   |                       ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:10:8\n+   |\n+LL |     if x == \"x\" {\n+   |        ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:15:5\n+   |\n+LL |     y = 1 + 2;\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let y = 1 + 2;\n+   |     +++\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/suggest-let-for-assignment.rs:16:23\n+   |\n+LL |     println!(\"y: {}\", y);\n+   |                       ^ not found in this scope\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}