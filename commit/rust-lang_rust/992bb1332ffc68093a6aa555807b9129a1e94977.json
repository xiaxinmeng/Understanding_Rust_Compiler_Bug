{"sha": "992bb1332ffc68093a6aa555807b9129a1e94977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmJiMTMzMmZmYzY4MDkzYTZhYTU1NTgwN2I5MTI5YTFlOTQ5Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-12T07:18:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-12T07:18:15Z"}, "message": "Auto merge of #33306 - vadixidav:master, r=alexcrichton\n\nadd implementation of Ord for Cell<T> and RefCell<T> where T: Ord\n\nRaised this in issue #33305.", "tree": {"sha": "3cee66be4232ca80cf03f5bcf0ccb02837ef4d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cee66be4232ca80cf03f5bcf0ccb02837ef4d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992bb1332ffc68093a6aa555807b9129a1e94977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992bb1332ffc68093a6aa555807b9129a1e94977", "html_url": "https://github.com/rust-lang/rust/commit/992bb1332ffc68093a6aa555807b9129a1e94977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992bb1332ffc68093a6aa555807b9129a1e94977/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1ece6fd8e9980501556a3c85365c7e29202975", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1ece6fd8e9980501556a3c85365c7e29202975", "html_url": "https://github.com/rust-lang/rust/commit/ed1ece6fd8e9980501556a3c85365c7e29202975"}, {"sha": "4dcb63707eae97032254c18204b0f64b002b9cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcb63707eae97032254c18204b0f64b002b9cca", "html_url": "https://github.com/rust-lang/rust/commit/4dcb63707eae97032254c18204b0f64b002b9cca"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "4929088201deaa8f7400f634e4243b629d67733f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/992bb1332ffc68093a6aa555807b9129a1e94977/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992bb1332ffc68093a6aa555807b9129a1e94977/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=992bb1332ffc68093a6aa555807b9129a1e94977", "patch": "@@ -145,7 +145,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use clone::Clone;\n-use cmp::{PartialEq, Eq};\n+use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use default::Default;\n use marker::{Copy, Send, Sync, Sized, Unsize};\n use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n@@ -279,6 +279,42 @@ impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n #[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n impl<T:Eq + Copy> Eq for Cell<T> {}\n \n+#[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n+impl<T:PartialOrd + Copy> PartialOrd for Cell<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Cell<T>) -> Option<Ordering> {\n+        self.get().partial_cmp(&other.get())\n+    }\n+\n+    #[inline]\n+    fn lt(&self, other: &Cell<T>) -> bool {\n+        self.get() < other.get()\n+    }\n+\n+    #[inline]\n+    fn le(&self, other: &Cell<T>) -> bool {\n+        self.get() <= other.get()\n+    }\n+\n+    #[inline]\n+    fn gt(&self, other: &Cell<T>) -> bool {\n+        self.get() > other.get()\n+    }\n+\n+    #[inline]\n+    fn ge(&self, other: &Cell<T>) -> bool {\n+        self.get() >= other.get()\n+    }\n+}\n+\n+#[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n+impl<T:Ord + Copy> Ord for Cell<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Cell<T>) -> Ordering {\n+        self.get().cmp(&other.get())\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -514,6 +550,42 @@ impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n #[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n \n+#[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n+impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n+        self.borrow().partial_cmp(&*other.borrow())\n+    }\n+\n+    #[inline]\n+    fn lt(&self, other: &RefCell<T>) -> bool {\n+        *self.borrow() < *other.borrow()\n+    }\n+\n+    #[inline]\n+    fn le(&self, other: &RefCell<T>) -> bool {\n+        *self.borrow() <= *other.borrow()\n+    }\n+\n+    #[inline]\n+    fn gt(&self, other: &RefCell<T>) -> bool {\n+        *self.borrow() > *other.borrow()\n+    }\n+\n+    #[inline]\n+    fn ge(&self, other: &RefCell<T>) -> bool {\n+        *self.borrow() >= *other.borrow()\n+    }\n+}\n+\n+#[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n+impl<T: ?Sized + Ord> Ord for RefCell<T> {\n+    #[inline]\n+    fn cmp(&self, other: &RefCell<T>) -> Ordering {\n+        self.borrow().cmp(&*other.borrow())\n+    }\n+}\n+\n struct BorrowRef<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }"}]}