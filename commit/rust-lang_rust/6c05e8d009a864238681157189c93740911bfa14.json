{"sha": "6c05e8d009a864238681157189c93740911bfa14", "node_id": "C_kwDOAAsO6NoAKDZjMDVlOGQwMDlhODY0MjM4NjgxMTU3MTg5YzkzNzQwOTExYmZhMTQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-08T19:43:18Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-13T22:27:40Z"}, "message": "Add bound_fn_sig", "tree": {"sha": "375aae41f2e23ca3aae9798dd47194cdf9bb9f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/375aae41f2e23ca3aae9798dd47194cdf9bb9f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c05e8d009a864238681157189c93740911bfa14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c05e8d009a864238681157189c93740911bfa14", "html_url": "https://github.com/rust-lang/rust/commit/6c05e8d009a864238681157189c93740911bfa14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c05e8d009a864238681157189c93740911bfa14/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92248ab9f2045c5a85700b59176bc850caaa3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92248ab9f2045c5a85700b59176bc850caaa3ef", "html_url": "https://github.com/rust-lang/rust/commit/c92248ab9f2045c5a85700b59176bc850caaa3ef"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "2a5b7e936ca78937419070237066af23c66b7e5e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -1385,8 +1385,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = EarlyBinder(self.tcx.fn_sig(*did1)).subst(self.tcx, substs1);\n-                let sig2 = EarlyBinder(self.tcx.fn_sig(*did2)).subst(self.tcx, substs2);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(&sig1, &sig2);\n                 let path1 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did1, substs1));\n                 let path2 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did2, substs2));\n@@ -1397,7 +1397,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnPtr(sig2)) => {\n-                let sig1 = EarlyBinder(self.tcx.fn_sig(*did1)).subst(self.tcx, substs1);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n                 let mut values = self.cmp_fn_sig(&sig1, sig2);\n                 values.0.push_highlighted(format!(\n                     \" {{{}}}\",\n@@ -1407,7 +1407,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnPtr(sig1), ty::FnDef(did2, substs2)) => {\n-                let sig2 = EarlyBinder(self.tcx.fn_sig(*did2)).subst(self.tcx, substs2);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(sig1, &sig2);\n                 values.1.push_normal(format!(\n                     \" {{{}}}\","}, {"sha": "d187146476ab4e9f504bf165693b7b8a188cd608", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -2749,10 +2749,9 @@ impl<'tcx> ty::Instance<'tcx> {\n                 // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping\n                 // track of a polymorphization `ParamEnv` to allow normalizing later.\n                 let mut sig = match *ty.kind() {\n-                    ty::FnDef(def_id, substs) => EarlyBinder(\n-                        tcx.normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id)),\n-                    )\n-                    .subst(tcx, substs),\n+                    ty::FnDef(def_id, substs) => tcx\n+                        .normalize_erasing_regions(tcx.param_env(def_id), tcx.bound_fn_sig(def_id))\n+                        .subst(tcx, substs),\n                     _ => unreachable!(),\n                 };\n "}, {"sha": "e680250e7b10956db15bf405f75ab595e7f9b07a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -589,7 +589,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\")\")\n             }\n             ty::FnDef(def_id, substs) => {\n-                let sig = EarlyBinder(self.tcx().fn_sig(def_id)).subst(self.tcx(), substs);\n+                let sig = self.tcx().bound_fn_sig(def_id).subst(self.tcx(), substs);\n                 p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),"}, {"sha": "2c8cd4f933d0444a1b527ad4df6ade630b6f46a7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -860,6 +860,27 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     }\n }\n \n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        self.try_map_bound(|ty| ty.try_fold_with(folder))\n+    }\n+\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_bound(|ty| ty.try_fold_with(folder))\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.as_ref().0.visit_with(visitor)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.as_ref().0.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,"}, {"sha": "ca8528b3350d2e5272ec26bb0b5f825ca6eabfbe", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -2180,7 +2180,7 @@ impl<'tcx> Ty<'tcx> {\n \n     pub fn fn_sig(self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {\n         match self.kind() {\n-            FnDef(def_id, substs) => EarlyBinder(tcx.fn_sig(*def_id)).subst(tcx, substs),\n+            FnDef(def_id, substs) => tcx.bound_fn_sig(*def_id).subst(tcx, substs),\n             FnPtr(f) => *f,\n             Error(_) => {\n                 // ignore errors (#54954)"}, {"sha": "344ae963c14fa81f283d730c713739749021cbcb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -596,6 +596,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn bound_type_of(self, def_id: DefId) -> EarlyBinder<Ty<'tcx>> {\n         EarlyBinder(self.type_of(def_id))\n     }\n+\n+    pub fn bound_fn_sig(self, def_id: DefId) -> EarlyBinder<ty::PolyFnSig<'tcx>> {\n+        EarlyBinder(self.fn_sig(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "012ce730755755e8d85f9604152e7895d959e748", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ConstKind, EarlyBinder, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -260,7 +260,7 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                let fn_sig = EarlyBinder(self.tcx.fn_sig(def_id)).subst(self.tcx, substs);\n+                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n \n                 return Some(CallSite {\n                     callee,"}, {"sha": "016b3bc098073c68b11b6c9ece9b49614b403808", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -151,7 +151,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     } else {\n         InternalSubsts::identity_for_item(tcx, def_id)\n     };\n-    let sig = EarlyBinder(tcx.fn_sig(def_id)).subst(tcx, substs);\n+    let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n     let sig = tcx.erase_late_bound_regions(sig);\n     let span = tcx.def_span(def_id);\n \n@@ -343,7 +343,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n         let substs = tcx.mk_substs_trait(self_ty, &[]);\n-        let sig = EarlyBinder(tcx.fn_sig(def_id)).subst(tcx, substs);\n+        let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n "}, {"sha": "663a644a9e72790475e588809494c53bc99fa0e1", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -2693,7 +2693,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_ref.def_id,\n         )?;\n \n-        let fn_sig = EarlyBinder(tcx.fn_sig(assoc.def_id)).subst(\n+        let fn_sig = tcx.bound_fn_sig(assoc.def_id).subst(\n             tcx,\n             trait_ref.substs.extend_to(tcx, assoc.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );"}, {"sha": "0a84d41b4f31caa0cf99b50ecd5fb750761dd27a", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n@@ -339,7 +339,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let (fn_sig, def_id) = match *callee_ty.kind() {\n             ty::FnDef(def_id, subst) => {\n-                let fn_sig = EarlyBinder(self.tcx.fn_sig(def_id)).subst(self.tcx, subst);\n+                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, subst);\n \n                 // Unit testing: function items annotated with\n                 // `#[rustc_evaluate_where_clauses]` trigger special output"}, {"sha": "06304d8d7e72d6080931bf3373782212c255af9f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -265,9 +265,8 @@ fn compare_predicate_entailment<'tcx>(\n         let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n-        // First liberate late bound regions and subst placeholders\n-        let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n-        let trait_sig = EarlyBinder(trait_sig).subst(tcx, trait_to_placeholder_substs);\n+        let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n+        let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n         // Add the resulting inputs and output as well-formed."}, {"sha": "501ce31557ddab1a2ff30364fd5dc3389484b1ab", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -1044,8 +1044,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let (sig, did, substs) = match (&expected.kind(), &found.kind()) {\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = EarlyBinder(self.tcx.fn_sig(*did1)).subst(self.tcx, substs1);\n-                let sig2 = EarlyBinder(self.tcx.fn_sig(*did2)).subst(self.tcx, substs2);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 if sig1 != sig2 {\n                     return;\n                 }\n@@ -1056,7 +1056,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (sig1, *did1, substs1)\n             }\n             (ty::FnDef(did, substs), ty::FnPtr(sig2)) => {\n-                let sig1 = EarlyBinder(self.tcx.fn_sig(*did)).subst(self.tcx, substs);\n+                let sig1 = self.tcx.bound_fn_sig(*did).subst(self.tcx, substs);\n                 if sig1 != *sig2 {\n                     return;\n                 }"}, {"sha": "7992460f5464eef6073ae7005dc3123d0d59304a", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{self, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind, Ty};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n@@ -460,9 +460,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n-        let sig = self.tcx.fn_sig(def_id);\n+        let sig = self.tcx.bound_fn_sig(def_id);\n \n-        let sig = EarlyBinder(sig).subst(self.tcx, all_substs);\n+        let sig = sig.subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, sig={:?}\", sig);\n \n         let sig = self.replace_bound_vars_with_fresh_vars(sig);"}, {"sha": "cb359434fdb9a864ddeaaa92c2d5c37573241895", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, EarlyBinder, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -460,8 +460,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // N.B., instantiate late-bound regions first so that\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n-        let fn_sig = tcx.fn_sig(def_id);\n-        let fn_sig = EarlyBinder(fn_sig).subst(self.tcx, substs);\n+        let fn_sig = tcx.bound_fn_sig(def_id);\n+        let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig).0;\n \n         let InferOk { value, obligations: o } = if is_op {"}, {"sha": "0861d121a1f0e75cfad3fd2c386bb5b8d2a8dc9c", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -901,10 +901,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> bool {\n         match method.kind {\n             ty::AssocKind::Fn => {\n-                let fty = self.tcx.fn_sig(method.def_id);\n+                let fty = self.tcx.bound_fn_sig(method.def_id);\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n-                    let fty = EarlyBinder(fty).subst(self.tcx, substs);\n+                    let fty = fty.subst(self.tcx, substs);\n                     let (fty, _) =\n                         self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n \n@@ -1771,7 +1771,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn xform_method_sig(&self, method: DefId, substs: SubstsRef<'tcx>) -> ty::FnSig<'tcx> {\n-        let fn_sig = self.tcx.fn_sig(method);\n+        let fn_sig = self.tcx.bound_fn_sig(method);\n         debug!(?fn_sig);\n \n         assert!(!substs.has_escaping_bound_vars());\n@@ -1785,7 +1785,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         assert_eq!(substs.len(), generics.parent_count as usize);\n \n         let xform_fn_sig = if generics.params.is_empty() {\n-            EarlyBinder(fn_sig).subst(self.tcx, substs)\n+            fn_sig.subst(self.tcx, substs)\n         } else {\n             let substs = InternalSubsts::for_item(self.tcx, method, |param, _| {\n                 let i = param.index as usize;\n@@ -1803,7 +1803,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     }\n                 }\n             });\n-            EarlyBinder(fn_sig).subst(self.tcx, substs)\n+            fn_sig.subst(self.tcx, substs)\n         };\n \n         self.erase_late_bound_regions(xform_fn_sig)"}, {"sha": "8d99f3002b8794d8f38b8ba37395a40b7b90ae1b", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c05e8d009a864238681157189c93740911bfa14/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c05e8d009a864238681157189c93740911bfa14/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=6c05e8d009a864238681157189c93740911bfa14", "patch": "@@ -13,7 +13,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, EarlyBinder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n+    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -520,7 +520,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         let ty = cx.typeck_results().expr_ty_adjusted(expr).peel_refs();\n         match *ty.kind() {\n             ty::Closure(_, subs) => Some(ExprFnSig::Closure(subs.as_closure().sig())),\n-            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(EarlyBinder(cx.tcx.fn_sig(id)).subst(cx.tcx, subs))),\n+            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs))),\n             ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n             ty::Dynamic(bounds, _) => {\n                 let lang_items = cx.tcx.lang_items();"}]}