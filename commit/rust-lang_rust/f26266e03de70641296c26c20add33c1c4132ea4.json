{"sha": "f26266e03de70641296c26c20add33c1c4132ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNjI2NmUwM2RlNzA2NDEyOTZjMjZjMjBhZGQzM2MxYzQxMzJlYTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-13T23:41:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-13T23:52:03Z"}, "message": "rustc: Refactor codemap::emit_* functions\n\nA codemap is only needed when we have a span so put them both into the option.", "tree": {"sha": "572e4fa4ba9cb8dc17fb2772e1ca5bc4c60d288f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572e4fa4ba9cb8dc17fb2772e1ca5bc4c60d288f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26266e03de70641296c26c20add33c1c4132ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26266e03de70641296c26c20add33c1c4132ea4", "html_url": "https://github.com/rust-lang/rust/commit/f26266e03de70641296c26c20add33c1c4132ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26266e03de70641296c26c20add33c1c4132ea4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f535940bd55f8d659a5a26370665c5567c6ba55e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f535940bd55f8d659a5a26370665c5567c6ba55e", "html_url": "https://github.com/rust-lang/rust/commit/f535940bd55f8d659a5a26370665c5567c6ba55e"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "479fd97083cc45231a2f0b49c27caa82f943561a", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=f26266e03de70641296c26c20add33c1c4132ea4", "patch": "@@ -65,19 +65,19 @@ type session = @{targ_cfg: @config,\n \n impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        codemap::emit_error(some(sp), msg, self.parse_sess.cm);\n+        codemap::emit_error(some((self.parse_sess.cm, sp)), msg);\n         fail;\n     }\n     fn fatal(msg: str) -> ! {\n-        codemap::emit_error(none, msg, self.parse_sess.cm);\n+        codemap::emit_error(none, msg);\n         fail;\n     }\n     fn span_err(sp: span, msg: str) {\n-        codemap::emit_error(some(sp), msg, self.parse_sess.cm);\n+        codemap::emit_error(some((self.parse_sess.cm, sp)), msg);\n         self.err_count += 1u;\n     }\n     fn err(msg: str) {\n-        codemap::emit_error(none, msg, self.parse_sess.cm);\n+        codemap::emit_error(none, msg);\n         self.err_count += 1u;\n     }\n     fn has_errors() -> bool { self.err_count > 0u }\n@@ -87,16 +87,16 @@ impl session for session {\n         }\n     }\n     fn span_warn(sp: span, msg: str) {\n-        codemap::emit_warning(some(sp), msg, self.parse_sess.cm);\n+        codemap::emit_warning(some((self.parse_sess.cm, sp)), msg);\n     }\n     fn warn(msg: str) {\n-        codemap::emit_warning(none, msg, self.parse_sess.cm);\n+        codemap::emit_warning(none, msg);\n     }\n     fn span_note(sp: span, msg: str) {\n-        codemap::emit_note(some(sp), msg, self.parse_sess.cm);\n+        codemap::emit_note(some((self.parse_sess.cm, sp)), msg);\n     }\n     fn note(msg: str) {\n-        codemap::emit_note(none, msg, self.parse_sess.cm);\n+        codemap::emit_note(none, msg);\n     }\n     fn span_bug(sp: span, msg: str) -> ! {\n         self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);"}, {"sha": "a4864c647754e40ae0aa96bb3bf50b59fc1a6a8d", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=f26266e03de70641296c26c20add33c1c4132ea4", "patch": "@@ -136,26 +136,28 @@ fn print_diagnostic(topic: str, t: diagnostictype, msg: str) {\n     io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n }\n \n-fn emit_diagnostic(sp: option::t<span>, msg: str, t: diagnostictype,\n-                   cm: codemap) {\n+fn emit_diagnostic(cmsp: option<(codemap, span)>, msg: str,\n+                   t: diagnostictype) {\n     let ss = \"\";\n     let maybe_lines: option::t<@file_lines> = none;\n-    alt sp {\n-      some(ssp) {\n-        ss = span_to_str(ssp, cm);\n-        maybe_lines = some(span_to_lines(ssp, cm));\n+    alt cmsp {\n+      some((cm, sp)) {\n+        ss = span_to_str(sp, cm);\n+        maybe_lines = some(span_to_lines(sp, cm));\n       }\n       none. { }\n     }\n     print_diagnostic(ss, t, msg);\n-    maybe_highlight_lines(sp, cm, maybe_lines);\n+    maybe_highlight_lines(cmsp, maybe_lines);\n }\n \n-fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n+fn maybe_highlight_lines(cmsp: option<(codemap, span)>,\n                          maybe_lines: option::t<@file_lines>) {\n \n     alt maybe_lines {\n       some(lines) {\n+        let (cm, sp) = option::get(cmsp);\n+\n         // If we're not looking at a real file then we can't re-open it to\n         // pull out the lines\n         if lines.name == \"-\" { ret; }\n@@ -165,7 +167,7 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n         let file = alt io::read_whole_file_str(lines.name) {\n           result::ok(file) { file }\n           result::err(e) {\n-            emit_error(none, e, cm);\n+            emit_error(none, e);\n             fail;\n           }\n         };\n@@ -199,7 +201,7 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n \n         // If there's one line at fault we can easily point to the problem\n         if vec::len(lines.lines) == 1u {\n-            let lo = lookup_char_pos(cm, option::get(sp).lo);\n+            let lo = lookup_char_pos(cm, sp.lo);\n             let digits = 0u;\n             let num = (lines.lines[0] + 1u) / 10u;\n \n@@ -212,7 +214,7 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n             while left > 0u { str::push_char(s, ' '); left -= 1u; }\n \n             s += \"^\";\n-            let hi = lookup_char_pos(cm, option::get(sp).hi);\n+            let hi = lookup_char_pos(cm, sp.hi);\n             if hi.col != lo.col {\n                 // the ^ already takes up one space\n                 let width = hi.col - lo.col - 1u;\n@@ -225,14 +227,14 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n     }\n }\n \n-fn emit_warning(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, warning, cm);\n+fn emit_warning(cmsp: option<(codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, warning);\n }\n-fn emit_error(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, error, cm);\n+fn emit_error(cmsp: option<(codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, error);\n }\n-fn emit_note(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, note, cm);\n+fn emit_note(cmsp: option<(codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, note);\n }\n \n type file_lines = {name: str, lines: [uint]};"}, {"sha": "cb247e12a40abded2eb5369ebab60d6452c28d50", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=f26266e03de70641296c26c20add33c1c4132ea4", "patch": "@@ -47,8 +47,8 @@ impl reader for reader {\n         } else { self.curr = -1 as char; }\n     }\n     fn err(m: str) {\n-        codemap::emit_error(some(ast_util::mk_sp(self.chpos, self.chpos)),\n-                            m, self.cm);\n+        codemap::emit_error(\n+            some((self.cm, ast_util::mk_sp(self.chpos, self.chpos))), m);\n     }\n }\n "}, {"sha": "ad8eb0d517501095da071e6a0a2c7d950ff93daf", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26266e03de70641296c26c20add33c1c4132ea4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f26266e03de70641296c26c20add33c1c4132ea4", "patch": "@@ -71,11 +71,11 @@ impl parser for parser {\n         self.span_fatal(self.span, m);\n     }\n     fn span_fatal(sp: span, m: str) -> ! {\n-        codemap::emit_error(some(sp), m, self.sess.cm);\n+        codemap::emit_error(some((self.sess.cm, sp)), m);\n         fail;\n     }\n     fn warn(m: str) {\n-        codemap::emit_warning(some(self.span), m, self.sess.cm);\n+        codemap::emit_warning(some((self.sess.cm, self.span)), m);\n     }\n     fn get_str(i: token::str_num) -> str {\n         interner::get(*self.reader.interner, i)\n@@ -92,7 +92,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n         src\n       }\n       result::err(e) {\n-        codemap::emit_error(none, e, sess.cm);\n+        codemap::emit_error(none, e);\n         fail;\n       }\n     };\n@@ -2525,8 +2525,7 @@ fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n     } else if str::ends_with(input, \".rs\") {\n         parse_crate_from_source_file(input, cfg, sess)\n     } else {\n-        codemap::emit_error(none, \"unknown input file type: \" + input,\n-                            sess.cm);\n+        codemap::emit_error(none, \"unknown input file type: \" + input);\n         fail\n     }\n }"}]}