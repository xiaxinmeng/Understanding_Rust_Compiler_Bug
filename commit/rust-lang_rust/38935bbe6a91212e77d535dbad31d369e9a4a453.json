{"sha": "38935bbe6a91212e77d535dbad31d369e9a4a453", "node_id": "C_kwDOAAsO6NoAKDM4OTM1YmJlNmE5MTIxMmU3N2Q1MzVkYmFkMzFkMzY5ZTlhNGE0NTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-06T07:08:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-06T07:12:52Z"}, "message": "Report number of delayed bugs properly with -Ztreat-err-as-bug", "tree": {"sha": "6a651a397616b0b53ee9b08df1401ff1abf488bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a651a397616b0b53ee9b08df1401ff1abf488bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38935bbe6a91212e77d535dbad31d369e9a4a453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38935bbe6a91212e77d535dbad31d369e9a4a453", "html_url": "https://github.com/rust-lang/rust/commit/38935bbe6a91212e77d535dbad31d369e9a4a453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38935bbe6a91212e77d535dbad31d369e9a4a453/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "html_url": "https://github.com/rust-lang/rust/commit/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "37ff6dcff7d795c26efaef3eadc111c9ad5ed81d", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/38935bbe6a91212e77d535dbad31d369e9a4a453/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38935bbe6a91212e77d535dbad31d369e9a4a453/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=38935bbe6a91212e77d535dbad31d369e9a4a453", "patch": "@@ -1250,14 +1250,14 @@ impl HandlerInner {\n \n     fn treat_err_as_bug(&self) -> bool {\n         self.flags.treat_err_as_bug.map_or(false, |c| {\n-            self.err_count()\n-                + self.lint_err_count\n-                + self.delayed_span_bugs.len()\n-                + self.delayed_good_path_bugs.len()\n-                >= c.get()\n+            self.err_count() + self.lint_err_count + self.delayed_bug_count() >= c.get()\n         })\n     }\n \n+    fn delayed_bug_count(&self) -> usize {\n+        self.delayed_span_bugs.len() + self.delayed_good_path_bugs.len()\n+    }\n+\n     fn print_error_count(&mut self, registry: &Registry) {\n         self.emit_stashed_diagnostics();\n \n@@ -1412,12 +1412,7 @@ impl HandlerInner {\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n         if self.flags.treat_err_as_bug.map_or(false, |c| {\n-            self.err_count()\n-                + self.lint_err_count\n-                + self.delayed_span_bugs.len()\n-                + self.delayed_good_path_bugs.len()\n-                + 1\n-                >= c.get()\n+            self.err_count() + self.lint_err_count + self.delayed_bug_count() + 1 >= c.get()\n         }) {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n@@ -1518,14 +1513,24 @@ impl HandlerInner {\n         if self.treat_err_as_bug() {\n             match (\n                 self.err_count() + self.lint_err_count,\n+                self.delayed_bug_count(),\n                 self.flags.treat_err_as_bug.map(|c| c.get()).unwrap_or(0),\n             ) {\n-                (1, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n-                (0 | 1, _) => {}\n-                (count, as_bug) => panic!(\n-                    \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n-                    count, as_bug,\n-                ),\n+                (1, 0, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n+                (0, 1, 1) => panic!(\"aborting due delayed bug with `-Z treat-err-as-bug=1`\"),\n+                (count, delayed_count, as_bug) => {\n+                    if delayed_count > 0 {\n+                        panic!(\n+                            \"aborting after {} errors and {} delayed bugs due to `-Z treat-err-as-bug={}`\",\n+                            count, delayed_count, as_bug,\n+                        )\n+                    } else {\n+                        panic!(\n+                            \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n+                            count, as_bug,\n+                        )\n+                    }\n+                }\n             }\n         }\n     }"}]}