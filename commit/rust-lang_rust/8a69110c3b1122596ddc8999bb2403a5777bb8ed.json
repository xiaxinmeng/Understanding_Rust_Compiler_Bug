{"sha": "8a69110c3b1122596ddc8999bb2403a5777bb8ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNjkxMTBjM2IxMTIyNTk2ZGRjODk5OWJiMjQwM2E1Nzc3YmI4ZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T13:49:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T13:49:35Z"}, "message": "Auto merge of #22895 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "9fb065fb1a4875074ca1a9795c0136d0f44da2a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb065fb1a4875074ca1a9795c0136d0f44da2a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a69110c3b1122596ddc8999bb2403a5777bb8ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a69110c3b1122596ddc8999bb2403a5777bb8ed", "html_url": "https://github.com/rust-lang/rust/commit/8a69110c3b1122596ddc8999bb2403a5777bb8ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a69110c3b1122596ddc8999bb2403a5777bb8ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8d83140618721e7b72a78f2e53a08e71e1d4cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8d83140618721e7b72a78f2e53a08e71e1d4cb", "html_url": "https://github.com/rust-lang/rust/commit/6f8d83140618721e7b72a78f2e53a08e71e1d4cb"}, {"sha": "077595943193ed8f0ae81e93a8e06781f79351ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/077595943193ed8f0ae81e93a8e06781f79351ec", "html_url": "https://github.com/rust-lang/rust/commit/077595943193ed8f0ae81e93a8e06781f79351ec"}], "stats": {"total": 574, "additions": 247, "deletions": 327}, "files": [{"sha": "4993dd140d335daac402fd10c2bff54192bd3373", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -20,7 +20,6 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(env)]\n #![feature(core)]\n \n #![deny(warnings)]"}, {"sha": "07a90959deb693b30fbf629a50d950c9c52cc03c", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -536,7 +536,7 @@ use std::thread::Thread;\n \n fn main() {\n     let numbers = vec![1, 2, 3];\n-    \n+\n     let guards: Vec<_> = (0..3).map(|i| {\n         Thread::scoped(move || {\n             println!(\"{}\", numbers[i]);\n@@ -565,7 +565,7 @@ while retaining safety. The answer is iterators:\n ```{rust}\n let vec = vec![1, 2, 3];\n \n-for x in vec.iter() {\n+for x in &vec {\n     println!(\"{}\", x);\n }\n ```"}, {"sha": "2f047d2c173f82a5d23b93f4cc2c11624f219644", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -3765,9 +3765,9 @@ An example of creating and calling a closure:\n ```rust\n let captured_var = 10;\n \n-let closure_no_args = |&:| println!(\"captured_var={}\", captured_var);\n+let closure_no_args = || println!(\"captured_var={}\", captured_var);\n \n-let closure_args = |&: arg: i32| -> i32 {\n+let closure_args = |arg: i32| -> i32 {\n   println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };"}, {"sha": "6aa4bba6fa60cff4fb36b0fa498182fc671a0400", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -70,10 +70,10 @@ If you've got Rust installed, you can open up a shell, and type this:\n $ rustc --version\n ```\n \n-You should see some output that looks something like this:\n+You should see the version number, commit hash, commit date and build date:\n \n ```bash\n-rustc 1.0.0-nightly (f11f3e7ba 2015-01-04 20:02:14 +0000)\n+rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n ```\n \n If you did, Rust has been installed successfully! Congrats!"}, {"sha": "a093b97eefbc4b34cbbd31e3eefee5c547ef0eae", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -71,8 +71,8 @@ extern crate rustc;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TokenTree, TtToken};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n-use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n+use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc::plugin::Registry;\n \n fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n@@ -107,7 +107,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacExpr::new(cx.expr_uint(sp, total))\n+    MacEager::expr(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]\n@@ -183,7 +183,7 @@ with\n [`syntax::print::pprust::*_to_string`](http://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n \n The example above produced an integer literal using\n-[`AstBuilder::expr_uint`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_uint).\n+[`AstBuilder::expr_usize`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_usize).\n As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n [quasiquote macros](../syntax/ext/quote/index.html).  They are undocumented and\n very rough around the edges.  However, the implementation may be a good"}, {"sha": "4c9e8f47d0eb2f04d0279642a405f3345295e6d4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -2874,10 +2874,10 @@ pub mod order {\n     use super::Iterator;\n \n     /// Compare `a` and `b` for equality using `Eq`\n-    pub fn equals<A, T, S>(mut a: T, mut b: S) -> bool where\n+    pub fn equals<A, L, R>(mut a: L, mut b: R) -> bool where\n         A: Eq,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+        L: Iterator<Item=A>,\n+        R: Iterator<Item=A>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2889,10 +2889,10 @@ pub mod order {\n     }\n \n     /// Order `a` and `b` lexicographically using `Ord`\n-    pub fn cmp<A, T, S>(mut a: T, mut b: S) -> cmp::Ordering where\n+    pub fn cmp<A, L, R>(mut a: L, mut b: R) -> cmp::Ordering where\n         A: Ord,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+        L: Iterator<Item=A>,\n+        R: Iterator<Item=A>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2908,10 +2908,8 @@ pub mod order {\n     }\n \n     /// Order `a` and `b` lexicographically using `PartialOrd`\n-    pub fn partial_cmp<A, T, S>(mut a: T, mut b: S) -> Option<cmp::Ordering> where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn partial_cmp<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> Option<cmp::Ordering> where\n+        L::Item: PartialOrd<R::Item>\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2927,10 +2925,8 @@ pub mod order {\n     }\n \n     /// Compare `a` and `b` for equality (Using partial equality, `PartialEq`)\n-    pub fn eq<A, B, L, R>(mut a: L, mut b: R) -> bool where\n-        A: PartialEq<B>,\n-        L: Iterator<Item=A>,\n-        R: Iterator<Item=B>,\n+    pub fn eq<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialEq<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2942,10 +2938,8 @@ pub mod order {\n     }\n \n     /// Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)\n-    pub fn ne<A, B, L, R>(mut a: L, mut b: R) -> bool where\n-        A: PartialEq<B>,\n-        L: Iterator<Item=A>,\n-        R: Iterator<Item=B>,\n+    pub fn ne<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialEq<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2957,10 +2951,8 @@ pub mod order {\n     }\n \n     /// Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn lt<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn lt<R: Iterator, L: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2973,10 +2965,8 @@ pub mod order {\n     }\n \n     /// Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn le<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn le<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2989,10 +2979,8 @@ pub mod order {\n     }\n \n     /// Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn gt<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn gt<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -3005,10 +2993,8 @@ pub mod order {\n     }\n \n     /// Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn ge<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn ge<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {"}, {"sha": "d0105bb65776eb6d216ba43580b2f768bbd41976", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -174,7 +174,6 @@\n #![feature(core)]\n #![feature(old_io)]\n #![feature(std_misc)]\n-#![feature(env)]\n \n use std::boxed;\n use std::cell::RefCell;"}, {"sha": "aa51320ee7f43ee0c861beeedfb56c76f1b0f911", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -31,7 +31,6 @@\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n-#![feature(env)]\n #![feature(old_path)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "0c9f9d2a5301aa2b94caf89aca8fba87f6c10006", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -257,7 +257,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             }\n           }\n           (Ok(const_int(a)), Ok(const_int(b))) => {\n-            let is_a_min_value = |&:| {\n+            let is_a_min_value = || {\n                 let int_ty = match ty::expr_ty_opt(tcx, e).map(|ty| &ty.sty) {\n                     Some(&ty::ty_int(int_ty)) => int_ty,\n                     _ => return false"}, {"sha": "9005c666afbcdd254b1c3503b3796663e667a7e4", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -40,7 +40,6 @@\n #![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(env)]\n #![feature(path)]\n \n extern crate syntax;"}, {"sha": "d08fb2b313ef6776dde2c2a2ed1486cfbb1f2499", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -26,7 +26,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n@@ -38,6 +37,7 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(unicode)]\n+#![feature(exit_status)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "71317d5875b84fcdb1d3351632dfd0fa0dae1c06", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -30,7 +30,6 @@\n #![feature(core)]\n #![feature(int_uint)]\n #![feature(old_io)]\n-#![feature(env)]\n #![feature(libc)]\n #![feature(old_path)]\n #![feature(quote)]"}, {"sha": "083523f7ba92f97fce223becfadf59dccc1003e7", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -45,7 +45,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n     scope: region::CodeExtent,\n     depth: uint)\n {\n-    let origin = |&:| infer::SubregionOrigin::SafeDestructor(span);\n+    let origin = || infer::SubregionOrigin::SafeDestructor(span);\n     let mut walker = ty_root.walk();\n     let opt_phantom_data_def_id = rcx.tcx().lang_items.phantom_data();\n "}, {"sha": "e58239a82c603b2487570641ec122241fa96dc7c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -22,7 +22,7 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n+#![feature(exit_status)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]"}, {"sha": "1968ca4b9e7052cbad18612fd4ab8f21e13848df", "filename": "src/libstd/env.rs", "status": "modified", "additions": 84, "deletions": 183, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -14,7 +14,7 @@\n //! environment varibles, process arguments, the current directory, and various\n //! other important directories.\n \n-#![unstable(feature = \"env\", reason = \"recently added via RFC 578\")]\n+#![stable(feature = \"env\", since = \"1.0.0\")]\n \n use prelude::v1::*;\n \n@@ -47,6 +47,7 @@ use sys::os as os_imp;\n /// let p = env::current_dir().unwrap();\n /// println!(\"The current directory is {}\", p.display());\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_dir() -> io::Result<PathBuf> {\n     os_imp::getcwd()\n }\n@@ -64,6 +65,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// assert!(env::set_current_dir(&root).is_ok());\n /// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_current_dir<P: AsPath + ?Sized>(p: &P) -> io::Result<()> {\n     os_imp::chdir(p.as_path())\n }\n@@ -74,12 +76,14 @@ static ENV_LOCK: StaticMutex = MUTEX_INIT;\n ///\n /// This iterator is created through `std::env::vars()` and yields `(String,\n /// String)` pairs.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars { inner: VarsOs }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n /// This iterator is created through `std::env::vars_os()` and yields\n /// `(OsString, OsString)` pairs.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs { inner: os_imp::Env }\n \n /// Returns an iterator of (variable, value) pairs of strings, for all the\n@@ -106,6 +110,7 @@ pub struct VarsOs { inner: os_imp::Env }\n ///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n }\n@@ -128,11 +133,13 @@ pub fn vars() -> Vars {\n ///     println!(\"{:?}: {:?}\", key, value);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars_os() -> VarsOs {\n     let _g = ENV_LOCK.lock();\n     VarsOs { inner: os_imp::env() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for Vars {\n     type Item = (String, String);\n     fn next(&mut self) -> Option<(String, String)> {\n@@ -143,6 +150,7 @@ impl Iterator for Vars {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for VarsOs {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }\n@@ -166,6 +174,7 @@ impl Iterator for VarsOs {\n ///     Err(e) => println!(\"couldn't interpret {}: {}\", key, e),\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n     match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n@@ -187,24 +196,29 @@ pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var_os<K: ?Sized>(key: &K) -> Option<OsString> where K: AsOsStr {\n     let _g = ENV_LOCK.lock();\n     os_imp::getenv(key.as_os_str())\n }\n \n /// Possible errors from the `env::var` method.\n #[derive(Debug, PartialEq, Eq, Clone)]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n     /// The specified environment variable was not present in the current\n     /// process's environment.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n     NotPresent,\n \n     /// The specified environment variable was found, but it did not contain\n     /// valid unicode data. The found data is returned as a payload of this\n     /// variant.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n     NotUnicode(OsString),\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for VarError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -216,6 +230,7 @@ impl fmt::Display for VarError {\n     }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for VarError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -237,6 +252,7 @@ impl Error for VarError {\n /// env::set_var(key, \"VALUE\");\n /// assert_eq!(env::var(key), Ok(\"VALUE\".to_string()));\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n     where K: AsOsStr, V: AsOsStr\n {\n@@ -245,6 +261,7 @@ pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n }\n \n /// Remove a variable from the environment entirely.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn remove_var<K: ?Sized>(k: &K) where K: AsOsStr {\n     let _g = ENV_LOCK.lock();\n     os_imp::unsetenv(k.as_os_str())\n@@ -254,6 +271,7 @@ pub fn remove_var<K: ?Sized>(k: &K) where K: AsOsStr {\n /// according to platform-specific conventions.\n ///\n /// This structure is returned from `std::env::split_paths`.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n \n /// Parses input according to platform conventions for the `PATH`\n@@ -276,10 +294,12 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn split_paths<T: AsOsStr + ?Sized>(unparsed: &T) -> SplitPaths {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_os_str()) }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> { self.inner.next() }\n@@ -289,6 +309,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n /// Error type returned from `std::env::join_paths` when paths fail to be\n /// joined.\n #[derive(Debug)]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n     inner: os_imp::JoinPathsError\n }\n@@ -315,6 +336,7 @@ pub struct JoinPathsError {\n ///     env::set_var(\"PATH\", &new_path);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     where I: Iterator<Item=T>, T: AsOsStr\n {\n@@ -323,12 +345,14 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     })\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for JoinPathsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.inner.fmt(f)\n     }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for JoinPathsError {\n     fn description(&self) -> &str { self.inner.description() }\n }\n@@ -357,6 +381,7 @@ impl Error for JoinPathsError {\n ///     None => println!(\"Impossible to get your home dir!\")\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()\n }\n@@ -371,6 +396,7 @@ pub fn home_dir() -> Option<PathBuf> {\n /// On Windows, returns the value of, in order, the 'TMP', 'TEMP',\n /// 'USERPROFILE' environment variable  if any are set and not the empty\n /// string. Otherwise, tmpdir returns the path to the Windows directory.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n }\n@@ -398,6 +424,7 @@ pub fn temp_dir() -> PathBuf {\n ///     Err(e) => println!(\"failed to get current exe path: {}\", e),\n /// };\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n     os_imp::current_exe()\n }\n@@ -412,12 +439,14 @@ static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n /// ignored and the process exits with the default panic status.\n ///\n /// Note that this is not synchronized against modifications of other threads.\n+#[unstable(feature = \"exit_status\", reason = \"managing the exit status may change\")]\n pub fn set_exit_status(code: i32) {\n     EXIT_STATUS.store(code as isize, Ordering::SeqCst)\n }\n \n /// Fetches the process's current exit code. This defaults to 0 and can change\n /// by calling `set_exit_status`.\n+#[unstable(feature = \"exit_status\", reason = \"managing the exit status may change\")]\n pub fn get_exit_status() -> i32 {\n     EXIT_STATUS.load(Ordering::SeqCst) as i32\n }\n@@ -426,12 +455,14 @@ pub fn get_exit_status() -> i32 {\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args` method.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args { inner: ArgsOs }\n \n /// An iterator over the arguments of a process, yielding an `OsString` value\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args_os` method.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs { inner: os_imp::Args }\n \n /// Returns the arguments which this program was started with (normally passed\n@@ -457,6 +488,7 @@ pub struct ArgsOs { inner: os_imp::Args }\n ///     println!(\"{}\", argument);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args() -> Args {\n     Args { inner: args_os() }\n }\n@@ -478,10 +510,12 @@ pub fn args() -> Args {\n ///     println!(\"{:?}\", argument);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args_os() -> ArgsOs {\n     ArgsOs { inner: os_imp::args() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for Args {\n     type Item = String;\n     fn next(&mut self) -> Option<String> {\n@@ -490,333 +524,200 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl ExactSizeIterator for ArgsOs {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n /// Returns the page size of the current architecture in bytes.\n+#[unstable(feature = \"page_size\", reason = \"naming and/or location may change\")]\n pub fn page_size() -> usize {\n     os_imp::page_size()\n }\n \n /// Constants associated with the current target\n-#[cfg(target_os = \"linux\")]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {\n-    pub use super::arch_consts::ARCH;\n+    /// A string describing the architecture of the CPU that this is currently\n+    /// in use.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const ARCH: &'static str = super::arch::ARCH;\n \n-    pub const FAMILY: &'static str = \"unix\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const FAMILY: &'static str = super::os::FAMILY;\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `linux`.\n-    pub const OS: &'static str = \"linux\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const OS: &'static str = super::os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_PREFIX: &'static str = super::os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_SUFFIX: &'static str = super::os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub const EXE_SUFFIX: &'static str = \"\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const EXE_EXTENSION: &'static str = super::os::EXE_EXTENSION;\n+\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"linux\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"macos\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `macos`.\n     pub const OS: &'static str = \"macos\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.dylib`.\n     pub const DLL_SUFFIX: &'static str = \".dylib\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `dylib`.\n     pub const DLL_EXTENSION: &'static str = \"dylib\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"ios\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `ios`.\n     pub const OS: &'static str = \"ios\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"freebsd\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `freebsd`.\n     pub const OS: &'static str = \"freebsd\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"dragonfly\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `dragonfly`.\n     pub const OS: &'static str = \"dragonfly\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"bitrig\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `bitrig`.\n     pub const OS: &'static str = \"bitrig\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"openbsd\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `openbsd`.\n     pub const OS: &'static str = \"openbsd\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"android\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `android`.\n     pub const OS: &'static str = \"android\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"windows\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"windows\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `windows`.\n     pub const OS: &'static str = \"windows\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, the empty string.\n     pub const DLL_PREFIX: &'static str = \"\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.dll`.\n     pub const DLL_SUFFIX: &'static str = \".dll\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `dll`.\n     pub const DLL_EXTENSION: &'static str = \"dll\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, `.exe`.\n     pub const EXE_SUFFIX: &'static str = \".exe\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, `exe`.\n     pub const EXE_EXTENSION: &'static str = \"exe\";\n }\n \n #[cfg(target_arch = \"x86\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"x86\";\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"x86_64\";\n }\n \n #[cfg(target_arch = \"arm\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"arm\";\n }\n \n #[cfg(target_arch = \"aarch64\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"aarch64\";\n }\n \n #[cfg(target_arch = \"mips\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"mips\";\n }\n \n #[cfg(target_arch = \"mipsel\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"mipsel\";\n }\n \n #[cfg(target_arch = \"powerpc\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n }\n "}, {"sha": "1ae59139bc413e1aa7db20a1c9f1829a51f49917", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -274,7 +274,7 @@ impl Process {\n                 // file descriptor. Otherwise, the first file descriptor opened\n                 // up in the child would be numbered as one of the stdio file\n                 // descriptors, which is likely to wreak havoc.\n-                let setup = |&: src: Option<AnonPipe>, dst: c_int| {\n+                let setup = |src: Option<AnonPipe>, dst: c_int| {\n                     let src = match src {\n                         None => {\n                             let flags = if dst == libc::STDIN_FILENO {"}, {"sha": "8a6a485cbbe0f01d060f53c9767e6592fda8ee6a", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -160,7 +160,7 @@ impl Process {\n             // Similarly to unix, we don't actually leave holes for the stdio file\n             // descriptors, but rather open up /dev/null equivalents. These\n             // equivalents are drawn from libuv's windows process spawning.\n-            let set_fd = |&: fd: &Option<AnonPipe>, slot: &mut HANDLE,\n+            let set_fd = |fd: &Option<AnonPipe>, slot: &mut HANDLE,\n                           is_stdin: bool| {\n                 match *fd {\n                     None => {"}, {"sha": "59fe3658437bdefbc356473fb04e564772f0f78e", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -14,10 +14,11 @@ use std::collections::BTreeMap;\n use ast;\n use ast::{Ident, Name, TokenTree};\n use codemap::Span;\n-use ext::base::{ExtCtxt, MacExpr, MacResult, MacItems};\n+use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n+use util::small_vector::SmallVector;\n \n thread_local! {\n     static REGISTERED_DIAGNOSTICS: RefCell<BTreeMap<Name, Option<Name>>> = {\n@@ -73,7 +74,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n             ));\n         }\n     });\n-    MacExpr::new(quote_expr!(ecx, ()))\n+    MacEager::expr(quote_expr!(ecx, ()))\n }\n \n pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -101,7 +102,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::new(token::gensym(&(\n         \"__register_diagnostic_\".to_string() + &token::get_ident(*code)\n     )));\n-    MacItems::new(vec![quote_item!(ecx, mod $sym {}).unwrap()].into_iter())\n+    MacEager::items(SmallVector::many(vec![quote_item!(ecx, mod $sym {}).unwrap()]))\n }\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -126,7 +127,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         });\n \n-    MacItems::new(vec![quote_item!(ecx,\n+    MacEager::items(SmallVector::many(vec![quote_item!(ecx,\n         pub static $name: [(&'static str, &'static str); $count] = $expr;\n-    ).unwrap()].into_iter())\n+    ).unwrap()]))\n }"}, {"sha": "ae48084947e4393b5531c9dc3c6de0a6c9e206af", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -217,7 +217,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         },\n     });\n \n-    MacExpr::new(P(ast::Expr {\n+    MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n             asm: token::intern_and_get_ident(&asm),"}, {"sha": "e5d1fe2388c50ee2f01937dfd09f8aa9d194097b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 69, "deletions": 47, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -28,6 +28,7 @@ use fold::Folder;\n \n use std::collections::HashMap;\n use std::rc::Rc;\n+use std::default::Default;\n \n pub trait ItemDecorator {\n     fn expand(&self,\n@@ -226,9 +227,17 @@ impl<F> IdentMacroExpander for F\n     }\n }\n \n+// Use a macro because forwarding to a simple function has type system issues\n+macro_rules! make_stmt_default {\n+    ($me:expr) => {\n+        $me.make_expr().map(|e| {\n+            P(codemap::respan(e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID)))\n+        })\n+    }\n+}\n+\n /// The result of a macro expansion. The return values of the various\n-/// methods are spliced into the AST at the callsite of the macro (or\n-/// just into the compiler's internal macro table, for `make_def`).\n+/// methods are spliced into the AST at the callsite of the macro.\n pub trait MacResult {\n     /// Create an expression.\n     fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> {\n@@ -254,63 +263,76 @@ pub trait MacResult {\n     /// By default this attempts to create an expression statement,\n     /// returning None if that fails.\n     fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n-        self.make_expr()\n-            .map(|e| P(codemap::respan(e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID))))\n+        make_stmt_default!(self)\n     }\n }\n \n-/// A convenience type for macros that return a single expression.\n-pub struct MacExpr {\n-    e: P<ast::Expr>\n-}\n-impl MacExpr {\n-    pub fn new(e: P<ast::Expr>) -> Box<MacResult+'static> {\n-        box MacExpr { e: e } as Box<MacResult+'static>\n-    }\n-}\n-impl MacResult for MacExpr {\n-    fn make_expr(self: Box<MacExpr>) -> Option<P<ast::Expr>> {\n-        Some(self.e)\n-    }\n-    fn make_pat(self: Box<MacExpr>) -> Option<P<ast::Pat>> {\n-        match self.e.node {\n-            ast::ExprLit(_) => Some(P(ast::Pat {\n-                id: ast::DUMMY_NODE_ID,\n-                span: self.e.span,\n-                node: ast::PatLit(self.e)\n-            })),\n-            _ => None\n+macro_rules! make_MacEager {\n+    ( $( $fld:ident: $t:ty, )* ) => {\n+        /// `MacResult` implementation for the common case where you've already\n+        /// built each form of AST that you might return.\n+        #[derive(Default)]\n+        pub struct MacEager {\n+            $(\n+                pub $fld: Option<$t>,\n+            )*\n+        }\n+\n+        impl MacEager {\n+            $(\n+                pub fn $fld(v: $t) -> Box<MacResult> {\n+                    box MacEager {\n+                        $fld: Some(v),\n+                        ..Default::default()\n+                    } as Box<MacResult>\n+                }\n+            )*\n         }\n     }\n }\n-/// A convenience type for macros that return a single pattern.\n-pub struct MacPat {\n-    p: P<ast::Pat>\n+\n+make_MacEager! {\n+    expr: P<ast::Expr>,\n+    pat: P<ast::Pat>,\n+    items: SmallVector<P<ast::Item>>,\n+    methods: SmallVector<P<ast::Method>>,\n+    stmt: P<ast::Stmt>,\n }\n-impl MacPat {\n-    pub fn new(p: P<ast::Pat>) -> Box<MacResult+'static> {\n-        box MacPat { p: p } as Box<MacResult+'static>\n+\n+impl MacResult for MacEager {\n+    fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> {\n+        self.expr\n     }\n-}\n-impl MacResult for MacPat {\n-    fn make_pat(self: Box<MacPat>) -> Option<P<ast::Pat>> {\n-        Some(self.p)\n+\n+    fn make_items(self: Box<Self>) -> Option<SmallVector<P<ast::Item>>> {\n+        self.items\n     }\n-}\n-/// A type for macros that return multiple items.\n-pub struct MacItems {\n-    items: SmallVector<P<ast::Item>>\n-}\n \n-impl MacItems {\n-    pub fn new<I: Iterator<Item=P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n-        box MacItems { items: it.collect() } as Box<MacResult+'static>\n+    fn make_methods(self: Box<Self>) -> Option<SmallVector<P<ast::Method>>> {\n+        self.methods\n     }\n-}\n \n-impl MacResult for MacItems {\n-    fn make_items(self: Box<MacItems>) -> Option<SmallVector<P<ast::Item>>> {\n-        Some(self.items)\n+    fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n+        match self.stmt {\n+            None => make_stmt_default!(self),\n+            s => s,\n+        }\n+    }\n+\n+    fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> {\n+        if let Some(p) = self.pat {\n+            return Some(p);\n+        }\n+        if let Some(e) = self.expr {\n+            if let ast::ExprLit(_) = e.node {\n+                return Some(P(ast::Pat {\n+                    id: ast::DUMMY_NODE_ID,\n+                    span: e.span,\n+                    node: ast::PatLit(e),\n+                }));\n+            }\n+        }\n+        None\n     }\n }\n "}, {"sha": "6a2209bf0aee2f7adbd9a96666a8635fcbf63a53", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -35,5 +35,5 @@ pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n     }\n \n     let matches_cfg = attr::cfg_matches(&cx.parse_sess.span_diagnostic, &cx.cfg, &*cfg);\n-    MacExpr::new(cx.expr_bool(sp, matches_cfg))\n+    MacEager::expr(cx.expr_bool(sp, matches_cfg))\n }"}, {"sha": "754c73a9d7838485869216b364c0ca64ca8e35f9", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -60,7 +60,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n             }\n         }\n     }\n-    base::MacExpr::new(cx.expr_str(\n+    base::MacEager::expr(cx.expr_str(\n             sp,\n             token::intern_and_get_ident(&accumulator[..])))\n }"}, {"sha": "e350ce6101737ac3ca2bdd0e8c32ecfdd206f2bf", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -67,5 +67,5 @@ pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]\n         ),\n         span: sp,\n     });\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }"}, {"sha": "f72303985e78cc24d45888e7e7081eb0b90b2543", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -59,7 +59,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n                                           &s[..]))))\n       }\n     };\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }\n \n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n@@ -108,5 +108,5 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(s) => cx.expr_str(sp, token::intern_and_get_ident(&s))\n     };\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }"}, {"sha": "0eaca9af4f08d41258287ac5c0dc24704b848caa", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -633,7 +633,7 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt, sp: Span,\n \n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, order, names)) => {\n-            MacExpr::new(expand_preparsed_format_args(ecx, sp, efmt,\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt,\n                                                       args, order, names))\n         }\n         None => DummyResult::expr(sp)"}, {"sha": "544fb15dcde7b0a829963bb40cc694e4009d9b30", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -402,15 +402,15 @@ pub fn expand_quote_tokens<'cx>(cx: &'cx mut ExtCtxt,\n                                 -> Box<base::MacResult+'cx> {\n     let (cx_expr, expr) = expand_tts(cx, sp, tts);\n     let expanded = expand_wrapper(cx, sp, cx_expr, expr);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_expr<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_expr\", Vec::new(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,\n@@ -419,31 +419,31 @@ pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,\n                               -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_item_with_outer_attributes\",\n                                     vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_pat<'cx>(cx: &'cx mut ExtCtxt,\n                              sp: Span,\n                              tts: &[ast::TokenTree])\n                              -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_pat\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_arm(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[ast::TokenTree])\n                         -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_arm\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_ty(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_ty\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_method(cx: &mut ExtCtxt,\n@@ -452,7 +452,7 @@ pub fn expand_quote_method(cx: &mut ExtCtxt,\n                            -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_method_with_outer_attributes\",\n                                      vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n@@ -462,7 +462,7 @@ pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n     let e_attrs = cx.expr_vec_ng(sp);\n     let expanded = expand_parse_call(cx, sp, \"parse_stmt\",\n                                     vec!(e_attrs), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n fn ids_ext(strs: Vec<String> ) -> Vec<ast::Ident> {"}, {"sha": "ba3743cdb335bcf8855af674f06704c605c65aa8", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -35,7 +35,7 @@ pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_u32(topmost, loc.line as u32))\n+    base::MacEager::expr(cx.expr_u32(topmost, loc.line as u32))\n }\n \n /* column!(): expands to the current column number */\n@@ -46,7 +46,7 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n+    base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n }\n \n /// file!(): expands to the current filename */\n@@ -59,13 +59,13 @@ pub fn expand_file(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n     let filename = token::intern_and_get_ident(&loc.file.name);\n-    base::MacExpr::new(cx.expr_str(topmost, filename))\n+    base::MacEager::expr(cx.expr_str(topmost, filename))\n }\n \n pub fn expand_stringify(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                         -> Box<base::MacResult+'static> {\n     let s = pprust::tts_to_string(tts);\n-    base::MacExpr::new(cx.expr_str(sp,\n+    base::MacEager::expr(cx.expr_str(sp,\n                                    token::intern_and_get_ident(&s[..])))\n }\n \n@@ -77,7 +77,7 @@ pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                    .map(|x| token::get_ident(*x).to_string())\n                    .collect::<Vec<String>>()\n                    .connect(\"::\");\n-    base::MacExpr::new(cx.expr_str(\n+    base::MacEager::expr(cx.expr_str(\n             sp,\n             token::intern_and_get_ident(&string[..])))\n }\n@@ -155,7 +155,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             let interned = token::intern_and_get_ident(&src[..]);\n             cx.codemap().new_filemap(filename, src);\n \n-            base::MacExpr::new(cx.expr_str(sp, interned))\n+            base::MacEager::expr(cx.expr_str(sp, interned))\n         }\n         Err(_) => {\n             cx.span_err(sp,\n@@ -181,7 +181,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(bytes) => {\n             let bytes = bytes.iter().cloned().collect();\n-            base::MacExpr::new(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n+            base::MacEager::expr(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n         }\n     }\n }"}, {"sha": "7acbd10ef03d818476adbcde6be57f32121c134c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -27,7 +27,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]"}, {"sha": "9de7b0ede78a7ef03331577420e04f9628b79d1a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -1163,7 +1163,6 @@ impl<'a> Parser<'a> {\n         {\n             self.bump();\n             self.bump();\n-            return;\n         } else if\n             self.eat(&token::Colon)\n         {"}, {"sha": "756d67b5db1e1a37212ee04f4e0a133d80ba856a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -59,7 +59,6 @@\n #![feature(staged_api)]\n #![feature(unicode)]\n #![feature(std_misc)]\n-#![feature(env)]\n #![feature(os)]\n #![cfg_attr(windows, feature(libc))]\n "}, {"sha": "a144904903e58e8f7ca2d7dfcdd3da4e3926288e", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -36,7 +36,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(old_path)]"}, {"sha": "f5a9063e1def5107f29a03f5633bf4f7f0cfc392", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -19,7 +19,8 @@ extern crate rustc;\n \n use syntax::ast;\n use syntax::codemap;\n-use syntax::ext::base::{ExtCtxt, MacResult, MacItems};\n+use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n+use syntax::util::small_vector::SmallVector;\n use rustc::plugin::Registry;\n \n #[plugin_registrar]\n@@ -28,8 +29,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n }\n \n fn expand(cx: &mut ExtCtxt, _: codemap::Span, _: &[ast::TokenTree]) -> Box<MacResult+'static> {\n-    MacItems::new(vec![\n+    MacEager::items(SmallVector::many(vec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()\n-    ].into_iter())\n+    ]))\n }"}, {"sha": "01bfbd3dbceb6f65e52de3217a9773bac356455f", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -47,7 +47,7 @@ fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     if !tts.is_empty() {\n         cx.span_fatal(sp, \"make_a_1 takes no arguments\");\n     }\n-    MacExpr::new(quote_expr!(cx, 1))\n+    MacEager::expr(quote_expr!(cx, 1))\n }\n \n // See Issue #15750\n@@ -57,7 +57,7 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n     let mut parser = parse::new_parser_from_tts(cx.parse_sess(),\n         cx.cfg(), tts.to_vec());\n     let expr = parser.parse_expr();\n-    MacExpr::new(quote_expr!(&mut *cx, $expr))\n+    MacEager::expr(quote_expr!(&mut *cx, $expr))\n }\n \n fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: &MetaItem, it: P<Item>)\n@@ -114,7 +114,7 @@ fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<Mac\n         let mut parser = new_parser_from_tts(parse_sess, cfg, tt);\n         parser.parse_expr()\n     };\n-    MacExpr::new(expr)\n+    MacEager::expr(expr)\n }\n \n pub fn foo() {}"}, {"sha": "1775bbf4af21f635ce32c5d6434d9daae132ded1", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -20,7 +20,7 @@ use std::borrow::ToOwned;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacExpr, NormalTT};\n+use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -38,7 +38,7 @@ impl TTMacroExpander for Expander {\n         let args = self.args.iter().map(|i| pprust::meta_item_to_string(&*i))\n             .collect::<Vec<_>>().connect(\", \");\n         let interned = token::intern_and_get_ident(&args[..]);\n-        MacExpr::new(ecx.expr_str(sp, interned))\n+        MacEager::expr(ecx.expr_str(sp, interned))\n     }\n }\n "}, {"sha": "e5c4211110558f21adb45c51e2d07be93a504551", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -19,7 +19,7 @@ extern crate rustc;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TokenTree, TtToken};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc::plugin::Registry;\n \n@@ -61,7 +61,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacExpr::new(cx.expr_usize(sp, total))\n+    MacEager::expr(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]"}, {"sha": "07f3b863af8a1f98006d1e2b2b4b3bc9aa35d3ee", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -30,5 +30,5 @@ pub fn plugin_registrar(reg: &mut Registry) {\n fn expand_foo(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n               -> Box<MacResult+'static> {\n     let answer = other::the_answer();\n-    MacExpr::new(quote_expr!(cx, $answer))\n+    MacEager::expr(quote_expr!(cx, $answer))\n }"}, {"sha": "89134e806a75cb0c370d8d33e82f2def9140d8c3", "filename": "src/test/parse-fail/obsolete-closure-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a69110c3b1122596ddc8999bb2403a5777bb8ed/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs?ref=8a69110c3b1122596ddc8999bb2403a5777bb8ed", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we generate obsolete syntax errors around usages of closure kinds: `|:|`, `|&:|` and\n+// `|&mut:|`.\n+\n+fn main() {\n+    let a = |:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+    let a = |&:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+    let a = |&mut:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+}"}]}