{"sha": "ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "node_id": "C_kwDOAAsO6NoAKGFjNDVhODNhZDVkZjI4NGE0NjgwZjBjM2M5MGQ4NmY3YTE3N2U0MWY", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-14T12:53:28Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Handle multiple reference levels into binding type and add more tests", "tree": {"sha": "f78170c50bbde6046a97429954b8c79ec9fbbf3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78170c50bbde6046a97429954b8c79ec9fbbf3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "html_url": "https://github.com/rust-lang/rust/commit/ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788c9ccc938ac0384fd06a071806502121af1a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/788c9ccc938ac0384fd06a071806502121af1a5a", "html_url": "https://github.com/rust-lang/rust/commit/788c9ccc938ac0384fd06a071806502121af1a5a"}], "stats": {"total": 101, "additions": 94, "deletions": 7}, "files": [{"sha": "dca4d84f6b1ff405986028a8d22c4fc6f9d083be", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -50,12 +50,26 @@ pub(super) fn check<'tcx>(\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {\n                         Some(search_snippet.replacen('&', \"\", 1))\n-                    } else if let PatKind::Binding(..) = strip_pat_refs(closure_arg.pat).kind {\n+                    } else if let PatKind::Binding(_, binding_id, _, _) = strip_pat_refs(closure_arg.pat).kind {\n+                        // this binding is composed of at least two levels of references, so we need to remove one\n+                        let binding_type = cx.typeck_results().node_type(binding_id);\n+                        let innermost_is_ref = if let ty::Ref(_, inner,_) = binding_type.kind() {\n+                            matches!(inner.kind(), ty::Ref(_, innermost, _) if innermost.is_ref())\n+                        } else {\n+                            false\n+                        };\n+\n                         // `find()` provides a reference to the item, but `any` does not,\n                         // so we should fix item usages for suggestion\n                         if let Some(closure_sugg) = get_closure_suggestion(cx, search_arg, closure_body) {\n                             applicability = closure_sugg.applicability;\n-                            Some(closure_sugg.suggestion)\n+                            if innermost_is_ref {\n+                                Some(closure_sugg.suggestion.replacen('&', \"\", 1))\n+                            } else {\n+                                Some(closure_sugg.suggestion)\n+                            }\n+                        } else if innermost_is_ref {\n+                            Some(search_snippet.replacen('&', \"\", 1))\n                         } else {\n                             Some(search_snippet.to_string())\n                         }\n@@ -230,7 +244,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                 // cases where a parent call is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n                 if let Some(parent_expr) = get_parent_expr_for_hir(self.cx, cmt.hir_id) {\n-                    if let ExprKind::Call(..) | ExprKind::MethodCall(..) = parent_expr.kind {\n+                    if let ExprKind::Call(_, call_args) | ExprKind::MethodCall(_, _, call_args, _) = parent_expr.kind {\n                         let expr = self.cx.tcx.hir().expect_expr(cmt.hir_id);\n                         let arg_ty_kind = self.cx.typeck_results().expr_ty(expr).kind();\n \n@@ -239,8 +253,13 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                             let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n                             let start_snip =\n                                 snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n-\n-                            self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n+                            // do not suggest ampersand if the ident is the method caller\n+                            let ident_sugg = if !call_args.is_empty() && call_args[0].hir_id == cmt.hir_id {\n+                                format!(\"{}{}\", start_snip, ident_str)\n+                            } else {\n+                                format!(\"{}&{}\", start_snip, ident_str)\n+                            };\n+                            self.suggestion_start.push_str(&ident_sugg);\n                             self.next_pos = span.hi();\n                         } else {\n                             self.applicability = Applicability::Unspecified;"}, {"sha": "811bb1e3176925acdb8a62b64b373337b0ec8bc7", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -97,4 +97,15 @@ mod issue7392 {\n         let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n         let _ = !vfoo.iter().any(|sub| sub[1..4].len() == 3);\n     }\n+\n+    fn please(x: &u32) -> bool {\n+        *x == 9\n+    }\n+\n+    fn more_projections() {\n+        let x = 19;\n+        let ppx: &u32 = &x;\n+        let _ = ![ppx].iter().any(|ppp_x: &&u32| please(ppp_x));\n+        let _ = ![String::from(\"Hey hey\")].iter().any(|s| s.len() == 2);\n+    }\n }"}, {"sha": "c6fbb5e2d261d2d825fb91f25b9998d365e372cf", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -101,4 +101,15 @@ mod issue7392 {\n         let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_none();\n     }\n+\n+    fn please(x: &u32) -> bool {\n+        *x == 9\n+    }\n+\n+    fn more_projections() {\n+        let x = 19;\n+        let ppx: &u32 = &x;\n+        let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();\n+        let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_none();\n+    }\n }"}, {"sha": "b89ddabee5546cc05d66f6a9d665eef2fbea1fa0", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -169,5 +169,17 @@ error: called `is_none()` after searching an `Iterator` with `find`\n LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|sub| sub[1..4].len() == 3)`\n \n-error: aborting due to 26 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:112:17\n+   |\n+LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `![ppx].iter().any(|ppp_x: &&u32| please(ppp_x))`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:113:17\n+   |\n+LL |         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `![String::from(\"Hey hey\")].iter().any(|s| s.len() == 2)`\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "76b7f3d05d5acb7b0220d90a0e6795b7aa51d89a", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -98,4 +98,15 @@ mod issue7392 {\n         let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n         let _ = vfoo.iter().any(|sub| sub[1..4].len() == 3);\n     }\n+\n+    fn please(x: &u32) -> bool {\n+        *x == 9\n+    }\n+\n+    fn more_projections() {\n+        let x = 19;\n+        let ppx: &u32 = &x;\n+        let _ = [ppx].iter().any(|ppp_x: &&u32| please(ppp_x));\n+        let _ = [String::from(\"Hey hey\")].iter().any(|s| s.len() == 2);\n+    }\n }"}, {"sha": "364250e6ed81c7e59998e101812b60d7364fd005", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -100,4 +100,15 @@ mod issue7392 {\n         let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_some();\n     }\n+\n+    fn please(x: &u32) -> bool {\n+        *x == 9\n+    }\n+\n+    fn more_projections() {\n+        let x = 19;\n+        let ppx: &u32 = &x;\n+        let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_some();\n+        let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_some();\n+    }\n }"}, {"sha": "183d99497ac16be69dfa2a00431ea0956cd11b80", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac45a83ad5df284a4680f0c3c90d86f7a177e41f/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "patch": "@@ -160,5 +160,17 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_some();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|sub| sub[1..4].len() == 3)`\n \n-error: aborting due to 26 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:111:30\n+   |\n+LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_some();\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|ppp_x: &&u32| please(ppp_x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:112:50\n+   |\n+LL |         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_some();\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|s| s.len() == 2)`\n+\n+error: aborting due to 28 previous errors\n "}]}