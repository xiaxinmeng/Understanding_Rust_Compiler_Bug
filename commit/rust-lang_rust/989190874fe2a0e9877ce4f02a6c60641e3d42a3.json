{"sha": "989190874fe2a0e9877ce4f02a6c60641e3d42a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTE5MDg3NGZlMmEwZTk4NzdjZTRmMDJhNmM2MDY0MWUzZDQyYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T18:01:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T18:01:33Z"}, "message": "Auto merge of #76538 - fusion-engineering-forks:check-useless-unstable-trait-impl, r=lcnr\n\nWarn for #[unstable] on trait impls when it has no effect.\n\nEarlier today I sent a PR with an `#[unstable]` attribute on a trait `impl`, but was informed that this attribute has no effect there. (comment: https://github.com/rust-lang/rust/pull/76525#issuecomment-689678895, issue: https://github.com/rust-lang/rust/issues/55436)\n\nThis PR adds a warning for this situation. Trait `impl` blocks with `#[unstable]` where both the type and the trait are stable will result in a warning:\n\n```\nwarning: An `#[unstable]` annotation here has no effect. See issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information.\n   --> library/std/src/panic.rs:235:1\n    |\n235 | #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\n---\n\nIt detects three problems in the existing code:\n\n1. A few `RefUnwindSafe` implementations for the atomic integer types in `library/std/src/panic.rs`. Example:\nhttps://github.com/rust-lang/rust/blob/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471/library/std/src/panic.rs#L235-L236\n2. An implementation of `Error` for `LayoutErr` in `library/std/srd/error.rs`:\nhttps://github.com/rust-lang/rust/blob/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471/library/std/src/error.rs#L392-L397\n3. `From` implementations for `Waker` and `RawWaker` in `library/alloc/src/task.rs`. Example:\nhttps://github.com/rust-lang/rust/blob/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471/library/alloc/src/task.rs#L36-L37\n\nCase 3 interesting: It has a bound with an `#[unstable]` trait (`W: Wake`), so appears to have much effect on stable code. It does however break similar blanket implementations. It would also have immediate effect if `Wake` was implemented for any stable type. (Which is not the case right now, but there are no warnings in place to prevent it.) Whether this case is a problem or not is not clear to me. If it isn't, adding a simple `c.visit_generics(..);` to this PR will stop the warning for this case.", "tree": {"sha": "cdc1dd5f294a9c7b29e5ea413f03aaf6e2caa833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc1dd5f294a9c7b29e5ea413f03aaf6e2caa833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989190874fe2a0e9877ce4f02a6c60641e3d42a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989190874fe2a0e9877ce4f02a6c60641e3d42a3", "html_url": "https://github.com/rust-lang/rust/commit/989190874fe2a0e9877ce4f02a6c60641e3d42a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989190874fe2a0e9877ce4f02a6c60641e3d42a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7adeb2c795239e2e5ffbe4cd4672157c8e1b9277", "url": "https://api.github.com/repos/rust-lang/rust/commits/7adeb2c795239e2e5ffbe4cd4672157c8e1b9277", "html_url": "https://github.com/rust-lang/rust/commit/7adeb2c795239e2e5ffbe4cd4672157c8e1b9277"}, {"sha": "14cc17759de0863e85eea46c0f5bfcc362d1bfe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/14cc17759de0863e85eea46c0f5bfcc362d1bfe8", "html_url": "https://github.com/rust-lang/rust/commit/14cc17759de0863e85eea46c0f5bfcc362d1bfe8"}], "stats": {"total": 145, "additions": 129, "deletions": 16}, "files": [{"sha": "4ca52f405fb947affd19ee20e85cf4b56aeef9c3", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -9,13 +9,14 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n+use rustc_hir::{Generics, HirId, Item, StructField, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n+use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -538,7 +539,37 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl { of_trait: Some(ref t), items, .. } => {\n+            hir::ItemKind::Impl { of_trait: Some(ref t), self_ty, items, .. } => {\n+                if self.tcx.features().staged_api {\n+                    // If this impl block has an #[unstable] attribute, give an\n+                    // error if all involved types and traits are stable, because\n+                    // it will have no effect.\n+                    // See: https://github.com/rust-lang/rust/issues/55436\n+                    if let (Some(Stability { level: attr::Unstable { .. }, .. }), _) =\n+                        attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n+                    {\n+                        let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n+                        c.visit_ty(self_ty);\n+                        c.visit_trait_ref(t);\n+                        if c.fully_stable {\n+                            let span = item\n+                                .attrs\n+                                .iter()\n+                                .find(|a| a.has_name(sym::unstable))\n+                                .map_or(item.span, |a| a.span);\n+                            self.tcx.struct_span_lint_hir(\n+                                INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+                                item.hir_id,\n+                                span,\n+                                |lint| lint\n+                                    .build(\"an `#[unstable]` annotation here has no effect\")\n+                                    .note(\"see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\")\n+                                    .emit()\n+                            );\n+                        }\n+                    }\n+                }\n+\n                 if let Res::Def(DefKind::Trait, trait_did) = t.path.res {\n                     for impl_item_ref in items {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n@@ -598,6 +629,44 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     }\n }\n \n+struct CheckTraitImplStable<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    fully_stable: bool,\n+}\n+\n+impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _id: hir::HirId) {\n+        if let Some(def_id) = path.res.opt_def_id() {\n+            if let Some(stab) = self.tcx.lookup_stability(def_id) {\n+                self.fully_stable &= stab.level.is_stable();\n+            }\n+        }\n+        intravisit::walk_path(self, path)\n+    }\n+\n+    fn visit_trait_ref(&mut self, t: &'tcx TraitRef<'tcx>) {\n+        if let Res::Def(DefKind::Trait, trait_did) = t.path.res {\n+            if let Some(stab) = self.tcx.lookup_stability(trait_did) {\n+                self.fully_stable &= stab.level.is_stable();\n+            }\n+        }\n+        intravisit::walk_trait_ref(self, t)\n+    }\n+\n+    fn visit_ty(&mut self, t: &'tcx Ty<'tcx>) {\n+        if let TyKind::Never = t.kind {\n+            self.fully_stable = false;\n+        }\n+        intravisit::walk_ty(self, t)\n+    }\n+}\n+\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them."}, {"sha": "0fd6cc1038284f5bb68a4cc04f856dd4728ef715", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -5,7 +5,7 @@\n //! lints are all available in `rustc_lint::builtin`.\n \n use crate::lint::FutureIncompatibleInfo;\n-use crate::{declare_lint, declare_lint_pass};\n+use crate::{declare_lint, declare_lint_pass, declare_tool_lint};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n@@ -555,6 +555,12 @@ declare_lint! {\n     };\n }\n \n+declare_tool_lint! {\n+    pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+    Deny,\n+    \"detects `#[unstable]` on stable trait implementations for stable types\"\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -630,6 +636,7 @@ declare_lint_pass! {\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n         CONST_EVALUATABLE_UNCHECKED,\n+        INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     ]\n }\n "}, {"sha": "fcab3fd0badce93e2e177c76cb859c61bb200c20", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -33,6 +33,7 @@ pub trait Wake {\n     }\n }\n \n+#[allow(rustc::ineffective_unstable_trait_impl)]\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n@@ -42,6 +43,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     }\n }\n \n+#[allow(rustc::ineffective_unstable_trait_impl)]\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {"}, {"sha": "ee25311d3b7ee96403c0eed8020efc6d5d1788e5", "filename": "library/std/src/error.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -389,11 +389,7 @@ impl Error for ! {}\n )]\n impl Error for AllocErr {}\n \n-#[unstable(\n-    feature = \"allocator_api\",\n-    reason = \"the precise API and guarantees it provides may be tweaked.\",\n-    issue = \"32838\"\n-)]\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl Error for LayoutErr {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "18d9c2f11b544b4b687f4451c44899a708b97fc4", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -232,16 +232,16 @@ impl<T: ?Sized> RefUnwindSafe for RwLock<T> {}\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n impl RefUnwindSafe for atomic::AtomicIsize {}\n #[cfg(target_has_atomic_load_store = \"8\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicI8 {}\n #[cfg(target_has_atomic_load_store = \"16\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicI16 {}\n #[cfg(target_has_atomic_load_store = \"32\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicI32 {}\n #[cfg(target_has_atomic_load_store = \"64\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicI64 {}\n #[cfg(target_has_atomic_load_store = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n@@ -251,16 +251,16 @@ impl RefUnwindSafe for atomic::AtomicI128 {}\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n impl RefUnwindSafe for atomic::AtomicUsize {}\n #[cfg(target_has_atomic_load_store = \"8\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicU8 {}\n #[cfg(target_has_atomic_load_store = \"16\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicU16 {}\n #[cfg(target_has_atomic_load_store = \"32\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicU32 {}\n #[cfg(target_has_atomic_load_store = \"64\")]\n-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+#[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n impl RefUnwindSafe for atomic::AtomicU64 {}\n #[cfg(target_has_atomic_load_store = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]"}, {"sha": "cc57071b87cea5263c0c91b52eccc8b17ed19e48", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -0,0 +1,28 @@\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"x\", since = \"1\")]\n+struct StableType;\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+struct UnstableType;\n+\n+#[stable(feature = \"x\", since = \"1\")]\n+trait StableTrait {}\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+trait UnstableTrait {}\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+impl UnstableTrait for UnstableType {}\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+impl StableTrait for UnstableType {}\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+impl UnstableTrait for StableType {}\n+\n+#[unstable(feature = \"x\", issue = \"none\")]\n+//~^ ERROR an `#[unstable]` annotation here has no effect [rustc::ineffective_unstable_trait_impl]\n+impl StableTrait for StableType {}\n+\n+fn main() {}"}, {"sha": "1915d03fb0aafb6bd7ca56bb0776ba0f8fca634c", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -0,0 +1,11 @@\n+error: an `#[unstable]` annotation here has no effect\n+  --> $DIR/stability-attribute-trait-impl.rs:24:1\n+   |\n+LL | #[unstable(feature = \"x\", issue = \"none\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(rustc::ineffective_unstable_trait_impl)]` on by default\n+   = note: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n+\n+error: aborting due to previous error\n+"}]}