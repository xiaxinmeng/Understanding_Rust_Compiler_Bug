{"sha": "a777754c4d3dc88ac5a0e9e4dd9e5847779206c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Nzc3NTRjNGQzZGM4OGFjNWEwZTllNGRkOWU1ODQ3Nzc5MjA2YzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-16T13:08:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-16T13:08:37Z"}, "message": "Rollup merge of #56855 - nikic:remove-cttz-hack, r=nagisa\n\nRemove u8 cttz hack\n\nThis issue has since been fixed in LLVM: https://github.com/llvm-mirror/llvm/commit/1886c8e29a9992d73c5e6ba0d52eb98ee036ab5d\n\nFurthermore this code doesn't actually work, because the 8 literal does not match the $BITS provided from the macro invocation, so effectively this was just dead code. Ref #43024.\n\nWhat LLVM does is still not ideal for CPUs that only have bsf but not tzcnt, will create a patch for that later.\n\nr? @nagisa", "tree": {"sha": "931f2f7d6f951e0c887efa41a8b67ba4a6ce8f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931f2f7d6f951e0c887efa41a8b67ba4a6ce8f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFk5VCRBK7hj4Ov3rIwAAdHIIAI1Vkb8TLwlHa0gsREKfswEA\nctFyEZoAdg6pHw2kKcTQWGYvsVzv4fOlc3V4m8Ium8O/Lj0Krs6/TWWOmYtN55vg\nVmTi6Q4Pp9Yct7D5kgCOQztTnrztX63K1W1dz2V1tGznBlziTEACEZS5HAeBvxmr\nl+B/bycRB5jyvYX+V3P7v4CQtTLpWvXPMpRXoYiYMwz2WCuV4c7OAKS+EyjuhXQ0\nDOl2lQHAjwazck+8vkoKV1gNju4sYwEMZLjBuQgDpDJKqcFxewSevOdKKKgu54ry\nlZ8tk7q7WrC+/pzgi+xM/+YA0eM8kJS5+z7xzelIraLVd9NkHxsRwaszeLu1ZuU=\n=mxWy\n-----END PGP SIGNATURE-----\n", "payload": "tree 931f2f7d6f951e0c887efa41a8b67ba4a6ce8f74\nparent 8662946cee6e4b3ac6a9789c0da49340337e2794\nparent c0ed771382cafb03232a9b8e7e1c5ef83a98a836\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544965717 +0100\ncommitter GitHub <noreply@github.com> 1544965717 +0100\n\nRollup merge of #56855 - nikic:remove-cttz-hack, r=nagisa\n\nRemove u8 cttz hack\n\nThis issue has since been fixed in LLVM: https://github.com/llvm-mirror/llvm/commit/1886c8e29a9992d73c5e6ba0d52eb98ee036ab5d\n\nFurthermore this code doesn't actually work, because the 8 literal does not match the $BITS provided from the macro invocation, so effectively this was just dead code. Ref #43024.\n\nWhat LLVM does is still not ideal for CPUs that only have bsf but not tzcnt, will create a patch for that later.\n\nr? @nagisa\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3", "html_url": "https://github.com/rust-lang/rust/commit/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8662946cee6e4b3ac6a9789c0da49340337e2794", "url": "https://api.github.com/repos/rust-lang/rust/commits/8662946cee6e4b3ac6a9789c0da49340337e2794", "html_url": "https://github.com/rust-lang/rust/commit/8662946cee6e4b3ac6a9789c0da49340337e2794"}, {"sha": "c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "html_url": "https://github.com/rust-lang/rust/commit/c0ed771382cafb03232a9b8e7e1c5ef83a98a836"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "f1df1f2856ed6b0566f2aa00fb999b4a3fb67a64", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a777754c4d3dc88ac5a0e9e4dd9e5847779206c3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a777754c4d3dc88ac5a0e9e4dd9e5847779206c3", "patch": "@@ -2150,19 +2150,6 @@ impl isize {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n-// Emits the correct `cttz` call, depending on the size of the type.\n-macro_rules! uint_cttz_call {\n-    // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n-    // emits two conditional moves on x86_64. By promoting the value to\n-    // u16 and setting bit 8, we get better code without any conditional\n-    // operations.\n-    // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n-    // pending, remove this workaround once LLVM generates better code\n-    // for cttz8.\n-    ($value:expr, 8) => { intrinsics::cttz($value as u16 | 0x100) };\n-    ($value:expr, $_BITS:expr) => { intrinsics::cttz($value) }\n-}\n-\n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n@@ -2306,7 +2293,7 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n-                unsafe { uint_cttz_call!(self, $BITS) as u32 }\n+                unsafe { intrinsics::cttz(self) as u32 }\n             }\n         }\n "}]}