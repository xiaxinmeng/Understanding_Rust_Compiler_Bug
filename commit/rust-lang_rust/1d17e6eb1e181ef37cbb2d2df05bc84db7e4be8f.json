{"sha": "1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTdlNmViMWUxODFlZjM3Y2JiMmQyZGYwNWJjODRkYjdlNGJlOGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-01T19:10:38Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-01T19:10:38Z"}, "message": "Rollup merge of #23844 - kvark:try_unique, r=alexcrichton\n\nWhile trying to implement parallel ECS processing, I stumbled upon the need to mutate `Arc` contents. The only existed method that allowed that was `make_unique`, but it has issues:\r\n  - it may clone the data as if nothing happened, where the program may just need to crash\r\n  - it forces `Clone` bound, which I don't have\r\n\r\nThe new `try_unique` allows accessing the contents mutably without `Clone` bound and error out if the pointer is not unique.", "tree": {"sha": "f334ae2f869364d2c86030e2fb2c60011ae38770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f334ae2f869364d2c86030e2fb2c60011ae38770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "html_url": "https://github.com/rust-lang/rust/commit/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b38a2497c48c6195cdde4934ea08753f5b5539", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b38a2497c48c6195cdde4934ea08753f5b5539", "html_url": "https://github.com/rust-lang/rust/commit/02b38a2497c48c6195cdde4934ea08753f5b5539"}, {"sha": "39aa668a01fb671cff382a8237ec3993c9cc4c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/39aa668a01fb671cff382a8237ec3993c9cc4c33", "html_url": "https://github.com/rust-lang/rust/commit/39aa668a01fb671cff382a8237ec3993c9cc4c33"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "73d109f3c8d41c170285852fd94b9d9754c5bfc7", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "patch": "@@ -242,6 +242,38 @@ pub fn weak_count<T>(this: &Arc<T>) -> usize { this.inner().weak.load(SeqCst) -\n #[unstable(feature = \"alloc\")]\n pub fn strong_count<T>(this: &Arc<T>) -> usize { this.inner().strong.load(SeqCst) }\n \n+\n+/// Try accessing a mutable reference to the contents behind an unique `Arc<T>`.\n+///\n+/// The access is granted only if this is the only reference to the object.\n+/// Otherwise, `None` is returned.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #![feature(alloc)]\n+/// use std::alloc::arc;\n+///\n+/// let mut four = arc::Arc::new(4);\n+///\n+/// arc::unique(&mut four).map(|num| *num = 5);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"alloc\")]\n+pub fn unique<T>(this: &mut Arc<T>) -> Option<&mut T> {\n+    if strong_count(this) == 1 && weak_count(this) == 0 {\n+        // This unsafety is ok because we're guaranteed that the pointer\n+        // returned is the *only* pointer that will ever be returned to T. Our\n+        // reference count is guaranteed to be 1 at this point, and we required\n+        // the Arc itself to be `mut`, so we're returning the only possible\n+        // reference to the inner data.\n+        let inner = unsafe { &mut **this._ptr };\n+        Some(&mut inner.data)\n+    }else {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Clone for Arc<T> {\n     /// Makes a clone of the `Arc<T>`.\n@@ -312,11 +344,8 @@ impl<T: Send + Sync + Clone> Arc<T> {\n            self.inner().weak.load(SeqCst) != 1 {\n             *self = Arc::new((**self).clone())\n         }\n-        // This unsafety is ok because we're guaranteed that the pointer\n-        // returned is the *only* pointer that will ever be returned to T. Our\n-        // reference count is guaranteed to be 1 at this point, and we required\n-        // the Arc itself to be `mut`, so we're returning the only possible\n-        // reference to the inner data.\n+        // As with `unique()`, the unsafety is ok because our reference was\n+        // either unique to begin with, or became one upon cloning the contents.\n         let inner = unsafe { &mut **self._ptr };\n         &mut inner.data\n     }\n@@ -659,7 +688,7 @@ mod tests {\n     use std::sync::atomic::Ordering::{Acquire, SeqCst};\n     use std::thread;\n     use std::vec::Vec;\n-    use super::{Arc, Weak, weak_count, strong_count};\n+    use super::{Arc, Weak, weak_count, strong_count, unique};\n     use std::sync::Mutex;\n \n     struct Canary(*mut atomic::AtomicUsize);\n@@ -695,6 +724,21 @@ mod tests {\n         assert_eq!((*arc_v)[4], 5);\n     }\n \n+    #[test]\n+    fn test_arc_unique() {\n+        let mut x = Arc::new(10);\n+        assert!(unique(&mut x).is_some());\n+        {\n+            let y = x.clone();\n+            assert!(unique(&mut x).is_none());\n+        }\n+        {\n+            let z = x.downgrade();\n+            assert!(unique(&mut x).is_none());\n+        }\n+        assert!(unique(&mut x).is_some());\n+    }\n+\n     #[test]\n     fn test_cowarc_clone_make_unique() {\n         let mut cow0 = Arc::new(75);"}]}