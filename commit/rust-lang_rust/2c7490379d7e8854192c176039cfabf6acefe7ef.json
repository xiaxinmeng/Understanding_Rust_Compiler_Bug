{"sha": "2c7490379d7e8854192c176039cfabf6acefe7ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzQ5MDM3OWQ3ZTg4NTQxOTJjMTc2MDM5Y2ZhYmY2YWNlZmU3ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T08:27:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T08:27:16Z"}, "message": "Auto merge of #83225 - JohnTitor:rollup-4hnuhb8, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #82774 (Fix bad diagnostics for anon params with ref and/or qualified paths)\n - #82826 ((std::net::parser): Fix capitalization of IP version names)\n - #83092 (More precise spans for HIR paths)\n - #83124 (Do not insert impl_trait_in_bindings opaque definitions twice.)\n - #83202 (Show details in cfg version unstable book)\n - #83203 (Don't warn about old rustdoc lint names (temporarily))\n - #83206 (Update books)\n - #83219 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b3a0d6ad0fa86be3b2e4f87f3604a7c4503e92da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a0d6ad0fa86be3b2e4f87f3604a7c4503e92da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7490379d7e8854192c176039cfabf6acefe7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7490379d7e8854192c176039cfabf6acefe7ef", "html_url": "https://github.com/rust-lang/rust/commit/2c7490379d7e8854192c176039cfabf6acefe7ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7490379d7e8854192c176039cfabf6acefe7ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c341226ad3780c11b1f29f6da8172b1d653f9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c341226ad3780c11b1f29f6da8172b1d653f9ef", "html_url": "https://github.com/rust-lang/rust/commit/0c341226ad3780c11b1f29f6da8172b1d653f9ef"}, {"sha": "95bbcdb8c7ff8dd76b702465582e0edf5db232e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bbcdb8c7ff8dd76b702465582e0edf5db232e1", "html_url": "https://github.com/rust-lang/rust/commit/95bbcdb8c7ff8dd76b702465582e0edf5db232e1"}], "stats": {"total": 580, "additions": 353, "deletions": 227}, "files": [{"sha": "005ac8e4521efd63d0956f4f0fb7ed58e39c72f9", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -149,9 +149,17 @@ impl PathSegment {\n     pub fn from_ident(ident: Ident) -> Self {\n         PathSegment { ident, id: DUMMY_NODE_ID, args: None }\n     }\n+\n     pub fn path_root(span: Span) -> Self {\n         PathSegment::from_ident(Ident::new(kw::PathRoot, span))\n     }\n+\n+    pub fn span(&self) -> Span {\n+        match &self.args {\n+            Some(args) => self.ident.span.to(args.span()),\n+            None => self.ident.span,\n+        }\n+    }\n }\n \n /// The arguments of a path segment."}, {"sha": "ef32a9924935fab12e7554f44d31c88225612cc4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 63, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -438,31 +438,6 @@ impl<'a> TokenStreamLowering<'a> {\n     }\n }\n \n-struct ImplTraitTypeIdVisitor<'a> {\n-    ids: &'a mut SmallVec<[NodeId; 1]>,\n-}\n-\n-impl Visitor<'_> for ImplTraitTypeIdVisitor<'_> {\n-    fn visit_ty(&mut self, ty: &Ty) {\n-        match ty.kind {\n-            TyKind::Typeof(_) | TyKind::BareFn(_) => return,\n-\n-            TyKind::ImplTrait(id, _) => self.ids.push(id),\n-            _ => {}\n-        }\n-        visit::walk_ty(self, ty);\n-    }\n-\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &PathSegment) {\n-        if let Some(ref p) = path_segment.args {\n-            if let GenericArgs::Parenthesized(_) = **p {\n-                return;\n-            }\n-        }\n-        visit::walk_path_segment(self, path_span, path_segment)\n-    }\n-}\n-\n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_crate(mut self, c: &Crate) -> hir::Crate<'hir> {\n         /// Full-crate AST visitor that inserts into a fresh\n@@ -1789,14 +1764,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> (hir::Local<'hir>, SmallVec<[NodeId; 1]>) {\n-        let mut ids = SmallVec::<[NodeId; 1]>::new();\n-        if self.sess.features_untracked().impl_trait_in_bindings {\n-            if let Some(ref ty) = l.ty {\n-                let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n-                visitor.visit_ty(ty);\n-            }\n-        }\n+    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n         let ty = l.ty.as_ref().map(|t| {\n             let mut capturable_lifetimes;\n             self.lower_ty(\n@@ -1815,17 +1783,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);\n-        (\n-            hir::Local {\n-                hir_id,\n-                ty,\n-                pat: self.lower_pat(&l.pat),\n-                init,\n-                span: l.span,\n-                source: hir::LocalSource::Normal,\n-            },\n-            ids,\n-        )\n+        hir::Local {\n+            hir_id,\n+            ty,\n+            pat: self.lower_pat(&l.pat),\n+            init,\n+            span: l.span,\n+            source: hir::LocalSource::Normal,\n+        }\n     }\n \n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n@@ -2445,27 +2410,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n         let (hir_id, kind) = match s.kind {\n             StmtKind::Local(ref l) => {\n-                let (l, item_ids) = self.lower_local(l);\n-                let mut ids: SmallVec<[hir::Stmt<'hir>; 1]> = item_ids\n-                    .into_iter()\n-                    .map(|item_id| {\n-                        let item_id = hir::ItemId {\n-                            // All the items that `lower_local` finds are `impl Trait` types.\n-                            def_id: self.lower_node_id(item_id).expect_owner(),\n-                        };\n-                        self.stmt(s.span, hir::StmtKind::Item(item_id))\n-                    })\n-                    .collect();\n+                let l = self.lower_local(l);\n                 let hir_id = self.lower_node_id(s.id);\n                 self.alias_attrs(hir_id, l.hir_id);\n-                ids.push({\n-                    hir::Stmt {\n-                        hir_id,\n-                        kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                        span: s.span,\n-                    }\n-                });\n-                return ids;\n+                return smallvec![hir::Stmt {\n+                    hir_id,\n+                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n+                    span: s.span,\n+                }];\n             }\n             StmtKind::Item(ref it) => {\n                 // Can only use the ID once."}, {"sha": "46dac2f1af4f407fe67c75fa3f6971a429277916", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -30,6 +30,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let partial_res =\n             self.resolver.get_partial_res(id).unwrap_or_else(|| PartialRes::new(Res::Err));\n \n+        let path_span_lo = p.span.shrink_to_lo();\n         let proj_start = p.segments.len() - partial_res.unresolved_segments();\n         let path = self.arena.alloc(hir::Path {\n             res: self.lower_res(partial_res.base_res()),\n@@ -108,7 +109,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     )\n                 },\n             )),\n-            span: p.span,\n+            span: p.segments[..proj_start]\n+                .last()\n+                .map_or(path_span_lo, |segment| path_span_lo.to(segment.span())),\n         });\n \n         // Simple case, either no projections, or only fully-qualified.\n@@ -127,7 +130,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // e.g., `Vec` in `Vec::new` or `<I as Iterator>::Item` in\n             // `<I as Iterator>::Item::default`.\n             let new_id = self.next_id();\n-            self.arena.alloc(self.ty_path(new_id, p.span, hir::QPath::Resolved(qself, path)))\n+            self.arena.alloc(self.ty_path(new_id, path.span, hir::QPath::Resolved(qself, path)))\n         };\n \n         // Anything after the base path are associated \"extensions\",\n@@ -141,7 +144,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         //   3. `<<std::vec::Vec<T>>::IntoIter>::Item`\n         // * final path is `<<<std::vec::Vec<T>>::IntoIter>::Item>::clone`\n         for (i, segment) in p.segments.iter().enumerate().skip(proj_start) {\n-            let segment = self.arena.alloc(self.lower_path_segment(\n+            let hir_segment = self.arena.alloc(self.lower_path_segment(\n                 p.span,\n                 segment,\n                 param_mode,\n@@ -150,7 +153,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 itctx.reborrow(),\n                 None,\n             ));\n-            let qpath = hir::QPath::TypeRelative(ty, segment);\n+            let qpath = hir::QPath::TypeRelative(ty, hir_segment);\n \n             // It's finished, return the extension of the right node type.\n             if i == p.segments.len() - 1 {\n@@ -159,7 +162,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             // Wrap the associated extension in another type node.\n             let new_id = self.next_id();\n-            ty = self.arena.alloc(self.ty_path(new_id, p.span, qpath));\n+            ty = self.arena.alloc(self.ty_path(new_id, path_span_lo.to(segment.span()), qpath));\n         }\n \n         // We should've returned in the for loop above."}, {"sha": "6f46a19090abc5f375d654c0ec5a8c82afba48d4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1809,7 +1809,7 @@ impl<'hir> QPath<'hir> {\n     pub fn span(&self) -> Span {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n-            QPath::TypeRelative(_, ps) => ps.ident.span,\n+            QPath::TypeRelative(qself, ps) => qself.span.to(ps.ident.span),\n             QPath::LangItem(_, span) => span,\n         }\n     }"}, {"sha": "ad15af9ab3f2d23bd68cff7befa80c3e5f4d93b3", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -104,7 +104,7 @@ pub fn report_object_safety_error(\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n \n-    if tcx.sess.trait_methods_not_found.borrow().contains(&span) {\n+    if tcx.sess.trait_methods_not_found.borrow().iter().any(|full_span| full_span.contains(span)) {\n         // Avoid emitting error caused by non-existing method (#58734)\n         err.cancel();\n     }"}, {"sha": "3ba687124ae5800c1f95517041865dd7340907d3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -100,6 +100,11 @@ enum TargetLint {\n     /// Lint with this name existed previously, but has been removed/deprecated.\n     /// The string argument is the reason for removal.\n     Removed(String),\n+\n+    /// A lint name that should give no warnings and have no effect.\n+    ///\n+    /// This is used by rustc to avoid warning about old rustdoc lints before rustdoc registers them as tool lints.\n+    Ignored,\n }\n \n pub enum FindLintError {\n@@ -266,6 +271,33 @@ impl LintStore {\n         }\n     }\n \n+    /// This lint should be available with either the old or the new name.\n+    ///\n+    /// Using the old name will not give a warning.\n+    /// You must register a lint with the new name before calling this function.\n+    #[track_caller]\n+    pub fn register_alias(&mut self, old_name: &str, new_name: &str) {\n+        let target = match self.by_name.get(new_name) {\n+            Some(&Id(lint_id)) => lint_id,\n+            _ => bug!(\"cannot add alias {} for lint {} that does not exist\", old_name, new_name),\n+        };\n+        match self.by_name.insert(old_name.to_string(), Id(target)) {\n+            None | Some(Ignored) => {}\n+            Some(x) => bug!(\"duplicate specification of lint {} (was {:?})\", old_name, x),\n+        }\n+    }\n+\n+    /// This lint should give no warning and have no effect.\n+    ///\n+    /// This is used by rustc to avoid warning about old rustdoc lints before rustdoc registers them as tool lints.\n+    #[track_caller]\n+    pub fn register_ignored(&mut self, name: &str) {\n+        if self.by_name.insert(name.to_string(), Ignored).is_some() {\n+            bug!(\"duplicate specification of lint {}\", name);\n+        }\n+    }\n+\n+    /// This lint has been renamed; warn about using the new name and apply the lint.\n     #[track_caller]\n     pub fn register_renamed(&mut self, old_name: &str, new_name: &str) {\n         let target = match self.by_name.get(new_name) {\n@@ -284,6 +316,7 @@ impl LintStore {\n             Some(&Id(lint_id)) => Ok(vec![lint_id]),\n             Some(&Renamed(_, lint_id)) => Ok(vec![lint_id]),\n             Some(&Removed(_)) => Err(FindLintError::Removed),\n+            Some(&Ignored) => Ok(vec![]),\n             None => loop {\n                 return match self.lint_groups.get(lint_name) {\n                     Some(LintGroup { lint_ids, depr, .. }) => {\n@@ -427,6 +460,7 @@ impl LintStore {\n                 }\n             },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n+            Some(&Ignored) => CheckLintNameResult::Ok(&[]),\n         }\n     }\n "}, {"sha": "4c3dbcabc88a6edd0fadd5237ae89039a81dc7db", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -340,7 +340,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         \"non_autolinks\",\n     ];\n     for rustdoc_lint in RUSTDOC_LINTS {\n-        store.register_removed(rustdoc_lint, &format!(\"use `rustdoc::{}` instead\", rustdoc_lint));\n+        store.register_ignored(rustdoc_lint);\n     }\n     store.register_removed(\n         \"intra_doc_link_resolution_failure\","}, {"sha": "7dc9014d3042fc5a3a057b8eb3adc87bae5d3738", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -52,6 +52,7 @@ fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V\n     if i >= len {\n         map.extend(repeat(None).take(i - len + 1));\n     }\n+    debug_assert!(map[k].is_none());\n     map[k] = Some(v);\n }\n \n@@ -216,9 +217,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             // Overwrite the dummy hash with the real HIR owner hash.\n             nodes.hash = hash;\n \n-            // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n-            //assert!(data.signature.is_none());\n-\n+            debug_assert!(data.signature.is_none());\n             data.signature =\n                 Some(self.arena.alloc(Owner { parent: entry.parent, node: entry.node }));\n "}, {"sha": "77e85c06ff5aea1a4774930830c223ca0b7fa068", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 72, "deletions": 32, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -640,7 +640,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut err) => {\n-                    // We could't parse generic parameters, unlikely to be a turbofish. Rely on\n+                    // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n                     *self = snapshot;\n@@ -1242,7 +1242,7 @@ impl<'a> Parser<'a> {\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n-            // This needs to be handled separatedly from the next arm to avoid\n+            // This needs to be handled separately from the next arm to avoid\n             // interpreting `await { <expr> }?` as `<expr>?.await`.\n             self.parse_block_expr(None, self.token.span, BlockCheckMode::Default, AttrVec::new())\n         } else {\n@@ -1613,42 +1613,82 @@ impl<'a> Parser<'a> {\n                 Applicability::HasPlaceholders,\n             );\n             return Some(ident);\n-        } else if let PatKind::Ident(_, ident, _) = pat.kind {\n-            if require_name\n-                && (self.token == token::Comma\n-                    || self.token == token::Lt\n-                    || self.token == token::CloseDelim(token::Paren))\n-            {\n-                // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n-                if first_param {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a `self` type, give it a parameter name\",\n-                        format!(\"self: {}\", ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+        } else if require_name\n+            && (self.token == token::Comma\n+                || self.token == token::Lt\n+                || self.token == token::CloseDelim(token::Paren))\n+        {\n+            let rfc_note = \"anonymous parameters are removed in the 2018 edition (see RFC 1685)\";\n+\n+            let (ident, self_sugg, param_sugg, type_sugg) = match pat.kind {\n+                PatKind::Ident(_, ident, _) => (\n+                    ident,\n+                    format!(\"self: {}\", ident),\n+                    format!(\"{}: TypeName\", ident),\n+                    format!(\"_: {}\", ident),\n+                ),\n+                // Also catches `fn foo(&a)`.\n+                PatKind::Ref(ref pat, mutab)\n+                    if matches!(pat.clone().into_inner().kind, PatKind::Ident(..)) =>\n+                {\n+                    match pat.clone().into_inner().kind {\n+                        PatKind::Ident(_, ident, _) => {\n+                            let mutab = mutab.prefix_str();\n+                            (\n+                                ident,\n+                                format!(\"self: &{}{}\", mutab, ident),\n+                                format!(\"{}: &{}TypeName\", ident, mutab),\n+                                format!(\"_: &{}{}\", mutab, ident),\n+                            )\n+                        }\n+                        _ => unreachable!(),\n+                    }\n                 }\n-                // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n-                // `fn foo(HashMap: TypeName<u32>)`.\n-                if self.token != token::Lt {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a parameter name, give it a type\",\n-                        format!(\"{}: TypeName\", ident),\n-                        Applicability::HasPlaceholders,\n-                    );\n+                _ => {\n+                    // Otherwise, try to get a type and emit a suggestion.\n+                    if let Some(ty) = pat.to_ty() {\n+                        err.span_suggestion_verbose(\n+                            pat.span,\n+                            \"explicitly ignore the parameter name\",\n+                            format!(\"_: {}\", pprust::ty_to_string(&ty)),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(rfc_note);\n+                    }\n+\n+                    return None;\n                 }\n+            };\n+\n+            // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n+            if first_param {\n                 err.span_suggestion(\n                     pat.span,\n-                    \"if this is a type, explicitly ignore the parameter name\",\n-                    format!(\"_: {}\", ident),\n-                    Applicability::MachineApplicable,\n+                    \"if this is a `self` type, give it a parameter name\",\n+                    self_sugg,\n+                    Applicability::MaybeIncorrect,\n                 );\n-                err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-\n-                // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n-                return if self.token == token::Lt { None } else { Some(ident) };\n             }\n+            // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n+            // `fn foo(HashMap: TypeName<u32>)`.\n+            if self.token != token::Lt {\n+                err.span_suggestion(\n+                    pat.span,\n+                    \"if this is a parameter name, give it a type\",\n+                    param_sugg,\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+            err.span_suggestion(\n+                pat.span,\n+                \"if this is a type, explicitly ignore the parameter name\",\n+                type_sugg,\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(rfc_note);\n+\n+            // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n+            return if self.token == token::Lt { None } else { Some(ident) };\n         }\n         None\n     }"}, {"sha": "a973b56f7d62c9ccea11b82928dd791dd324314a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1414,8 +1414,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         name: Symbol,\n     ) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n-        if let (Some(_), Ok(snippet)) = (\n-            self.tcx().sess.confused_type_with_std_module.borrow().get(&span),\n+        if let (true, Ok(snippet)) = (\n+            self.tcx()\n+                .sess\n+                .confused_type_with_std_module\n+                .borrow()\n+                .keys()\n+                .any(|full_span| full_span.contains(span)),\n             self.tcx().sess.source_map().span_to_snippet(span),\n         ) {\n             err.span_suggestion("}, {"sha": "528a6d1bd52e2e612a150cae3b3babb9a3666c24", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         qpath: &QPath<'_>,\n         hir_id: hir::HirId,\n     ) -> Option<(&'tcx ty::VariantDef, Ty<'tcx>)> {\n-        let path_span = qpath.qself_span();\n+        let path_span = qpath.span();\n         let (def, ty) = self.finish_resolving_struct_path(qpath, path_span, hir_id);\n         let variant = match def {\n             Res::Err => {"}, {"sha": "7064ed3ed236d9162b73fee4e4a2d03d1326d787", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -35,7 +35,7 @@ macro_rules! impl_helper {\n impl_helper! { u8 u16 u32 }\n \n struct Parser<'a> {\n-    // parsing as ASCII, so can use byte array\n+    // Parsing as ASCII, so can use byte array.\n     state: &'a [u8],\n }\n \n@@ -44,7 +44,7 @@ impl<'a> Parser<'a> {\n         Parser { state: input.as_bytes() }\n     }\n \n-    /// Run a parser, and restore the pre-parse state if it fails\n+    /// Run a parser, and restore the pre-parse state if it fails.\n     fn read_atomically<T, F>(&mut self, inner: F) -> Option<T>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n@@ -126,7 +126,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPv4 address\n+    /// Read an IPv4 address.\n     fn read_ipv4_addr(&mut self) -> Option<Ipv4Addr> {\n         self.read_atomically(|p| {\n             let mut groups = [0; 4];\n@@ -139,18 +139,18 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPV6 Address\n+    /// Read an IPv6 Address.\n     fn read_ipv6_addr(&mut self) -> Option<Ipv6Addr> {\n-        /// Read a chunk of an ipv6 address into `groups`. Returns the number\n+        /// Read a chunk of an IPv6 address into `groups`. Returns the number\n         /// of groups read, along with a bool indicating if an embedded\n-        /// trailing ipv4 address was read. Specifically, read a series of\n-        /// colon-separated ipv6 groups (0x0000 - 0xFFFF), with an optional\n-        /// trailing embedded ipv4 address.\n+        /// trailing IPv4 address was read. Specifically, read a series of\n+        /// colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n+        /// trailing embedded IPv4 address.\n         fn read_groups(p: &mut Parser<'_>, groups: &mut [u16]) -> (usize, bool) {\n             let limit = groups.len();\n \n             for (i, slot) in groups.iter_mut().enumerate() {\n-                // Try to read a trailing embedded ipv4 address. There must be\n+                // Try to read a trailing embedded IPv4 address. There must be\n                 // at least two groups left.\n                 if i < limit - 1 {\n                     let ipv4 = p.read_separator(':', i, |p| p.read_ipv4_addr());\n@@ -188,8 +188,8 @@ impl<'a> Parser<'a> {\n                 return None;\n             }\n \n-            // read `::` if previous code parsed less than 8 groups\n-            // `::` indicates one or more groups of 16 bits of zeros\n+            // Read `::` if previous code parsed less than 8 groups.\n+            // `::` indicates one or more groups of 16 bits of zeros.\n             p.read_given_char(':')?;\n             p.read_given_char(':')?;\n \n@@ -206,28 +206,28 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IP Address, either IPV4 or IPV6.\n+    /// Read an IP Address, either IPv4 or IPv6.\n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n         self.read_ipv4_addr().map(IpAddr::V4).or_else(move || self.read_ipv6_addr().map(IpAddr::V6))\n     }\n \n-    /// Read a : followed by a port in base 10.\n+    /// Read a `:` followed by a port in base 10.\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n             p.read_given_char(':')?;\n             p.read_number(10, None)\n         })\n     }\n \n-    /// Read a % followed by a scope id in base 10.\n+    /// Read a `%` followed by a scope ID in base 10.\n     fn read_scope_id(&mut self) -> Option<u32> {\n         self.read_atomically(|p| {\n             p.read_given_char('%')?;\n             p.read_number(10, None)\n         })\n     }\n \n-    /// Read an IPV4 address with a port\n+    /// Read an IPv4 address with a port.\n     fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {\n         self.read_atomically(|p| {\n             let ip = p.read_ipv4_addr()?;\n@@ -236,7 +236,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPV6 address with a port\n+    /// Read an IPv6 address with a port.\n     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n         self.read_atomically(|p| {\n             p.read_given_char('[')?;"}, {"sha": "fc2f690fc16592abbead2360cfc0a42f5df78052", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit 0f87daf683ae3de3cb725faecb11b7e7e89f0e5a\n+Subproject commit fc2f690fc16592abbead2360cfc0a42f5df78052"}, {"sha": "f61685755fad7d3b88b4645adfbf461d500563a2", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit a96d096cffe5fa2c84af1b4b61e1492f839bb2e1\n+Subproject commit f61685755fad7d3b88b4645adfbf461d500563a2"}, {"sha": "6fe476943afd53a9a6e91f38a6ea7bb48811d8ff", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit adca786547d08fe676b2fc7a6f08c2ed5280ca38\n+Subproject commit 6fe476943afd53a9a6e91f38a6ea7bb48811d8ff"}, {"sha": "e32a2f928f8b78d534bca2b9e7736413314dc556", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit 3b6fe80c205d2a2b5dc8a276192bbce9eeb9e9cf\n+Subproject commit e32a2f928f8b78d534bca2b9e7736413314dc556"}, {"sha": "eead22c6c030fa4f3a167d1798658c341199e2ae", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit 3e0d98790c9126517fa1c604dc3678f396e92a27\n+Subproject commit eead22c6c030fa4f3a167d1798658c341199e2ae"}, {"sha": "67ebd4b55dba44edfc351621cef6e5e758169c55", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit c431f8c29a41413dddcb3bfa0d71c9cabe366317\n+Subproject commit 67ebd4b55dba44edfc351621cef6e5e758169c55"}, {"sha": "a6ec42cecba8a1e165f6bdf2697a02fb391cbe28", "filename": "src/doc/unstable-book/src/language-features/cfg-version.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -7,19 +7,20 @@ The tracking issue for this feature is: [#64796]\n ------------------------\n \n The `cfg_version` feature makes it possible to execute different code\n-depending on the compiler version.\n+depending on the compiler version. It will return true if the compiler\n+version is greater than or equal to the specified version.\n \n ## Examples\n \n ```rust\n #![feature(cfg_version)]\n \n-#[cfg(version(\"1.42\"))]\n+#[cfg(version(\"1.42\"))] // 1.42 and above\n fn a() {\n     // ...\n }\n \n-#[cfg(not(version(\"1.42\")))]\n+#[cfg(not(version(\"1.42\")))] // 1.41 and below\n fn a() {\n     // ...\n }"}, {"sha": "ffa2f7a47fdd8bba652a49e6d4146e28672b2fd9", "filename": "src/librustdoc/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -181,7 +181,7 @@ crate fn register_lints(_sess: &Session, lint_store: &mut LintStore) {\n     );\n     for lint in &*RUSTDOC_LINTS {\n         let name = lint.name_lower();\n-        lint_store.register_renamed(&name.replace(\"rustdoc::\", \"\"), &name);\n+        lint_store.register_alias(&name.replace(\"rustdoc::\", \"\"), &name);\n     }\n     lint_store\n         .register_renamed(\"intra_doc_link_resolution_failure\", \"rustdoc::broken_intra_doc_links\");"}, {"sha": "8c61c1ccb6a6534e9ebf2a6e60c25292052ce7a1", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1,5 +1,6 @@\n // compile-args: --crate-type lib\n #![deny(broken_intra_doc_links)]\n-//~^ WARNING renamed\n+// FIXME: the old names for rustdoc lints should warn by default once `rustdoc::` makes it to the\n+// stable channel.\n //! [x]\n //~^ ERROR unresolved link"}, {"sha": "8a12991558a4c0a64e124e94e7a0981c1ea76ac8", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1,13 +1,5 @@\n-warning: lint `broken_intra_doc_links` has been renamed to `rustdoc::broken_intra_doc_links`\n-  --> $DIR/renamed-lint-still-applies.rs:2:9\n-   |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `rustdoc::broken_intra_doc_links`\n-   |\n-   = note: `#[warn(renamed_and_removed_lints)]` on by default\n-\n error: unresolved link to `x`\n-  --> $DIR/renamed-lint-still-applies.rs:4:6\n+  --> $DIR/renamed-lint-still-applies.rs:5:6\n    |\n LL | //! [x]\n    |      ^ no item named `x` in scope\n@@ -17,7 +9,8 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(broken_intra_doc_links)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "a05c0c81168b9450f8fd258c4e2e526a28892c14", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -10,7 +10,8 @@\n //~^ ERROR renamed to `rustdoc::broken_intra_doc_links`\n \n #![deny(non_autolinks)]\n-//~^ ERROR renamed to `rustdoc::non_autolinks`\n+// FIXME: the old names for rustdoc lints should warn by default once `rustdoc::` makes it to the\n+// stable channel.\n \n #![deny(rustdoc)]\n //~^ ERROR removed: use `rustdoc::all` instead"}, {"sha": "98bfb83c704ae222f61672beb4be48c04af61632", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -28,25 +28,19 @@ note: the lint level is defined here\n LL | #![deny(renamed_and_removed_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `non_autolinks` has been renamed to `rustdoc::non_autolinks`\n-  --> $DIR/unknown-renamed-lints.rs:12:9\n-   |\n-LL | #![deny(non_autolinks)]\n-   |         ^^^^^^^^^^^^^ help: use the new name: `rustdoc::non_autolinks`\n-\n error: lint `rustdoc` has been removed: use `rustdoc::all` instead\n-  --> $DIR/unknown-renamed-lints.rs:15:9\n+  --> $DIR/unknown-renamed-lints.rs:16:9\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n \n error: unknown lint: `rustdoc::intra_doc_link_resolution_failure`\n-  --> $DIR/unknown-renamed-lints.rs:19:9\n+  --> $DIR/unknown-renamed-lints.rs:20:9\n    |\n LL | #![deny(rustdoc::intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Compilation failed, aborting rustdoc\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "95533cf3dfbf1710956a34018e10e59aa124d5dd", "filename": "src/test/ui/anon-params/anon-params-denied-2018.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -5,6 +5,20 @@\n trait T {\n     fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n+    // Also checks with `&`\n+    fn foo_with_ref(&mut i32);\n+    //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n+\n+    fn foo_with_qualified_path(<Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n+    fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n+    fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `,`\n+    //~| ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`\n     //~| ERROR expected one of `:`"}, {"sha": "b53640cd65ba9cc9d50aad406b1cec4b35652381", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -18,8 +18,76 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n+error: expected one of `:`, `@`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:9:29\n+   |\n+LL |     fn foo_with_ref(&mut i32);\n+   |                             ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn foo_with_ref(self: &mut i32);\n+   |                     ^^^^^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL |     fn foo_with_ref(i32: &mut TypeName);\n+   |                     ^^^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_ref(_: &mut i32);\n+   |                     ^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:12:47\n+   |\n+LL |     fn foo_with_qualified_path(<Bar as T>::Baz);\n+   |                                               ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path(_: <Bar as T>::Baz);\n+   |                                ^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:15:56\n+   |\n+LL |     fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n+   |                                                        ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path_and_ref(_: &<Bar as T>::Baz);\n+   |                                        ^^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `,`\n+  --> $DIR/anon-params-denied-2018.rs:18:57\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                                         ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(_: <Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                          ^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:18:74\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                                                          ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, _: <Bar as T>::Baz);\n+   |                                                           ^^^^^^^^^^^^^^^^^^\n+\n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:8:36\n+  --> $DIR/anon-params-denied-2018.rs:22:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                    ^ expected one of `:`, `@`, or `|`\n@@ -39,7 +107,7 @@ LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/anon-params-denied-2018.rs:8:44\n+  --> $DIR/anon-params-denied-2018.rs:22:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                            ^ expected one of `:`, `@`, or `|`\n@@ -55,7 +123,7 @@ LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:13:22\n+  --> $DIR/anon-params-denied-2018.rs:27:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n    |                      ^ expected one of `:`, `@`, or `|`\n@@ -70,5 +138,5 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n    |                     ^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "a15219679788dbe5ac04bb34e9ac70e64bb42b3a", "filename": "src/test/ui/bad/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -5,4 +5,5 @@ pub fn main() {\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the size for values of type\n     //~| ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "768893d6e25d475dc932f4a163f4abaff477230a", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -31,7 +31,20 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n    = note: required by `Vec::<T>::new`\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n+  --> $DIR/bad-sized.rs:4:37\n+   |\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                                     ^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |                - required by this bound in `Vec`\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0225, E0277.\n For more information about an error, try `rustc --explain E0225`."}, {"sha": "5f278f94b93bd9a41752c48f7ea0f419e595060e", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -10,7 +10,7 @@ warning: use of deprecated struct `MustUseDeprecated`\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n LL |     MustUseDeprecated::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated struct `MustUseDeprecated`\n   --> $DIR/cfg-attr-multi-true.rs:13:17"}, {"sha": "f7d44f21d3becb7e600b88d45d82a529a1dc47da", "filename": "src/test/ui/issues/issue-78622.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -2,7 +2,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/issue-78622.rs:5:5\n    |\n LL |     S::A::<f> {}\n-   |     ^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n+   |     ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error: aborting due to previous error\n "}, {"sha": "ecd6155b7690968a05421b113134d672f943da40", "filename": "src/test/ui/lint/rustdoc-renamed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -11,4 +11,5 @@\n #![deny(intra_doc_link_resolution_failure)]\n //~^ ERROR removed: use `rustdoc::broken_intra_doc_links`\n #![deny(non_autolinks)]\n-//~^ ERROR removed: use `rustdoc::non_autolinks`\n+// FIXME: the old names for rustdoc lints should warn by default once `rustdoc::` makes it to the\n+// stable channel."}, {"sha": "096e867aa16db3a0d112c69a5f3ab5bbb12e894d", "filename": "src/test/ui/lint/rustdoc-renamed.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -10,11 +10,5 @@ note: the lint level is defined here\n LL | #![deny(renamed_and_removed_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `non_autolinks` has been removed: use `rustdoc::non_autolinks` instead\n-  --> $DIR/rustdoc-renamed.rs:13:9\n-   |\n-LL | #![deny(non_autolinks)]\n-   |         ^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "8400aab308e0673de2e06a80033d200f0919890b", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -56,7 +56,7 @@ LL | struct Inline<T>\n    |               - required by this bound in `Inline`\n ...\n LL |     let dst = Inline::<dyn Debug>::new(0);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |               ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "a64cb82305a4825dce162574216ae23a708495df", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -13,7 +13,7 @@ help: the lifetime requirements from the `impl` do not correspond to the require\n   --> $DIR/issue-75361-mismatched-impl.rs:12:55\n    |\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n-   |                                                       ^^^^^^^^^^^^^^ consider borrowing this type parameter in the trait\n+   |                                                       ^^^^ consider borrowing this type parameter in the trait\n \n error: aborting due to previous error\n "}, {"sha": "4ffee657cabbeb64ad5252c647cc2ecf5ac42f50", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -9,6 +9,20 @@ error: expected one of `:`, `@`, or `|`, found `)`\n    |\n LL | fn test(&'a str) {\n    |                ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn test(self: &str) {\n+   |         ^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL | fn test(str: &TypeName) {\n+   |         ^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn test(_: &str) {\n+   |         ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8585014fd6d827edb82cbd4fed06671b8baef54", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^ private type\n+   |         ^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "11bcb9074d09707ce3675f3ac3340c331edd70a6", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -56,7 +56,7 @@ error: type `Priv` is private\n   --> $DIR/private-inferred-type.rs:104:5\n    |\n LL |     m::Pub::INHERENT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n+   |     ^^^^^^ private type\n \n error: type `Priv` is private\n   --> $DIR/private-inferred-type.rs:105:5"}, {"sha": "83313b34316b4535c0fe8ad750ccf31c9ce83137", "filename": "src/test/ui/regions/issue-28848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -2,7 +2,7 @@ error[E0478]: lifetime bound not satisfied\n   --> $DIR/issue-28848.rs:10:5\n    |\n LL |     Foo::<'a, 'b>::xmute(u)\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the function body at 9:16\n   --> $DIR/issue-28848.rs:9:16"}, {"sha": "45194413cceec28e205953220a3c1fa28f154799", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -100,7 +100,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:160:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(1);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:160:12\n@@ -124,7 +124,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:166:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(0);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:166:12\n@@ -136,7 +136,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:171:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(1);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:171:12\n@@ -160,7 +160,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:178:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:178:12"}, {"sha": "0b1b6a5e3af280b6e111ff3331bbb4ecaa0730dc", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -14,7 +14,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n    |\n LL |     let z = T::A::<u8> {};\n-   |             ^^^^^^^^^^ not a struct\n+   |             ^^^^ not a struct\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:18:9\n@@ -38,7 +38,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:33:13\n    |\n LL |     let z = S::A::<u8> {};\n-   |             ^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n+   |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:35:9"}, {"sha": "b8ef230b44bb7661f2408aafcab9da07eb3cddb2", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n-   |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              ^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    | \n   ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |"}, {"sha": "7f4c80f50e2674121381be72fedbf67bee80e4a5", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -2,12 +2,12 @@ error[E0223]: ambiguous associated type\n   --> $DIR/suggest-std-when-using-type.rs:2:14\n    |\n LL |     let pi = f32::consts::PI;\n-   |              ^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^\n    |\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |     let pi = std::f32::consts::PI;\n-   |              ^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n   --> $DIR/suggest-std-when-using-type.rs:5:14"}, {"sha": "b7dad54a6d3a9367ac12a433917dae0e31c6974b", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -113,7 +113,7 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/item-privacy.rs:101:5\n    |\n LL |     C::A;\n-   |     ^^^^ `assoc_const::C` cannot be made into an object\n+   |     ^ `assoc_const::C` cannot be made into an object\n    |\n    = help: consider moving `C` to another trait\n    = help: consider moving `B` to another trait"}, {"sha": "c9518170222c0c5b37e3d80f5023cbc9ed089c90", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -31,7 +31,7 @@ LL | | }\n    | |_- type parameter `A` must be specified for this\n ...\n LL |       let e = Bar::<usize>::lol();\n-   |               ^^^^^^^^^^^^^^^^^ missing reference to `A`\n+   |               ^^^^^^^^^^^^ missing reference to `A`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "0c98a809025ac5d97339068ac971ec6e9a5f15b2", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -19,7 +19,7 @@ error[E0478]: lifetime bound not satisfied\n   --> $DIR/wf-static-method.rs:26:18\n    |\n LL |         let me = Self::make_me();\n-   |                  ^^^^^^^^^^^^^\n+   |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 23:10\n   --> $DIR/wf-static-method.rs:23:10"}, {"sha": "90691f2bfe9a50291a98983b1ed2feab51d5ca55", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -1 +1 @@\n-Subproject commit 32da9eaa5de5be241cf8096ca6b749a157194f77\n+Subproject commit 90691f2bfe9a50291a98983b1ed2feab51d5ca55"}, {"sha": "b94d5448d9238f7dd1cda66d2be02f4d4d0bfe5f", "filename": "src/tools/clippy/tests/ui/use_self.fixed", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -312,17 +312,18 @@ mod issue4140 {\n         fn try_from(value: T) -> Result<Self, Error<Self::From, Self::To>>;\n     }\n \n-    impl<F, T> TryFrom<F> for T\n-    where\n-        T: From<F>,\n-    {\n-        type From = Self;\n-        type To = Self;\n-\n-        fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n-            Ok(From::from(value))\n-        }\n-    }\n+    // FIXME: Suggested fix results in infinite recursion.\n+    // impl<F, T> TryFrom<F> for T\n+    // where\n+    //     T: From<F>,\n+    // {\n+    //     type From = Self::From;\n+    //     type To = Self::To;\n+\n+    //     fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n+    //         Ok(From::from(value))\n+    //     }\n+    // }\n \n     impl From<bool> for i64 {\n         type From = bool;"}, {"sha": "ac99c6d9d7bb1aa97bb8bdde293042fe8db4f349", "filename": "src/tools/clippy/tests/ui/use_self.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -312,17 +312,18 @@ mod issue4140 {\n         fn try_from(value: T) -> Result<Self, Error<Self::From, Self::To>>;\n     }\n \n-    impl<F, T> TryFrom<F> for T\n-    where\n-        T: From<F>,\n-    {\n-        type From = T::From;\n-        type To = T::To;\n-\n-        fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n-            Ok(From::from(value))\n-        }\n-    }\n+    // FIXME: Suggested fix results in infinite recursion.\n+    // impl<F, T> TryFrom<F> for T\n+    // where\n+    //     T: From<F>,\n+    // {\n+    //     type From = Self::From;\n+    //     type To = Self::To;\n+\n+    //     fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n+    //         Ok(From::from(value))\n+    //     }\n+    // }\n \n     impl From<bool> for i64 {\n         type From = bool;"}, {"sha": "a32a9b9157d7408e7aa58c75cb088c5621bd9588", "filename": "src/tools/clippy/tests/ui/use_self.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -157,22 +157,10 @@ LL |             Foo { value }\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:319:21\n-   |\n-LL |         type From = T::From;\n-   |                     ^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:320:19\n-   |\n-LL |         type To = T::To;\n-   |                   ^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:453:13\n+  --> $DIR/use_self.rs:454:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "d924f33797d299ee73793255dcb8ab1e0ff6b3d4", "filename": "src/tools/clippy/tests/ui/zero_sized_btreemap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_btreemap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_btreemap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_btreemap_values.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -83,7 +83,7 @@ error: map with zero-sized value type\n   --> $DIR/zero_sized_btreemap_values.rs:64:35\n    |\n LL |     let _: BTreeMap<String, ()> = BTreeMap::new();\n-   |                                   ^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^\n    |\n    = help: consider using a set instead\n "}, {"sha": "79770bf90d7012556666cd92eaf18c81cc09983d", "filename": "src/tools/clippy/tests/ui/zero_sized_hashmap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_hashmap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7490379d7e8854192c176039cfabf6acefe7ef/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_hashmap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fzero_sized_hashmap_values.stderr?ref=2c7490379d7e8854192c176039cfabf6acefe7ef", "patch": "@@ -83,7 +83,7 @@ error: map with zero-sized value type\n   --> $DIR/zero_sized_hashmap_values.rs:64:34\n    |\n LL |     let _: HashMap<String, ()> = HashMap::new();\n-   |                                  ^^^^^^^^^^^^\n+   |                                  ^^^^^^^\n    |\n    = help: consider using a set instead\n "}]}