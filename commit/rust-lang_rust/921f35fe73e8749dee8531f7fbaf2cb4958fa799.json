{"sha": "921f35fe73e8749dee8531f7fbaf2cb4958fa799", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMWYzNWZlNzNlODc0OWRlZTg1MzFmN2ZiYWYyY2I0OTU4ZmE3OTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T01:59:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:57Z"}, "message": "Reduce verbosity of suggestion message and mention lifetime in label", "tree": {"sha": "3321b59ac48a392ac59a7cc92c552e7b6f5f3efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3321b59ac48a392ac59a7cc92c552e7b6f5f3efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921f35fe73e8749dee8531f7fbaf2cb4958fa799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921f35fe73e8749dee8531f7fbaf2cb4958fa799", "html_url": "https://github.com/rust-lang/rust/commit/921f35fe73e8749dee8531f7fbaf2cb4958fa799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921f35fe73e8749dee8531f7fbaf2cb4958fa799/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e90f177cc530371a314f51f522a4c2e70885e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e90f177cc530371a314f51f522a4c2e70885e03", "html_url": "https://github.com/rust-lang/rust/commit/4e90f177cc530371a314f51f522a4c2e70885e03"}], "stats": {"total": 181, "additions": 95, "deletions": 86}, "files": [{"sha": "e9f165d309f8f6129a4f791fa9200e472016c78c", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -1,6 +1,5 @@\n //! Error Reporting for static impl Traits.\n \n-use crate::infer::error_reporting::msg_span_from_free_region;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use rustc_errors::{Applicability, ErrorReported};\n@@ -33,9 +32,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n                     let param_info = self.find_param_with_region(sup_r, sub_r)?;\n+                    let (lifetime_name, lifetime) = if sup_r.has_name() {\n+                        (sup_r.to_string(), format!(\"lifetime `{}`\", sup_r))\n+                    } else {\n+                        (\"'_\".to_owned(), \"the anonymous lifetime `'_`\".to_string())\n+                    };\n                     let mut err =\n                         self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n-                    err.span_label(param_info.param_ty_span, \"data with this lifetime...\");\n+                    err.span_label(\n+                        param_info.param_ty_span,\n+                        &format!(\"this data with {}...\", lifetime),\n+                    );\n                     debug!(\"try_report_static_impl_trait: param_info={:?}\", param_info);\n \n                     // We try to make the output have fewer overlapping spans if possible.\n@@ -60,10 +67,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         );\n                     }\n \n-                    let (lifetime, _) = msg_span_from_free_region(self.tcx(), sup_r);\n-\n-                    let lifetime_name =\n-                        if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n                     // only apply this suggestion onto functions with\n                     // explicit non-desugar'able return.\n                     if fn_return.span.desugaring_kind().is_none() {\n@@ -93,8 +96,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 {\n                                     err.span_suggestion_verbose(\n                                         span,\n-                                        \"consider changing the `impl Trait`'s explicit \\\n-                                         `'static` bound\",\n+                                        &format!(\n+                                            \"consider changing the `impl Trait`'s explicit \\\n+                                             `'static` bound to {}\",\n+                                            lifetime,\n+                                        ),\n                                         lifetime_name,\n                                         Applicability::MaybeIncorrect,\n                                     );\n@@ -118,40 +124,41 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                     );\n                                 };\n                             }\n-                            TyKind::TraitObject(_, lt) => {\n-                                match lt.name {\n-                                    LifetimeName::ImplicitObjectLifetimeDefault => {\n-                                        err.span_suggestion_verbose(\n-                                            fn_return.span.shrink_to_hi(),\n-                                            &format!(\n-                                                \"to permit non-static references in a trait object \\\n-                                                 value, you can add an explicit bound for {}\",\n-                                                lifetime,\n-                                            ),\n-                                            format!(\" + {}\", lifetime_name),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n-                                    _ => {\n-                                        err.span_suggestion_verbose(\n-                                            lt.span,\n+                            TyKind::TraitObject(_, lt) => match lt.name {\n+                                LifetimeName::ImplicitObjectLifetimeDefault => {\n+                                    err.span_suggestion_verbose(\n+                                        fn_return.span.shrink_to_hi(),\n+                                        &format!(\n+                                            \"to permit non-static references in a trait object \\\n+                                             value, you can add an explicit bound for {}\",\n+                                            lifetime,\n+                                        ),\n+                                        format!(\" + {}\", lifetime_name),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                                _ => {\n+                                    err.span_suggestion_verbose(\n+                                        lt.span,\n+                                        &format!(\n                                             \"consider changing the trait object's explicit \\\n-                                             `'static` bound\",\n-                                            lifetime_name,\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                        err.span_suggestion_verbose(\n-                                            param_info.param_ty_span,\n-                                            &format!(\n-                                                \"alternatively, set an explicit `'static` lifetime \\\n-                                                 in this parameter\",\n-                                            ),\n-                                            param_info.param_ty.to_string(),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n+                                             `'static` bound to {}\",\n+                                            lifetime,\n+                                        ),\n+                                        lifetime_name,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                    err.span_suggestion_verbose(\n+                                        param_info.param_ty_span,\n+                                        &format!(\n+                                            \"alternatively, set an explicit `'static` lifetime \\\n+                                             in this parameter\",\n+                                        ),\n+                                        param_info.param_ty.to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n                                 }\n-                            }\n+                            },\n                             _ => {}\n                         }\n                     }"}, {"sha": "fff43ae9f47bc4c8b77846155a6ffb032447307c", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^\n    |                               |\n-   |                               data with this lifetime...\n+   |                               this data with the anonymous lifetime `'_`...\n    |                               ...is captured here...\n LL |         foo(|| self.bar()).await;\n    |         --- ...and required to be `'static` by this"}, {"sha": "00b6ec38323c3833ed4bd169e6c70ce56d96ca90", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -5,9 +5,9 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----     ---------   ^ ...and is captured here\n    |              |        |\n    |              |        ...is required to be `'static` by this...\n-   |              data with this lifetime...\n+   |              this data with the anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n@@ -19,9 +19,9 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                    -------     ---------   ^ ...and is captured here\n    |                    |           |\n    |                    |           ...is required to be `'static` by this...\n-   |                    data with this lifetime...\n+   |                    this data with lifetime `'a`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 6:13\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n@@ -33,9 +33,9 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----     -------------------   ^ ...and is captured here\n    |               |        |\n    |               |        ...is required to be `'static` by this...\n-   |               data with this lifetime...\n+   |               this data with the anonymous lifetime `'_`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ^^\n@@ -51,9 +51,9 @@ LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------     -------------------   ^ ...and is captured here\n    |                     |           |\n    |                     |           ...is required to be `'static` by this...\n-   |                     data with this lifetime...\n+   |                     this data with lifetime `'a`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound\n+help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                             ^^\n@@ -77,9 +77,9 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      -------     --------------------------------   ^ ...and is captured here\n    |                      |           |\n    |                      |           ...is required to be `'static` by this...\n-   |                      data with this lifetime...\n+   |                      this data with lifetime `'a`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound\n+help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n    |                                                           ^^\n@@ -113,9 +113,9 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               |                         |        |\n    |               |                         |        ...and is captured here\n    |               |                         ...is required to be `'static` by this...\n-   |               data with this lifetime...\n+   |               this data with the anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 18:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n@@ -128,9 +128,9 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     |                            |        |\n    |                     |                            |        ...and is captured here\n    |                     |                            ...is required to be `'static` by this...\n-   |                     data with this lifetime...\n+   |                     this data with lifetime `'a`...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 21:14\n+help: to permit non-static references in a trait object value, you can add an explicit bound for lifetime `'a`\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n@@ -142,9 +142,10 @@ LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ----                                ---------^-\n    |               |                                   |        |\n    |               |                                   |        ...and is captured here\n-   |               data with this lifetime...          ...is required to be `'static` by this...\n+   |               |                                   ...is required to be `'static` by this...\n+   |               this data with the anonymous lifetime `'_`...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                        ^^\n@@ -160,9 +161,10 @@ LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     -------                                ---------^-\n    |                     |                                      |        |\n    |                     |                                      |        ...and is captured here\n-   |                     data with this lifetime...             ...is required to be `'static` by this...\n+   |                     |                                      ...is required to be `'static` by this...\n+   |                     this data with lifetime `'a`...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                                 ^^"}, {"sha": "67d4f60dff6f14b22c63b0f2fca56bbf9f139416", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -4,13 +4,13 @@ error: cannot infer an appropriate lifetime\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         -----     ----------------------- ...is required to be `'static` by this...\n    |                         |\n-   |                         data with this lifetime...\n+   |                         this data with the anonymous lifetime `'_`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n    |         ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n@@ -21,13 +21,13 @@ error: cannot infer an appropriate lifetime\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                        --------     ----------------------- ...is required to be `'static` by this...\n    |                        |\n-   |                        data with this lifetime...\n+   |                        this data with lifetime `'a`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n    |         ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the method body at 10:20\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ^^^^"}, {"sha": "c533a72dfc0140dd12d10328fef1974d980fc4da", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,14 +2,14 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/issue-16922.rs:4:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-   |                       -- data with this lifetime...\n+   |                       -- this data with the anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n    |     ---------^^^^^-\n    |     |        |\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^"}, {"sha": "6edef8086b9370041252ee58524bedbe2ca3f668", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,12 +2,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-   |             --------------- data with this lifetime...\n+   |             --------------- this data with the anonymous lifetime `'_`...\n ...\n LL |     ss.r\n    |     ^^^^ ...is captured and required to be `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #2 defined on the function body at 14:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^"}, {"sha": "4b08c4bff2ebc102b0a161de2561fdea47ddd85c", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,14 +2,14 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- data with this lifetime...\n+   |         ----- this data with the anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n    |                                     ---------^-\n    |                                     |        |\n    |                                     |        ...and is captured here\n    |                                     ...is required to be `'static` by this...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n@@ -22,14 +22,14 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- data with this lifetime...\n+   |         ----- this data with the anonymous lifetime `'_`...\n LL |     Box::new(v)\n    |     ---------^-\n    |     |        |\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n@@ -42,15 +42,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n-   |         ----- data with this lifetime...\n+   |         ----- this data with the anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n    |     ---------^-\n    |     |        |\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 16:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^"}, {"sha": "894be310fd14b120829d5574bb044f8eb43636bc", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,14 +2,14 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-   |                         ------------------ data with this lifetime...\n+   |                         ------------------ this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n    |     ------^^^---------------\n    |     |     |\n    |     |     ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {\n    |                                                            ^^"}, {"sha": "ce261d78c2909063d9e6ffa7dfd4ed8a04906800", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,14 +2,14 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |                   ---------------- data with this lifetime...\n+   |                   ---------------- this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n    |     ------^^^---------------\n    |     |     |\n    |     |     ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {\n    |                                                    ^^"}, {"sha": "a0df1815247c3859bc1a635e48d80914d611eb19", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,15 +2,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n-   |                   ------ data with this lifetime...\n+   |                   ------ this data with the anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n    |     ---------^^^^^^^^^^^^^^-\n    |     |        |\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: consider changing the trait object's explicit `'static` bound\n+help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n    |                                                           ^^"}, {"sha": "5520341b5b1c33f00eaa97c1d7212cbc8f943e23", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ^^^^  ----------     ---------- ...and required to be `'static` by this\n    |                |     |\n-   |                |     data with this lifetime...\n+   |                |     this data with the anonymous lifetime `'_`...\n    |                ...is captured here...\n \n error: aborting due to previous error"}, {"sha": "5374929f3a45fdb27bd0da61ce6231c2d0b06901", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -5,9 +5,9 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ----------     ----------   ^^^^ ...and is captured here\n    |                |              |\n    |                |              ...is required to be `'static` by this...\n-   |                data with this lifetime...\n+   |                this data with the anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ^^^^"}, {"sha": "471f3cd14aa3e508e0ca302a739b76c34fba73cc", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -12,14 +12,14 @@ error: cannot infer an appropriate lifetime\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n    |                            ------     ------------- ...is required to be `'static` by this...\n    |                            |\n-   |                            data with this lifetime...\n+   |                            this data with the anonymous lifetime `'_`...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^ ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 15:1\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ^^^^"}, {"sha": "5fd03f9770e5df701d9c752bfee8eaa2d5bd4a33", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921f35fe73e8749dee8531f7fbaf2cb4958fa799/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=921f35fe73e8749dee8531f7fbaf2cb4958fa799", "patch": "@@ -2,12 +2,12 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                ---- data with this lifetime...\n+   |                ---- this data with the anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n    |     ---------------^^^^--- ...is captured and required to be `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 6:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^"}]}