{"sha": "f412c875ea25d5f68bafe0837ccf46998596588e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTJjODc1ZWEyNWQ1ZjY4YmFmZTA4MzdjY2Y0Njk5ODU5NjU4OGU=", "commit": {"author": {"name": "Afshin Mehrabani", "email": "afshin.meh@gmail.com", "date": "2017-11-05T22:53:17Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-05T22:53:17Z"}, "message": "Adding where_single_line option (#2030)\n\n* feat(where): adding where_single_line option and tests\r\n\r\n* fix(where): adding more tests\r\n\r\n* feat(where): changing the shape of where clause when where_single_line is true\r\n\r\n* feat: newline_for_brace should avoid adding a new line where where_single_line is true\r\n\r\n* fix(items): where_single_line should bypass the multi-item where clauses\r\n\r\n* fix(items): refactoring and removing redundant variables\r\n\r\n* fix(items): where_single_line should not be functional when args are multilined\r\n\r\n* fix(config): fixing conflict with upstream", "tree": {"sha": "1effbd39e88315e0b8b44c32610030d5999bc73e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1effbd39e88315e0b8b44c32610030d5999bc73e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f412c875ea25d5f68bafe0837ccf46998596588e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f412c875ea25d5f68bafe0837ccf46998596588e", "html_url": "https://github.com/rust-lang/rust/commit/f412c875ea25d5f68bafe0837ccf46998596588e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f412c875ea25d5f68bafe0837ccf46998596588e/comments", "author": {"login": "afshinm", "id": 314326, "node_id": "MDQ6VXNlcjMxNDMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/314326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afshinm", "html_url": "https://github.com/afshinm", "followers_url": "https://api.github.com/users/afshinm/followers", "following_url": "https://api.github.com/users/afshinm/following{/other_user}", "gists_url": "https://api.github.com/users/afshinm/gists{/gist_id}", "starred_url": "https://api.github.com/users/afshinm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afshinm/subscriptions", "organizations_url": "https://api.github.com/users/afshinm/orgs", "repos_url": "https://api.github.com/users/afshinm/repos", "events_url": "https://api.github.com/users/afshinm/events{/privacy}", "received_events_url": "https://api.github.com/users/afshinm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1035d9782924c6ebc0c6b908a79f79dfc873ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1035d9782924c6ebc0c6b908a79f79dfc873ac4", "html_url": "https://github.com/rust-lang/rust/commit/f1035d9782924c6ebc0c6b908a79f79dfc873ac4"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "28839031836621b14f97c08cde5bbfeec21ca44f", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f412c875ea25d5f68bafe0837ccf46998596588e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412c875ea25d5f68bafe0837ccf46998596588e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f412c875ea25d5f68bafe0837ccf46998596588e", "patch": "@@ -574,6 +574,7 @@ create_config! {\n     // function decl?\n     // 2. Currently options `Tall` and `Vertical` produce the same output.\n     where_density: Density, Density::Vertical, false, \"Density of a where clause\";\n+    where_single_line: bool, false, false, \"To force single line where layout\";\n     where_layout: ListTactic, ListTactic::Vertical, false, \"Element layout inside a where clause\";\n     where_pred_indent: IndentStyle, IndentStyle::Visual, false,\n         \"Indentation style of a where predicate\";"}, {"sha": "989793cb6ba887fabe891882c7472a6712bab516", "filename": "src/items.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f412c875ea25d5f68bafe0837ccf46998596588e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412c875ea25d5f68bafe0837ccf46998596588e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f412c875ea25d5f68bafe0837ccf46998596588e", "patch": "@@ -593,6 +593,7 @@ pub fn format_impl(\n             where_span_end,\n             self_ty.span.hi(),\n             option,\n+            false,\n         )?;\n \n         // If there is no where clause, we may have missing comments between the trait name and\n@@ -960,6 +961,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             None,\n             pos_before_where,\n             option,\n+            false,\n         )?;\n         // If the where clause cannot fit on the same line,\n         // put the where clause on a new line\n@@ -1229,6 +1231,7 @@ fn format_tuple_struct(\n                 None,\n                 body_hi,\n                 option,\n+                false,\n             )?\n         }\n         None => \"\".to_owned(),\n@@ -1321,6 +1324,7 @@ pub fn rewrite_type_alias(\n         Some(span.hi()),\n         generics.span.hi(),\n         option,\n+        false,\n     )?;\n     result.push_str(&where_clause_str);\n     if where_clause_str.is_empty() {\n@@ -1954,6 +1958,8 @@ fn rewrite_fn_base(\n         ast::FunctionRetTy::Ty(ref ty) => ty.span.hi(),\n     };\n \n+    let is_args_multi_lined = arg_str.contains('\\n');\n+\n     if where_clause.predicates.len() == 1 && should_compress_where {\n         let budget = context.budget(last_line_used_width(&result, indent.width()));\n         if let Some(where_clause_str) = rewrite_where_clause(\n@@ -1966,6 +1972,7 @@ fn rewrite_fn_base(\n             Some(span.hi()),\n             pos_before_where,\n             WhereClauseOption::compressed(),\n+            is_args_multi_lined,\n         ) {\n             result.push_str(&where_clause_str);\n             force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n@@ -1984,6 +1991,7 @@ fn rewrite_fn_base(\n         Some(span.hi()),\n         pos_before_where,\n         option,\n+        is_args_multi_lined,\n     )?;\n     // If there are neither where clause nor return type, we may be missing comments between\n     // args and `{`.\n@@ -2007,6 +2015,7 @@ fn rewrite_fn_base(\n     result.push_str(&where_clause_str);\n \n     force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n+    force_new_line_for_brace |= is_args_multi_lined && context.config.where_single_line();\n     Some((result, force_new_line_for_brace))\n }\n \n@@ -2264,11 +2273,16 @@ fn compute_budgets_for_args(\n }\n \n fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause, has_body: bool) -> bool {\n+    let predicate_count = where_clause.predicates.len();\n+\n+    if config.where_single_line() && predicate_count == 1 {\n+        return false;\n+    }\n     match (config.fn_brace_style(), config.where_density()) {\n         (BraceStyle::AlwaysNextLine, _) => true,\n-        (_, Density::Compressed) if where_clause.predicates.len() == 1 => false,\n-        (_, Density::CompressedIfEmpty) if where_clause.predicates.len() == 1 && !has_body => false,\n-        (BraceStyle::SameLineWhere, _) if !where_clause.predicates.is_empty() => true,\n+        (_, Density::Compressed) if predicate_count == 1 => false,\n+        (_, Density::CompressedIfEmpty) if predicate_count == 1 && !has_body => false,\n+        (BraceStyle::SameLineWhere, _) if predicate_count > 0 => true,\n         _ => false,\n     }\n }\n@@ -2444,6 +2458,7 @@ fn rewrite_where_clause_rfc_style(\n     span_end: Option<BytePos>,\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n+    is_args_multi_line: bool,\n ) -> Option<String> {\n     let block_shape = shape.block().with_max_width(context.config);\n \n@@ -2479,14 +2494,23 @@ fn rewrite_where_clause_rfc_style(\n         span_end,\n         false,\n     );\n-    let comma_tactic = if where_clause_option.suppress_comma {\n+    let where_single_line = context.config.where_single_line() && len == 1 && !is_args_multi_line;\n+    let comma_tactic = if where_clause_option.suppress_comma || where_single_line {\n         SeparatorTactic::Never\n     } else {\n         context.config.trailing_comma()\n     };\n \n+    // shape should be vertical only and only if we have `where_single_line` option enabled\n+    // and the number of items of the where clause is equal to 1\n+    let shape_tactic = if where_single_line {\n+        DefinitiveListTactic::Horizontal\n+    } else {\n+        DefinitiveListTactic::Vertical\n+    };\n+\n     let fmt = ListFormatting {\n-        tactic: DefinitiveListTactic::Vertical,\n+        tactic: shape_tactic,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n         separator_place: SeparatorPlace::Back,\n@@ -2508,7 +2532,7 @@ fn rewrite_where_clause_rfc_style(\n     // 6 = `where `\n     let clause_sep = if where_clause_option.compress_where && comment_before.is_empty()\n         && comment_after.is_empty() && !preds_str.contains('\\n')\n-        && 6 + preds_str.len() <= shape.width\n+        && 6 + preds_str.len() <= shape.width || where_single_line\n     {\n         String::from(\" \")\n     } else {\n@@ -2536,6 +2560,7 @@ fn rewrite_where_clause(\n     span_end: Option<BytePos>,\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n+    is_args_multi_line: bool,\n ) -> Option<String> {\n     if where_clause.predicates.is_empty() {\n         return Some(String::new());\n@@ -2550,6 +2575,7 @@ fn rewrite_where_clause(\n             span_end,\n             span_end_before_where,\n             where_clause_option,\n+            is_args_multi_line,\n         );\n     }\n \n@@ -2698,6 +2724,7 @@ fn format_generics(\n             Some(span.hi()),\n             span_end_before_where,\n             option,\n+            false,\n         )?;\n         result.push_str(&where_clause_str);\n         force_same_line_brace || brace_style == BraceStyle::PreferSameLine"}, {"sha": "daaab865af219298a5d42efbea39e64d479c07cf", "filename": "tests/source/configs-where_single_line.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f412c875ea25d5f68bafe0837ccf46998596588e/tests%2Fsource%2Fconfigs-where_single_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412c875ea25d5f68bafe0837ccf46998596588e/tests%2Fsource%2Fconfigs-where_single_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-where_single_line.rs?ref=f412c875ea25d5f68bafe0837ccf46998596588e", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-where_single_line: true\n+// Where style\n+\n+\n+fn lorem_two_items<Ipsum, Dolor, Sit, Amet>() -> T where Ipsum: Eq, Lorem: Eq {\n+    // body\n+}\n+\n+fn lorem_multi_line<Ipsum, Dolor, Sit, Amet>(\n+    a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee,\n+) -> T\n+where\n+    Ipsum: Eq,\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T where Ipsum: Eq {\n+    // body\n+}"}, {"sha": "15ad1508b2d03198690dcd7be330a4a369da6cae", "filename": "tests/target/configs-where_single_line.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f412c875ea25d5f68bafe0837ccf46998596588e/tests%2Ftarget%2Fconfigs-where_single_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412c875ea25d5f68bafe0837ccf46998596588e/tests%2Ftarget%2Fconfigs-where_single_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_single_line.rs?ref=f412c875ea25d5f68bafe0837ccf46998596588e", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-where_single_line: true\n+// Where style\n+\n+\n+fn lorem_two_items<Ipsum, Dolor, Sit, Amet>() -> T\n+where\n+    Ipsum: Eq,\n+    Lorem: Eq,\n+{\n+    // body\n+}\n+\n+fn lorem_multi_line<Ipsum, Dolor, Sit, Amet>(\n+    a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee,\n+) -> T\n+where\n+    Ipsum: Eq,\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n+where Ipsum: Eq {\n+    // body\n+}"}]}