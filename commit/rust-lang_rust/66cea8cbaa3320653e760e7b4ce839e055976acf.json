{"sha": "66cea8cbaa3320653e760e7b4ce839e055976acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Y2VhOGNiYWEzMzIwNjUzZTc2MGU3YjRjZTgzOWUwNTU5NzZhY2Y=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-08T05:40:30Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:05:00Z"}, "message": "Replace 'if let' with 'match' in decl_check.rs", "tree": {"sha": "51866a4cdb1d3df848eee301a8b56782566b0f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51866a4cdb1d3df848eee301a8b56782566b0f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66cea8cbaa3320653e760e7b4ce839e055976acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66cea8cbaa3320653e760e7b4ce839e055976acf", "html_url": "https://github.com/rust-lang/rust/commit/66cea8cbaa3320653e760e7b4ce839e055976acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66cea8cbaa3320653e760e7b4ce839e055976acf/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "559cc970732d80e3ec624c20da4f8aac219d6b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/559cc970732d80e3ec624c20da4f8aac219d6b2e", "html_url": "https://github.com/rust-lang/rust/commit/559cc970732d80e3ec624c20da4f8aac219d6b2e"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "1f9386b751a648018f5065ce3791aedeefe45f8b", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/66cea8cbaa3320653e760e7b4ce839e055976acf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cea8cbaa3320653e760e7b4ce839e055976acf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=66cea8cbaa3320653e760e7b4ce839e055976acf", "patch": "@@ -171,16 +171,17 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n         // 1. Diagnostic for function name.\n         if let Some(replacement) = fn_name_replacement {\n-            let ast_ptr = if let Some(name) = fn_src.value.name() {\n-                name\n-            } else {\n-                // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n-                log::error!(\n-                    \"Replacement ({:?}) was generated for a function without a name: {:?}\",\n-                    replacement,\n-                    fn_src\n-                );\n-                return;\n+            let ast_ptr = match fn_src.value.name() {\n+                Some(name) => name,\n+                None => {\n+                    // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n+                    log::error!(\n+                        \"Replacement ({:?}) was generated for a function without a name: {:?}\",\n+                        replacement,\n+                        fn_src\n+                    );\n+                    return;\n+                }\n             };\n \n             let diagnostic = IncorrectCase {\n@@ -359,16 +360,17 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let struct_src = struct_loc.source(db.upcast());\n \n         if let Some(replacement) = struct_name_replacement {\n-            let ast_ptr = if let Some(name) = struct_src.value.name() {\n-                name\n-            } else {\n-                // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n-                log::error!(\n-                    \"Replacement ({:?}) was generated for a structure without a name: {:?}\",\n-                    replacement,\n-                    struct_src\n-                );\n-                return;\n+            let ast_ptr = match struct_src.value.name() {\n+                Some(name) => name,\n+                None => {\n+                    // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n+                    log::error!(\n+                        \"Replacement ({:?}) was generated for a structure without a name: {:?}\",\n+                        replacement,\n+                        struct_src\n+                    );\n+                    return;\n+                }\n             };\n \n             let diagnostic = IncorrectCase {\n@@ -486,16 +488,17 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let enum_src = enum_loc.source(db.upcast());\n \n         if let Some(replacement) = enum_name_replacement {\n-            let ast_ptr = if let Some(name) = enum_src.value.name() {\n-                name\n-            } else {\n-                // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n-                log::error!(\n-                    \"Replacement ({:?}) was generated for a enum without a name: {:?}\",\n-                    replacement,\n-                    enum_src\n-                );\n-                return;\n+            let ast_ptr = match enum_src.value.name() {\n+                Some(name) => name,\n+                None => {\n+                    // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n+                    log::error!(\n+                        \"Replacement ({:?}) was generated for a enum without a name: {:?}\",\n+                        replacement,\n+                        enum_src\n+                    );\n+                    return;\n+                }\n             };\n \n             let diagnostic = IncorrectCase {"}]}