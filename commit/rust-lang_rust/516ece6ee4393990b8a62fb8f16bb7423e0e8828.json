{"sha": "516ece6ee4393990b8a62fb8f16bb7423e0e8828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNmVjZTZlZTQzOTM5OTBiOGE2MmZiOGYxNmJiNzQyM2UwZTg4Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T10:46:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T10:46:41Z"}, "message": "auto merge of #18645 : nick29581/rust/coercions-1, r=alexcrichton\n\nr?\r\n\r\n(I realise this needs a rebase, but I will probably have to chop it up in order to land and I'd like to get r+ first so I can do that quicker)", "tree": {"sha": "9c2658fbe46cbc896498469ea392419493eb2b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2658fbe46cbc896498469ea392419493eb2b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516ece6ee4393990b8a62fb8f16bb7423e0e8828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516ece6ee4393990b8a62fb8f16bb7423e0e8828", "html_url": "https://github.com/rust-lang/rust/commit/516ece6ee4393990b8a62fb8f16bb7423e0e8828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516ece6ee4393990b8a62fb8f16bb7423e0e8828/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb1523241cd682abc9a0622efe9877fbac53231", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb1523241cd682abc9a0622efe9877fbac53231", "html_url": "https://github.com/rust-lang/rust/commit/fcb1523241cd682abc9a0622efe9877fbac53231"}, {"sha": "225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "html_url": "https://github.com/rust-lang/rust/commit/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe"}], "stats": {"total": 109, "additions": 37, "deletions": 72}, "files": [{"sha": "1bbbe2838b9be5f59dbc1e96e6ff16567346f49d", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -93,27 +93,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                a.repr(self.get_ref().infcx.tcx),\n                b.repr(self.get_ref().infcx.tcx));\n \n-        // Special case: if the subtype is a sized array literal (`[T, ..n]`),\n-        // then it would get auto-borrowed to `&[T, ..n]` and then DST-ified\n-        // to `&[T]`. Doing it all at once makes the target code a bit more\n-        // efficient and spares us from having to handle multiple coercions.\n-        match ty::get(b).sty {\n-            ty::ty_ptr(mt_b) | ty::ty_rptr(_, mt_b) => {\n-                match ty::get(mt_b.ty).sty {\n-                    ty::ty_vec(_, None) => {\n-                        let unsize_and_ref = self.unpack_actual_value(a, |sty_a| {\n-                            self.coerce_unsized_with_borrow(a, sty_a, b, mt_b.mutbl)\n-                        });\n-                        if unsize_and_ref.is_ok() {\n-                            return unsize_and_ref;\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         // Consider coercing the subtype to a DST\n         let unsize = self.unpack_actual_value(a, |sty_a| {\n             self.coerce_unsized(a, sty_a, b)\n@@ -274,35 +253,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         })))\n     }\n \n-    // [T, ..n] -> &[T] or &mut [T]\n-    fn coerce_unsized_with_borrow(&self,\n-                                  a: ty::t,\n-                                  sty_a: &ty::sty,\n-                                  b: ty::t,\n-                                  mutbl_b: ast::Mutability)\n-                                  -> CoerceResult {\n-        debug!(\"coerce_unsized_with_borrow(a={}, sty_a={}, b={})\",\n-               a.repr(self.get_ref().infcx.tcx), sty_a,\n-               b.repr(self.get_ref().infcx.tcx));\n-\n-        match *sty_a {\n-            ty::ty_vec(t_a, Some(len)) => {\n-                let sub = Sub(self.get_ref().clone());\n-                let coercion = Coercion(self.get_ref().trace.clone());\n-                let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n-                let unsized_ty = ty::mk_slice(self.get_ref().infcx.tcx, r_borrow,\n-                                              mt {ty: t_a, mutbl: mutbl_b});\n-                try!(self.get_ref().infcx.try(|| sub.tys(unsized_ty, b)));\n-                Ok(Some(AdjustDerefRef(AutoDerefRef {\n-                    autoderefs: 0,\n-                    autoref: Some(ty::AutoPtr(r_borrow,\n-                                              mutbl_b,\n-                                              Some(box AutoUnsize(ty::UnsizeLength(len)))))\n-                })))\n-            }\n-            _ => Err(ty::terr_mismatch)\n-        }\n-    }\n \n     // &[T, ..n] or &mut [T, ..n] -> &[T]\n     // or &mut [T, ..n] -> &mut [T]"}, {"sha": "f7afce9f4099ffa8f61649f74e38b305f9531a3c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -140,7 +140,7 @@ pub fn getcwd() -> Path {\n             panic!();\n         }\n     }\n-    Path::new(String::from_utf16(::str::truncate_utf16_at_nul(buf))\n+    Path::new(String::from_utf16(::str::truncate_utf16_at_nul(&buf))\n               .expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n@@ -2065,12 +2065,12 @@ mod tests {\n             join_paths(input).unwrap().as_slice() == output.as_bytes()\n         }\n \n-        assert!(test_eq([], \"\"));\n-        assert!(test_eq([r\"c:\\windows\", r\"c:\\\"],\n+        assert!(test_eq(&[], \"\"));\n+        assert!(test_eq(&[r\"c:\\windows\", r\"c:\\\"],\n                         r\"c:\\windows;c:\\\"));\n-        assert!(test_eq([\"\", r\"c:\\windows\", \"\", \"\", r\"c:\\\", \"\"],\n+        assert!(test_eq(&[\"\", r\"c:\\windows\", \"\", \"\", r\"c:\\\", \"\"],\n                         r\";c:\\windows;;;c:\\;\"));\n-        assert!(test_eq([r\"c:\\te;st\", r\"c:\\\"],\n+        assert!(test_eq(&[r\"c:\\te;st\", r\"c:\\\"],\n                         r#\"\"c:\\te;st\";c:\\\"#));\n         assert!(join_paths(&[r#\"c:\\te\"st\"#]).is_err());\n     }"}, {"sha": "43a79770fbb84fb5bc7487e243c3004ca3aef353", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -298,12 +298,12 @@ mod imp {\n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n             let mut v = [0u8, .. 4];\n-            self.fill_bytes(v);\n+            self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n             let mut v = [0u8, .. 8];\n-            self.fill_bytes(v);\n+            self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn fill_bytes(&mut self, v: &mut [u8]) {"}, {"sha": "11257d506b0e0c344140efdf61de9fd647b4ab8c", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -999,7 +999,7 @@ mod imp {\n                     None => try!(w.write(bytes[..bytes.len()-1])),\n                 }\n             }\n-            try!(w.write(['\\n' as u8]));\n+            try!(w.write(&['\\n' as u8]));\n         }\n \n         Ok(())"}, {"sha": "b881eb2d4955cf15b5f6985df4a6d874088fe08f", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -263,7 +263,7 @@ pub fn readdir(p: &Path) -> IoResult<Vec<Path>> {\n             let mut more_files = 1 as libc::BOOL;\n             while more_files != 0 {\n                 {\n-                    let filename = str::truncate_utf16_at_nul(wfd.cFileName);\n+                    let filename = str::truncate_utf16_at_nul(&wfd.cFileName);\n                     match String::from_utf16(filename) {\n                         Some(filename) => paths.push(Path::new(filename)),\n                         None => {"}, {"sha": "aa43b42e74643ea1144d14a0637ded88b52a7c79", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -76,7 +76,7 @@ pub fn error_string(errnum: i32) -> String {\n             return format!(\"OS Error {} (FormatMessageW() returned error {})\", errnum, fm_err);\n         }\n \n-        let msg = String::from_utf16(::str::truncate_utf16_at_nul(buf));\n+        let msg = String::from_utf16(::str::truncate_utf16_at_nul(&buf));\n         match msg {\n             Some(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n             None => format!(\"OS Error {} (FormatMessageW() returned invalid UTF-16)\", errnum),"}, {"sha": "e38202302fb0eb58a11a5fe26be5581a3f912e05", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -395,7 +395,7 @@ impl UnixStream {\n         loop {\n             // Process a timeout if one is pending\n             let wait_succeeded = await(self.handle(), self.read_deadline,\n-                                       [overlapped.hEvent]);\n+                                       &[overlapped.hEvent]);\n \n             let ret = unsafe {\n                 libc::GetOverlappedResult(self.handle(),\n@@ -459,7 +459,7 @@ impl UnixStream {\n                 }\n                 // Process a timeout if one is pending\n                 let wait_succeeded = await(self.handle(), self.write_deadline,\n-                                           [overlapped.hEvent]);\n+                                           &[overlapped.hEvent]);\n                 let ret = unsafe {\n                     libc::GetOverlappedResult(self.handle(),\n                                               &mut overlapped,\n@@ -660,8 +660,8 @@ impl UnixAcceptor {\n             if err == libc::ERROR_IO_PENDING as libc::DWORD {\n                 // Process a timeout if one is pending\n                 let wait_succeeded = await(handle, self.deadline,\n-                                           [self.inner.abort.handle(),\n-                                            overlapped.hEvent]);\n+                                           &[self.inner.abort.handle(),\n+                                             overlapped.hEvent]);\n \n                 // This will block until the overlapped I/O is completed. The\n                 // timeout was previously handled, so this will either block in"}, {"sha": "3fb5ee34356fefb683e777fe81484a37c891380d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -487,24 +487,24 @@ mod tests {\n         }\n \n         assert_eq!(\n-            test_wrapper(\"prog\", [\"aaa\", \"bbb\", \"ccc\"]),\n+            test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]),\n             \"prog aaa bbb ccc\".to_string()\n         );\n \n         assert_eq!(\n-            test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", [\"aaa\"]),\n+            test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\"]),\n             \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"C:\\\\Program Files\\\\test\", [\"aa\\\"bb\"]),\n+            test_wrapper(\"C:\\\\Program Files\\\\test\", &[\"aa\\\"bb\"]),\n             \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"echo\", [\"a b c\"]),\n+            test_wrapper(\"echo\", &[\"a b c\"]),\n             \"echo \\\"a b c\\\"\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", []),\n+            test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", &[]),\n             \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_string()\n         );\n     }"}, {"sha": "bb020688f58849ea08f7fda8b3b4e37f000c7f2e", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that we forbid coercion from `[T, ..n]` to `&[T]`\n+\n+fn main() {\n+    let _: &[int] = [0i]; //~ERROR: mismatched types: expected `&[int]`, found `[int, ..1]`\n+}"}, {"sha": "34fbe1c9a956b97bab1d365df27a16be220f9e35", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516ece6ee4393990b8a62fb8f16bb7423e0e8828/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=516ece6ee4393990b8a62fb8f16bb7423e0e8828", "patch": "@@ -45,7 +45,7 @@ fn main() {\n                 }\n             };\n             stream.read_byte();\n-            stream.write([2]);\n+            stream.write(&[2]);\n         }\n     });\n     let addr = rx.recv();\n@@ -57,9 +57,9 @@ fn main() {\n             match TcpStream::connect(addr) {\n                 Ok(stream) => {\n                     let mut stream = stream;\n-                    stream.write([1]);\n+                    stream.write(&[1]);\n                     let mut buf = [0];\n-                    stream.read(buf);\n+                    stream.read(&mut buf);\n                 },\n                 Err(e) => debug!(\"{}\", e)\n             }"}]}