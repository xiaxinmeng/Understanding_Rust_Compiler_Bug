{"sha": "eecbb51cb39a9d07947e9c474d3e411265282fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlY2JiNTFjYjM5YTlkMDc5NDdlOWM0NzRkM2U0MTEyNjUyODJmY2U=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-28T14:13:37Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-28T14:13:37Z"}, "message": "Better display methods in expect tests", "tree": {"sha": "c71dbe423dda60041ad0bcee9db65b3f5f5a3bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71dbe423dda60041ad0bcee9db65b3f5f5a3bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eecbb51cb39a9d07947e9c474d3e411265282fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eecbb51cb39a9d07947e9c474d3e411265282fce", "html_url": "https://github.com/rust-lang/rust/commit/eecbb51cb39a9d07947e9c474d3e411265282fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eecbb51cb39a9d07947e9c474d3e411265282fce/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8600cf807ed25684bbbbac96badf383add43b358", "url": "https://api.github.com/repos/rust-lang/rust/commits/8600cf807ed25684bbbbac96badf383add43b358", "html_url": "https://github.com/rust-lang/rust/commit/8600cf807ed25684bbbbac96badf383add43b358"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "fdc681d6ce3692a36f07f77ff85c2e36bfb1f285", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eecbb51cb39a9d07947e9c474d3e411265282fce/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eecbb51cb39a9d07947e9c474d3e411265282fce/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=eecbb51cb39a9d07947e9c474d3e411265282fce", "patch": "@@ -432,7 +432,7 @@ mod tests {\n     use base_db::{fixture::WithFixture, SourceDatabase, Upcast};\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_db::TestDB, AssocContainerId, Lookup};\n+    use crate::{data::FunctionData, test_db::TestDB, AssocContainerId, Lookup};\n \n     use super::*;\n \n@@ -451,14 +451,31 @@ mod tests {\n             .into_iter()\n             .filter_map(|item| {\n                 let mark = match item {\n+                    ItemInNs::Types(ModuleDefId::FunctionId(_))\n+                    | ItemInNs::Values(ModuleDefId::FunctionId(_)) => \"f\",\n                     ItemInNs::Types(_) => \"t\",\n                     ItemInNs::Values(_) => \"v\",\n                     ItemInNs::Macros(_) => \"m\",\n                 };\n-                let item = assoc_to_trait(&db, item);\n                 item.krate(db.upcast()).map(|krate| {\n                     let map = db.import_map(krate);\n-                    let path = map.path_of(item).unwrap();\n+\n+                    let path = match assoc_to_trait(&db, item) {\n+                        Some(trait_) => {\n+                            let mut full_path = map.path_of(trait_).unwrap().to_string();\n+                            if let ItemInNs::Types(ModuleDefId::FunctionId(function_id))\n+                            | ItemInNs::Values(ModuleDefId::FunctionId(function_id)) = item\n+                            {\n+                                full_path += &format!(\n+                                    \"::{}\",\n+                                    FunctionData::fn_data_query(&db, function_id).name\n+                                );\n+                            }\n+                            full_path\n+                        }\n+                        None => map.path_of(item).unwrap().to_string(),\n+                    };\n+\n                     format!(\n                         \"{}::{} ({})\\n\",\n                         crate_graph[krate].display_name.as_ref().unwrap(),\n@@ -471,15 +488,15 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    fn assoc_to_trait(db: &dyn DefDatabase, item: ItemInNs) -> ItemInNs {\n+    fn assoc_to_trait(db: &dyn DefDatabase, item: ItemInNs) -> Option<ItemInNs> {\n         let assoc: AssocItemId = match item {\n             ItemInNs::Types(it) | ItemInNs::Values(it) => match it {\n                 ModuleDefId::TypeAliasId(it) => it.into(),\n                 ModuleDefId::FunctionId(it) => it.into(),\n                 ModuleDefId::ConstId(it) => it.into(),\n-                _ => return item,\n+                _ => return None,\n             },\n-            _ => return item,\n+            _ => return None,\n         };\n \n         let container = match assoc {\n@@ -489,8 +506,8 @@ mod tests {\n         };\n \n         match container {\n-            AssocContainerId::TraitId(it) => ItemInNs::Types(it.into()),\n-            _ => item,\n+            AssocContainerId::TraitId(it) => Some(ItemInNs::Types(it.into())),\n+            _ => None,\n         }\n     }\n \n@@ -764,8 +781,8 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::format (v)\n-                dep::fmt::Display (t)\n+                dep::format (f)\n+                dep::fmt::Display::fmt (f)\n             \"#]],\n         );\n \n@@ -778,7 +795,7 @@ mod tests {\n                 dep::Fmt (t)\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n-                dep::fmt::Display (t)\n+                dep::fmt::Display::fmt (f)\n             \"#]],\n         );\n \n@@ -792,7 +809,7 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display (t)\n+                dep::fmt::Display::fmt (f)\n             \"#]],\n         );\n     }\n@@ -833,11 +850,10 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display (t)\n+                dep::fmt::Display::fmt (f)\n             \"#]],\n         );\n \n-        // TODO kb where does this duplicate `dep::fmt::Display (t)` come from?\n         check_search(\n             ra_fixture,\n             \"main\",\n@@ -847,7 +863,7 @@ mod tests {\n                 dep::Fmt (t)\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n-                dep::fmt::Display (t)\n+                dep::fmt::Display::fmt (f)\n             \"#]],\n         );\n     }"}]}