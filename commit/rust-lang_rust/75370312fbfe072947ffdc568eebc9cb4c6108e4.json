{"sha": "75370312fbfe072947ffdc568eebc9cb4c6108e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MzcwMzEyZmJmZTA3Mjk0N2ZmZGM1NjhlZWJjOWNiNGM2MTA4ZTQ=", "commit": {"author": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:59:36Z"}, "committer": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:59:36Z"}, "message": "clippy::redundant_closure", "tree": {"sha": "cb435a1c147db6891c7f6cf625efd8876f427788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb435a1c147db6891c7f6cf625efd8876f427788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75370312fbfe072947ffdc568eebc9cb4c6108e4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVt0Hfgx04mDvJfYh6a8CS6Y8cO0FAmDFgrgACgkQ6a8CS6Y8\ncO0pzQ//QrzZ+XA6K17YIq61R9pcCDK9nRve1ul+Mu/wmJzrftSsk0Oqq7YmA7sq\nh/Er/+pnGOKo3VRZ+SwhZHSRGs8VSPsA7vxt5auRM0KYC/ViuXWVet7a2NOmj9a6\nANd+kbkrce1KWGCJd5zCnBDztMsKLfdRmHtfKba+y6cbzfIMqi+jjmAIqC7b0JXJ\nuFb+IEDDL+wgpKgS30gaqJh6biDhFiuZcToBiE0G8vjPP3lajW6vrAuGcoTI/kPO\nkOEeoF/DgY2fWB48z7RedY7hxCGMvq4Vyn8HKxOF2Lu+TklZO+9jKjVAQ5cczN+D\nTNu6dWpIkmWtKS7vaFn57st9M5NLyCFwygpv/NDQzCfJsgBv1rxyNoXpY+bltVny\niawy+Vv304yf6B0VDrWhhNwhzx588dvsMqMvTDcx6IIiwonpSbxSmnefEvC1YvwY\nKHL2qItAlR0mlhZUc0vfjggLSHs5CumpO5m4TylxjD83TDHVCnjF1k+CMMbvtc40\nd6sX2FvdMtIl88pIgIPUDmTppmUvLWZRL5Su9NAilCfxhvPiUe940722kFhsBajt\n/FFzD/6YjXU/RkirzxWEgthrWxWMsQ1n10S/ar6G3BHaVDQGujRaRWrYHFcOSR7V\noPnG6vg6onDJlxJXlDIocg9g7veIEnKZq70nr7s6TaohDxvJhlM=\n=6uY3\n-----END PGP SIGNATURE-----", "payload": "tree cb435a1c147db6891c7f6cf625efd8876f427788\nparent 705f7e6e2644bf5de4255bc05ea8d9d5027c29b0\nauthor Maan2003 <manmeetmann2003@gmail.com> 1623556776 +0530\ncommitter Maan2003 <manmeetmann2003@gmail.com> 1623556776 +0530\n\nclippy::redundant_closure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75370312fbfe072947ffdc568eebc9cb4c6108e4", "html_url": "https://github.com/rust-lang/rust/commit/75370312fbfe072947ffdc568eebc9cb4c6108e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75370312fbfe072947ffdc568eebc9cb4c6108e4/comments", "author": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "html_url": "https://github.com/rust-lang/rust/commit/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "d07adb084627cbdc797e535f1f1929b18ab5b259", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -583,13 +583,13 @@ impl AttrSourceMap {\n                 .get(id.ast_index as usize)\n                 .unwrap_or_else(|| panic!(\"cannot find doc comment at index {:?}\", id))\n                 .clone()\n-                .map(|attr| Either::Right(attr))\n+                .map(Either::Right)\n         } else {\n             self.attrs\n                 .get(id.ast_index as usize)\n                 .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", id))\n                 .clone()\n-                .map(|attr| Either::Left(attr))\n+                .map(Either::Left)\n         }\n     }\n }"}, {"sha": "1dab19000541d74cf9fbbd04568490b71187ed24", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -431,7 +431,7 @@ pub(crate) fn trait_datum_query(\n     };\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n     let associated_ty_ids =\n-        trait_data.associated_types().map(|type_alias| to_assoc_type_id(type_alias)).collect();\n+        trait_data.associated_types().map(to_assoc_type_id).collect();\n     let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));"}, {"sha": "6f0bf8f8c6c9e667c72774798873c732ca5ab498", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -49,7 +49,7 @@ pub fn usize_const(value: Option<u64>) -> Const {\n     ConstData {\n         ty: TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(&Interner),\n         value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n-            interned: value.map(|value| ConstScalar::Usize(value)).unwrap_or(ConstScalar::Unknown),\n+            interned: value.map(ConstScalar::Usize).unwrap_or(ConstScalar::Unknown),\n         }),\n     }\n     .intern(&Interner)"}, {"sha": "a8a9f5ca12470f8fc9d290e88131a8e407c856a0", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -784,7 +784,7 @@ impl<'a> TyLoweringContext<'a> {\n         let trait_ref = match bound {\n             TypeBound::Path(path) => {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n-                bindings.clone().map(WhereClause::Implemented).map(|b| crate::wrap_empty_binders(b))\n+                bindings.clone().map(WhereClause::Implemented).map(crate::wrap_empty_binders)\n             }\n             TypeBound::Lifetime(_) => None,\n             TypeBound::Error => None,"}, {"sha": "f3d390961a54589b2a5c0ec8e5509e157d67a378", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -60,7 +60,7 @@ impl TyFingerprint {\n             TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(*adt),\n             TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(*mutability),\n             TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(*alias_id),\n-            TyKind::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n+            TyKind::Dyn(_) => ty.dyn_trait().map(TyFingerprint::Dyn)?,\n             _ => return None,\n         };\n         Some(fp)\n@@ -77,7 +77,7 @@ impl TyFingerprint {\n             TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(*adt),\n             TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(*mutability),\n             TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(*alias_id),\n-            TyKind::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n+            TyKind::Dyn(_) => ty.dyn_trait().map(TyFingerprint::Dyn)?,\n             TyKind::Ref(_, _, ty) => return TyFingerprint::for_trait_impl(ty),\n             TyKind::Tuple(_, subst) => {\n                 let first_ty = subst.interned().get(0).map(|arg| arg.assert_ty_ref(&Interner));"}, {"sha": "c08516805e151a525508f21797ecd6e410836784", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -288,7 +288,7 @@ fn runnable_action(\n ) -> Option<HoverAction> {\n     match def {\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => runnable_mod(sema, it).map(|it| HoverAction::Runnable(it)),\n+            ModuleDef::Module(it) => runnable_mod(sema, it).map(HoverAction::Runnable),\n             ModuleDef::Function(func) => {\n                 let src = func.source(sema.db)?;\n                 if src.file_id != file_id.into() {"}, {"sha": "50cc1f963cd9946e359fb32cfce7e37030e959be", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -426,7 +426,7 @@ fn text_edit_from_self_param(self_param: &ast::SelfParam, new_name: &str) -> Opt\n         None\n     }\n \n-    let impl_def = self_param.syntax().ancestors().find_map(|it| ast::Impl::cast(it))?;\n+    let impl_def = self_param.syntax().ancestors().find_map(ast::Impl::cast)?;\n     let type_name = target_type_name(&impl_def)?;\n \n     let mut replacement_text = String::from(new_name);"}, {"sha": "c93959e669e277e0e9201da27701cb791d183469", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -78,12 +78,12 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             terms.sort_by_key(|t| t.syntax().text_range().start());\n             let mut terms = VecDeque::from(terms);\n \n-            let paren_expr = expr.syntax().parent().and_then(|parent| ast::ParenExpr::cast(parent));\n+            let paren_expr = expr.syntax().parent().and_then(ast::ParenExpr::cast);\n \n             let neg_expr = paren_expr\n                 .clone()\n                 .and_then(|paren_expr| paren_expr.syntax().parent())\n-                .and_then(|parent| ast::PrefixExpr::cast(parent))\n+                .and_then(ast::PrefixExpr::cast)\n                 .and_then(|prefix_expr| {\n                     if prefix_expr.op_kind().unwrap() == ast::PrefixOp::Not {\n                         Some(prefix_expr)"}, {"sha": "5a43bdd6f1b846af92b4836daf78668c04cc5e76", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -202,7 +202,7 @@ impl ExtendedEnum {\n     fn variants(self, db: &RootDatabase) -> Vec<ExtendedVariant> {\n         match self {\n             ExtendedEnum::Enum(e) => {\n-                e.variants(db).into_iter().map(|x| ExtendedVariant::Variant(x)).collect::<Vec<_>>()\n+                e.variants(db).into_iter().map(ExtendedVariant::Variant).collect::<Vec<_>>()\n             }\n             ExtendedEnum::Bool => {\n                 Vec::<ExtendedVariant>::from([ExtendedVariant::True, ExtendedVariant::False])"}, {"sha": "4c3929a2668b6df676c4e105f42dfc2ea1b789f0", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -380,7 +380,7 @@ impl<'a> CompletionContext<'a> {\n                         (|| {\n                             let expr_field = self.token.prev_sibling_or_token()?\n                                       .into_node()\n-                                      .and_then(|node| ast::RecordExprField::cast(node))?;\n+                                      .and_then(ast::RecordExprField::cast)?;\n                             let (_, _, ty) = self.sema.resolve_record_field(&expr_field)?;\n                             Some((\n                                 Some(ty),"}, {"sha": "72e67e3c4cd5967fe7bd907d273394e776a7b195", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -259,16 +259,16 @@ fn test_inside_impl_trait_block() {\n }\n \n pub(crate) fn previous_token(element: SyntaxElement) -> Option<SyntaxToken> {\n-    element.into_token().and_then(|it| previous_non_trivia_token(it))\n+    element.into_token().and_then(previous_non_trivia_token)\n }\n \n /// Check if the token previous to the previous one is `for`.\n /// For example, `for _ i$0` => true.\n pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n-        .and_then(|it| previous_non_trivia_token(it))\n-        .and_then(|it| previous_non_trivia_token(it))\n+        .and_then(previous_non_trivia_token)\n+        .and_then(previous_non_trivia_token)\n         .filter(|it| it.kind() == T![for])\n         .is_some()\n }"}, {"sha": "a81e398c43a2d55a259e779aea666b1a5f46479f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75370312fbfe072947ffdc568eebc9cb4c6108e4/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=75370312fbfe072947ffdc568eebc9cb4c6108e4", "patch": "@@ -781,7 +781,7 @@ pub(crate) fn handle_completion_resolve(\n     let resolve_data = match original_completion\n         .data\n         .take()\n-        .map(|data| serde_json::from_value::<CompletionResolveData>(data))\n+        .map(serde_json::from_value::<CompletionResolveData>)\n         .transpose()?\n     {\n         Some(data) => data,"}]}