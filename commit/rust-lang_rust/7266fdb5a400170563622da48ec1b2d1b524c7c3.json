{"sha": "7266fdb5a400170563622da48ec1b2d1b524c7c3", "node_id": "C_kwDOAAsO6NoAKDcyNjZmZGI1YTQwMDE3MDU2MzYyMmRhNDhlYzFiMmQxYjUyNGM3YzM", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T19:33:08Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T19:33:08Z"}, "message": "refactor: use hir to compare returned and self types", "tree": {"sha": "5ef43ff372ba265b03214aed850b61dfe339c487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef43ff372ba265b03214aed850b61dfe339c487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7266fdb5a400170563622da48ec1b2d1b524c7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7266fdb5a400170563622da48ec1b2d1b524c7c3", "html_url": "https://github.com/rust-lang/rust/commit/7266fdb5a400170563622da48ec1b2d1b524c7c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7266fdb5a400170563622da48ec1b2d1b524c7c3/comments", "author": null, "committer": null, "parents": [{"sha": "9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "html_url": "https://github.com/rust-lang/rust/commit/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "5205a8ac7edb753edbbb7b0c9dac424eef6f31f8", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7266fdb5a400170563622da48ec1b2d1b524c7c3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7266fdb5a400170563622da48ec1b2d1b524c7c3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=7266fdb5a400170563622da48ec1b2d1b524c7c3", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn generate_documentation_template(\n         |builder| {\n             let mut doc_lines = Vec::new();\n             // Introduction / short function description before the sections\n-            doc_lines.push(introduction_builder(&ast_func));\n+            doc_lines.push(introduction_builder(&ast_func, ctx));\n             // Then come the sections\n             if let Some(mut lines) = examples_builder(&ast_func, ctx) {\n                 doc_lines.push(\"\".into());\n@@ -78,18 +78,24 @@ pub(crate) fn generate_documentation_template(\n }\n \n /// Builds an introduction, trying to be smart if the function is `::new()`\n-fn introduction_builder(ast_func: &ast::Fn) -> String {\n-    let is_new = ast_func.name().map(|name| &name.to_string() == \"new\").unwrap_or(false);\n-    if is_new {\n-        let ret_type = return_type(ast_func).map(|ret_type| ret_type.to_string());\n-        let self_type = self_type(ast_func);\n-        if ret_type.as_deref() == Some(\"Self\") || ret_type == self_type {\n-            if let Some(self_type) = self_type {\n-                return format!(\"Creates a new [`{}`].\", self_type);\n+fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> String {\n+    || -> Option<String> {\n+        let hir_func = ctx.sema.to_def(ast_func)?;\n+        let container = hir_func.as_assoc_item(ctx.db())?.container(ctx.db());\n+        if let hir::AssocItemContainer::Impl(implementation) = container {\n+            let ret_ty = hir_func.ret_type(ctx.db());\n+            let self_ty = implementation.self_ty(ctx.db());\n+\n+            let is_new = ast_func.name()?.to_string() == \"new\";\n+            match is_new && ret_ty == self_ty {\n+                true => Some(format!(\"Creates a new [`{}`].\", self_type(ast_func)?)),\n+                false => None,\n             }\n+        } else {\n+            None\n         }\n-    }\n-    \".\".into()\n+    }()\n+    .unwrap_or_else(|| \".\".into())\n }\n \n /// Builds an `# Examples` section. An option is returned to be able to manage an error in the AST."}]}