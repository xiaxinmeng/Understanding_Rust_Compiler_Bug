{"sha": "7d41c950c4e73dee4d5b44022186aa65e4323375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDFjOTUwYzRlNzNkZWU0ZDViNDQwMjIxODZhYTY1ZTQzMjMzNzU=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T22:45:49Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T22:45:49Z"}, "message": "fix data headers", "tree": {"sha": "a950f42553df9d057a8be2438920383c5356d13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a950f42553df9d057a8be2438920383c5356d13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d41c950c4e73dee4d5b44022186aa65e4323375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d41c950c4e73dee4d5b44022186aa65e4323375", "html_url": "https://github.com/rust-lang/rust/commit/7d41c950c4e73dee4d5b44022186aa65e4323375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d41c950c4e73dee4d5b44022186aa65e4323375/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4f081b5e8278e0445ae67320fb80d274cd8e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4f081b5e8278e0445ae67320fb80d274cd8e11", "html_url": "https://github.com/rust-lang/rust/commit/cb4f081b5e8278e0445ae67320fb80d274cd8e11"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "9189209db5ee9f8d49c044a433fbb93ae30f5097", "filename": "data.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d41c950c4e73dee4d5b44022186aa65e4323375/data.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d41c950c4e73dee4d5b44022186aa65e4323375/data.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/data.md?ref=7d41c950c4e73dee4d5b44022186aa65e4323375", "patch": "@@ -4,7 +4,7 @@ Low-level programming cares a lot about data layout. It's a big deal. It also pe\n influences the rest of the language, so we're going to start by digging into how data is\n represented in Rust.\n \n-# The `rust` repr\n+## The rust repr\n \n Rust gives you the following ways to lay out composite data:\n \n@@ -124,7 +124,7 @@ In principle enums can use fairly elaborate algorithms to cache bits throughout\n with special constrained representations. As such it is *especially* desirable that we leave\n enum layout unspecified today.\n \n-# Dynamically Sized Types (DSTs)\n+## Dynamically Sized Types (DSTs)\n \n Rust also supports types without a statically known size. On the surface,\n this is a bit nonsensical: Rust must know the size of something in order to\n@@ -212,12 +212,12 @@ struct Foo {\n For details as to *why* this is done, and how to make it not happen, check out\n [SOME OTHER SECTION].\n \n-# Alternative representations\n+## Alternative representations\n \n Rust allows you to specify alternative data layout strategies from the default Rust\n one.\n \n-# repr(C)\n+### repr(C)\n \n This is the most important `repr`. It has fairly simple intent: do what C does.\n The order, size, and alignment of fields is exactly what you would expect from\n@@ -241,14 +241,14 @@ still consumes a byte of space.\n \n * This is equivalent to repr(u32) for enums (see below)\n \n-# repr(packed)\n+### repr(packed)\n \n `repr(packed)` forces rust to strip any padding it would normally apply.\n This may improve the memory footprint of a type, but will have negative\n side-effects from \"field access is heavily penalized\" to \"completely breaks\n everything\" based on target platform.\n \n-# repr(u8), repr(u16), repr(u32), repr(u64)\n+### repr(u8), repr(u16), repr(u32), repr(u64)\n \n These specify the size to make a c-like enum (one which has no values in its variants).\n "}]}