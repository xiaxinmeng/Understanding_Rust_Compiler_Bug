{"sha": "6289d0eb538424f312d2d39f9ec83679e451c88a", "node_id": "C_kwDOAAsO6NoAKDYyODlkMGViNTM4NDI0ZjMxMmQyZDM5ZjllYzgzNjc5ZTQ1MWM4OGE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-03T22:09:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:59Z"}, "message": "with_lifetime_binder is now lower_lifetime_binder and doesn't need a closure", "tree": {"sha": "af7fc33cc4ce23bdc70dc92e9451e0708ef16e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7fc33cc4ce23bdc70dc92e9451e0708ef16e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6289d0eb538424f312d2d39f9ec83679e451c88a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zMACgkQgTGiTgx5\n76+0TQ/9HFN4yeoL1ErtIS9Zv7BwJYYcjlS45D+PBRLJnL2JhulOCogegZ0AOac/\nt3GONnMh0t6gWG7TOw/IBjhUotBNNo/Hv1pbuwFXQGylj1qtWup79tU+nhFnavMe\nAcxtpcsGvAoHOu6jozinAefX8QYyfA/k8+MarRwn5NHyFbmJV3+cmboJlfiPVTEY\nUfz7Z7fysnFV2eBpgsAbKkJPrsxpmEPxPg9nHAPtup3Ryq6XLcWdplrRjOB+dyj/\n5zQn+tNDeEiVsQHtmSGLqKt18RfklptKSHE26R+xUCK8EDCZR/vEYdfSzuyL1CjG\nRYtnrwzEz8tWwTkVinG0lN70DcqXAqaVnSdcr+sB+HrMHPXDl9SLpNvAU3fi9KX3\nNMmJ+A2YM1g0WQtkbW5vJpDf3laldj7WGuMOycEcZlavP5Eoc0C0y+pP3bi4v9Ax\nuTWaHUcf0SzRRATVn9yff+HjZ+Y8RGfc+/mopYKlvKEIXtOCIcxd/QnEQvIjIj0a\n+omUaT2D5BwruiwhlJsu1MkYi4r+j59obVfXJLq7IEnWLlriQlzQ8jYo/2O/zZPG\nTELrQG87PtMmi3PLwG5kWccyWwvYphxEwBQsTtsq+bx1lyNNdqTQNyQyDFSOVDFR\nZcGhN9Spyxd3+YbkdJtRKCumsIovtZN7qHYPqqfLaKNQgeIL56E=\n=QPeQ\n-----END PGP SIGNATURE-----", "payload": "tree af7fc33cc4ce23bdc70dc92e9451e0708ef16e24\nparent 11e00f502aa87cef30b715bb68f03ab4ca3208a7\nauthor Santiago Pastorino <spastorino@gmail.com> 1659564554 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623219 -0300\n\nwith_lifetime_binder is now lower_lifetime_binder and doesn't need a closure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6289d0eb538424f312d2d39f9ec83679e451c88a", "html_url": "https://github.com/rust-lang/rust/commit/6289d0eb538424f312d2d39f9ec83679e451c88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6289d0eb538424f312d2d39f9ec83679e451c88a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e00f502aa87cef30b715bb68f03ab4ca3208a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e00f502aa87cef30b715bb68f03ab4ca3208a7", "html_url": "https://github.com/rust-lang/rust/commit/11e00f502aa87cef30b715bb68f03ab4ca3208a7"}], "stats": {"total": 107, "additions": 52, "deletions": 55}, "files": [{"sha": "fb6715ff17ee9afca88b21dc6a102168ff1806d4", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6289d0eb538424f312d2d39f9ec83679e451c88a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6289d0eb538424f312d2d39f9ec83679e451c88a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6289d0eb538424f312d2d39f9ec83679e451c88a", "patch": "@@ -864,22 +864,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n-            // Lower outside new scope to preserve `is_in_loop_condition`.\n-            let fn_decl = this.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n-\n-            let c = self.arena.alloc(hir::Closure {\n-                binder: binder_clause,\n-                capture_clause,\n-                bound_generic_params,\n-                fn_decl,\n-                body: body_id,\n-                fn_decl_span: this.lower_span(fn_decl_span),\n-                movability: generator_option,\n-            });\n+        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n+        // Lower outside new scope to preserve `is_in_loop_condition`.\n+        let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n+\n+        let c = self.arena.alloc(hir::Closure {\n+            binder: binder_clause,\n+            capture_clause,\n+            bound_generic_params,\n+            fn_decl,\n+            body: body_id,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: generator_option,\n+        });\n \n-            hir::ExprKind::Closure(c)\n-        })\n+        hir::ExprKind::Closure(c)\n     }\n \n     fn generator_movability_for_fn(\n@@ -991,23 +990,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n-            // We need to lower the declaration outside the new scope, because we\n-            // have to conserve the state of being inside a loop condition for the\n-            // closure argument types.\n-            let fn_decl = this.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n-\n-            let c = self.arena.alloc(hir::Closure {\n-                binder: binder_clause,\n-                capture_clause,\n-                bound_generic_params,\n-                fn_decl,\n-                body,\n-                fn_decl_span: this.lower_span(fn_decl_span),\n-                movability: None,\n-            });\n-            hir::ExprKind::Closure(c)\n-        })\n+        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n+\n+        // We need to lower the declaration outside the new scope, because we\n+        // have to conserve the state of being inside a loop condition for the\n+        // closure argument types.\n+        let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n+\n+        let c = self.arena.alloc(hir::Closure {\n+            binder: binder_clause,\n+            capture_clause,\n+            bound_generic_params,\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: None,\n+        });\n+        hir::ExprKind::Closure(c)\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "418551fd8a588a7ea3089fc96808cf167169aef2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6289d0eb538424f312d2d39f9ec83679e451c88a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6289d0eb538424f312d2d39f9ec83679e451c88a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6289d0eb538424f312d2d39f9ec83679e451c88a", "patch": "@@ -787,15 +787,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    /// Register a binder to be ignored for lifetime capture.\n-    #[tracing::instrument(level = \"debug\", skip(self, f))]\n+    /// Lowers a lifetime binder that defines `generic_params`, returning the corresponding HIR\n+    /// nodes. The returned list includes any \"extra\" lifetime parameters that were added by the\n+    /// name resolver owing to lifetime elision; this also populates the resolver's node-id->def-id\n+    /// map, so that later calls to `opt_node_id_to_def_id` that refer to these extra lifetime\n+    /// parameters will be successful.\n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     #[inline]\n-    fn with_lifetime_binder<T>(\n+    fn lower_lifetime_binder(\n         &mut self,\n         binder: NodeId,\n         generic_params: &[GenericParam],\n-        f: impl FnOnce(&mut Self, &'hir [hir::GenericParam<'hir>]) -> T,\n-    ) -> T {\n+    ) -> &'hir [hir::GenericParam<'hir>] {\n         let mut generic_params: Vec<_> = self.lower_generic_params_mut(generic_params).collect();\n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(binder);\n         debug!(?extra_lifetimes);\n@@ -805,7 +808,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let generic_params = self.arena.alloc_from_iter(generic_params);\n         debug!(?generic_params);\n \n-        f(self, generic_params)\n+        generic_params\n     }\n \n     fn with_dyn_type_scope<T>(&mut self, in_scope: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n@@ -1226,15 +1229,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => {\n-                self.with_lifetime_binder(t.id, &f.generic_params, |this, generic_params| {\n-                    hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n-                        generic_params,\n-                        unsafety: this.lower_unsafety(f.unsafety),\n-                        abi: this.lower_extern(f.ext),\n-                        decl: this.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n-                        param_names: this.lower_fn_params_to_names(&f.decl),\n-                    }))\n-                })\n+                let generic_params = self.lower_lifetime_binder(t.id, &f.generic_params);\n+                hir::TyKind::BareFn(self.arena.alloc(hir::BareFnTy {\n+                    generic_params,\n+                    unsafety: self.lower_unsafety(f.unsafety),\n+                    abi: self.lower_extern(f.ext),\n+                    decl: self.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n+                    param_names: self.lower_fn_params_to_names(&f.decl),\n+                }))\n             }\n             TyKind::Never => hir::TyKind::Never,\n             TyKind::Tup(ref tys) => hir::TyKind::Tup(\n@@ -2069,14 +2071,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         itctx: ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n-        self.with_lifetime_binder(\n-            p.trait_ref.ref_id,\n-            &p.bound_generic_params,\n-            |this, bound_generic_params| {\n-                let trait_ref = this.lower_trait_ref(&p.trait_ref, itctx);\n-                hir::PolyTraitRef { bound_generic_params, trait_ref, span: this.lower_span(p.span) }\n-            },\n-        )\n+        let bound_generic_params =\n+            self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n+        let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n+        hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy<'hir> {"}]}