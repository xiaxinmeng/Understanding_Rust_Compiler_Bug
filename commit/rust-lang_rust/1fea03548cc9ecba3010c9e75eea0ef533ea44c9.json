{"sha": "1fea03548cc9ecba3010c9e75eea0ef533ea44c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZWEwMzU0OGNjOWVjYmEzMDEwYzllNzVlZWEwZWY1MzNlYTQ0Yzk=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2017-03-24T10:50:32Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2017-03-28T19:39:46Z"}, "message": "Rustdoc: memoize `pub use`-reexported macros so they don't appear twice in docs", "tree": {"sha": "12577dbc6289b2cdf5e51ce262e3101ee3a1b92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12577dbc6289b2cdf5e51ce262e3101ee3a1b92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fea03548cc9ecba3010c9e75eea0ef533ea44c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fea03548cc9ecba3010c9e75eea0ef533ea44c9", "html_url": "https://github.com/rust-lang/rust/commit/1fea03548cc9ecba3010c9e75eea0ef533ea44c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fea03548cc9ecba3010c9e75eea0ef533ea44c9/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd", "html_url": "https://github.com/rust-lang/rust/commit/ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "c89ec5bbe15bd36a0b14a8fcfc13139c69c2937f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1fea03548cc9ecba3010c9e75eea0ef533ea44c9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fea03548cc9ecba3010c9e75eea0ef533ea44c9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1fea03548cc9ecba3010c9e75eea0ef533ea44c9", "patch": "@@ -21,7 +21,7 @@ use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::LoadedMacro;\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::FxHashSet;\n@@ -48,6 +48,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n+    reexported_macros: FxHashSet<DefId>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -62,6 +63,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n+            reexported_macros: FxHashSet(),\n         }\n     }\n \n@@ -201,9 +203,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n             for export in exports {\n                 if let Def::Macro(def_id, ..) = export.def {\n-                    if def_id.krate == LOCAL_CRATE {\n+                    if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n+\n                     let imported_from = self.cx.sess().cstore.original_crate_name(def_id.krate);\n                     let def = match self.cx.sess().cstore.load_macro(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n@@ -217,6 +220,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         unreachable!()\n                     };\n+\n                     om.macros.push(Macro {\n                         def_id: def_id,\n                         attrs: def.attrs.clone().into(),\n@@ -263,6 +267,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             false\n         }\n \n+        debug!(\"maybe_inline_local def: {:?}\", def);\n+\n         let tcx = self.cx.tcx;\n         if def == Def::Err {\n             return false;\n@@ -274,6 +280,17 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let is_no_inline = use_attrs.lists(\"doc\").has_word(\"no_inline\") ||\n                            use_attrs.lists(\"doc\").has_word(\"hidden\");\n \n+        // Memoize the non-inlined `pub use`'d macros so we don't push an extra\n+        // declaration in `visit_mod_contents()`\n+        if !def_did.is_local() {\n+            if let Def::Macro(did, _) = def {\n+                if please_inline { return true }\n+                debug!(\"memoizing non-inlined macro export: {:?}\", def);\n+                self.reexported_macros.insert(did);\n+                return false;\n+            }\n+        }\n+\n         // For cross-crate impl inlining we need to know whether items are\n         // reachable in documentation - a previously nonreachable item can be\n         // made reachable by cross-crate inlining which we're checking here.\n@@ -294,6 +311,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 },\n                 _ => {},\n             }\n+\n             return false\n         }\n "}]}