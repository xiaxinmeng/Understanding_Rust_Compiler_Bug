{"sha": "54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWQ1Y2I4ZjQ5M2E5MjMzYzcwZDZiZmZjYzJmNjYyYWQyMjMxY2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-28T07:59:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-28T07:59:07Z"}, "message": "Rollup merge of #84616 - GuillaumeGomez:fix-empty-dom-toggle, r=jsha\n\nFix empty dom toggle\n\nCurrently, the empty impl blocks have toggles:\n\n![Screenshot from 2021-04-27 15-15-03](https://user-images.githubusercontent.com/3050060/116249703-5ee0d980-a76d-11eb-9e15-738c06e4fb1b.png)\n\nSo when you expand it, nothing happens:\n\n![Screenshot from 2021-04-27 15-15-07](https://user-images.githubusercontent.com/3050060/116249746-686a4180-a76d-11eb-8dc1-221ca0ac57c5.png)\n\nSo now, in case the impl block is empty, we simply don't generate the details/summary wrapping (which also makes DOM lighter, yeay!):\n\n![Screenshot from 2021-04-27 15-14-15](https://user-images.githubusercontent.com/3050060/116249825-7a4be480-a76d-11eb-9637-b26151311ebd.png)\n\nr? `@jsha`", "tree": {"sha": "76f4339d214fe353467b267764a35b4827187442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f4339d214fe353467b267764a35b4827187442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiRXMCRBK7hj4Ov3rIwAAA9wIABWjJdP9IkPR6bhhdXs6zqlo\nHOkhy/qE5OxH2j2WzXtE34MuXc/Et1TvW+MRKQEvA8gSYzN8g0/jenbVnhwE+BOA\n5V8adAY9yy1KAZ9lQYCXOx/C6SN04MDaO0tRIJENbITUkzoS2aefF8tiFAY3xUsj\nrPIpA+xed9KQtA2ksDlZ29Qm7nMPRt007RyWPviQCUQvADZ8utuQKujjsYBRS0mm\nqZDfMwPb1TVNXx8bZRdBuln10jc+CZWR+FmyhQFsQ7b7wsqTP3LKB4Ha2T4oWScn\nHHJhihBiBsTdip6isqB+kwLvcM7yZfAC0gmLEMWPdbbu2obeKhcugg96YBgdvNI=\n=2RQR\n-----END PGP SIGNATURE-----\n", "payload": "tree 76f4339d214fe353467b267764a35b4827187442\nparent 3f89ca1a32b666ca5733850ef26af26d9dc27d2e\nparent 9051d4073b2dc8e9fdc0061ce3747d5770a9004b\nauthor Yuki Okushi <jtitor@2k36.org> 1619596747 +0900\ncommitter GitHub <noreply@github.com> 1619596747 +0900\n\nRollup merge of #84616 - GuillaumeGomez:fix-empty-dom-toggle, r=jsha\n\nFix empty dom toggle\n\nCurrently, the empty impl blocks have toggles:\n\n![Screenshot from 2021-04-27 15-15-03](https://user-images.githubusercontent.com/3050060/116249703-5ee0d980-a76d-11eb-9e15-738c06e4fb1b.png)\n\nSo when you expand it, nothing happens:\n\n![Screenshot from 2021-04-27 15-15-07](https://user-images.githubusercontent.com/3050060/116249746-686a4180-a76d-11eb-8dc1-221ca0ac57c5.png)\n\nSo now, in case the impl block is empty, we simply don't generate the details/summary wrapping (which also makes DOM lighter, yeay!):\n\n![Screenshot from 2021-04-27 15-14-15](https://user-images.githubusercontent.com/3050060/116249825-7a4be480-a76d-11eb-9637-b26151311ebd.png)\n\nr? `@jsha`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "html_url": "https://github.com/rust-lang/rust/commit/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "html_url": "https://github.com/rust-lang/rust/commit/3f89ca1a32b666ca5733850ef26af26d9dc27d2e"}, {"sha": "9051d4073b2dc8e9fdc0061ce3747d5770a9004b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9051d4073b2dc8e9fdc0061ce3747d5770a9004b", "html_url": "https://github.com/rust-lang/rust/commit/9051d4073b2dc8e9fdc0061ce3747d5770a9004b"}], "stats": {"total": 238, "additions": 136, "deletions": 102}, "files": [{"sha": "45412f55c1572df8383c9180031064eaf0e7aa40", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "patch": "@@ -82,6 +82,10 @@ impl Buffer {\n         self.buffer.push_str(s);\n     }\n \n+    crate fn push_buffer(&mut self, other: Buffer) {\n+        self.buffer.push_str(&other.buffer);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "518dbc6eeb3b9406e357cda5a2cf5dc90a1440c1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 108, "deletions": 97, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "patch": "@@ -1281,99 +1281,6 @@ fn render_impl(\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n     let mut close_tags = String::new();\n \n-    if render_mode == RenderMode::Normal {\n-        let id = cx.derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => {\n-                if is_on_foreign_type {\n-                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n-                } else {\n-                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n-                }\n-            }\n-            None => \"impl\".to_string(),\n-        });\n-        let aliases = if aliases.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n-        };\n-        if let Some(use_absolute) = use_absolute {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">\",\n-                id, aliases\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n-            if show_def_docs {\n-                for it in &i.inner_impl().items {\n-                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n-                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &[],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                            cx,\n-                        );\n-                        w.write_str(\";</span>\");\n-                    }\n-                }\n-            }\n-            w.write_str(\"</code>\");\n-        } else {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">{}</code>\",\n-                id,\n-                aliases,\n-                i.inner_impl().print(false, cx)\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-        }\n-        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        render_stability_since_raw(\n-            w,\n-            i.impl_item.stable_since(tcx).as_deref(),\n-            i.impl_item.const_stable_since(tcx).as_deref(),\n-            outer_version,\n-            outer_const_version,\n-        );\n-        write_srclink(cx, &i.impl_item, w);\n-        w.write_str(\"</h3></summary>\");\n-\n-        if trait_.is_some() {\n-            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n-            }\n-        }\n-\n-        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            let mut ids = cx.id_map.borrow_mut();\n-            write!(\n-                w,\n-                \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground\n-                )\n-                .into_string()\n-            );\n-        }\n-    }\n-\n     fn doc_impl_item(\n         w: &mut Buffer,\n         cx: &Context<'_>,\n@@ -1549,11 +1456,10 @@ fn render_impl(\n         }\n     }\n \n-    w.write_str(\"<div class=\\\"impl-items\\\">\");\n-    close_tags.insert_str(0, \"</div>\");\n+    let mut impl_items = Buffer::empty_from(w);\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n-            w,\n+            &mut impl_items,\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n@@ -1609,7 +1515,7 @@ fn render_impl(\n     if show_default_items {\n         if let Some(t) = trait_ {\n             render_default_items(\n-                w,\n+                &mut impl_items,\n                 cx,\n                 &t.trait_,\n                 &i.inner_impl(),\n@@ -1621,6 +1527,111 @@ fn render_impl(\n             );\n         }\n     }\n+    let details_str = if impl_items.is_empty() {\n+        \"\"\n+    } else {\n+        \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n+    };\n+    if render_mode == RenderMode::Normal {\n+        let id = cx.derive_id(match i.inner_impl().trait_ {\n+            Some(ref t) => {\n+                if is_on_foreign_type {\n+                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n+                } else {\n+                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n+                }\n+            }\n+            None => \"impl\".to_string(),\n+        });\n+        let aliases = if aliases.is_empty() {\n+            String::new()\n+        } else {\n+            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n+        };\n+        if let Some(use_absolute) = use_absolute {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n+                details_str, id, aliases\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+            if show_def_docs {\n+                for it in &i.inner_impl().items {\n+                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n+                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n+                        assoc_type(\n+                            w,\n+                            it,\n+                            &[],\n+                            Some(&tydef.type_),\n+                            AssocItemLink::Anchor(None),\n+                            \"\",\n+                            cx,\n+                        );\n+                        w.write_str(\";</span>\");\n+                    }\n+                }\n+            }\n+            w.write_str(\"</code>\");\n+        } else {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n+                details_str,\n+                id,\n+                aliases,\n+                i.inner_impl().print(false, cx)\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+        }\n+        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+        render_stability_since_raw(\n+            w,\n+            i.impl_item.stable_since(tcx).as_deref(),\n+            i.impl_item.const_stable_since(tcx).as_deref(),\n+            outer_version,\n+            outer_const_version,\n+        );\n+        write_srclink(cx, &i.impl_item, w);\n+        if impl_items.is_empty() {\n+            w.write_str(\"</h3>\");\n+        } else {\n+            w.write_str(\"</h3></summary>\");\n+        }\n+\n+        if trait_.is_some() {\n+            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+            }\n+        }\n+\n+        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n+            let mut ids = cx.id_map.borrow_mut();\n+            write!(\n+                w,\n+                \"<div class=\\\"docblock\\\">{}</div>\",\n+                Markdown(\n+                    &*dox,\n+                    &i.impl_item.links(cx),\n+                    &mut ids,\n+                    cx.shared.codes,\n+                    cx.shared.edition(),\n+                    &cx.shared.playground\n+                )\n+                .into_string()\n+            );\n+        }\n+    }\n+    if !impl_items.is_empty() {\n+        w.write_str(\"<div class=\\\"impl-items\\\">\");\n+        w.push_buffer(impl_items);\n+        close_tags.insert_str(0, \"</div>\");\n+    }\n     w.write_str(&close_tags);\n }\n "}, {"sha": "86dec32e6251cab36c0a41048373a2d7591729d8", "filename": "src/test/rustdoc/empty-impls.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impls.rs?ref=54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "patch": "@@ -0,0 +1,19 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @has - '//div[@id=\"synthetic-implementations-list\"]/h3[@id=\"impl-Send\"]' 'impl Send for Foo'\n+pub struct Foo;\n+\n+pub trait EmptyTrait {}\n+\n+// @has - '//div[@id=\"trait-implementations-list\"]/h3[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n+impl EmptyTrait for Foo {}\n+\n+pub trait NotEmpty {\n+    fn foo(&self);\n+}\n+\n+// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/h3[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n+impl NotEmpty for Foo {\n+    fn foo(&self) {}\n+}"}, {"sha": "ddc14e68675a98cd3af319e08e56a05a3700bdb2", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ad5cb8f493a9233c70d6bffcc2f662ad2231cc/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=54ad5cb8f493a9233c70d6bffcc2f662ad2231cc", "patch": "@@ -12,9 +12,9 @@ macro_rules! array_impls {\n     }\n }\n \n-// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/details[1]/summary/h3' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[2]/summary/h3' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[3]/summary/h3' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[4]/summary/h3' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[5]/summary/h3' 'MyStruct<[T; 10]>'\n+// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/h3[1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}]}