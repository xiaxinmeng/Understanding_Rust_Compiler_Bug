{"sha": "2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNmEzNDJhYWZkYmQ0MDdiNDFjZDg4NmE2YWUzM2EwMjVjZDI3YWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T15:09:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-16T15:09:37Z"}, "message": "Rollup merge of #64444 - RalfJung:no-backtrace, r=alexcrichton\n\nfix building libstd without backtrace feature\n\nFixes https://github.com/rust-lang/rust/issues/64410\n\nr? @alexcrichton", "tree": {"sha": "b80af3e11ba02f0ad80ddf321673c5c5ffb642ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80af3e11ba02f0ad80ddf321673c5c5ffb642ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdf6WxCRBK7hj4Ov3rIwAAdHIIAHTLR+YrGd3/B8FBXIMj7dM5\n/MJvpirJn3Mo9m9ElwqXI37C7E4/f3988gEbuhWNkMRwB7OY2C3SVwGgC7Jq38Eu\niTj4qzyjz9hPIfJlGix/lp4qax/azH6ppTFml8RpBTkamC/W0xIne11erJt6AXWx\nADxoQL7I3MGfnkz8+daGcurQOHLWdQ1YySIUZfXce0VO/9NgP20GiwKxsj2ssqsy\nNnXUzj7P76JvfzbaNdUeaSnqM5tgHd7xuBwzmdg9s4qMQGkKf7pfY5KjKPtp9MlU\nQrOxtiSyffZJ4VWPayshrCxvD19CieOOoYO+Wc74ZZrQdNMRaH46OV9asJtRGlc=\n=MU/m\n-----END PGP SIGNATURE-----\n", "payload": "tree b80af3e11ba02f0ad80ddf321673c5c5ffb642ee\nparent 63bc6aeb7d57fc585c67ea8b96a03802d3570b42\nparent 49854c4f71eb8470c2a4483cbad3f03eb99e67cb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568646577 +0200\ncommitter GitHub <noreply@github.com> 1568646577 +0200\n\nRollup merge of #64444 - RalfJung:no-backtrace, r=alexcrichton\n\nfix building libstd without backtrace feature\n\nFixes https://github.com/rust-lang/rust/issues/64410\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "html_url": "https://github.com/rust-lang/rust/commit/2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "html_url": "https://github.com/rust-lang/rust/commit/63bc6aeb7d57fc585c67ea8b96a03802d3570b42"}, {"sha": "49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "html_url": "https://github.com/rust-lang/rust/commit/49854c4f71eb8470c2a4483cbad3f03eb99e67cb"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "af1d2402f88e72fafb4924ae09ab3e4fa080e2bb", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "patch": "@@ -25,17 +25,11 @@ profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n-[dependencies.backtrace]\n+[dependencies.backtrace_rs]\n+package = \"backtrace\"\n version = \"0.3.37\"\n-default-features = false # don't use coresymbolication on OSX\n-features = [\n-  \"rustc-dep-of-std\", # enable build support for integrating into libstd\n-  \"dbghelp\",          # backtrace/symbolize on MSVC\n-  \"libbacktrace\",     # symbolize on most platforms\n-  \"libunwind\",        # backtrace on most platforms\n-  \"dladdr\",           # symbolize on platforms w/o libbacktrace\n-]\n-optional = true\n+default-features = false # without the libstd `backtrace` feature, stub out everything\n+features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n \n [dev-dependencies]\n rand = \"0.7\"\n@@ -65,6 +59,13 @@ cc = \"1.0\"\n [features]\n default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]\n \n+backtrace = [\n+  \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n+  \"backtrace_rs/libbacktrace\",     # symbolize on most platforms\n+  \"backtrace_rs/libunwind\",        # backtrace on most platforms\n+  \"backtrace_rs/dladdr\",           # symbolize on platforms w/o libbacktrace\n+]\n+\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n compiler-builtins-c = [\"alloc/compiler-builtins-c\"]"}, {"sha": "61c42a56071e6a277a69ebc262c10e584cccaa5e", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "patch": "@@ -97,6 +97,7 @@ use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n use crate::sys_common::backtrace::{output_filename, lock};\n use crate::vec::Vec;\n+use backtrace_rs as backtrace;\n use backtrace::BytesOrWideString;\n \n /// A captured OS thread stack backtrace."}, {"sha": "28fb40244043e5aa46e534b9b3a1131060d9b66a", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "patch": "@@ -17,8 +17,7 @@ use crate::ptr;\n use crate::raw;\n use crate::sys::stdio::panic_output;\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::thread_info;\n-use crate::sys_common::util;\n+use crate::sys_common::{thread_info, util, backtrace};\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -157,20 +156,18 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n }\n \n fn default_hook(info: &PanicInfo<'_>) {\n-    #[cfg(feature = \"backtrace\")]\n-    use crate::sys_common::{backtrace as backtrace_mod};\n-\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(feature = \"backtrace\")]\n-    let log_backtrace = {\n+    let log_backtrace = if cfg!(feature = \"backtrace\") {\n         let panics = update_panic_count(0);\n \n         if panics >= 2 {\n-            Some(backtrace::PrintFmt::Full)\n+            Some(backtrace_rs::PrintFmt::Full)\n         } else {\n-            backtrace_mod::log_enabled()\n+            backtrace::log_enabled()\n         }\n+    } else {\n+        None\n     };\n \n     // The current implementation always returns `Some`.\n@@ -190,14 +187,13 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        #[cfg(feature = \"backtrace\")]\n-        {\n+        if cfg!(feature = \"backtrace\") {\n             use crate::sync::atomic::{AtomicBool, Ordering};\n \n             static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n             if let Some(format) = log_backtrace {\n-                let _ = backtrace_mod::print(err, format);\n+                let _ = backtrace::print(err, format);\n             } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n                 let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n                                        environment variable to display a backtrace.\");"}, {"sha": "01711d415d86c28f6655d2f49956bc4685a65eb2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "patch": "@@ -7,10 +7,9 @@ use crate::io;\n use crate::borrow::Cow;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n-use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n-use backtrace::{BacktraceFmt, BytesOrWideString, PrintFmt};\n+use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n \n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n@@ -74,14 +73,14 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     bt_fmt.add_context()?;\n     let mut idx = 0;\n     let mut res = Ok(());\n-    backtrace::trace_unsynchronized(|frame| {\n+    backtrace_rs::trace_unsynchronized(|frame| {\n         if print_fmt == PrintFmt::Short && idx > MAX_NB_FRAMES {\n             return false;\n         }\n \n         let mut hit = false;\n         let mut stop = false;\n-        backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n+        backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n             hit = true;\n             if print_fmt == PrintFmt::Short {\n                 if let Some(sym) = symbol.name().and_then(|s| s.as_str()) {\n@@ -130,6 +129,8 @@ where\n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n pub fn log_enabled() -> Option<PrintFmt> {\n+    use crate::sync::atomic::{self, Ordering};\n+\n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {"}, {"sha": "cba3eca53862593a653553f325ec4ed460df83de", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6a342aafdbd407b41cd886a6ae33a025cd27ab/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=2a6a342aafdbd407b41cd886a6ae33a025cd27ab", "patch": "@@ -41,7 +41,6 @@ macro_rules! rtunwrap {\n \n pub mod alloc;\n pub mod at_exit_imp;\n-#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;"}]}