{"sha": "ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMTliZDFhMzM5MjEyZjc3MTYwZjEyYWY2ZDVkODVkOGJiMzZlYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-23T01:57:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-23T01:57:37Z"}, "message": "Auto merge of #43387 - TimNN:rustllvm50, r=alexcrichton\n\nUpdate Rust LLVM bindings for LLVM 5.0\n\nThis is the initial set of changes to update the rust llvm bindings for 5.0. The llvm commits necessitating these changes are linked from the tracking issue, #43370.", "tree": {"sha": "c512dc5b3d68aa97934766c72e4e7caaa735873e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c512dc5b3d68aa97934766c72e4e7caaa735873e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "html_url": "https://github.com/rust-lang/rust/commit/ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35a0c1d053040381959a9d84b150f64764e53e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35a0c1d053040381959a9d84b150f64764e53e4", "html_url": "https://github.com/rust-lang/rust/commit/c35a0c1d053040381959a9d84b150f64764e53e4"}, {"sha": "38e40ce50653b8164915b8142e883c5a57b33e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e40ce50653b8164915b8142e883c5a57b33e7b", "html_url": "https://github.com/rust-lang/rust/commit/38e40ce50653b8164915b8142e883c5a57b33e7b"}], "stats": {"total": 299, "additions": 194, "deletions": 105}, "files": [{"sha": "c5276e0c9710ca22442bc865b10c34d5fe3f7f6a", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -17,7 +17,6 @@ use libc::c_uint;\n use std::ptr;\n \n use {DiagnosticInfoRef, TwineRef, ValueRef};\n-use ffi::DebugLocRef;\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -47,7 +46,9 @@ pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: String,\n     pub function: ValueRef,\n-    pub debug_loc: DebugLocRef,\n+    pub line: c_uint,\n+    pub column: c_uint,\n+    pub filename: String,\n     pub message: String,\n }\n \n@@ -56,24 +57,37 @@ impl OptimizationDiagnostic {\n                      di: DiagnosticInfoRef)\n                      -> OptimizationDiagnostic {\n         let mut function = ptr::null_mut();\n-        let mut debug_loc = ptr::null_mut();\n+        let mut line = 0;\n+        let mut column = 0;\n \n         let mut message = None;\n+        let mut filename = None;\n         let pass_name = super::build_string(|pass_name|\n             message = super::build_string(|message|\n-                super::LLVMRustUnpackOptimizationDiagnostic(di,\n-                                                            pass_name,\n-                                                            &mut function,\n-                                                            &mut debug_loc,\n-                                                            message)\n+                filename = super::build_string(|filename|\n+                    super::LLVMRustUnpackOptimizationDiagnostic(di,\n+                                                                pass_name,\n+                                                                &mut function,\n+                                                                &mut line,\n+                                                                &mut column,\n+                                                                filename,\n+                                                                message)\n+                )\n             )\n         );\n \n+        let mut filename = filename.unwrap_or(String::new());\n+        if filename.is_empty() {\n+            filename.push_str(\"<unknown file>\");\n+        }\n+\n         OptimizationDiagnostic {\n             kind: kind,\n             pass_name: pass_name.expect(\"got a non-UTF8 pass name from LLVM\"),\n             function: function,\n-            debug_loc: debug_loc,\n+            line: line,\n+            column: column,\n+            filename: filename,\n             message: message.expect(\"got a non-UTF8 OptimizationDiagnostic message from LLVM\")\n         }\n     }"}, {"sha": "24d4040ccb082efd3da8dc27f7e8711582d511a7", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -1633,7 +1633,9 @@ extern \"C\" {\n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n                                                 pass_name_out: RustStringRef,\n                                                 function_out: *mut ValueRef,\n-                                                debugloc_out: *mut DebugLocRef,\n+                                                loc_line_out: *mut c_uint,\n+                                                loc_column_out: *mut c_uint,\n+                                                loc_filename_out: RustStringRef,\n                                                 message_out: RustStringRef);\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n                                              cookie_out: *mut c_uint,"}, {"sha": "26553c85023b77e662b740dc0d1c15951c3a72bc", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -16,7 +16,7 @@ use rustc::session::config::{self, OutputFilenames, OutputType, OutputTypes, Pas\n                              AllPasses, Sanitizer};\n use rustc::session::Session;\n use llvm;\n-use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n+use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n use rustc::hir::def_id::CrateNum;\n@@ -307,7 +307,6 @@ pub struct CodegenContext<'a> {\n }\n \n struct HandlerFreeVars<'a> {\n-    llcx: ContextRef,\n     cgcx: &'a CodegenContext<'a>,\n }\n \n@@ -329,7 +328,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n-    let HandlerFreeVars { llcx, cgcx } = *(user as *const HandlerFreeVars);\n+    let HandlerFreeVars { cgcx, .. } = *(user as *const HandlerFreeVars);\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n@@ -345,11 +344,12 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n             };\n \n             if enabled {\n-                let loc = llvm::debug_loc_to_string(llcx, opt.debug_loc);\n-                cgcx.handler.note_without_error(&format!(\"optimization {} for {} at {}: {}\",\n+                cgcx.handler.note_without_error(&format!(\"optimization {} for {} at {}:{}:{}: {}\",\n                                                 opt.kind.describe(),\n                                                 opt.pass_name,\n-                                                if loc.is_empty() { \"[unknown]\" } else { &*loc },\n+                                                opt.filename,\n+                                                opt.line,\n+                                                opt.column,\n                                                 opt.message));\n             }\n         }\n@@ -370,9 +370,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let llcx = mllvm.llcx;\n     let tm = config.tm;\n \n-    // llcx doesn't outlive this function, so we can put this on the stack.\n     let fv = HandlerFreeVars {\n-        llcx: llcx,\n         cgcx: cgcx,\n     };\n     let fv = &fv as *const HandlerFreeVars as *mut c_void;"}, {"sha": "7f76861c0777d3f73ba6a480bc73a6826a064562", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -12,6 +12,7 @@\n \n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/ArchiveWriter.h\"\n+#include \"llvm/Support/Path.h\"\n \n using namespace llvm;\n using namespace llvm::object;\n@@ -256,6 +257,9 @@ LLVMRustWriteArchive(char *Dst, size_t NumMembers,\n         LLVMRustSetLastError(toString(MOrErr.takeError()).c_str());\n         return LLVMRustResult::Failure;\n       }\n+#if LLVM_VERSION_GE(5, 0)\n+      MOrErr->MemberName = sys::path::filename(MOrErr->MemberName);\n+#endif\n       Members.push_back(std::move(*MOrErr));\n #elif LLVM_VERSION_EQ(3, 8)\n       Members.push_back(NewArchiveIterator(Member->Filename));"}, {"sha": "15a04ba00e2a50fc47be5790979d53df2ad20c14", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 148, "deletions": 79, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -18,6 +18,10 @@\n \n #include \"llvm/IR/CallSite.h\"\n \n+#if LLVM_VERSION_GE(5, 0)\n+#include \"llvm/ADT/Optional.h\"\n+#endif\n+\n //===----------------------------------------------------------------------===\n //\n // This file defines alternate interfaces to core functions that are more\n@@ -163,10 +167,14 @@ extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   Attribute Attr = Attribute::get(Call->getContext(), fromRust(RustAttr));\n+#if LLVM_VERSION_GE(5, 0)\n+  Call.addAttribute(Index, Attr);\n+#else\n   AttrBuilder B(Attr);\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index,\n       AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n@@ -175,25 +183,38 @@ extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index, B));\n+#else\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index,\n       AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n+#if LLVM_VERSION_GE(5, 0)\n+  A->addAttributes(Index, B);\n+#else\n   A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n+  A->addAttributes(Index, B);\n+#else\n   A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n@@ -203,18 +224,26 @@ extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n   Function *F = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAttribute(Name, Value);\n+#if LLVM_VERSION_GE(5, 0)\n+  F->addAttributes(Index, B);\n+#else\n   F->addAttributes(Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n                                                  unsigned Index,\n                                                  LLVMRustAttribute RustAttr) {\n   Function *F = unwrap<Function>(Fn);\n-  const AttributeSet PAL = F->getAttributes();\n   Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n+  auto PAL = F->getAttributes();\n+#if LLVM_VERSION_GE(5, 0)\n+  auto PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+#else\n   const AttributeSet PALNew = PAL.removeAttributes(\n       F->getContext(), Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n   F->setAttributes(PALNew);\n }\n \n@@ -263,6 +292,18 @@ enum class LLVMRustSynchronizationScope {\n   CrossThread,\n };\n \n+#if LLVM_VERSION_GE(5, 0)\n+static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n+  switch (Scope) {\n+  case LLVMRustSynchronizationScope::SingleThread:\n+    return SyncScope::SingleThread;\n+  case LLVMRustSynchronizationScope::CrossThread:\n+    return SyncScope::System;\n+  default:\n+    llvm_unreachable(\"bad SynchronizationScope.\");\n+  }\n+}\n+#else\n static SynchronizationScope fromRust(LLVMRustSynchronizationScope Scope) {\n   switch (Scope) {\n   case LLVMRustSynchronizationScope::SingleThread:\n@@ -273,6 +314,7 @@ static SynchronizationScope fromRust(LLVMRustSynchronizationScope Scope) {\n     llvm_unreachable(\"bad SynchronizationScope.\");\n   }\n }\n+#endif\n \n extern \"C\" LLVMValueRef\n LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n@@ -318,17 +360,19 @@ extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm)\n \n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n-typedef struct LLVMOpaqueMetadata *LLVMRustMetadataRef;\n+#if LLVM_VERSION_LT(5, 0)\n+typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n \n namespace llvm {\n-DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMRustMetadataRef)\n+DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMMetadataRef)\n \n-inline Metadata **unwrap(LLVMRustMetadataRef *Vals) {\n+inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n   return reinterpret_cast<Metadata **>(Vals);\n }\n }\n+#endif\n \n-template <typename DIT> DIT *unwrapDIPtr(LLVMRustMetadataRef Ref) {\n+template <typename DIT> DIT *unwrapDIPtr(LLVMMetadataRef Ref) {\n   return (DIT *)(Ref ? unwrap<MDNode>(Ref) : nullptr);\n }\n \n@@ -466,7 +510,7 @@ extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);\n }\n \n-extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMRustMetadataRef MD) {\n+extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMMetadataRef MD) {\n   wrap(MetadataAsValue::get(*unwrap(C), unwrap(MD)));\n }\n \n@@ -482,8 +526,8 @@ extern \"C\" void LLVMRustDIBuilderFinalize(LLVMRustDIBuilderRef Builder) {\n   Builder->finalize();\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n-    LLVMRustDIBuilderRef Builder, unsigned Lang, LLVMRustMetadataRef FileRef,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n+    LLVMRustDIBuilderRef Builder, unsigned Lang, LLVMMetadataRef FileRef,\n     const char *Producer, bool isOptimized, const char *Flags,\n     unsigned RuntimeVer, const char *SplitName) {\n   auto *File = unwrapDI<DIFile>(FileRef);\n@@ -498,29 +542,29 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateFile(LLVMRustDIBuilderRef Builder, const char *Filename,\n                             const char *Directory) {\n   return wrap(Builder->createFile(Filename, Directory));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n-                                      LLVMRustMetadataRef File,\n-                                      LLVMRustMetadataRef ParameterTypes) {\n+                                      LLVMMetadataRef File,\n+                                      LLVMMetadataRef ParameterTypes) {\n   return wrap(Builder->createSubroutineType(\n #if LLVM_VERSION_EQ(3, 7)\n       unwrapDI<DIFile>(File),\n #endif\n       DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    const char *LinkageName, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n     unsigned ScopeLine, LLVMRustDIFlags Flags, bool IsOptimized,\n-    LLVMValueRef Fn, LLVMRustMetadataRef TParam, LLVMRustMetadataRef Decl) {\n+    LLVMValueRef Fn, LLVMMetadataRef TParam, LLVMMetadataRef Decl) {\n #if LLVM_VERSION_GE(3, 8)\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n@@ -540,7 +584,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n                                  uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n@@ -551,19 +595,23 @@ LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n                                        Encoding));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef PointeeTy,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n-                                         SizeInBits, AlignInBits, Name));\n+                                         SizeInBits, AlignInBits,\n+#if LLVM_VERSION_GE(5, 0)\n+                                         /* DWARFAddressSpace */ None,\n+#endif\n+                                         Name));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStructType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags,\n-    LLVMRustMetadataRef DerivedFrom, LLVMRustMetadataRef Elements,\n-    unsigned RunTimeLang, LLVMRustMetadataRef VTableHolder,\n+    LLVMMetadataRef DerivedFrom, LLVMMetadataRef Elements,\n+    unsigned RunTimeLang, LLVMMetadataRef VTableHolder,\n     const char *UniqueId) {\n   return wrap(Builder->createStructType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n@@ -572,37 +620,37 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n       unwrapDI<DIType>(VTableHolder), UniqueId));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateMemberType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n     uint32_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n-    LLVMRustMetadataRef Ty) {\n+    LLVMMetadataRef Ty) {\n   return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n                                         unwrapDI<DIFile>(File), LineNo,\n                                         SizeInBits, AlignInBits, OffsetInBits,\n                                         fromRust(Flags), unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope,\n-    LLVMRustMetadataRef File, unsigned Line, unsigned Col) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope,\n+    LLVMMetadataRef File, unsigned Line, unsigned Col) {\n   return wrap(Builder->createLexicalBlock(unwrapDI<DIDescriptor>(Scope),\n                                           unwrapDI<DIFile>(File), Line, Col));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateLexicalBlockFile(LLVMRustDIBuilderRef Builder,\n-                                        LLVMRustMetadataRef Scope,\n-                                        LLVMRustMetadataRef File) {\n+                                        LLVMMetadataRef Scope,\n+                                        LLVMMetadataRef File) {\n   return wrap(Builder->createLexicalBlockFile(unwrapDI<DIDescriptor>(Scope),\n                                               unwrapDI<DIFile>(File)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n-    const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n-    LLVMRustMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Context, const char *Name,\n+    const char *LinkageName, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n+    LLVMMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   llvm::GlobalVariable *InitVal = cast<llvm::GlobalVariable>(unwrap(V));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -632,10 +680,10 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n-    LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMRustMetadataRef Scope,\n-    const char *Name, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n+    LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMMetadataRef Scope,\n+    const char *Name, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n     unsigned ArgNo, uint32_t AlignInBits) {\n #if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n@@ -659,40 +707,40 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                 uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n-                                 LLVMRustMetadataRef Subscripts) {\n+                                 uint32_t AlignInBits, LLVMMetadataRef Ty,\n+                                 LLVMMetadataRef Subscripts) {\n   return wrap(\n       Builder->createArrayType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n                                DINodeArray(unwrapDI<MDTuple>(Subscripts))));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateVectorType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                  uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n-                                  LLVMRustMetadataRef Subscripts) {\n+                                  uint32_t AlignInBits, LLVMMetadataRef Ty,\n+                                  LLVMMetadataRef Subscripts) {\n   return wrap(\n       Builder->createVectorType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n                                 DINodeArray(unwrapDI<MDTuple>(Subscripts))));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderGetOrCreateSubrange(LLVMRustDIBuilderRef Builder, int64_t Lo,\n                                      int64_t Count) {\n   return wrap(Builder->getOrCreateSubrange(Lo, Count));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderGetOrCreateArray(LLVMRustDIBuilderRef Builder,\n-                                  LLVMRustMetadataRef *Ptr, unsigned Count) {\n+                                  LLVMMetadataRef *Ptr, unsigned Count) {\n   Metadata **DataValue = unwrap(Ptr);\n   return wrap(\n       Builder->getOrCreateArray(ArrayRef<Metadata *>(DataValue, Count)).get());\n }\n \n extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n-    LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMRustMetadataRef VarInfo,\n+    LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMMetadataRef VarInfo,\n     int64_t *AddrOps, unsigned AddrOpsCount, LLVMValueRef DL,\n     LLVMBasicBlockRef InsertAtEnd) {\n   return wrap(Builder->insertDeclare(\n@@ -702,48 +750,52 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n       unwrap(InsertAtEnd)));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n                                   const char *Name, uint64_t Val) {\n   return wrap(Builder->createEnumerator(Name, Val));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint32_t AlignInBits, LLVMRustMetadataRef Elements,\n-    LLVMRustMetadataRef ClassTy) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+    uint32_t AlignInBits, LLVMMetadataRef Elements,\n+    LLVMMetadataRef ClassTy) {\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n       unwrapDI<DIType>(ClassTy)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Elements,\n     unsigned RunTimeLang, const char *UniqueId) {\n   return wrap(Builder->createUnionType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags),\n       DINodeArray(unwrapDI<MDTuple>(Elements)), RunTimeLang, UniqueId));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef Ty, LLVMRustMetadataRef File, unsigned LineNo,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef Ty, LLVMMetadataRef File, unsigned LineNo,\n     unsigned ColumnNo) {\n   return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n-                                 LLVMRustMetadataRef Scope, const char *Name,\n-                                 LLVMRustMetadataRef File, unsigned LineNo) {\n+                                 LLVMMetadataRef Scope, const char *Name,\n+                                 LLVMMetadataRef File, unsigned LineNo) {\n   return wrap(Builder->createNameSpace(\n-      unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNo\n+      unwrapDI<DIDescriptor>(Scope), Name\n+#if LLVM_VERSION_LT(5, 0)\n+      ,\n+      unwrapDI<DIFile>(File), LineNo\n+#endif\n #if LLVM_VERSION_GE(4, 0)\n       ,\n       false // ExportSymbols (only relevant for C++ anonymous namespaces)\n@@ -753,16 +805,16 @@ LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" void\n LLVMRustDICompositeTypeSetTypeArray(LLVMRustDIBuilderRef Builder,\n-                                    LLVMRustMetadataRef CompositeTy,\n-                                    LLVMRustMetadataRef TyArray) {\n+                                    LLVMMetadataRef CompositeTy,\n+                                    LLVMMetadataRef TyArray) {\n   DICompositeType *Tmp = unwrapDI<DICompositeType>(CompositeTy);\n   Builder->replaceArrays(Tmp, DINodeArray(unwrap<MDTuple>(TyArray)));\n }\n \n extern \"C\" LLVMValueRef\n LLVMRustDIBuilderCreateDebugLocation(LLVMContextRef ContextRef, unsigned Line,\n-                                     unsigned Column, LLVMRustMetadataRef Scope,\n-                                     LLVMRustMetadataRef InlinedAt) {\n+                                     unsigned Column, LLVMMetadataRef Scope,\n+                                     LLVMMetadataRef InlinedAt) {\n   LLVMContext &Context = *unwrap(ContextRef);\n \n   DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(Scope),\n@@ -879,16 +931,33 @@ extern \"C\" void LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef Str) {\n \n extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n     LLVMDiagnosticInfoRef DI, RustStringRef PassNameOut,\n-    LLVMValueRef *FunctionOut, LLVMDebugLocRef *DebugLocOut,\n-    RustStringRef MessageOut) {\n+    LLVMValueRef *FunctionOut, unsigned* Line, unsigned* Column,\n+    RustStringRef FilenameOut, RustStringRef MessageOut) {\n   // Undefined to call this not on an optimization diagnostic!\n   llvm::DiagnosticInfoOptimizationBase *Opt =\n       static_cast<llvm::DiagnosticInfoOptimizationBase *>(unwrap(DI));\n \n   RawRustStringOstream PassNameOS(PassNameOut);\n   PassNameOS << Opt->getPassName();\n   *FunctionOut = wrap(&Opt->getFunction());\n-  *DebugLocOut = wrap(&Opt->getDebugLoc());\n+\n+  RawRustStringOstream FilenameOS(FilenameOut);\n+#if LLVM_VERSION_GE(5,0)\n+  DiagnosticLocation loc = Opt->getLocation();\n+  if (loc.isValid()) {\n+    *Line = loc.getLine();\n+    *Column = loc.getColumn();\n+    FilenameOS << loc.getFilename();\n+  }\n+#else\n+  const DebugLoc &loc = Opt->getDebugLoc();\n+  if (loc) {\n+    *Line = loc.getLine();\n+    *Column = loc.getCol();\n+    FilenameOS << cast<DIScope>(loc.getScope())->getFilename();\n+  }\n+#endif\n+\n   RawRustStringOstream MessageOS(MessageOut);\n   MessageOS << Opt->getMsg();\n }"}, {"sha": "20816af2f1c20e81fa0f4c9fd5a4a6413cb56262", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -55,6 +55,8 @@\n   (LLVM_VERSION_MAJOR < (major) ||                                             \\\n    LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR <= (minor))\n \n+#define LLVM_VERSION_LT(major, minor) (!LLVM_VERSION_GE((major), (minor)))\n+\n #if LLVM_VERSION_GE(3, 7)\n #include \"llvm/IR/LegacyPassManager.h\"\n #else"}, {"sha": "1f900a3770eb32727b7d892fc9c3777a9aa566c1", "filename": "src/test/codegen/lifetime_start_end.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef19bd1a339212f77160f12af6d5d85d8bb36ea4/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs?ref=ef19bd1a339212f77160f12af6d5d85d8bb36ea4", "patch": "@@ -19,34 +19,34 @@ pub fn test() {\n     &a; // keep variable in an alloca\n \n // CHECK: [[S_a:%[0-9]+]] = bitcast i32* %a to i8*\n-// CHECK: call void @llvm.lifetime.start(i{{[0-9 ]+}}, i8* [[S_a]])\n+// CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S_a]])\n \n     {\n         let b = &Some(a);\n         &b; // keep variable in an alloca\n \n // CHECK: [[S_b:%[0-9]+]] = bitcast %\"core::option::Option<i32>\"** %b to i8*\n-// CHECK: call void @llvm.lifetime.start(i{{[0-9 ]+}}, i8* [[S_b]])\n+// CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S_b]])\n \n // CHECK: [[S__5:%[0-9]+]] = bitcast %\"core::option::Option<i32>\"* %_5 to i8*\n-// CHECK: call void @llvm.lifetime.start(i{{[0-9 ]+}}, i8* [[S__5]])\n+// CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S__5]])\n \n // CHECK: [[E_b:%[0-9]+]] = bitcast %\"core::option::Option<i32>\"** %b to i8*\n-// CHECK: call void @llvm.lifetime.end(i{{[0-9 ]+}}, i8* [[E_b]])\n+// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E_b]])\n \n // CHECK: [[E__5:%[0-9]+]] = bitcast %\"core::option::Option<i32>\"* %_5 to i8*\n-// CHECK: call void @llvm.lifetime.end(i{{[0-9 ]+}}, i8* [[E__5]])\n+// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E__5]])\n     }\n \n     let c = 1;\n     &c; // keep variable in an alloca\n \n // CHECK: [[S_c:%[0-9]+]] = bitcast i32* %c to i8*\n-// CHECK: call void @llvm.lifetime.start(i{{[0-9 ]+}}, i8* [[S_c]])\n+// CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S_c]])\n \n // CHECK: [[E_c:%[0-9]+]] = bitcast i32* %c to i8*\n-// CHECK: call void @llvm.lifetime.end(i{{[0-9 ]+}}, i8* [[E_c]])\n+// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E_c]])\n \n // CHECK: [[E_a:%[0-9]+]] = bitcast i32* %a to i8*\n-// CHECK: call void @llvm.lifetime.end(i{{[0-9 ]+}}, i8* [[E_a]])\n+// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E_a]])\n }"}]}