{"sha": "34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "node_id": "C_kwDOAAsO6NoAKDM0ZWYxM2IxNWIwYzg4YmZiYzg5ZDQ0MDRjMmUzZWExYjI0YmJjMzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-28T20:56:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-28T20:56:47Z"}, "message": "Rollup merge of #110960 - lukas-code:unused-mut, r=compiler-errors\n\nfix false negative for `unused_mut`\n\nfixes https://github.com/rust-lang/rust/issues/110849\n\nWe want to avoid double diagnostics for code like this, but only if an error actually occurs:\n```rust\nfn main() {\n    let mut x: (i32, i32);\n    x.0 = 1;\n}\n```\n\nThe first commit fixes the lint and the second one removes all the unused `mut`s it found.", "tree": {"sha": "f30cf76dce459ab0702c07bfc3eecc00dc50c1c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f30cf76dce459ab0702c07bfc3eecc00dc50c1c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTDMPCRBK7hj4Ov3rIwAAytoIABSJ+TzvR/BL+cipU9yLmmmk\nIpfynMhJKHztRPQ3x8WbtdxPpsUDneK2I0P21k3Dm7Qea1fnaAPCmECa5EgGcaXA\nBf68vGwNdi3gC6Giw7xXSevPOxre9PN86vJoilGiF6QgtY0MVX9dS391ep6x9sCV\nJuTmxCCGfouXT3tiQSNjjOxDmi8NrVdBhcpYkcMBjKaFRohhWdEQ3gjD6cuYQJSm\nLItHxjakteGuklRYakqeXbdqAH0UA01dLZuQhqlGD6wOlSi6CHqreIgDXMtvAhAa\n0aeYOy0cOoC/OAS8pBgkpXSMwPR2pEcUqmstM7+SUTYkdjSzSiba9Nv8ysrAGJw=\n=AYT4\n-----END PGP SIGNATURE-----\n", "payload": "tree f30cf76dce459ab0702c07bfc3eecc00dc50c1c1\nparent 235d088412a98ed2cc55194c9268a8c6e17ed75e\nparent fc63926e18794f3940098689528e67d8bf5f7cb0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682715407 +0200\ncommitter GitHub <noreply@github.com> 1682715407 +0200\n\nRollup merge of #110960 - lukas-code:unused-mut, r=compiler-errors\n\nfix false negative for `unused_mut`\n\nfixes https://github.com/rust-lang/rust/issues/110849\n\nWe want to avoid double diagnostics for code like this, but only if an error actually occurs:\n```rust\nfn main() {\n    let mut x: (i32, i32);\n    x.0 = 1;\n}\n```\n\nThe first commit fixes the lint and the second one removes all the unused `mut`s it found.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "html_url": "https://github.com/rust-lang/rust/commit/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235d088412a98ed2cc55194c9268a8c6e17ed75e", "url": "https://api.github.com/repos/rust-lang/rust/commits/235d088412a98ed2cc55194c9268a8c6e17ed75e", "html_url": "https://github.com/rust-lang/rust/commit/235d088412a98ed2cc55194c9268a8c6e17ed75e"}, {"sha": "fc63926e18794f3940098689528e67d8bf5f7cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc63926e18794f3940098689528e67d8bf5f7cb0", "html_url": "https://github.com/rust-lang/rust/commit/fc63926e18794f3940098689528e67d8bf5f7cb0"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "7ab8c3eaba2273d96a6a4693dc53653f314eba36", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -360,7 +360,7 @@ impl Printer {\n \n     fn check_stack(&mut self, mut depth: usize) {\n         while let Some(&index) = self.scan_stack.back() {\n-            let mut entry = &mut self.buf[index];\n+            let entry = &mut self.buf[index];\n             match entry.token {\n                 Token::Begin(_) => {\n                     if depth == 0 {"}, {"sha": "6900729d671a07e04041a77b5133f7dab38e21b4", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -935,6 +935,7 @@ enum InitializationRequiringAction {\n     PartialAssignment,\n }\n \n+#[derive(Debug)]\n struct RootPlace<'tcx> {\n     place_local: Local,\n     place_projection: &'tcx [PlaceElem<'tcx>],\n@@ -1848,11 +1849,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         // is allowed, remove this match arm.\n                         ty::Adt(..) | ty::Tuple(..) => {\n                             check_parent_of_field(self, location, place_base, span, flow_state);\n-\n-                            // rust-lang/rust#21232, #54499, #54986: during period where we reject\n-                            // partial initialization, do not complain about unnecessary `mut` on\n-                            // an attempt to do a partial initialization.\n-                            self.used_mut.insert(place.local);\n                         }\n \n                         _ => {}\n@@ -1940,6 +1936,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     (prefix, base, span),\n                     mpi,\n                 );\n+\n+                // rust-lang/rust#21232, #54499, #54986: during period where we reject\n+                // partial initialization, do not complain about unnecessary `mut` on\n+                // an attempt to do a partial initialization.\n+                this.used_mut.insert(base.local);\n             }\n         }\n     }"}, {"sha": "842e90080582f5b7f40bf4059e0c5634a12c2a7e", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -221,7 +221,7 @@ fn append_list(\n ) {\n     let mut p = target_list;\n     loop {\n-        let mut r = &mut constraints[p];\n+        let r = &mut constraints[p];\n         match r.next_constraint {\n             Some(q) => p = q,\n             None => {"}, {"sha": "6ab5556e951d939a7704a6e239c9a800c664e27c", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -421,7 +421,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             let target_scopes = visitor.fixup_scopes.drain(start_point..);\n \n             for scope in target_scopes {\n-                let mut yield_data =\n+                let yield_data =\n                     visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap().last_mut().unwrap();\n                 let count = yield_data.expr_and_pat_count;\n                 let span = yield_data.span;"}, {"sha": "775fad1a365c24e6c6074d84abe5b086d47c58d8", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -917,7 +917,7 @@ mod parse {\n             }\n         }\n \n-        let mut options = slot.get_or_insert_default();\n+        let options = slot.get_or_insert_default();\n         let mut seen_always = false;\n         let mut seen_never = false;\n         let mut seen_ignore_loops = false;"}, {"sha": "5334ab5824d7ac5ef5927c2618f2e345a1b90c30", "filename": "tests/ui/lint/unused/lint-unused-mut-variables.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -205,3 +205,11 @@ fn bar() {\n     let mut b = vec![2]; //~ ERROR: variable does not need to be mutable\n \n }\n+\n+struct Arg(i32);\n+\n+// Regression test for https://github.com/rust-lang/rust/issues/110849\n+fn write_through_reference(mut arg: &mut Arg) {\n+    //~^ WARN: variable does not need to be mutable\n+    arg.0 = 1\n+}"}, {"sha": "5f66c031581784b3a619ec451340c577bf569812", "filename": "tests/ui/lint/unused/lint-unused-mut-variables.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-mut-variables.stderr?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -218,5 +218,13 @@ note: the lint level is defined here\n LL | #[deny(unused_mut)]\n    |        ^^^^^^^^^^\n \n-error: aborting due to previous error; 25 warnings emitted\n+warning: variable does not need to be mutable\n+  --> $DIR/lint-unused-mut-variables.rs:212:28\n+   |\n+LL | fn write_through_reference(mut arg: &mut Arg) {\n+   |                            ----^^^\n+   |                            |\n+   |                            help: remove this `mut`\n+\n+error: aborting due to previous error; 26 warnings emitted\n "}, {"sha": "556c95438817e0b88c08110349869cfbf1bd90d9", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut map = HashMap::new();\n     map.insert(\"a\", Test { v: 0 });\n \n-    for (_k, mut v) in map.iter_mut() {\n+    for (_k, v) in map.iter_mut() {\n         //~^ HELP use mutable method\n         //~| NOTE this iterator yields `&` references\n         v.v += 1;"}, {"sha": "b9d49a074eadeafd8d004b4f375ec8b3eade1ad1", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut map = HashMap::new();\n     map.insert(\"a\", Test { v: 0 });\n \n-    for (_k, mut v) in map.iter() {\n+    for (_k, v) in map.iter() {\n         //~^ HELP use mutable method\n         //~| NOTE this iterator yields `&` references\n         v.v += 1;"}, {"sha": "c442ed6377a8c1097833e9a900c4126250b6a2b4", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr?ref=34ef13b15b0c88bfbc89d4404c2e3ea1b24bbc38", "patch": "@@ -1,11 +1,11 @@\n error[E0594]: cannot assign to `v.v`, which is behind a `&` reference\n   --> $DIR/suggest-mut-method-for-loop-hashmap.rs:17:9\n    |\n-LL |     for (_k, mut v) in map.iter() {\n-   |                        ----------\n-   |                        |   |\n-   |                        |   help: use mutable method: `iter_mut()`\n-   |                        this iterator yields `&` references\n+LL |     for (_k, v) in map.iter() {\n+   |                    ----------\n+   |                    |   |\n+   |                    |   help: use mutable method: `iter_mut()`\n+   |                    this iterator yields `&` references\n ...\n LL |         v.v += 1;\n    |         ^^^^^^^^ `v` is a `&` reference, so the data it refers to cannot be written"}]}