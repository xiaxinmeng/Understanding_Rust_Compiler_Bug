{"sha": "c35007dbbe4846c641b5edad9fddf3f72a5a035a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTAwN2RiYmU0ODQ2YzY0MWI1ZWRhZDlmZGRmM2Y3MmE1YTAzNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T09:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T09:36:23Z"}, "message": "Auto merge of #75773 - matklad:snapshot-tests, r=Mark-Simulacrum\n\nIntroduce expect snapshot testing library into rustc\n\nSnapshot testing is a technique for writing maintainable unit tests.\nUnlike usual `assert_eq!` tests, snapshot tests allow\nto *automatically* upgrade expected values on test failure.\nIn a sense, snapshot tests are inline-version of our beloved\nUI-tests.\n\nExample:\n\n![expect](https://user-images.githubusercontent.com/1711539/90888810-3bcc8180-e3b7-11ea-9626-d06e89e1a0bb.gif)\n\nA particular library we use, `expect_test` provides an `expect!`\nmacro, which creates a sort of self-updating string literal (by using\n`file!` macro). Self-update is triggered by setting `UPDATE_EXPECT`\nenvironmental variable (this info is printed during the test failure).\nThis library was extracted from rust-analyzer, where we use it for\nmost of our tests.\n\nThere are some other, more popular snapshot testing libraries:\n\n* https://github.com/mitsuhiko/insta\n* https://github.com/aaronabramov/k9\n\nThe main differences of `expect` are:\n\n* first-class snapshot objects (so, tests can be written as functions,\n  rather than as macros)\n* focus on inline-snapshots (but file snapshots are also supported)\n* restricted feature set (only `assert_eq` and `assert_debug_eq`)\n* no extra runtime (ie, no `cargo insta`)\n\nSee rust-analyzer/rust-analyzer#5101 for a\nan extended comparison.\n\nIt is unclear if this testing style will stick with rustc in the long\nrun. At the moment, rustc is mainly tested via integrated UI tests.\nBut in the library-ified world, unit-tests will become somewhat more\nimportant (that's why use use `rustc_lexer` library-ified library as\nan example in this PR). Given that the cost of removal shouldn't be\ntoo high, it probably makes sense to just see if this flies!", "tree": {"sha": "23ac7521c788f2311b9df1b7a2a8a06e41d807ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ac7521c788f2311b9df1b7a2a8a06e41d807ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c35007dbbe4846c641b5edad9fddf3f72a5a035a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c35007dbbe4846c641b5edad9fddf3f72a5a035a", "html_url": "https://github.com/rust-lang/rust/commit/c35007dbbe4846c641b5edad9fddf3f72a5a035a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c35007dbbe4846c641b5edad9fddf3f72a5a035a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6a3ed15823cce765d56952d954e1bd8166dfa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6a3ed15823cce765d56952d954e1bd8166dfa7", "html_url": "https://github.com/rust-lang/rust/commit/3d6a3ed15823cce765d56952d954e1bd8166dfa7"}, {"sha": "f7be59c593cd21640bf2c2a669c339383816be4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7be59c593cd21640bf2c2a669c339383816be4f", "html_url": "https://github.com/rust-lang/rust/commit/f7be59c593cd21640bf2c2a669c339383816be4f"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "1bbae2cbd80c97a8869d51302cc501d3855392f1", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -1008,6 +1008,16 @@ dependencies = [\n  \"yaml-rust 0.4.4\",\n ]\n \n+[[package]]\n+name = \"expect-test\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a3e383741ea1982866572109d1a8c807bd36aad91fca701489fdca56ef92b3b8\"\n+dependencies = [\n+ \"difference\",\n+ \"once_cell\",\n+]\n+\n [[package]]\n name = \"failure\"\n version = \"0.1.8\"\n@@ -3653,6 +3663,7 @@ dependencies = [\n name = \"rustc_lexer\"\n version = \"0.1.0\"\n dependencies = [\n+ \"expect-test\",\n  \"unicode-xid\",\n ]\n "}, {"sha": "afa72b5d58c14e8744d5d43e10fe015deeba8b83", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -1754,6 +1754,11 @@ impl Step for Crate {\n             cargo.arg(\"--quiet\");\n         }\n \n+        if builder.config.cmd.bless() {\n+            // Bless `expect!` tests.\n+            cargo.env(\"UPDATE_EXPECT\", \"1\");\n+        }\n+\n         if target.contains(\"emscripten\") {\n             cargo.env(\n                 format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),"}, {"sha": "28b56f6fef4b80861b86ccc76619f3bd82be76f4", "filename": "src/librustc_lexer/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2FCargo.toml?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -19,3 +19,6 @@ name = \"rustc_lexer\"\n # Note that this crate purposefully does not depend on other rustc crates\n [dependencies]\n unicode-xid = \"0.2.0\"\n+\n+[dev-dependencies]\n+expect-test = \"0.1\""}, {"sha": "b7d6194cd77cf956d16ede3087c5b8a0a1ae4517", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -35,6 +35,7 @@ use std::convert::TryFrom;\n /// Parsed token.\n /// It doesn't contain information about data that has been parsed,\n /// only the type of the token and its size.\n+#[derive(Debug)]\n pub struct Token {\n     pub kind: TokenKind,\n     pub len: usize,"}, {"sha": "a1ea5ceb1f61283a2c5a5722f27bd1d9593552be", "filename": "src/librustc_lexer/src/tests.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -1,5 +1,7 @@\n use super::*;\n \n+use expect_test::{expect, Expect};\n+\n fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n     let s = &format!(\"r{}\", s);\n     let mut cursor = Cursor::new(s);\n@@ -120,3 +122,46 @@ fn test_shebang_followed_by_attrib() {\n     let input = \"#!/bin/rust-scripts\\n#![allow_unused(true)]\";\n     assert_eq!(strip_shebang(input), Some(19));\n }\n+\n+fn check_lexing(src: &str, expect: Expect) {\n+    let actual: String = tokenize(src).map(|token| format!(\"{:?}\\n\", token)).collect();\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn comment_flavors() {\n+    check_lexing(\n+        r\"\n+// line\n+//// line as well\n+/// outer doc line\n+//! inner doc line\n+/* block */\n+/**/\n+/*** also block */\n+/** outer doc block */\n+/*! inner doc block */\n+\",\n+        expect![[r#\"\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: LineComment { doc_style: None }, len: 7 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: LineComment { doc_style: None }, len: 17 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: LineComment { doc_style: Some(Outer) }, len: 18 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: LineComment { doc_style: Some(Inner) }, len: 18 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 11 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 4 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 18 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: BlockComment { doc_style: Some(Outer), terminated: true }, len: 22 }\n+                Token { kind: Whitespace, len: 1 }\n+                Token { kind: BlockComment { doc_style: Some(Inner), terminated: true }, len: 22 }\n+                Token { kind: Whitespace, len: 1 }\n+            \"#]],\n+    )\n+}"}, {"sha": "af3fb403703da8c242ef1b492ade360c37b23222", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35007dbbe4846c641b5edad9fddf3f72a5a035a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=c35007dbbe4846c641b5edad9fddf3f72a5a035a", "patch": "@@ -85,11 +85,13 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"crossbeam-queue\",\n     \"crossbeam-utils\",\n     \"datafrog\",\n+    \"difference\",\n     \"digest\",\n     \"dlmalloc\",\n     \"either\",\n     \"ena\",\n     \"env_logger\",\n+    \"expect-test\",\n     \"fake-simd\",\n     \"filetime\",\n     \"flate2\","}]}