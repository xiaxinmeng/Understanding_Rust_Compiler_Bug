{"sha": "a8dc1f974be05b80b2edf17b62eee47e38edf2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZGMxZjk3NGJlMDViODBiMmVkZjE3YjYyZWVlNDdlMzhlZGYyZGU=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-01-26T21:05:21Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-02-04T15:27:22Z"}, "message": "Add the kind of input from #31109 to the expensive tests (not run by default)", "tree": {"sha": "b12180bec9771837c4868f0285f5b064a7f547bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12180bec9771837c4868f0285f5b064a7f547bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8dc1f974be05b80b2edf17b62eee47e38edf2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dc1f974be05b80b2edf17b62eee47e38edf2de", "html_url": "https://github.com/rust-lang/rust/commit/a8dc1f974be05b80b2edf17b62eee47e38edf2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8dc1f974be05b80b2edf17b62eee47e38edf2de/comments", "author": null, "committer": null, "parents": [{"sha": "25c9ac32804ff3d513020f02a8bbe5bc1afd6504", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c9ac32804ff3d513020f02a8bbe5bc1afd6504", "html_url": "https://github.com/rust-lang/rust/commit/25c9ac32804ff3d513020f02a8bbe5bc1afd6504"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "725a715f7cf32935dcc81a2b0d976279a4b84b23", "filename": "src/etc/test-float-parse/_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2F_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2F_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2F_common.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -16,7 +16,7 @@ use std::mem::transmute;\n #[allow(dead_code)]\n pub const SEED: [u32; 3] = [0x243f_6a88, 0x85a3_08d3, 0x1319_8a2e];\n \n-pub fn validate(text: String) {\n+pub fn validate(text: &str) {\n     let mut out = io::stdout();\n     let x: f64 = text.parse().unwrap();\n     let f64_bytes: u64 = unsafe { transmute(x) };"}, {"sha": "2486df4446631858dab19c008b73cee3066f0a15", "filename": "src/etc/test-float-parse/few-ones.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     for a in &pow {\n         for b in &pow {\n             for c in &pow {\n-                validate((a | b | c).to_string());\n+                validate(&(a | b | c).to_string());\n             }\n         }\n     }"}, {"sha": "9d12a03dae29017535802cd51d08d5a29d12b177", "filename": "src/etc/test-float-parse/huge-pow10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -15,7 +15,7 @@ use _common::validate;\n fn main() {\n     for e in 300..310 {\n         for i in 0..100000 {\n-            validate(format!(\"{}e{}\", i, e));\n+            validate(&format!(\"{}e{}\", i, e));\n         }\n     }\n }"}, {"sha": "9598bd12a0d45a67aee0e313a4c66e20a96b52a3", "filename": "src/etc/test-float-parse/long-fractions.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod _common;\n+\n+use std::char;\n+use _common::validate;\n+\n+fn main() {\n+    for n in 0..10 {\n+        let digit = char::from_digit(n, 10).unwrap();\n+        let mut s = \"0.\".to_string();\n+        for _ in 0..400 {\n+            s.push(digit);\n+            if s.parse::<f64>().is_ok() {\n+                validate(&s);\n+            }\n+        }\n+    }\n+}"}, {"sha": "674c30ad84ed531da78959dd197a5885bea235cb", "filename": "src/etc/test-float-parse/many-digits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -23,9 +23,9 @@ fn main() {\n     let mut rnd = IsaacRng::from_seed(&SEED);\n     let mut range = Range::new(0, 10);\n     for _ in 0..5_000_000u64 {\n-        let num_digits = rnd.gen_range(100, 300);\n+        let num_digits = rnd.gen_range(100, 400);\n         let digits = gen_digits(num_digits, &mut range, &mut rnd);\n-        validate(digits);\n+        validate(&digits);\n     }\n }\n "}, {"sha": "1d82912054e2abc45725bbb320c7e1154361bac3", "filename": "src/etc/test-float-parse/rand-f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -25,7 +25,7 @@ fn main() {\n         let bits = rnd.next_u64();\n         let x: f64 = unsafe { transmute(bits) };\n         if x.is_finite() {\n-            validate(format!(\"{:e}\", x));\n+            validate(&format!(\"{:e}\", x));\n             i += 1;\n         }\n     }"}, {"sha": "4909f7c58f89a6f27e6c847ef635f0c3e2a94b9f", "filename": "src/etc/test-float-parse/short-decimals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -22,8 +22,8 @@ fn main() {\n             if i % 10 == 0 {\n                 continue;\n             }\n-            validate(format!(\"{}e{}\", i, e));\n-            validate(format!(\"{}e-{}\", i, e));\n+            validate(&format!(\"{}e{}\", i, e));\n+            validate(&format!(\"{}e-{}\", i, e));\n         }\n     }\n }"}, {"sha": "04a7cc2746675477acc39ef100cbe40ddab65b84", "filename": "src/etc/test-float-parse/subnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -16,8 +16,8 @@ use _common::validate;\n fn main() {\n     for bits in 0u32..(1 << 21) {\n         let single: f32 = unsafe { transmute(bits) };\n-        validate(format!(\"{:e}\", single));\n+        validate(&format!(\"{:e}\", single));\n         let double: f64 = unsafe { transmute(bits as u64) };\n-        validate(format!(\"{:e}\", double));\n+        validate(&format!(\"{:e}\", double));\n     }\n }"}, {"sha": "50ca5e32609acba5051abdc644e56d812295909d", "filename": "src/etc/test-float-parse/tiny-pow10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -15,7 +15,7 @@ use _common::validate;\n fn main() {\n     for e in 301..327 {\n         for i in 0..100000 {\n-            validate(format!(\"{}e-{}\", i, e));\n+            validate(&format!(\"{}e-{}\", i, e));\n         }\n     }\n }"}, {"sha": "571ac80e5b0c5ed71ff58a7c445a661ee682f693", "filename": "src/etc/test-float-parse/u32-small.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -14,6 +14,6 @@ use _common::validate;\n \n fn main() {\n     for i in 0..(1 << 19) {\n-        validate(i.to_string());\n+        validate(&i.to_string());\n     }\n }"}, {"sha": "5b25c8399319c2ab9d5d4f6950bce834ee201a2f", "filename": "src/etc/test-float-parse/u64-pow2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc1f974be05b80b2edf17b62eee47e38edf2de/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs?ref=a8dc1f974be05b80b2edf17b62eee47e38edf2de", "patch": "@@ -16,13 +16,13 @@ use std::u64;\n fn main() {\n     for exp in 19..64 {\n         let power: u64 = 1 << exp;\n-        validate(power.to_string());\n+        validate(&power.to_string());\n         for offset in 1..123 {\n-            validate((power + offset).to_string());\n-            validate((power - offset).to_string());\n+            validate(&(power + offset).to_string());\n+            validate(&(power - offset).to_string());\n         }\n     }\n     for offset in 0..123 {\n-        validate((u64::MAX - offset).to_string());\n+        validate(&(u64::MAX - offset).to_string());\n     }\n }"}]}