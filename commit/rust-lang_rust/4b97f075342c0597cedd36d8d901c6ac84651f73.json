{"sha": "4b97f075342c0597cedd36d8d901c6ac84651f73", "node_id": "C_kwDOAAsO6NoAKDRiOTdmMDc1MzQyYzA1OTdjZWRkMzZkOGQ5MDFjNmFjODQ2NTFmNzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T14:02:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T14:02:19Z"}, "message": "Rollup merge of #106971 - oli-obk:tait_error, r=davidtwco\n\nHandle diagnostics customization on the fluent side (for one specific diagnostic)\n\nr? ```@davidtwco```", "tree": {"sha": "42ee83596f166610d6a7d244e86876de7e3dd666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ee83596f166610d6a7d244e86876de7e3dd666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b97f075342c0597cedd36d8d901c6ac84651f73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0ofrCRBK7hj4Ov3rIwAANxYIAEMbgVbnNC4YXZNYHbF196uA\nXkygcDyTFyBECGq0RhuPvA8APARkLWj+YDLJJ+EvYmJ1UW+lENTEy9qw5AvA1Lfc\nhOOdd5UP5OzAFOzZmIuY/oYhSTXVUCJnrh62V3vsmx1xosJNye8zO3EPGBQjCQO1\nxqKOZW3kvjz8of1IrjH1nKm/SmHa2Dl4U+PlGd1yv1x7haYMmaYwAjtvr+CndgZQ\nivXuACjDm5/vbPbOgZzpUND4fSg6KzFr4vYVS8RSf76GJITgAglY4kkgk7Xh2VJo\nOnF6w7RuRaf4M4oT3DysB5dvZ+A526RmpgIXrKn82IOultyu4rTTLKramCkMYO8=\n=KuM0\n-----END PGP SIGNATURE-----\n", "payload": "tree 42ee83596f166610d6a7d244e86876de7e3dd666\nparent 1b442befcadc21fb5c7ae02d1a7c6d87582cac96\nparent 64e5f9129f6ffb382b458a255eed36f2581271c4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674741739 +0100\ncommitter GitHub <noreply@github.com> 1674741739 +0100\n\nRollup merge of #106971 - oli-obk:tait_error, r=davidtwco\n\nHandle diagnostics customization on the fluent side (for one specific diagnostic)\n\nr? ```@davidtwco```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b97f075342c0597cedd36d8d901c6ac84651f73", "html_url": "https://github.com/rust-lang/rust/commit/4b97f075342c0597cedd36d8d901c6ac84651f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b97f075342c0597cedd36d8d901c6ac84651f73/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b442befcadc21fb5c7ae02d1a7c6d87582cac96", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b442befcadc21fb5c7ae02d1a7c6d87582cac96", "html_url": "https://github.com/rust-lang/rust/commit/1b442befcadc21fb5c7ae02d1a7c6d87582cac96"}, {"sha": "64e5f9129f6ffb382b458a255eed36f2581271c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e5f9129f6ffb382b458a255eed36f2581271c4", "html_url": "https://github.com/rust-lang/rust/commit/64e5f9129f6ffb382b458a255eed36f2581271c4"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "e0e814cfc0ac812e94655a920a909da4809555bb", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -367,18 +367,6 @@ fn check_opaque_type_parameter_valid(\n     for (i, arg) in opaque_type_key.substs.iter().enumerate() {\n         let arg_is_param = match arg.unpack() {\n             GenericArgKind::Type(ty) => matches!(ty.kind(), ty::Param(_)),\n-            GenericArgKind::Lifetime(lt) if lt.is_static() => {\n-                tcx.sess\n-                    .struct_span_err(span, \"non-defining opaque type use in defining scope\")\n-                    .span_label(\n-                        tcx.def_span(opaque_generics.param_at(i, tcx).def_id),\n-                        \"cannot use static lifetime; use a bound lifetime \\\n-                                    instead or remove the lifetime parameter from the \\\n-                                    opaque type\",\n-                    )\n-                    .emit();\n-                return false;\n-            }\n             GenericArgKind::Lifetime(lt) => {\n                 matches!(*lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n             }"}, {"sha": "0021638c10268c9ce5fcf68c7ffac5d0793d570c", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -123,4 +123,7 @@ borrowck_cannot_move_when_borrowed =\n \n borrowck_opaque_type_non_generic_param =\n     expected generic {$kind} parameter, found `{$ty}`\n-    .label = this generic parameter must be used with a generic {$kind} parameter\n+    .label = {STREQ($ty, \"'static\") ->\n+        [true] cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n+        *[other] this generic parameter must be used with a generic {$kind} parameter\n+    }"}, {"sha": "bcc1d9002dfdebe040e00726a48a8a34dceac576", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -147,8 +147,6 @@ infer_region_explanation = {$pref_kind ->\n }{$desc_kind ->\n     *[should_not_happen] [{$desc_kind}]\n     [restatic] the static lifetime\n-    [reempty] the empty lifetime\n-    [reemptyuni] the empty lifetime in universe {$desc_arg}\n     [revar] lifetime {$desc_arg}\n \n     [as_defined] the lifetime `{$desc_arg}` as defined here"}, {"sha": "f053bdc3809be30d5377cae4abc3960f503644b9", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -182,6 +182,9 @@ pub fn fluent_bundle(\n     trace!(?locale);\n     let mut bundle = new_bundle(vec![locale]);\n \n+    // Add convenience functions available to ftl authors.\n+    register_functions(&mut bundle);\n+\n     // Fluent diagnostics can insert directionality isolation markers around interpolated variables\n     // indicating that there may be a shift from right-to-left to left-to-right text (or\n     // vice-versa). These are disabled because they are sometimes visible in the error output, but\n@@ -244,6 +247,15 @@ pub fn fluent_bundle(\n     Ok(Some(bundle))\n }\n \n+fn register_functions(bundle: &mut FluentBundle) {\n+    bundle\n+        .add_function(\"STREQ\", |positional, _named| match positional {\n+            [FluentValue::String(a), FluentValue::String(b)] => format!(\"{}\", (a == b)).into(),\n+            _ => FluentValue::Error,\n+        })\n+        .expect(\"Failed to add a function to the bundle.\");\n+}\n+\n /// Type alias for the result of `fallback_fluent_bundle` - a reference-counted pointer to a lazily\n /// evaluated fluent bundle.\n pub type LazyFallbackBundle = Lrc<Lazy<FluentBundle, impl FnOnce() -> FluentBundle>>;\n@@ -256,6 +268,9 @@ pub fn fallback_fluent_bundle(\n ) -> LazyFallbackBundle {\n     Lrc::new(Lazy::new(move || {\n         let mut fallback_bundle = new_bundle(vec![langid!(\"en-US\")]);\n+\n+        register_functions(&mut fallback_bundle);\n+\n         // See comment in `fluent_bundle`.\n         fallback_bundle.set_use_isolating(with_directionality_markers);\n "}, {"sha": "eeb5dca07f06a4bd86bc34fc0f2e2e26e5b8a7db", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -8,7 +8,7 @@ type X<'a> = impl Into<&'static str> + From<&'a str>;\n fn f<'a: 'static>(t: &'a str) -> X<'a> {\n     //~^ WARNING unnecessary lifetime parameter\n     t\n-    //~^ ERROR non-defining opaque type use\n+    //~^ ERROR expected generic lifetime parameter, found `'static`\n }\n \n fn extend_lt<'a>(o: &'a str) -> &'static str {"}, {"sha": "94882597a62e6fd823ceb778ca1e5c18bebe16c8", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -6,7 +6,7 @@ LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic lifetime parameter, found `'static`\n   --> $DIR/bounds-are-checked.rs:10:5\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n@@ -17,3 +17,4 @@ LL |     t\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "e7b8567b9a217d7e629343116d52655ac114e04a", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -19,7 +19,7 @@ fn concrete_ty() -> OneTy<u32> {\n \n fn concrete_lifetime() -> OneLifetime<'static> {\n     6u32\n-    //~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR expected generic lifetime parameter, found `'static`\n }\n \n fn concrete_const() -> OneConst<{ 123 }> {"}, {"sha": "966fe823f024dd99e4f3e6d1e70688ffb674aa97", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b97f075342c0597cedd36d8d901c6ac84651f73/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=4b97f075342c0597cedd36d8d901c6ac84651f73", "patch": "@@ -7,7 +7,7 @@ LL | type OneTy<T> = impl Debug;\n LL |     5u32\n    |     ^^^^\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic lifetime parameter, found `'static`\n   --> $DIR/generic_nondefining_use.rs:21:5\n    |\n LL | type OneLifetime<'a> = impl Debug;"}]}