{"sha": "5641481ad735c742cc669bb1e47f10116b789ee7", "node_id": "C_kwDOAAsO6NoAKDU2NDE0ODFhZDczNWM3NDJjYzY2OWJiMWU0N2YxMDExNmI3ODllZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T17:17:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T17:17:25Z"}, "message": "Auto merge of #89629 - GuillaumeGomez:rollup-s4r8me6, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89298 (Issue 89193 - Fix ICE when using `usize` and `isize` with SIMD gathers )\n - #89461 (Add `deref_into_dyn_supertrait` lint.)\n - #89477 (Move items related to computing diffs to a separate file)\n - #89559 (RustWrapper: adapt for LLVM API change)\n - #89585 (Emit item no type error even if type inference fails)\n - #89596 (Make cfg imply doc(cfg))\n - #89615 (Add InferCtxt::with_opaque_type_inference to get_body_with_borrowck_facts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa41cadb0f6d2abd2767af4aa39fd271cb0ee2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa41cadb0f6d2abd2767af4aa39fd271cb0ee2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5641481ad735c742cc669bb1e47f10116b789ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5641481ad735c742cc669bb1e47f10116b789ee7", "html_url": "https://github.com/rust-lang/rust/commit/5641481ad735c742cc669bb1e47f10116b789ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5641481ad735c742cc669bb1e47f10116b789ee7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0157cc977fd71297ce73e2f249321f5ba2555d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0157cc977fd71297ce73e2f249321f5ba2555d42", "html_url": "https://github.com/rust-lang/rust/commit/0157cc977fd71297ce73e2f249321f5ba2555d42"}, {"sha": "0fbb011eb447ba4eebdaab6c32b12aac3b6422a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbb011eb447ba4eebdaab6c32b12aac3b6422a2", "html_url": "https://github.com/rust-lang/rust/commit/0fbb011eb447ba4eebdaab6c32b12aac3b6422a2"}], "stats": {"total": 923, "additions": 730, "deletions": 193}, "files": [{"sha": "39de549c7bd159252e3956220106cd49af200a15", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -4454,6 +4454,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_parse_format\","}, {"sha": "bce5cd8174d086458980d1d65244b9369896b0c4", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -279,6 +279,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n                 gate_doc!(\n                     cfg => doc_cfg\n+                    cfg_hide => doc_cfg_hide\n                     masked => doc_masked\n                     notable_trait => doc_notable_trait\n                     keyword => doc_keyword"}, {"sha": "97daad201d95941be78f57725f8468592430ffed", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -31,7 +31,7 @@ pub fn get_body_with_borrowck_facts<'tcx>(\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> BodyWithBorrowckFacts<'tcx> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n-    tcx.infer_ctxt().enter(|infcx| {\n+    tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n         *super::do_mir_borrowck(&infcx, input_body, promoted, true).1.unwrap()"}, {"sha": "c43141c769519c790311e3b456f57463598030c1", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::{sym, symbol::kw, Span, Symbol};\n use rustc_target::abi::{self, HasDataLayout, Primitive};\n-use rustc_target::spec::PanicStrategy;\n+use rustc_target::spec::{HasTargetSpec, PanicStrategy};\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -1190,11 +1190,28 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: u64, no_pointers: usize) -> String {\n+    fn llvm_vector_str(\n+        elem_ty: Ty<'_>,\n+        vec_len: u64,\n+        no_pointers: usize,\n+        bx: &Builder<'a, 'll, 'tcx>,\n+    ) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match *elem_ty.kind() {\n-            ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-            ty::Uint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::Int(v) => format!(\n+                \"v{}{}i{}\",\n+                vec_len,\n+                p0s,\n+                // Normalize to prevent crash if v: IntTy::Isize\n+                v.normalize(bx.target_spec().pointer_width).bit_width().unwrap()\n+            ),\n+            ty::Uint(v) => format!(\n+                \"v{}{}i{}\",\n+                vec_len,\n+                p0s,\n+                // Normalize to prevent crash if v: UIntTy::Usize\n+                v.normalize(bx.target_spec().pointer_width).bit_width().unwrap()\n+            ),\n             ty::Float(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n             _ => unreachable!(),\n         }\n@@ -1330,11 +1347,11 @@ fn generic_simd_intrinsic(\n \n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n-        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n+        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count, bx);\n \n         // Type of the vector of elements:\n         let llvm_elem_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count - 1);\n-        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1);\n+        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1, bx);\n \n         let llvm_intrinsic =\n             format!(\"llvm.masked.gather.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n@@ -1458,11 +1475,11 @@ fn generic_simd_intrinsic(\n \n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n-        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n+        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count, bx);\n \n         // Type of the vector of elements:\n         let llvm_elem_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count - 1);\n-        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1);\n+        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1, bx);\n \n         let llvm_intrinsic =\n             format!(\"llvm.masked.scatter.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);"}, {"sha": "ec2c703ad495d28e6e9c5bccfaa8bb399ae8e94c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -675,6 +675,9 @@ declare_features! (\n     /// Allows `#[track_caller]` on closures and generators.\n     (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n \n+    /// Allows `#[doc(cfg_hide(...))]`.\n+    (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "7a51e1e321a2a459d0d87bbde27cc369c0cde069", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -3051,6 +3051,7 @@ declare_lint_pass! {\n         BREAK_WITH_LABEL_AND_LOOP,\n         UNUSED_ATTRIBUTES,\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n+        DEREF_INTO_DYN_SUPERTRAIT,\n     ]\n }\n \n@@ -3512,3 +3513,48 @@ declare_lint! {\n     Allow,\n     \"detect when patterns of types marked `non_exhaustive` are missed\",\n }\n+\n+declare_lint! {\n+    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n+    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n+    ///\n+    /// These implementations will become shadowed when the `trait_upcasting` feature is stablized.\n+    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(deref_into_dyn_supertrait)]\n+    /// #![allow(dead_code)]\n+    ///\n+    /// use core::ops::Deref;\n+    ///\n+    /// trait A {}\n+    /// trait B: A {}\n+    /// impl<'a> Deref for dyn 'a + B {\n+    ///     type Target = dyn A;\n+    ///     fn deref(&self) -> &Self::Target {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    ///\n+    /// fn take_a(_: &dyn A) { }\n+    ///\n+    /// fn take_b(b: &dyn B) {\n+    ///     take_a(b);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n+    /// over certain other coercion rules, which will cause some behavior change.\n+    pub DEREF_INTO_DYN_SUPERTRAIT,\n+    Warn,\n+    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n+    };\n+}"}, {"sha": "97114729c0a2766e986c64cabe984fb30e47cba6", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -54,7 +54,11 @@ static LLVM_THREAD_LOCAL char *LastError;\n //\n // Notably it exits the process with code 101, unlike LLVM's default of 1.\n static void FatalErrorHandler(void *UserData,\n+#if LLVM_VERSION_LT(14, 0)\n                               const std::string& Reason,\n+#else\n+                              const char* Reason,\n+#endif\n                               bool GenCrashDiag) {\n   // Do the same thing that the default error handler does.\n   std::cerr << \"LLVM ERROR: \" << Reason << std::endl;"}, {"sha": "1815302101f0e0c68af2f5657d76ffbdf8809f10", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -938,6 +938,7 @@ impl CheckAttrVisitor<'tcx> {\n                         // plugins: removed, but rustdoc warns about it itself\n                         sym::alias\n                         | sym::cfg\n+                        | sym::cfg_hide\n                         | sym::hidden\n                         | sym::html_favicon_url\n                         | sym::html_logo_url"}, {"sha": "382dbc377d63e8a313514ffc145b2f697fb79a60", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -399,6 +399,7 @@ symbols! {\n         cfg_attr_multi,\n         cfg_doctest,\n         cfg_eval,\n+        cfg_hide,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -547,6 +548,7 @@ symbols! {\n         doc,\n         doc_alias,\n         doc_cfg,\n+        doc_cfg_hide,\n         doc_keyword,\n         doc_masked,\n         doc_notable_trait,"}, {"sha": "d59bdae0332cb3001868854c7744692c059d68a3", "filename": "compiler/rustc_trait_selection/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_trait_selection%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_trait_selection%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2FCargo.toml?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -17,6 +17,7 @@ rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "f3706aa6e71aab4bb639373a6ee9c3fcdb73eb5a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -6,12 +6,17 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n+use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_target::spec::abi::Abi;\n \n+use crate::traits;\n use crate::traits::coherence::Conflict;\n+use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{util, SelectionResult};\n use crate::traits::{Overflow, Unimplemented};\n \n@@ -672,6 +677,55 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })\n     }\n \n+    /// Temporary migration for #89190\n+    fn need_migrate_deref_output_trait_object(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        cause: &traits::ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Option<(Ty<'tcx>, DefId)> {\n+        let tcx = self.tcx();\n+        if tcx.features().trait_upcasting {\n+            return None;\n+        }\n+\n+        // <ty as Deref>\n+        let trait_ref = ty::TraitRef {\n+            def_id: tcx.lang_items().deref_trait()?,\n+            substs: tcx.mk_substs_trait(ty, &[]),\n+        };\n+\n+        let obligation = traits::Obligation::new(\n+            cause.clone(),\n+            param_env,\n+            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+        );\n+        if !self.infcx.predicate_may_hold(&obligation) {\n+            return None;\n+        }\n+\n+        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n+        let normalized_ty = fulfillcx.normalize_projection_type(\n+            &self.infcx,\n+            param_env,\n+            ty::ProjectionTy {\n+                item_def_id: tcx.lang_items().deref_target()?,\n+                substs: trait_ref.substs,\n+            },\n+            cause.clone(),\n+        );\n+\n+        let data = if let ty::Dynamic(ref data, ..) = normalized_ty.kind() {\n+            data\n+        } else {\n+            return None;\n+        };\n+\n+        let def_id = data.principal_def_id()?;\n+\n+        return Some((normalized_ty, def_id));\n+    }\n+\n     /// Searches for unsizing that might apply to `obligation`.\n     fn assemble_candidates_for_unsizing(\n         &mut self,\n@@ -732,6 +786,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let principal_a = data_a.principal().unwrap();\n                         let target_trait_did = principal_def_id_b.unwrap();\n                         let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);\n+                        if let Some((deref_output_ty, deref_output_trait_did)) = self\n+                            .need_migrate_deref_output_trait_object(\n+                                source,\n+                                &obligation.cause,\n+                                obligation.param_env,\n+                            )\n+                        {\n+                            if deref_output_trait_did == target_trait_did {\n+                                self.tcx().struct_span_lint_hir(\n+                                    DEREF_INTO_DYN_SUPERTRAIT,\n+                                    obligation.cause.body_id,\n+                                    obligation.cause.span,\n+                                    |lint| {\n+                                        lint.build(&format!(\n+                                            \"`{}` implements `Deref` with supertrait `{}` as output\",\n+                                            source,\n+                                            deref_output_ty\n+                                        )).emit();\n+                                    },\n+                                );\n+                                return;\n+                            }\n+                        }\n+\n                         for (idx, upcast_trait_ref) in\n                             util::supertraits(self.tcx(), source_trait_ref).enumerate()\n                         {"}, {"sha": "cee3679d0a052207e79ba3f14e72c81dd190771a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -752,29 +752,31 @@ fn infer_placeholder_type<'a>(\n     // us to improve in typeck so we do that now.\n     match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n         Some(mut err) => {\n-            // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n-            // We are typeck and have the real type, so remove that and suggest the actual type.\n-            err.suggestions.clear();\n-\n-            // Suggesting unnameable types won't help.\n-            let mut mk_nameable = MakeNameable::new(tcx);\n-            let ty = mk_nameable.fold_ty(ty);\n-            let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n-            if let Some(sugg_ty) = sugg_ty {\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\"provide a type for the {item}\", item = kind),\n-                    format!(\"{}: {}\", item_ident, sugg_ty),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_note(\n-                    tcx.hir().body(body_id).value.span,\n-                    &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n-                );\n+            if !ty.references_error() {\n+                // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n+                // We are typeck and have the real type, so remove that and suggest the actual type.\n+                err.suggestions.clear();\n+\n+                // Suggesting unnameable types won't help.\n+                let mut mk_nameable = MakeNameable::new(tcx);\n+                let ty = mk_nameable.fold_ty(ty);\n+                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n+                if let Some(sugg_ty) = sugg_ty {\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"provide a type for the {item}\", item = kind),\n+                        format!(\"{}: {}\", item_ident, sugg_ty),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.span_note(\n+                        tcx.hir().body(body_id).value.span,\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                    );\n+                }\n             }\n \n-            err.emit_unless(ty.references_error());\n+            err.emit();\n         }\n         None => {\n             let mut diag = bad_placeholder_type(tcx, vec![span], kind);"}, {"sha": "72fe84222deaca860e457eb8e56990397a96dcac", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -67,6 +67,10 @@\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(allow(unused_variables), deny(warnings)))\n )]\n+#![cfg_attr(\n+    not(bootstrap),\n+    doc(cfg_hide(not(test), not(any(test, bootstrap)), target_has_atomic = \"ptr\"))\n+)]\n #![no_std]\n #![needs_allocator]\n #![warn(deprecated_in_future)]\n@@ -146,6 +150,8 @@\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]\n+#![feature(doc_cfg)]\n+#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": "630876445ba825aea359a94b3f06a056e4a2f902", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -60,6 +60,30 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n+#![cfg_attr(\n+    not(bootstrap),\n+    doc(cfg_hide(\n+        not(test),\n+        target_pointer_width = \"16\",\n+        target_pointer_width = \"32\",\n+        target_pointer_width = \"64\",\n+        target_has_atomic = \"8\",\n+        target_has_atomic = \"16\",\n+        target_has_atomic = \"32\",\n+        target_has_atomic = \"64\",\n+        target_has_atomic = \"ptr\",\n+        target_has_atomic_equal_alignment = \"8\",\n+        target_has_atomic_equal_alignment = \"16\",\n+        target_has_atomic_equal_alignment = \"32\",\n+        target_has_atomic_equal_alignment = \"64\",\n+        target_has_atomic_equal_alignment = \"ptr\",\n+        target_has_atomic_load_store = \"8\",\n+        target_has_atomic_load_store = \"16\",\n+        target_has_atomic_load_store = \"32\",\n+        target_has_atomic_load_store = \"64\",\n+        target_has_atomic_load_store = \"ptr\",\n+    ))\n+)]\n #![no_core]\n //\n // Lints:\n@@ -133,6 +157,7 @@\n #![feature(doc_notable_trait)]\n #![feature(doc_primitive)]\n #![feature(exhaustive_patterns)]\n+#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(if_let_guard)]"}, {"sha": "b16436a18f0af2ad8f60524a8e125e8033f962a1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -195,6 +195,7 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n+#![cfg_attr(not(bootstrap), doc(cfg_hide(not(test), not(any(test, bootstrap)))))]\n // Don't link to std. We are std.\n #![no_std]\n #![warn(deprecated_in_future)]\n@@ -263,6 +264,7 @@\n #![feature(custom_test_frameworks)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n+#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n #![feature(doc_keyword)]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]"}, {"sha": "30eeac14b43f5dde525fa633c2a4db89023dcf79", "filename": "library/std/src/os/raw/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -46,6 +46,7 @@ macro_rules! type_alias {\n }\n \n type_alias! { \"char.md\", c_char = u8, NonZero_c_char = NonZeroU8;\n+#[doc(cfg(all()))]\n #[cfg(any(\n     all(\n         target_os = \"linux\",\n@@ -88,6 +89,7 @@ type_alias! { \"char.md\", c_char = u8, NonZero_c_char = NonZeroU8;\n     all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n ))]}\n type_alias! { \"char.md\", c_char = i8, NonZero_c_char = NonZeroI8;\n+#[doc(cfg(all()))]\n #[cfg(not(any(\n     all(\n         target_os = \"linux\",\n@@ -136,12 +138,16 @@ type_alias! { \"ushort.md\", c_ushort = u16, NonZero_c_ushort = NonZeroU16; }\n type_alias! { \"int.md\", c_int = i32, NonZero_c_int = NonZeroI32; }\n type_alias! { \"uint.md\", c_uint = u32, NonZero_c_uint = NonZeroU32; }\n type_alias! { \"long.md\", c_long = i32, NonZero_c_long = NonZeroI32;\n+#[doc(cfg(all()))]\n #[cfg(any(target_pointer_width = \"32\", windows))] }\n type_alias! { \"ulong.md\", c_ulong = u32, NonZero_c_ulong = NonZeroU32;\n+#[doc(cfg(all()))]\n #[cfg(any(target_pointer_width = \"32\", windows))] }\n type_alias! { \"long.md\", c_long = i64, NonZero_c_long = NonZeroI64;\n+#[doc(cfg(all()))]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n type_alias! { \"ulong.md\", c_ulong = u64, NonZero_c_ulong = NonZeroU64;\n+#[doc(cfg(all()))]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n type_alias! { \"longlong.md\", c_longlong = i64, NonZero_c_longlong = NonZeroI64; }\n type_alias! { \"ulonglong.md\", c_ulonglong = u64, NonZero_c_ulonglong = NonZeroU64; }"}, {"sha": "0ef3adade5c8387a3ac0cebb4fe421ab64efa643", "filename": "library/std/src/os/windows/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -7,8 +7,10 @@ use crate::os::raw::c_void;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type HANDLE = *mut c_void;\n #[cfg(target_pointer_width = \"32\")]\n+#[doc(cfg(all()))]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type SOCKET = u32;\n #[cfg(target_pointer_width = \"64\")]\n+#[doc(cfg(all()))]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type SOCKET = u64;"}, {"sha": "b463c1dc7146b6d5f9b6f98f915b6bc0a7d229cb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -318,10 +318,10 @@ fn merge_attrs(\n             } else {\n                 Attributes::from_ast(&both, None)\n             },\n-            both.cfg(cx.sess()),\n+            both.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n     } else {\n-        (old_attrs.clean(cx), old_attrs.cfg(cx.sess()))\n+        (old_attrs.clean(cx), old_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg))\n     }\n }\n "}, {"sha": "969d15dd6a160e10a7a1b521a85eefffc4f37728", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -1973,7 +1973,7 @@ fn clean_extern_crate(\n         def_id: crate_def_id.into(),\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },\n-        cfg: attrs.cfg(cx.sess()),\n+        cfg: attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n     }]\n }\n "}, {"sha": "5b722175f988cd9928c051c43878d9d176a116ad", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -421,7 +421,7 @@ impl Item {\n             kind,\n             box ast_attrs.clean(cx),\n             cx,\n-            ast_attrs.cfg(cx.sess()),\n+            ast_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n     }\n \n@@ -747,7 +747,7 @@ crate trait AttributesExt {\n \n     fn other_attrs(&self) -> Vec<ast::Attribute>;\n \n-    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>>;\n+    fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n@@ -772,8 +772,41 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n     }\n \n-    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>> {\n-        let mut cfg = Cfg::True;\n+    fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>> {\n+        let sess = tcx.sess;\n+        let doc_cfg_active = tcx.features().doc_cfg;\n+\n+        fn single<T: IntoIterator>(it: T) -> Option<T::Item> {\n+            let mut iter = it.into_iter();\n+            let item = iter.next()?;\n+            if iter.next().is_some() {\n+                return None;\n+            }\n+            Some(item)\n+        }\n+\n+        let mut cfg = if doc_cfg_active {\n+            let mut doc_cfg = self\n+                .iter()\n+                .filter(|attr| attr.has_name(sym::doc))\n+                .flat_map(|attr| attr.meta_item_list().unwrap_or_else(Vec::new))\n+                .filter(|attr| attr.has_name(sym::cfg))\n+                .peekable();\n+            if doc_cfg.peek().is_some() {\n+                doc_cfg\n+                    .filter_map(|attr| Cfg::parse(attr.meta_item()?).ok())\n+                    .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n+            } else {\n+                self.iter()\n+                    .filter(|attr| attr.has_name(sym::cfg))\n+                    .filter_map(|attr| single(attr.meta_item_list()?))\n+                    .filter_map(|attr| Cfg::parse(attr.meta_item()?).ok())\n+                    .filter(|cfg| !hidden_cfg.contains(cfg))\n+                    .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n+            }\n+        } else {\n+            Cfg::True\n+        };\n \n         for attr in self.iter() {\n             // #[doc]\n@@ -800,6 +833,8 @@ impl AttributesExt for [ast::Attribute] {\n             }\n         }\n \n+        // treat #[target_feature(enable = \"feat\")] attributes as if they were\n+        // #[doc(cfg(target_feature = \"feat\"))] attributes as well\n         for attr in self.lists(sym::target_feature) {\n             if attr.has_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {"}, {"sha": "9e64d200b437339abf5d20ba337c43f0e63bea69", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         let ast_attrs = self.tcx.hir().attrs(hir_id);\n         let mut attrs = Attributes::from_ast(ast_attrs, None);\n \n-        if let Some(ref cfg) = ast_attrs.cfg(self.sess) {\n+        if let Some(ref cfg) = ast_attrs.cfg(self.tcx, &FxHashSet::default()) {\n             if !cfg.matches(&self.sess.parse_sess, Some(&self.sess.features_untracked())) {\n                 return;\n             }"}, {"sha": "cc9e081add199baac86fa3d2c85a43eda1d425a7", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -119,6 +119,8 @@ crate struct Cache {\n     ///\n     /// Links are indexed by the DefId of the item they document.\n     crate intra_doc_links: FxHashMap<ItemId, Vec<clean::ItemLink>>,\n+    /// Cfg that have been hidden via #![doc(cfg_hide(...))]\n+    crate hidden_cfg: FxHashSet<clean::cfg::Cfg>,\n }\n \n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`."}, {"sha": "cab3fca708b2e46654a8285cda7ea19ffda82382", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -323,7 +323,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     let import_item = clean::Item {\n                         def_id: import_def_id.into(),\n                         attrs: import_attrs,\n-                        cfg: ast_attrs.cfg(cx.sess()),\n+                        cfg: ast_attrs.cfg(cx.tcx(), &cx.cache().hidden_cfg),\n                         ..myitem.clone()\n                     };\n "}, {"sha": "36b1a14f6c1ea488f0d26af3316584a9373ff7e2", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -6,6 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span;\n@@ -15,7 +16,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::mem;\n \n-use crate::clean::{self, AttributesExt, NestedAttributesExt};\n+use crate::clean::{self, cfg::Cfg, AttributesExt, NestedAttributesExt};\n use crate::core;\n use crate::doctree::*;\n \n@@ -97,6 +98,31 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n+\n+        self.cx.cache.hidden_cfg = self\n+            .cx\n+            .tcx\n+            .hir()\n+            .attrs(CRATE_HIR_ID)\n+            .iter()\n+            .filter(|attr| attr.has_name(sym::doc))\n+            .flat_map(|attr| attr.meta_item_list().into_iter().flatten())\n+            .filter(|attr| attr.has_name(sym::cfg_hide))\n+            .flat_map(|attr| {\n+                attr.meta_item_list()\n+                    .unwrap_or(&[])\n+                    .iter()\n+                    .filter_map(|attr| {\n+                        Some(\n+                            Cfg::parse(attr.meta_item()?)\n+                                .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n+                                .ok()?,\n+                        )\n+                    })\n+                    .collect::<Vec<_>>()\n+            })\n+            .collect();\n+\n         self.cx.cache.exact_paths = self.exact_paths;\n         top_level_module\n     }"}, {"sha": "354d76bc3c4333d6d6dc2797068c91c16fd44202", "filename": "src/test/rustdoc-ui/doc-cfg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,9 @@\n+#![feature(doc_cfg)]\n+\n+#[doc(cfg(), cfg(foo, bar))]\n+//~^ ERROR\n+//~^^ ERROR\n+#[doc(cfg(foo), cfg(bar))] // ok!\n+#[doc(cfg())] //~ ERROR\n+#[doc(cfg(foo, bar))] //~ ERROR\n+pub fn foo() {}"}, {"sha": "b379f6febe29f1c8511aa49bcd902d650e7e37b3", "filename": "src/test/rustdoc-ui/doc-cfg.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,26 @@\n+error: `cfg` predicate is not specified\n+  --> $DIR/doc-cfg.rs:3:7\n+   |\n+LL | #[doc(cfg(), cfg(foo, bar))]\n+   |       ^^^^^\n+\n+error: multiple `cfg` predicates are specified\n+  --> $DIR/doc-cfg.rs:3:23\n+   |\n+LL | #[doc(cfg(), cfg(foo, bar))]\n+   |                       ^^^\n+\n+error: `cfg` predicate is not specified\n+  --> $DIR/doc-cfg.rs:7:7\n+   |\n+LL | #[doc(cfg())]\n+   |       ^^^^^\n+\n+error: multiple `cfg` predicates are specified\n+  --> $DIR/doc-cfg.rs:8:16\n+   |\n+LL | #[doc(cfg(foo, bar))]\n+   |                ^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "17812018b9b7a156c08791ad4ae1e58a9124271f", "filename": "src/test/rustdoc-ui/feature-gate-doc_cfg_hide.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,7 @@\n+#![doc(cfg_hide(test))]\n+//~^ ERROR `#[doc(cfg_hide)]` is experimental\n+\n+#[cfg(not(test))]\n+pub fn public_fn() {}\n+#[cfg(test)]\n+pub fn internal_use_only() {}"}, {"sha": "ba42c7bbb05bcc414531cf59da00d1fc0534fe33", "filename": "src/test/rustdoc-ui/feature-gate-doc_cfg_hide.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-doc_cfg_hide.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,14 @@\n+error[E0658]: `#[doc(cfg_hide)]` is experimental\n+  --> $DIR/feature-gate-doc_cfg_hide.rs:1:1\n+   |\n+LL | #![doc(cfg_hide(test))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #43781 <https://github.com/rust-lang/rust/issues/43781> for more information\n+   = help: add `#![feature(doc_cfg_hide)]` to the crate attributes to enable\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b9d0d32313723ddb1128b563e33237881ef7ab11", "filename": "src/test/rustdoc/doc-cfg-hide.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,32 @@\n+#![crate_name = \"oud\"]\n+#![feature(doc_cfg, doc_cfg_hide)]\n+\n+#![doc(cfg_hide(feature = \"solecism\"))]\n+\n+// @has 'oud/struct.Solecism.html'\n+// @count   - '//*[@class=\"stab portability\"]' 0\n+// compile-flags:--cfg feature=\"solecism\"\n+#[cfg(feature = \"solecism\")]\n+pub struct Solecism;\n+\n+// @has 'oud/struct.Scribacious.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature solecism'\n+#[cfg(feature = \"solecism\")]\n+#[doc(cfg(feature = \"solecism\"))]\n+pub struct Scribacious;\n+\n+// @has 'oud/struct.Hyperdulia.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature hyperdulia'\n+// compile-flags:--cfg feature=\"hyperdulia\"\n+#[cfg(feature = \"solecism\")]\n+#[cfg(feature = \"hyperdulia\")]\n+pub struct Hyperdulia;\n+\n+// @has 'oud/struct.Oystercatcher.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate features solecism and oystercatcher'\n+// compile-flags:--cfg feature=\"oystercatcher\"\n+#[cfg(all(feature = \"solecism\", feature = \"oystercatcher\"))]\n+pub struct Oystercatcher;"}, {"sha": "92804d3729bba171c4558459f86a9a21815d03a3", "filename": "src/test/rustdoc/doc-cfg-implicit-gate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags:--cfg feature=\"worricow\"\n+#![crate_name = \"xenogenous\"]\n+\n+// @has 'xenogenous/struct.Worricow.html'\n+// @count   - '//*[@class=\"stab portability\"]' 0\n+#[cfg(feature = \"worricow\")]\n+pub struct Worricow;"}, {"sha": "36c2025785d0f87a8e76915fe7fcd3ce897b4fe8", "filename": "src/test/rustdoc/doc-cfg-implicit.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,31 @@\n+#![crate_name = \"funambulism\"]\n+#![feature(doc_cfg)]\n+\n+// @has 'funambulism/struct.Disorbed.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature disorbed'\n+// compile-flags:--cfg feature=\"disorbed\"\n+#[cfg(feature = \"disorbed\")]\n+pub struct Disorbed;\n+\n+// @has 'funambulism/struct.Aesthesia.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature aesthesia'\n+// compile-flags:--cfg feature=\"aesthesia\"\n+#[doc(cfg(feature = \"aesthesia\"))]\n+pub struct Aesthesia;\n+\n+// @has 'funambulism/struct.Pliothermic.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature pliothermic'\n+// compile-flags:--cfg feature=\"epopoeist\"\n+#[cfg(feature = \"epopoeist\")]\n+#[doc(cfg(feature = \"pliothermic\"))]\n+pub struct Pliothermic;\n+\n+// @has 'funambulism/struct.Simillimum.html'\n+// @count   - '//*[@class=\"stab portability\"]' 0\n+// compile-flags:--cfg feature=\"simillimum\"\n+#[cfg(feature = \"simillimum\")]\n+#[doc(cfg(all()))]\n+pub struct Simillimum;"}, {"sha": "0a477f1aa5fb69ebdd52d9393f7fb118ed2b8a6a", "filename": "src/test/ui/parser/issue-89574.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    const EMPTY_ARRAY = [];\n+    //~^ missing type for `const` item\n+}"}, {"sha": "cbee3d35155c7925e3228986dbc54ac77f180978", "filename": "src/test/ui/parser/issue-89574.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,8 @@\n+error: missing type for `const` item\n+  --> $DIR/issue-89574.rs:2:11\n+   |\n+LL |     const EMPTY_ARRAY = [];\n+   |           ^^^^^^^^^^^ help: provide a type for the item: `EMPTY_ARRAY: <type>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "613b3c9856171a28f10cfdd856d7aaf8f15ba693", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -4,3 +4,4 @@ fn main() {}\n \n const A: u8; //~ ERROR free constant item without body\n const B; //~ ERROR free constant item without body\n+//~^ ERROR missing type for `const` item"}, {"sha": "c340e958ee58556d5972b0de59857bbfadbe3963", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -14,5 +14,11 @@ LL | const B;\n    |        |\n    |        help: provide a definition for the constant: `= <expr>;`\n \n-error: aborting due to 2 previous errors\n+error: missing type for `const` item\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:7\n+   |\n+LL | const B;\n+   |       ^ help: provide a type for the item: `B: <type>`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "780479e3d26ac6eb4a76cb6e45155ce05fadf066", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -4,6 +4,8 @@ fn main() {}\n \n static A: u8; //~ ERROR free static item without body\n static B; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static` item\n \n static mut C: u8; //~ ERROR free static item without body\n static mut D; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static mut` item"}, {"sha": "4d542b79861fd468b883381e72f2b97e3e1640bc", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -15,20 +15,32 @@ LL | static B;\n    |         help: provide a definition for the static: `= <expr>;`\n \n error: free static item without body\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:8:1\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:9:1\n    |\n LL | static mut C: u8;\n    | ^^^^^^^^^^^^^^^^-\n    |                 |\n    |                 help: provide a definition for the static: `= <expr>;`\n \n error: free static item without body\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:9:1\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:1\n    |\n LL | static mut D;\n    | ^^^^^^^^^^^^-\n    |             |\n    |             help: provide a definition for the static: `= <expr>;`\n \n-error: aborting due to 4 previous errors\n+error: missing type for `static` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:8\n+   |\n+LL | static B;\n+   |        ^ help: provide a type for the item: `B: <type>`\n+\n+error: missing type for `static mut` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:12\n+   |\n+LL | static mut D;\n+   |            ^ help: provide a type for the item: `D: <type>`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "79c4e6a312c0dce0bab82eeb6e90d4e87a2f40af", "filename": "src/test/ui/simd/issue-89193.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,51 @@\n+// run-pass\n+\n+// Test that simd gather instructions on slice of usize don't cause crash\n+// See issue #89183 - https://github.com/rust-lang/rust/issues/89193\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct x4<T>(pub T, pub T, pub T, pub T);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_gather<T, U, V>(x: T, y: U, z: V) -> T;\n+}\n+\n+fn main() {\n+    let x: [usize; 4] = [10, 11, 12, 13];\n+    let default = x4(0_usize, 1, 2, 3);\n+    let mask = x4(1_i32, 1, 1, 1);\n+    let expected = x4(10_usize, 11, 12, 13);\n+\n+    unsafe {\n+        let pointer = &x[0] as *const usize;\n+        let pointers =  x4(\n+            pointer.offset(0) as *const usize,\n+            pointer.offset(1),\n+            pointer.offset(2),\n+            pointer.offset(3)\n+        );\n+        let result = simd_gather(default, pointers, mask);\n+        assert_eq!(result, expected);\n+    }\n+\n+    // and again for isize\n+    let x: [isize; 4] = [10, 11, 12, 13];\n+    let default = x4(0_isize, 1, 2, 3);\n+    let expected = x4(10_isize, 11, 12, 13);\n+\n+    unsafe {\n+        let pointer = &x[0] as *const isize;\n+        let pointers =  x4(\n+            pointer.offset(0) as *const isize,\n+            pointer.offset(1),\n+            pointer.offset(2),\n+            pointer.offset(3)\n+        );\n+        let result = simd_gather(default, pointers, mask);\n+        assert_eq!(result, expected);\n+    }\n+}"}, {"sha": "c6725101858eb39464458ffc1ad0f8f670d9cfd5", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,25 @@\n+#![deny(deref_into_dyn_supertrait)]\n+\n+extern crate core;\n+\n+use core::ops::Deref;\n+\n+// issue 89190\n+trait A {}\n+trait B: A {}\n+impl<'a> Deref for dyn 'a + B {\n+    type Target = dyn A;\n+    fn deref(&self) -> &Self::Target {\n+        todo!()\n+    }\n+}\n+\n+fn take_a(_: &dyn A) {}\n+\n+fn whoops(b: &dyn B) {\n+    take_a(b)\n+    //~^ ERROR `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+    //~^^ WARN this was previously accepted by the compiler but is being phased out;\n+}\n+\n+fn main() {}"}, {"sha": "35af9112a27fc4ccce329f9f4be134342e38599f", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,16 @@\n+error: `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+  --> $DIR/migrate-lint-deny.rs:20:12\n+   |\n+LL |     take_a(b)\n+   |            ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/migrate-lint-deny.rs:1:9\n+   |\n+LL | #![deny(deref_into_dyn_supertrait)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #89460 <https://github.com/rust-lang/rust/issues/89460>\n+\n+error: aborting due to previous error\n+"}, {"sha": "941612542207c2424d6a563ae70ff6eec5e8185c", "filename": "src/test/ui/typeck/issue-79040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     const FOO = \"hello\" + 1; //~ ERROR cannot add `{integer}` to `&str`\n-    //~^ ERROR cannot add `{integer}` to `&str`\n+    //~^ missing type for `const` item\n     println!(\"{}\", FOO);\n }"}, {"sha": "aec2e1ec9e4efe0f0296dc4c0b2c6d4841d9c2ce", "filename": "src/test/ui/typeck/issue-79040.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -6,13 +6,11 @@ LL |     const FOO = \"hello\" + 1;\n    |                 |\n    |                 &str\n \n-error[E0369]: cannot add `{integer}` to `&str`\n-  --> $DIR/issue-79040.rs:2:25\n+error: missing type for `const` item\n+  --> $DIR/issue-79040.rs:2:11\n    |\n LL |     const FOO = \"hello\" + 1;\n-   |                 ------- ^ - {integer}\n-   |                 |\n-   |                 &str\n+   |           ^^^ help: provide a type for the item: `FOO: <type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92c80c27de03bea3ced5f5b696ea0e856ace9e72", "filename": "src/tools/compiletest/src/compute_diff.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -0,0 +1,157 @@\n+use std::collections::VecDeque;\n+use std::fs::{File, FileType};\n+use std::path::Path;\n+\n+#[derive(Debug, PartialEq)]\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch { line_number, lines: Vec::new() }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(expected, actual) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else if context_size > 0 {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n+pub(crate) fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n+    let diff_results = make_diff(expected, actual, context_size);\n+    for result in diff_results {\n+        let mut line_number = result.line_number;\n+        for line in result.lines {\n+            match line {\n+                DiffLine::Expected(e) => {\n+                    writeln!(output, \"-\\t{}\", e).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Context(c) => {\n+                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Resulting(r) => {\n+                    writeln!(output, \"+\\t{}\", r).unwrap();\n+                }\n+            }\n+        }\n+        writeln!(output).unwrap();\n+    }\n+    output\n+}\n+\n+/// Filters based on filetype and extension whether to diff a file.\n+///\n+/// Returns whether any data was actually written.\n+pub(crate) fn write_filtered_diff<Filter>(\n+    diff_filename: &str,\n+    out_dir: &Path,\n+    compare_dir: &Path,\n+    verbose: bool,\n+    filter: Filter,\n+) -> bool\n+where\n+    Filter: Fn(FileType, Option<&str>) -> bool,\n+{\n+    use std::io::{Read, Write};\n+    let mut diff_output = File::create(diff_filename).unwrap();\n+    let mut wrote_data = false;\n+    for entry in walkdir::WalkDir::new(out_dir) {\n+        let entry = entry.expect(\"failed to read file\");\n+        let extension = entry.path().extension().and_then(|p| p.to_str());\n+        if filter(entry.file_type(), extension) {\n+            let expected_path = compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n+            let expected = if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n+            let actual_path = entry.path();\n+            let actual = std::fs::read(&actual_path).unwrap();\n+            let diff = unified_diff::diff(\n+                &expected,\n+                &expected_path.to_string_lossy(),\n+                &actual,\n+                &actual_path.to_string_lossy(),\n+                3,\n+            );\n+            wrote_data |= !diff.is_empty();\n+            diff_output.write_all(&diff).unwrap();\n+        }\n+    }\n+\n+    if !wrote_data {\n+        println!(\"note: diff is identical to nightly rustdoc\");\n+        assert!(diff_output.metadata().unwrap().len() == 0);\n+        return false;\n+    } else if verbose {\n+        eprintln!(\"printing diff:\");\n+        let mut buf = Vec::new();\n+        diff_output.read_to_end(&mut buf).unwrap();\n+        std::io::stderr().lock().write_all(&mut buf).unwrap();\n+    }\n+    true\n+}"}, {"sha": "fbf3249db94d10d18c74ba3d87e9e91362616c31", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -28,6 +28,7 @@ use self::header::{make_test_description, EarlyProps};\n mod tests;\n \n pub mod common;\n+pub mod compute_diff;\n pub mod errors;\n pub mod header;\n mod json;"}, {"sha": "0821e279d2485a9efeb2cc64e34772024a42a969", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 142, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5641481ad735c742cc669bb1e47f10116b789ee7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5641481ad735c742cc669bb1e47f10116b789ee7", "patch": "@@ -8,6 +8,7 @@ use crate::common::{CompareMode, FailMode, PassMode};\n use crate::common::{Config, TestPaths};\n use crate::common::{Pretty, RunPassValgrind};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n+use crate::compute_diff::{write_diff, write_filtered_diff};\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n@@ -18,7 +19,7 @@ use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n \n use std::collections::hash_map::DefaultHasher;\n-use std::collections::{HashMap, HashSet, VecDeque};\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, create_dir_all, File, OpenOptions};\n@@ -100,111 +101,6 @@ pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     }\n }\n \n-#[derive(Debug, PartialEq)]\n-pub enum DiffLine {\n-    Context(String),\n-    Expected(String),\n-    Resulting(String),\n-}\n-\n-#[derive(Debug, PartialEq)]\n-pub struct Mismatch {\n-    pub line_number: u32,\n-    pub lines: Vec<DiffLine>,\n-}\n-\n-impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number, lines: Vec::new() }\n-    }\n-}\n-\n-// Produces a diff between the expected output and actual output.\n-pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n-    let mut line_number = 1;\n-    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n-    let mut lines_since_mismatch = context_size + 1;\n-    let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n-\n-    for result in diff::lines(expected, actual) {\n-        match result {\n-            diff::Result::Left(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n-                line_number += 1;\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Right(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Both(str, _) => {\n-                if context_queue.len() >= context_size {\n-                    let _ = context_queue.pop_front();\n-                }\n-\n-                if lines_since_mismatch < context_size {\n-                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n-                } else if context_size > 0 {\n-                    context_queue.push_back(str);\n-                }\n-\n-                line_number += 1;\n-                lines_since_mismatch += 1;\n-            }\n-        }\n-    }\n-\n-    results.push(mismatch);\n-    results.remove(0);\n-\n-    results\n-}\n-\n-fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n-    use std::fmt::Write;\n-    let mut output = String::new();\n-    let diff_results = make_diff(expected, actual, context_size);\n-    for result in diff_results {\n-        let mut line_number = result.line_number;\n-        for line in result.lines {\n-            match line {\n-                DiffLine::Expected(e) => {\n-                    writeln!(output, \"-\\t{}\", e).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Context(c) => {\n-                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Resulting(r) => {\n-                    writeln!(output, \"+\\t{}\", r).unwrap();\n-                }\n-            }\n-        }\n-        writeln!(output).unwrap();\n-    }\n-    output\n-}\n-\n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n         \"arm-linux-androideabi\"\n@@ -2507,43 +2403,17 @@ impl<'test> TestCx<'test> {\n \n         let diff_filename = format!(\"build/tmp/rustdoc-compare-{}.diff\", std::process::id());\n \n-        {\n-            let mut diff_output = File::create(&diff_filename).unwrap();\n-            let mut wrote_data = false;\n-            for entry in walkdir::WalkDir::new(out_dir) {\n-                let entry = entry.expect(\"failed to read file\");\n-                let extension = entry.path().extension().and_then(|p| p.to_str());\n-                if entry.file_type().is_file()\n+        if !write_filtered_diff(\n+            &diff_filename,\n+            out_dir,\n+            &compare_dir,\n+            self.config.verbose,\n+            |file_type, extension| {\n+                file_type.is_file()\n                     && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n-                {\n-                    let expected_path =\n-                        compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n-                    let expected =\n-                        if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n-                    let actual_path = entry.path();\n-                    let actual = std::fs::read(&actual_path).unwrap();\n-                    let diff = unified_diff::diff(\n-                        &expected,\n-                        &expected_path.to_string_lossy(),\n-                        &actual,\n-                        &actual_path.to_string_lossy(),\n-                        3,\n-                    );\n-                    wrote_data |= !diff.is_empty();\n-                    diff_output.write_all(&diff).unwrap();\n-                }\n-            }\n-\n-            if !wrote_data {\n-                println!(\"note: diff is identical to nightly rustdoc\");\n-                assert!(diff_output.metadata().unwrap().len() == 0);\n-                return;\n-            } else if self.config.verbose {\n-                eprintln!(\"printing diff:\");\n-                let mut buf = Vec::new();\n-                diff_output.read_to_end(&mut buf).unwrap();\n-                std::io::stderr().lock().write_all(&mut buf).unwrap();\n-            }\n+            },\n+        ) {\n+            return;\n         }\n \n         match self.config.color {"}]}