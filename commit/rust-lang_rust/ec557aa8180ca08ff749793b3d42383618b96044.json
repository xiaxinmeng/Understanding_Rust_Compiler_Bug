{"sha": "ec557aa8180ca08ff749793b3d42383618b96044", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTU3YWE4MTgwY2EwOGZmNzQ5NzkzYjNkNDIzODM2MThiOTYwNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T08:08:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T08:08:21Z"}, "message": "Auto merge of #64949 - nnethercote:avoid-SmallVec-collect, r=zackmdavis\n\nAvoid `SmallVec::collect`\n\nWe can get sizeable speed-ups by avoiding `SmallVec::collect` when the number of elements is small.", "tree": {"sha": "35c22eb20f376419317c73718cdb3153fbce3393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c22eb20f376419317c73718cdb3153fbce3393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec557aa8180ca08ff749793b3d42383618b96044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec557aa8180ca08ff749793b3d42383618b96044", "html_url": "https://github.com/rust-lang/rust/commit/ec557aa8180ca08ff749793b3d42383618b96044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec557aa8180ca08ff749793b3d42383618b96044/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1f25e31b1d26bd62aaf5a4554d25c33f75a0d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f25e31b1d26bd62aaf5a4554d25c33f75a0d1", "html_url": "https://github.com/rust-lang/rust/commit/1e1f25e31b1d26bd62aaf5a4554d25c33f75a0d1"}, {"sha": "d1a7bb36ad0a5932384eac03d3fb834efc0317e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a7bb36ad0a5932384eac03d3fb834efc0317e5", "html_url": "https://github.com/rust-lang/rust/commit/d1a7bb36ad0a5932384eac03d3fb834efc0317e5"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "cd52f8fa92c5a805c0ef7b953a7291e19b7fa9a5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ec557aa8180ca08ff749793b3d42383618b96044", "patch": "@@ -2868,8 +2868,29 @@ impl<'a, T, R> InternIteratorElement<T, R> for &'a T\n \n impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     type Output = Result<R, E>;\n-    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {\n-        Ok(f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?))\n+    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(mut iter: I, f: F)\n+            -> Self::Output {\n+        // This code is hot enough that it's worth specializing for the most\n+        // common length lists, to avoid the overhead of `SmallVec` creation.\n+        // The match arms are in order of frequency. The 1, 2, and 0 cases are\n+        // typically hit in ~95% of cases. We assume that if the upper and\n+        // lower bounds from `size_hint` agree they are correct.\n+        Ok(match iter.size_hint() {\n+            (1, Some(1)) => {\n+                f(&[iter.next().unwrap()?])\n+            }\n+            (2, Some(2)) => {\n+                let t0 = iter.next().unwrap()?;\n+                let t1 = iter.next().unwrap()?;\n+                f(&[t0, t1])\n+            }\n+            (0, Some(0)) => {\n+                f(&[])\n+            }\n+            _ => {\n+                f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?)\n+            }\n+        })\n     }\n }\n "}, {"sha": "5aa59cc309fc72cd6161d64d627d88e04115f93a", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ec557aa8180ca08ff749793b3d42383618b96044", "patch": "@@ -1223,8 +1223,21 @@ BraceStructTypeFoldableImpl! {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-        folder.tcx().intern_predicates(&v)\n+        // This code is hot enough that it's worth specializing for a list of\n+        // length 0. (No other length is common enough to be worth singling\n+        // out).\n+        if self.len() == 0 {\n+            self\n+        } else {\n+            // Don't bother interning if nothing changed, which is the common\n+            // case.\n+            let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n+            if v[..] == self[..] {\n+                self\n+            } else {\n+                folder.tcx().intern_predicates(&v)\n+            }\n+        }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}, {"sha": "4081c02a33ca41f87eecb7dc6fdcf69458b73579", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec557aa8180ca08ff749793b3d42383618b96044/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=ec557aa8180ca08ff749793b3d42383618b96044", "patch": "@@ -402,14 +402,41 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let params: SmallVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n-\n-        // If folding doesn't change the substs, it's faster to avoid\n-        // calling `mk_substs` and instead reuse the existing substs.\n-        if params[..] == self[..] {\n-            self\n-        } else {\n-            folder.tcx().intern_substs(&params)\n+        // This code is hot enough that it's worth specializing for the most\n+        // common length lists, to avoid the overhead of `SmallVec` creation.\n+        // The match arms are in order of frequency. The 1, 2, and 0 cases are\n+        // typically hit in 90--99.99% of cases. When folding doesn't change\n+        // the substs, it's faster to reuse the existing substs rather than\n+        // calling `intern_substs`.\n+        match self.len() {\n+            1 => {\n+                let param0 = self[0].fold_with(folder);\n+                if param0 == self[0] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&[param0])\n+                }\n+            }\n+            2 => {\n+                let param0 = self[0].fold_with(folder);\n+                let param1 = self[1].fold_with(folder);\n+                if param0 == self[0] && param1 == self[1] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&[param0, param1])\n+                }\n+            }\n+            0 => {\n+                self\n+            }\n+            _ => {\n+                let params: SmallVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n+                if params[..] == self[..] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&params)\n+                }\n+            }\n         }\n     }\n "}]}