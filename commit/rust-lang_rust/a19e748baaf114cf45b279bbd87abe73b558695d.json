{"sha": "a19e748baaf114cf45b279bbd87abe73b558695d", "node_id": "C_kwDOAAsO6NoAKGExOWU3NDhiYWFmMTE0Y2Y0NWIyNzliYmQ4N2FiZTczYjU1ODY5NWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-29T01:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-29T01:35:33Z"}, "message": "Auto merge of #91338 - matthiaskrgr:rollup-46ry8wi, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #90131 (Fix a format_args span to be expansion)\n - #90832 (Add 1.57.0 release notes)\n - #90833 (Emit LLVM optimization remarks when enabled with `-Cremark`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "31c7acc1923145bd724c4fb61be6d1461b2ad3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c7acc1923145bd724c4fb61be6d1461b2ad3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a19e748baaf114cf45b279bbd87abe73b558695d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a19e748baaf114cf45b279bbd87abe73b558695d", "html_url": "https://github.com/rust-lang/rust/commit/a19e748baaf114cf45b279bbd87abe73b558695d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a19e748baaf114cf45b279bbd87abe73b558695d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350158dd6d7ba840666999efa9a19c6ae403eed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/350158dd6d7ba840666999efa9a19c6ae403eed1", "html_url": "https://github.com/rust-lang/rust/commit/350158dd6d7ba840666999efa9a19c6ae403eed1"}, {"sha": "67762ffe35734c14b0aa1b90597dee164e73831a", "url": "https://api.github.com/repos/rust-lang/rust/commits/67762ffe35734c14b0aa1b90597dee164e73831a", "html_url": "https://github.com/rust-lang/rust/commit/67762ffe35734c14b0aa1b90597dee164e73831a"}], "stats": {"total": 348, "additions": 328, "deletions": 20}, "files": [{"sha": "4b9b20f4cba606cd75ecb00ceab7ca2ba7894f6a", "filename": "RELEASES.md", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -1,3 +1,117 @@\n+Version 1.57.0 (2021-12-02)\n+==========================\n+\n+Language\n+--------\n+\n+- [Macro attributes may follow `#[derive]` and will see the original (pre-`cfg`) input.][87220]\n+- [Accept curly-brace macros in expressions, like `m!{ .. }.method()` and `m!{ .. }?`.][88690]\n+- [Allow panicking in constant evaluation.][89508]\n+\n+Compiler\n+--------\n+\n+- [Create more accurate debuginfo for vtables.][89597]\n+- [Add `armv6k-nintendo-3ds` at Tier 3\\*.][88529]\n+- [Add `armv7-unknown-linux-uclibceabihf` at Tier 3\\*.][88952]\n+- [Add `m68k-unknown-linux-gnu` at Tier 3\\*.][88321]\n+- [Add SOLID targets at Tier 3\\*:][86191] `aarch64-kmc-solid_asp3`, `armv7a-kmc-solid_asp3-eabi`, `armv7a-kmc-solid_asp3-eabihf`\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Avoid allocations and copying in `Vec::leak`][89337]\n+- [Add `#[repr(i8)]` to `Ordering`][89507]\n+- [Optimize `File::read_to_end` and `read_to_string`][89582]\n+- [Update to Unicode 14.0][89614]\n+- [Many more functions are marked `#[must_use]`][89692], producing a warning\n+  when ignoring their return value. This helps catch mistakes such as expecting\n+  a function to mutate a value in place rather than return a new value.\n+\n+Stabilised APIs\n+---------------\n+\n+- [`[T; N]::as_mut_slice`][`array::as_mut_slice`]\n+- [`[T; N]::as_slice`][`array::as_slice`]\n+- [`collections::TryReserveError`]\n+- [`HashMap::try_reserve`]\n+- [`HashSet::try_reserve`]\n+- [`String::try_reserve`]\n+- [`String::try_reserve_exact`]\n+- [`Vec::try_reserve`]\n+- [`Vec::try_reserve_exact`]\n+- [`VecDeque::try_reserve`]\n+- [`VecDeque::try_reserve_exact`]\n+- [`Iterator::map_while`]\n+- [`iter::MapWhile`]\n+- [`proc_macro::is_available`]\n+- [`Command::get_program`]\n+- [`Command::get_args`]\n+- [`Command::get_envs`]\n+- [`Command::get_current_dir`]\n+- [`CommandArgs`]\n+- [`CommandEnvs`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`hint::unreachable_unchecked`]\n+\n+Cargo\n+-----\n+\n+- [Stabilize custom profiles][cargo/9943]\n+\n+Compatibility notes\n+-------------------\n+\n+Internal changes\n+----------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [Added an experimental backend for codegen with `libgccjit`.][87260]\n+\n+[86191]: https://github.com/rust-lang/rust/pull/86191/\n+[87220]: https://github.com/rust-lang/rust/pull/87220/\n+[87260]: https://github.com/rust-lang/rust/pull/87260/\n+[88243]: https://github.com/rust-lang/rust/pull/88243/\n+[88321]: https://github.com/rust-lang/rust/pull/88321/\n+[88529]: https://github.com/rust-lang/rust/pull/88529/\n+[88690]: https://github.com/rust-lang/rust/pull/88690/\n+[88952]: https://github.com/rust-lang/rust/pull/88952/\n+[89337]: https://github.com/rust-lang/rust/pull/89337/\n+[89507]: https://github.com/rust-lang/rust/pull/89507/\n+[89508]: https://github.com/rust-lang/rust/pull/89508/\n+[89582]: https://github.com/rust-lang/rust/pull/89582/\n+[89597]: https://github.com/rust-lang/rust/pull/89597/\n+[89614]: https://github.com/rust-lang/rust/pull/89614/\n+[89692]: https://github.com/rust-lang/rust/issues/89692/\n+[cargo/9943]: https://github.com/rust-lang/cargo/pull/9943/\n+[`array::as_mut_slice`]: https://doc.rust-lang.org/std/primitive.array.html#method.as_mut_slice\n+[`array::as_slice`]: https://doc.rust-lang.org/std/primitive.array.html#method.as_slice\n+[`collections::TryReserveError`]: https://doc.rust-lang.org/std/collections/struct.TryReserveError.html\n+[`HashMap::try_reserve`]: https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.try_reserve\n+[`HashSet::try_reserve`]: https://doc.rust-lang.org/std/collections/hash_set/struct.HashSet.html#method.try_reserve\n+[`String::try_reserve`]: https://doc.rust-lang.org/alloc/string/struct.String.html#method.try_reserve\n+[`String::try_reserve_exact`]: https://doc.rust-lang.org/alloc/string/struct.String.html#method.try_reserve_exact\n+[`Vec::try_reserve`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.try_reserve\n+[`Vec::try_reserve_exact`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.try_reserve_exact\n+[`VecDeque::try_reserve`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.try_reserve\n+[`VecDeque::try_reserve_exact`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.try_reserve_exact\n+[`Iterator::map_while`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map_while\n+[`iter::MapWhile`]: https://doc.rust-lang.org/std/iter/struct.MapWhile.html\n+[`proc_macro::is_available`]: https://doc.rust-lang.org/proc_macro/fn.is_available.html\n+[`Command::get_program`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_program\n+[`Command::get_args`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_args\n+[`Command::get_envs`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_envs\n+[`Command::get_current_dir`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_current_dir\n+[`CommandArgs`]: https://doc.rust-lang.org/std/process/struct.CommandArgs.html\n+[`CommandEnvs`]: https://doc.rust-lang.org/std/process/struct.CommandEnvs.html\n+\n Version 1.56.1 (2021-11-01)\n ===========================\n "}, {"sha": "70e125d6887878bbb1967d8af115d2482e4b8760", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -769,7 +769,10 @@ impl<'a, 'b> Context<'a, 'b> {\n             for arg_ty in self.arg_unique_types[i].iter() {\n                 args.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, i));\n             }\n-            heads.push(self.ecx.expr_addr_of(e.span, e));\n+            // use the arg span for `&arg` so that borrowck errors\n+            // point to the specific expression passed to the macro\n+            // (the span is otherwise unavailable in MIR)\n+            heads.push(self.ecx.expr_addr_of(e.span.with_ctxt(self.macsp.ctxt()), e));\n         }\n         for pos in self.count_args {\n             let index = match pos {"}, {"sha": "460a8cc69128e9f72c2b64f9977b8e185a4712f0", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -259,6 +259,7 @@ pub(crate) fn save_temp_bitcode(\n pub struct DiagnosticHandlers<'a> {\n     data: *mut (&'a CodegenContext<LlvmCodegenBackend>, &'a Handler),\n     llcx: &'a llvm::Context,\n+    old_handler: Option<&'a llvm::DiagnosticHandler>,\n }\n \n impl<'a> DiagnosticHandlers<'a> {\n@@ -267,12 +268,35 @@ impl<'a> DiagnosticHandlers<'a> {\n         handler: &'a Handler,\n         llcx: &'a llvm::Context,\n     ) -> Self {\n+        let remark_passes_all: bool;\n+        let remark_passes: Vec<CString>;\n+        match &cgcx.remark {\n+            Passes::All => {\n+                remark_passes_all = true;\n+                remark_passes = Vec::new();\n+            }\n+            Passes::Some(passes) => {\n+                remark_passes_all = false;\n+                remark_passes =\n+                    passes.iter().map(|name| CString::new(name.as_str()).unwrap()).collect();\n+            }\n+        };\n+        let remark_passes: Vec<*const c_char> =\n+            remark_passes.iter().map(|name: &CString| name.as_ptr()).collect();\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n+            let old_handler = llvm::LLVMRustContextGetDiagnosticHandler(llcx);\n+            llvm::LLVMRustContextConfigureDiagnosticHandler(\n+                llcx,\n+                diagnostic_handler,\n+                data.cast(),\n+                remark_passes_all,\n+                remark_passes.as_ptr(),\n+                remark_passes.len(),\n+            );\n             llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data.cast());\n-            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data.cast());\n+            DiagnosticHandlers { data, llcx, old_handler }\n         }\n-        DiagnosticHandlers { data, llcx }\n     }\n }\n \n@@ -281,7 +305,7 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n         use std::ptr::null_mut;\n         unsafe {\n             llvm::LLVMRustSetInlineAsmDiagnosticHandler(self.llcx, inline_asm_handler, null_mut());\n-            llvm::LLVMContextSetDiagnosticHandler(self.llcx, diagnostic_handler, null_mut());\n+            llvm::LLVMRustContextSetDiagnosticHandler(self.llcx, self.old_handler);\n             drop(Box::from_raw(self.data));\n         }\n     }\n@@ -337,13 +361,8 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n             if enabled {\n                 diag_handler.note_without_error(&format!(\n-                    \"optimization {} for {} at {}:{}:{}: {}\",\n-                    opt.kind.describe(),\n-                    opt.pass_name,\n-                    opt.filename,\n-                    opt.line,\n-                    opt.column,\n-                    opt.message\n+                    \"{}:{}:{}: {}: {}\",\n+                    opt.filename, opt.line, opt.column, opt.pass_name, opt.message,\n                 ));\n             }\n         }"}, {"sha": "6eb0fb560467f40a3ccdbbf8a60e4799c08d171c", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -675,8 +675,12 @@ pub struct OperandBundleDef<'a>(InvariantOpaque<'a>);\n #[repr(C)]\n pub struct Linker<'a>(InvariantOpaque<'a>);\n \n-pub type DiagnosticHandler = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n-pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_void, c_uint);\n+extern \"C\" {\n+    pub type DiagnosticHandler;\n+}\n+\n+pub type DiagnosticHandlerTy = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n+pub type InlineAsmDiagHandlerTy = unsafe extern \"C\" fn(&SMDiagnostic, *const c_void, c_uint);\n \n pub mod coverageinfo {\n     use super::coverage_map;\n@@ -2289,12 +2293,6 @@ extern \"C\" {\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n \n-    pub fn LLVMContextSetDiagnosticHandler(\n-        C: &Context,\n-        Handler: DiagnosticHandler,\n-        DiagnosticContext: *mut c_void,\n-    );\n-\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustUnpackOptimizationDiagnostic(\n         DI: &'a DiagnosticInfo,\n@@ -2324,7 +2322,7 @@ extern \"C\" {\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(\n         C: &Context,\n-        H: InlineAsmDiagHandler,\n+        H: InlineAsmDiagHandlerTy,\n         CX: *mut c_void,\n     );\n \n@@ -2439,4 +2437,19 @@ extern \"C\" {\n         mod_id: *const c_char,\n         data: &ThinLTOData,\n     );\n+\n+    pub fn LLVMRustContextGetDiagnosticHandler(Context: &Context) -> Option<&DiagnosticHandler>;\n+    pub fn LLVMRustContextSetDiagnosticHandler(\n+        context: &Context,\n+        diagnostic_handler: Option<&DiagnosticHandler>,\n+    );\n+    pub fn LLVMRustContextConfigureDiagnosticHandler(\n+        context: &Context,\n+        diagnostic_handler_callback: DiagnosticHandlerTy,\n+        diagnostic_handler_context: *mut c_void,\n+        remark_all_passes: bool,\n+        remark_passes: *const *const c_char,\n+        remark_passes_len: usize,\n+    );\n+\n }"}, {"sha": "94d2a4b8e4c9be23d2b505b48e576fbc6c1c79d7", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -1,5 +1,6 @@\n #include \"LLVMWrapper.h\"\n #include \"llvm/IR/DebugInfoMetadata.h\"\n+#include \"llvm/IR/DiagnosticHandler.h\"\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n #include \"llvm/IR/GlobalVariable.h\"\n@@ -1177,10 +1178,13 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n   case DK_SampleProfile:\n     return LLVMRustDiagnosticKind::SampleProfile;\n   case DK_OptimizationRemark:\n+  case DK_MachineOptimizationRemark:\n     return LLVMRustDiagnosticKind::OptimizationRemark;\n   case DK_OptimizationRemarkMissed:\n+  case DK_MachineOptimizationRemarkMissed:\n     return LLVMRustDiagnosticKind::OptimizationRemarkMissed;\n   case DK_OptimizationRemarkAnalysis:\n+  case DK_MachineOptimizationRemarkAnalysis:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysis;\n   case DK_OptimizationRemarkAnalysisFPCommute:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n@@ -1783,3 +1787,92 @@ extern \"C\" LLVMRustResult LLVMRustWriteImportLibrary(\n     return LLVMRustResult::Success;\n   }\n }\n+\n+// Transfers ownership of DiagnosticHandler unique_ptr to the caller.\n+extern \"C\" DiagnosticHandler *\n+LLVMRustContextGetDiagnosticHandler(LLVMContextRef C) {\n+  std::unique_ptr<DiagnosticHandler> DH = unwrap(C)->getDiagnosticHandler();\n+  return DH.release();\n+}\n+\n+// Sets unique_ptr to object of DiagnosticHandler to provide custom diagnostic\n+// handling. Ownership of the handler is moved to the LLVMContext.\n+extern \"C\" void LLVMRustContextSetDiagnosticHandler(LLVMContextRef C,\n+                                                    DiagnosticHandler *DH) {\n+  unwrap(C)->setDiagnosticHandler(std::unique_ptr<DiagnosticHandler>(DH));\n+}\n+\n+using LLVMDiagnosticHandlerTy = DiagnosticHandler::DiagnosticHandlerTy;\n+\n+// Configures a diagnostic handler that invokes provided callback when a\n+// backend needs to emit a diagnostic.\n+//\n+// When RemarkAllPasses is true, remarks are enabled for all passes. Otherwise\n+// the RemarkPasses array specifies individual passes for which remarks will be\n+// enabled.\n+extern \"C\" void LLVMRustContextConfigureDiagnosticHandler(\n+    LLVMContextRef C, LLVMDiagnosticHandlerTy DiagnosticHandlerCallback,\n+    void *DiagnosticHandlerContext, bool RemarkAllPasses,\n+    const char * const * RemarkPasses, size_t RemarkPassesLen) {\n+\n+  class RustDiagnosticHandler final : public DiagnosticHandler {\n+  public:\n+    RustDiagnosticHandler(LLVMDiagnosticHandlerTy DiagnosticHandlerCallback,\n+                          void *DiagnosticHandlerContext,\n+                          bool RemarkAllPasses,\n+                          std::vector<std::string> RemarkPasses)\n+        : DiagnosticHandlerCallback(DiagnosticHandlerCallback),\n+          DiagnosticHandlerContext(DiagnosticHandlerContext),\n+          RemarkAllPasses(RemarkAllPasses),\n+          RemarkPasses(RemarkPasses) {}\n+\n+    virtual bool handleDiagnostics(const DiagnosticInfo &DI) override {\n+      if (DiagnosticHandlerCallback) {\n+        DiagnosticHandlerCallback(DI, DiagnosticHandlerContext);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    bool isAnalysisRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isMissedOptRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isPassedOptRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isAnyRemarkEnabled() const override {\n+      return RemarkAllPasses || !RemarkPasses.empty();\n+    }\n+\n+  private:\n+    bool isRemarkEnabled(StringRef PassName) const {\n+      if (RemarkAllPasses)\n+        return true;\n+\n+      for (auto &Pass : RemarkPasses)\n+        if (Pass == PassName)\n+          return true;\n+\n+      return false;\n+    }\n+\n+    LLVMDiagnosticHandlerTy DiagnosticHandlerCallback = nullptr;\n+    void *DiagnosticHandlerContext = nullptr;\n+\n+    bool RemarkAllPasses = false;\n+    std::vector<std::string> RemarkPasses;\n+  };\n+\n+  std::vector<std::string> Passes;\n+  for (size_t I = 0; I != RemarkPassesLen; ++I)\n+    Passes.push_back(RemarkPasses[I]);\n+\n+  unwrap(C)->setDiagnosticHandler(std::make_unique<RustDiagnosticHandler>(\n+      DiagnosticHandlerCallback, DiagnosticHandlerContext, RemarkAllPasses, Passes));\n+}"}, {"sha": "d2c7473c036b8769fbcfacccf3792b38cc637cef", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `i`\n    |\n LL |     println!(\"{}\", i);\n    |                    ^ use of possibly-uninitialized `i`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b134f5cc2d8e3d950e53c3ee966ae0d5aa458eeb", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `x`\n    |\n LL |     println!(\"{}\", x);\n    |                    ^ use of possibly-uninitialized `x`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "652d7d3076fbda4494248b7573e58784e2ad3d8c", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `x`\n    |\n LL |     println!(\"{}\", x);\n    |                    ^ use of possibly-uninitialized `x`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6c757759f71344514af75d2a2b486bcc0324978f", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `i`\n    |\n LL |     println!(\"{}\", i);\n    |                    ^ use of possibly-uninitialized `i`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fc144a066bb2777fe14784b24128c3d880fef2b0", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `v`\n    |\n LL |     println!(\"{}\", v);\n    |                    ^ use of possibly-uninitialized `v`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e29cf7a1a7519bb8abde2c717b71416354e0b235", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,12 +3,16 @@ error[E0381]: borrow of possibly-uninitialized variable: `x`\n    |\n LL |     println!(\"{}\", x);\n    |                    ^ use of possibly-uninitialized `x`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n    |\n LL |     println!(\"{}\", x);\n    |                    ^ use of possibly-uninitialized `x`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6c219018321141366399327174683f57402511e", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -81,6 +81,8 @@ LL |     println!(\"{}\", arr[3]);\n ...\n LL |     c();\n    |     - mutable borrow later used here\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0502]: cannot borrow `arr` as immutable because it is also borrowed as mutable\n   --> $DIR/arrays.rs:73:24"}, {"sha": "29228d85324ef3f39476fb7cd1b558786064d838", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -25,6 +25,8 @@ LL |     println!(\"{}\", e.0.0.m.x);\n LL |\n LL |     c();\n    |     - mutable borrow later used here\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n   --> $DIR/box.rs:55:5"}, {"sha": "5acf3797ab53feb51128c32fc6248509ea116d60", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -8,6 +8,7 @@ LL |         println!(\"{}\", foo.x);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "4f9fdbd368a88e1e8e3ac2cd93f19687c00f0605", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -13,6 +13,8 @@ LL |     println!(\"{:?}\", p);\n LL |\n LL |     c();\n    |     - mutable borrow later used here\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ceb91142ac82699eb6dc1be7aecc37a19a659acc", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -14,6 +14,7 @@ note: this function takes ownership of the receiver `self`, which moves `some_ve\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9dc40030a6ff8b1a2a3530d411c327604508145b", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -28,6 +28,7 @@ LL |     println!(\"{}\", FOO);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "32ab7c74b891f894f708b50e0af77b4e00c733f3", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -39,6 +39,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-43197.rs:16:26\n@@ -54,6 +55,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 4 warnings emitted\n "}, {"sha": "67cd1f64d94aad1130f672fe48a3c3e320035938", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -10,6 +10,8 @@ LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here\n LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4a1debf37a079547bdbdaff4a3a64c71de359a22", "filename": "src/test/ui/issues/issue-42796.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -8,6 +8,8 @@ LL |     let mut s_copy = s;\n ...\n LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "32e8588b3c0749dc3a9aeecd6ba43e2c54b11596", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -12,6 +12,8 @@ LL |             println!(\"{:?}\", heap);\n ...\n LL |     };\n    |      - ... and the mutable borrow might be used here, when that temporary is dropped and runs the destructor for type `(Option<PeekMut<'_, i32>>, ())`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "90411353f08250496680c6466b0f8b594167663b", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -18,6 +18,7 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ff6c02f2110f647daf0c1ecf6b6f446cf16bf974", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -28,6 +28,8 @@ LL |         println!(\"{}\", y);\n    |                        ^ value borrowed here after move\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |                                                    - value moved here, in previous iteration of loop\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "df54af9f0f2ce2e038bd2c420ea62fefce0920de", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -8,6 +8,8 @@ LL |     let y = x;\n LL | \n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "becede1ceb6b3edd0b0f3eadad2c6ca2f7a7fe5e", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -7,6 +7,8 @@ LL |     send(ch, message);\n    |              ------- value moved here\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "20d5c66a3f20581c789238f26c733a54c859c8d5", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -3,6 +3,8 @@ error[E0381]: borrow of possibly-uninitialized variable: `x`\n    |\n LL |     println!(\"{:?}\", x);\n    |                      ^ use of possibly-uninitialized `x`\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ac921c18e07d577ace08f15b684ff4269e709750", "filename": "src/test/ui/moves/moves-based-on-type-capture-clause-bad.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -10,6 +10,8 @@ LL |         println!(\"{}\", x);\n LL |     });\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7aedb09928b6491edbee6154fe3cd01eb1ce90e6", "filename": "src/test/ui/optimization-remark.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Foptimization-remark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Foptimization-remark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-remark.rs?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+// ignore-pass\n+// no-system-llvm\n+// revisions: all inline\n+//          compile-flags: --crate-type=lib -Cdebuginfo=1 -Copt-level=2\n+// [all]    compile-flags: -Cremark=all\n+// [inline] compile-flags: -Cremark=inline\n+// error-pattern: inline: f not inlined into g\n+// dont-check-compiler-stderr\n+\n+#[no_mangle]\n+#[inline(never)]\n+pub fn f() {\n+}\n+\n+#[no_mangle]\n+pub fn g() {\n+    f();\n+}"}, {"sha": "d6822d94ca8c96ec0529461bee12948d6bec2fb2", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -21,6 +21,8 @@ LL |             ::std::mem::drop(x);\n LL |         };\n LL |         println!(\"{}\", x);\n    |                        ^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "361a6e2d8c2786658f49be72d2f1e800aed5cc39", "filename": "src/test/ui/use/use-after-move-based-on-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -7,6 +7,8 @@ LL |     let _y = x;\n    |              - value moved here\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "377a8074458912c55e789f70828f813b7afa3e69", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19e748baaf114cf45b279bbd87abe73b558695d/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=a19e748baaf114cf45b279bbd87abe73b558695d", "patch": "@@ -13,6 +13,7 @@ note: this function takes ownership of the receiver `self`, which moves `start`\n    |\n LL |     fn make_string_bar(mut self) -> Mine{\n    |                            ^^^^\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}