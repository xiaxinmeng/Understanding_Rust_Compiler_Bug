{"sha": "1d8c25b75c3df04099501403126104d49ab36e7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOGMyNWI3NWMzZGYwNDA5OTUwMTQwMzEyNjEwNGQ0OWFiMzZlN2M=", "commit": {"author": {"name": "Jonathan Dickinson", "email": "jonathanD@k2.com", "date": "2020-04-23T00:05:04Z"}, "committer": {"name": "Jonathan Dickinson", "email": "jonathanD@k2.com", "date": "2020-04-23T00:05:04Z"}, "message": "tasks.json Support\n\nMove the task provider anonymous class into a real class, as this seems\nto be how Microsoft do this in their documentation.\n\nresolveTask is now implemented, which is used by VSCode to determine how\nto execute tasks that the user has defined in tasks.json.", "tree": {"sha": "0256d51fc780d49c9a05c44ec983f73ba2d6a910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0256d51fc780d49c9a05c44ec983f73ba2d6a910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8c25b75c3df04099501403126104d49ab36e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8c25b75c3df04099501403126104d49ab36e7c", "html_url": "https://github.com/rust-lang/rust/commit/1d8c25b75c3df04099501403126104d49ab36e7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8c25b75c3df04099501403126104d49ab36e7c/comments", "author": null, "committer": null, "parents": [{"sha": "3f1f3a835a07983344f6f3becf7a0c32b96d68bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1f3a835a07983344f6f3becf7a0c32b96d68bc", "html_url": "https://github.com/rust-lang/rust/commit/3f1f3a835a07983344f6f3becf7a0c32b96d68bc"}], "stats": {"total": 103, "additions": 67, "deletions": 36}, "files": [{"sha": "1366c76d6bdaa5dd37b2ba2ea274f74b4015a9e5", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 67, "deletions": 36, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/1d8c25b75c3df04099501403126104d49ab36e7c/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1d8c25b75c3df04099501403126104d49ab36e7c/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=1d8c25b75c3df04099501403126104d49ab36e7c", "patch": "@@ -4,49 +4,80 @@ import * as vscode from 'vscode';\n // our configuration should be compatible with it so use the same key.\n const TASK_TYPE = 'cargo';\n \n-export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n-    const provider: vscode.TaskProvider = {\n+interface CargoTaskDefinition extends vscode.TaskDefinition {\n+    command?: string;\n+    args?: string[];\n+    cwd?: string;\n+    env?: { [key: string]: string };\n+}\n+\n+class CargoTaskProvider implements vscode.TaskProvider {\n+    private readonly target: vscode.WorkspaceFolder;\n+\n+    constructor(target: vscode.WorkspaceFolder) {\n+        this.target = target;\n+    }\n+\n+    provideTasks(): vscode.Task[] {\n         // Detect Rust tasks. Currently we do not do any actual detection\n         // of tasks (e.g. aliases in .cargo/config) and just return a fixed\n         // set of tasks that always exist. These tasks cannot be removed in\n         // tasks.json - only tweaked.\n-        provideTasks: () => getStandardCargoTasks(target),\n \n-        // We don't need to implement this.\n-        resolveTask: () => undefined,\n-    };\n+        return [\n+            { command: 'build', group: vscode.TaskGroup.Build },\n+            { command: 'check', group: vscode.TaskGroup.Build },\n+            { command: 'test', group: vscode.TaskGroup.Test },\n+            { command: 'clean', group: vscode.TaskGroup.Clean },\n+            { command: 'run', group: undefined },\n+        ]\n+            .map(({ command, group }) => {\n+                const vscodeTask = new vscode.Task(\n+                    // The contents of this object end up in the tasks.json entries.\n+                    {\n+                        type: TASK_TYPE,\n+                        command,\n+                    },\n+                    // The scope of the task - workspace or specific folder (global\n+                    // is not supported).\n+                    this.target,\n+                    // The task name, and task source. These are shown in the UI as\n+                    // `${source}: ${name}`, e.g. `rust: cargo build`.\n+                    `cargo ${command}`,\n+                    'rust',\n+                    // What to do when this command is executed.\n+                    new vscode.ShellExecution('cargo', [command]),\n+                    // Problem matchers.\n+                    ['$rustc'],\n+                );\n+                vscodeTask.group = group;\n+                return vscodeTask;\n+            });\n+    }\n \n-    return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n-}\n+    resolveTask(task: vscode.Task): vscode.Task | undefined {\n+        // VSCode calls this for every cargo task in the user's tasks.json,\n+        // we need to inform VSCode how to execute that command by creating\n+        // a ShellExecution for it.\n \n-function getStandardCargoTasks(target: vscode.WorkspaceFolder): vscode.Task[] {\n-    return [\n-        { command: 'build', group: vscode.TaskGroup.Build },\n-        { command: 'check', group: vscode.TaskGroup.Build },\n-        { command: 'test', group: vscode.TaskGroup.Test },\n-        { command: 'clean', group: vscode.TaskGroup.Clean },\n-        { command: 'run', group: undefined },\n-    ]\n-        .map(({ command, group }) => {\n-            const vscodeTask = new vscode.Task(\n-                // The contents of this object end up in the tasks.json entries.\n-                {\n-                    type: TASK_TYPE,\n-                    command,\n-                },\n-                // The scope of the task - workspace or specific folder (global\n-                // is not supported).\n-                target,\n-                // The task name, and task source. These are shown in the UI as\n-                // `${source}: ${name}`, e.g. `rust: cargo build`.\n-                `cargo ${command}`,\n+        const definition = task.definition as CargoTaskDefinition;\n+\n+        if (definition.type === 'cargo' && definition.command) {\n+            const args = [definition.command].concat(definition.args ?? []);\n+\n+            return new vscode.Task(\n+                definition,\n+                task.name,\n                 'rust',\n-                // What to do when this command is executed.\n-                new vscode.ShellExecution('cargo', [command]),\n-                // Problem matchers.\n-                ['$rustc'],\n+                new vscode.ShellExecution('cargo', args, definition),\n             );\n-            vscodeTask.group = group;\n-            return vscodeTask;\n-        });\n+        }\n+\n+        return undefined;\n+    }\n }\n+\n+export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n+    const provider = new CargoTaskProvider(target);\n+    return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n+}\n\\ No newline at end of file"}]}