{"sha": "0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZWFiNmI5YTY3NGVjM2VkZTZmZjBiY2Y5M2FlMjZmNTI1Y2EyMGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-22T20:07:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T20:35:10Z"}, "message": "Remove BasicBlock parameter from mir visitor methods", "tree": {"sha": "81afc9899c4e0b027bb8efbb974ee622706536bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81afc9899c4e0b027bb8efbb974ee622706536bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "html_url": "https://github.com/rust-lang/rust/commit/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597f432489f12a3f33419daa039ccef11a12c4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/597f432489f12a3f33419daa039ccef11a12c4fd", "html_url": "https://github.com/rust-lang/rust/commit/597f432489f12a3f33419daa039ccef11a12c4fd"}], "stats": {"total": 151, "additions": 52, "deletions": 99}, "files": [{"sha": "73dd24059a500300b150a10fd85f060038c69d45", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -88,32 +88,28 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_statement(&mut self,\n-                               block: BasicBlock,\n                                statement: & $($mutability)? Statement<'tcx>,\n                                location: Location) {\n-                self.super_statement(block, statement, location);\n+                self.super_statement(statement, location);\n             }\n \n             fn visit_assign(&mut self,\n-                            block: BasicBlock,\n                             place: & $($mutability)? Place<'tcx>,\n                             rvalue: & $($mutability)? Rvalue<'tcx>,\n                             location: Location) {\n-                self.super_assign(block, place, rvalue, location);\n+                self.super_assign(place, rvalue, location);\n             }\n \n             fn visit_terminator(&mut self,\n-                                block: BasicBlock,\n                                 terminator: & $($mutability)? Terminator<'tcx>,\n                                 location: Location) {\n-                self.super_terminator(block, terminator, location);\n+                self.super_terminator(terminator, location);\n             }\n \n             fn visit_terminator_kind(&mut self,\n-                                     block: BasicBlock,\n                                      kind: & $($mutability)? TerminatorKind<'tcx>,\n                                      location: Location) {\n-                self.super_terminator_kind(block, kind, location);\n+                self.super_terminator_kind(kind, location);\n             }\n \n             fn visit_assert_message(&mut self,\n@@ -327,13 +323,13 @@ macro_rules! make_mir_visitor {\n                 let mut index = 0;\n                 for statement in statements {\n                     let location = Location { block: block, statement_index: index };\n-                    self.visit_statement(block, statement, location);\n+                    self.visit_statement(statement, location);\n                     index += 1;\n                 }\n \n                 if let Some(terminator) = terminator {\n                     let location = Location { block: block, statement_index: index };\n-                    self.visit_terminator(block, terminator, location);\n+                    self.visit_terminator(terminator, location);\n                 }\n             }\n \n@@ -350,7 +346,6 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_statement(&mut self,\n-                               block: BasicBlock,\n                                statement: & $($mutability)? Statement<'tcx>,\n                                location: Location) {\n                 let Statement {\n@@ -361,7 +356,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_info(source_info);\n                 match kind {\n                     StatementKind::Assign(place, rvalue) => {\n-                        self.visit_assign(block, place, rvalue, location);\n+                        self.visit_assign(place, rvalue, location);\n                     }\n                     StatementKind::FakeRead(_, place) => {\n                         self.visit_place(\n@@ -415,7 +410,6 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_assign(&mut self,\n-                            _block: BasicBlock,\n                             place: &$($mutability)? Place<'tcx>,\n                             rvalue: &$($mutability)? Rvalue<'tcx>,\n                             location: Location) {\n@@ -428,19 +422,18 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_terminator(&mut self,\n-                                block: BasicBlock,\n                                 terminator: &$($mutability)? Terminator<'tcx>,\n                                 location: Location) {\n                 let Terminator { source_info, kind } = terminator;\n \n                 self.visit_source_info(source_info);\n-                self.visit_terminator_kind(block, kind, location);\n+                self.visit_terminator_kind(kind, location);\n             }\n \n             fn super_terminator_kind(&mut self,\n-                                     block: BasicBlock,\n                                      kind: & $($mutability)? TerminatorKind<'tcx>,\n                                      source_location: Location) {\n+                let block = source_location.block;\n                 match kind {\n                     TerminatorKind::Goto { target } => {\n                         self.visit_branch(block, *target);\n@@ -890,12 +883,12 @@ macro_rules! make_mir_visitor {\n                 let basic_block = & $($mutability)? mir[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n-                        self.visit_terminator(location.block, terminator, location)\n+                        self.visit_terminator(terminator, location)\n                     }\n                 } else {\n                     let statement = & $($mutability)?\n                         basic_block.statements[location.statement_index];\n-                    self.visit_statement(location.block, statement, location)\n+                    self.visit_statement(statement, location)\n                 }\n             }\n         }\n@@ -912,21 +905,21 @@ pub trait MirVisitable<'tcx> {\n impl<'tcx> MirVisitable<'tcx> for Statement<'tcx> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_statement(location.block, self, location)\n+        visitor.visit_statement(self, location)\n     }\n }\n \n impl<'tcx> MirVisitable<'tcx> for Terminator<'tcx> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_terminator(location.block, self, location)\n+        visitor.visit_terminator(self, location)\n     }\n }\n \n impl<'tcx> MirVisitable<'tcx> for Option<Terminator<'tcx>> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_terminator(location.block, self.as_ref().unwrap(), location)\n+        visitor.visit_terminator(self.as_ref().unwrap(), location)\n     }\n }\n "}, {"sha": "c3eac4edd0ae6a91d5be4d4209fd2d2e4fb190a6", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -97,11 +97,10 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n     for LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn visit_assign(&mut self,\n-                    block: mir::BasicBlock,\n                     place: &mir::Place<'tcx>,\n                     rvalue: &mir::Rvalue<'tcx>,\n                     location: Location) {\n-        debug!(\"visit_assign(block={:?}, place={:?}, rvalue={:?})\", block, place, rvalue);\n+        debug!(\"visit_assign(place={:?}, rvalue={:?})\", place, rvalue);\n \n         if let mir::Place::Base(mir::PlaceBase::Local(index)) = *place {\n             self.assign(index, location);\n@@ -120,7 +119,6 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             block: mir::BasicBlock,\n                              kind: &mir::TerminatorKind<'tcx>,\n                              location: Location) {\n         let check = match *kind {\n@@ -148,7 +146,7 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             }\n         }\n \n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n     }\n \n     fn visit_place(&mut self,"}, {"sha": "f7d3aef4d766cd7740b0f946b9b8a4677248cdfb", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -184,7 +184,6 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n     fn visit_assign(\n         &mut self,\n-        block: mir::BasicBlock,\n         assigned_place: &mir::Place<'tcx>,\n         rvalue: &mir::Rvalue<'tcx>,\n         location: mir::Location,\n@@ -215,7 +214,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.super_assign(block, assigned_place, rvalue, location)\n+        self.super_assign(assigned_place, rvalue, location)\n     }\n \n     fn visit_local(\n@@ -287,15 +286,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n         return self.super_rvalue(rvalue, location);\n     }\n-\n-    fn visit_statement(\n-        &mut self,\n-        block: mir::BasicBlock,\n-        statement: &mir::Statement<'tcx>,\n-        location: Location,\n-    ) {\n-        return self.super_statement(block, statement, location);\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {"}, {"sha": "bfba9738a6488e57f6daa524a78d678e590b58bf", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -100,7 +100,6 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -117,12 +116,11 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             ));\n         }\n \n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_assign(\n         &mut self,\n-        block: BasicBlock,\n         place: &Place<'tcx>,\n         rvalue: &Rvalue<'tcx>,\n         location: Location,\n@@ -141,12 +139,11 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             }\n         }\n \n-        self.super_assign(block, place, rvalue, location);\n+        self.super_assign(place, rvalue, location);\n     }\n \n     fn visit_terminator(\n         &mut self,\n-        block: BasicBlock,\n         terminator: &Terminator<'tcx>,\n         location: Location,\n     ) {\n@@ -167,7 +164,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             }\n         }\n \n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_ascribe_user_ty("}, {"sha": "999b43d90d027850b2bc42efdc6e415a674e0399", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -58,7 +58,6 @@ struct InvalidationGenerator<'cx, 'tcx: 'cx, 'gcx: 'tcx> {\n impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -134,13 +133,12 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             }\n         }\n \n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_terminator(\n         &mut self,\n-        block: BasicBlock,\n-        terminator: &Terminator<'tcx>,\n+        kind: &Terminator<'tcx>,\n         location: Location\n     ) {\n         self.check_activations(location);\n@@ -258,7 +256,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             }\n         }\n \n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n }\n "}, {"sha": "f3b33c411a63621253a54bcced5b26f0d7049b6c", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{\n-    BasicBlock, Local, Location, Place, PlaceBase, Statement, StatementKind, TerminatorKind\n+    Local, Location, Place, PlaceBase, Statement, StatementKind, TerminatorKind\n };\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -55,7 +55,6 @@ struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n     fn visit_terminator_kind(\n         &mut self,\n-        _block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n         _location: Location,\n     ) {\n@@ -77,7 +76,6 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n \n     fn visit_statement(\n         &mut self,\n-        _block: BasicBlock,\n         statement: &Statement<'tcx>,\n         _location: Location,\n     ) {"}, {"sha": "42c2387b7052da02d6949cb95e37f0bd34f5d892", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n \n         BorrowedLocalsVisitor {\n             sets,\n-        }.visit_statement(loc.block, stmt, loc);\n+        }.visit_statement(stmt, loc);\n \n         // StorageDead invalidates all borrows and raw pointers to a local\n         match stmt.kind {\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n-        }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n+        }.visit_terminator(self.mir[loc.block].terminator(), loc);\n     }\n \n     fn propagate_call_return("}, {"sha": "d5c5c3eda1de1f0b9c3c7110dd66dea1d3eea2a4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -615,7 +615,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             block: mir::BasicBlock,\n                              kind: &mir::TerminatorKind<'tcx>,\n                              location: Location) {\n         debug!(\"visiting terminator {:?} @ {:?}\", kind, location);\n@@ -654,7 +653,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n     }\n \n     fn visit_place(&mut self,"}, {"sha": "e072fafb1df0e393f90ccbf4b50d4e26ab127c95", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -65,7 +65,6 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self,\n-                        block: BasicBlock,\n                         terminator: &Terminator<'tcx>,\n                         location: Location)\n     {\n@@ -97,11 +96,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        location: Location)\n     {\n@@ -124,7 +122,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     UnsafetyViolationKind::General)\n             },\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_rvalue(&mut self,"}, {"sha": "64fd0b1365690a1864546f8224983806bf246fe9", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -16,7 +16,7 @@\n //! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n //! [`Nop`]: rustc::mir::StatementKind::Nop\n \n-use rustc::mir::{BasicBlock, BorrowKind, Rvalue, Location, Mir};\n+use rustc::mir::{BorrowKind, Rvalue, Location, Mir};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -38,7 +38,6 @@ impl MirPass for CleanupNonCodegenStatements {\n \n impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n         match statement.kind {\n@@ -47,6 +46,6 @@ impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n             | StatementKind::FakeRead(..) => statement.make_nop(),\n             _ => (),\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n }"}, {"sha": "75b9a6bc4ff72dfee2922d1ea39fb8732d6d7700", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -4,7 +4,7 @@\n \n use rustc::hir::def::Def;\n use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local};\n-use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind, Static, StaticKind};\n+use rustc::mir::{NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n@@ -549,7 +549,6 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -571,16 +570,15 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_terminator_kind(\n         &mut self,\n-        block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n         location: Location,\n     ) {\n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n         let source_info = *self.mir.source_info(location);\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n             if let Some(value) = self.eval_operand(cond, source_info) {\n@@ -601,7 +599,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         },\n                         Operand::Constant(_) => {}\n                     }\n-                    let span = self.mir[block]\n+                    let span = self.mir[location.block]\n                         .terminator\n                         .as_ref()\n                         .unwrap()"}, {"sha": "924428deaee997dea829732e235eb947f1be61fe", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -41,10 +41,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n }\n "}, {"sha": "ba802370183357b9654afa34040224d39e51dba0", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -369,7 +369,6 @@ struct StorageIgnored(liveness::LiveVarSet);\n \n impl<'tcx> Visitor<'tcx> for StorageIgnored {\n     fn visit_statement(&mut self,\n-                       _block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        _location: Location) {\n         match statement.kind {"}, {"sha": "de1d424108d0bf86f33640099471e8cae7d9e153", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -723,9 +723,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, block: BasicBlock,\n+    fn visit_terminator_kind(&mut self,\n                              kind: &mut TerminatorKind<'tcx>, loc: Location) {\n-        self.super_terminator_kind(block, kind, loc);\n+        self.super_terminator_kind(kind, loc);\n \n         match *kind {\n             TerminatorKind::GeneratorDrop |"}, {"sha": "d39f76a9901f4b38fd8f699249523b77ac64b49c", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -25,12 +25,11 @@ pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx\n \n impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n     fn visit_terminator(&mut self,\n-                        bb: BasicBlock,\n                         terminator: &mut Terminator<'tcx>,\n                         location: Location) {\n         if let Some(unwind) = terminator.kind.unwind_mut() {\n             unwind.take();\n         }\n-        self.super_terminator(bb, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n }"}, {"sha": "c30666e53806dfdcfb0d0b2df269254a24670406", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -1182,10 +1182,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             bb: BasicBlock,\n                              kind: &TerminatorKind<'tcx>,\n                              location: Location) {\n-        debug!(\"visit_terminator_kind: bb={:?} kind={:?} location={:?}\", bb, kind, location);\n+        debug!(\"visit_terminator_kind: kind={:?} location={:?}\", kind, location);\n         if let TerminatorKind::Call { ref func, ref args, ref destination, .. } = *kind {\n             if let Some((ref dest, _)) = *destination {\n                 self.assign(dest, ValueSource::Call {\n@@ -1313,7 +1312,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let candidate = Candidate::Argument { bb, index: i };\n+                    let candidate = Candidate::Argument { bb: location.block, index: i };\n                     // Since the argument is required to be constant,\n                     // we care about constness, not promotability.\n                     // If we checked for promotability, we'd miss out on\n@@ -1346,7 +1345,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 self.visit_operand(arg, location);\n             }\n         } else if let TerminatorKind::Drop { location: ref place, .. } = *kind {\n-            self.super_terminator_kind(bb, kind, location);\n+            self.super_terminator_kind(kind, location);\n \n             // Deny *any* live drops anywhere other than functions.\n             if self.mode != Mode::Fn {\n@@ -1377,12 +1376,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             }\n         } else {\n             // Qualify any operands inside other terminators.\n-            self.super_terminator_kind(bb, kind, location);\n+            self.super_terminator_kind(kind, location);\n         }\n     }\n \n     fn visit_assign(&mut self,\n-                    _: BasicBlock,\n                     dest: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n@@ -1397,11 +1395,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         self.span = source_info.span;\n     }\n \n-    fn visit_statement(&mut self, bb: BasicBlock, statement: &Statement<'tcx>, location: Location) {\n-        debug!(\"visit_statement: bb={:?} statement={:?} location={:?}\", bb, statement, location);\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        debug!(\"visit_statement: statement={:?} location={:?}\", statement, location);\n         match statement.kind {\n             StatementKind::Assign(..) => {\n-                self.super_statement(bb, statement, location);\n+                self.super_statement(statement, location);\n             }\n             // FIXME(eddyb) should these really do nothing?\n             StatementKind::FakeRead(..) |\n@@ -1414,14 +1412,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             StatementKind::Nop => {}\n         }\n     }\n-\n-    fn visit_terminator(&mut self,\n-                        bb: BasicBlock,\n-                        terminator: &Terminator<'tcx>,\n-                        location: Location) {\n-        debug!(\"visit_terminator: bb={:?} terminator={:?} location={:?}\", bb, terminator, location);\n-        self.super_terminator(bb, terminator, location);\n-    }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "cb23abd8a0dc36ee15b2b816831b2a85a6765056", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -58,7 +58,6 @@ struct UniformArrayMoveOutVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n     fn visit_assign(&mut self,\n-                    block: BasicBlock,\n                     dst_place: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n@@ -82,7 +81,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_assign(block, dst_place, rvalue, location)\n+        self.super_assign(dst_place, rvalue, location)\n     }\n }\n \n@@ -294,14 +293,13 @@ struct RestoreDataCollector {\n \n impl<'tcx> Visitor<'tcx> for RestoreDataCollector {\n     fn visit_assign(&mut self,\n-                    block: BasicBlock,\n                     place: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n         if let Rvalue::Aggregate(box AggregateKind::Array(_), _) = *rvalue {\n             self.candidates.push(location);\n         }\n-        self.super_assign(block, place, rvalue, location)\n+        self.super_assign(place, rvalue, location)\n     }\n \n     fn visit_local(&mut self,"}, {"sha": "29f281fb8d430fd353eaa40f63d180751cf6e30f", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -247,9 +247,9 @@ fn block<'tcx>(\n \n     // Visit the various parts of the basic block in reverse. If we go\n     // forward, the logic in `add_def` and `add_use` would be wrong.\n-    visitor.visit_terminator(BasicBlock::new(0), b.terminator(), dummy_location);\n+    visitor.visit_terminator(b.terminator(), dummy_location);\n     for statement in b.statements.iter().rev() {\n-        visitor.visit_statement(BasicBlock::new(0), statement, dummy_location);\n+        visitor.visit_statement(statement, dummy_location);\n     }\n \n     visitor.defs_uses"}, {"sha": "6c377684bee5196bc915a08a2a7ec70e1739e936", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0eeab6b9a674ec3ede6ff0bcf93ae26f525ca20c", "patch": "@@ -337,7 +337,7 @@ where\n         )?;\n \n         write_extra(tcx, w, |visitor| {\n-            visitor.visit_statement(current_location.block, statement, current_location);\n+            visitor.visit_statement(statement, current_location);\n         })?;\n \n         extra_data(PassWhere::AfterLocation(current_location), w)?;\n@@ -358,7 +358,7 @@ where\n     )?;\n \n     write_extra(tcx, w, |visitor| {\n-        visitor.visit_terminator(current_location.block, data.terminator(), current_location);\n+        visitor.visit_terminator(data.terminator(), current_location);\n     })?;\n \n     extra_data(PassWhere::AfterLocation(current_location), w)?;"}]}