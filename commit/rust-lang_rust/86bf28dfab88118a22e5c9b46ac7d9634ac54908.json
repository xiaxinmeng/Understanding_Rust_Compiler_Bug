{"sha": "86bf28dfab88118a22e5c9b46ac7d9634ac54908", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YmYyOGRmYWI4ODExOGEyMmU1YzliNDZhYzdkOTYzNGFjNTQ5MDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-21T08:55:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-21T08:55:38Z"}, "message": "Auto merge of #7385 - xFrednet:0000-fix-broken-deploy, r=flip1995\n\nFixed broken deploy script due to multiline configuration docs\n\nThe deploy script on master currently runs into an error (See [log](https://github.com/rust-lang/rust-clippy/runs/2865828873)) due to the new configuration documentation added in #7299. The current documentation collection for the configuration macro sadly doesn't support multiline doc comments. This will be changes in the future with the new metadata collector tracked in #7172 For now we have to use `<br>` inside doc comments to add paragraphs.\n\nThis PR restricts `define_Conf!` macro to single lines and adds a comment explaining the reasoning behind it. It also adjusted the actual document parsing to fix a bug. (The parsing was automatically stopping on the first curly bracket, even if it was part of a doc comment).\n\nchangelog: none", "tree": {"sha": "6e32e6c16f0ee8272f14dfc2657c556815e061e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e32e6c16f0ee8272f14dfc2657c556815e061e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86bf28dfab88118a22e5c9b46ac7d9634ac54908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86bf28dfab88118a22e5c9b46ac7d9634ac54908", "html_url": "https://github.com/rust-lang/rust/commit/86bf28dfab88118a22e5c9b46ac7d9634ac54908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86bf28dfab88118a22e5c9b46ac7d9634ac54908/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404bd1a49a13fc09770f5f4ba289c0d105ad01c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/404bd1a49a13fc09770f5f4ba289c0d105ad01c8", "html_url": "https://github.com/rust-lang/rust/commit/404bd1a49a13fc09770f5f4ba289c0d105ad01c8"}, {"sha": "96a9786b1c95b6647ff7e1478947c100db78e3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/96a9786b1c95b6647ff7e1478947c100db78e3ca", "html_url": "https://github.com/rust-lang/rust/commit/96a9786b1c95b6647ff7e1478947c100db78e3ca"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "2f8064499fd793f0e6a19c82dcedc870c90aef0f", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86bf28dfab88118a22e5c9b46ac7d9634ac54908/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bf28dfab88118a22e5c9b46ac7d9634ac54908/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=86bf28dfab88118a22e5c9b46ac7d9634ac54908", "patch": "@@ -24,15 +24,18 @@ impl TryConf {\n     }\n }\n \n+/// Note that the configuration parsing currently doesn't support documentation that will\n+/// that spans over several lines. This will be possible with the new implementation\n+/// See (rust-clippy#7172)\n macro_rules! define_Conf {\n     ($(\n-        $(#[doc = $doc:literal])*\n+        #[doc = $doc:literal]\n         $(#[conf_deprecated($dep:literal)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n-            $($(#[doc = $doc])* pub $name: $ty,)*\n+            $(#[doc = $doc] pub $name: $ty,)*\n         }\n \n         mod defaults {\n@@ -109,7 +112,7 @@ macro_rules! define_Conf {\n                                 stringify!($name),\n                                 stringify!($ty),\n                                 format!(\"{:?}\", super::defaults::$name()),\n-                                concat!($($doc,)*),\n+                                $doc,\n                                 deprecation_reason,\n                             )\n                         },\n@@ -198,11 +201,7 @@ define_Conf! {\n     (upper_case_acronyms_aggressive: bool = false),\n     /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n     (cargo_ignore_publish: bool = false),\n-    /// Lint: NONSTANDARD_MACRO_BRACES. Enforce the named macros always use the braces specified.\n-    ///\n-    /// A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`.\n-    /// If the macro is could be used with a full path two `MacroMatcher`s have to be added one\n-    /// with the full path `crate_name::macro_name` and one with just the macro name.\n+    /// Lint: NONSTANDARD_MACRO_BRACES. Enforce the named macros always use the braces specified. <br> A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro is could be used with a full path two `MacroMatcher`s have to be added one with the full path `crate_name::macro_name` and one with just the macro name.\n     (standard_macro_braces: Vec<crate::nonstandard_macro_braces::MacroMatcher> = Vec::new()),\n }\n "}, {"sha": "3b6e8c372ede6f0cd6ad4a050a30f951d39fc019", "filename": "util/lintlib.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86bf28dfab88118a22e5c9b46ac7d9634ac54908/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/86bf28dfab88118a22e5c9b46ac7d9634ac54908/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=86bf28dfab88118a22e5c9b46ac7d9634ac54908", "patch": "@@ -12,7 +12,7 @@\n \n lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n-conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n+conf_re = re.compile(r'''define_Conf! {\\n((?!\\n})[\\s\\S])*\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n     r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\(([^:]+):\\s*([^\\s=]+)\\s*=\\s*([^\\.\\)]+).*\\),''', re.MULTILINE)\n comment_re = re.compile(r'''\\s*/// ?(.*)''')\n@@ -91,7 +91,7 @@ def parse_configs(path):\n         contents = fp.read()\n \n     match = re.search(conf_re, contents)\n-    confvars = re.findall(confvar_re, match.group(1))\n+    confvars = re.findall(confvar_re, match.group(0))\n \n     for (lints, doc, name, ty, default) in confvars:\n         for lint in lints.split(','):"}]}