{"sha": "48e4bf115f2c4a4ac051f49dab862610fe57f622", "node_id": "C_kwDOAAsO6NoAKDQ4ZTRiZjExNWYyYzRhNGFjMDUxZjQ5ZGFiODYyNjEwZmU1N2Y2MjI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T14:57:35Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port non-ascii-idents diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "a7ecba441943debcd2a68ab86250e1da6f031d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ecba441943debcd2a68ab86250e1da6f031d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e4bf115f2c4a4ac051f49dab862610fe57f622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e4bf115f2c4a4ac051f49dab862610fe57f622", "html_url": "https://github.com/rust-lang/rust/commit/48e4bf115f2c4a4ac051f49dab862610fe57f622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e4bf115f2c4a4ac051f49dab862610fe57f622/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c29e05e7450053e2a90635976a7fe2d6e5a7fd15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29e05e7450053e2a90635976a7fe2d6e5a7fd15", "html_url": "https://github.com/rust-lang/rust/commit/c29e05e7450053e2a90635976a7fe2d6e5a7fd15"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "34445c3940a23aa4f2c650aa66fe7cc43a12b6d1", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48e4bf115f2c4a4ac051f49dab862610fe57f622/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/48e4bf115f2c4a4ac051f49dab862610fe57f622/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=48e4bf115f2c4a4ac051f49dab862610fe57f622", "patch": "@@ -60,3 +60,15 @@ lint-cstring-ptr = getting the inner pointer of a temporary `CString`\n     .unwrap-label = this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n     .note = pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n     .help = for more information, see https://doc.rust-lang.org/reference/destructors.html\n+\n+lint-identifier-non-ascii-char = identifier contains non-ASCII characters\n+\n+lint-identifier-uncommon-codepoints = identifier contains uncommon Unicode codepoints\n+\n+lint-confusable-identifier-pair = identifier pair considered confusable between `{$existing_sym}` and `{$sym}`\n+    .label = this is where the previous identifier occurred\n+\n+lint-mixed-script-confusables =\n+    the usage of Script Group `{$set}` in this crate consists solely of mixed script confusables\n+    .includes-note = the usage includes {$includes}\n+    .note = please recheck to make sure their usages are indeed what you want"}, {"sha": "764003e61a6dfb0991ee2c5c4c143417015fc0df", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/48e4bf115f2c4a4ac051f49dab862610fe57f622/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e4bf115f2c4a4ac051f49dab862610fe57f622/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=48e4bf115f2c4a4ac051f49dab862610fe57f622", "patch": "@@ -1,6 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::fluent;\n use rustc_span::symbol::Symbol;\n \n declare_lint! {\n@@ -180,13 +181,13 @@ impl EarlyLintPass for NonAsciiIdents {\n             }\n             has_non_ascii_idents = true;\n             cx.struct_span_lint(NON_ASCII_IDENTS, sp, |lint| {\n-                lint.build(\"identifier contains non-ASCII characters\").emit();\n+                lint.build(fluent::lint::identifier_non_ascii_char).emit();\n             });\n             if check_uncommon_codepoints\n                 && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n             {\n                 cx.struct_span_lint(UNCOMMON_CODEPOINTS, sp, |lint| {\n-                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit();\n+                    lint.build(fluent::lint::identifier_uncommon_codepoints).emit();\n                 })\n             }\n         }\n@@ -216,15 +217,11 @@ impl EarlyLintPass for NonAsciiIdents {\n                     .and_modify(|(existing_symbol, existing_span, existing_is_ascii)| {\n                         if !*existing_is_ascii || !is_ascii {\n                             cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n-                                lint.build(&format!(\n-                                    \"identifier pair considered confusable between `{}` and `{}`\",\n-                                    existing_symbol, symbol\n-                                ))\n-                                .span_label(\n-                                    *existing_span,\n-                                    \"this is where the previous identifier occurred\",\n-                                )\n-                                .emit();\n+                                lint.build(fluent::lint::confusable_identifier_pair)\n+                                    .set_arg(\"existing_sym\", *existing_symbol)\n+                                    .set_arg(\"sym\", symbol)\n+                                    .span_label(*existing_span, fluent::lint::label)\n+                                    .emit();\n                             });\n                         }\n                         if *existing_is_ascii && !is_ascii {\n@@ -326,18 +323,20 @@ impl EarlyLintPass for NonAsciiIdents {\n \n                 for ((sp, ch_list), script_set) in lint_reports {\n                     cx.struct_span_lint(MIXED_SCRIPT_CONFUSABLES, sp, |lint| {\n-                        let message = format!(\n-                            \"the usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n-                            script_set);\n-                        let mut note = \"the usage includes \".to_string();\n+                        let mut includes = String::new();\n                         for (idx, ch) in ch_list.into_iter().enumerate() {\n                             if idx != 0 {\n-                                note += \", \";\n+                                includes += \", \";\n                             }\n                             let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n-                            note += &char_info;\n+                            includes += &char_info;\n                         }\n-                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit();\n+                        lint.build(fluent::lint::mixed_script_confusables)\n+                            .set_arg(\"set\", script_set.to_string())\n+                            .set_arg(\"includes\", includes)\n+                            .note(fluent::lint::includes_note)\n+                            .note(fluent::lint::note)\n+                            .emit();\n                     });\n                 }\n             }"}]}