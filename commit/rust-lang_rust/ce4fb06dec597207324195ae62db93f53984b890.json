{"sha": "ce4fb06dec597207324195ae62db93f53984b890", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNGZiMDZkZWM1OTcyMDczMjQxOTVhZTYyZGI5M2Y1Mzk4NGI4OTA=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-10-10T11:26:17Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-10-10T12:52:05Z"}, "message": "Truncate hints longer than 20 characters", "tree": {"sha": "5f66834352ba3ef53a594cf2da985982b26c89e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f66834352ba3ef53a594cf2da985982b26c89e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce4fb06dec597207324195ae62db93f53984b890", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJdnyl2AAoJENWyu1zcMzS8tPAH/ibF0Gk1GAM669ub/xSCgGNd\ntE7+sWGHgaf+TuCYoyz4O6mqXXvafLAhKKBmnLy9hzySYjI+Fw4rQqMflvBMiUZV\nMHcflxWoVKhY/mgqFv0/mtkk55l0AYfWQ9VHP4AVtagUcZzndxBkL+mvCyiVJOS+\n+r4TLMUjXHQ80VjoyB5GGIZRFK0pMmiGDRQQji4U9NdKbgauULxQ7pNOPDOga6YP\n7ps0uv8S5/t8vJ5E8aZpL7wtt1hQqhFtgQPLLzcFqtKhIj8zyI8Bhw1s98Dug7f5\nqoHtqT1mkjqg9GopM1pkJ7gsCMp+xsU8zrQojjuuMruOaDGS0HbKIrvKLnlAd50=\n=QqF+\n-----END PGP SIGNATURE-----", "payload": "tree 5f66834352ba3ef53a594cf2da985982b26c89e4\nparent 523d7d2c8210b382146c76927e93f1cc8a6d31e2\nauthor Wilco Kusee <wilcokusee@gmail.com> 1570706777 +0200\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1570711925 +0200\n\nTruncate hints longer than 20 characters\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4fb06dec597207324195ae62db93f53984b890", "html_url": "https://github.com/rust-lang/rust/commit/ce4fb06dec597207324195ae62db93f53984b890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce4fb06dec597207324195ae62db93f53984b890/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523d7d2c8210b382146c76927e93f1cc8a6d31e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/523d7d2c8210b382146c76927e93f1cc8a6d31e2", "html_url": "https://github.com/rust-lang/rust/commit/523d7d2c8210b382146c76927e93f1cc8a6d31e2"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "3157c04c8b27bca1770af163bed4de4bc7da3dc5", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ce4fb06dec597207324195ae62db93f53984b890/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ce4fb06dec597207324195ae62db93f53984b890/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=ce4fb06dec597207324195ae62db93f53984b890", "patch": "@@ -13,6 +13,8 @@ interface InlayHint {\n     label: string;\n }\n \n+const maxHintLength = 20;\n+\n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n         color: new vscode.ThemeColor('ralsp.inlayHint')\n@@ -83,17 +85,39 @@ export class HintsUpdater {\n     ): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints !== null) {\n-            const newDecorations = newHints.map(hint => ({\n-                range: hint.range,\n-                renderOptions: { after: { contentText: `: ${hint.label}` } }\n-            }));\n+            const newDecorations = newHints.map(hint => {\n+                let label = hint.label.substring(0, maxHintLength);\n+                if (hint.label.length > maxHintLength) {\n+                    label += '\u2026';\n+                }\n+                return {\n+                    range: this.truncateHint(hint.range),\n+                    renderOptions: {\n+                        after: {\n+                            contentText: `: ${label}`\n+                        }\n+                    }\n+                };\n+            });\n             return editor.setDecorations(\n                 typeHintDecorationType,\n                 newDecorations\n             );\n         }\n     }\n \n+    private truncateHint(range: Range): Range {\n+        if (!range.isSingleLine) {\n+            return range;\n+        }\n+        const maxEnd = new vscode.Position(\n+            range.start.line,\n+            range.start.character + maxHintLength\n+        );\n+        const end = range.end.isAfter(maxEnd) ? maxEnd : range.end;\n+        return new Range(range.start, end);\n+    }\n+\n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri }"}]}