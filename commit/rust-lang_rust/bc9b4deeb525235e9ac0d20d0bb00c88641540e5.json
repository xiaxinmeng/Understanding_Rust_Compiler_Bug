{"sha": "bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOWI0ZGVlYjUyNTIzNWU5YWMwZDIwZDBiYjAwYzg4NjQxNTQwZTU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-08T17:30:14Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:23Z"}, "message": "Make yield and gen arg outside generator literals an error and update tests", "tree": {"sha": "10934d9080f1a750c1b829df1c24a9702684783a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10934d9080f1a750c1b829df1c24a9702684783a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "html_url": "https://github.com/rust-lang/rust/commit/bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "url": "https://api.github.com/repos/rust-lang/rust/commits/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "html_url": "https://github.com/rust-lang/rust/commit/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "0f68b15977848d7ace2f1ce14b9925abc2598e9e", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                             self.param_env,\n                                                             &fn_sig);\n \n-        let interior = check_fn(self, self.param_env, fn_sig, decl, expr.id, body).1;\n+        let interior = check_fn(self, self.param_env, fn_sig, decl, expr.id, body, true).1;\n \n         if let Some(interior) = interior {\n             let closure_substs = ty::ClosureSubsts {"}, {"sha": "1d1631c4fa7e7a8c005257344e3bfc01fca35670", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -871,7 +871,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                   param_env,\n                                                   &fn_sig);\n \n-            check_fn(&inh, param_env, fn_sig, decl, id, body).0\n+            check_fn(&inh, param_env, fn_sig, decl, id, body, false).0\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.id);\n             let expected_type = tcx.type_of(def_id);\n@@ -987,7 +987,8 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             fn_sig: ty::FnSig<'tcx>,\n                             decl: &'gcx hir::FnDecl,\n                             fn_id: ast::NodeId,\n-                            body: &'gcx hir::Body)\n+                            body: &'gcx hir::Body,\n+                            can_be_generator: bool)\n                             -> (FnCtxt<'a, 'gcx, 'tcx>, Option<ty::GeneratorInterior<'tcx>>)\n {\n     let mut fn_sig = fn_sig.clone();\n@@ -1014,22 +1015,30 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let def_id = fcx.tcx.hir.local_def_id(fn_id);\n     let span = body.value.span;\n \n+    if fcx.tcx.sess.verbose() {\n+        println!(\"checking body {} {}\", fn_id, can_be_generator);\n+    }\n+\n     if let Some(ref impl_arg) = body.impl_arg {\n-        let impl_arg_ty = fcx.infcx.type_var_for_impl_arg(span, def_id);\n+        if can_be_generator {\n+            let impl_arg_ty = fcx.infcx.type_var_for_impl_arg(span, def_id);\n \n-        // Require impl_arg: 'static\n-        let cause = traits::ObligationCause::new(span, body.value.id, traits::MiscObligation);;\n-        fcx.fulfillment_cx.borrow_mut()\n-                          .register_region_obligation(impl_arg_ty,\n-                                                      fcx.tcx.types.re_static,\n-                                                      cause);\n+            // Require impl_arg: 'static\n+            let cause = traits::ObligationCause::new(span,\n+                                                     body.value.id,\n+                                                     traits::MiscObligation);\n+            fcx.fulfillment_cx.borrow_mut()\n+                            .register_region_obligation(impl_arg_ty,\n+                                                        fcx.tcx.types.re_static,\n+                                                        cause);\n \n-        fcx.impl_arg_ty = Some(impl_arg_ty);\n+            fcx.impl_arg_ty = Some(impl_arg_ty);\n \n-        // Write the type to the impl arg id\n-        fcx.write_ty(impl_arg.id, impl_arg_ty);\n+            // Write the type to the impl arg id\n+            fcx.write_ty(impl_arg.id, impl_arg_ty);\n \n-        fcx.suspend_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n+            fcx.suspend_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n+        }\n     }\n \n     GatherLocalsVisitor { fcx: &fcx, }.visit_body(body);\n@@ -1050,7 +1059,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.write_ty(arg.id, arg_ty);\n     }\n \n-    let gen_ty = if body.is_generator() {\n+    let gen_ty = if can_be_generator && body.is_generator() {\n         let gen_sig = ty::GenSig {\n             impl_arg_ty: fcx.impl_arg_ty.unwrap(),\n             suspend_ty: fcx.suspend_ty.unwrap(),\n@@ -3994,7 +4003,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 None => {\n                     struct_span_err!(self.tcx.sess, expr.span, E0803,\n-                                 \"impl arg expression outside of function body\").emit();\n+                                 \"gen arg expression outside of generator literal\").emit();\n                     tcx.types.err\n                 }\n             }\n@@ -4006,7 +4015,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 None => {\n                     struct_span_err!(self.tcx.sess, expr.span, E0802,\n-                                 \"yield statement outside of function body\").emit();\n+                                 \"yield statement outside of generator literal\").emit();\n                 }\n             }\n             tcx.mk_nil()"}, {"sha": "0463f82ccce25ab30d652ecf6260b2630f918612", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -4668,7 +4668,7 @@ register_diagnostics! {\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)\n     E0801, // unexpected generator return\n-    E0802, // yield statement outside of function body\n-    E0803, // impl arg expression outside of function body\n+    E0802, // yield statement outside of generator literal\n+    E0803, // gen arg expression outside of generator literal\n     E0804, // cannot determine the type for the implicit argument of this generator\n }"}, {"sha": "5176f3c5f5687535f2ce2ea0f2e4e9aa47ac1495", "filename": "src/test/compile-fail/generator/yield-in-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+const A: u8 = { yield 3u8; gen arg; 3u8};\n+//~^ ERROR yield statement outside\n+//~| ERROR gen arg expression outside"}, {"sha": "95ec1224421f28d384a79f8ff8b836e52bf75e66", "filename": "src/test/compile-fail/generator/yield-in-function.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+fn main() { yield; gen arg; }\n+//~^ ERROR yield statement outside\n+//~| ERROR gen arg expression outside"}, {"sha": "f4cad13ce8eb5329a4e9201e5b7669e191744d2a", "filename": "src/test/compile-fail/generator/yield-in-static.rs", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -10,14 +10,6 @@\n \n #![feature(generators)]\n \n-const A: u8 = { yield 3u8; gen arg; 3u8};\n-//~^ ERROR yield statement outside\n-//~| ERROR gen arg expression outside\n-\n static B: u8 = { yield 3u8; gen arg; 3u8};\n //~^ ERROR yield statement outside\n //~| ERROR gen arg expression outside\n-\n-fn main() { yield; gen arg; }\n-//~^ ERROR yield statement outside\n-//~| ERROR gen arg expression outside", "previous_filename": "src/test/compile-fail/generator/invalid-positions.rs"}, {"sha": "e44aa0592357104f4dccdaacb8f6e0ff346dc987", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b4deeb525235e9ac0d20d0bb00c88641540e5/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=bc9b4deeb525235e9ac0d20d0bb00c88641540e5", "patch": "@@ -34,14 +34,15 @@ fn test() -> impl Generator<Return=(), Yield=u8> {\n }\n \n fn main() {\n-    let start = 6;\n     let end = 11;\n \n-    let closure_test = || {\n-        for i in start..end {\n-            yield i\n+    let closure_test = |start| {\n+        || {\n+            for i in start..end {\n+                yield i\n+            }\n         }\n     };\n \n-    assert!(W(test()).chain(W(closure_test)).eq(1..11));\n+    assert!(W(test()).chain(W(closure_test(6))).eq(1..11));\n }"}]}