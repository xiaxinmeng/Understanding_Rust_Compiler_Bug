{"sha": "9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMWQ5NmNlMDdkYWJjYmVmMzhkNGEwZGRhYTQyZDkwOTE5Y2JhOGU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T05:03:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T05:03:31Z"}, "message": "Add unsigned integers.", "tree": {"sha": "7108ef155a9f8c4c7d9f86736c822722909f973c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7108ef155a9f8c4c7d9f86736c822722909f973c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "html_url": "https://github.com/rust-lang/rust/commit/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e1bb9841ee885be82fce24752a8e3de17ab485b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1bb9841ee885be82fce24752a8e3de17ab485b", "html_url": "https://github.com/rust-lang/rust/commit/9e1bb9841ee885be82fce24752a8e3de17ab485b"}], "stats": {"total": 161, "additions": 118, "deletions": 43}, "files": [{"sha": "17ab9a52bbac76a3aad158783ed6fcc13f7bd9b9", "filename": "src/interpreter.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     _ => panic!(\"attmpted to switch on non-sum type\"),\n                 };\n                 let discr_val = try!(self.memory.read_primval(adt_ptr, &discr_repr));\n-                TerminatorTarget::Block(targets[discr_val.to_int() as usize])\n+                TerminatorTarget::Block(targets[discr_val.to_usize()])\n             }\n \n             Call { ref func, ref args, ref destination, .. } => {\n@@ -298,7 +298,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         ty::AdtKind::Enum => match dest_repr {\n                             Repr::Sum { ref discr, ref variants, .. } => {\n                                 if discr.size() > 0 {\n-                                    let discr_val = PrimVal::from_int(variant_idx as i64, discr);\n+                                    let discr_val = PrimVal::from_usize(variant_idx, discr);\n                                     try!(self.memory.write_primval(dest, discr_val));\n                                 }\n                                 self.assign_to_product(\n@@ -442,12 +442,18 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         match ty.subst(self.tcx, self.current_substs()).sty {\n             ty::TyBool => Repr::Bool,\n \n-            ty::TyInt(IntTy::Is) => unimplemented!(),\n-            ty::TyInt(IntTy::I8) => Repr::I8,\n+            ty::TyInt(IntTy::Is)  => Repr::isize(),\n+            ty::TyInt(IntTy::I8)  => Repr::I8,\n             ty::TyInt(IntTy::I16) => Repr::I16,\n             ty::TyInt(IntTy::I32) => Repr::I32,\n             ty::TyInt(IntTy::I64) => Repr::I64,\n \n+            ty::TyUint(UintTy::Us)  => Repr::usize(),\n+            ty::TyUint(UintTy::U8)  => Repr::U8,\n+            ty::TyUint(UintTy::U16) => Repr::U16,\n+            ty::TyUint(UintTy::U32) => Repr::U32,\n+            ty::TyUint(UintTy::U64) => Repr::U64,\n+\n             ty::TyTuple(ref fields) => self.make_product_repr(fields.iter().cloned()),\n \n             ty::TyEnum(adt_def, substs) => {\n@@ -456,13 +462,13 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 let discr = if num_variants <= 1 {\n                     Repr::Product { size: 0, fields: vec![] }\n                 } else if num_variants <= 1 << 8 {\n-                    Repr::I8\n+                    Repr::U8\n                 } else if num_variants <= 1 << 16 {\n-                    Repr::I16\n+                    Repr::U16\n                 } else if num_variants <= 1 << 32 {\n-                    Repr::I32\n+                    Repr::U32\n                 } else {\n-                    Repr::I64\n+                    Repr::U64\n                 };\n \n                 let variants: Vec<Repr> = adt_def.variants.iter().map(|v| {"}, {"sha": "5ab8872e85e3800cb6a38218e312322a8c131edb", "filename": "src/memory.rs", "status": "modified", "additions": 79, "deletions": 16, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "patch": "@@ -1,6 +1,7 @@\n use byteorder::{self, ByteOrder};\n use std::collections::{BTreeMap, HashMap};\n use std::collections::Bound::{Included, Excluded};\n+use std::mem;\n use std::ptr;\n \n use error::{EvalError, EvalResult};\n@@ -38,10 +39,8 @@ pub struct FieldRepr {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n     Bool,\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n+    I8, I16, I32, I64,\n+    U8, U16, U32, U64,\n \n     /// The representation for product types including tuples, structs, and the contents of enum\n     /// variants.\n@@ -170,21 +169,29 @@ impl Memory {\n     pub fn read_primval(&self, ptr: Pointer, repr: &Repr) -> EvalResult<PrimVal> {\n         match *repr {\n             Repr::Bool => self.read_bool(ptr).map(PrimVal::Bool),\n-            Repr::I8 => self.read_i8(ptr).map(PrimVal::I8),\n-            Repr::I16 => self.read_i16(ptr).map(PrimVal::I16),\n-            Repr::I32 => self.read_i32(ptr).map(PrimVal::I32),\n-            Repr::I64 => self.read_i64(ptr).map(PrimVal::I64),\n+            Repr::I8   => self.read_i8(ptr).map(PrimVal::I8),\n+            Repr::I16  => self.read_i16(ptr).map(PrimVal::I16),\n+            Repr::I32  => self.read_i32(ptr).map(PrimVal::I32),\n+            Repr::I64  => self.read_i64(ptr).map(PrimVal::I64),\n+            Repr::U8   => self.read_u8(ptr).map(PrimVal::U8),\n+            Repr::U16  => self.read_u16(ptr).map(PrimVal::U16),\n+            Repr::U32  => self.read_u32(ptr).map(PrimVal::U32),\n+            Repr::U64  => self.read_u64(ptr).map(PrimVal::U64),\n             _ => panic!(\"primitive read of non-primitive: {:?}\", repr),\n         }\n     }\n \n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<()> {\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n-            PrimVal::I8(n) => self.write_i8(ptr, n),\n-            PrimVal::I16(n) => self.write_i16(ptr, n),\n-            PrimVal::I32(n) => self.write_i32(ptr, n),\n-            PrimVal::I64(n) => self.write_i64(ptr, n),\n+            PrimVal::I8(n)   => self.write_i8(ptr, n),\n+            PrimVal::I16(n)  => self.write_i16(ptr, n),\n+            PrimVal::I32(n)  => self.write_i32(ptr, n),\n+            PrimVal::I64(n)  => self.write_i64(ptr, n),\n+            PrimVal::U8(n)   => self.write_u8(ptr, n),\n+            PrimVal::U16(n)  => self.write_u16(ptr, n),\n+            PrimVal::U32(n)  => self.write_u32(ptr, n),\n+            PrimVal::U64(n)  => self.write_u64(ptr, n),\n         }\n     }\n \n@@ -240,6 +247,44 @@ impl Memory {\n         byteorder::NativeEndian::write_i64(bytes, n);\n         Ok(())\n     }\n+\n+    pub fn read_u8(&self, ptr: Pointer) -> EvalResult<u8> {\n+        self.get_bytes(ptr, 1).map(|b| b[0] as u8)\n+    }\n+\n+    pub fn write_u8(&mut self, ptr: Pointer, n: u8) -> EvalResult<()> {\n+        self.get_bytes_mut(ptr, 1).map(|b| b[0] = n as u8)\n+    }\n+\n+    pub fn read_u16(&self, ptr: Pointer) -> EvalResult<u16> {\n+        self.get_bytes(ptr, 2).map(byteorder::NativeEndian::read_u16)\n+    }\n+\n+    pub fn write_u16(&mut self, ptr: Pointer, n: u16) -> EvalResult<()> {\n+        let bytes = try!(self.get_bytes_mut(ptr, 2));\n+        byteorder::NativeEndian::write_u16(bytes, n);\n+        Ok(())\n+    }\n+\n+    pub fn read_u32(&self, ptr: Pointer) -> EvalResult<u32> {\n+        self.get_bytes(ptr, 4).map(byteorder::NativeEndian::read_u32)\n+    }\n+\n+    pub fn write_u32(&mut self, ptr: Pointer, n: u32) -> EvalResult<()> {\n+        let bytes = try!(self.get_bytes_mut(ptr, 4));\n+        byteorder::NativeEndian::write_u32(bytes, n);\n+        Ok(())\n+    }\n+\n+    pub fn read_u64(&self, ptr: Pointer) -> EvalResult<u64> {\n+        self.get_bytes(ptr, 8).map(byteorder::NativeEndian::read_u64)\n+    }\n+\n+    pub fn write_u64(&mut self, ptr: Pointer, n: u64) -> EvalResult<()> {\n+        let bytes = try!(self.get_bytes_mut(ptr, 8));\n+        byteorder::NativeEndian::write_u64(bytes, n);\n+        Ok(())\n+    }\n }\n \n impl Allocation {\n@@ -287,13 +332,31 @@ impl Pointer {\n }\n \n impl Repr {\n+    // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n+    pub fn isize() -> Self {\n+        match mem::size_of::<isize>() {\n+            4 => Repr::I32,\n+            8 => Repr::I64,\n+            _ => unimplemented!(),\n+        }\n+    }\n+\n+    // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n+    pub fn usize() -> Self {\n+        match mem::size_of::<isize>() {\n+            4 => Repr::U32,\n+            8 => Repr::U64,\n+            _ => unimplemented!(),\n+        }\n+    }\n+\n     pub fn size(&self) -> usize {\n         match *self {\n             Repr::Bool => 1,\n-            Repr::I8 => 1,\n-            Repr::I16 => 2,\n-            Repr::I32 => 4,\n-            Repr::I64 => 8,\n+            Repr::I8  | Repr::U8  => 1,\n+            Repr::I16 | Repr::U16 => 2,\n+            Repr::I32 | Repr::U32 => 4,\n+            Repr::I64 | Repr::U64 => 8,\n             Repr::Product { size, .. } => size,\n             Repr::Sum { ref discr, max_variant_size, .. } => discr.size() + max_variant_size,\n             Repr::Pointer { .. } => POINTER_SIZE,"}, {"sha": "88bd88b17461a5b95479eff80f1c17a83b77fbd8", "filename": "src/primval.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=9d1d96ce07dabcbef38d4a0ddaa42d90919cba8e", "patch": "@@ -5,31 +5,29 @@ use memory::Repr;\n #[derive(Clone, Copy, Debug, PartialEq)]\n pub enum PrimVal {\n     Bool(bool),\n-    I8(i8),\n-    I16(i16),\n-    I32(i32),\n-    I64(i64),\n+    I8(i8), I16(i16), I32(i32), I64(i64),\n+    U8(u8), U16(u16), U32(u32), U64(u64),\n }\n \n impl PrimVal {\n-    pub fn from_int(n: i64, repr: &Repr) -> Self {\n+    pub fn from_usize(n: usize, repr: &Repr) -> Self {\n         // TODO(tsion): Use checked casts.\n         match *repr {\n-            Repr::I8 => PrimVal::I8(n as i8),\n-            Repr::I16 => PrimVal::I16(n as i16),\n-            Repr::I32 => PrimVal::I32(n as i32),\n-            Repr::I64 => PrimVal::I64(n),\n-            _ => panic!(\"attempted to make integer primval from non-integer repr\"),\n+            Repr::U8  => PrimVal::U8(n as u8),\n+            Repr::U16 => PrimVal::U16(n as u16),\n+            Repr::U32 => PrimVal::U32(n as u32),\n+            Repr::U64 => PrimVal::U64(n as u64),\n+            _ => panic!(\"attempted to make usize primval from non-uint repr\"),\n         }\n     }\n \n-    pub fn to_int(self) -> i64 {\n+    pub fn to_usize(self) -> usize {\n         match self {\n-            PrimVal::I8(n) => n as i64,\n-            PrimVal::I16(n) => n as i64,\n-            PrimVal::I32(n) => n as i64,\n-            PrimVal::I64(n) => n,\n-            _ => panic!(\"attempted to make integer from non-integer primval\"),\n+            PrimVal::U8(n)  => n as usize,\n+            PrimVal::U16(n) => n as usize,\n+            PrimVal::U32(n) => n as usize,\n+            PrimVal::U64(n) => n as usize,\n+            _ => panic!(\"attempted to make usize from non-uint primval\"),\n         }\n     }\n }\n@@ -65,10 +63,14 @@ pub fn binary_op(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> PrimVal {\n \n     use self::PrimVal::*;\n     match (left, right) {\n-        (I8(l), I8(r)) => int_binops!(I8, l, r),\n+        (I8(l),  I8(r))  => int_binops!(I8, l, r),\n         (I16(l), I16(r)) => int_binops!(I16, l, r),\n         (I32(l), I32(r)) => int_binops!(I32, l, r),\n         (I64(l), I64(r)) => int_binops!(I64, l, r),\n+        (U8(l),  U8(r))  => int_binops!(U8, l, r),\n+        (U16(l), U16(r)) => int_binops!(U16, l, r),\n+        (U32(l), U32(r)) => int_binops!(U32, l, r),\n+        (U64(l), U64(r)) => int_binops!(U64, l, r),\n         _ => unimplemented!(),\n     }\n }\n@@ -78,14 +80,18 @@ pub fn unary_op(un_op: mir::UnOp, val: PrimVal) -> PrimVal {\n     use self::PrimVal::*;\n     match (un_op, val) {\n         (Not, Bool(b)) => Bool(!b),\n-        (Not, I8(n)) => I8(!n),\n-        (Neg, I8(n)) => I8(-n),\n+        (Not, I8(n))  => I8(!n),\n+        (Neg, I8(n))  => I8(-n),\n         (Not, I16(n)) => I16(!n),\n         (Neg, I16(n)) => I16(-n),\n         (Not, I32(n)) => I32(!n),\n         (Neg, I32(n)) => I32(-n),\n         (Not, I64(n)) => I64(!n),\n         (Neg, I64(n)) => I64(-n),\n+        (Not, U8(n))  => U8(!n),\n+        (Not, U16(n)) => U16(!n),\n+        (Not, U32(n)) => U32(!n),\n+        (Not, U64(n)) => U64(!n),\n         _ => unimplemented!(),\n     }\n }"}]}