{"sha": "c0bc35a3640cb22c690169bffa2a3cb1a84523a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYmMzNWEzNjQwY2IyMmM2OTAxNjliZmZhMmEzY2IxYTg0NTIzYTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-04T23:49:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-04T23:49:28Z"}, "message": "Rollup merge of #37255 - mbrubeck:doc-edit, r=steveklabnik\n\nFix some mistakes in HRTB docs\n\nThe example code for higher-ranked trait bounds on closures had an unnecessary `mut` which was confusing, and the text referred to an mutable reference which does not exist in the code (and isn't needed).  Removed the `mut`s and fixed the text to better describe the actual error for the failing example.\n\nThanks to csd_ on IRC for pointing out these problems!\n\nr? @steveklabnik", "tree": {"sha": "dba64438796b7f378522bb608c63780e45a05bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba64438796b7f378522bb608c63780e45a05bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bc35a3640cb22c690169bffa2a3cb1a84523a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bc35a3640cb22c690169bffa2a3cb1a84523a9", "html_url": "https://github.com/rust-lang/rust/commit/c0bc35a3640cb22c690169bffa2a3cb1a84523a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bc35a3640cb22c690169bffa2a3cb1a84523a9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "html_url": "https://github.com/rust-lang/rust/commit/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f"}, {"sha": "f89ba5da4a7f9a6446b91cb621ed000d28529d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89ba5da4a7f9a6446b91cb621ed000d28529d82", "html_url": "https://github.com/rust-lang/rust/commit/f89ba5da4a7f9a6446b91cb621ed000d28529d82"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "fa9f66d43baa1ae7105c76516d1b8729663730f6", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0bc35a3640cb22c690169bffa2a3cb1a84523a9/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0bc35a3640cb22c690169bffa2a3cb1a84523a9/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=c0bc35a3640cb22c690169bffa2a3cb1a84523a9", "patch": "@@ -327,7 +327,7 @@ that takes a reference like so:\n fn call_with_ref<F>(some_closure:F) -> i32\n     where F: Fn(&i32) -> i32 {\n \n-    let mut value = 0;\n+    let value = 0;\n     some_closure(&value)\n }\n ```\n@@ -340,14 +340,15 @@ fn call_with_ref<'a, F>(some_closure:F) -> i32\n     where F: Fn(&'a i32) -> i32 {\n ```\n \n-However this presents a problem in our case. When you specify the explicit\n-lifetime on a function it binds that lifetime to the *entire* scope of the function\n-instead of just the invocation scope of our closure. This means that the borrow checker\n-will see a mutable reference in the same lifetime as our immutable reference and fail\n-to compile.\n+However, this presents a problem in our case. When a function has an explicit\n+lifetime parameter, that lifetime must be at least as long as the *entire*\n+call to that function.  The borrow checker will complain that `value` doesn't\n+live long enough, because it is only in scope after its declaration inside the\n+function body.\n \n-In order to say that we only need the lifetime to be valid for the invocation scope\n-of the closure we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n+What we need is a closure that can borrow its argument only for its own\n+invocation scope, not for the outer function's scope.  In order to say that,\n+we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n \n ```ignore\n fn call_with_ref<F>(some_closure:F) -> i32\n@@ -362,7 +363,7 @@ expect.\n fn call_with_ref<F>(some_closure:F) -> i32\n     where F: for<'a> Fn(&'a i32) -> i32 {\n \n-    let mut value = 0;\n+    let value = 0;\n     some_closure(&value)\n }\n ```"}]}