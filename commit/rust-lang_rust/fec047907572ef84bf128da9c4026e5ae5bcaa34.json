{"sha": "fec047907572ef84bf128da9c4026e5ae5bcaa34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzA0NzkwNzU3MmVmODRiZjEyOGRhOWM0MDI2ZTVhZTViY2FhMzQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-22T02:11:41Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:58:14Z"}, "message": "Fully integrate token collection for additional AST structs\n\nThis commit contains miscellaneous changes that don't fit into any of\nthe other commits in this PR", "tree": {"sha": "0edd839e20777e62309a68d07350313db9586db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0edd839e20777e62309a68d07350313db9586db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec047907572ef84bf128da9c4026e5ae5bcaa34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9aoXcACgkQtAh+UQ6Y\nsWTCMA//T4JNv9G4ZJSJPXHEEI0vCK8BJKlxOqOiZ36Fqk0KFW+M5se8vJAVbIuG\n7UfvtXpB0pdWkcSKBHkX+Jh+zlLdfF2pN88QhCTi41sVkMMAa4CgRa4lrSR6NeX2\n2zFTDHD9i2g1Uk3Uh7wtdZZaAKpxjZN+hNtaUNCiT9tkg7NbzZN7X8Ovpy+Lurvf\nSFvdH7mig+mD392FFiMshL9pGn1hrexdhR3QLA9U2YCO66PRQ1eSB2TYFF44f8zr\nY3CAfjFJzhfJ9pILU0AH7LS4h4KJWvDTVlMOwIzvNinOhLAvcE7CLLtYbdZ1sL+v\nxOTYDKn6jxMRpu9LAzIQqHxbxC/e0gbTq9sB0SOkawILzLrsfoi/AEWUgH+6J8Oc\nWyUoMi6IBrmzaHu0DRqja0pi6yOdFj6gMgUT7RqnT1O31o+0iadPHX7ncQg/TdDy\nvwi8S5JbevK2qJhoprY3ukPO6gldpRYtDKUomtTU9jcGUse/xz1zWqXGW9MJQebt\nezNYnLHqlVGJ42r4XQ6Qd62+tUk8Jbrw5dSEm0cSK/BfL8zp+jzWmJbgaVk6pUc1\nXBXmUmuTcknISJswnMuMa6hgxxbXU70NIWsQQrWAj5lM4+gdgfH5nT5ivzrPq3fy\nfTrPPA9BBg5o8E+iBM+75ha04ce+b8iUXlfjpy4UjBeLP2W967c=\n=vA8f\n-----END PGP SIGNATURE-----", "payload": "tree 0edd839e20777e62309a68d07350313db9586db4\nparent 156ef2bee8f3941d4d7e3414652b803348ccd165\nauthor Aaron Hill <aa1ronham@gmail.com> 1598062301 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599775094 -0400\n\nFully integrate token collection for additional AST structs\n\nThis commit contains miscellaneous changes that don't fit into any of\nthe other commits in this PR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec047907572ef84bf128da9c4026e5ae5bcaa34", "html_url": "https://github.com/rust-lang/rust/commit/fec047907572ef84bf128da9c4026e5ae5bcaa34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec047907572ef84bf128da9c4026e5ae5bcaa34/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156ef2bee8f3941d4d7e3414652b803348ccd165", "url": "https://api.github.com/repos/rust-lang/rust/commits/156ef2bee8f3941d4d7e3414652b803348ccd165", "html_url": "https://github.com/rust-lang/rust/commit/156ef2bee8f3941d4d7e3414652b803348ccd165"}], "stats": {"total": 360, "additions": 338, "deletions": 22}, "files": [{"sha": "d5b3e87adc36a021c14b6b381c282848a042ac01", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -700,7 +700,7 @@ pub enum Nonterminal {\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Nonterminal, 40);\n+rustc_data_structures::static_assert_size!(Nonterminal, 48);\n \n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {"}, {"sha": "b1a73a0bf02778ee001e706fec743a92834d91b6", "filename": "compiler/rustc_ast_pretty/src/pprust/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -1,7 +1,6 @@\n use super::*;\n \n use rustc_ast as ast;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n use rustc_span::with_default_session_globals;\n \n@@ -45,7 +44,11 @@ fn test_variant_to_string() {\n \n         let var = ast::Variant {\n             ident,\n-            vis: respan(rustc_span::DUMMY_SP, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: rustc_span::DUMMY_SP,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),"}, {"sha": "caf55bec53ddde6463c1ccb040907db7e31cc69b", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -62,7 +62,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n \n fn make_x() -> P<Expr> {\n     let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n-    let path = Path { segments: vec![seg], span: DUMMY_SP };\n+    let path = Path { segments: vec![seg], span: DUMMY_SP, tokens: None };\n     expr(ExprKind::Path(None, path))\n }\n \n@@ -113,6 +113,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n+                    tokens: None,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },"}, {"sha": "3d7d476cf6c05e752942b440c9ef00f0c54d7db5", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "a4ce6061b4c9dca259eaca355ace7d110de387fd", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "de008a3708ae8b814b131926e1964e94e7e9439a", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -1,10 +1,20 @@\n // aux-build:test-macros.rs\n // check-pass\n // compile-flags: -Z span-debug\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n extern crate test_macros;\n-use test_macros::print_bang;\n+use test_macros::{print_bang, print_bang_consume};\n+\n+macro_rules! test_matchers {\n+    ($expr:expr, $block:block, $stmt:stmt, $ty:ty, $ident:ident, $lifetime:lifetime,\n+     $meta:meta, $path:path, $vis:vis, $tt:tt, $lit:literal) => {\n+        print_bang_consume!($expr, $block, $stmt, $ty, $ident,\n+                            $lifetime, $meta, $path, $vis, $tt, $lit)\n+    }\n+}\n \n macro_rules! use_expr {\n     ($expr:expr) => {\n@@ -24,10 +34,23 @@ impl Foo {\n     #[allow(dead_code)]\n     fn use_self(self) {\n         drop(use_expr!(self));\n+        test_matchers!(\n+            1 + 1,\n+            { \"a\" },\n+            let a = 1,\n+            String,\n+            my_name,\n+            'a,\n+            my_val = 30,\n+            std::option::Option,\n+            pub(in some::path),\n+            [ a b c ],\n+            -30\n+        );\n     }\n \n     fn with_pat(use_pat!((a, b)): (u32, u32)) {\n-        println!(\"Args: {} {}\", a, b);\n+        let _ = (a, b);\n     }\n }\n "}, {"sha": "652bf6b6b22f507b0db29c44c66c72b8cde8d1ff", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 296, "deletions": 7, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -5,10 +5,299 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"self\",\n-                span: $DIR/capture-macro-rules-invoke.rs:26:24: 26:28 (#CTXT),\n+                span: $DIR/capture-macro-rules-invoke.rs:36:24: 36:28 (#0),\n             },\n         ],\n-        span: $DIR/capture-macro-rules-invoke.rs:11:21: 11:26 (#CTXT),\n+        span: $DIR/capture-macro-rules-invoke.rs:21:21: 21:26 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): 1 + 1, { \"a\" }, let a = 1;, String, my_name, 'a, my_val = 30,\n+std::option::Option, pub(in some::path) , [a b c], -30\n+PRINT-BANG RE-COLLECTED (DISPLAY): 1 + 1, { \"a\" }, let a = 1, String, my_name, 'a, my_val = 30,\n+std :: option :: Option, pub(in some :: path), [a b c], - 30\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:13: 38:14 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:15: 38:16 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:17: 38:18 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:29: 14:34 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:34: 14:35 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"a\",\n+                        suffix: None,\n+                        span: $DIR/capture-macro-rules-invoke.rs:39:15: 39:18 (#0),\n+                    },\n+                ],\n+                span: $DIR/capture-macro-rules-invoke.rs:39:13: 39:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:36: 14:42 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:42: 14:43 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"let\",\n+                span: $DIR/capture-macro-rules-invoke.rs:40:13: 40:16 (#0),\n+            },\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:40:17: 40:18 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:40:19: 40:20 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:40:21: 40:22 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:44: 14:49 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:49: 14:50 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"String\",\n+                span: $DIR/capture-macro-rules-invoke.rs:41:13: 41:19 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:51: 14:54 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:54: 14:55 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_name\",\n+                span: $DIR/capture-macro-rules-invoke.rs:42:13: 42:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:56: 14:62 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:62: 14:63 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '\\'',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:43:13: 43:15 (#0),\n+            },\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:43:13: 43:15 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:29: 15:38 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:38: 15:39 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_val\",\n+                span: $DIR/capture-macro-rules-invoke.rs:44:13: 44:19 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:44:20: 44:21 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"30\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:44:22: 44:24 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:40: 15:45 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:45: 15:46 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"std\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:13: 45:16 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+            },\n+            Ident {\n+                ident: \"option\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:18: 45:24 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+            },\n+            Ident {\n+                ident: \"Option\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:26: 45:32 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:47: 15:52 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:52: 15:53 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"pub\",\n+                span: $DIR/capture-macro-rules-invoke.rs:46:13: 46:16 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"in\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:17: 46:19 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"some\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:20: 46:24 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Joint,\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Alone,\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"path\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:26: 46:30 (#0),\n+                    },\n+                ],\n+                span: $DIR/capture-macro-rules-invoke.rs:46:16: 46:31 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:54: 15:58 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:58: 15:59 (#7),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:15: 47:16 (#0),\n+            },\n+            Ident {\n+                ident: \"b\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:17: 47:18 (#0),\n+            },\n+            Ident {\n+                ident: \"c\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:19: 47:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:47:13: 47:22 (#0),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:63: 15:64 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '-',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:48:13: 48:14 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"30\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:48:14: 48:16 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:65: 15:69 (#7),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): (a, b)\n@@ -21,21 +310,21 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"a\",\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:27: 29:28 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:27: 52:28 (#0),\n                     },\n                     Punct {\n                         ch: ',',\n                         spacing: Alone,\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:28: 29:29 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:28: 52:29 (#0),\n                     },\n                     Ident {\n                         ident: \"b\",\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:30: 29:31 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:30: 52:31 (#0),\n                     },\n                 ],\n-                span: $DIR/capture-macro-rules-invoke.rs:29:26: 29:32 (#CTXT),\n+                span: $DIR/capture-macro-rules-invoke.rs:52:26: 52:32 (#0),\n             },\n         ],\n-        span: $DIR/capture-macro-rules-invoke.rs:17:21: 17:25 (#CTXT),\n+        span: $DIR/capture-macro-rules-invoke.rs:27:21: 27:25 (#11),\n     },\n ]"}, {"sha": "67a463538568e9adf619ce3add880796f21c81c4", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -285,7 +285,7 @@ impl EarlyLintPass for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.node.is_pub() {\n+                    if item.vis.kind.is_pub() {\n                         let matching = partial_match(mod_camel, &item_camel);\n                         let rmatching = partial_rmatch(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n@@ -316,7 +316,7 @@ impl EarlyLintPass for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let lint = match item.vis.node {\n+            let lint = match item.vis.kind {\n                 VisibilityKind::Public => PUB_ENUM_VARIANT_NAMES,\n                 _ => ENUM_VARIANT_NAMES,\n             };"}, {"sha": "9c623821fdddc3cee97deec82fc03398d43d299e", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -122,7 +122,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n \n fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data: &VariantData) {\n     fn is_private(field: &StructField) -> bool {\n-        matches!(field.vis.node, VisibilityKind::Inherited)\n+        matches!(field.vis.kind, VisibilityKind::Inherited)\n     }\n \n     fn is_non_exhaustive_marker(field: &StructField) -> bool {\n@@ -141,7 +141,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n \n     let fields = data.fields();\n     let private_fields = fields.iter().filter(|f| is_private(f)).count();\n-    let public_fields = fields.iter().filter(|f| f.vis.node.is_pub()).count();\n+    let public_fields = fields.iter().filter(|f| f.vis.kind.is_pub()).count();\n \n     if_chain! {\n         if private_fields == 1 && public_fields >= 1 && public_fields == fields.len() - 1;"}, {"sha": "35b38eca14d1be6293e729d4ce3c370d0fef0a8a", "filename": "src/tools/clippy/clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -41,7 +41,7 @@ impl EarlyLintPass for SingleComponentPathImports {\n         if_chain! {\n             if !in_macro(item.span);\n             if cx.sess.opts.edition == Edition::Edition2018;\n-            if !item.vis.node.is_pub();\n+            if !item.vis.kind.is_pub();\n             if let ItemKind::Use(use_tree) = &item.kind;\n             if let segments = &use_tree.prefix.segments;\n             if segments.len() == 1;"}, {"sha": "4f0474c62cb6f23244b4e53dfaeefa24c314acdf", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec047907572ef84bf128da9c4026e5ae5bcaa34/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=fec047907572ef84bf128da9c4026e5ae5bcaa34", "patch": "@@ -392,7 +392,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n \n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n-    match (&l.node, &r.node) {\n+    match (&l.kind, &r.kind) {\n         (Public, Public) | (Inherited, Inherited) | (Crate(_), Crate(_)) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,"}]}