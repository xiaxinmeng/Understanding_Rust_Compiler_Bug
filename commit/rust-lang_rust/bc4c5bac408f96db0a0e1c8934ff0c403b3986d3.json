{"sha": "bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGM1YmFjNDA4Zjk2ZGIwYTBlMWM4OTM0ZmYwYzQwM2IzOTg2ZDM=", "commit": {"author": {"name": "Andrew Sun", "email": "me@andrewsun.com", "date": "2021-01-08T04:25:19Z"}, "committer": {"name": "Andrew Sun", "email": "me@andrewsun.com", "date": "2021-01-08T04:25:19Z"}, "message": "Use LLVMGetHostCPUFeatures instead of stdsimd", "tree": {"sha": "ac9c7c9aa95b6801ba9c00e564eb133871f440aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac9c7c9aa95b6801ba9c00e564eb133871f440aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "html_url": "https://github.com/rust-lang/rust/commit/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/comments", "author": {"login": "as-com", "id": 3819625, "node_id": "MDQ6VXNlcjM4MTk2MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3819625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/as-com", "html_url": "https://github.com/as-com", "followers_url": "https://api.github.com/users/as-com/followers", "following_url": "https://api.github.com/users/as-com/following{/other_user}", "gists_url": "https://api.github.com/users/as-com/gists{/gist_id}", "starred_url": "https://api.github.com/users/as-com/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/as-com/subscriptions", "organizations_url": "https://api.github.com/users/as-com/orgs", "repos_url": "https://api.github.com/users/as-com/repos", "events_url": "https://api.github.com/users/as-com/events{/privacy}", "received_events_url": "https://api.github.com/users/as-com/received_events", "type": "User", "site_admin": false}, "committer": {"login": "as-com", "id": 3819625, "node_id": "MDQ6VXNlcjM4MTk2MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3819625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/as-com", "html_url": "https://github.com/as-com", "followers_url": "https://api.github.com/users/as-com/followers", "following_url": "https://api.github.com/users/as-com/following{/other_user}", "gists_url": "https://api.github.com/users/as-com/gists{/gist_id}", "starred_url": "https://api.github.com/users/as-com/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/as-com/subscriptions", "organizations_url": "https://api.github.com/users/as-com/orgs", "repos_url": "https://api.github.com/users/as-com/repos", "events_url": "https://api.github.com/users/as-com/events{/privacy}", "received_events_url": "https://api.github.com/users/as-com/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf801590503447cc5b1ddd520b39d2957d90368b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf801590503447cc5b1ddd520b39d2957d90368b", "html_url": "https://github.com/rust-lang/rust/commit/bf801590503447cc5b1ddd520b39d2957d90368b"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "92ac770aca554ed338b9c4b5056933884da0e8b1", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "patch": "@@ -12,7 +12,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![feature(stdsimd)]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}, {"sha": "e359d9f8c9c7754305cb06278277a329efd8e2af", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "patch": "@@ -1708,6 +1708,10 @@ extern \"C\" {\n         PM: &PassManager<'_>,\n     );\n \n+    pub fn LLVMGetHostCPUFeatures() -> *mut c_char;\n+\n+    pub fn LLVMDisposeMessage(message: *mut c_char);\n+\n     // Stuff that's in llvm-wrapper/ because it's not upstream yet.\n \n     /// Opens an object file."}, {"sha": "e0771313f764b0612c6a427f77b6c1ed8fe702a7", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c5bac408f96db0a0e1c8934ff0c403b3986d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=bc4c5bac408f96db0a0e1c8934ff0c403b3986d3", "patch": "@@ -8,9 +8,8 @@ use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n-use std::ffi::CString;\n+use std::ffi::{CStr, CString};\n \n-use std::detect;\n use std::slice;\n use std::str;\n use std::sync::atomic::{AtomicBool, Ordering};\n@@ -223,19 +222,20 @@ pub fn target_cpu(sess: &Session) -> &str {\n }\n \n pub fn handle_native_features(sess: &Session) -> Vec<String> {\n-    const LLVM_NOT_RECOGNIZED: &[&str] = &[\"tsc\"];\n-\n     match sess.opts.cg.target_cpu {\n         Some(ref s) => {\n             if s != \"native\" {\n                 return vec![];\n             }\n \n-            detect::features()\n-                .map(|(feature, support)| (to_llvm_feature(sess, feature), support))\n-                .filter(|(feature, _)| !LLVM_NOT_RECOGNIZED.contains(feature))\n-                .map(|(feature, support)| (if support { \"+\" } else { \"-\" }).to_owned() + feature)\n-                .collect()\n+            let ptr = unsafe { llvm::LLVMGetHostCPUFeatures() };\n+            let str = unsafe { CStr::from_ptr(ptr).to_string_lossy() };\n+\n+            let features = str.split(\",\").map(|s| s.to_owned()).collect();\n+\n+            unsafe { llvm::LLVMDisposeMessage(ptr) };\n+\n+            features\n         }\n         None => vec![],\n     }"}]}