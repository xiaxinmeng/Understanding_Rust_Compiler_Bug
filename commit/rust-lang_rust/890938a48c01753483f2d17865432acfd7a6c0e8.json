{"sha": "890938a48c01753483f2d17865432acfd7a6c0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MDkzOGE0OGMwMTc1MzQ4M2YyZDE3ODY1NDMyYWNmZDdhNmMwZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-28T15:14:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-28T15:14:05Z"}, "message": "Make it impossible to forget to add a semantic token type / modifier", "tree": {"sha": "23455b2446d4f2f62101ec16d44078a51366f5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23455b2446d4f2f62101ec16d44078a51366f5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890938a48c01753483f2d17865432acfd7a6c0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890938a48c01753483f2d17865432acfd7a6c0e8", "html_url": "https://github.com/rust-lang/rust/commit/890938a48c01753483f2d17865432acfd7a6c0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890938a48c01753483f2d17865432acfd7a6c0e8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c7edb9bc3f2860686383dc1498c988a56859e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c7edb9bc3f2860686383dc1498c988a56859e8", "html_url": "https://github.com/rust-lang/rust/commit/c3c7edb9bc3f2860686383dc1498c988a56859e8"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "2dc5cb1196fc41e6f374185d731ac043c300ed3a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 61, "deletions": 56, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/890938a48c01753483f2d17865432acfd7a6c0e8/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890938a48c01753483f2d17865432acfd7a6c0e8/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=890938a48c01753483f2d17865432acfd7a6c0e8", "patch": "@@ -4,64 +4,69 @@ use std::ops;\n \n use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType, SemanticTokens};\n \n-pub(crate) const ATTRIBUTE: SemanticTokenType = SemanticTokenType::new(\"attribute\");\n-pub(crate) const BUILTIN_TYPE: SemanticTokenType = SemanticTokenType::new(\"builtinType\");\n-pub(crate) const ENUM_MEMBER: SemanticTokenType = SemanticTokenType::new(\"enumMember\");\n-pub(crate) const LIFETIME: SemanticTokenType = SemanticTokenType::new(\"lifetime\");\n-pub(crate) const TYPE_ALIAS: SemanticTokenType = SemanticTokenType::new(\"typeAlias\");\n-pub(crate) const UNION: SemanticTokenType = SemanticTokenType::new(\"union\");\n-pub(crate) const UNRESOLVED_REFERENCE: SemanticTokenType =\n-    SemanticTokenType::new(\"unresolvedReference\");\n-pub(crate) const FORMAT_SPECIFIER: SemanticTokenType = SemanticTokenType::new(\"formatSpecifier\");\n-\n-pub(crate) const CONSTANT: SemanticTokenModifier = SemanticTokenModifier::new(\"constant\");\n-pub(crate) const CONTROL_FLOW: SemanticTokenModifier = SemanticTokenModifier::new(\"controlFlow\");\n-pub(crate) const MUTABLE: SemanticTokenModifier = SemanticTokenModifier::new(\"mutable\");\n-pub(crate) const UNSAFE: SemanticTokenModifier = SemanticTokenModifier::new(\"unsafe\");\n-\n-pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n-    SemanticTokenType::COMMENT,\n-    SemanticTokenType::KEYWORD,\n-    SemanticTokenType::STRING,\n-    SemanticTokenType::NUMBER,\n-    SemanticTokenType::REGEXP,\n-    SemanticTokenType::OPERATOR,\n-    SemanticTokenType::NAMESPACE,\n-    SemanticTokenType::TYPE,\n-    SemanticTokenType::STRUCT,\n-    SemanticTokenType::CLASS,\n-    SemanticTokenType::INTERFACE,\n-    SemanticTokenType::ENUM,\n-    SemanticTokenType::TYPE_PARAMETER,\n-    SemanticTokenType::FUNCTION,\n-    SemanticTokenType::MEMBER,\n-    SemanticTokenType::PROPERTY,\n-    SemanticTokenType::MACRO,\n-    SemanticTokenType::VARIABLE,\n-    SemanticTokenType::PARAMETER,\n-    SemanticTokenType::LABEL,\n-    ATTRIBUTE,\n-    BUILTIN_TYPE,\n-    ENUM_MEMBER,\n-    LIFETIME,\n-    TYPE_ALIAS,\n-    UNION,\n-    UNRESOLVED_REFERENCE,\n-    FORMAT_SPECIFIER,\n+macro_rules! define_semantic_token_types {\n+    ($(($ident:ident, $string:literal)),*$(,)?) => {\n+        $(pub(crate) const $ident: SemanticTokenType = SemanticTokenType::new($string);)*\n+\n+        pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n+            SemanticTokenType::COMMENT,\n+            SemanticTokenType::KEYWORD,\n+            SemanticTokenType::STRING,\n+            SemanticTokenType::NUMBER,\n+            SemanticTokenType::REGEXP,\n+            SemanticTokenType::OPERATOR,\n+            SemanticTokenType::NAMESPACE,\n+            SemanticTokenType::TYPE,\n+            SemanticTokenType::STRUCT,\n+            SemanticTokenType::CLASS,\n+            SemanticTokenType::INTERFACE,\n+            SemanticTokenType::ENUM,\n+            SemanticTokenType::TYPE_PARAMETER,\n+            SemanticTokenType::FUNCTION,\n+            SemanticTokenType::MEMBER,\n+            SemanticTokenType::PROPERTY,\n+            SemanticTokenType::MACRO,\n+            SemanticTokenType::VARIABLE,\n+            SemanticTokenType::PARAMETER,\n+            SemanticTokenType::LABEL,\n+            $($ident),*\n+        ];\n+    };\n+}\n+\n+define_semantic_token_types![\n+    (ATTRIBUTE, \"attribute\"),\n+    (BUILTIN_TYPE, \"builtinType\"),\n+    (ENUM_MEMBER, \"enumMember\"),\n+    (LIFETIME, \"lifetime\"),\n+    (TYPE_ALIAS, \"typeAlias\"),\n+    (UNION, \"union\"),\n+    (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n+    (FORMAT_SPECIFIER, \"formatSpecifier\"),\n ];\n \n-pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n-    SemanticTokenModifier::DOCUMENTATION,\n-    SemanticTokenModifier::DECLARATION,\n-    SemanticTokenModifier::DEFINITION,\n-    SemanticTokenModifier::STATIC,\n-    SemanticTokenModifier::ABSTRACT,\n-    SemanticTokenModifier::DEPRECATED,\n-    SemanticTokenModifier::READONLY,\n-    CONSTANT,\n-    MUTABLE,\n-    UNSAFE,\n-    CONTROL_FLOW,\n+macro_rules! define_semantic_token_modifiers {\n+    ($(($ident:ident, $string:literal)),*$(,)?) => {\n+        $(pub(crate) const $ident: SemanticTokenModifier = SemanticTokenModifier::new($string);)*\n+\n+        pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n+            SemanticTokenModifier::DOCUMENTATION,\n+            SemanticTokenModifier::DECLARATION,\n+            SemanticTokenModifier::DEFINITION,\n+            SemanticTokenModifier::STATIC,\n+            SemanticTokenModifier::ABSTRACT,\n+            SemanticTokenModifier::DEPRECATED,\n+            SemanticTokenModifier::READONLY,\n+            $($ident),*\n+        ];\n+    };\n+}\n+\n+define_semantic_token_modifiers![\n+    (CONSTANT, \"constant\"),\n+    (CONTROL_FLOW, \"controlFlow\"),\n+    (MUTABLE, \"mutable\"),\n+    (UNSAFE, \"unsafe\"),\n ];\n \n #[derive(Default)]"}]}