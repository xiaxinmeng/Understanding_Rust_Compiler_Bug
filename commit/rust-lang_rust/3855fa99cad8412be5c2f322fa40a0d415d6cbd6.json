{"sha": "3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NTVmYTk5Y2FkODQxMmJlNWMyZjMyMmZhNDBhMGQ0MTVkNmNiZDY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T16:35:27Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T16:35:27Z"}, "message": "trans: Keep transmutes from fn item types working, but lint them.", "tree": {"sha": "5274569762dd15209e0f797588d044cfc4e1f36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5274569762dd15209e0f797588d044cfc4e1f36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "html_url": "https://github.com/rust-lang/rust/commit/3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb926dd4b73fcfd66fd3161870cee5122ca57b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb926dd4b73fcfd66fd3161870cee5122ca57b4f", "html_url": "https://github.com/rust-lang/rust/commit/eb926dd4b73fcfd66fd3161870cee5122ca57b4f"}], "stats": {"total": 154, "additions": 140, "deletions": 14}, "files": [{"sha": "97a550a4076fab8b3b743545ba3170eb6baf58f5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -148,6 +148,12 @@ declare_lint! {\n     \"uses of #[derive] with raw pointers are rarely correct\"\n }\n \n+declare_lint! {\n+    pub TRANSMUTE_FROM_FN_ITEM_TYPES,\n+    Warn,\n+    \"transmute from function item type to pointer-sized type erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -177,7 +183,8 @@ impl LintPass for HardwiredLints {\n             INVALID_TYPE_PARAM_DEFAULT,\n             MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR,\n-            RAW_POINTER_DERIVE\n+            RAW_POINTER_DERIVE,\n+            TRANSMUTE_FROM_FN_ITEM_TYPES\n         )\n     }\n }"}, {"sha": "c11e9dc822eb39790cbd5bc2c57698ae372653c3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -1287,6 +1287,9 @@ pub fn check_crate(tcx: &TyCtxt, access_levels: &AccessLevels) {\n     }\n \n     *tcx.node_lint_levels.borrow_mut() = cx.node_levels.into_inner();\n+\n+    // Put the lint store back in the session.\n+    mem::replace(&mut *tcx.sess.lint_store.borrow_mut(), cx.lints);\n }\n \n pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {"}, {"sha": "e47f67dad8fcf6d1efb88b3574e50467057cfec4", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -171,6 +171,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/\\\n                         master/text/0218-empty-struct-with-braces.md>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(TRANSMUTE_FROM_FN_ITEM_TYPES),\n+            reference: \"issue #19925 <https://github.com/rust-lang/rust/issues/19925>\",\n+        },\n         ]);\n \n     // We have one lint pass defined specially"}, {"sha": "96c1d6a4d691a4ba74a0dea7cb2e3fb15268498f", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -22,7 +22,7 @@ use trans::adt;\n use trans::attributes;\n use trans::base::*;\n use trans::build::*;\n-use trans::callee;\n+use trans::callee::{self, Callee};\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n use trans::common::*;\n@@ -45,6 +45,7 @@ use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;\n \n+use rustc::lint;\n use rustc::session::Session;\n use syntax::codemap::Span;\n \n@@ -125,29 +126,41 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n                                                transmute_restriction.substituted_to);\n         let from_type_size = machine::llbitsize_of_real(ccx, llfromtype);\n         let to_type_size = machine::llbitsize_of_real(ccx, lltotype);\n+\n+        if let ty::TyFnDef(..) = transmute_restriction.substituted_from.sty {\n+            if to_type_size == machine::llbitsize_of_real(ccx, ccx.int_type()) {\n+                // FIXME #19925 Remove this warning after a release cycle.\n+                lint::raw_emit_lint(&ccx.tcx().sess,\n+                                    &ccx.tcx().sess.lint_store.borrow(),\n+                                    lint::builtin::TRANSMUTE_FROM_FN_ITEM_TYPES,\n+                                    (lint::Warn, lint::LintSource::Default),\n+                                    Some(transmute_restriction.span),\n+                                    &format!(\"`{}` is now zero-sized and has to be cast \\\n+                                              to a pointer before transmuting to `{}`\",\n+                                             transmute_restriction.substituted_from,\n+                                             transmute_restriction.substituted_to));\n+                continue;\n+            }\n+        }\n         if from_type_size != to_type_size {\n             last_failing_id = Some(transmute_restriction.id);\n \n             if transmute_restriction.original_from != transmute_restriction.substituted_from {\n                 span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called with differently sized types: \\\n-                              {} (could be {} bit{}) to {} (could be {} bit{})\",\n+                              {} (could be {} bits) to {} (could be {} bits)\",\n                              transmute_restriction.original_from,\n-                             from_type_size as usize,\n-                             if from_type_size == 1 {\"\"} else {\"s\"},\n+                             from_type_size,\n                              transmute_restriction.original_to,\n-                             to_type_size as usize,\n-                             if to_type_size == 1 {\"\"} else {\"s\"}));\n+                             to_type_size));\n             } else {\n                 span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called with differently sized types: \\\n-                              {} ({} bit{}) to {} ({} bit{})\",\n+                              {} ({} bits) to {} ({} bits)\",\n                              transmute_restriction.original_from,\n-                             from_type_size as usize,\n-                             if from_type_size == 1 {\"\"} else {\"s\"},\n+                             from_type_size,\n                              transmute_restriction.original_to,\n-                             to_type_size as usize,\n-                             if to_type_size == 1 {\"\"} else {\"s\"}));\n+                             to_type_size));\n             }\n         }\n     }\n@@ -179,6 +192,8 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let foreign_item = tcx.map.expect_foreign_item(node);\n     let name = foreign_item.name.as_str();\n \n+    let call_debug_location = DebugLoc::At(call_info.id, call_info.span);\n+\n     // For `transmute` we can just trans the input expr directly into dest\n     if name == \"transmute\" {\n         let llret_ty = type_of::type_of(ccx, ret_ty.unwrap());\n@@ -194,6 +209,27 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 let in_type_size = machine::llbitsize_of_real(ccx, llintype);\n                 let out_type_size = machine::llbitsize_of_real(ccx, llouttype);\n \n+                if let ty::TyFnDef(def_id, substs, _) = in_type.sty {\n+                    if out_type_size != 0 {\n+                        // FIXME #19925 Remove this hack after a release cycle.\n+                        let _ = unpack_datum!(bcx, expr::trans(bcx, &arg_exprs[0]));\n+                        let llfn = Callee::def(ccx, def_id, substs, in_type).reify(ccx).val;\n+                        let llfnty = val_ty(llfn);\n+                        let llresult = match dest {\n+                            expr::SaveIn(d) => d,\n+                            expr::Ignore => alloc_ty(bcx, out_type, \"ret\")\n+                        };\n+                        Store(bcx, llfn, PointerCast(bcx, llresult, llfnty.ptr_to()));\n+                        if dest == expr::Ignore {\n+                            bcx = glue::drop_ty(bcx, llresult, out_type,\n+                                                call_debug_location);\n+                        }\n+                        fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n+                        fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n+                        return Result::new(bcx, llresult);\n+                    }\n+                }\n+\n                 // This should be caught by the intrinsicck pass\n                 assert_eq!(in_type_size, out_type_size);\n \n@@ -311,8 +347,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n     }\n \n-    let call_debug_location = DebugLoc::At(call_info.id, call_info.span);\n-\n     // For `try` we need some custom control flow\n     if &name[..] == \"try\" {\n         if let callee::ArgExprs(ref exprs) = args {"}, {"sha": "3eae76f9492a224e0b46e7bd03ee80e3f8277972", "filename": "src/test/compile-fail/transmute-from-fn-item-types-lint.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Ftest%2Fcompile-fail%2Ftransmute-from-fn-item-types-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Ftest%2Fcompile-fail%2Ftransmute-from-fn-item-types-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-from-fn-item-types-lint.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+unsafe fn foo() -> (isize, *const (), Option<fn()>) {\n+    let i = mem::transmute(bar);\n+    //~^ WARN is now zero-sized and has to be cast to a pointer before transmuting\n+    //~^^ WARN was previously accepted\n+\n+    let p = mem::transmute(foo);\n+    //~^ WARN is now zero-sized and has to be cast to a pointer before transmuting\n+    //~^^ WARN was previously accepted\n+\n+    let of = mem::transmute(main);\n+    //~^ WARN is now zero-sized and has to be cast to a pointer before transmuting\n+    //~^^ WARN was previously accepted\n+\n+    (i, p, of)\n+}\n+\n+unsafe fn bar() {\n+    mem::transmute::<_, *mut ()>(foo);\n+    //~^ WARN is now zero-sized and has to be cast to a pointer before transmuting\n+    //~^^ WARN was previously accepted\n+\n+    mem::transmute::<_, fn()>(bar);\n+    //~^ WARN is now zero-sized and has to be cast to a pointer before transmuting\n+    //~^^ WARN was previously accepted\n+\n+    // No error if a coercion would otherwise occur.\n+    mem::transmute::<fn(), usize>(main);\n+\n+    // Error, still, if the resulting type is not pointer-sized.\n+    mem::transmute::<_, u8>(main);\n+    //~^ ERROR transmute called with differently sized types\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo();\n+        bar();\n+    }\n+}"}, {"sha": "574a90e2ad6972fd11de8f85c0d6d8c7c50ef0c4", "filename": "src/test/run-pass/transmute-from-fn-item-types.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Ftest%2Frun-pass%2Ftransmute-from-fn-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3855fa99cad8412be5c2f322fa40a0d415d6cbd6/src%2Ftest%2Frun-pass%2Ftransmute-from-fn-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-from-fn-item-types.rs?ref=3855fa99cad8412be5c2f322fa40a0d415d6cbd6", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(transmute_from_fn_item_types)]\n+\n+use std::mem;\n+\n+fn main() {\n+    unsafe {\n+        let u = mem::transmute(main);\n+        let p = mem::transmute(main);\n+        let f = mem::transmute(main);\n+        let tuple: (usize, *mut (), fn()) = (u, p, f);\n+        assert_eq!(mem::transmute::<_, [usize; 3]>(tuple), [main as usize; 3]);\n+\n+        mem::transmute::<_, usize>(main);\n+        mem::transmute::<_, *mut ()>(main);\n+        mem::transmute::<_, fn()>(main);\n+    }\n+}"}]}