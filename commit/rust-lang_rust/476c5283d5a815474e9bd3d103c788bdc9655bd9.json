{"sha": "476c5283d5a815474e9bd3d103c788bdc9655bd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmM1MjgzZDVhODE1NDc0ZTliZDNkMTAzYzc4OGJkYzk2NTViZDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-27T08:24:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:33Z"}, "message": "Do not store attrs in FnKind.", "tree": {"sha": "b11c9a91999d97ea422f5469c1961170fb58f069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11c9a91999d97ea422f5469c1961170fb58f069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476c5283d5a815474e9bd3d103c788bdc9655bd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476c5283d5a815474e9bd3d103c788bdc9655bd9", "html_url": "https://github.com/rust-lang/rust/commit/476c5283d5a815474e9bd3d103c788bdc9655bd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476c5283d5a815474e9bd3d103c788bdc9655bd9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5e0f512fec8f4b1fb0644051b249d310f611eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5e0f512fec8f4b1fb0644051b249d310f611eb", "html_url": "https://github.com/rust-lang/rust/commit/8d5e0f512fec8f4b1fb0644051b249d310f611eb"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "658d445dfec54d0ad2e2a35bff964e571144bc84", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -76,8 +76,8 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _, _) | FnKind::Method(ident, _, _, _) => ident.span,\n-                FnKind::Closure(_) => {\n+                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {\n                         let low_offset = snip.find('|')?;"}, {"sha": "ae0b8d06dc2fbbfd862b64ef394ddd34164d3e9c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -251,9 +251,9 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         let unsafety = match kind {\n-            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _, _) => unsafety,\n-            intravisit::FnKind::Method(_, sig, _, _) => sig.header.unsafety,\n-            intravisit::FnKind::Closure(_) => return,\n+            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n+            intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+            intravisit::FnKind::Closure => return,\n         };\n \n         // don't warn for implementations, it's not their fault\n@@ -267,9 +267,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                         ..\n                     },\n                     _,\n-                    _,\n                 )\n-                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _, _) => {\n+                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => {\n                     self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n                 },\n                 _ => {},"}, {"sha": "9e1a8864a3ebe0ff6deff9c2cbec4c1bf19a7499", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         _: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::Closure(_) = kind {\n+        if let FnKind::Closure = kind {\n             return;\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);"}, {"sha": "35b4c3d5b03abf1d65733962fbdb65e74a503689", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -278,7 +278,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         span: Span,\n         _: HirId,\n     ) {\n-        if let FnKind::Closure(_) = k {\n+        if let FnKind::Closure = k {\n             // Does not apply to closures\n             return;\n         }"}, {"sha": "b0998a80128cef12d73d13f2136b7c64e5672fd0", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "cac4b2075114ac812c0376555b8cd0cad770c1ee", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -80,13 +80,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "207423a18614927f30960ba847b944170fbca91e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -43,9 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure(_))\n-            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type)\n-        {\n+        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "ff700aa51460789cc66d0aa7779ce65a24ec0cb2", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -224,10 +224,11 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 for a in attrs {\n                     if let Some(meta_items) = a.meta_item_list() {\n                         if a.has_name(sym::proc_macro_derive)\n@@ -239,7 +240,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "28d7011207f8d85b0a3506e26d85885b25641922", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: HirId,\n     ) {\n         match kind {\n-            FnKind::Closure(_) => {\n+            FnKind::Closure => {\n                 // when returning without value in closure, replace this `return`\n                 // with an empty block to prevent invalid suggestion (see #6501)\n                 let replacement = if let ExprKind::Ret(None) = &body.value.kind {"}, {"sha": "8e076397c119a9a25f94f16734d979f6a593790d", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c5283d5a815474e9bd3d103c788bdc9655bd9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=476c5283d5a815474e9bd3d103c788bdc9655bd9", "patch": "@@ -66,12 +66,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n-            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+            FnKind::ItemFn(.., visibility) | FnKind::Method(.., Some(visibility)) => {\n                 if visibility.node.is_pub() {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n             _ => (),\n         }\n "}]}