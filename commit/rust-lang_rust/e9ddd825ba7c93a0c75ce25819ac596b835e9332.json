{"sha": "e9ddd825ba7c93a0c75ce25819ac596b835e9332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGRkODI1YmE3YzkzYTBjNzVjZTI1ODE5YWM1OTZiODM1ZTkzMzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:59:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:27Z"}, "message": "rustc_typeck: unbox closures used in let bindings", "tree": {"sha": "f9f228691fa8dec425040673bc289c9db4d3e0d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f228691fa8dec425040673bc289c9db4d3e0d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ddd825ba7c93a0c75ce25819ac596b835e9332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddd825ba7c93a0c75ce25819ac596b835e9332", "html_url": "https://github.com/rust-lang/rust/commit/e9ddd825ba7c93a0c75ce25819ac596b835e9332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddd825ba7c93a0c75ce25819ac596b835e9332/comments", "author": null, "committer": null, "parents": [{"sha": "e47035b9a58e4dd0cda075928bb93df0b7b25372", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47035b9a58e4dd0cda075928bb93df0b7b25372", "html_url": "https://github.com/rust-lang/rust/commit/e47035b9a58e4dd0cda075928bb93df0b7b25372"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "15e942006f0189855085909e9ebc558f852b9e4c", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddd825ba7c93a0c75ce25819ac596b835e9332/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddd825ba7c93a0c75ce25819ac596b835e9332/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=e9ddd825ba7c93a0c75ce25819ac596b835e9332", "patch": "@@ -223,7 +223,7 @@ fn check_object_safety_inner<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n \n         // reason (a) above\n-        let check_for_self_ty = |ty| {\n+        let check_for_self_ty = |&: ty| {\n             if contains_illegal_self_type_reference(tcx, object_trait.def_id(), ty) {\n                 Some(format!(\n                     \"cannot call a method (`{}`) whose type contains \\"}, {"sha": "cd8bc94b111e7fddd97d16befb8f9f0173df148f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddd825ba7c93a0c75ce25819ac596b835e9332/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddd825ba7c93a0c75ce25819ac596b835e9332/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=e9ddd825ba7c93a0c75ce25819ac596b835e9332", "patch": "@@ -593,7 +593,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         // parameter (by inspecting parent of its binding declaration\n         // to see if it is introduced by a type or by a fn/impl).\n \n-        let check_result = |this:&ConstraintContext| -> bool {\n+        let check_result = |&: this:&ConstraintContext| -> bool {\n             let tcx = this.terms_cx.tcx;\n             let decl_id = this.find_binding_for_lifetime(param_id);\n             // Currently only called on lifetimes; double-checking that."}]}