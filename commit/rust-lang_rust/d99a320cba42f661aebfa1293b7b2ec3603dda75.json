{"sha": "d99a320cba42f661aebfa1293b7b2ec3603dda75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OWEzMjBjYmE0MmY2NjFhZWJmYTEyOTNiN2IyZWMzNjAzZGRhNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-18T19:58:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-18T19:58:14Z"}, "message": "Auto merge of #56863 - arielb1:supertrait-self-4, r=nikomatsakis\n\nfix trait objects with a Self-containing projection values\n\nFixes #56288.\n\nThis follows ALT2 in the issue.\n\nbeta-nominating since this is a regression.\n\nr? @nikomatsakis", "tree": {"sha": "3f875e706787e62412b818beb93a184406fa1194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f875e706787e62412b818beb93a184406fa1194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d99a320cba42f661aebfa1293b7b2ec3603dda75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d99a320cba42f661aebfa1293b7b2ec3603dda75", "html_url": "https://github.com/rust-lang/rust/commit/d99a320cba42f661aebfa1293b7b2ec3603dda75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d99a320cba42f661aebfa1293b7b2ec3603dda75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb84844e83ee88684ef89cc02221a26abbf92530", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb84844e83ee88684ef89cc02221a26abbf92530", "html_url": "https://github.com/rust-lang/rust/commit/cb84844e83ee88684ef89cc02221a26abbf92530"}, {"sha": "1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "html_url": "https://github.com/rust-lang/rust/commit/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1"}], "stats": {"total": 196, "additions": 193, "deletions": 3}, "files": [{"sha": "fe40141a5e12352ed43dbda110f5e9dd15f42a28", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -190,7 +190,26 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                         // In the case of a trait predicate, we can skip the \"self\" type.\n                         data.skip_binder().input_types().skip(1).any(|t| t.has_self_ty())\n                     }\n-                    ty::Predicate::Projection(..) |\n+                    ty::Predicate::Projection(ref data) => {\n+                        // And similarly for projections. This should be redundant with\n+                        // the previous check because any projection should have a\n+                        // matching `Trait` predicate with the same inputs, but we do\n+                        // the check to be safe.\n+                        //\n+                        // Note that we *do* allow projection *outputs* to contain\n+                        // `self` (i.e., `trait Foo: Bar<Output=Self::Result> { type Result; }`),\n+                        // we just require the user to specify *both* outputs\n+                        // in the object type (i.e., `dyn Foo<Output=(), Result=()>`).\n+                        //\n+                        // This is ALT2 in issue #56288, see that for discussion of the\n+                        // possible alternatives.\n+                        data.skip_binder()\n+                            .projection_ty\n+                            .trait_ref(self)\n+                            .input_types()\n+                            .skip(1)\n+                            .any(|t| t.has_self_ty())\n+                    }\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::TypeOutlives(..) |"}, {"sha": "ab1eeffc6217aea6fd1fa63be96a91fbd9d5417a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -1013,15 +1013,39 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let mut associated_types = BTreeSet::default();\n \n         for tr in traits::elaborate_trait_ref(tcx, principal) {\n+            debug!(\"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\", tr);\n             match tr {\n                 ty::Predicate::Trait(pred) => {\n                     associated_types.extend(tcx.associated_items(pred.def_id())\n                                     .filter(|item| item.kind == ty::AssociatedKind::Type)\n                                     .map(|item| item.def_id));\n                 }\n                 ty::Predicate::Projection(pred) => {\n-                    // Include projections defined on supertraits.\n-                    projection_bounds.push((pred, DUMMY_SP))\n+                    // A `Self` within the original bound will be substituted with a\n+                    // `TRAIT_OBJECT_DUMMY_SELF`, so check for that.\n+                    let references_self =\n+                        pred.skip_binder().ty.walk().any(|t| t == dummy_self);\n+\n+                    // If the projection output contains `Self`, force the user to\n+                    // elaborate it explicitly to avoid a bunch of complexity.\n+                    //\n+                    // The \"classicaly useful\" case is the following:\n+                    // ```\n+                    //     trait MyTrait: FnMut() -> <Self as MyTrait>::MyOutput {\n+                    //         type MyOutput;\n+                    //     }\n+                    // ```\n+                    //\n+                    // Here, the user could theoretically write `dyn MyTrait<Output=X>`,\n+                    // but actually supporting that would \"expand\" to an infinitely-long type\n+                    // `fix $ \u03c4 \u2192 dyn MyTrait<MyOutput=X, Output=<\u03c4 as MyTrait>::MyOutput`.\n+                    //\n+                    // Instead, we force the user to write `dyn MyTrait<MyOutput=X, Output=X>`,\n+                    // which is uglier but works. See the discussion in #56288 for alternatives.\n+                    if !references_self {\n+                        // Include projections defined on supertraits,\n+                        projection_bounds.push((pred, DUMMY_SP))\n+                    }\n                 }\n                 _ => ()\n             }"}, {"sha": "766bd147431b47f045ac7f6a8825fbb31e29ad3d", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -0,0 +1,50 @@\n+// Regression test for #56288. Checks that if a supertrait defines an associated type\n+// projection that references `Self`, then that associated type must still be explicitly\n+// specified in the `dyn Trait` variant, since we don't know what `Self` is anymore.\n+\n+trait Base {\n+    type Output;\n+}\n+\n+trait Helper: Base<Output=<Self as Helper>::Target> {\n+    type Target;\n+}\n+\n+impl Base for u32\n+{\n+    type Output = i32;\n+}\n+\n+impl Helper for u32\n+{\n+    type Target = i32;\n+}\n+\n+trait ConstI32 {\n+    type Out;\n+}\n+\n+impl<T: ?Sized> ConstI32 for T {\n+    type Out = i32;\n+}\n+\n+// Test that you still need to manually give a projection type if the Output type\n+// is normalizable.\n+trait NormalizableHelper:\n+    Base<Output=<Self as ConstI32>::Out>\n+{\n+    type Target;\n+}\n+\n+impl NormalizableHelper for u32\n+{\n+    type Target = i32;\n+}\n+\n+fn main() {\n+    let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n+    //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n+\n+    let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n+    //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n+}"}, {"sha": "350f8ea8507095c87086c90e476b68fe9633eb6a", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -0,0 +1,21 @@\n+error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:45:17\n+   |\n+LL |     type Output;\n+   |     ------------ `Output` defined here\n+...\n+LL |     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n+\n+error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:48:17\n+   |\n+LL |     type Output;\n+   |     ------------ `Output` defined here\n+...\n+LL |     let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "793d556d08ca24e71ddecb06dae6c6183f396e33", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-good.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -0,0 +1,28 @@\n+// compile-pass\n+\n+// Regression test related to #56288. Check that a supertrait projection (of\n+// `Output`) that references `Self` can be ok if it is referencing a projection (of\n+// `Self::Target`, in this case). Note that we still require the user to manually\n+// specify both `Target` and `Output` for now.\n+\n+trait Base {\n+    type Output;\n+}\n+\n+trait Helper: Base<Output=<Self as Helper>::Target> {\n+    type Target;\n+}\n+\n+impl Base for u32\n+{\n+    type Output = i32;\n+}\n+\n+impl Helper for u32\n+{\n+    type Target = i32;\n+}\n+\n+fn main() {\n+    let _x: Box<dyn Helper<Target=i32, Output=i32>> = Box::new(2u32);\n+}"}, {"sha": "46c083f93059116ce2f0a0ed763ff8ed23435e49", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99a320cba42f661aebfa1293b7b2ec3603dda75/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=d99a320cba42f661aebfa1293b7b2ec3603dda75", "patch": "@@ -0,0 +1,48 @@\n+// compile-pass\n+\n+// Regression test related to #56288. Check that a supertrait projection (of\n+// `Output`) that references `Self` is ok if there is another occurence of\n+// the same supertrait that specifies the projection explicitly, even if\n+// the projection's associated type is not explicitly specified in the object type.\n+//\n+// Note that in order for this to compile, we need the `Self`-referencing projection\n+// to normalize fairly directly to a concrete type, otherwise the trait resolver\n+// will hate us.\n+//\n+// There is a test in `trait-object-with-self-in-projection-output-bad.rs` that\n+// having a normalizing, but `Self`-containing projection does not *by itself*\n+// allow you to avoid writing the projected type (`Output`, in this example)\n+// explicitly.\n+\n+trait ConstI32 {\n+    type Out;\n+}\n+\n+impl<T: ?Sized> ConstI32 for T {\n+    type Out = i32;\n+}\n+\n+trait Base {\n+    type Output;\n+}\n+\n+trait NormalizingHelper: Base<Output=<Self as ConstI32>::Out> + Base<Output=i32> {\n+    type Target;\n+}\n+\n+impl Base for u32\n+{\n+    type Output = i32;\n+}\n+\n+impl NormalizingHelper for u32\n+{\n+    type Target = i32;\n+}\n+\n+fn main() {\n+    // Make sure this works both with and without the associated type\n+    // being specified.\n+    let _x: Box<dyn NormalizingHelper<Target=i32>> = Box::new(2u32);\n+    let _y: Box<dyn NormalizingHelper<Target=i32, Output=i32>> = Box::new(2u32);\n+}"}]}