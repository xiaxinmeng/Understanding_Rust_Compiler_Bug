{"sha": "cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "node_id": "C_kwDOAAsO6NoAKGNmNmE3M2MxYTRhMzYzYTEyMzlmMmRiMzJiODlmZjNkMmFmZmI2YzI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T02:23:08Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T04:05:42Z"}, "message": "Remove where bound from `clean_fn_decl_with_args`\n\nBasically, this entails moving the arguments cleaning to the call site.\n\nI extracted several local variables because:\n\n1. It makes the code easier to read and understand.\n\n2. If I hadn't, the extra `clean()` calls would have caused complicated\n   tuples to be split across several lines.\n\n3. I couldn't just extract local variables for `args` because then the\n   arguments would be cleaned *before* the generics, while rustdoc expects\n   them to be cleaned *after*. Only extracting `args` caused panics like\n   this:\n\n       thread 'rustc' panicked at 'assertion failed: cx.impl_trait_bounds.is_empty()',\n       src/librustdoc/clean/utils.rs:462:5\n\n   Extracting variables makes the control flow -- and the required\n   order of cleaning -- more explicit.", "tree": {"sha": "14d47b5406e6f871cc9ab46f46e81f176b7d2e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d47b5406e6f871cc9ab46f46e81f176b7d2e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "html_url": "https://github.com/rust-lang/rust/commit/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169b84fee38827d0e4e437696baf7149d9c2adf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/169b84fee38827d0e4e437696baf7149d9c2adf7", "html_url": "https://github.com/rust-lang/rust/commit/169b84fee38827d0e4e437696baf7149d9c2adf7"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "9238a0bc3f38c9910e883b760fc2af3042c9abcf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "patch": "@@ -762,7 +762,10 @@ fn clean_fn_or_proc_macro(\n impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n         let (generics, decl) = enter_impl_trait(cx, |cx| {\n-            (self.1.clean(cx), clean_fn_decl_with_args(cx, &*self.0.decl, self.2))\n+            let generics = self.1.clean(cx);\n+            let args = (self.0.decl.inputs, self.2).clean(cx);\n+            let decl = clean_fn_decl_with_args(cx, &*self.0.decl, args);\n+            (generics, decl)\n         });\n         Function { decl, generics, header: self.0.header }\n     }\n@@ -805,19 +808,12 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n     }\n }\n \n-fn clean_fn_decl_with_args<'a, A: Copy>(\n+fn clean_fn_decl_with_args(\n     cx: &mut DocContext<'_>,\n-    decl: &'a hir::FnDecl<'a>,\n-    args: A,\n-) -> FnDecl\n-where\n-    (&'a [hir::Ty<'a>], A): Clean<Arguments>,\n-{\n-    FnDecl {\n-        inputs: (decl.inputs, args).clean(cx),\n-        output: decl.output.clean(cx),\n-        c_variadic: decl.c_variadic,\n-    }\n+    decl: &hir::FnDecl<'_>,\n+    args: Arguments,\n+) -> FnDecl {\n+    FnDecl { inputs: args, output: decl.output.clean(cx), c_variadic: decl.c_variadic }\n }\n \n impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n@@ -897,7 +893,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                        (self.generics.clean(cx), clean_fn_decl_with_args(cx, sig.decl, names))\n+                        let generics = self.generics.clean(cx);\n+                        let args = (sig.decl.inputs, names).clean(cx);\n+                        let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+                        (generics, decl)\n                     });\n                     let mut t = Function { header: sig.header, decl, generics };\n                     if t.header.constness == hir::Constness::Const\n@@ -1731,7 +1730,8 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n             let generic_params = self.generic_params.iter().map(|x| x.clean(cx)).collect();\n-            let decl = clean_fn_decl_with_args(cx, self.decl, self.param_names);\n+            let args = (self.decl.inputs, self.param_names).clean(cx);\n+            let decl = clean_fn_decl_with_args(cx, self.decl, args);\n             (generic_params, decl)\n         });\n         BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n@@ -2029,7 +2029,10 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                 hir::ForeignItemKind::Fn(decl, names, ref generics) => {\n                     let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                        (generics.clean(cx), clean_fn_decl_with_args(cx, decl, names))\n+                        let generics = generics.clean(cx);\n+                        let args = (decl.inputs, names).clean(cx);\n+                        let decl = clean_fn_decl_with_args(cx, decl, args);\n+                        (generics, decl)\n                     });\n                     ForeignFunctionItem(Function {\n                         decl,"}]}