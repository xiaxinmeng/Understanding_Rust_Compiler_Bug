{"sha": "26ca71fdb2070ae970ea9ce40a52a7b663897940", "node_id": "C_kwDOAAsO6NoAKDI2Y2E3MWZkYjIwNzBhZTk3MGVhOWNlNDBhNTJhN2I2NjM4OTc5NDA", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-09T19:21:51Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-11T22:54:15Z"}, "message": "normalize argument b in equate_normalized_inputs_output", "tree": {"sha": "91ba1c6fb25ea1a557f3a09ba95822af1400e02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91ba1c6fb25ea1a557f3a09ba95822af1400e02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ca71fdb2070ae970ea9ce40a52a7b663897940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ca71fdb2070ae970ea9ce40a52a7b663897940", "html_url": "https://github.com/rust-lang/rust/commit/26ca71fdb2070ae970ea9ce40a52a7b663897940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ca71fdb2070ae970ea9ce40a52a7b663897940/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71ba74f0d51459ef10f2b73400c013c7a12d828", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71ba74f0d51459ef10f2b73400c013c7a12d828", "html_url": "https://github.com/rust-lang/rust/commit/d71ba74f0d51459ef10f2b73400c013c7a12d828"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "92d2d04f23f239e87873a2dd5f7e73f2cd573a17", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/26ca71fdb2070ae970ea9ce40a52a7b663897940/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ca71fdb2070ae970ea9ce40a52a7b663897940/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=26ca71fdb2070ae970ea9ce40a52a7b663897940", "patch": "@@ -7,13 +7,16 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n+use crate::type_check::constraint_conversion::ConstraintConversion;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n-use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::Ty;\n use rustc_span::Span;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n+use rustc_trait_selection::traits::query::Fallible;\n+use type_op::TypeOpOutput;\n \n use crate::universal_regions::UniversalRegions;\n \n@@ -30,6 +33,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let (&normalized_output_ty, normalized_input_tys) =\n             normalized_inputs_and_output.split_last().unwrap();\n \n+        debug!(?normalized_output_ty);\n+        debug!(?normalized_input_tys);\n+\n         let mir_def_id = body.source.def_id().expect_local();\n \n         // If the user explicitly annotated the input types, extract\n@@ -75,10 +81,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     .delay_span_bug(body.span, \"found more normalized_input_ty than local_decls\");\n                 break;\n             }\n+\n             // In MIR, argument N is stored in local N+1.\n             let local = Local::new(argument_index + 1);\n \n             let mir_input_ty = body.local_decls[local].ty;\n+\n             let mir_input_span = body.local_decls[local].source_info.span;\n             self.equate_normalized_input_or_output(\n                 normalized_input_ty,\n@@ -100,6 +108,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // If the user explicitly annotated the input types, enforce those.\n                 let user_provided_input_ty =\n                     self.normalize(user_provided_input_ty, Locations::All(mir_input_span));\n+\n                 self.equate_normalized_input_or_output(\n                     user_provided_input_ty,\n                     mir_input_ty,\n@@ -167,30 +176,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n             // like to normalize *before* inserting into `local_decls`, but\n             // doing so ends up causing some other trouble.\n-            let b = match self\n-                .infcx\n-                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(b)\n-            {\n-                Ok(n) => {\n-                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n-                    if n.obligations.iter().all(|o| {\n-                        matches!(\n-                            o.predicate.kind().skip_binder(),\n-                            ty::PredicateKind::RegionOutlives(_)\n-                                | ty::PredicateKind::TypeOutlives(_)\n-                        )\n-                    }) {\n-                        n.value\n-                    } else {\n-                        b\n-                    }\n-                }\n+            let b = match self.normalize_and_add_constraints(b) {\n+                Ok(n) => n,\n                 Err(_) => {\n                     debug!(\"equate_inputs_and_outputs: NoSolution\");\n                     b\n                 }\n             };\n+\n             // Note: if we have to introduce new placeholders during normalization above, then we won't have\n             // added those universes to the universe info, which we would want in `relate_tys`.\n             if let Err(terr) =\n@@ -207,4 +200,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    pub(crate) fn normalize_and_add_constraints(&mut self, t: Ty<'tcx>) -> Fallible<Ty<'tcx>> {\n+        let TypeOpOutput { output: norm_ty, constraints, .. } =\n+            self.param_env.and(type_op::normalize::Normalize::new(t)).fully_perform(self.infcx)?;\n+\n+        debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n+\n+        for data in constraints.into_iter().collect::<Vec<_>>() {\n+            ConstraintConversion::new(\n+                self.infcx,\n+                &self.borrowck_context.universal_regions,\n+                &self.region_bound_pairs,\n+                Some(self.implicit_region_bound),\n+                self.param_env,\n+                Locations::All(DUMMY_SP),\n+                ConstraintCategory::Internal,\n+                &mut self.borrowck_context.constraints,\n+            )\n+            .convert_all(&*data);\n+        }\n+\n+        Ok(norm_ty)\n+    }\n }"}, {"sha": "da26d9c7b87790e85e784cf889e28fc92796f187", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26ca71fdb2070ae970ea9ce40a52a7b663897940/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ca71fdb2070ae970ea9ce40a52a7b663897940/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=26ca71fdb2070ae970ea9ce40a52a7b663897940", "patch": "@@ -893,11 +893,11 @@ struct TypeChecker<'a, 'tcx> {\n }\n \n struct BorrowCheckContext<'a, 'tcx> {\n-    universal_regions: &'a UniversalRegions<'tcx>,\n+    pub(crate) universal_regions: &'a UniversalRegions<'tcx>,\n     location_table: &'a LocationTable,\n     all_facts: &'a mut Option<AllFacts>,\n     borrow_set: &'a BorrowSet<'tcx>,\n-    constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n+    pub(crate) constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     upvars: &'a [Upvar<'tcx>],\n }\n \n@@ -1157,6 +1157,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)\n     }\n \n+    #[instrument(skip(self, category), level = \"debug\")]\n     fn eq_types(\n         &mut self,\n         expected: Ty<'tcx>,"}]}