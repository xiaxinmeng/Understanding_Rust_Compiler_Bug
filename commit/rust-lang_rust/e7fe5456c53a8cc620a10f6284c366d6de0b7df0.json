{"sha": "e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "node_id": "C_kwDOAAsO6NoAKGU3ZmU1NDU2YzUzYThjYzYyMGExMGY2Mjg0YzM2NmQ2ZGUwYjdkZjA", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-12T01:12:26Z"}, "committer": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-07-08T21:18:13Z"}, "message": "Support unstable moves via stable in unstable items", "tree": {"sha": "a6602956abf2346184eacb332fe48cefa03afcb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6602956abf2346184eacb332fe48cefa03afcb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "html_url": "https://github.com/rust-lang/rust/commit/e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052495d0017e2b18b781bcf0469a048e5051f5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/052495d0017e2b18b781bcf0469a048e5051f5c0", "html_url": "https://github.com/rust-lang/rust/commit/052495d0017e2b18b781bcf0469a048e5051f5c0"}], "stats": {"total": 218, "additions": 200, "deletions": 18}, "files": [{"sha": "9f00c6ac1126a522d2e4de66689dc75fc9702226", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -471,13 +471,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This function will also check if the item is deprecated.\n     /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n+    ///\n+    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.\n     pub fn check_stability(\n         self,\n         def_id: DefId,\n         id: Option<HirId>,\n         span: Span,\n         method_span: Option<Span>,\n-    ) {\n+    ) -> bool {\n         self.check_stability_allow_unstable(def_id, id, span, method_span, AllowUnstable::No)\n     }\n \n@@ -497,7 +499,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: Span,\n         method_span: Option<Span>,\n         allow_unstable: AllowUnstable,\n-    ) {\n+    ) -> bool {\n         self.check_optional_stability(\n             def_id,\n             id,\n@@ -516,6 +518,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// missing stability attributes (not necessarily just emit a `bug!`). This is necessary\n     /// for default generic parameters, which only have stability attributes if they were\n     /// added after the type on which they're defined.\n+    ///\n+    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.\n     pub fn check_optional_stability(\n         self,\n         def_id: DefId,\n@@ -524,13 +528,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         method_span: Option<Span>,\n         allow_unstable: AllowUnstable,\n         unmarked: impl FnOnce(Span, DefId),\n-    ) {\n+    ) -> bool {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit();\n             })\n         };\n-        match self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable) {\n+        let eval_result =\n+            self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable);\n+        let is_allowed = matches!(eval_result, EvalResult::Allow);\n+        match eval_result {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(\n                 self.sess,\n@@ -544,6 +551,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             ),\n             EvalResult::Unmarked => unmarked(span, def_id),\n         }\n+\n+        is_allowed\n     }\n \n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {"}, {"sha": "df6051bb59a6a5bdd4789883b9bf304da11eafe8", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -807,7 +807,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             let method_span = path.segments.last().map(|s| s.ident.span);\n-            self.tcx.check_stability_allow_unstable(\n+            let item_is_allowed = self.tcx.check_stability_allow_unstable(\n                 def_id,\n                 Some(id),\n                 path.span,\n@@ -817,8 +817,33 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 } else {\n                     AllowUnstable::No\n                 },\n-            )\n+            );\n+\n+            if item_is_allowed {\n+                // Check parent modules stability as well\n+                //\n+                // We check here rather than in `visit_path_segment` to prevent visiting the last\n+                // path segment twice\n+                let parents = path.segments.iter().rev().skip(1);\n+                for path_segment in parents {\n+                    if let Some(def_id) = path_segment.res.as_ref().and_then(Res::opt_def_id) {\n+                        // use `None` for id to prevent deprecation check\n+                        self.tcx.check_stability_allow_unstable(\n+                            def_id,\n+                            None,\n+                            path.span,\n+                            None,\n+                            if is_unstable_reexport(self.tcx, id) {\n+                                AllowUnstable::Yes\n+                            } else {\n+                                AllowUnstable::No\n+                            },\n+                        )\n+                    }\n+                }\n+            }\n         }\n+\n         intravisit::walk_path(self, path)\n     }\n }"}, {"sha": "b5b90b389d97761b1987b54c553172dea8f9fdef", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -439,7 +439,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // as the rest of the type. As such, we ignore missing\n                                 // stability attributes.\n                             },\n-                        )\n+                        );\n                     }\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.astconv.allow_ty_infer()) {\n                         self.inferred_params.push(ty.span);"}, {"sha": "cb6f42f1cc02123f213458be168f5b15be4d3cc5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -2649,6 +2649,7 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n /// Here is an example of how this could cause a problem:\n /// ```no_run\n /// #![feature(const_eval_select)]\n+/// #![feature(core_intrinsics)]\n /// use std::hint::unreachable_unchecked;\n /// use std::intrinsics::const_eval_select;\n ///"}, {"sha": "e8b888c950700d8fff33027d1c14a4d86a729e7a", "filename": "library/core/src/unicode/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,7 +1,9 @@\n-#![unstable(feature = \"unicode_internals\", issue = \"none\")]\n+#![stable(feature = \"unicode_version\", since = \"1.45.0\")]\n #![allow(missing_docs)]\n \n+#[unstable(feature = \"unicode_internals\", issue = \"none\")]\n pub(crate) mod printable;\n+#[unstable(feature = \"unicode_internals\", issue = \"none\")]\n mod unicode_data;\n \n /// The version of [Unicode](https://www.unicode.org/) that the Unicode parts of\n@@ -18,6 +20,7 @@ mod unicode_data;\n pub const UNICODE_VERSION: (u8, u8, u8) = unicode_data::UNICODE_VERSION;\n \n // For use in liballoc, not re-exported in libstd.\n+#[unstable(feature = \"unicode_internals\", issue = \"none\")]\n pub use unicode_data::{\n     case_ignorable::lookup as Case_Ignorable, cased::lookup as Cased, conversions,\n };"}, {"sha": "8bd597d49aa5e073eabd234dd0f9c0696521c9ad", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -214,7 +214,7 @@\n #![cfg_attr(not(bootstrap), deny(ffi_unwind_calls))]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n-#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]\n+#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count, rt))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)\n@@ -297,6 +297,7 @@\n // Library features (alloc):\n #![feature(alloc_layout_extra)]\n #![feature(alloc_c_string)]\n+#![feature(alloc_ffi)]\n #![feature(allocator_api)]\n #![feature(get_mut_unchecked)]\n #![feature(map_try_insert)]"}, {"sha": "45bc56efb3b99050afe75afe9df398163465d64f", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -11,7 +11,7 @@ use crate::thread::Result;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic)]\n+#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic, rt)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {"}, {"sha": "db8a04763d35dc0ac3242b8b20e02ff16f2f8b05", "filename": "src/test/codegen/intrinsics/const_eval_select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -2,6 +2,7 @@\n \n #![crate_type = \"lib\"]\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "52f4e594f1a0aac33839c4d89847f8bf6400b641", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "bdd5b700a92e26818e0f0bfa536a6d99f44e90de", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,3 +1,4 @@\n+<<<<<<< HEAD\n error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]: ~const FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:6:27\n    |\n@@ -13,14 +14,31 @@ note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select\n LL |     const_eval_select((), || {}, || {});\n    |                           ^^^^^\n    = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]` in a closure with no arguments: `|| { /* code */ }`\n+=======\n+error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:32]: ~const FnOnce<()>` is not satisfied\n+  --> $DIR/const-eval-select-bad.rs:7:27\n+   |\n+LL |     const_eval_select((), || {}, || {});\n+   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:32]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:32]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:32]`, but that implementation is not `const`\n+  --> $DIR/const-eval-select-bad.rs:7:27\n+   |\n+LL |     const_eval_select((), || {}, || {});\n+   |                           ^^^^^\n+   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:32]` in a closure with no arguments: `|| { /* code */ }`\n+>>>>>>> c1798b7c60e... Support unstable moves via stable in unstable items\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0277]: the trait bound `{integer}: ~const FnOnce<()>` is not satisfied\n-  --> $DIR/const-eval-select-bad.rs:8:27\n+  --> $DIR/const-eval-select-bad.rs:9:27\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n    |     -----------------     ^^ expected an `FnOnce<()>` closure, found `{integer}`\n@@ -36,7 +54,7 @@ LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n-  --> $DIR/const-eval-select-bad.rs:8:31\n+  --> $DIR/const-eval-select-bad.rs:9:31\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n    |     -----------------         ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n@@ -52,7 +70,7 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n-  --> $DIR/const-eval-select-bad.rs:28:5\n+  --> $DIR/const-eval-select-bad.rs:29:5\n    |\n LL |     const_eval_select((1,), foo, bar);\n    |     ^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`\n@@ -64,7 +82,7 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |                    ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/const-eval-select-bad.rs:33:32\n+  --> $DIR/const-eval-select-bad.rs:34:32\n    |\n LL | const fn foo(n: i32) -> i32 {\n    | --------------------------- found signature of `fn(i32) -> _`"}, {"sha": "f9554decec16b47e3830ed87b7016fef64a32fae", "filename": "src/test/ui/intrinsics/const-eval-select-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,5 +1,6 @@\n #![feature(staged_api)]\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n #![stable(since = \"1.0\", feature = \"ui_test\")]\n \n use std::intrinsics::const_eval_select;"}, {"sha": "65b507b887b46f6ee32ab6526712545764f7ad6f", "filename": "src/test/ui/intrinsics/const-eval-select-stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,5 +1,5 @@\n error: `const_eval_select` is not yet stable as a const fn\n-  --> $DIR/const-eval-select-stability.rs:16:5\n+  --> $DIR/const-eval-select-stability.rs:17:5\n    |\n LL |     const_eval_select((), nothing, log);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f3924acf0fa8b7ea3444470fe3e5f02fe76f6607", "filename": "src/test/ui/intrinsics/const-eval-select-x86_64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n \n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n use std::intrinsics::const_eval_select;\n use std::arch::x86_64::*;\n use std::mem::transmute;"}, {"sha": "9ff20d3fbdd9e14a56348244002f55af61e291b1", "filename": "src/test/ui/intrinsics/const-eval-select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "d0f0e9f807123eed3d49647435876efdfd1f87c9", "filename": "src/test/ui/lint/lint-stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -191,11 +191,11 @@ mod inheritance {\n         stable_mod::unstable(); //~ ERROR use of unstable library feature\n         stable_mod::stable();\n \n-        unstable_mod::deprecated();\n+        unstable_mod::deprecated(); //~ ERROR use of unstable library feature\n         unstable_mod::unstable(); //~ ERROR use of unstable library feature\n \n         let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature\n-        let _ = Unstable::StableVariant;\n+        let _ = Unstable::StableVariant; //~ ERROR use of unstable library feature\n \n         let x: usize = 0;\n         x.stable();"}, {"sha": "bd1a57dc4cc50764eb30b6a42b01e973c1140724", "filename": "src/test/ui/lint/lint-stability.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -294,6 +294,14 @@ LL |         stable_mod::unstable();\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/lint-stability.rs:194:9\n+   |\n+LL |         unstable_mod::deprecated();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/lint-stability.rs:195:9\n    |\n@@ -310,6 +318,14 @@ LL |         let _ = Unstable::UnstableVariant;\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/lint-stability.rs:198:17\n+   |\n+LL |         let _ = Unstable::StableVariant;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/lint-stability.rs:88:48\n    |\n@@ -326,6 +342,6 @@ LL |             TypeUnstable = u8,\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 43 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e45b00f994af45139222fd2e9b1d8a2112a13238", "filename": "src/test/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -0,0 +1,8 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"1\")]\n+pub mod new_unstable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub trait OldTrait {}\n+}"}, {"sha": "28ad8c28da1589d73e7e98c2c6f2258ebe56e71b", "filename": "src/test/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+#![feature(unstable_test_feature)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+extern crate stable_in_unstable_core;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+pub mod old_stable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub use stable_in_unstable_core::new_unstable_module::OldTrait;\n+}"}, {"sha": "272a1a972340c41020f11009d733e5b25693287f", "filename": "src/test/ui/stability-attribute/stable-in-unstable.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -0,0 +1,46 @@\n+// This test is meant to test that we can have a stable item in an unstable module, and that\n+// calling that item through the unstable module is unstable, but that re-exporting it from another\n+// crate in a stable module is fine.\n+//\n+// This is necessary to support moving items from `std` into `core` or `alloc` unstably while still\n+// exporting the original stable interface in `std`, such as moving `Error` into `core`.\n+//\n+// aux-build:stable-in-unstable-core.rs\n+// aux-build:stable-in-unstable-std.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate stable_in_unstable_core;\n+extern crate stable_in_unstable_std;\n+\n+mod isolated1 {\n+    use stable_in_unstable_core::new_unstable_module; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+}\n+\n+mod isolated2 {\n+    use stable_in_unstable_std::old_stable_module::OldTrait;\n+\n+    struct LocalType;\n+\n+    impl OldTrait for LocalType {}\n+}\n+\n+mod isolated3 {\n+    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+\n+    struct LocalType;\n+\n+    impl OldTrait for LocalType {}\n+}\n+\n+mod isolated4 {\n+    struct LocalType;\n+\n+    impl stable_in_unstable_core::new_unstable_module::OldTrait for LocalType {} //~ ERROR use of unstable library feature 'unstable_test_feature'\n+}\n+\n+mod isolated5 {\n+    struct LocalType;\n+\n+    impl stable_in_unstable_std::old_stable_module::OldTrait for LocalType {}\n+}"}, {"sha": "e123d83584c81a36baf39dcc71e326ecc9604521", "filename": "src/test/ui/stability-attribute/stable-in-unstable.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7fe5456c53a8cc620a10f6284c366d6de0b7df0/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr?ref=e7fe5456c53a8cc620a10f6284c366d6de0b7df0", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:16:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:17:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module::OldTrait;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:29:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module::OldTrait;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:39:10\n+   |\n+LL |     impl stable_in_unstable_core::new_unstable_module::OldTrait for LocalType {}\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}