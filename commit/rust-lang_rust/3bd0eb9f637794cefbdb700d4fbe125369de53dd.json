{"sha": "3bd0eb9f637794cefbdb700d4fbe125369de53dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDBlYjlmNjM3Nzk0Y2VmYmRiNzAwZDRmYmUxMjUzNjlkZTUzZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-19T01:51:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-19T03:16:02Z"}, "message": "0.8 release notes", "tree": {"sha": "2bd02dc23bacf99d627fe318125ea4cba3976ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd02dc23bacf99d627fe318125ea4cba3976ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd0eb9f637794cefbdb700d4fbe125369de53dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd0eb9f637794cefbdb700d4fbe125369de53dd", "html_url": "https://github.com/rust-lang/rust/commit/3bd0eb9f637794cefbdb700d4fbe125369de53dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd0eb9f637794cefbdb700d4fbe125369de53dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250c3d47dfb56c0ef5581b8ff65958b226dc656a", "url": "https://api.github.com/repos/rust-lang/rust/commits/250c3d47dfb56c0ef5581b8ff65958b226dc656a", "html_url": "https://github.com/rust-lang/rust/commit/250c3d47dfb56c0ef5581b8ff65958b226dc656a"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "379f64cce1af527b55f106dcc4a0739d5d3cddda", "filename": "RELEASES.txt", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/3bd0eb9f637794cefbdb700d4fbe125369de53dd/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3bd0eb9f637794cefbdb700d4fbe125369de53dd/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=3bd0eb9f637794cefbdb700d4fbe125369de53dd", "patch": "@@ -1,3 +1,148 @@\n+Version 0.8 (October 2013)\n+--------------------------\n+\n+   * ~2100 changes, numerous bugfixes\n+\n+   * Language\n+      * The `for` loop syntax has changed to work with the `Iterator` trait.\n+      * At long last, unwinding works on Windows.\n+      * Default methods definitely mostly work.\n+      * Many trait inheritance bugs fixed.\n+      * Owned and borrowed trait objects work more reliably.\n+      * `copy` is no longer a keyword. It has been replaced by the `Clone` trait.\n+      * rustc no longer emits code for the `debug!` macro unless it is passed\n+        `--cfg debug`\n+      * mod.rs is now \"blessed\". When loading `mod foo;`, rustc will now look\n+        for foo.rs, then foo/mod.rs, and will generate an error when both are\n+        present.\n+      * Strings no longer contain trailing nulls. The new `std::c_str` module\n+        provides new mechanisms for converting to C strings.\n+      * The type of foreign functions is now `extern \"C\" fn` instead of `*u8'.\n+      * The FFI has been overhauled such that foreign functions are called directly,\n+        instead of through a stack-switching wrapper.\n+      * Calling a foreign function must be done through a Rust function with the\n+        `#[fixed_stack_segment]` attribute.\n+      * The `externfn!` macro can be used to declare both a foreign function and\n+        a `#[fixed_stack_segment]` wrapper at once.\n+      * `pub` and `priv` modifiers on `extern` blocks are no longer parsed.\n+      * `unsafe` is no longer allowed on extern fns - they are all unsafe.\n+      * `priv` is disallowed everywhere except for struct fields and enum variants.\n+      * `&T` (besides `&'static T`) is no longer allowed in `@T`.\n+      * `ref` bindings in irrefutable patterns work correctly now.\n+      * `char` is now prevented from containing invalid code points.\n+      * Casting to `bool` is no longer allowed.\n+      * `yield` is a reserved keyword.\n+      * `typeof` is a reserved keyword.\n+      * Crates may be imported by URL with `extern mod foo = \"url\";`.\n+      * Explicit enum discriminants may be given as uints as in `enum E { V = 0u }`\n+      * Static vectors can be initialized with repeating elements,\n+        e.g. `static foo: [u8, .. 100]: [0, .. 100];`.\n+      * Static structs can be initialized with functional record update,\n+        e.g. `static foo: Foo = Foo { a: 5, .. bar };`.\n+      * `cfg!` can be used to conditionally execute code based on the crate\n+        configuration, similarly to `#[cfg(...)]`.\n+      * The `unnecessary_qualification` lint detects unneeded module\n+        prefixes (default: allow).\n+      * Arithmetic operations have been implemented on the SIMD types in\n+        `std::unstable::simd`.\n+      * Exchange allocation headers were removed, reducing memory usage.\n+      * `format!` implements a completely new, extensible, and higher-performance\n+        string formatting system. It will replace `fmt!`.\n+      * `print!` and `println!` write formatted strings (using the `format!`\n+        extension) to stdout.\n+      * `write!` and `writeln!` write formatted strings (using the `format!`\n+        extension) to the new Writers in `std::rt::io`.\n+      * The library section in which a function or static is placed may\n+        be specified with `#[link_section = \"...\"]`.\n+      * The `proto!` syntax extension for defining bounded message protocols\n+        was removed.\n+      * `macro_rules!` is hygenic for `let` declarations.\n+      * The `#[export_name]` attribute specifies the name of a symbol.\n+      * `unreachable!` can be used to indicate unreachable code, and fails\n+        if executed.\n+\n+   * Libraries\n+      * std: Transitioned to the new runtime, written in Rust.\n+      * std: Added an experimental I/O library, `rt::io`, based on the new\n+        runtime.\n+      * std: A new generic `range` function was added to the prelude, replacing\n+        `uint::range` and friends.\n+      * std: `range_rev` no longer exists. Since range is an iterator it can be\n+        reversed with `range(lo, hi).invert()`.\n+      * std: The `chain` method on option renamed to `and_then`; `unwrap_or_default`\n+        renamed to `unwrap_or`.\n+      * std: The `iterator` module was renamed to `iter`.\n+      * std: Integral types now support the `checked_add`, `checked_sub`, and\n+        `checked_mul` operations for detecting overflow.\n+      * std: Many methods in `str`, `vec`, `option, `result` were renamed for\n+        consistency.\n+      * std: Methods are standardizing on conventions for casting methods:\n+        `to_foo` for copying, `into_foo` for moving, `as_foo` for temporary\n+        and cheap casts.\n+      * std: The `CString` type in `c_str` provides new ways to convert to and\n+        from C strings.\n+      * std: `DoubleEndedIterator` can yield elements in two directions.\n+      * std: The `mut_split` method on vectors partitions an `&mut [T]` into\n+        two splices.\n+      * std: `str::from_bytes` renamed to `str::from_utf8`.\n+      * std: `pop_opt` and `shift_opt` methods added to vectors.\n+      * std: The task-local data interface no longer uses @, and keys are\n+        no longer function pointers.\n+      * std: The `swap_unwrap` method of `Option` renamed to `take_unwrap`.\n+      * std: Added `SharedPort` to `comm`.\n+      * std: `Eq` has a default method for `ne`; only `eq` is required\n+        in implementations.\n+      * std: `Ord` has default methods for `le`, `gt` and `le`; only `lt`\n+        is required in implementations.\n+      * std: `is_utf8` performance is improved, impacting many string functions.\n+      * std: `os::MemoryMap` provides cross-platform mmap.\n+      * std: `ptr::offset` is now unsafe, but also more optimized. Offsets that\n+        are not 'in-bounds' are considered undefined.\n+      * std: Many freestanding functions in `vec` removed in favor of methods.\n+      * std: Many freestanding functions on scalar types removed in favor of\n+        methods.\n+      * std: Many options to task builders were removed since they don't make\n+        sense in the new scheduler design.\n+      * std: More containers implement `FromIterator` so can be created by the\n+        `collect` method.\n+      * std: More complete atomic types in `unstable::atomics`.\n+      * std: `comm::PortSet` removed.\n+      * std: Mutating methods in the `Set` and `Map` traits have been moved into\n+        the `MutableSet` and `MutableMap` traits. `Container::is_empty`,\n+        `Map::contains_key`, `MutableMap::insert`, and `MutableMap::remove` have\n+        default implementations.\n+      * extra: `dlist`, the doubly-linked list was modernized.\n+      * extra: Added a `hex` module with `ToHex` and `FromHex` traits.\n+      * extra: Added `glob` module, replacing `std::os::glob`.\n+      * extra: `rope` was removed.\n+      * extra: `deque` was renamed to `ringbuf`. `RingBuf` implements `Deque`.\n+      * extra: `net`, and `timer` were removed. The experimental replacements\n+        are `std::rt::io::net` and `std::rt::io::timer`.\n+      * extra: Iterators implemented for `SmallIntMap`.\n+      * extra: Iterators implemented for `Bitv` and `BitvSet`.\n+      * extra: `SmallIntSet` removed. Use `BitvSet`.\n+      * extra: Performance of JSON parsing greatly improved.\n+      * extra: `semver` updated to SemVer 2.0.0.\n+      * extra: `term` handles more terminals correctly.\n+      * extra: `dbg` module removed.\n+\n+   * Other\n+      * rustc's debug info generation (`-Z debug-info`) is greatly improved.\n+      * rustc accepts `--target-cpu` to compile to a specific CPU architecture,\n+        similarly to gcc's `--march` flag.\n+      * rustpkg has received many improvements.\n+      * rustpkg supports git tags as package IDs.\n+      * rustpkg builds into target-specific directories so it can be used for\n+        cross-compiling.\n+      * The number of concurrent test tasks is controlled by the environment\n+        variable RUST_TEST_TASKS.\n+      * The test harness can now report metrics for benchmarks.\n+      * All tools have man pages.\n+      * Programs compiled with `--test` now support the `-h` and `--help` flags.\n+      * The runtime uses jemalloc for allocations.\n+      * Segmented stacks are temporarily disabled as part of the transition to\n+        the new runtime. Stack overflows are possible!\n+\n Version 0.7 (July 2013)\n -----------------------\n "}]}