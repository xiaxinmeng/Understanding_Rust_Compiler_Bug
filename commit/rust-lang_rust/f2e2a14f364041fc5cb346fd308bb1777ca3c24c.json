{"sha": "f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZTJhMTRmMzY0MDQxZmM1Y2IzNDZmZDMwOGJiMTc3N2NhM2MyNGM=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-07-04T19:04:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-05T00:21:29Z"}, "message": "Remove empty argument lists from do expressions", "tree": {"sha": "05aef0c2982c1acdb73054442b788092c4ceb2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05aef0c2982c1acdb73054442b788092c4ceb2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "html_url": "https://github.com/rust-lang/rust/commit/f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718849b202aa6655a7d493a0eaf7f119136e2505", "url": "https://api.github.com/repos/rust-lang/rust/commits/718849b202aa6655a7d493a0eaf7f119136e2505", "html_url": "https://github.com/rust-lang/rust/commit/718849b202aa6655a7d493a0eaf7f119136e2505"}], "stats": {"total": 530, "additions": 265, "deletions": 265}, "files": [{"sha": "074913c8bf1e6a86d9454e1eefe412b3da009199", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -1638,7 +1638,7 @@ task in a _failing state_.\n ~~~~\n # let buildr = task::builder();\n # task::unsupervise(buildr);\n-# do task::run(buildr) || {\n+# do task::run(buildr) {\n \n (~[1, 2, 3, 4])[0];\n (~[mut 'x', 'y'])[1] = 'z';\n@@ -3365,7 +3365,7 @@ An example of a `spawn` call:\n let po = comm::port();\n let ch = comm::chan(po);\n \n-do task::spawn || {\n+do task::spawn {\n     // let task run, do other things\n     // ...\n     comm::send(ch, true);"}, {"sha": "306a39f7550f6451310110bcf07d848295cb4caa", "filename": "doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -2473,7 +2473,7 @@ module `task`.  Let's begin with the simplest one, `task::spawn()`:\n \n ~~~~\n let some_value = 22;\n-do task::spawn || {\n+do task::spawn {\n     io::println(\"This executes in the child task.\");\n     io::println(#fmt(\"%d\", some_value));\n }\n@@ -2499,7 +2499,7 @@ in parallel.  We might write something like:\n # fn some_other_expensive_computation() {}\n let port = comm::port::<int>();\n let chan = comm::chan::<int>(port);\n-do task::spawn || {\n+do task::spawn {\n     let result = some_expensive_computation();\n     comm::send(chan, result);\n }\n@@ -2530,7 +2530,7 @@ The next statement actually spawns the child:\n # fn some_expensive_computation() -> int { 42 }\n # let port = comm::port::<int>();\n # let chan = comm::chan::<int>(port);\n-do task::spawn || {\n+do task::spawn {\n     let result = some_expensive_computation();\n     comm::send(chan, result);\n }"}, {"sha": "c46196fd7f6419bd9050fdb679a0d039bc1d0acc", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -60,11 +60,11 @@ fn run(lib_path: str,\n     writeclose(pipe_in.out, input);\n     let p = comm::port();\n     let ch = comm::chan(p);\n-    do task::spawn_sched(task::single_threaded) || {\n+    do task::spawn_sched(task::single_threaded) {\n         let errput = readclose(pipe_err.in);\n         comm::send(ch, (2, errput));\n     }\n-    do task::spawn_sched(task::single_threaded) || {\n+    do task::spawn_sched(task::single_threaded) {\n         let output = readclose(pipe_out.in);\n         comm::send(ch, (1, output));\n     }"}, {"sha": "dc2d8da7b7f69840ec15803abb2024d38707806a", "filename": "src/libcore/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -172,7 +172,7 @@ mod tests {\n         let p = port();\n         let c = chan(p);\n \n-        do task::spawn() || {\n+        do task::spawn() {\n             let p = port();\n             c.send(chan(p));\n \n@@ -198,7 +198,7 @@ mod tests {\n         let p = port();\n         let c = chan(p);\n \n-        do task::spawn() || {\n+        do task::spawn() {\n             let arc_v = get_arc(arc_c);\n             let v = *get(&arc_v);\n             assert v[2] == 3;"}, {"sha": "6190752059e8178f4ba03d6cee7dacb52822360c", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -98,7 +98,7 @@ class port_ptr<T:send> {\n   let po: *rust_port;\n   new(po: *rust_port) { self.po = po; }\n   drop unsafe {\n-      do task::unkillable || {\n+      do task::unkillable {\n         // Once the port is detached it's guaranteed not to receive further\n         // messages\n         let yield = 0u;\n@@ -364,15 +364,15 @@ fn test_select2_rendezvous() {\n     let ch_a = chan(po_a);\n     let ch_b = chan(po_b);\n \n-    for iter::repeat(10u) || {\n-        do task::spawn || {\n+    for iter::repeat(10u) {\n+        do task::spawn {\n             for iter::repeat(10u) { task::yield() }\n             send(ch_a, \"a\");\n         };\n \n         assert select2(po_a, po_b) == either::left(\"a\");\n \n-        do task::spawn || {\n+        do task::spawn {\n             for iter::repeat(10u) { task::yield() }\n             send(ch_b, \"b\");\n         };\n@@ -391,22 +391,22 @@ fn test_select2_stress() {\n     let msgs = 100u;\n     let times = 4u;\n \n-    for iter::repeat(times) || {\n-        do task::spawn || {\n-            for iter::repeat(msgs) || {\n+    for iter::repeat(times) {\n+        do task::spawn {\n+            for iter::repeat(msgs) {\n                 send(ch_a, \"a\")\n             }\n         };\n-        do task::spawn || {\n-            for iter::repeat(msgs) || {\n+        do task::spawn {\n+            for iter::repeat(msgs) {\n                 send(ch_b, \"b\")\n             }\n         };\n     }\n \n     let mut as = 0;\n     let mut bs = 0;\n-    for iter::repeat(msgs * times * 2u) || {\n+    for iter::repeat(msgs * times * 2u) {\n         alt check select2(po_a, po_b) {\n           either::left(\"a\") { as += 1 }\n           either::right(\"b\") { bs += 1 }\n@@ -463,7 +463,7 @@ fn test_chan_peek() {\n #[test]\n fn test_listen() {\n     do listen |parent| {\n-        do task::spawn || {\n+        do task::spawn {\n             parent.send(\"oatmeal-salad\");\n         }\n         assert parent.recv() == \"oatmeal-salad\";\n@@ -473,18 +473,18 @@ fn test_listen() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_port_detach_fail() {\n-    for iter::repeat(100u) || {\n+    for iter::repeat(100u) {\n         let builder = task::builder();\n         task::unsupervise(builder);\n-        do task::run(builder) || {\n+        do task::run(builder) {\n             let po = port();\n             let ch = po.chan();\n \n-            do task::spawn || {\n+            do task::spawn {\n                 fail;\n             }\n \n-            do task::spawn || {\n+            do task::spawn {\n                 ch.send(());\n             }\n         }"}, {"sha": "61ce3b059da640ffcd88da441ceee72015d74c38", "filename": "src/libcore/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -64,7 +64,7 @@ fn from_port<A:send>(-port: comm::port<A>) -> future<A> {\n     waiting for the result to be received on the port.\n     \"];\n \n-    do from_fn || {\n+    do from_fn {\n         comm::recv(port)\n     }\n }\n@@ -93,7 +93,7 @@ fn spawn<A:send>(+blk: fn~() -> A) -> future<A> {\n \n     let mut po = comm::port();\n     let ch = comm::chan(po);\n-    do task::spawn || {\n+    do task::spawn {\n         comm::send(ch, blk())\n     };\n     from_port(po)"}, {"sha": "922911db9323da9dd4407f492e85ed9cc6858ad1", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -121,7 +121,7 @@ fn test_from_global_chan1() {\n #[test]\n fn test_from_global_chan2() {\n \n-    for iter::repeat(100u) || {\n+    for iter::repeat(100u) {\n         // The global channel\n         let globchan = 0u;\n         let globchanp = ptr::addr_of(globchan);\n@@ -132,7 +132,7 @@ fn test_from_global_chan2() {\n         // Spawn a bunch of tasks that all want to compete to\n         // create the global channel\n         for uint::range(0u, 10u) |i| {\n-            do task::spawn || {\n+            do task::spawn {\n                 let ch = unsafe {\n                     do chan_from_global_ptr(\n                         globchanp, task::builder) |po| {\n@@ -200,7 +200,7 @@ unsafe fn weaken_task(f: fn(comm::port<()>)) {\n \n #[test]\n fn test_weaken_task_then_unweaken() {\n-    do task::try || {\n+    do task::try {\n         unsafe {\n             do weaken_task |_po| {\n             }\n@@ -212,7 +212,7 @@ fn test_weaken_task_then_unweaken() {\n fn test_weaken_task_wait() {\n     let builder = task::builder();\n     task::unsupervise(builder);\n-    do task::run(builder) || {\n+    do task::run(builder) {\n         unsafe {\n             do weaken_task |po| {\n                 comm::recv(po);\n@@ -224,16 +224,16 @@ fn test_weaken_task_wait() {\n #[test]\n fn test_weaken_task_stress() {\n     // Create a bunch of weak tasks\n-    for iter::repeat(100u) || {\n-        do task::spawn || {\n+    for iter::repeat(100u) {\n+        do task::spawn {\n             unsafe {\n                 do weaken_task |_po| {\n                 }\n             }\n         }\n         let builder = task::builder();\n         task::unsupervise(builder);\n-        do task::run(builder) || {\n+        do task::run(builder) {\n             unsafe {\n                 do weaken_task |po| {\n                     // Wait for it to tell us to die\n@@ -247,7 +247,7 @@ fn test_weaken_task_stress() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_weaken_task_fail() {\n-    let res = do task::try || {\n+    let res = do task::try {\n         unsafe {\n             do weaken_task |_po| {\n                 fail;"}, {"sha": "432b12ddbf71b3c384ba0e3660688dfb43646136", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -298,11 +298,11 @@ fn program_output(prog: str, args: ~[str]) ->\n     // clever way to do this.\n     let p = comm::port();\n     let ch = comm::chan(p);\n-    do task::spawn_sched(task::single_threaded) || {\n+    do task::spawn_sched(task::single_threaded) {\n         let errput = readclose(pipe_err.in);\n         comm::send(ch, (2, errput));\n     };\n-    do task::spawn_sched(task::single_threaded) || {\n+    do task::spawn_sched(task::single_threaded) {\n         let output = readclose(pipe_out.in);\n         comm::send(ch, (1, output));\n     };"}, {"sha": "d5e26a0f8ec8bc9265132e47239010cb0cca1da9", "filename": "src/libcore/task.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -296,7 +296,7 @@ fn future_result(builder: builder) -> future::future<task_result> {\n         with get_opts(builder)\n     });\n \n-    do future::from_fn || {\n+    do future::from_fn {\n         alt comm::recv(po) {\n           exit(_, result) { result }\n         }\n@@ -343,7 +343,7 @@ fn run_listener<A:send>(-builder: builder,\n     let setup_po = comm::port();\n     let setup_ch = comm::chan(setup_po);\n \n-    do run(builder) || {\n+    do run(builder) {\n         let po = comm::port();\n         let mut ch = comm::chan(po);\n         comm::send(setup_ch, ch);\n@@ -440,7 +440,7 @@ fn try<T:send>(+f: fn~() -> T) -> result<T,()> {\n     let mut builder = builder();\n     unsupervise(builder);\n     let result = future_result(builder);\n-    do run(builder) || {\n+    do run(builder) {\n         comm::send(ch, f());\n     }\n     alt future::get(result) {\n@@ -800,7 +800,7 @@ extern mod rustrt {\n fn test_spawn_raw_simple() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    do spawn_raw(default_task_opts()) || {\n+    do spawn_raw(default_task_opts()) {\n         comm::send(ch, ());\n     }\n     comm::recv(po);\n@@ -813,7 +813,7 @@ fn test_spawn_raw_unsupervise() {\n         supervise: false\n         with default_task_opts()\n     };\n-    do spawn_raw(opts) || {\n+    do spawn_raw(opts) {\n         fail;\n     }\n }\n@@ -830,7 +830,7 @@ fn test_spawn_raw_notify() {\n         notify_chan: some(notify_ch)\n         with default_task_opts()\n     };\n-    do spawn_raw(opts) || {\n+    do spawn_raw(opts) {\n         comm::send(task_ch, get_task());\n     }\n     let task_ = comm::recv(task_po);\n@@ -841,7 +841,7 @@ fn test_spawn_raw_notify() {\n         notify_chan: some(notify_ch)\n         with default_task_opts()\n     };\n-    do spawn_raw(opts) || {\n+    do spawn_raw(opts) {\n         comm::send(task_ch, get_task());\n         fail;\n     }\n@@ -854,7 +854,7 @@ fn test_run_basic() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n     let buildr = builder();\n-    do run(buildr) || {\n+    do run(buildr) {\n         comm::send(ch, ());\n     }\n     comm::recv(po);\n@@ -871,7 +871,7 @@ fn test_add_wrapper() {\n             comm::send(ch, ());\n         }\n     }\n-    do run(buildr) || { }\n+    do run(buildr) { }\n     comm::recv(po);\n }\n \n@@ -880,13 +880,13 @@ fn test_add_wrapper() {\n fn test_future_result() {\n     let buildr = builder();\n     let result = future_result(buildr);\n-    do run(buildr) || { }\n+    do run(buildr) { }\n     assert future::get(result) == success;\n \n     let buildr = builder();\n     let result = future_result(buildr);\n     unsupervise(buildr);\n-    do run(buildr) || { fail }\n+    do run(buildr) { fail }\n     assert future::get(result) == failure;\n }\n \n@@ -896,7 +896,7 @@ fn test_future_task() {\n     let ch = comm::chan(po);\n     let buildr = builder();\n     let task1 = future_task(buildr);\n-    do run(buildr) || { comm::send(ch, get_task()) }\n+    do run(buildr) { comm::send(ch, get_task()) }\n     assert future::get(task1) == comm::recv(po);\n }\n \n@@ -919,7 +919,7 @@ fn test_spawn_listiner_bidi() {\n \n #[test]\n fn test_try_success() {\n-    alt do try || {\n+    alt do try {\n         \"Success!\"\n     } {\n         result::ok(\"Success!\") { }\n@@ -930,7 +930,7 @@ fn test_try_success() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_try_fail() {\n-    alt do try || {\n+    alt do try {\n         fail\n     } {\n         result::err(()) { }\n@@ -942,7 +942,7 @@ fn test_try_fail() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_spawn_sched_no_threads() {\n-    do spawn_sched(manual_threads(0u)) || { }\n+    do spawn_sched(manual_threads(0u)) { }\n }\n \n #[test]\n@@ -953,7 +953,7 @@ fn test_spawn_sched() {\n     fn f(i: int, ch: comm::chan<()>) {\n         let parent_sched_id = rustrt::rust_get_sched_id();\n \n-        do spawn_sched(single_threaded) || {\n+        do spawn_sched(single_threaded) {\n             let child_sched_id = rustrt::rust_get_sched_id();\n             assert parent_sched_id != child_sched_id;\n \n@@ -974,9 +974,9 @@ fn test_spawn_sched_childs_on_same_sched() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n \n-    do spawn_sched(single_threaded) || {\n+    do spawn_sched(single_threaded) {\n         let parent_sched_id = rustrt::rust_get_sched_id();\n-        do spawn || {\n+        do spawn {\n             let child_sched_id = rustrt::rust_get_sched_id();\n             // This should be on the same scheduler\n             assert parent_sched_id == child_sched_id;\n@@ -1003,7 +1003,7 @@ fn test_spawn_sched_blocking() {\n \n     // Testing that a task in one scheduler can block in foreign code\n     // without affecting other schedulers\n-    for iter::repeat(20u) || {\n+    for iter::repeat(20u) {\n \n         let start_po = comm::port();\n         let start_ch = comm::chan(start_po);\n@@ -1012,7 +1012,7 @@ fn test_spawn_sched_blocking() {\n \n         let lock = testrt::rust_dbg_lock_create();\n \n-        do spawn_sched(single_threaded) || {\n+        do spawn_sched(single_threaded) {\n             testrt::rust_dbg_lock_lock(lock);\n \n             comm::send(start_ch, ());\n@@ -1039,7 +1039,7 @@ fn test_spawn_sched_blocking() {\n         let setup_ch = comm::chan(setup_po);\n         let parent_po = comm::port();\n         let parent_ch = comm::chan(parent_po);\n-        do spawn || {\n+        do spawn {\n             let child_po = comm::port();\n             comm::send(setup_ch, comm::chan(child_po));\n             pingpong(child_po, parent_ch);\n@@ -1064,7 +1064,7 @@ fn avoid_copying_the_body(spawnfn: fn(+fn~())) {\n     let x = ~1;\n     let x_in_parent = ptr::addr_of(*x) as uint;\n \n-    do spawnfn || {\n+    do spawnfn {\n         let x_in_child = ptr::addr_of(*x) as uint;\n         comm::send(ch, x_in_child);\n     }\n@@ -1091,7 +1091,7 @@ fn test_avoid_copying_the_body_spawn_listener() {\n fn test_avoid_copying_the_body_run() {\n     do avoid_copying_the_body |f| {\n         let buildr = builder();\n-        do run(buildr) || {\n+        do run(buildr) {\n             f();\n         }\n     }\n@@ -1110,7 +1110,7 @@ fn test_avoid_copying_the_body_run_listener() {\n #[test]\n fn test_avoid_copying_the_body_try() {\n     do avoid_copying_the_body |f| {\n-        do try || {\n+        do try {\n             f()\n         };\n     }\n@@ -1121,7 +1121,7 @@ fn test_avoid_copying_the_body_future_task() {\n     do avoid_copying_the_body |f| {\n         let buildr = builder();\n         future_task(buildr);\n-        do run(buildr) || {\n+        do run(buildr) {\n             f();\n         }\n     }\n@@ -1132,7 +1132,7 @@ fn test_avoid_copying_the_body_unsupervise() {\n     do avoid_copying_the_body |f| {\n         let buildr = builder();\n         unsupervise(buildr);\n-        do run(buildr) || {\n+        do run(buildr) {\n             f();\n         }\n     }\n@@ -1152,7 +1152,7 @@ fn test_osmain() {\n \n     let po = comm::port();\n     let ch = comm::chan(po);\n-    do run(buildr) || {\n+    do run(buildr) {\n         comm::send(ch, ());\n     }\n     comm::recv(po);\n@@ -1167,20 +1167,20 @@ fn test_unkillable() {\n     let ch = po.chan();\n \n     // We want to do this after failing\n-    do spawn || {\n+    do spawn {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }\n \n-    do spawn || {\n+    do spawn {\n         yield();\n         // We want to fail after the unkillable task\n         // blocks on recv\n         fail;\n     }\n \n     unsafe {\n-        do unkillable || {\n+        do unkillable {\n             let p = ~0;\n             let pp: *uint = unsafe::transmute(p);\n \n@@ -1199,7 +1199,7 @@ fn test_unkillable() {\n fn test_tls_multitask() unsafe {\n     fn my_key(+_x: @str) { }\n     local_data_set(my_key, @\"parent data\");\n-    do task::spawn || {\n+    do task::spawn {\n         assert local_data_get(my_key) == none; // TLS shouldn't carry over.\n         local_data_set(my_key, @\"child data\");\n         assert *(local_data_get(my_key).get()) == \"child data\";\n@@ -1255,7 +1255,7 @@ fn test_tls_crust_automorestack_memorial_bug() unsafe {\n     // something within a rust stack segment. Then a subsequent upcall (esp.\n     // for logging, think vsnprintf) would run on a stack smaller than 1 MB.\n     fn my_key(+_x: @str) { }\n-    do task::spawn || {\n+    do task::spawn {\n         unsafe { local_data_set(my_key, @\"hax\"); }\n     }\n }\n@@ -1265,7 +1265,7 @@ fn test_tls_multiple_types() unsafe {\n     fn str_key(+_x: @str) { }\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n-    do task::spawn || {\n+    do task::spawn {\n         local_data_set(str_key, @\"string data\");\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);\n@@ -1277,7 +1277,7 @@ fn test_tls_overwrite_multiple_types() unsafe {\n     fn str_key(+_x: @str) { }\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n-    do task::spawn || {\n+    do task::spawn {\n         local_data_set(str_key, @\"string data\");\n         local_data_set(int_key, @42);\n         // This could cause a segfault if overwriting-destruction is done with\n@@ -1295,7 +1295,7 @@ fn test_tls_cleanup_on_failure() unsafe {\n     fn int_key(+_x: @int) { }\n     local_data_set(str_key, @\"parent data\");\n     local_data_set(box_key, @@());\n-    do task::spawn || { // spawn_linked\n+    do task::spawn { // spawn_linked\n         local_data_set(str_key, @\"string data\");\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);"}, {"sha": "2258f63b660083d0c8a5180ec03448428e94d4e6", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -360,7 +360,7 @@ impl serializer of serialization::serializer for ebml::writer {\n     fn emit_enum_variant_arg(_idx: uint, f: fn()) { f() }\n \n     fn emit_vec(len: uint, f: fn()) {\n-        do self.wr_tag(es_vec as uint) || {\n+        do self.wr_tag(es_vec as uint) {\n             self._emit_tagged_uint(es_vec_len, len);\n             f()\n         }\n@@ -487,7 +487,7 @@ impl deserializer of serialization::deserializer for ebml_deserializer {\n         #debug[\"read_enum_variant()\"];\n         let idx = self._next_uint(es_enum_vid);\n         #debug[\"  idx=%u\", idx];\n-        do self.push_doc(self.next_doc(es_enum_body)) || {\n+        do self.push_doc(self.next_doc(es_enum_body)) {\n             f(idx)\n         }\n     }\n@@ -499,7 +499,7 @@ impl deserializer of serialization::deserializer for ebml_deserializer {\n \n     fn read_vec<T:copy>(f: fn(uint) -> T) -> T {\n         #debug[\"read_vec()\"];\n-        do self.push_doc(self.next_doc(es_vec)) || {\n+        do self.push_doc(self.next_doc(es_vec)) {\n             let len = self._next_uint(es_vec_len);\n             #debug[\"  len=%u\", len];\n             f(len)\n@@ -554,13 +554,13 @@ fn test_option_int() {\n     }\n \n     fn serialize_0<S: serialization::serializer>(s: S, v: option<int>) {\n-        do s.emit_enum(\"core::option::t\") || {\n+        do s.emit_enum(\"core::option::t\") {\n             alt v {\n               none {\n                 s.emit_enum_variant(\"core::option::none\", 0u, 0u, || { } );\n               }\n               some(v0) {\n-                do s.emit_enum_variant(\"core::option::some\", 1u, 1u) || {\n+                do s.emit_enum_variant(\"core::option::some\", 1u, 1u) {\n                     s.emit_enum_variant_arg(0u, || serialize_1(s, v0));\n                 }\n               }\n@@ -573,12 +573,12 @@ fn test_option_int() {\n     }\n \n     fn deserialize_0<S: serialization::deserializer>(s: S) -> option<int> {\n-        do s.read_enum(\"core::option::t\") || {\n+        do s.read_enum(\"core::option::t\") {\n             do s.read_enum_variant |i| {\n                 alt check i {\n                   0u { none }\n                   1u {\n-                    let v0 = do s.read_enum_variant_arg(0u) || {\n+                    let v0 = do s.read_enum_variant_arg(0u) {\n                         deserialize_1(s)\n                     };\n                     some(v0)"}, {"sha": "c29c3349f76f6630ee5fa488c15384c36eb74ccc", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -305,7 +305,7 @@ value as the `err` variant\n fn write_future(sock: tcp_socket, raw_write_data: ~[u8])\n     -> future::future<result::result<(), tcp_err_data>> unsafe {\n     let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n-    do future_spawn || {\n+    do future_spawn {\n         let data_copy = copy(raw_write_data);\n         write_common_impl(socket_data_ptr, data_copy)\n     }\n@@ -397,7 +397,7 @@ read attempt. Pass `0u` to wait indefinitely\n fn read_future(sock: tcp_socket, timeout_msecs: uint)\n     -> future::future<result::result<~[u8],tcp_err_data>> {\n     let socket_data = ptr::addr_of(*(sock.socket_data));\n-    do future_spawn || {\n+    do future_spawn {\n         read_common_impl(socket_data, timeout_msecs)\n     }\n }\n@@ -1310,7 +1310,7 @@ mod test {\n         let cont_po = comm::port::<()>();\n         let cont_ch = comm::chan(cont_po);\n         // server\n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             let actual_req = do comm::listen |server_ch| {\n                 run_tcp_test_server(\n                     server_ip,\n@@ -1379,7 +1379,7 @@ mod test {\n         let cont_po = comm::port::<()>();\n         let cont_ch = comm::chan(cont_po);\n         // server\n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             let actual_req = do comm::listen |server_ch| {\n                 run_tcp_test_server(\n                     server_ip,\n@@ -1449,7 +1449,7 @@ mod test {\n         let cont_po = comm::port::<()>();\n         let cont_ch = comm::chan(cont_po);\n         // server\n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             let actual_req = do comm::listen |server_ch| {\n                 run_tcp_test_server(\n                     server_ip,\n@@ -1519,7 +1519,7 @@ mod test {\n             |new_conn, kill_ch| {\n             log(debug, \"SERVER: new connection!\");\n             do comm::listen |cont_ch| {\n-                do task::spawn_sched(task::manual_threads(1u)) || {\n+                do task::spawn_sched(task::manual_threads(1u)) {\n                     log(debug, \"SERVER: starting worker for new req\");\n \n                     let accept_result = accept(new_conn);"}, {"sha": "14da0fa86e12b87cbb752fa013f7afea69428ffe", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -84,9 +84,9 @@ iface deserializer {\n // In some cases, these should eventually be coded as traits.\n \n fn emit_from_vec<S: serializer, T>(s: S, v: ~[T], f: fn(T)) {\n-    do s.emit_vec(vec::len(v)) || {\n+    do s.emit_vec(vec::len(v)) {\n         do vec::iteri(v) |i,e| {\n-            do s.emit_vec_elt(i) || {\n+            do s.emit_vec_elt(i) {\n                 f(e)\n             }\n         }\n@@ -234,16 +234,16 @@ fn deserialize_bool<D: deserializer>(d: D) -> bool {\n }\n \n fn serialize_option<S: serializer,T>(s: S, v: option<T>, st: fn(T)) {\n-    do s.emit_enum(\"option\") || {\n+    do s.emit_enum(\"option\") {\n         alt v {\n           none {\n-            do s.emit_enum_variant(\"none\", 0u, 0u) || {\n+            do s.emit_enum_variant(\"none\", 0u, 0u) {\n             }\n           }\n \n           some(v) {\n-            do s.emit_enum_variant(\"some\", 1u, 1u) || {\n-                do s.emit_enum_variant_arg(0u) || {\n+            do s.emit_enum_variant(\"some\", 1u, 1u) {\n+                do s.emit_enum_variant_arg(0u) {\n                     st(v)\n                 }\n             }\n@@ -254,7 +254,7 @@ fn serialize_option<S: serializer,T>(s: S, v: option<T>, st: fn(T)) {\n \n fn deserialize_option<D: deserializer,T: copy>(d: D, st: fn() -> T)\n     -> option<T> {\n-    do d.read_enum(\"option\") || {\n+    do d.read_enum(\"option\") {\n         do d.read_enum_variant |i| {\n             alt check i {\n               0u { // none"}, {"sha": "a4acc097ab2691d1a0239366cda9433763877ca3", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -390,7 +390,7 @@ fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n         ret;\n     }\n \n-    do task::spawn || {\n+    do task::spawn {\n         let testfn = copy test.fn;\n         let mut builder = task::builder();\n         let result_future = task::future_result(builder);"}, {"sha": "f8440443e6edd4e0d1ddbd064f483417ff2ad575", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -151,7 +151,7 @@ mod test {\n     #[test]\n     fn test_gl_timer_sleep_stress1() {\n         let hl_loop = uv::global_loop::get();\n-        for iter::repeat(200u) || {\n+        for iter::repeat(200u) {\n             sleep(hl_loop, 1u);\n         }\n     }\n@@ -171,22 +171,22 @@ mod test {\n \n         };\n \n-        for iter::repeat(repeat) || {\n+        for iter::repeat(repeat) {\n \n             for spec.each |spec| {\n                 let (times, maxms) = spec;\n-                do task::spawn || {\n+                do task::spawn {\n                     import rand::*;\n                     let rng = rng();\n-                    for iter::repeat(times) || {\n+                    for iter::repeat(times) {\n                         sleep(hl_loop, rng.next() as uint % maxms);\n                     }\n                     comm::send(ch, ());\n                 }\n             }\n         }\n \n-        for iter::repeat(repeat * spec.len()) || {\n+        for iter::repeat(repeat * spec.len()) {\n             comm::recv(po)\n         }\n     }\n@@ -204,14 +204,14 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        for iter::repeat(times as uint) || {\n+        for iter::repeat(times as uint) {\n             task::yield();\n \n             let expected = rand::rng().gen_str(16u);\n             let test_po = comm::port::<str>();\n             let test_ch = comm::chan(test_po);\n \n-            do task::spawn() || {\n+            do task::spawn() {\n                 delayed_send(hl_loop, 1u, test_ch, expected);\n             };\n \n@@ -231,12 +231,12 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        for iter::repeat(times as uint) || {\n+        for iter::repeat(times as uint) {\n             let expected = rand::rng().gen_str(16u);\n             let test_po = comm::port::<str>();\n             let test_ch = comm::chan(test_po);\n \n-            do task::spawn() || {\n+            do task::spawn() {\n                 delayed_send(hl_loop, 1000u, test_ch, expected);\n             };\n "}, {"sha": "6384e5b686471d751d8d04ec3ca2585b543285fe", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -191,16 +191,16 @@ mod test {\n         let exit_po = comm::port::<()>();\n         let exit_ch = comm::chan(exit_po);\n         let cycles = 5000u;\n-        for iter::repeat(cycles) || {\n+        for iter::repeat(cycles) {\n             task::spawn_sched(task::manual_threads(1u), || {\n                 impl_uv_hl_simple_timer(hl_loop);\n                 comm::send(exit_ch, ());\n             });\n         };\n-        for iter::repeat(cycles) || {\n+        for iter::repeat(cycles) {\n             comm::recv(exit_po);\n         };\n         log(debug, \"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n             \" exiting sucessfully!\");\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fce69691bde314258bbb6505cf54823ae38c191e", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -41,7 +41,7 @@ fn spawn_iotask(-builder: task::builder) -> iotask {\n \n     do listen |iotask_ch| {\n \n-        do run(copy(builder)) || {\n+        do run(copy(builder)) {\n             #debug(\"entering libuv task\");\n             run_loop(iotask_ch);\n             #debug(\"libuv task exiting\");\n@@ -224,7 +224,7 @@ mod test {\n     unsafe fn spawn_test_loop(exit_ch: comm::chan<()>) -> iotask {\n         let iotask_port = comm::port::<iotask>();\n         let iotask_ch = comm::chan(iotask_port);\n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             run_loop(iotask_ch);\n             exit_ch.send(());\n         };\n@@ -255,13 +255,13 @@ mod test {\n         // called, at least.\n         let work_exit_po = comm::port::<()>();\n         let work_exit_ch = comm::chan(work_exit_po);\n-        for iter::repeat(7u) || {\n-            do task::spawn_sched(task::manual_threads(1u)) || {\n+        for iter::repeat(7u) {\n+            do task::spawn_sched(task::manual_threads(1u)) {\n                 impl_uv_iotask_async(iotask);\n                 comm::send(work_exit_ch, ());\n             };\n         };\n-        for iter::repeat(7u) || {\n+        for iter::repeat(7u) {\n             comm::recv(work_exit_po);\n         };\n         log(debug, \"sending teardown_loop msg..\");"}, {"sha": "b302c9103a077546a402147be4c78ff7022c0d17", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -1473,7 +1473,7 @@ mod test {\n         let continue_chan = comm::chan::<bool>(continue_port);\n         let continue_chan_ptr = ptr::addr_of(continue_chan);\n \n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             impl_uv_tcp_server(bind_ip, port,\n                                kill_server_msg,\n                                server_resp_msg,\n@@ -1486,7 +1486,7 @@ mod test {\n         comm::recv(continue_port);\n         log(debug, \"received on continue port, set up tcp client\");\n \n-        do task::spawn_sched(task::manual_threads(1u)) || {\n+        do task::spawn_sched(task::manual_threads(1u)) {\n             impl_uv_tcp_request(request_ip, port,\n                                kill_server_msg,\n                                ptr::addr_of(client_chan));"}, {"sha": "bea8f6c28e98ad1ac5f1cc3c7caf300847e46c3b", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -211,7 +211,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n     let p = comm::port();\n     let ch = comm::chan(p);\n \n-    alt do task::try  || {\n+    alt do task::try  {\n \n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function."}, {"sha": "4907b83510771c60d43a0b1610af3859967228e4", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -87,20 +87,20 @@ fn encode_name_and_def_id(ebml_w: ebml::writer, nm: ident,\n }\n \n fn encode_region_param(ebml_w: ebml::writer, rp: region_param) {\n-    do ebml_w.wr_tag(tag_region_param) || {\n+    do ebml_w.wr_tag(tag_region_param) {\n         serialize_region_param(ebml_w, rp)\n     }\n }\n \n fn encode_named_def_id(ebml_w: ebml::writer, name: ident, id: def_id) {\n-    do ebml_w.wr_tag(tag_paths_data_item) || {\n+    do ebml_w.wr_tag(tag_paths_data_item) {\n         encode_name(ebml_w, name);\n         encode_def_id(ebml_w, id);\n     }\n }\n \n fn encode_mutability(ebml_w: ebml::writer, mt: class_mutability) {\n-    do ebml_w.wr_tag(tag_class_mut) || {\n+    do ebml_w.wr_tag(tag_class_mut) {\n         ebml_w.writer.write(&[alt mt { class_immutable { 'i' }\n                 class_mutable { 'm' } } as u8]);\n         }\n@@ -112,7 +112,7 @@ fn encode_enum_variant_paths(ebml_w: ebml::writer, variants: ~[variant],\n                             path: ~[ident], &index: ~[entry<str>]) {\n     for variants.each |variant| {\n         add_to_index(ebml_w, path, index, variant.node.name);\n-        do ebml_w.wr_tag(tag_paths_data_item) || {\n+        do ebml_w.wr_tag(tag_paths_data_item) {\n             encode_name(ebml_w, variant.node.name);\n             encode_def_id(ebml_w, local_def(variant.node.id));\n         }\n@@ -170,31 +170,31 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             encode_named_def_id(ebml_w, it.ident, local_def(it.id));\n           }\n           item_mod(_mod) {\n-            do ebml_w.wr_tag(tag_paths_data_mod) || {\n+            do ebml_w.wr_tag(tag_paths_data_mod) {\n                encode_name_and_def_id(ebml_w, it.ident, it.id);\n                encode_module_item_paths(ebml_w, ecx, _mod,\n                                         vec::append_one(path, it.ident),\n                                         index);\n             }\n           }\n           item_foreign_mod(nmod) {\n-            do ebml_w.wr_tag(tag_paths_data_mod) || {\n+            do ebml_w.wr_tag(tag_paths_data_mod) {\n               encode_name_and_def_id(ebml_w, it.ident, it.id);\n               encode_foreign_module_item_paths(\n                   ebml_w, nmod,\n                   vec::append_one(path, it.ident), index);\n             }\n           }\n           item_ty(_, tps, _) {\n-            do ebml_w.wr_tag(tag_paths_data_item) || {\n+            do ebml_w.wr_tag(tag_paths_data_item) {\n               encode_name_and_def_id(ebml_w, it.ident, it.id);\n             }\n           }\n           item_class(_, _, items, ctor, m_dtor, _) {\n-            do ebml_w.wr_tag(tag_paths_data_item) || {\n+            do ebml_w.wr_tag(tag_paths_data_item) {\n                 encode_name_and_def_id(ebml_w, it.ident, it.id);\n             }\n-            do ebml_w.wr_tag(tag_paths) || {\n+            do ebml_w.wr_tag(tag_paths) {\n                 // We add the same ident twice: for the\n                 // class and for its ctor\n                 add_to_index(ebml_w, path, index, it.ident);\n@@ -206,13 +206,13 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             }\n           }\n           item_enum(variants, _, _) {\n-            do ebml_w.wr_tag(tag_paths_data_item) || {\n+            do ebml_w.wr_tag(tag_paths_data_item) {\n                   encode_name_and_def_id(ebml_w, it.ident, it.id);\n               }\n               encode_enum_variant_paths(ebml_w, variants, path, index);\n           }\n           item_iface(*) {\n-            do ebml_w.wr_tag(tag_paths_data_item) || {\n+            do ebml_w.wr_tag(tag_paths_data_item) {\n                   encode_name_and_def_id(ebml_w, it.ident, it.id);\n               }\n           }\n@@ -372,7 +372,7 @@ fn encode_path(ebml_w: ebml::writer,\n         ebml_w.wr_tagged_str(tag, *name);\n     }\n \n-    do ebml_w.wr_tag(tag_path) || {\n+    do ebml_w.wr_tag(tag_path) {\n         ebml_w.wr_tagged_u32(tag_path_len, (vec::len(path) + 1u) as u32);\n         do vec::iter(path) |pe| { encode_path_elt(ebml_w, pe); }\n         encode_path_elt(ebml_w, name);\n@@ -606,7 +606,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n       }\n       item_enum(variants, tps, rp) {\n         add_to_index();\n-        do ebml_w.wr_tag(tag_items_data_item) || {\n+        do ebml_w.wr_tag(tag_items_data_item) {\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_family(ebml_w, 't');\n             encode_type_param_bounds(ebml_w, ecx, tps);\n@@ -656,7 +656,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         /* Encode the dtor */\n         /* Encode id for dtor */\n         do option::iter(m_dtor) |dtor| {\n-            do ebml_w.wr_tag(tag_item_dtor) || {\n+            do ebml_w.wr_tag(tag_item_dtor) {\n                 encode_def_id(ebml_w, local_def(dtor.node.id));\n             }\n         };"}, {"sha": "c0d34ec33251b91443237cbb0d4f1785130cadc7", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -87,7 +87,7 @@ fn encode_inlined_item(ecx: @e::encode_ctxt,\n            ebml_w.writer.tell()];\n \n     let id_range = ast_util::compute_id_range_for_inlined_item(ii);\n-    do ebml_w.wr_tag(c::tag_ast as uint) || {\n+    do ebml_w.wr_tag(c::tag_ast as uint) {\n         ast_util::serialize_id_range(ebml_w, id_range);\n         encode_ast(ebml_w, simplify_ast(ii));\n         encode_side_tables_for_ii(ecx, maps, ebml_w, ii);\n@@ -210,7 +210,7 @@ impl deserializer_helpers<D: deserializer> for D {\n // but eventually we should add entries to the local codemap as required.\n \n fn encode_ast(ebml_w: ebml::writer, item: ast::inlined_item) {\n-    do ebml_w.wr_tag(c::tag_tree as uint) || {\n+    do ebml_w.wr_tag(c::tag_tree as uint) {\n         ast::serialize_inlined_item(ebml_w, item)\n     }\n }\n@@ -433,37 +433,37 @@ fn encode_vtable_res(ecx: @e::encode_ctxt,\n fn encode_vtable_origin(ecx: @e::encode_ctxt,\n                       ebml_w: ebml::writer,\n                       vtable_origin: typeck::vtable_origin) {\n-    do ebml_w.emit_enum(\"vtable_origin\") || {\n+    do ebml_w.emit_enum(\"vtable_origin\") {\n         alt vtable_origin {\n           typeck::vtable_static(def_id, tys, vtable_res) {\n-            do ebml_w.emit_enum_variant(\"vtable_static\", 0u, 3u) || {\n-                do ebml_w.emit_enum_variant_arg(0u) || {\n+            do ebml_w.emit_enum_variant(\"vtable_static\", 0u, 3u) {\n+                do ebml_w.emit_enum_variant_arg(0u) {\n                     ebml_w.emit_def_id(def_id)\n                 }\n-                do ebml_w.emit_enum_variant_arg(1u) || {\n+                do ebml_w.emit_enum_variant_arg(1u) {\n                     ebml_w.emit_tys(ecx, tys);\n                 }\n-                do ebml_w.emit_enum_variant_arg(2u) || {\n+                do ebml_w.emit_enum_variant_arg(2u) {\n                     encode_vtable_res(ecx, ebml_w, vtable_res);\n                 }\n             }\n           }\n           typeck::vtable_param(pn, bn) {\n-            do ebml_w.emit_enum_variant(\"vtable_param\", 1u, 2u) || {\n-                do ebml_w.emit_enum_variant_arg(0u) || {\n+            do ebml_w.emit_enum_variant(\"vtable_param\", 1u, 2u) {\n+                do ebml_w.emit_enum_variant_arg(0u) {\n                     ebml_w.emit_uint(pn);\n                 }\n-                do ebml_w.emit_enum_variant_arg(1u) || {\n+                do ebml_w.emit_enum_variant_arg(1u) {\n                     ebml_w.emit_uint(bn);\n                 }\n             }\n           }\n           typeck::vtable_iface(def_id, tys) {\n-            do ebml_w.emit_enum_variant(\"vtable_iface\", 1u, 3u) || {\n-                do ebml_w.emit_enum_variant_arg(0u) || {\n+            do ebml_w.emit_enum_variant(\"vtable_iface\", 1u, 3u) {\n+                do ebml_w.emit_enum_variant_arg(0u) {\n                     ebml_w.emit_def_id(def_id)\n                 }\n-                do ebml_w.emit_enum_variant_arg(1u) || {\n+                do ebml_w.emit_enum_variant_arg(1u) {\n                     ebml_w.emit_tys(ecx, tys);\n                 }\n             }\n@@ -480,38 +480,38 @@ impl helpers for ebml::ebml_deserializer {\n \n     fn read_vtable_origin(xcx: extended_decode_ctxt)\n         -> typeck::vtable_origin {\n-        do self.read_enum(\"vtable_origin\") || {\n+        do self.read_enum(\"vtable_origin\") {\n             do self.read_enum_variant |i| {\n                 alt check i {\n                   0u {\n                     typeck::vtable_static(\n-                        do self.read_enum_variant_arg(0u) || {\n+                        do self.read_enum_variant_arg(0u) {\n                             self.read_def_id(xcx)\n                         },\n-                        do self.read_enum_variant_arg(1u) || {\n+                        do self.read_enum_variant_arg(1u) {\n                             self.read_tys(xcx)\n                         },\n-                        do self.read_enum_variant_arg(2u) || {\n+                        do self.read_enum_variant_arg(2u) {\n                             self.read_vtable_res(xcx)\n                         }\n                     )\n                   }\n                   1u {\n                     typeck::vtable_param(\n-                        do self.read_enum_variant_arg(0u) || {\n+                        do self.read_enum_variant_arg(0u) {\n                             self.read_uint()\n                         },\n-                        do self.read_enum_variant_arg(1u) || {\n+                        do self.read_enum_variant_arg(1u) {\n                             self.read_uint()\n                         }\n                     )\n                   }\n                   2u {\n                     typeck::vtable_iface(\n-                        do self.read_enum_variant_arg(0u) || {\n+                        do self.read_enum_variant_arg(0u) {\n                             self.read_def_id(xcx)\n                         },\n-                        do self.read_enum_variant_arg(1u) || {\n+                        do self.read_enum_variant_arg(1u) {\n                             self.read_tys(xcx)\n                         }\n                     )\n@@ -551,16 +551,16 @@ impl helpers for ebml::writer {\n     }\n \n     fn emit_tpbt(ecx: @e::encode_ctxt, tpbt: ty::ty_param_bounds_and_ty) {\n-        do self.emit_rec || {\n-            do self.emit_rec_field(\"bounds\", 0u) || {\n+        do self.emit_rec {\n+            do self.emit_rec_field(\"bounds\", 0u) {\n                 do self.emit_from_vec(*tpbt.bounds) |bs| {\n                     self.emit_bounds(ecx, bs)\n                 }\n             }\n-            do self.emit_rec_field(\"rp\", 1u) || {\n+            do self.emit_rec_field(\"rp\", 1u) {\n                 ast::serialize_region_param(self, tpbt.rp)\n             }\n-            do self.emit_rec_field(\"ty\", 2u) || {\n+            do self.emit_rec_field(\"ty\", 2u) {\n                 self.emit_ty(ecx, tpbt.ty);\n             }\n         }\n@@ -569,7 +569,7 @@ impl helpers for ebml::writer {\n \n impl writer for ebml::writer {\n     fn tag(tag_id: c::astencode_tag, f: fn()) {\n-        do self.wr_tag(tag_id as uint) || { f() }\n+        do self.wr_tag(tag_id as uint) { f() }\n     }\n \n     fn id(id: ast::node_id) {\n@@ -581,7 +581,7 @@ fn encode_side_tables_for_ii(ecx: @e::encode_ctxt,\n                              maps: maps,\n                              ebml_w: ebml::writer,\n                              ii: ast::inlined_item) {\n-    do ebml_w.wr_tag(c::tag_table as uint) || {\n+    do ebml_w.wr_tag(c::tag_table as uint) {\n         ast_util::visit_ids_for_inlined_item(\n             ii,\n             fn@(id: ast::node_id, copy ebml_w) {\n@@ -602,35 +602,35 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     #debug[\"Encoding side tables for id %d\", id];\n \n     do option::iter(tcx.def_map.find(id)) |def| {\n-        do ebml_w.tag(c::tag_table_def) || {\n+        do ebml_w.tag(c::tag_table_def) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 ast::serialize_def(ebml_w, def)\n             }\n         }\n     }\n     do option::iter((*tcx.node_types).find(id as uint)) |ty| {\n-        do ebml_w.tag(c::tag_table_node_type) || {\n+        do ebml_w.tag(c::tag_table_node_type) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 e::write_type(ecx, ebml_w, ty)\n             }\n         }\n     }\n \n     do option::iter(tcx.node_type_substs.find(id)) |tys| {\n-        do ebml_w.tag(c::tag_table_node_type_subst) || {\n+        do ebml_w.tag(c::tag_table_node_type_subst) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 ebml_w.emit_tys(ecx, tys)\n             }\n         }\n     }\n \n     do option::iter(tcx.freevars.find(id)) |fv| {\n-        do ebml_w.tag(c::tag_table_freevars) || {\n+        do ebml_w.tag(c::tag_table_freevars) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 do ebml_w.emit_from_vec(*fv) |fv_entry| {\n                     encode_freevar_entry(ebml_w, *fv_entry)\n                 }\n@@ -640,18 +640,18 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n \n     let lid = {crate: ast::local_crate, node: id};\n     do option::iter(tcx.tcache.find(lid)) |tpbt| {\n-        do ebml_w.tag(c::tag_table_tcache) || {\n+        do ebml_w.tag(c::tag_table_tcache) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 ebml_w.emit_tpbt(ecx, tpbt);\n             }\n         }\n     }\n \n     do option::iter(tcx.ty_param_bounds.find(id)) |pbs| {\n-        do ebml_w.tag(c::tag_table_param_bounds) || {\n+        do ebml_w.tag(c::tag_table_param_bounds) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 ebml_w.emit_bounds(ecx, pbs)\n             }\n         }\n@@ -672,15 +672,15 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     //}\n \n     do option::iter(maps.mutbl_map.find(id)) |_m| {\n-        do ebml_w.tag(c::tag_table_mutbl) || {\n+        do ebml_w.tag(c::tag_table_mutbl) {\n             ebml_w.id(id);\n         }\n     }\n \n     do option::iter(maps.last_use_map.find(id)) |m| {\n-        do ebml_w.tag(c::tag_table_last_use) || {\n+        do ebml_w.tag(c::tag_table_last_use) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 do ebml_w.emit_from_vec((*m).get()) |id| {\n                     ebml_w.emit_int(id);\n                 }\n@@ -692,27 +692,27 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // don't need to keep it.\n \n     do option::iter(maps.method_map.find(id)) |mme| {\n-        do ebml_w.tag(c::tag_table_method_map) || {\n+        do ebml_w.tag(c::tag_table_method_map) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 serialize_method_map_entry(ebml_w, mme)\n             }\n         }\n     }\n \n     do option::iter(maps.vtable_map.find(id)) |dr| {\n-        do ebml_w.tag(c::tag_table_vtable_map) || {\n+        do ebml_w.tag(c::tag_table_vtable_map) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 encode_vtable_res(ecx, ebml_w, dr);\n             }\n         }\n     }\n \n     do option::iter(tcx.borrowings.find(id)) |borrow| {\n-        do ebml_w.tag(c::tag_table_borrowings) || {\n+        do ebml_w.tag(c::tag_table_borrowings) {\n             ebml_w.id(id);\n-            do ebml_w.tag(c::tag_table_val) || {\n+            do ebml_w.tag(c::tag_table_val) {\n                 ty::serialize_borrow(ebml_w, borrow)\n             }\n         }\n@@ -753,7 +753,7 @@ impl decoder for ebml::ebml_deserializer {\n \n     fn read_ty_param_bounds_and_ty(xcx: extended_decode_ctxt)\n         -> ty::ty_param_bounds_and_ty {\n-        do self.read_rec || {\n+        do self.read_rec {\n             {\n                 bounds: self.read_rec_field(\"bounds\", 0u, || {\n                     @self.read_to_vec(|| self.read_bounds(xcx) )\n@@ -838,7 +838,7 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n \n #[cfg(test)]\n fn encode_item_ast(ebml_w: ebml::writer, item: @ast::item) {\n-    do ebml_w.wr_tag(c::tag_tree as uint) || {\n+    do ebml_w.wr_tag(c::tag_tree as uint) {\n         ast::serialize_item(ebml_w, *item);\n     }\n }"}, {"sha": "ab1e9b5505ed4e42f0c25084c7555172c70630d6", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -508,9 +508,9 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                      visitor: visit::vt<check_loan_ctxt>) {\n \n     #debug[\"purity on entry=%?\", copy self.declared_purity];\n-    do save_and_restore(self.in_ctor) || {\n-        do save_and_restore(self.declared_purity) || {\n-            do save_and_restore(self.fn_args) || {\n+    do save_and_restore(self.in_ctor) {\n+        do save_and_restore(self.declared_purity) {\n+            do save_and_restore(self.fn_args) {\n                 let is_stack_closure = self.is_stack_closure(id);\n \n                 // In principle, we could consider fk_anon(*) or\n@@ -637,7 +637,7 @@ fn check_loans_in_expr(expr: @ast::expr,\n fn check_loans_in_block(blk: ast::blk,\n                         &&self: check_loan_ctxt,\n                         vt: visit::vt<check_loan_ctxt>) {\n-    do save_and_restore(self.declared_purity) || {\n+    do save_and_restore(self.declared_purity) {\n         self.check_for_conflicting_loans(blk.node.id);\n \n         alt blk.node.rules {"}, {"sha": "46bbeedeedd7ceddefba63ff7b29e0e50f41426f", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -2800,15 +2800,15 @@ class Resolver {\n \n             item_mod(module) {\n                 let atom = (*self.atom_table).intern(item.ident);\n-                do self.with_scope(some(atom)) || {\n+                do self.with_scope(some(atom)) {\n                     self.resolve_module(module, item.span, item.ident,\n                                         item.id, visitor);\n                 }\n             }\n \n             item_foreign_mod(foreign_module) {\n                 let atom = (*self.atom_table).intern(item.ident);\n-                do self.with_scope(some(atom)) || {\n+                do self.with_scope(some(atom)) {\n                     for foreign_module.items.each |foreign_item| {\n                         alt foreign_item.node {\n                             foreign_item_fn(_, type_parameters) {\n@@ -2935,7 +2935,7 @@ class Resolver {\n         (*self.value_ribs).push(function_value_rib);\n \n         // If this function has type parameters, add them now.\n-        do self.with_type_parameter_rib(type_parameters) || {\n+        do self.with_type_parameter_rib(type_parameters) {\n             // Resolve the type parameters.\n             alt type_parameters {\n                 NoTypeParameters {"}, {"sha": "04174b0cedb36bfd8a3e02b5fb073ae3b07789d9", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -412,7 +412,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy>(\n     expected_tys: expected_tys) -> ty::fn_ty {\n \n     #debug[\"ty_of_fn_decl\"];\n-    do indent || {\n+    do indent {\n         // new region names that appear inside of the fn decl are bound to\n         // that function type\n         let rb = in_binding_rscope(rscope);"}, {"sha": "5f2aa608e620dfa3613492f5e70a44fcc111680a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -632,7 +632,7 @@ fn check_expr_with(fcx: @fn_ctxt, expr: @ast::expr, expected: ty::t) -> bool {\n \n fn check_expr(fcx: @fn_ctxt, expr: @ast::expr,\n               expected: option<ty::t>) -> bool {\n-    ret do check_expr_with_unifier(fcx, expr, expected) || {\n+    ret do check_expr_with_unifier(fcx, expr, expected) {\n         for expected.each |t| {\n             demand::suptype(fcx, expr.span, t, fcx.expr_ty(expr));\n         }"}, {"sha": "a8005ec6cbb837a6e948e3146d30ccdae62e6f46", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -771,9 +771,9 @@ impl unify_methods for infer_ctxt {\n         // them explicitly gives the type inferencer more\n         // information and helps to produce tighter bounds\n         // when necessary.\n-        do indent || {\n-        do self.bnds(a.lb, b.ub).then || {\n-        do self.bnds(b.lb, a.ub).then || {\n+        do indent {\n+        do self.bnds(a.lb, b.ub).then {\n+        do self.bnds(b.lb, a.ub).then {\n         do self.merge_bnd(a.ub, b.ub, |x, y| x.glb(self, y) ).chain |ub| {\n         do self.merge_bnd(a.lb, b.lb, |x, y| x.lub(self, y) ).chain |lb| {\n             let bnds = {lb: lb, ub: ub};\n@@ -783,7 +783,7 @@ impl unify_methods for infer_ctxt {\n \n             // the new bounds must themselves\n             // be relatable:\n-            do self.bnds(bnds.lb, bnds.ub).then || {\n+            do self.bnds(bnds.lb, bnds.ub).then {\n                 self.set(vb, v_id, root(bnds, rank));\n                 uok()\n             }\n@@ -1021,7 +1021,7 @@ impl unify_methods for infer_ctxt {\n         a: bound<T>, b: bound<T>) -> ures {\n \n         #debug(\"bnds(%s <: %s)\", a.to_str(self), b.to_str(self));\n-        do indent || {\n+        do indent {\n             alt (a, b) {\n               (none, none) |\n               (some(_), none) |\n@@ -1064,8 +1064,8 @@ impl unify_methods for infer_ctxt {\n     fn eq_regions(a: ty::region, b: ty::region) -> ures {\n         #debug[\"eq_regions(%s, %s)\",\n                a.to_str(self), b.to_str(self)];\n-        do indent || {\n-            do self.sub_regions(a, b).then || {\n+        do indent {\n+            do self.sub_regions(a, b).then {\n                 self.sub_regions(b, a)\n             }\n         }\n@@ -1457,8 +1457,8 @@ impl assignment for infer_ctxt {\n                anmnt, a.to_str(self), nr_b.to_str(self),\n                r_b.to_str(self)];\n \n-        do indent || {\n-            do self.sub_tys(a, nr_b).then || {\n+        do indent {\n+            do self.sub_tys(a, nr_b).then {\n                 let r_a = ty::re_scope(anmnt.borrow_scope);\n                 #debug[\"anmnt=%?\", anmnt];\n                 do sub(self).contraregions(r_a, r_b).chain |_r| {\n@@ -1559,7 +1559,7 @@ fn super_substs<C:combine>(\n             ok(none)\n           }\n           (some(a), some(b)) {\n-            do infcx.eq_regions(a, b).then || {\n+            do infcx.eq_regions(a, b).then {\n                 ok(some(a))\n             }\n           }\n@@ -1868,7 +1868,7 @@ fn super_tys<C:combine>(\n \n       (ty::ty_constr(a_t, a_constrs), ty::ty_constr(b_t, b_constrs)) {\n         do self.tys(a_t, b_t).chain |t| {\n-            do self.infcx().constrvecs(a_constrs, b_constrs).then || {\n+            do self.infcx().constrvecs(a_constrs, b_constrs).then {\n                 ok(ty::mk_constr(tcx, t, a_constrs))\n             }\n         }\n@@ -1897,25 +1897,25 @@ impl of combine for sub {\n                self.tag(),\n                a.to_str(self.infcx()),\n                b.to_str(self.infcx())];\n-        do indent || {\n+        do indent {\n             alt (a, b) {\n               (ty::re_var(a_id), ty::re_var(b_id)) {\n-                do self.infcx().vars(self.rb, a_id, b_id).then || {\n+                do self.infcx().vars(self.rb, a_id, b_id).then {\n                     ok(a)\n                 }\n               }\n               (ty::re_var(a_id), _) {\n-                do self.infcx().vart(self.rb, a_id, b).then || {\n+                do self.infcx().vart(self.rb, a_id, b).then {\n                       ok(a)\n                   }\n               }\n               (_, ty::re_var(b_id)) {\n-                  do self.infcx().tvar(self.rb, a, b_id).then || {\n+                  do self.infcx().tvar(self.rb, a, b_id).then {\n                       ok(a)\n                   }\n               }\n               _ {\n-                  do self.lub().regions(a, b).compare(b) || {\n+                  do self.lub().regions(a, b).compare(b) {\n                     ty::terr_regions_differ(b, a)\n                 }\n               }\n@@ -1965,7 +1965,7 @@ impl of combine for sub {\n         #debug(\"%s.tys(%s, %s)\", self.tag(),\n                a.to_str(*self), b.to_str(*self));\n         if a == b { ret ok(a); }\n-        do indent || {\n+        do indent {\n             alt (ty::get(a).struct, ty::get(b).struct) {\n               (ty::ty_bot, _) {\n                 ok(a)\n@@ -2144,7 +2144,7 @@ impl of combine for lub {\n                a.to_str(self.infcx()),\n                b.to_str(self.infcx())];\n \n-        do indent || {\n+        do indent {\n             alt (a, b) {\n               (ty::re_static, _) | (_, ty::re_static) {\n                 ok(ty::re_static) // nothing lives longer than static\n@@ -2341,7 +2341,7 @@ impl of combine for glb {\n                a.to_str(self.infcx()),\n                b.to_str(self.infcx())];\n \n-        do indent || {\n+        do indent {\n             alt (a, b) {\n               (ty::re_static, r) | (r, ty::re_static) {\n                 // static lives longer than everything else\n@@ -2479,7 +2479,7 @@ fn lattice_tys<L:lattice_ops combine>(\n            a.to_str(self.infcx()),\n            b.to_str(self.infcx()));\n     if a == b { ret ok(a); }\n-    do indent || {\n+    do indent {\n         alt (ty::get(a).struct, ty::get(b).struct) {\n           (ty::ty_bot, _) { self.ty_bot(b) }\n           (_, ty::ty_bot) { self.ty_bot(a) }\n@@ -2606,7 +2606,7 @@ fn lattice_var_t<V:copy vid, T:copy to_str st, L:lattice_ops combine>(\n         // and then return b.\n         #debug[\"bnd=none\"];\n         let a_bounds = self.with_bnd(a_bounds, b);\n-        do self.infcx().bnds(a_bounds.lb, a_bounds.ub).then || {\n+        do self.infcx().bnds(a_bounds.lb, a_bounds.ub).then {\n             self.infcx().set(vb, a_id, root(a_bounds,\n                                             nde_a.rank));\n             ok(b)"}, {"sha": "79833f2c9ef31038fd212b6504cb7a9df8b19f63", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -115,7 +115,7 @@ fn should_request_new_writer_for_each_page() {\n     let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n     write_markdown(doc, writer_factory);\n     // We expect two pages to have been written\n-    for iter::repeat(2u) || {\n+    for iter::repeat(2u) {\n         comm::recv(po);\n     }\n }\n@@ -146,7 +146,7 @@ fn should_write_title_for_each_page() {\n         \"#[link(name = \\\"core\\\")]; mod a { }\");\n     let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n     write_markdown(doc, writer_factory);\n-    for iter::repeat(2u) || {\n+    for iter::repeat(2u) {\n         let (page, markdown) = comm::recv(po);\n         alt page {\n           doc::cratepage(_) {"}, {"sha": "6c41f0923a5758e23af7fb19a449c6f87f900a83", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -101,14 +101,14 @@ fn pandoc_writer(\n \n         let stdout_po = comm::port();\n         let stdout_ch = comm::chan(stdout_po);\n-        do task::spawn_sched(task::single_threaded) || {\n+        do task::spawn_sched(task::single_threaded) {\n             comm::send(stdout_ch, readclose(pipe_out.in));\n         }\n         let stdout = comm::recv(stdout_po);\n \n         let stderr_po = comm::port();\n         let stderr_ch = comm::chan(stderr_po);\n-        do task::spawn_sched(task::single_threaded) || {\n+        do task::spawn_sched(task::single_threaded) {\n             comm::send(stderr_ch, readclose(pipe_err.in));\n         }\n         let stderr = comm::recv(stderr_po);\n@@ -262,7 +262,7 @@ fn future_writer_factory(\n     let writer_factory = fn~(page: doc::page) -> writer {\n         let writer_po = comm::port();\n         let writer_ch = comm::chan(writer_po);\n-        do task::spawn || {\n+        do task::spawn {\n             let (writer, future) = future_writer();\n             comm::send(writer_ch, writer);\n             let s = future::get(future);\n@@ -280,7 +280,7 @@ fn future_writer() -> (writer, future::future<str>) {\n     let writer = fn~(+instr: writeinstr) {\n         comm::send(chan, copy instr);\n     };\n-    let future = do future::from_fn || {\n+    let future = do future::from_fn {\n         let mut res = \"\";\n         loop {\n             alt comm::recv(port) {"}, {"sha": "c9c2bb8a7fdedf4ed50b87b65531530ccd9ba863", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -35,7 +35,7 @@ fn run_passes(\n         log(debug, #fmt(\"pass #%d\", passno));\n         passno += 1;\n         log(debug, doc);\n-        do time(pass.name) || {\n+        do time(pass.name) {\n             pass.f(srv, doc)\n         }\n     }\n@@ -130,7 +130,7 @@ fn run(config: config::config) {\n \n     let source_file = config.input_crate;\n     do astsrv::from_file(source_file) |srv| {\n-        do time(\"wait_ast\") || {\n+        do time(\"wait_ast\") {\n             do astsrv::exec(srv) |_ctxt| { }\n         };\n         let doc = time(\"extract\", || {"}, {"sha": "0833bd55492b8c5fd9a3956539765bb1113adc88", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -34,7 +34,7 @@ class port_ptr<T:send> {\n     self.po = po; }\n    drop unsafe {\n     #debug(\"in the port_ptr destructor\");\n-       do task::unkillable || {\n+       do task::unkillable {\n         let yield = 0u;\n         let yieldp = ptr::addr_of(yield);\n         rustrt::rust_port_begin_detach(self.po, yieldp);"}, {"sha": "4109291503db51603c2b1bd190a749b471a9d2a0", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -235,7 +235,7 @@ fn pbfs(&&graph: arc::arc<graph>, key: node_id) -> bfs_result {\n \n         let color = arc::arc(colors);\n \n-        colors = do par::mapi_factory(*arc::get(&color)) || {\n+        colors = do par::mapi_factory(*arc::get(&color)) {\n             let colors = arc::clone(&color);\n             let graph = arc::clone(&graph);\n             fn~(i: uint, c: color) -> color {"}, {"sha": "85d34c41fed4243934097adf38c4bbc1f8292dcf", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -41,7 +41,7 @@ fn run(args: ~[str]) {\n     for uint::range(0u, workers) |_i| {\n         let builder = task::builder();\n         vec::push(worker_results, task::future_result(builder));\n-        do task::run(builder) || {\n+        do task::run(builder) {\n             for uint::range(0u, size / workers) |_i| {\n                 comm::send(to_child, bytes(100u));\n             }"}, {"sha": "27a3d993cd4e8a29cda919115af5e8bd9ab390da", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -157,7 +157,7 @@ fn main(args: ~[str]) {\n \n     let writep = comm::port();\n     let writech = comm::chan(writep);\n-    do task::spawn || {\n+    do task::spawn {\n         writer(path, writech, size);\n     };\n     let ch = comm::recv(writep);"}, {"sha": "194c78e250d3472367417ff9c233309301dc0e96", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -17,9 +17,9 @@ fn main() {\n }\n \n fn run(repeat: int, depth: int) {\n-    for iter::repeat(repeat as uint) || {\n+    for iter::repeat(repeat as uint) {\n         #debug(\"starting %.4f\", precise_time_s());\n-        do task::try || {\n+        do task::try {\n             recurse_or_fail(depth, none)\n         };\n         #debug(\"stopping %.4f\", precise_time_s());"}, {"sha": "6992162fc5c4c70c29e57215c2814542fe3eb376", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -12,13 +12,13 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n     let mut child_chs = ~[];\n     let mut sum = 0;\n \n-    for iter::repeat (children) || {\n-        do task::spawn || {\n+    for iter::repeat (children) {\n+        do task::spawn {\n             calc(0u, chan);\n         };\n     }\n \n-    for iter::repeat (children) || {\n+    for iter::repeat (children) {\n         alt check comm::recv(port) {\n           ready(child_ch) {\n             vec::push(child_chs, child_ch);\n@@ -36,7 +36,7 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n         }\n     }\n \n-    for iter::repeat (children) || {\n+    for iter::repeat (children) {\n         alt check comm::recv(port) {\n           done(child_sum) { sum += child_sum; }\n         }\n@@ -57,7 +57,7 @@ fn main(args: ~[str]) {\n     let children = uint::from_str(args[1]).get();\n     let port = comm::port();\n     let chan = comm::chan(port);\n-    do task::spawn || {\n+    do task::spawn {\n         calc(children, chan);\n     };\n     alt check comm::recv(port) {"}, {"sha": "76c84d7baecb71ca0a37e347341e7e6b86546a71", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -17,7 +17,7 @@ fn b() {\n \n     let mut p = ~[mut 1];\n \n-    do borrow(p) || { //~ NOTE loan of mutable vec content granted here\n+    do borrow(p) { //~ NOTE loan of mutable vec content granted here\n         p[0] = 5; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n }"}, {"sha": "7b050275b43970f59c54e7bb7b9f926eadab7845", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -76,7 +76,7 @@ fn at_most_once_block() {\n \n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n-    do at_most_once || {\n+    do at_most_once {\n         borrow(v); //~ ERROR loan of mutable variable declared in an outer block as immutable conflicts with prior loan\n         _x = &mut v; //~ NOTE prior loan as mutable granted here\n     }"}, {"sha": "89adfc4d2f1e922a3017fb3c60a112c8139871a4", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -19,7 +19,7 @@ fn a() {\n     p.impurem();\n \n     // But in this case we do not honor the loan:\n-    do p.blockm || { //~ NOTE loan of mutable local variable granted here\n+    do p.blockm { //~ NOTE loan of mutable local variable granted here\n         p.x = 10; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n     }\n }"}, {"sha": "5d6c1a1c78ee79b240d5de6f0d83e58b731faaeb", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -8,13 +8,13 @@ fn takes_imm_elt(_v: &int, f: fn()) {\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n     let v = ~[mut 1, 2, 3];\n-    do takes_imm_elt(&v[0]) || {\n+    do takes_imm_elt(&v[0]) {\n     }\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n     let v = ~[mut 1, 2, 3];\n-    do takes_imm_elt(&v[0]) || { //~ NOTE loan of mutable vec content granted here\n+    do takes_imm_elt(&v[0]) { //~ NOTE loan of mutable vec content granted here\n         v[1] = 4; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n }\n@@ -25,7 +25,7 @@ fn takes_const_elt(_v: &const int, f: fn()) {\n \n fn has_mut_vec_and_tries_to_change_it() {\n     let v = ~[mut 1, 2, 3];\n-    do takes_const_elt(&const v[0]) || {\n+    do takes_const_elt(&const v[0]) {\n         v[1] = 4;\n     }\n }"}, {"sha": "a18b886c6c78fd8485db7aa4a1b6e99882b197bb", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -6,7 +6,7 @@ class socket {\n     drop { }\n \n     fn set_identity()  {\n-        do closure || {\n+        do closure {\n         setsockopt_bytes(self.sock) //~ ERROR copying a noncopyable value\n       } \n     }"}, {"sha": "7e478757404837e00ccb10124ed7b86863457d78", "filename": "src/test/compile-fail/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -3,7 +3,7 @@ fn use(_i: int) {}\n fn foo() {\n     // Here, i is *moved* into the closure: Not actually OK\n     let mut i = 0;\n-    do task::spawn || {\n+    do task::spawn {\n         use(i); //~ ERROR mutable variables cannot be implicitly captured\n     }\n }\n@@ -13,7 +13,7 @@ fn bar() {\n     // is mutable: bad\n     let mut i = 0;\n     while i < 10 {\n-        do task::spawn || {\n+        do task::spawn {\n             use(i); //~ ERROR mutable variables cannot be implicitly captured\n         }\n         i += 1;"}, {"sha": "834bbe628dcc86d428d34f4ef7c1b80db2e379c1", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::arc(v);\n     \n-    do task::spawn() || {\n+    do task::spawn() {\n         let v = *arc::get(&arc_v);\n         assert v[3] == 4;\n     };"}, {"sha": "b9ce5612a8c43460c5a9175fbe71c5cd2fd16384", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -2,4 +2,4 @@\n // is probably not necessary anymore\n \n fn blk1(b: fn()) -> fn@() { ret fn@() { }; }\n-fn test1() { (do blk1 || { #debug[\"hi\"]; })(); }\n+fn test1() { (do blk1 { #debug[\"hi\"]; })(); }"}, {"sha": "0ae0edf1397e425721d01ac6729388b136ec963c", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -21,8 +21,8 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for iter::repeat(10u) || {\n-        do task::spawn || {\n+    for iter::repeat(10u) {\n+        do task::spawn {\n             let result = count(5u);\n             #debug(\"result = %?\", result);\n             fail;"}, {"sha": "7a7fd5daa961f8879c0d2cce7b081141873885e6", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -34,7 +34,7 @@ class and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn || {\n+    do task::spawn {\n         let r = and_then_get_big_again(4);\n         getbig_call_c_and_fail(10000);\n     };"}, {"sha": "962026bfc4742ce45b4f6cba2e442a5e4a88371d", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -27,7 +27,7 @@ class and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn || {\n+    do task::spawn {\n         getbig_and_fail(400);\n     };\n }\n\\ No newline at end of file"}, {"sha": "dffad4fc6ab73669403c0312a6878ab1b10f767a", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -20,7 +20,7 @@ class and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn || {\n+    do task::spawn {\n         getbig_and_fail(1);\n     };\n }\n\\ No newline at end of file"}, {"sha": "4f8e357bfd8d29a2ffbcc504fbcdbf3e88b40021", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -13,7 +13,7 @@ class r {\n \n fn main() {\n     log(error, \"whatever\");\n-    do task::spawn || {\n+    do task::spawn {\n       let i = r(5);\n     };\n     fail;"}, {"sha": "7f6ce507c82e1b8cc9355f3698390e44137b7052", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     fn f(i: fn() -> uint) -> uint { i() }\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n-    let z = do do vec::foldl(f, v) |x, _y| { x } || { 22u };\n+    let z = do do vec::foldl(f, v) |x, _y| { x } { 22u };\n     assert z == 22u;\n }"}, {"sha": "257d7c25831923c29151140e937269ed7aabb8f6", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -3,6 +3,6 @@ fn call_any(f: fn() -> uint) -> uint {\n }\n \n fn main() {\n-    let x_r = do call_any || { 22u };\n+    let x_r = do call_any { 22u };\n     assert x_r == 22u;\n }"}, {"sha": "00fe2e30040da6ae65229b555858207032181712", "filename": "src/test/run-pass/do-pure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -2,8 +2,8 @@ pure fn f(f: fn()) {\n }\n \n pure fn g() {\n-    // `f || { }` is considered pure, so `do f || { }` should be too\n-    do f || { }\n+    // `f || { }` is considered pure, so `do f { }` should be too\n+    do f { }\n }\n \n fn main() {"}, {"sha": "c599a1576cc24c852d1625d894f27d0c449408fe", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -19,7 +19,7 @@ fn count(n: uint) -> uint {\n fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    do task::spawn || {\n+    do task::spawn {\n         let result = count(1000u);\n         #debug(\"result = %?\", result);\n         assert result == 1000u;"}, {"sha": "a54dd58062fb34caf82533ab3da45c9abb7df76d", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -23,7 +23,7 @@ fn count(n: uint) -> uint {\n fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    do task::spawn || {\n+    do task::spawn {\n         let result = count(12u);\n         #debug(\"result = %?\", result);\n         assert result == 2048u;"}, {"sha": "dc3ac7001e13db080e01d584e73ecdab04bf74aa", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -20,9 +20,9 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for iter::repeat(100u) || {\n-        do task::spawn || {\n+    for iter::repeat(100u) {\n+        do task::spawn {\n             assert count(5u) == 16u;\n         };\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "87d8eb27937cff4d6081ce513392991951f94b91", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -17,8 +17,8 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for iter::repeat(10u) || {\n-        do task::spawn || {\n+    for iter::repeat(10u) {\n+        do task::spawn {\n             let result = count(5u);\n             #debug(\"result = %?\", result);\n             assert result == 16u;"}, {"sha": "2cd17923bf006d5a37ab3ce10f56712411c103a7", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -6,7 +6,7 @@ class socket {\n     drop { }\n \n     fn set_identity()  {\n-        do closure || {\n+        do closure {\n             setsockopt_bytes(copy self.sock)\n         }\n     }"}, {"sha": "b826eaa620c7e574f3e53059e7abc49fb0335ebe", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -21,7 +21,7 @@ fn a() {\n }\n \n fn main() {\n-    for iter::repeat(100u) || {\n+    for iter::repeat(100u) {\n         spawn(|| a() );\n     }\n }"}, {"sha": "dac7b8c4f1f307df3fa1abda279fefc1505c7ce3", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     assert f(10, |a| a) == 10;\n     g(||());\n     assert do f(10) |a| { a } == 10;\n-    do g() || { }\n+    do g() { }\n     let _x: fn@() -> int = || 10;\n     let _y: fn@(int) -> int = |a| a;\n     assert ff()(10) == 11;"}, {"sha": "221d13e4e7c1a16d96f9290cbb8eab2aeeab0ef2", "filename": "src/test/run-pass/osmain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fosmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fosmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosmain.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -24,7 +24,7 @@ fn run(i: int) {\n     };\n     task::set_opts(builder, opts);\n     task::unsupervise(builder);\n-    do task::run(builder) || {\n+    do task::run(builder) {\n         task::yield();\n         let builder = task::builder();\n         let opts = {\n@@ -36,7 +36,7 @@ fn run(i: int) {\n         };\n         task::set_opts(builder, opts);\n         task::unsupervise(builder);\n-        do task::run(builder) || {\n+        do task::run(builder) {\n             task::yield();\n             run(i - 1);\n             task::yield();"}, {"sha": "9008ccf726a6c4861242091aaefb4c0430c788e9", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let p = port();\n     let c = chan(p);\n \n-    do spawn() || {\n+    do spawn() {\n         let p = port();\n         c.send(chan(p));\n "}, {"sha": "b8922400777cb68c25f11411126fb060359fc0e7", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -16,16 +16,16 @@ fn test00() {\n     let number_of_messages: int = 10;\n     let c = comm::chan(p);\n \n-    do task::spawn || {\n+    do task::spawn {\n         test00_start(c, number_of_messages * 0, number_of_messages);\n     }\n-    do task::spawn || {\n+    do task::spawn {\n         test00_start(c, number_of_messages * 1, number_of_messages);\n     }\n-    do task::spawn || {\n+    do task::spawn {\n         test00_start(c, number_of_messages * 2, number_of_messages);\n     }\n-    do task::spawn || {\n+    do task::spawn {\n         test00_start(c, number_of_messages * 3, number_of_messages);\n     }\n "}, {"sha": "6efd12ffc408aa25227e8c21c8cc834b22cbad12", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -18,7 +18,7 @@ fn test00() {\n \n     let builder = task::builder();\n     let r = task::future_result(builder);\n-    do task::run(builder) || {\n+    do task::run(builder) {\n         test00_start(ch, number_of_messages);\n     }\n "}, {"sha": "83023931b42e3a51f45ffa2e62e68093887743ef", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e2a14f364041fc5cb346fd308bb1777ca3c24c/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=f2e2a14f364041fc5cb346fd308bb1777ca3c24c", "patch": "@@ -7,7 +7,7 @@\n fn main() {\n     let builder = task::builder();\n     task::unsupervise(builder);\n-    do task::run(builder) || {\n+    do task::run(builder) {\n         fn f() { f() };\n         f();\n     };"}]}