{"sha": "3965773ae7743e051070b4eed3c6e02e9df3b25c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjU3NzNhZTc3NDNlMDUxMDcwYjRlZWQzYzZlMDJlOWRmM2IyNWM=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-04-04T21:07:56Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-04-04T21:10:26Z"}, "message": "use jemallocator in rustc/rustdoc", "tree": {"sha": "cab824310bbf8fa5fbfb88c65ff7cab53be62a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab824310bbf8fa5fbfb88c65ff7cab53be62a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3965773ae7743e051070b4eed3c6e02e9df3b25c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3965773ae7743e051070b4eed3c6e02e9df3b25c", "html_url": "https://github.com/rust-lang/rust/commit/3965773ae7743e051070b4eed3c6e02e9df3b25c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3965773ae7743e051070b4eed3c6e02e9df3b25c/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "html_url": "https://github.com/rust-lang/rust/commit/8ad6a443cfee83e1f7d29c9ec0de26143c54a617"}], "stats": {"total": 124, "additions": 107, "deletions": 17}, "files": [{"sha": "4bb32f842c2df91d5f1439785ee702d9e42a0819", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -1732,17 +1732,6 @@ version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6\"\n \n-[[package]]\n-name = \"jemalloc-sys\"\n-version = \"0.3.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0d3b9f3f5c9b31aa0f5ed3260385ac205db665baa41d49bb8338008ae94ede45\"\n-dependencies = [\n- \"cc\",\n- \"fs_extra\",\n- \"libc\",\n-]\n-\n [[package]]\n name = \"jobserver\"\n version = \"0.1.21\"\n@@ -3586,9 +3575,10 @@ checksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n name = \"rustc-main\"\n version = \"0.0.0\"\n dependencies = [\n- \"jemalloc-sys\",\n  \"rustc_codegen_ssa\",\n  \"rustc_driver\",\n+ \"tikv-jemalloc-sys\",\n+ \"tikv-jemallocator\",\n ]\n \n [[package]]\n@@ -5318,6 +5308,27 @@ dependencies = [\n name = \"tier-check\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"tikv-jemalloc-sys\"\n+version = \"0.4.1+5.2.1-patched\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8a26331b05179d4cb505c8d6814a7e18d298972f0a551b0e3cefccff927f86d3\"\n+dependencies = [\n+ \"cc\",\n+ \"fs_extra\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"tikv-jemallocator\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3c14a5a604eb8715bc5785018a37d00739b180bcf609916ddf4393d33d49ccdf\"\n+dependencies = [\n+ \"libc\",\n+ \"tikv-jemalloc-sys\",\n+]\n+\n [[package]]\n name = \"time\"\n version = \"0.1.43\""}, {"sha": "ca6055c46a6473e846dfd2c85e4b808c6ced8ddc", "filename": "compiler/rustc/Cargo.toml", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/compiler%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/compiler%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2FCargo.toml?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -11,12 +11,16 @@ rustc_driver = { path = \"../rustc_driver\" }\n # crate is intended to be used by codegen backends, which may not be in-tree.\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n \n-[dependencies.jemalloc-sys]\n-version = '0.3.0'\n+[dependencies.tikv-jemalloc-sys]\n+version = '0.4.0'\n optional = true\n features = ['unprefixed_malloc_on_supported_platforms']\n \n+[dependencies.tikv-jemallocator]\n+version = '0.4.0'\n+optional = true\n+\n [features]\n-jemalloc = ['jemalloc-sys']\n+jemalloc = ['tikv-jemalloc-sys', 'tikv-jemallocator']\n llvm = ['rustc_driver/llvm']\n max_level_info = ['rustc_driver/max_level_info']"}, {"sha": "c80fab99496bc0d250ab4065b0eea235e9bbb142", "filename": "compiler/rustc/src/main.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/compiler%2Frustc%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/compiler%2Frustc%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2Fsrc%2Fmain.rs?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -1,3 +1,16 @@\n+// Configure jemalloc as the `global_allocator` when configured. This is\n+// so that we use the sized deallocation apis jemalloc provides\n+// (namely `sdallocx`).\n+//\n+// The symbol overrides documented below are also performed so that we can\n+// ensure that we use a consistent allocator across the rustc <-> llvm boundary\n+#[cfg(feature = \"jemalloc\")]\n+#[global_allocator]\n+static ALLOC: tikv_jemallocator::Jemalloc = tikv_jemallocator::Jemalloc;\n+\n+#[cfg(feature = \"tikv-jemalloc-sys\")]\n+use tikv_jemalloc_sys as jemalloc_sys;\n+\n fn main() {\n     // Pull in jemalloc when enabled.\n     //\n@@ -7,7 +20,7 @@ fn main() {\n     // dynamic libraries. That means to pull in jemalloc we actually need to\n     // reference allocation symbols one way or another (as this file is the only\n     // object code in the rustc executable).\n-    #[cfg(feature = \"jemalloc-sys\")]\n+    #[cfg(feature = \"tikv-jemalloc-sys\")]\n     {\n         use std::os::raw::{c_int, c_void};\n "}, {"sha": "c2b8bd71e000ccaba2c7af473c5ec8245df433c2", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -519,6 +519,11 @@ impl Step for Rustdoc {\n         // they'll be linked to those libraries). As such, don't explicitly `ensure` any additional\n         // libraries here. The intuition here is that If we've built a compiler, we should be able\n         // to build rustdoc.\n+        //\n+        let mut features = Vec::new();\n+        if builder.config.jemalloc {\n+            features.push(\"jemalloc\".to_string());\n+        }\n \n         let cargo = prepare_tool_cargo(\n             builder,\n@@ -528,7 +533,7 @@ impl Step for Rustdoc {\n             \"build\",\n             \"src/tools/rustdoc\",\n             SourceType::InTree,\n-            &[],\n+            features.as_slice(),\n         );\n \n         builder.info(&format!("}, {"sha": "d778a507425286cfdb10ba0c36ca626bb5fb9fc7", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -30,5 +30,8 @@ features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n [dev-dependencies]\n expect-test = \"1.0\"\n \n+[features]\n+jemalloc = []\n+\n [package.metadata.rust-analyzer]\n rustc_private = true"}, {"sha": "fc5b7a4f4f343befd3051e933db84c50620b6dd6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -30,6 +30,7 @@ extern crate tracing;\n // So if `rustc` was specified in Cargo.toml, this would spuriously rebuild crates.\n //\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n+\n extern crate rustc_ast;\n extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n@@ -60,6 +61,15 @@ extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n extern crate test as testing;\n \n+#[cfg(feature = \"jemalloc\")]\n+extern crate tikv_jemalloc_sys;\n+#[cfg(feature = \"jemalloc\")]\n+use tikv_jemalloc_sys as jemalloc_sys;\n+#[cfg(feature = \"jemalloc\")]\n+extern crate tikv_jemallocator;\n+#[cfg(feature = \"jemalloc\")]\n+use tikv_jemallocator as jemallocator;\n+\n use std::default::Default;\n use std::env;\n use std::process;\n@@ -113,7 +123,48 @@ mod theme;\n mod visit_ast;\n mod visit_lib;\n \n+// See docs in https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\n+// about jemallocator\n+#[cfg(feature = \"jemalloc\")]\n+#[global_allocator]\n+static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n+\n pub fn main() {\n+    // See docs in https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\n+    // about jemalloc-sys\n+    #[cfg(feature = \"jemalloc\")]\n+    {\n+        use std::os::raw::{c_int, c_void};\n+\n+        #[used]\n+        static _F1: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::calloc;\n+        #[used]\n+        static _F2: unsafe extern \"C\" fn(*mut *mut c_void, usize, usize) -> c_int =\n+            jemalloc_sys::posix_memalign;\n+        #[used]\n+        static _F3: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::aligned_alloc;\n+        #[used]\n+        static _F4: unsafe extern \"C\" fn(usize) -> *mut c_void = jemalloc_sys::malloc;\n+        #[used]\n+        static _F5: unsafe extern \"C\" fn(*mut c_void, usize) -> *mut c_void = jemalloc_sys::realloc;\n+        #[used]\n+        static _F6: unsafe extern \"C\" fn(*mut c_void) = jemalloc_sys::free;\n+\n+        // On OSX, jemalloc doesn't directly override malloc/free, but instead\n+        // registers itself with the allocator's zone APIs in a ctor. However,\n+        // the linker doesn't seem to consider ctors as \"used\" when statically\n+        // linking, so we need to explicitly depend on the function.\n+        #[cfg(target_os = \"macos\")]\n+        {\n+            extern \"C\" {\n+                fn _rjem_je_zone_register();\n+            }\n+\n+            #[used]\n+            static _F7: unsafe extern \"C\" fn() = _rjem_je_zone_register;\n+        }\n+    }\n+\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n "}, {"sha": "d0c047ad6df1468df4f400ffcf78f02186c50a9c", "filename": "src/tools/rustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Ftools%2Frustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3965773ae7743e051070b4eed3c6e02e9df3b25c/src%2Ftools%2Frustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2FCargo.toml?ref=3965773ae7743e051070b4eed3c6e02e9df3b25c", "patch": "@@ -13,3 +13,6 @@ path = \"main.rs\"\n \n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n+\n+[features]\n+jemalloc = ['rustdoc/jemalloc']"}]}