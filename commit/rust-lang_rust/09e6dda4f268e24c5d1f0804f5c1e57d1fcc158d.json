{"sha": "09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTZkZGE0ZjI2OGUyNGM1ZDFmMDgwNGY1YzFlNTdkMWZjYzE1OGQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-07-03T22:16:04Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:10Z"}, "message": "add temporarily unused ctxt field to mac_invoc_tt", "tree": {"sha": "6e67e3b51c53bca24f7c9c260d2218a3dffe6dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e67e3b51c53bca24f7c9c260d2218a3dffe6dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "html_url": "https://github.com/rust-lang/rust/commit/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3621c674cc20e666cfa3fdef559f516b39a1189a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3621c674cc20e666cfa3fdef559f516b39a1189a", "html_url": "https://github.com/rust-lang/rust/commit/3621c674cc20e666cfa3fdef559f516b39a1189a"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c2f257643cd1bfe945f5c7595e0edb0dabf315e1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "patch": "@@ -659,7 +659,7 @@ pub type mac = Spanned<mac_>;\n // There's only one flavor, now, so this could presumably be simplified.\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum mac_ {\n-    mac_invoc_tt(Path,~[token_tree]),   // new macro-invocation\n+    mac_invoc_tt(Path,~[token_tree],SyntaxContext),   // new macro-invocation\n }\n \n pub type lit = Spanned<lit_>;"}, {"sha": "5e68a75bffac48c8253c4b526d8e9795a7ea9849", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "patch": "@@ -43,7 +43,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n         ExprMac(ref mac) => {\n             match (*mac).node {\n                 // Token-tree macros:\n-                mac_invoc_tt(ref pth, ref tts) => {\n+                mac_invoc_tt(ref pth, ref tts, ctxt) => {\n                     if (pth.segments.len() > 1u) {\n                         cx.span_fatal(\n                             pth.span,\n@@ -368,7 +368,7 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                        fld: @ast_fold)\n                     -> Option<@ast::item> {\n     let (pth, tts) = match it.node {\n-        item_mac(codemap::Spanned { node: mac_invoc_tt(ref pth, ref tts), _}) => {\n+        item_mac(codemap::Spanned { node: mac_invoc_tt(ref pth, ref tts, ctxt), _}) => {\n             (pth, (*tts).clone())\n         }\n         _ => cx.span_bug(it.span, \"invalid item macro invocation\")\n@@ -471,7 +471,7 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n     let (mac, pth, tts, semi) = match *s {\n         StmtMac(ref mac, semi) => {\n             match mac.node {\n-                mac_invoc_tt(ref pth, ref tts) => {\n+                mac_invoc_tt(ref pth, ref tts, ctxt) => {\n                     ((*mac).clone(), pth, (*tts).clone(), semi)\n                 }\n             }"}, {"sha": "799ff855cbea5a57883e21cc8a4bccf52f37497e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "patch": "@@ -116,9 +116,10 @@ fn fold_arg_(a: arg, fld: @ast_fold) -> arg {\n fn fold_mac_(m: &mac, fld: @ast_fold) -> mac {\n     Spanned {\n         node: match m.node {\n-            mac_invoc_tt(ref p,ref tts) =>\n+            mac_invoc_tt(ref p,ref tts,ctxt) =>\n             mac_invoc_tt(fld.fold_path(p),\n-                         fold_tts(*tts,|id|{fld.fold_ident(id)}))\n+                         fold_tts(*tts,|id|{fld.fold_ident(id)}),\n+                         ctxt)\n         },\n         span: fld.new_span(m.span)\n     }"}, {"sha": "8b11a25f13ce38f655a79598a8a9ac90d8cbab1c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "patch": "@@ -21,7 +21,7 @@ use ast::{_mod, BiAdd, arg, Arm, Attribute, BindByRef, BindInfer};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, Block};\n use ast::{BlockCheckMode, UnBox};\n use ast::{Crate, CrateConfig, Decl, DeclItem};\n-use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, enum_def, explicit_self};\n+use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, enum_def, explicit_self};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock};\n use ast::{ExprBreak, ExprCall, ExprCast, ExprDoBody};\n@@ -1875,7 +1875,7 @@ impl Parser {\n                                                 |p| p.parse_token_tree());\n                 let hi = self.span.hi;\n \n-                return self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts));\n+                return self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts, EMPTY_CTXT));\n             } else if *self.token == token::LBRACE {\n                 // This might be a struct literal.\n                 if self.looking_at_record_literal() {\n@@ -3197,14 +3197,14 @@ impl Parser {\n \n             if id == token::special_idents::invalid {\n                 return @spanned(lo, hi, StmtMac(\n-                    spanned(lo, hi, mac_invoc_tt(pth, tts)), false));\n+                    spanned(lo, hi, mac_invoc_tt(pth, tts, EMPTY_CTXT)), false));\n             } else {\n                 // if it has a special ident, it's definitely an item\n                 return @spanned(lo, hi, StmtDecl(\n                     @spanned(lo, hi, DeclItem(\n                         self.mk_item(\n                             lo, hi, id /*id is good here*/,\n-                            item_mac(spanned(lo, hi, mac_invoc_tt(pth, tts))),\n+                            item_mac(spanned(lo, hi, mac_invoc_tt(pth, tts, EMPTY_CTXT))),\n                             inherited, ~[/*no attrs*/]))),\n                     self.get_id()));\n             }\n@@ -4809,7 +4809,7 @@ impl Parser {\n                 _ => self.fatal(\"expected open delimiter\")\n             };\n             // single-variant-enum... :\n-            let m = ast::mac_invoc_tt(pth, tts);\n+            let m = ast::mac_invoc_tt(pth, tts, EMPTY_CTXT);\n             let m: ast::mac = codemap::Spanned { node: m,\n                                              span: mk_sp(self.span.lo,\n                                                          self.span.hi) };"}, {"sha": "4d464706d6ff43a8ba2f1041748caa1bb21df34e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=09e6dda4f268e24c5d1f0804f5c1e57d1fcc158d", "patch": "@@ -619,7 +619,7 @@ pub fn print_item(s: @ps, item: &ast::item) {\n         }\n         bclose(s, item.span);\n       }\n-      ast::item_mac(codemap::Spanned { node: ast::mac_invoc_tt(ref pth, ref tts),\n+      ast::item_mac(codemap::Spanned { node: ast::mac_invoc_tt(ref pth, ref tts, ctxt),\n                                    _}) => {\n         print_visibility(s, item.vis);\n         print_path(s, pth, false);\n@@ -1021,7 +1021,7 @@ pub fn print_if(s: @ps, test: &ast::Expr, blk: &ast::Block,\n \n pub fn print_mac(s: @ps, m: &ast::mac) {\n     match m.node {\n-      ast::mac_invoc_tt(ref pth, ref tts) => {\n+      ast::mac_invoc_tt(ref pth, ref tts, ctxt) => {\n         print_path(s, pth, false);\n         word(s.s, \"!\");\n         popen(s);"}]}