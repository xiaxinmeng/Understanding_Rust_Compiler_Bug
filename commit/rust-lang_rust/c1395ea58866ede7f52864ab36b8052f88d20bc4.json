{"sha": "c1395ea58866ede7f52864ab36b8052f88d20bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMzk1ZWE1ODg2NmVkZTdmNTI4NjRhYjM2YjgwNTJmODhkMjBiYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T01:46:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T01:46:37Z"}, "message": "auto merge of #11999 : joaoxsouls/rust/master, r=cmr", "tree": {"sha": "3499e887fac9503a9b2176600fa163506b53446a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3499e887fac9503a9b2176600fa163506b53446a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1395ea58866ede7f52864ab36b8052f88d20bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1395ea58866ede7f52864ab36b8052f88d20bc4", "html_url": "https://github.com/rust-lang/rust/commit/c1395ea58866ede7f52864ab36b8052f88d20bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1395ea58866ede7f52864ab36b8052f88d20bc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2877928b22c239849a79b48d07139104ff144cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2877928b22c239849a79b48d07139104ff144cd4", "html_url": "https://github.com/rust-lang/rust/commit/2877928b22c239849a79b48d07139104ff144cd4"}, {"sha": "b69c81c9e0ad3ad1f38ba1874c3252d9c561b331", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69c81c9e0ad3ad1f38ba1874c3252d9c561b331", "html_url": "https://github.com/rust-lang/rust/commit/b69c81c9e0ad3ad1f38ba1874c3252d9c561b331"}], "stats": {"total": 69, "additions": 12, "deletions": 57}, "files": [{"sha": "c95bfee4ace1f926036b750c50aa38c9e2b4b851", "filename": "src/doc/rust.md", "status": "modified", "additions": 12, "deletions": 57, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c1395ea58866ede7f52864ab36b8052f88d20bc4/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1395ea58866ede7f52864ab36b8052f88d20bc4/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=c1395ea58866ede7f52864ab36b8052f88d20bc4", "patch": "@@ -2426,9 +2426,9 @@ before the expression they apply to.\n   : Logical negation. On the boolean type, this flips between `true` and\n     `false`. On integer types, this inverts the individual bits in the\n     two's complement representation of the value.\n-`@` and `~`\n+`~`\n   :  [Boxing](#pointer-types) operators. Allocate a box to hold the value they are applied to,\n-     and store the value in it. `@` creates a managed box, whereas `~` creates an owned box.\n+     and store the value in it. `~` creates an owned box.\n `&`\n   : Borrow operator. Returns a reference, pointing to its operand.\n     The operand of a borrow is statically proven to outlive the resulting pointer.\n@@ -3203,16 +3203,6 @@ All pointers in Rust are explicit first-class values.\n They can be copied, stored into data structures, and returned from functions.\n There are four varieties of pointer in Rust:\n \n-Managed pointers (`@`)\n-  : These point to managed heap allocations (or \"boxes\") in the task-local, managed heap.\n-    Managed pointers are written `@content`,\n-    for example `@int` means a managed pointer to a managed box containing an integer.\n-    Copying a managed pointer is a \"shallow\" operation:\n-    it involves only copying the pointer itself\n-    (as well as any reference-count or GC-barriers required by the managed heap).\n-    Dropping a managed pointer does not necessarily release the box it points to;\n-    the lifecycles of managed boxes are subject to an unspecified garbage collection algorithm.\n-\n Owning pointers (`~`)\n   : These point to owned heap allocations (or \"boxes\") in the shared, inter-task heap.\n     Each owned box has a single owning pointer; pointer and pointee retain a 1:1 relationship at all times.\n@@ -3521,63 +3511,28 @@ state. Subsequent statements within a function may or may not initialize the\n local variables. Local variables can be used only after they have been\n initialized; this is enforced by the compiler.\n \n-### Memory boxes\n-\n-A _box_ is a reference to a heap allocation holding another value. There\n-are two kinds of boxes: *managed boxes* and *owned boxes*.\n-\n-A _managed box_ type or value is constructed by the prefix *at* sigil `@`.\n-\n-An _owned box_ type or value is constructed by the prefix *tilde* sigil `~`.\n+### Owned boxes\n \n-Multiple managed box values can point to the same heap allocation; copying a\n-managed box value makes a shallow copy of the pointer (optionally incrementing\n-a reference count, if the managed box is implemented through\n-reference-counting).\n+An  _owned box_ is a reference to a heap allocation holding another value, which is constructed\n+by the prefix *tilde* sigil `~`\n \n-Owned box values exist in 1:1 correspondence with their heap allocation.\n-\n-An example of constructing one managed box type and value, and one owned box\n-type and value:\n+An example of an owned box type and value:\n \n ~~~~\n-let x: @int = @10;\n let x: ~int = ~10;\n ~~~~\n \n-Some operations (such as field selection) implicitly dereference boxes. An\n-example of an _implicit dereference_ operation performed on box values:\n+Owned box values exist in 1:1 correspondence with their heap allocation\n+copying an owned box value makes a shallow copy of the pointer\n+Rust will consider a shallow copy of an owned box to move ownership of the value. After a value has been moved, the source location cannot be used unless it is reinitialized.\n \n ~~~~\n-struct Foo { y: int }\n-let x = @Foo{y: 10};\n-assert!(x.y == 10);\n-~~~~\n-\n-Other operations act on box values as single-word-sized address values. For\n-these operations, to access the value held in the box requires an explicit\n-dereference of the box value. Explicitly dereferencing a box is indicated with\n-the unary *star* operator `*`. Examples of such _explicit dereference_\n-operations are:\n-\n-* copying box values (`x = y`)\n-* passing box values to functions (`f(x,y)`)\n-\n-An example of an explicit-dereference operation performed on box values:\n-\n+let x: ~int = ~10;\n+let y = x;\n+// attempting to use `x` will result in an error here\n ~~~~\n-fn takes_boxed(b: @int) {\n-}\n \n-fn takes_unboxed(b: int) {\n-}\n \n-fn main() {\n-    let x: @int = @10;\n-    takes_boxed(x);\n-    takes_unboxed(*x);\n-}\n-~~~~\n \n ## Tasks\n "}]}