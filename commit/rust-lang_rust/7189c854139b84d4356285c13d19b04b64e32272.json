{"sha": "7189c854139b84d4356285c13d19b04b64e32272", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODljODU0MTM5Yjg0ZDQzNTYyODVjMTNkMTliMDRiNjRlMzIyNzI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T20:17:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T20:17:51Z"}, "message": "Improve closure dummy capture suggestion in macros.", "tree": {"sha": "7f146e72edd4ff2ec29a30f37950f6799729face", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f146e72edd4ff2ec29a30f37950f6799729face"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7189c854139b84d4356285c13d19b04b64e32272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7189c854139b84d4356285c13d19b04b64e32272", "html_url": "https://github.com/rust-lang/rust/commit/7189c854139b84d4356285c13d19b04b64e32272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7189c854139b84d4356285c13d19b04b64e32272/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a84708edca7c275cb99ad080317fbc7637516d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a84708edca7c275cb99ad080317fbc7637516d8", "html_url": "https://github.com/rust-lang/rust/commit/0a84708edca7c275cb99ad080317fbc7637516d8"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "702f69a9fcf0ba2381c181d97a40fefb78d93f53", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7189c854139b84d4356285c13d19b04b64e32272/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7189c854139b84d4356285c13d19b04b64e32272/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=7189c854139b84d4356285c13d19b04b64e32272", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -680,15 +680,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         migrated_variables_concat\n                     );\n \n-                    // If the body was entirely expanded from a macro\n-                    // invocation, i.e. the body is not contained inside the\n-                    // closure span, then we walk up the expansion until we\n-                    // find the span before the expansion.\n-                    let closure_body_span = self.tcx.hir().span(body_id.hir_id)\n-                        .find_ancestor_inside(closure_span)\n-                        .unwrap_or(DUMMY_SP);\n+                    let mut closure_body_span = {\n+                        // If the body was entirely expanded from a macro\n+                        // invocation, i.e. the body is not contained inside the\n+                        // closure span, then we walk up the expansion until we\n+                        // find the span before the expansion.\n+                        let s = self.tcx.hir().span(body_id.hir_id);\n+                        s.find_ancestor_inside(closure_span).unwrap_or(s)\n+                    };\n+\n+                    if let Ok(mut s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                        if s.starts_with('$') {\n+                            // Looks like a macro fragment. Try to find the real block.\n+                            if let Some(hir::Node::Expr(&hir::Expr {\n+                                kind: hir::ExprKind::Block(block, ..), ..\n+                            })) = self.tcx.hir().find(body_id.hir_id) {\n+                                // If the body is a block (with `{..}`), we use the span of that block.\n+                                // E.g. with a `|| $body` expanded from a `m!({ .. })`, we use `{ .. }`, and not `$body`.\n+                                // Since we know it's a block, we know we can insert the `let _ = ..` without\n+                                // breaking the macro syntax.\n+                                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(block.span) {\n+                                    closure_body_span = block.span;\n+                                    s = snippet;\n+                                }\n+                            }\n+                        }\n \n-                    if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                         let mut lines = s.lines();\n                         let line1 = lines.next().unwrap_or_default();\n "}]}