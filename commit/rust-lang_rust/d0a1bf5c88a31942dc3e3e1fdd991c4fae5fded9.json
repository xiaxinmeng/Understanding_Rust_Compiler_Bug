{"sha": "d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTFiZjVjODhhMzE5NDJkYzNlM2UxZmRkOTkxYzRmYWU1ZmRlZDk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-18T20:14:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: make util::ppaux private.", "tree": {"sha": "10373e1dbca8066f562579bb129dea962862e47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10373e1dbca8066f562579bb129dea962862e47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "html_url": "https://github.com/rust-lang/rust/commit/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "800ddb367e4a56a77ab940ce95023e82b64f3bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/800ddb367e4a56a77ab940ce95023e82b64f3bd2", "html_url": "https://github.com/rust-lang/rust/commit/800ddb367e4a56a77ab940ce95023e82b64f3bd2"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "73a8721bdeb2e7043fa3c183cdd395d196572576", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -768,7 +768,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// For generic types with parameters with defaults, remove the parameters corresponding to\n-    /// the defaults. This repeats a lot of the logic found in `PrintCx::parameterized`.\n+    /// the defaults. This repeats a lot of the logic found in `ty::print::pretty`.\n     fn strip_generic_default_params(\n         &self,\n         def_id: DefId,"}, {"sha": "9150417a85db6b064394b1417c1d0b7da7c70635", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -135,7 +135,7 @@ pub mod ty;\n pub mod util {\n     pub mod captures;\n     pub mod common;\n-    pub mod ppaux;\n+    mod ppaux;\n     pub mod nodemap;\n     pub mod profiling;\n     pub mod bug;"}, {"sha": "5e2851e08ec4c593d0cf2e928d3daa214009b30b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -34,7 +34,7 @@ use crate::ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n-use crate::util::ppaux;\n+use crate::ty::print::{FmtPrinter, Printer, PrintCx};\n \n pub use crate::mir::interpret::AssertMessage;\n \n@@ -2406,7 +2406,12 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n-                        ppaux::parameterized(fmt, variant_def.did, substs, Namespace::ValueNS)?;\n+                        let f = &mut *fmt;\n+                        PrintCx::with_tls_tcx(FmtPrinter::new(f, Namespace::ValueNS), |cx| {\n+                            let substs = cx.tcx.lift(&substs).expect(\"could not lift for printing\");\n+                            cx.print_def_path(variant_def.did, Some(substs), iter::empty())?;\n+                            Ok(())\n+                        })?;\n \n                         match variant_def.ctor_kind {\n                             CtorKind::Const => Ok(()),"}, {"sha": "f3a800bf46d87e8f8cfafeec0218032aed18dfc9", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -165,7 +165,8 @@ impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use crate::traits::WhereClause::*;\n \n-        // Bypass ppaux because it does not print out anonymous regions.\n+        // Bypass `ty::print` because it does not print out anonymous regions.\n+        // FIXME(eddyb) implement a custom `PrettyPrinter`, or move this to `ty::print`.\n         fn write_region_name<'tcx>(\n             r: ty::Region<'tcx>,\n             fmt: &mut fmt::Formatter<'_>\n@@ -256,7 +257,7 @@ impl fmt::Display for traits::QuantifierKind {\n }\n \n /// Collect names for regions / types bound by a quantified goal / clause.\n-/// This collector does not try to do anything clever like in ppaux, it's just used\n+/// This collector does not try to do anything clever like in `ty::print`, it's just used\n /// for debug output in tests anyway.\n struct BoundNamesCollector {\n     // Just sort by name because `BoundRegion::BrNamed` does not have a `BoundVar` index anyway."}, {"sha": "b137d5f69c6418730a79291db35936dff49de4bc", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -2,10 +2,10 @@ use crate::hir::Unsafety;\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n+use crate::ty::print::{FmtPrinter, Printer, PrintCx};\n use crate::traits;\n use rustc_target::spec::abi::Abi;\n use rustc_macros::HashStable;\n-use crate::util::ppaux;\n \n use std::fmt;\n use std::iter;\n@@ -176,7 +176,12 @@ impl<'tcx> InstanceDef<'tcx> {\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ppaux::parameterized(f, self.def_id(), self.substs, Namespace::ValueNS)?;\n+        PrintCx::with_tls_tcx(FmtPrinter::new(&mut *f, Namespace::ValueNS), |cx| {\n+            let substs = cx.tcx.lift(&self.substs).expect(\"could not lift for printing\");\n+            cx.print_def_path(self.def_id(), Some(substs), iter::empty())?;\n+            Ok(())\n+        })?;\n+\n         match self.def {\n             InstanceDef::Item(_) => Ok(()),\n             InstanceDef::VtableShim(_) => {"}, {"sha": "a2e8954cf92ea07b419b16cdc8548fc0632f7ed2", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -1163,7 +1163,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                     }\n                 }\n \n-                if self.config.is_verbose {\n+                if self.tcx.sess.verbose() {\n                     p!(write(\n                         \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n                         substs.closure_kind_ty(did, self.tcx),"}, {"sha": "cb2c8acba82dc0551e162f58991d2db74c3cde00", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -1,7 +1,6 @@\n use crate::hir;\n use crate::hir::def::Namespace;\n-use crate::hir::def_id::DefId;\n-use crate::ty::subst::{Kind, SubstsRef, UnpackedKind};\n+use crate::ty::subst::{Kind, UnpackedKind};\n use crate::ty::{self, ParamConst, Ty};\n use crate::ty::print::{FmtPrinter, PrettyPrinter, PrintCx, Print, Printer};\n use crate::mir::interpret::ConstValue;\n@@ -142,19 +141,6 @@ macro_rules! define_scoped_cx {\n     };\n }\n \n-pub fn parameterized<F: fmt::Write>(\n-    f: &mut F,\n-    did: DefId,\n-    substs: SubstsRef<'_>,\n-    ns: Namespace,\n-) -> fmt::Result {\n-    PrintCx::with_tls_tcx(FmtPrinter::new(f, ns), |cx| {\n-        let substs = cx.tcx.lift(&substs).expect(\"could not lift for printing\");\n-        cx.print_def_path(did, Some(substs), iter::empty())?;\n-        Ok(())\n-    })\n-}\n-\n define_print! {\n     ('tcx) &'tcx ty::List<ty::ExistentialPredicate<'tcx>>, (self, cx) {\n         display {"}, {"sha": "68d13bf2dcb24b52eba68fa89569bfd253c9ea80", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "patch": "@@ -216,9 +216,8 @@ impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n // These keys are used by the handwritten auto-tests, so they need to be\n // predictable and human-readable.\n //\n-// Note: A lot of this could looks very similar to what's already in the\n-//       ppaux module. It would be good to refactor things so we only have one\n-//       parameterizable implementation for printing types.\n+// Note: A lot of this could looks very similar to what's already in `ty::print`.\n+// FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n \n /// Same as `unique_type_name()` but with the result pushed onto the given\n /// `output` parameter."}]}