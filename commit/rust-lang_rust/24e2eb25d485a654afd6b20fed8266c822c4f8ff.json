{"sha": "24e2eb25d485a654afd6b20fed8266c822c4f8ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTJlYjI1ZDQ4NWE2NTRhZmQ2YjIwZmVkODI2NmM4MjJjNGY4ZmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:38:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:38:49Z"}, "message": "Fix some warnings", "tree": {"sha": "b8fbefd18b2cb98a9c612c0509c66eeec37a8863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8fbefd18b2cb98a9c612c0509c66eeec37a8863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e2eb25d485a654afd6b20fed8266c822c4f8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e2eb25d485a654afd6b20fed8266c822c4f8ff", "html_url": "https://github.com/rust-lang/rust/commit/24e2eb25d485a654afd6b20fed8266c822c4f8ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e2eb25d485a654afd6b20fed8266c822c4f8ff/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb017326bef9e0a7af87043d6e7ce7a62a52da75", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb017326bef9e0a7af87043d6e7ce7a62a52da75", "html_url": "https://github.com/rust-lang/rust/commit/bb017326bef9e0a7af87043d6e7ce7a62a52da75"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "27e3506ece3bd06f8ea6d30878460a64cc5f63b3", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24e2eb25d485a654afd6b20fed8266c822c4f8ff/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e2eb25d485a654afd6b20fed8266c822c4f8ff/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=24e2eb25d485a654afd6b20fed8266c822c4f8ff", "patch": "@@ -151,7 +151,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n                 inst\n             }\n \n-            TerminatorKind::SwitchInt { discr, switch_ty, values, targets } => {\n+            TerminatorKind::SwitchInt { discr, switch_ty: _, values, targets } => {\n                 let discr = trans_operand(fx, discr).load_value(fx);\n                 let mut jt_data = JumpTableData::new();\n                 for (i, value) in values.iter().enumerate() {\n@@ -426,7 +426,7 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n     fx.bcx.func.comments[inst] = format!(\"{:?}\", stmt);\n }\n \n-fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, checked: bool) -> CValue<'tcx> {\n+fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, _checked: bool) -> CValue<'tcx> {\n     let res = match (bin_op, signed) {\n         (BinOp::Add, _) => fx.bcx.ins().iadd(lhs, rhs),\n         (BinOp::Sub, _) => fx.bcx.ins().isub(lhs, rhs),\n@@ -466,10 +466,10 @@ fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>)\n                 ProjectionElem::Deref => {\n                     CPlace::Addr(base.to_cvalue(fx).load_value(fx), fx.layout_of(place.ty(&*fx.mir, fx.tcx).to_ty(fx.tcx)))\n                 }\n-                ProjectionElem::Field(field, ty) => {\n+                ProjectionElem::Field(field, _ty) => {\n                     base.place_field(fx, field)\n                 }\n-                ProjectionElem::Downcast(adt_def, variant) => {\n+                ProjectionElem::Downcast(_adt_def, variant) => {\n                     base.downcast_variant(fx, variant)\n                 }\n                 _ => unimplemented!(\"projection {:?}\", projection),"}, {"sha": "eedd81d2efc6f0a9c922543b87f2f99a046dfedf", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e2eb25d485a654afd6b20fed8266c822c4f8ff/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e2eb25d485a654afd6b20fed8266c822c4f8ff/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=24e2eb25d485a654afd6b20fed8266c822c4f8ff", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             CPlace::Addr(addr, layout) => {\n                 let size = layout.size.bytes() as i32;\n \n-                if let Some(cton_ty) = fx.cton_type(layout.ty) {\n+                if let Some(_) = fx.cton_type(layout.ty) {\n                     let data = from.load_value(fx);\n                     fx.bcx.ins().store(MemFlags::new(), data, addr, 0);\n                 } else {"}]}