{"sha": "c2ed08715b2f6b946089ccf967d18e70bb04ea39", "node_id": "C_kwDOAAsO6NoAKGMyZWQwODcxNWIyZjZiOTQ2MDg5Y2NmOTY3ZDE4ZTcwYmIwNGVhMzk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T11:36:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T11:58:28Z"}, "message": "remove unused function argument", "tree": {"sha": "6823a9f1b03cf31033dcc3b636f6814cc891503d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6823a9f1b03cf31033dcc3b636f6814cc891503d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2ed08715b2f6b946089ccf967d18e70bb04ea39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ed08715b2f6b946089ccf967d18e70bb04ea39", "html_url": "https://github.com/rust-lang/rust/commit/c2ed08715b2f6b946089ccf967d18e70bb04ea39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2ed08715b2f6b946089ccf967d18e70bb04ea39/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "html_url": "https://github.com/rust-lang/rust/commit/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56"}], "stats": {"total": 42, "additions": 5, "deletions": 37}, "files": [{"sha": "33ce43cd5593bd12317f49ef32ab3ba3b5436cf1", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c2ed08715b2f6b946089ccf967d18e70bb04ea39", "patch": "@@ -315,8 +315,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         body_id: Option<hir::BodyId>,\n         failure_span: Span,\n         arg: GenericArg<'tcx>,\n-        // FIXME(#94483): Either use this or remove it.\n-        _impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n         should_label_span: bool,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {"}, {"sha": "88b09f4de0a4c260485e7262b84aef91f5b42797", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c2ed08715b2f6b946089ccf967d18e70bb04ea39", "patch": "@@ -1980,7 +1980,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             body_id,\n                             span,\n                             trait_ref.self_ty().skip_binder().into(),\n-                            vec![],\n                             ErrorCode::E0282,\n                             false,\n                         )\n@@ -2005,19 +2004,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 let subst = data.trait_ref.substs.iter().find(|s| s.has_infer_types_or_consts());\n \n                 let mut err = if let Some(subst) = subst {\n-                    let impl_candidates = self\n-                        .find_similar_impl_candidates(trait_ref)\n-                        .into_iter()\n-                        .map(|candidate| candidate.trait_ref)\n-                        .collect();\n-                    self.emit_inference_failure_err(\n-                        body_id,\n-                        span,\n-                        subst,\n-                        impl_candidates,\n-                        ErrorCode::E0283,\n-                        true,\n-                    )\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283, true)\n                 } else {\n                     struct_span_err!(\n                         self.tcx.sess,\n@@ -2117,7 +2104,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282, false)\n+                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282, false)\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2131,14 +2118,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    a.into(),\n-                    vec![],\n-                    ErrorCode::E0282,\n-                    true,\n-                )\n+                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282, true)\n             }\n             ty::PredicateKind::Projection(data) => {\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n@@ -2155,7 +2135,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         body_id,\n                         span,\n                         subst,\n-                        vec![],\n                         ErrorCode::E0284,\n                         true,\n                     );"}, {"sha": "5297c48b4c37d07058aa152d2931dffb6ee2c041", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c2ed08715b2f6b946089ccf967d18e70bb04ea39", "patch": "@@ -1538,15 +1538,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.emit_inference_failure_err(\n-                    (**self).body_id,\n-                    sp,\n-                    ty.into(),\n-                    vec![],\n-                    E0282,\n-                    true,\n-                )\n-                .emit();\n+                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n+                    .emit();\n             }\n             let err = self.tcx.ty_error();\n             self.demand_suptype(sp, err, ty);"}, {"sha": "16e5639096c5e7c62dd339cf797775c05e2e452b", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ed08715b2f6b946089ccf967d18e70bb04ea39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=c2ed08715b2f6b946089ccf967d18e70bb04ea39", "patch": "@@ -692,7 +692,6 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     t.into(),\n-                    vec![],\n                     E0282,\n                     false,\n                 )\n@@ -707,7 +706,6 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     c.into(),\n-                    vec![],\n                     E0282,\n                     false,\n                 )"}]}