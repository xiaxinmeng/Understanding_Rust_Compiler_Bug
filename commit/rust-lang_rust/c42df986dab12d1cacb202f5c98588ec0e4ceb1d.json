{"sha": "c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "node_id": "C_kwDOAAsO6NoAKGM0MmRmOTg2ZGFiMTJkMWNhY2IyMDJmNWM5ODU4OGVjMGU0Y2ViMWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-03T05:03:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-03T05:03:06Z"}, "message": "Rollup merge of #101325 - ChrisDenton:BCRYPT_RNG_ALG_HANDLE, r=thomcc\n\nWindows RNG: Use `BCRYPT_RNG_ALG_HANDLE` by default\n\nThis only changes a small amount of actual code, the rest is documentation outlining the history of this module as I feel it will be relevant to any future issues that might crop up.\n\nThe code change is to use the `BCRYPT_RNG_ALG_HANDLE` [pseudo-handle](https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-pseudo-handles) by default, which simply uses the default RNG. Previously we used `BCRYPT_USE_SYSTEM_PREFERRED_RNG` which has to load the system configuration and then find and load that RNG. I suspect this was the cause of failures on some systems (e.g. due to corrupted config). However, this is admittedly speculation as I can't reproduce the issue myself (and it does seem quite rare even in the wild). Still, removing a possible point of failure is likely worthwhile in any case.\n\nr? libs", "tree": {"sha": "bd8e7c8d45473aacfd85117e679eb11b8dfc6f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd8e7c8d45473aacfd85117e679eb11b8dfc6f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEuAKCRBK7hj4Ov3rIwAAHiwIAFxiy23HWh6LvJXzLC7wF+g8\nv85sY7lHSZK39d59x8W5MsUTgwSHUweqQtl7Cx4hLk1xdH1rlyxKHVTRBLo7lo5i\nwjh3523z8HrtypevfZiJwQGgy5TmcPUUXPYG8HkWQxGhgMQPi8+etb6vCPgGH8Nz\nPLnQaQsI0TaX41u2ujEK8mYKhUCQ5efnbmSBO8K0gslkWz4tkbl3P6lXmcwj5ATc\nYRFTKwepnVNZbK/D5yL0sSO3XvzZdBYm7iKZWm0udihO8x/O2Q9SRmXc++DVwX34\nxl2Jz4z48/rAsX6sv5cAtJvd4B+QyiIB8fF+D6bl8C8txqoPCJU7heQ3qosW7eM=\n=GzM3\n-----END PGP SIGNATURE-----\n", "payload": "tree bd8e7c8d45473aacfd85117e679eb11b8dfc6f4b\nparent dc8fe633d5812096008d94d47fa692264d327a46\nparent bc793c9fb2ae45b1e93cdd6ad1cd4ffe30587674\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662181386 +0530\ncommitter GitHub <noreply@github.com> 1662181386 +0530\n\nRollup merge of #101325 - ChrisDenton:BCRYPT_RNG_ALG_HANDLE, r=thomcc\n\nWindows RNG: Use `BCRYPT_RNG_ALG_HANDLE` by default\n\nThis only changes a small amount of actual code, the rest is documentation outlining the history of this module as I feel it will be relevant to any future issues that might crop up.\n\nThe code change is to use the `BCRYPT_RNG_ALG_HANDLE` [pseudo-handle](https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-pseudo-handles) by default, which simply uses the default RNG. Previously we used `BCRYPT_USE_SYSTEM_PREFERRED_RNG` which has to load the system configuration and then find and load that RNG. I suspect this was the cause of failures on some systems (e.g. due to corrupted config). However, this is admittedly speculation as I can't reproduce the issue myself (and it does seem quite rare even in the wild). Still, removing a possible point of failure is likely worthwhile in any case.\n\nr? libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "html_url": "https://github.com/rust-lang/rust/commit/c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42df986dab12d1cacb202f5c98588ec0e4ceb1d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc8fe633d5812096008d94d47fa692264d327a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8fe633d5812096008d94d47fa692264d327a46", "html_url": "https://github.com/rust-lang/rust/commit/dc8fe633d5812096008d94d47fa692264d327a46"}, {"sha": "bc793c9fb2ae45b1e93cdd6ad1cd4ffe30587674", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc793c9fb2ae45b1e93cdd6ad1cd4ffe30587674", "html_url": "https://github.com/rust-lang/rust/commit/bc793c9fb2ae45b1e93cdd6ad1cd4ffe30587674"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "78d6ce3eff493452f934fcec8c23b4d8065bc9d1", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c42df986dab12d1cacb202f5c98588ec0e4ceb1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42df986dab12d1cacb202f5c98588ec0e4ceb1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "patch": "@@ -285,7 +285,7 @@ pub fn nt_success(status: NTSTATUS) -> bool {\n     status >= 0\n }\n \n-pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: DWORD = 0x00000002;\n+pub const BCRYPT_RNG_ALG_HANDLE: usize = 0x81;\n \n #[repr(C)]\n pub struct UNICODE_STRING {"}, {"sha": "8b9697884364c837ac44f8308d184ee7ab0eb78d", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c42df986dab12d1cacb202f5c98588ec0e4ceb1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42df986dab12d1cacb202f5c98588ec0e4ceb1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=c42df986dab12d1cacb202f5c98588ec0e4ceb1d", "patch": "@@ -1,16 +1,49 @@\n+//! # Random key generation\n+//!\n+//! This module wraps the RNG provided by the OS. There are a few different\n+//! ways to interface with the OS RNG so it's worth exploring each of the options.\n+//! Note that at the time of writing these all go through the (undocumented)\n+//! `bcryptPrimitives.dll` but they use different route to get there.\n+//!\n+//! Originally we were using [`RtlGenRandom`], however that function is\n+//! deprecated and warns it \"may be altered or unavailable in subsequent versions\".\n+//!\n+//! So we switched to [`BCryptGenRandom`] with the `BCRYPT_USE_SYSTEM_PREFERRED_RNG`\n+//! flag to query and find the system configured RNG. However, this change caused a small\n+//! but significant number of users to experience panics caused by a failure of\n+//! this function. See [#94098].\n+//!\n+//! The current version changes this to use the `BCRYPT_RNG_ALG_HANDLE`\n+//! [Pseudo-handle], which gets the default RNG algorithm without querying the\n+//! system preference thus hopefully avoiding the previous issue.\n+//! This is only supported on Windows 10+ so a fallback is used for older versions.\n+//!\n+//! [#94098]: https://github.com/rust-lang/rust/issues/94098\n+//! [`RtlGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom\n+//! [`BCryptGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+//! [Pseudo-handle]: https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-pseudo-handles\n use crate::io;\n use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n \n+/// Generates high quality secure random keys for use by [`HashMap`].\n+///\n+/// This is used to seed the default [`RandomState`].\n+///\n+/// [`HashMap`]: crate::collections::HashMap\n+/// [`RandomState`]: crate::collections::hash_map::RandomState\n pub fn hashmap_random_keys() -> (u64, u64) {\n     let mut v = (0, 0);\n     let ret = unsafe {\n+        let size = mem::size_of_val(&v).try_into().unwrap();\n         c::BCryptGenRandom(\n-            ptr::null_mut(),\n-            &mut v as *mut _ as *mut u8,\n-            mem::size_of_val(&v) as c::ULONG,\n-            c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n+            // BCRYPT_RNG_ALG_HANDLE is only supported in Windows 10+.\n+            // So for Windows 8.1 and Windows 7 we'll need a fallback when this fails.\n+            ptr::invalid_mut(c::BCRYPT_RNG_ALG_HANDLE),\n+            ptr::addr_of_mut!(v).cast(),\n+            size,\n+            0,\n         )\n     };\n     if ret != 0 { fallback_rng() } else { v }"}]}