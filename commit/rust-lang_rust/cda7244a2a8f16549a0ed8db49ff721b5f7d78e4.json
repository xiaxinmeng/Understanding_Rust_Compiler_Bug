{"sha": "cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTcyNDRhMmE4ZjE2NTQ5YTBlZDhkYjQ5ZmY3MjFiNWY3ZDc4ZTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:56:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:56:27Z"}, "message": "Add more systematic tests", "tree": {"sha": "7e1f256574a50dd1e6c22a4496ab50184a7fadba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1f256574a50dd1e6c22a4496ab50184a7fadba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "html_url": "https://github.com/rust-lang/rust/commit/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f359d5912de9162534d65fe01fb2f52941e97d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f359d5912de9162534d65fe01fb2f52941e97d0", "html_url": "https://github.com/rust-lang/rust/commit/8f359d5912de9162534d65fe01fb2f52941e97d0"}], "stats": {"total": 831, "additions": 402, "deletions": 429}, "files": [{"sha": "c619f771fda68f864538ec2a4e7b7bfebe6e9d3a", "filename": "src/test/compile-fail/issue-22912.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub struct PublicType;\n-struct PrivateType;\n-\n-pub trait PublicTrait {\n-    type Item;\n-}\n-\n-trait PrivateTrait {\n-    type Item;\n-}\n-\n-impl PublicTrait for PublicType {\n-    type Item = PrivateType;  //~ ERROR private type in public interface\n-}\n-\n-// OK\n-impl PublicTrait for PrivateType {\n-    type Item = PrivateType;\n-}\n-\n-// OK\n-impl PrivateTrait for PublicType {\n-    type Item = PrivateType;\n-}\n-\n-// OK\n-impl PrivateTrait for PrivateType {\n-    type Item = PrivateType;\n-}\n-\n-fn main() {}"}, {"sha": "34a623846935a11f95f7cb3b0c2007ea04d25842", "filename": "src/test/compile-fail/issue-28325.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Checks for private types in public interfaces\n-\n-#![feature(rustc_attrs)]\n-#![allow(dead_code, unused_variables)]\n-\n-mod y {\n-    pub struct Foo { x: u32 }\n-\n-    struct Bar { x: u32 }\n-\n-    impl Foo {\n-        pub fn foo(&self, x: Self, y: Bar) { } //~ WARN private type in public interface\n-    }\n-}\n-\n-mod x {\n-    pub struct Foo { pub x: u32 }\n-\n-    struct Bar { _x: u32 }\n-\n-    impl Foo {\n-        pub fn foo(&self, _x: Self, _y: Bar) { } //~ WARN private type in public interface\n-        pub fn bar(&self) -> Bar { Bar { _x: self.x } }\n-        //~^ WARN private type in public interface\n-    }\n-}\n-\n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n-    let f = x::Foo { x: 4 };\n-    let b = f.bar();\n-    f.foo(x::Foo { x: 5 }, b);\n-}"}, {"sha": "65c5978103ae8f9c37e2f38f0da87fcd535d4374", "filename": "src/test/compile-fail/issue-28450.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Checks for private types in public interfaces\n-\n-#![feature(rustc_attrs)]\n-\n-struct Priv;\n-\n-pub use self::private::public;\n-\n-mod private {\n-    pub type Priv = super::Priv; //~ WARN private type in public interface\n-\n-    pub fn public(_x: Priv) {\n-    }\n-}\n-\n-struct __CFArray;\n-pub type CFArrayRef = *const __CFArray; //~ WARN private type in public interface\n-trait Pointer { type Pointee; }\n-impl<T> Pointer for *const T { type Pointee = T; }\n-pub type __CFArrayRevealed = <CFArrayRef as Pointer>::Pointee;\n-//~^ WARN private type in public interface\n-\n-pub trait Exporter {\n-    type Output;\n-}\n-pub struct Helper;\n-\n-pub fn block() -> <Helper as Exporter>::Output {\n-    struct Inner;\n-    impl Inner {\n-        fn poke(&self) { println!(\"Hello!\"); }\n-    }\n-\n-    impl Exporter for Helper {\n-        type Output = Inner; //~ WARN private type in public interface\n-    }\n-\n-    Inner\n-}\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n-    block().poke();\n-}"}, {"sha": "939f2400d1b8994616e01a1507c387d7edabb46d", "filename": "src/test/compile-fail/lint-visible-private-types-1.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n-use std::marker;\n-\n-struct Private<T>(marker::PhantomData<T>);\n-pub struct Public<T>(marker::PhantomData<T>);\n-\n-pub trait PubTrait {\n-    type Output;\n-}\n-\n-type PrivAlias = Public<i8>;\n-\n-trait PrivTrait2 {\n-    type Alias;\n-}\n-impl PrivTrait2 for Private<isize> {\n-    type Alias = Public<u8>;\n-}\n-\n-impl PubTrait for PrivAlias {\n-    type Output = Private<isize>; //~ WARN private type in public interface\n-}\n-\n-impl PubTrait for <Private<isize> as PrivTrait2>::Alias {\n-    type Output = Private<isize>; //~ WARN private type in public interface\n-}\n-\n-type PrivAliasPubType = u8;\n-pub fn f1(_: PrivAliasPubType) {} // Ok, not an error\n-\n-type PrivAliasGeneric<T = Private<isize>> = T;\n-pub fn f2(_: PrivAliasGeneric<u8>) {} // Ok, not an error\n-\n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful"}, {"sha": "e9890dc32b736feb1b2b82bbf06a249a790dd733", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,132 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![crate_type=\"lib\"]\n-\n-use std::marker;\n-\n-struct Private<T>(marker::PhantomData<T>);\n-pub struct Public<T>(marker::PhantomData<T>);\n-\n-impl Private<Public<isize>> {\n-    pub fn a(&self) -> Private<isize> { panic!() }\n-    fn b(&self) -> Private<isize> { panic!() }\n-\n-    pub fn c() -> Private<isize> { panic!() }\n-    fn d() -> Private<isize> { panic!() }\n-}\n-impl Private<isize> {\n-    pub fn e(&self) -> Private<isize> { panic!() }\n-    fn f(&self) -> Private<isize> { panic!() }\n-}\n-\n-impl Public<Private<isize>> {\n-    pub fn a(&self) -> Private<isize> { panic!() }\n-    fn b(&self) -> Private<isize> { panic!() }\n-\n-    pub fn c() -> Private<isize> { panic!() }\n-    fn d() -> Private<isize> { panic!() }\n-}\n-impl Public<isize> {\n-    pub fn e(&self) -> Private<isize> { panic!() } //~ ERROR private type in public interface\n-    fn f(&self) -> Private<isize> { panic!() }\n-}\n-\n-pub fn x(_: Private<isize>) {} //~ ERROR private type in public interface\n-\n-fn y(_: Private<isize>) {}\n-\n-\n-pub struct Foo {\n-    pub x: Private<isize>, //~ ERROR private type in public interface\n-    y: Private<isize>\n-}\n-\n-struct Bar {\n-    x: Private<isize>,\n-}\n-\n-pub enum Baz {\n-    Baz1(Private<isize>), //~ ERROR private type in public interface\n-    Baz2 {\n-        y: Private<isize> //~ ERROR private type in public interface\n-    },\n-}\n-\n-enum Qux {\n-    Qux1(Private<isize>),\n-    Qux2 {\n-        x: Private<isize>,\n-    }\n-}\n-\n-pub trait PubTrait {\n-    fn foo(&self) -> Private<isize> { panic!( )} //~ ERROR private type in public interface\n-    fn bar(&self) -> Private<isize>; //~ ERROR private type in public interface\n-    fn baz() -> Private<isize>; //~ ERROR private type in public interface\n-}\n-\n-impl PubTrait for Public<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() } // Warns in lint checking phase\n-    fn baz() -> Private<isize> { panic!() } // Warns in lint checking phase\n-}\n-impl PubTrait for Public<Private<isize>> {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-    fn baz() -> Private<isize> { panic!() }\n-}\n-\n-impl PubTrait for Private<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-    fn baz() -> Private<isize> { panic!() }\n-}\n-impl PubTrait for (Private<isize>,) {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-    fn baz() -> Private<isize> { panic!() }\n-}\n-\n-\n-trait PrivTrait {\n-    fn foo(&self) -> Private<isize> { panic!( )}\n-    fn bar(&self) -> Private<isize>;\n-}\n-impl PrivTrait for Private<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-}\n-impl PrivTrait for (Private<isize>,) {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-}\n-\n-pub trait ParamTrait<T> {\n-    fn foo() -> T;\n-}\n-\n-impl ParamTrait<Private<isize>>\n-   for Public<isize> {\n-    fn foo() -> Private<isize> { panic!() }\n-}\n-\n-impl ParamTrait<Private<isize>> for Private<isize> {\n-    fn foo() -> Private<isize> { panic!( )}\n-}\n-\n-impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in public interface\n-     ParamTrait<T> for Public<i8> {\n-    fn foo() -> T { panic!() }\n-}\n-\n-type PrivAliasPrivType = Private<isize>;\n-pub fn f1(_: PrivAliasPrivType) {} //~ ERROR private type in public interface\n-\n-type PrivAliasGeneric<T = Private<isize>> = T;\n-pub fn f2(_: PrivAliasGeneric) {} //~ ERROR private type in public interface\n-\n-type Result<T> = std::result::Result<T, Private<isize>>;\n-pub fn f3(_: Result<u8>) {} //~ ERROR private type in public interface"}, {"sha": "cca6143ed409ec21cee0228682730cd8cee63ffa", "filename": "src/test/compile-fail/priv_in_pub_sig_priv_mod.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we properly check for private types in public signatures, even\n-// inside a private module (#22261).\n-\n-mod a {\n-    struct Priv;\n-\n-    pub fn expose_a() -> Priv { //~Error: private type in public interface\n-        panic!();\n-    }\n-\n-    mod b {\n-        pub fn expose_b() -> super::Priv { //~Error: private type in public interface\n-            panic!();\n-        }\n-    }\n-}\n-\n-pub fn main() {}"}, {"sha": "f9b049c5d3360e584af7a77e377f00e88d14dabe", "filename": "src/test/compile-fail/private-in-public-lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs?ref=cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "previous_filename": "src/test/compile-fail/lint-private-in-public.rs"}, {"sha": "8128fde4de580fc2cd0784c33a045ad1c2e5dade", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "patch": "@@ -0,0 +1,254 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Private types and traits are not allowed in public interfaces.\n+// This test also ensures that the checks are performed even inside private modules.\n+\n+#![feature(rustc_attrs)]\n+#![feature(associated_consts)]\n+#![feature(associated_type_defaults)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(improper_ctypes)]\n+\n+mod types {\n+    struct Priv;\n+    pub struct Pub;\n+    pub trait PubTr {\n+        type Alias;\n+    }\n+\n+    pub type Alias = Priv; //~ WARN private type in public interface\n+    pub enum E {\n+        V1(Priv), //~ WARN private type in public interface\n+        V2 { field: Priv }, //~ WARN private type in public interface\n+    }\n+    pub trait Tr {\n+        const C: Priv = Priv; //~ WARN private type in public interface\n+        type Alias = Priv; //~ WARN private type in public interface\n+        fn f1(arg: Priv) {} //~ WARN private type in public interface\n+        fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n+    }\n+    extern {\n+        pub static ES: Priv; //~ WARN private type in public interface\n+        pub fn ef1(arg: Priv); //~ WARN private type in public interface\n+        pub fn ef2() -> Priv; //~ WARN private type in public interface\n+    }\n+    impl PubTr for Pub {\n+        type Alias = Priv; //~ WARN private type in public interface\n+    }\n+}\n+\n+mod traits {\n+    trait PrivTr {}\n+    pub struct Pub<T>(T);\n+    pub trait PubTr {}\n+\n+    pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n+    //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n+    pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n+    pub trait Tr3 {\n+        type Alias: PrivTr; //~ WARN private trait in public interface\n+        fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n+    }\n+    impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n+    impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n+}\n+\n+mod traits_where {\n+    trait PrivTr {}\n+    pub struct Pub<T>(T);\n+    pub trait PubTr {}\n+\n+    pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n+    pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n+    pub trait Tr3 {\n+        fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n+    }\n+    impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+    impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+}\n+\n+mod generics {\n+    struct Priv<T = u8>(T);\n+    pub struct Pub<T = u8>(T);\n+    trait PrivTr<T> {}\n+    pub trait PubTr<T> {}\n+\n+    pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n+    pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n+    pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n+    pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n+}\n+\n+mod impls {\n+    struct Priv;\n+    pub struct Pub;\n+    trait PrivTr {\n+        type Alias;\n+    }\n+    pub trait PubTr {\n+        type Alias;\n+    }\n+\n+    impl Priv {\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+    impl PrivTr for Priv {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr for Priv {\n+        type Alias = Priv; // OK\n+    }\n+    impl PrivTr for Pub {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr for Pub {\n+        type Alias = Priv; //~ WARN private type in public interface\n+    }\n+}\n+\n+mod impls_generics {\n+    struct Priv<T = u8>(T);\n+    pub struct Pub<T = u8>(T);\n+    trait PrivTr<T = u8> {\n+        type Alias;\n+    }\n+    pub trait PubTr<T = u8> {\n+        type Alias;\n+    }\n+\n+    impl Priv<Pub> {\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+    impl Pub<Priv> {\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+    impl PrivTr<Pub> for Priv {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr<Priv> for Priv {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr for Priv<Pub> {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr for [Priv; 1] {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr for Pub<Priv> {\n+        type Alias = Priv; // OK\n+    }\n+    impl PrivTr<Pub> for Pub {\n+        type Alias = Priv; // OK\n+    }\n+    impl PubTr<Priv> for Pub {\n+        type Alias = Priv; // OK\n+    }\n+}\n+\n+mod aliases_pub {\n+    struct Priv;\n+    mod m {\n+        pub struct Pub1;\n+        pub struct Pub2;\n+        pub struct Pub3;\n+        pub trait PubTr<T = u8> {\n+            type Check = u8;\n+        }\n+    }\n+\n+    use self::m::Pub1 as PrivUseAlias;\n+    use self::m::PubTr as PrivUseAliasTr;\n+    type PrivAlias = m::Pub2;\n+    trait PrivTr {\n+        type AssocAlias = m::Pub3;\n+    }\n+    impl PrivTr for Priv {}\n+\n+    pub fn f1(arg: PrivUseAlias) {} // OK\n+    pub fn f2(arg: PrivAlias) {} // OK\n+\n+    pub trait Tr1: PrivUseAliasTr {} // OK\n+    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} // OK\n+\n+    impl PrivAlias {\n+        pub fn f(arg: Priv) {} //~ WARN private type in public interface\n+    }\n+    // This doesn't even parse\n+    // impl <Priv as PrivTr>::AssocAlias {\n+    //     pub fn f(arg: Priv) {} // WARN private type in public interface\n+    // }\n+    impl PrivUseAliasTr for PrivUseAlias {\n+        type Check = Priv; //~ WARN private type in public interface\n+    }\n+    impl PrivUseAliasTr for PrivAlias {\n+        type Check = Priv; //~ WARN private type in public interface\n+    }\n+    impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n+        type Check = Priv; //~ WARN private type in public interface\n+    }\n+}\n+\n+mod aliases_priv {\n+    struct Priv;\n+\n+    struct Priv1;\n+    struct Priv2;\n+    struct Priv3;\n+    trait PrivTr1<T = u8> {\n+        type Check = u8;\n+    }\n+\n+    use self::Priv1 as PrivUseAlias;\n+    use self::PrivTr1 as PrivUseAliasTr;\n+    type PrivAlias = Priv2;\n+    //~^ WARN private type in public interface\n+    trait PrivTr {\n+        type AssocAlias = Priv3;\n+    }\n+    impl PrivTr for Priv {}\n+\n+    pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n+    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n+     //~^ WARN private type in public interface\n+\n+    impl PrivUseAlias {\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+    impl PrivAlias {\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+    // This doesn't even parse\n+    // impl <Priv as PrivTr>::AssocAlias {\n+    //     pub fn f(arg: Priv) {} // OK\n+    // }\n+    impl PrivUseAliasTr for PrivUseAlias {\n+        type Check = Priv; // OK\n+    }\n+    impl PrivUseAliasTr for PrivAlias {\n+        type Check = Priv; // OK\n+    }\n+    impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n+        type Check = Priv; // OK\n+    }\n+}\n+\n+mod aliases_params {\n+    struct Priv;\n+    type PrivAliasGeneric<T = Priv> = T;\n+    type Result<T> = ::std::result::Result<T, Priv>;\n+\n+    pub fn f1(arg: PrivAliasGeneric<u8>) {} // OK, not an error\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "7d4dcfd3145abdd313a6663c8fd620579d88fd26", "filename": "src/test/compile-fail/private-in-public.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs?ref=cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "patch": "@@ -0,0 +1,148 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Private types and traits are not allowed in public interfaces.\n+// This test also ensures that the checks are performed even inside private modules.\n+\n+#![feature(associated_consts)]\n+#![feature(associated_type_defaults)]\n+\n+mod types {\n+    struct Priv;\n+    pub struct Pub;\n+    pub trait PubTr {\n+        type Alias;\n+    }\n+\n+    pub const C: Priv = Priv; //~ ERROR private type in public interface\n+    pub static S: Priv = Priv; //~ ERROR private type in public interface\n+    pub fn f1(arg: Priv) {} //~ ERROR private type in public interface\n+    pub fn f2() -> Priv { panic!() } //~ ERROR private type in public interface\n+    pub struct S1(pub Priv); //~ ERROR private type in public interface\n+    pub struct S2 { pub field: Priv } //~ ERROR private type in public interface\n+    impl Pub {\n+        pub const C: Priv = Priv; //~ ERROR private type in public interface\n+        pub fn f1(arg: Priv) {} //~ ERROR private type in public interface\n+        pub fn f2() -> Priv { panic!() } //~ ERROR private type in public interface\n+    }\n+}\n+\n+mod traits {\n+    trait PrivTr {}\n+    pub struct Pub<T>(T);\n+    pub trait PubTr {}\n+\n+    pub enum E<T: PrivTr> { V(T) } //~ ERROR private trait in public interface\n+    pub fn f<T: PrivTr>(arg: T) {} //~ ERROR private trait in public interface\n+    pub struct S1<T: PrivTr>(T); //~ ERROR private trait in public interface\n+    impl<T: PrivTr> Pub<T> {\n+        pub fn f<U: PrivTr>(arg: U) {} //~ ERROR private trait in public interface\n+    }\n+}\n+\n+mod traits_where {\n+    trait PrivTr {}\n+    pub struct Pub<T>(T);\n+    pub trait PubTr {}\n+\n+    pub enum E<T> where T: PrivTr { V(T) } //~ ERROR private trait in public interface\n+    pub fn f<T>(arg: T) where T: PrivTr {} //~ ERROR private trait in public interface\n+    pub struct S1<T>(T) where T: PrivTr; //~ ERROR private trait in public interface\n+    impl<T> Pub<T> where T: PrivTr {\n+        pub fn f<U>(arg: U) where U: PrivTr {} //~ ERROR private trait in public interface\n+    }\n+}\n+\n+mod generics {\n+    struct Priv<T = u8>(T);\n+    pub struct Pub<T = u8>(T);\n+    trait PrivTr<T> {}\n+    pub trait PubTr<T> {}\n+\n+    pub fn f1(arg: [Priv; 1]) {} //~ ERROR private type in public interface\n+    pub fn f2(arg: Pub<Priv>) {} //~ ERROR private type in public interface\n+    pub fn f3(arg: Priv<Pub>) {} //~ ERROR private type in public interface\n+}\n+\n+mod impls {\n+    struct Priv;\n+    pub struct Pub;\n+    trait PrivTr {\n+        type Alias;\n+    }\n+    pub trait PubTr {\n+        type Alias;\n+    }\n+\n+    impl Pub {\n+        pub fn f(arg: Priv) {} //~ ERROR private type in public interface\n+    }\n+}\n+\n+mod aliases_pub {\n+    struct Priv;\n+    mod m {\n+        pub struct Pub1;\n+        pub struct Pub2;\n+        pub struct Pub3;\n+        pub trait PubTr<T = u8> {\n+            type Check = u8;\n+        }\n+    }\n+\n+    use self::m::Pub1 as PrivUseAlias;\n+    use self::m::PubTr as PrivUseAliasTr;\n+    type PrivAlias = m::Pub2;\n+    trait PrivTr {\n+        type AssocAlias = m::Pub3;\n+    }\n+    impl PrivTr for Priv {}\n+\n+    // This should be OK, but associated type aliases are not substituted yet\n+    pub fn f3(arg: <Priv as PrivTr>::AssocAlias) {} //~ ERROR private type in public interface\n+\n+    impl PrivUseAlias {\n+        pub fn f(arg: Priv) {} //~ ERROR private type in public interface\n+    }\n+}\n+\n+mod aliases_priv {\n+    struct Priv;\n+\n+    struct Priv1;\n+    struct Priv2;\n+    struct Priv3;\n+    trait PrivTr1<T = u8> {\n+        type Check = u8;\n+    }\n+\n+    use self::Priv1 as PrivUseAlias;\n+    use self::PrivTr1 as PrivUseAliasTr;\n+    type PrivAlias = Priv2;\n+    trait PrivTr {\n+        type AssocAlias = Priv3;\n+    }\n+    impl PrivTr for Priv {}\n+\n+    pub fn f1(arg: PrivUseAlias) {} //~ ERROR private type in public interface\n+    pub fn f2(arg: PrivAlias) {} //~ ERROR private type in public interface\n+    pub fn f3(arg: <Priv as PrivTr>::AssocAlias) {} //~ ERROR private type in public interface\n+}\n+\n+mod aliases_params {\n+    struct Priv;\n+    type PrivAliasGeneric<T = Priv> = T;\n+    type Result<T> = ::std::result::Result<T, Priv>;\n+\n+    pub fn f2(arg: PrivAliasGeneric) {} //~ ERROR private type in public interface\n+    pub fn f3(arg: Result<u8>) {} //~ ERROR private type in public interface\n+}\n+\n+fn main() {}"}, {"sha": "23e0547922881f08c5ee82b487d5d29afa91c7cf", "filename": "src/test/compile-fail/visible-private-types-generics.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,67 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Foo {\n-    fn dummy(&self) { }\n-}\n-\n-pub fn f<\n-    T\n-    : Foo //~ ERROR private trait in public interface\n->() {}\n-\n-pub fn g<T>() where\n-    T\n-    : Foo //~ ERROR private trait in public interface\n-{}\n-\n-pub struct S;\n-\n-impl S {\n-    pub fn f<\n-        T\n-        : Foo //~ ERROR private trait in public interface\n-    >() {}\n-\n-    pub fn g<T>() where\n-        T\n-        : Foo //~ ERROR private trait in public interface\n-    {}\n-}\n-\n-pub struct S1<\n-    T\n-    : Foo //~ ERROR private trait in public interface\n-> {\n-    x: T\n-}\n-\n-pub struct S2<T> where\n-    T\n-    : Foo //~ ERROR private trait in public interface\n-{\n-    x: T\n-}\n-\n-pub enum E1<\n-    T\n-    : Foo //~ ERROR private trait in public interface\n-> {\n-    V1(T)\n-}\n-\n-pub enum E2<T> where\n-    T\n-    : Foo //~ ERROR private trait in public interface\n-{\n-    V2(T)\n-}\n-\n-fn main() {}"}, {"sha": "6de627a698a170bd27763b77bf8731431126d77a", "filename": "src/test/compile-fail/visible-private-types-supertrait.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Foo {\n-    fn dummy(&self) { }\n-}\n-\n-pub trait Bar : Foo {} //~ ERROR private trait in public interface\n-\n-fn main() {}"}]}