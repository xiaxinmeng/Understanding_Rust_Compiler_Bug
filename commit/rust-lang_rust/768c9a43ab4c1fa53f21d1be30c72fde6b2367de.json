{"sha": "768c9a43ab4c1fa53f21d1be30c72fde6b2367de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGM5YTQzYWI0YzFmYTUzZjIxZDFiZTMwYzcyZmRlNmIyMzY3ZGU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-10T17:32:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-11T07:14:35Z"}, "message": "str: optimize `with_capacity`\n\nbefore:\n\ntest bench_with_capacity ... bench: 104 ns/iter (+/- 4)\n\nafter:\n\ntest bench_with_capacity ... bench: 56 ns/iter (+/- 1)", "tree": {"sha": "73cdd37ff4b737958a4823063f1b7eb222f2a8d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73cdd37ff4b737958a4823063f1b7eb222f2a8d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768c9a43ab4c1fa53f21d1be30c72fde6b2367de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768c9a43ab4c1fa53f21d1be30c72fde6b2367de", "html_url": "https://github.com/rust-lang/rust/commit/768c9a43ab4c1fa53f21d1be30c72fde6b2367de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768c9a43ab4c1fa53f21d1be30c72fde6b2367de/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afed31eccf0a5e2e996f2d1b3aa1ed79cb31821", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afed31eccf0a5e2e996f2d1b3aa1ed79cb31821", "html_url": "https://github.com/rust-lang/rust/commit/2afed31eccf0a5e2e996f2d1b3aa1ed79cb31821"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "81c9cde312e3bd4a1d8bd555e965723a330df25d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/768c9a43ab4c1fa53f21d1be30c72fde6b2367de/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768c9a43ab4c1fa53f21d1be30c72fde6b2367de/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=768c9a43ab4c1fa53f21d1be30c72fde6b2367de", "patch": "@@ -807,13 +807,24 @@ pub fn from_utf16(v: &[u16]) -> ~str {\n \n /// Allocates a new string with the specified capacity. The string returned is\n /// the empty string, but has capacity for much more.\n+#[cfg(stage0)]\n #[inline]\n pub fn with_capacity(capacity: uint) -> ~str {\n     let mut buf = ~\"\";\n     buf.reserve(capacity);\n     buf\n }\n \n+/// Allocates a new string with the specified capacity. The string returned is\n+/// the empty string, but has capacity for much more.\n+#[cfg(not(stage0))]\n+#[inline]\n+pub fn with_capacity(capacity: uint) -> ~str {\n+    unsafe {\n+        cast::transmute(vec::with_capacity::<~[u8]>(capacity))\n+    }\n+}\n+\n /// As char_len but for a slice of a string\n ///\n /// # Arguments\n@@ -3700,7 +3711,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use str;\n+    use super::*;\n \n     #[bench]\n     fn is_utf8_100_ascii(bh: &mut BenchHarness) {\n@@ -3710,7 +3721,7 @@ mod bench {\n \n         assert_eq!(100, s.len());\n         do bh.iter {\n-            str::is_utf8(s);\n+            is_utf8(s);\n         }\n     }\n \n@@ -3719,7 +3730,7 @@ mod bench {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n         do bh.iter {\n-            str::is_utf8(s);\n+            is_utf8(s);\n         }\n     }\n \n@@ -3742,4 +3753,11 @@ mod bench {\n             s.map_chars(|c| ((c as uint) + 1) as char);\n         }\n     }\n+\n+    #[bench]\n+    fn bench_with_capacity(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            with_capacity(100);\n+        }\n+    }\n }"}]}