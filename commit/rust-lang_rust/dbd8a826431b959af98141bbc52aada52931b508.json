{"sha": "dbd8a826431b959af98141bbc52aada52931b508", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDhhODI2NDMxYjk1OWFmOTgxNDFiYmM1MmFhZGE1MjkzMWI1MDg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-06T10:19:36Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-06T10:19:56Z"}, "message": "Add a test for overwriting part of a relocation.", "tree": {"sha": "c7206e0ed2e0ec181ffd03c3c7a2d5a08468bad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7206e0ed2e0ec181ffd03c3c7a2d5a08468bad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd8a826431b959af98141bbc52aada52931b508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd8a826431b959af98141bbc52aada52931b508", "html_url": "https://github.com/rust-lang/rust/commit/dbd8a826431b959af98141bbc52aada52931b508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd8a826431b959af98141bbc52aada52931b508/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08ddaaa48074040eeecf75e243cb5cbc19f4eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08ddaaa48074040eeecf75e243cb5cbc19f4eaf", "html_url": "https://github.com/rust-lang/rust/commit/c08ddaaa48074040eeecf75e243cb5cbc19f4eaf"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "d0faf7dc15330707039fd0de5d7e8d8c2db7fb4f", "filename": "src/interpreter.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbd8a826431b959af98141bbc52aada52931b508/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd8a826431b959af98141bbc52aada52931b508/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=dbd8a826431b959af98141bbc52aada52931b508", "patch": "@@ -411,6 +411,25 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 try!(self.memory.copy(val, ptr, size));\n             }\n \n+            // FIXME(tsion): Handle different integer types correctly.\n+            \"add_with_overflow\" => {\n+                let ty = *substs.types.get(subst::FnSpace, 0);\n+                let size = self.ty_size(ty);\n+\n+                let left_arg  = try!(self.eval_operand(&args[0]));\n+                let right_arg = try!(self.eval_operand(&args[1]));\n+\n+                let left = try!(self.memory.read_int(left_arg, size));\n+                let right = try!(self.memory.read_int(right_arg, size));\n+\n+                let (n, overflowed) = unsafe {\n+                    ::std::intrinsics::add_with_overflow::<i64>(left, right)\n+                };\n+\n+                try!(self.memory.write_int(dest, n, size));\n+                try!(self.memory.write_bool(dest.offset(size as isize), overflowed));\n+            }\n+\n             // FIXME(tsion): Handle different integer types correctly.\n             \"mul_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n@@ -1174,15 +1193,13 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 };\n                 let substs = miri.tcx.mk_substs(Substs::empty());\n                 miri.push_stack_frame(CachedMir::Ref(mir), substs, return_ptr);\n-                if let Err(e) = miri.run() {\n-                    tcx.sess.err(&e.to_string());\n-                }\n-                tcx.sess.abort_if_errors();\n-\n-                if let Some(ret) = return_ptr {\n+                if let Err(_e) = miri.run() {\n+                    // TODO(tsion): Detect whether the error was already reported or not.\n+                    // tcx.sess.err(&e.to_string());\n+                } else if let Some(ret) = return_ptr {\n                     miri.memory.dump(ret.alloc_id);\n-                    println!(\"\");\n                 }\n+                println!(\"\");\n             }\n         }\n     }"}, {"sha": "1b0401bb9cc241154aded0f3657eaf470f3cd6ec", "filename": "test/errors.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbd8a826431b959af98141bbc52aada52931b508/test%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd8a826431b959af98141bbc52aada52931b508/test%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Ferrors.rs?ref=dbd8a826431b959af98141bbc52aada52931b508", "patch": "@@ -0,0 +1,12 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn overwriting_part_of_relocation_makes_the_rest_undefined() -> i32 {\n+    let mut p: *const i32 = &42;\n+    unsafe {\n+        let ptr = &mut p as *mut *const i32 as *mut u32;\n+        *ptr = 123;\n+        *p\n+    }\n+}"}]}