{"sha": "a8eea623f5f44332be284af26180136f898f4832", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZWVhNjIzZjVmNDQzMzJiZTI4NGFmMjYxODAxMzZmODk4ZjQ4MzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T09:13:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T07:55:42Z"}, "message": "expose span to M::assert_panic, and provide helper to turn that into CallerLocation", "tree": {"sha": "e7018af5a043395d452c57fb297fcfa04eb78752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7018af5a043395d452c57fb297fcfa04eb78752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8eea623f5f44332be284af26180136f898f4832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8eea623f5f44332be284af26180136f898f4832", "html_url": "https://github.com/rust-lang/rust/commit/a8eea623f5f44332be284af26180136f898f4832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8eea623f5f44332be284af26180136f898f4832/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "html_url": "https://github.com/rust-lang/rust/commit/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "4b009111bf7cec7660c83b509d298d6545082104", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -397,6 +397,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _span: Span,\n         msg: &AssertMessage<'tcx>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {"}, {"sha": "ea8bc968ccf371430c05a67f7748c571907f3c90", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -110,13 +110,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match intrinsic_name {\n             \"caller_location\" => {\n-                let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n-                let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n-                let location = self.alloc_caller_location(\n-                    Symbol::intern(&caller.file.name.to_string()),\n-                    caller.line as u32,\n-                    caller.col_display as u32 + 1,\n-                )?;\n+                let location = self.alloc_caller_location_for_span(span)?;\n                 self.write_scalar(location.ptr, dest)?;\n             }\n "}, {"sha": "649fc65f642343068f7a50418473e52406e6d4fa", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -2,12 +2,12 @@ use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{Pointer, PointerArithmetic, Scalar};\n use rustc::ty::subst::Subst;\n use rustc_target::abi::{LayoutOf, Size};\n-use syntax_pos::Symbol;\n+use syntax_pos::{Symbol, Span};\n \n use crate::interpret::{MemoryKind, MPlaceTy, intrinsics::{InterpCx, InterpResult, Machine}};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n-    pub fn alloc_caller_location(\n+    crate fn alloc_caller_location(\n         &mut self,\n         filename: Symbol,\n         line: u32,\n@@ -47,4 +47,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         Ok(location)\n     }\n+\n+    pub fn alloc_caller_location_for_span(\n+        &mut self,\n+        span: Span,\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+        let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n+        self.alloc_caller_location(\n+            Symbol::intern(&caller.file.name.to_string()),\n+            caller.line as u32,\n+            caller.col_display as u32 + 1,\n+        )\n+    }\n }"}, {"sha": "81ea62d3806914b1b839e2f1a195aca6408dc32d", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -178,6 +178,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Called to evaluate `Assert` MIR terminators that trigger a panic.\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         msg: &AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;"}, {"sha": "06c3969fbc542c1a0e43899e7a6589251d78c199", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -122,7 +122,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n-                    M::assert_panic(self, msg, cleanup)?;\n+                    M::assert_panic(self, terminator.source_info.span, msg, cleanup)?;\n                 }\n             }\n "}, {"sha": "64dc86734efe4625197239f573e23edaff48ac2b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8eea623f5f44332be284af26180136f898f4832/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a8eea623f5f44332be284af26180136f898f4832", "patch": "@@ -158,6 +158,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _span: Span,\n         _msg: &rustc::mir::interpret::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {"}]}