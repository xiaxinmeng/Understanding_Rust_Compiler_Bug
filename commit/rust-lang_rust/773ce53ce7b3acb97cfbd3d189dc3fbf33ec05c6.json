{"sha": "773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3M2NlNTNjZTdiM2FjYjk3Y2ZiZDNkMTg5ZGMzZmJmMzNlYzA1YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T07:06:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T07:06:18Z"}, "message": "Auto merge of #51613 - nnethercote:ob-forest-cleanup, r=nikomatsakis\n\nObligation forest cleanup\n\nWhile looking at this code I was scratching my head about whether a node could appear in both `parent` and `dependents`. Turns out it can, but it's not useful to do so, so this PR cleans things up so it's no longer possible.", "tree": {"sha": "12ce785408bf66a9d14210723a30eb4f62288f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ce785408bf66a9d14210723a30eb4f62288f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "html_url": "https://github.com/rust-lang/rust/commit/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2fa4a4d218b85c5af04981ea184cdb018cf215", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2fa4a4d218b85c5af04981ea184cdb018cf215", "html_url": "https://github.com/rust-lang/rust/commit/7d2fa4a4d218b85c5af04981ea184cdb018cf215"}, {"sha": "70d22fa0519c8970cecbae400e7f6ebf69704d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d22fa0519c8970cecbae400e7f6ebf69704d92", "html_url": "https://github.com/rust-lang/rust/commit/70d22fa0519c8970cecbae400e7f6ebf69704d92"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "df34891ff033b0c6afd159aea7f244c412970936", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "patch": "@@ -91,13 +91,14 @@ struct Node<O> {\n     obligation: O,\n     state: Cell<NodeState>,\n \n-    /// Obligations that depend on this obligation for their\n-    /// completion. They must all be in a non-pending state.\n-    dependents: Vec<NodeIndex>,\n     /// The parent of a node - the original obligation of\n     /// which it is a subobligation. Except for error reporting,\n-    /// this is just another member of `dependents`.\n+    /// it is just like any member of `dependents`.\n     parent: Option<NodeIndex>,\n+\n+    /// Obligations that depend on this obligation for their\n+    /// completion. They must all be in a non-pending state.\n+    dependents: Vec<NodeIndex>,\n }\n \n /// The state of one node in some tree within the forest. This\n@@ -193,15 +194,18 @@ impl<O: ForestObligation> ObligationForest<O> {\n             Entry::Occupied(o) => {\n                 debug!(\"register_obligation_at({:?}, {:?}) - duplicate of {:?}!\",\n                        obligation, parent, o.get());\n+                let node = &mut self.nodes[o.get().get()];\n                 if let Some(parent) = parent {\n-                    if self.nodes[o.get().get()].dependents.contains(&parent) {\n-                        debug!(\"register_obligation_at({:?}, {:?}) - duplicate subobligation\",\n-                               obligation, parent);\n-                    } else {\n-                        self.nodes[o.get().get()].dependents.push(parent);\n+                    // If the node is already in `waiting_cache`, it's already\n+                    // been marked with a parent. (It's possible that parent\n+                    // has been cleared by `apply_rewrites`, though.) So just\n+                    // dump `parent` into `node.dependents`... unless it's\n+                    // already in `node.dependents` or `node.parent`.\n+                    if !node.dependents.contains(&parent) && Some(parent) != node.parent {\n+                        node.dependents.push(parent);\n                     }\n                 }\n-                if let NodeState::Error = self.nodes[o.get().get()].state.get() {\n+                if let NodeState::Error = node.state.get() {\n                     Err(())\n                 } else {\n                     Ok(())\n@@ -380,10 +384,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             NodeState::Success => {\n                 node.state.set(NodeState::OnDfsStack);\n                 stack.push(index);\n-                if let Some(parent) = node.parent {\n-                    self.find_cycles_from_node(stack, processor, parent.get());\n-                }\n-                for dependent in &node.dependents {\n+                for dependent in node.parent.iter().chain(node.dependents.iter()) {\n                     self.find_cycles_from_node(stack, processor, dependent.get());\n                 }\n                 stack.pop();\n@@ -427,7 +428,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n \n             error_stack.extend(\n-                node.dependents.iter().cloned().chain(node.parent).map(|x| x.get())\n+                node.parent.iter().chain(node.dependents.iter()).map(|x| x.get())\n             );\n         }\n \n@@ -437,11 +438,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     #[inline]\n     fn mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n-        if let Some(parent) = node.parent {\n-            self.mark_as_waiting_from(&self.nodes[parent.get()]);\n-        }\n-\n-        for dependent in &node.dependents {\n+        for dependent in node.parent.iter().chain(node.dependents.iter()) {\n             self.mark_as_waiting_from(&self.nodes[dependent.get()]);\n         }\n     }\n@@ -588,8 +585,8 @@ impl<O> Node<O> {\n     fn new(parent: Option<NodeIndex>, obligation: O) -> Node<O> {\n         Node {\n             obligation,\n-            parent,\n             state: Cell::new(NodeState::Pending),\n+            parent,\n             dependents: vec![],\n         }\n     }"}]}