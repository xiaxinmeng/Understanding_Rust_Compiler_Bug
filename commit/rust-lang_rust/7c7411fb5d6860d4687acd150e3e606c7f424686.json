{"sha": "7c7411fb5d6860d4687acd150e3e606c7f424686", "node_id": "C_kwDOAAsO6NoAKDdjNzQxMWZiNWQ2ODYwZDQ2ODdhY2QxNTBlM2U2MDZjN2Y0MjQ2ODY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-09T10:20:36Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-09T10:20:36Z"}, "message": "Rename is_{some,ok,err}_with to is_{some,ok,err}_and.", "tree": {"sha": "aa27f8c0a8a616cb6f402d09afd4b0d72019e097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa27f8c0a8a616cb6f402d09afd4b0d72019e097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c7411fb5d6860d4687acd150e3e606c7f424686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7411fb5d6860d4687acd150e3e606c7f424686", "html_url": "https://github.com/rust-lang/rust/commit/7c7411fb5d6860d4687acd150e3e606c7f424686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c7411fb5d6860d4687acd150e3e606c7f424686/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6045c34f15d463c7d51104b968c1eabc5275b9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6045c34f15d463c7d51104b968c1eabc5275b9c1", "html_url": "https://github.com/rust-lang/rust/commit/6045c34f15d463c7d51104b968c1eabc5275b9c1"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "9df56b3bfd51b16818c55a39eb54c253a74b93fa", "filename": "library/core/src/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c7411fb5d6860d4687acd150e3e606c7f424686/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7411fb5d6860d4687acd150e3e606c7f424686/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7c7411fb5d6860d4687acd150e3e606c7f424686", "patch": "@@ -551,26 +551,26 @@ impl<T> Option<T> {\n         matches!(*self, Some(_))\n     }\n \n-    /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.\n+    /// Returns `true` if the option is a [`Some`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), true);\n     ///\n     /// let x: Option<u32> = Some(0);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     ///\n     /// let x: Option<u32> = None;\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_some_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_some_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Some(x) if f(x))\n     }\n "}, {"sha": "e5a4dc06c64215aab4c0b86992734cbb103c13c7", "filename": "library/core/src/result.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c7411fb5d6860d4687acd150e3e606c7f424686/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7411fb5d6860d4687acd150e3e606c7f424686/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=7c7411fb5d6860d4687acd150e3e606c7f424686", "patch": "@@ -542,26 +542,26 @@ impl<T, E> Result<T, E> {\n         matches!(*self, Ok(_))\n     }\n \n-    /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), true);\n     ///\n     /// let x: Result<u32, &str> = Ok(0);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     ///\n     /// let x: Result<u32, &str> = Err(\"hey\");\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_ok_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_ok_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Ok(x) if f(x))\n     }\n \n@@ -586,7 +586,7 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n-    /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n@@ -595,18 +595,18 @@ impl<T, E> Result<T, E> {\n     /// use std::io::{Error, ErrorKind};\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), true);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     ///\n     /// let x: Result<u32, Error> = Ok(123);\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_err_with(&self, f: impl FnOnce(&E) -> bool) -> bool {\n+    pub fn is_err_and(&self, f: impl FnOnce(&E) -> bool) -> bool {\n         matches!(self, Err(x) if f(x))\n     }\n "}]}