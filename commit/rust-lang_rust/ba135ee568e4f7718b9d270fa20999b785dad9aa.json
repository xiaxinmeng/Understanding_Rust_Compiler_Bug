{"sha": "ba135ee568e4f7718b9d270fa20999b785dad9aa", "node_id": "C_kwDOAAsO6NoAKGJhMTM1ZWU1NjhlNGY3NzE4YjlkMjcwZmEyMDk5OWI3ODVkYWQ5YWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T23:01:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T23:01:08Z"}, "message": "Rollup merge of #104557 - eholk:dyn-star-in-traits, r=compiler-errors\n\nAdd a test case for async dyn* traits\n\nThis adds a test case that approximates async functions in dyn traits using `dyn*`. The purpose is to have an example of where we are with `dyn*` and the goal of using it for dyn traits.\n\nIssue #102425\n\nr? `@compiler-errors`", "tree": {"sha": "2d16bb05bd3ca97131d4499f2ab8499eda952a19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d16bb05bd3ca97131d4499f2ab8499eda952a19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba135ee568e4f7718b9d270fa20999b785dad9aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfAM0CRBK7hj4Ov3rIwAAaEkIABOBpL1NcTE7F86GR5VObyDB\nvCV2t42nZUqrRQ/cZWiPe2mwahvYROxB6mJmhrRRuYeraU6m55ev6J3JlDiuhern\nqlbz+rVsOZIJxjmB5UG+KUYYa6axxjc7tMMuVZk+p7iFtgabXmmqgrJEQo/Lc9HU\n7Ywzw691hCzvRvbj++5tCbt68OPIcNlAmFIEC4MqHRfKqH5Nk9dmdTm1CL9LrwLw\nNm8kvGoBpPSU2we8hyXz66B99nsyaDSfZBCMOmQltQEti5MsJ6bJP/e0Z1glAiLV\n4a4hr8qz4b603jxp2ZvRV52zIEW0H+ZHRt2rM+SOv0iAqwG4c2xihfI6fOdsV1o=\n=nG5i\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d16bb05bd3ca97131d4499f2ab8499eda952a19\nparent 7a3eca690f730fbe354b37c5026321726aadd494\nparent ff38c3528a6f6c94d45d803b7954a03997f3f4a9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669071668 +0100\ncommitter GitHub <noreply@github.com> 1669071668 +0100\n\nRollup merge of #104557 - eholk:dyn-star-in-traits, r=compiler-errors\n\nAdd a test case for async dyn* traits\n\nThis adds a test case that approximates async functions in dyn traits using `dyn*`. The purpose is to have an example of where we are with `dyn*` and the goal of using it for dyn traits.\n\nIssue #102425\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba135ee568e4f7718b9d270fa20999b785dad9aa", "html_url": "https://github.com/rust-lang/rust/commit/ba135ee568e4f7718b9d270fa20999b785dad9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba135ee568e4f7718b9d270fa20999b785dad9aa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3eca690f730fbe354b37c5026321726aadd494", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3eca690f730fbe354b37c5026321726aadd494", "html_url": "https://github.com/rust-lang/rust/commit/7a3eca690f730fbe354b37c5026321726aadd494"}, {"sha": "ff38c3528a6f6c94d45d803b7954a03997f3f4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff38c3528a6f6c94d45d803b7954a03997f3f4a9", "html_url": "https://github.com/rust-lang/rust/commit/ff38c3528a6f6c94d45d803b7954a03997f3f4a9"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "9b27133b4936de5bc2bc5ddb81273d6173faf3b6", "filename": "src/test/ui/dyn-star/dyn-async-trait.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba135ee568e4f7718b9d270fa20999b785dad9aa/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-async-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba135ee568e4f7718b9d270fa20999b785dad9aa/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-async-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-async-trait.rs?ref=ba135ee568e4f7718b9d270fa20999b785dad9aa", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+// edition: 2021\n+\n+// This test case is meant to demonstrate how close we can get to async\n+// functions in dyn traits with the current level of dyn* support.\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait DynAsyncCounter {\n+    fn increment<'a>(&'a mut self) -> dyn* Future<Output = usize> + 'a;\n+}\n+\n+struct MyCounter {\n+    count: usize,\n+}\n+\n+impl DynAsyncCounter for MyCounter {\n+    fn increment<'a>(&'a mut self) -> dyn* Future<Output = usize> + 'a {\n+        Box::pin(async {\n+            self.count += 1;\n+            self.count\n+        })\n+    }\n+}\n+\n+async fn do_counter(counter: &mut dyn DynAsyncCounter) -> usize {\n+    counter.increment().await\n+}\n+\n+fn main() {\n+    let mut counter = MyCounter { count: 0 };\n+    let _ = do_counter(&mut counter);\n+}"}]}