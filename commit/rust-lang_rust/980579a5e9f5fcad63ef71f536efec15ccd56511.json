{"sha": "980579a5e9f5fcad63ef71f536efec15ccd56511", "node_id": "C_kwDOAAsO6NoAKDk4MDU3OWE1ZTlmNWZjYWQ2M2VmNzFmNTM2ZWZlYzE1Y2NkNTY1MTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-13T14:02:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T14:02:35Z"}, "message": "Rollup merge of #99030 - rust-lang:notriddle/field-recovery, r=petrochenkov\n\ndiagnostics: error messages when struct literals fail to parse\n\nIf an expression is supplied where a field is expected, the parser can become convinced that it's a shorthand field syntax when it's not.\n\nThis PR addresses it by explicitly recording the permitted `:` token immediately after the identifier, and also adds a suggestion to insert the name of the field if it looks like a complex expression.\n\nFixes #98917", "tree": {"sha": "97af1124c9f5ff63987ced8fce1cf941f2a1fa29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97af1124c9f5ff63987ced8fce1cf941f2a1fa29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/980579a5e9f5fcad63ef71f536efec15ccd56511", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiztB7CRBK7hj4Ov3rIwAAtD4IACd6G6PGl/r2x74rTgqMaN72\nXfCCWTwvPH/JOK+5xf02ChkUFdKplA6y3VOKVBfm25D+8HnWRhmlyAgYwBU2G3dC\nimLzvWUWcbkE3mEC+9xYUR5tmm+NwwRSDLLreucV9MKIRMb29WuTxzJpCQkTM9iR\nRRBykASMglWbkYTkKODzNPOqwEQbW3t0WZyvd9ZqlRrpD18q2l48VfVlcxgyID+2\njg2ZdG2kz5KYIykKFtezGKBZ4XrtTkMOpBYeSwJ9Gy/vUMLrCoccWkU7IHtHtWg3\nF6sB1y6fetyoUnDV4HMfrl88ddMaJUM5kXqMglN0WMKqzfLZ8FN7ocpnUnaeztI=\n=sCPK\n-----END PGP SIGNATURE-----\n", "payload": "tree 97af1124c9f5ff63987ced8fce1cf941f2a1fa29\nparent 1e7d04b23b6e9d177e7d879b05b4ce3f00ee5a0e\nparent 9fcb9c6648331f372ee58ce4489d3d43a0723c59\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657720955 +0530\ncommitter GitHub <noreply@github.com> 1657720955 +0530\n\nRollup merge of #99030 - rust-lang:notriddle/field-recovery, r=petrochenkov\n\ndiagnostics: error messages when struct literals fail to parse\n\nIf an expression is supplied where a field is expected, the parser can become convinced that it's a shorthand field syntax when it's not.\n\nThis PR addresses it by explicitly recording the permitted `:` token immediately after the identifier, and also adds a suggestion to insert the name of the field if it looks like a complex expression.\n\nFixes #98917\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/980579a5e9f5fcad63ef71f536efec15ccd56511", "html_url": "https://github.com/rust-lang/rust/commit/980579a5e9f5fcad63ef71f536efec15ccd56511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/980579a5e9f5fcad63ef71f536efec15ccd56511/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7d04b23b6e9d177e7d879b05b4ce3f00ee5a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7d04b23b6e9d177e7d879b05b4ce3f00ee5a0e", "html_url": "https://github.com/rust-lang/rust/commit/1e7d04b23b6e9d177e7d879b05b4ce3f00ee5a0e"}, {"sha": "9fcb9c6648331f372ee58ce4489d3d43a0723c59", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcb9c6648331f372ee58ce4489d3d43a0723c59", "html_url": "https://github.com/rust-lang/rust/commit/9fcb9c6648331f372ee58ce4489d3d43a0723c59"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "0d9c57908c1e3620d12eee09236ea06f83fed65b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/980579a5e9f5fcad63ef71f536efec15ccd56511/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980579a5e9f5fcad63ef71f536efec15ccd56511/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=980579a5e9f5fcad63ef71f536efec15ccd56511", "patch": "@@ -3028,6 +3028,11 @@ impl<'a> Parser<'a> {\n                 }\n             };\n \n+            let is_shorthand = parsed_field.as_ref().map_or(false, |f| f.is_shorthand);\n+            // A shorthand field can be turned into a full field with `:`.\n+            // We should point this out.\n+            self.check_or_expected(!is_shorthand, TokenType::Token(token::Colon));\n+\n             match self.expect_one_of(&[token::Comma], &[token::CloseDelim(close_delim)]) {\n                 Ok(_) => {\n                     if let Some(f) = parsed_field.or(recovery_field) {\n@@ -3048,6 +3053,19 @@ impl<'a> Parser<'a> {\n                                 \",\",\n                                 Applicability::MachineApplicable,\n                             );\n+                        } else if is_shorthand\n+                            && (AssocOp::from_token(&self.token).is_some()\n+                                || matches!(&self.token.kind, token::OpenDelim(_))\n+                                || self.token.kind == token::Dot)\n+                        {\n+                            // Looks like they tried to write a shorthand, complex expression.\n+                            let ident = parsed_field.expect(\"is_shorthand implies Some\").ident;\n+                            e.span_suggestion(\n+                                ident.span.shrink_to_lo(),\n+                                \"try naming a field\",\n+                                &format!(\"{ident}: \"),\n+                                Applicability::HasPlaceholders,\n+                            );\n                         }\n                     }\n                     if !recover {"}, {"sha": "77335c64c212093ea59cc6ea39087bfe9adcced0", "filename": "src/test/ui/parser/issues/issue-52496.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-52496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-52496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-52496.stderr?ref=980579a5e9f5fcad63ef71f536efec15ccd56511", "patch": "@@ -4,12 +4,13 @@ error: float literals must have an integer part\n LL |     let _ = Foo { bar: .5, baz: 42 };\n    |                        ^^ help: must have an integer part: `0.5`\n \n-error: expected one of `,` or `}`, found `.`\n+error: expected one of `,`, `:`, or `}`, found `.`\n   --> $DIR/issue-52496.rs:8:22\n    |\n LL |     let _ = Foo { bar.into(), bat: -1, . };\n-   |             ---      ^ expected one of `,` or `}`\n-   |             |\n+   |             ---   -  ^ expected one of `,`, `:`, or `}`\n+   |             |     |\n+   |             |     help: try naming a field: `bar:`\n    |             while parsing this struct\n \n error: expected identifier, found `.`"}, {"sha": "4737bc71860c24ef903af60947b32c449d636955", "filename": "src/test/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=980579a5e9f5fcad63ef71f536efec15ccd56511", "patch": "@@ -20,15 +20,23 @@ LL |\n LL |\n    |  ^\n \n-error: expected one of `,` or `}`, found `{`\n+error: expected one of `,`, `:`, or `}`, found `{`\n   --> $DIR/issue-62973.rs:6:8\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        ^       -       -^ expected one of `,` or `}`\n-   |        |       |       |\n-   |        |       |       help: `}` may belong here\n+   |        ^       -        ^ expected one of `,`, `:`, or `}`\n+   |        |       |\n    |        |       while parsing this struct\n    |        unclosed delimiter\n+   |\n+help: `}` may belong here\n+   |\n+LL | fn p() { match s { v, E} { [) {) }\n+   |                        +\n+help: try naming a field\n+   |\n+LL | fn p() { match s { v, E: E { [) {) }\n+   |                       ++\n \n error: struct literals are not allowed here\n   --> $DIR/issue-62973.rs:6:16"}, {"sha": "451057c66a1277008483768ae886a1e97b63d7c7", "filename": "src/test/ui/parser/removed-syntax-with-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs?ref=980579a5e9f5fcad63ef71f536efec15ccd56511", "patch": "@@ -6,6 +6,6 @@ fn main() {\n \n     let a = S { foo: (), bar: () };\n     let b = S { foo: (), with a };\n-    //~^ ERROR expected one of `,` or `}`, found `a`\n+    //~^ ERROR expected one of `,`, `:`, or `}`, found `a`\n     //~| ERROR missing field `bar` in initializer of `S`\n }"}, {"sha": "c6ae1ce674ff80467a799bc50c80bcc122a209a0", "filename": "src/test/ui/parser/removed-syntax-with-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/980579a5e9f5fcad63ef71f536efec15ccd56511/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr?ref=980579a5e9f5fcad63ef71f536efec15ccd56511", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,` or `}`, found `a`\n+error: expected one of `,`, `:`, or `}`, found `a`\n   --> $DIR/removed-syntax-with-2.rs:8:31\n    |\n LL |     let b = S { foo: (), with a };\n-   |             -                 ^ expected one of `,` or `}`\n+   |             -                 ^ expected one of `,`, `:`, or `}`\n    |             |\n    |             while parsing this struct\n "}]}