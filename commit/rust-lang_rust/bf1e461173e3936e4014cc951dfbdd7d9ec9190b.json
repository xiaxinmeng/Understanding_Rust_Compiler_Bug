{"sha": "bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMWU0NjExNzNlMzkzNmU0MDE0Y2M5NTFkZmJkZDdkOWVjOTE5MGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-20T09:09:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-20T09:09:55Z"}, "message": "Auto merge of #47562 - Centril:feature/core_convert_id, r=oli-obk\n\nAdd the identity function as core::convert::identity\n\n## New notes\n\nThis implements rust-lang/rfcs#2306 (see https://github.com/rust-lang/rust/issues/53500).\n\n## Old notes (ignore this in new reviews)\n\nAdds the identity function `fn id<T>(x: T) -> T { x }` to core::convert and the prelude.\nSome motivations for why this is useful are explained in the doc tests.\nAnother is that using the identity function instead of `{ x }` or `|x| x` makes it clear that you intended to use an identity conversion on purpose.\n\nThe reasoning:\n+ behind adding this to `convert` and not `mem` is that this is an identity *conversion*.\n+ for adding this to the prelude is that it should be easy enough to use that the ease of writing your own identity function or using a closure `|x| x` doesn't overtake that.\n\nI've separated this out into two feature gates so that the addition to the prelude can be considered and stabilized separately.\n\ncc @bluss", "tree": {"sha": "4c10135bc70233ca498e2ba5988601ef59f9f5ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c10135bc70233ca498e2ba5988601ef59f9f5ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "html_url": "https://github.com/rust-lang/rust/commit/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758239c9c9e00b7c0daba6496ef246a85e7b5ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/758239c9c9e00b7c0daba6496ef246a85e7b5ce5", "html_url": "https://github.com/rust-lang/rust/commit/758239c9c9e00b7c0daba6496ef246a85e7b5ce5"}, {"sha": "86641d97b23674a7b0df8523a8684e8b02bf0b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/86641d97b23674a7b0df8523a8684e8b02bf0b33", "html_url": "https://github.com/rust-lang/rust/commit/86641d97b23674a7b0df8523a8684e8b02bf0b33"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "d5337868843dfab45bd65b12a961ac083ef8e3ce", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "patch": "@@ -48,6 +48,66 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+/// An identity function.\n+///\n+/// Two things are important to note about this function:\n+///\n+/// - It is not always equivalent to a closure like `|x| x` since the\n+///   closure may coerce `x` into a different type.\n+///\n+/// - It moves the input `x` passed to the function.\n+///\n+/// While it might seem strange to have a function that just returns back the\n+/// input, there are some interesting uses.\n+///\n+/// # Examples\n+///\n+/// Using `identity` to do nothing among other interesting functions:\n+///\n+/// ```rust\n+/// #![feature(convert_id)]\n+/// use std::convert::identity;\n+///\n+/// fn manipulation(x: u32) -> u32 {\n+///     // Let's assume that this function does something interesting.\n+///     x + 1\n+/// }\n+///\n+/// let _arr = &[identity, manipulation];\n+/// ```\n+///\n+/// Using `identity` to get a function that changes nothing in a conditional:\n+///\n+/// ```rust\n+/// #![feature(convert_id)]\n+/// use std::convert::identity;\n+///\n+/// # let condition = true;\n+///\n+/// # fn manipulation(x: u32) -> u32 { x + 1 }\n+///\n+/// let do_stuff = if condition { manipulation } else { identity };\n+///\n+/// // do more interesting stuff..\n+///\n+/// let _results = do_stuff(42);\n+/// ```\n+///\n+/// Using `identity` to keep the `Some` variants of an iterator of `Option<T>`:\n+///\n+/// ```rust\n+/// #![feature(convert_id)]\n+/// use std::convert::identity;\n+///\n+/// let iter = vec![Some(1), None, Some(3)].into_iter();\n+/// let filtered = iter.filter_map(identity).collect::<Vec<_>>();\n+/// assert_eq!(vec![1, 3], filtered);\n+/// ```\n+#[unstable(feature = \"convert_id\", issue = \"53500\")]\n+#[rustc_const_unstable(feature = \"const_convert_id\")]\n+#[inline]\n+pub const fn identity<T>(x: T) -> T { x }\n+\n /// A cheap reference-to-reference conversion. Used to convert a value to a\n /// reference value within generic code.\n ///"}, {"sha": "545c179dec9fc6d92f9a97f3d454ae026faffb62", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs?ref=bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test should fail since identity is not stable as a const fn yet.\n+\n+#![feature(convert_id)]\n+\n+fn main() {\n+    const _FOO: u8 = ::std::convert::identity(42u8);\n+}"}, {"sha": "dfd8619d87516b805105841afb9ce571a0c5d74e", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr?ref=bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "patch": "@@ -0,0 +1,10 @@\n+error: `std::convert::identity` is not yet stable as a const fn\n+  --> $DIR/convert-id-const-no-gate.rs:16:22\n+   |\n+LL |     const _FOO: u8 = ::std::convert::identity(42u8);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: in Nightly builds, add `#![feature(const_convert_id)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "c546f11914f814eacf7e734a1bedaf632a6ed031", "filename": "src/test/ui/rfc-2306/convert-id-const-with-gate.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e461173e3936e4014cc951dfbdd7d9ec9190b/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs?ref=bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test should pass since we've opted into 'identity' as an\n+// unstable const fn.\n+\n+// compile-pass\n+\n+#![feature(convert_id, const_convert_id)]\n+\n+fn main() {\n+    const _FOO: u8 = ::std::convert::identity(42u8);\n+}"}]}