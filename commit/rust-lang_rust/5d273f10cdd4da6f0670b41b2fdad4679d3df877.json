{"sha": "5d273f10cdd4da6f0670b41b2fdad4679d3df877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjczZjEwY2RkNGRhNmYwNjcwYjQxYjJmZGFkNDY3OWQzZGY4Nzc=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-12T23:40:54Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-12T23:40:54Z"}, "message": "Add bench runnable and code lens", "tree": {"sha": "3d2ea73fd897e999eb274223f3cb5cdc17607a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2ea73fd897e999eb274223f3cb5cdc17607a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d273f10cdd4da6f0670b41b2fdad4679d3df877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d273f10cdd4da6f0670b41b2fdad4679d3df877", "html_url": "https://github.com/rust-lang/rust/commit/5d273f10cdd4da6f0670b41b2fdad4679d3df877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d273f10cdd4da6f0670b41b2fdad4679d3df877/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb931c0d9e0877e573622253ae5b05563841037b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb931c0d9e0877e573622253ae5b05563841037b", "html_url": "https://github.com/rust-lang/rust/commit/eb931c0d9e0877e573622253ae5b05563841037b"}], "stats": {"total": 88, "additions": 53, "deletions": 35}, "files": [{"sha": "53e49da5ba550c0a5b0b37ba4afd912936715d2c", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=5d273f10cdd4da6f0670b41b2fdad4679d3df877", "patch": "@@ -17,6 +17,7 @@ pub struct Runnable {\n pub enum RunnableKind {\n     Test { name: String },\n     TestMod { path: String },\n+    Bench { name: String },\n     Bin,\n }\n \n@@ -48,6 +49,10 @@ fn runnable_fn(fn_def: &ast::FnDef) -> Option<Runnable> {\n         RunnableKind::Test {\n             name: name.to_string(),\n         }\n+    } else if fn_def.has_atom_attr(\"bench\") {\n+        RunnableKind::Bench {\n+            name: name.to_string(),\n+        }\n     } else {\n         return None;\n     };"}, {"sha": "db9496bbe0e3f6d54c3d0c6671fbab3f6839540e", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=5d273f10cdd4da6f0670b41b2fdad4679d3df877", "patch": "@@ -32,6 +32,15 @@ pub(crate) fn runnable_args(\n             res.push(path.to_string());\n             res.push(\"--nocapture\".to_string());\n         }\n+        RunnableKind::Bench { name } => {\n+            res.push(\"bench\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+            res.push(\"--\".to_string());\n+            res.push(name.to_string());\n+            res.push(\"--nocapture\".to_string());\n+        }\n         RunnableKind::Bin => {\n             res.push(\"run\".to_string());\n             if let Some(spec) = spec {"}, {"sha": "7326a727dcbafa6b2f9ce0f94c29e6b9121c4573", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d273f10cdd4da6f0670b41b2fdad4679d3df877/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5d273f10cdd4da6f0670b41b2fdad4679d3df877", "patch": "@@ -2,22 +2,23 @@ use std::collections::HashMap;\n \n use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n-    CodeActionResponse, Command, CodeLens, Diagnostic, DiagnosticSeverity, DocumentFormattingParams,\n-    DocumentHighlight, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n-    FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind,\n-    ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range, RenameParams,\n-    SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n+    CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, Documentation, FoldingRange,\n+    FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n+    MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n+    RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    WorkspaceEdit,\n };\n use ra_ide_api::{\n-    FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity, RangeInfo,\n+    FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity,\n };\n-use ra_syntax::{TextUnit, AstNode};\n+use ra_syntax::{AstNode, TextUnit};\n use rustc_hash::FxHashMap;\n use serde_json::to_value;\n use std::io::Write;\n \n use crate::{\n-    cargo_target_spec::{CargoTargetSpec, runnable_args},\n+    cargo_target_spec::{runnable_args, CargoTargetSpec},\n     conv::{to_location, to_location_link, Conv, ConvWith, MapConvWith, TryConvWith},\n     req::{self, Decoration},\n     server_world::ServerWorld,\n@@ -258,6 +259,7 @@ pub fn handle_runnables(\n             label: match &runnable.kind {\n                 RunnableKind::Test { name } => format!(\"test {}\", name),\n                 RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n+                RunnableKind::Bench { name } => format!(\"bench {}\", name),\n                 RunnableKind::Bin => \"run binary\".to_string(),\n             },\n             bin: \"cargo\".to_string(),\n@@ -586,35 +588,37 @@ pub fn handle_code_lens(\n     let mut lenses: Vec<CodeLens> = Default::default();\n \n     for runnable in world.analysis().runnables(file_id)? {\n-        match &runnable.kind {\n-            RunnableKind::Test { name: _ } | RunnableKind::TestMod { path: _ } => {\n-                let args = runnable_args(&world, file_id, &runnable.kind)?;\n-\n-                let range = runnable.range.conv_with(&line_index);\n-\n-                // This represents the actual command that will be run.\n-                let r: req::Runnable = req::Runnable {\n-                    range,\n-                    label: Default::default(),\n-                    bin: \"cargo\".into(),\n-                    args,\n-                    env: Default::default(),\n-                };\n+        let title = match &runnable.kind {\n+            RunnableKind::Test { name: _ } | RunnableKind::TestMod { path: _ } => Some(\"Run Test\"),\n+            RunnableKind::Bench { name: _ } => Some(\"Run Bench\"),\n+            _ => None,\n+        };\n \n-                let lens = CodeLens {\n-                    range,\n-                    command: Some(Command {\n-                        title: \"Run Test\".into(),\n-                        command: \"ra-lsp.run-single\".into(),\n-                        arguments: Some(vec![to_value(r).unwrap()]),\n-                    }),\n-                    data: None,\n-                };\n+        if let Some(title) = title {\n+            let args = runnable_args(&world, file_id, &runnable.kind)?;\n+            let range = runnable.range.conv_with(&line_index);\n+\n+            // This represents the actual command that will be run.\n+            let r: req::Runnable = req::Runnable {\n+                range,\n+                label: Default::default(),\n+                bin: \"cargo\".into(),\n+                args,\n+                env: Default::default(),\n+            };\n \n-                lenses.push(lens);\n-            }\n-            _ => continue,\n-        };\n+            let lens = CodeLens {\n+                range,\n+                command: Some(Command {\n+                    title: title.into(),\n+                    command: \"ra-lsp.run-single\".into(),\n+                    arguments: Some(vec![to_value(r).unwrap()]),\n+                }),\n+                data: None,\n+            };\n+\n+            lenses.push(lens);\n+        }\n     }\n \n     return Ok(Some(lenses));"}]}