{"sha": "9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjFkNGQxZDM0N2VlNTBmMzFkMmJmNTBlMTNlY2ZkZjE0YzQ2MTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-16T19:23:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-17T16:36:04Z"}, "message": "[tmp] Pass `TyCtxt` through to the render backend\n\nFirst actually useful step in https://github.com/rust-lang/rust/issues/76382\n\nThis doesn't yet compile because there's no way to get a `Lrc<Session>`\nfrom a TyCtxt, only a `&Session`.", "tree": {"sha": "28a60093e14c46f8918373c16ebca8ddd260f315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a60093e14c46f8918373c16ebca8ddd260f315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "html_url": "https://github.com/rust-lang/rust/commit/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79ab333cf0e8b49676cabc7d8bdaa785a688a67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79ab333cf0e8b49676cabc7d8bdaa785a688a67a", "html_url": "https://github.com/rust-lang/rust/commit/79ab333cf0e8b49676cabc7d8bdaa785a688a67a"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "7ec29a70bd0a3054d90cb72686d91441ce556cd4", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "patch": "@@ -1,7 +1,6 @@\n use std::sync::Arc;\n \n-use rustc_data_structures::sync::Lrc;\n-use rustc_session::Session;\n+use rustc_middle::ty;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n@@ -21,7 +20,7 @@ crate trait FormatRenderer: Clone {\n         render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        sess: Lrc<Session>,\n+        tcx: ty::TyCtxt<'_>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n@@ -52,7 +51,7 @@ crate fn run_format<T: FormatRenderer>(\n     render_info: RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n-    sess: Lrc<Session>,\n+    tcx: ty::TyCtxt<'_>,\n ) -> Result<(), Error> {\n     let (krate, mut cache) = Cache::from_krate(\n         render_info.clone(),\n@@ -63,7 +62,7 @@ crate fn run_format<T: FormatRenderer>(\n     );\n \n     let (mut format_renderer, mut krate) =\n-        T::init(krate, options, render_info, edition, &mut cache, sess)?;\n+        T::init(krate, options, render_info, edition, &mut cache, tcx)?;\n \n     let cache = Arc::new(cache);\n     // Freeze the cache now that the index has been built. Put an Arc into TLS for future"}, {"sha": "d8d46adfb63df05ef740c75bf6659d04c7c3902a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "patch": "@@ -57,6 +57,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n@@ -388,7 +389,7 @@ impl FormatRenderer for Context {\n         _render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        sess: Lrc<Session>,\n+        tcx: ty::TyCtxt<'_>,\n     ) -> Result<(Context, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();\n@@ -462,7 +463,7 @@ impl FormatRenderer for Context {\n         }\n         let (sender, receiver) = channel();\n         let mut scx = SharedContext {\n-            sess,\n+            tcx,\n             collapsed: krate.collapsed,\n             src_root,\n             include_sources,"}, {"sha": "3d970918407c24a04bbf01ecb01e49212acb83a2", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "patch": "@@ -14,6 +14,7 @@ use std::rc::Rc;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_middle::ty;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n \n@@ -127,12 +128,12 @@ impl FormatRenderer for JsonRenderer {\n         _render_info: RenderInfo,\n         _edition: Edition,\n         _cache: &mut Cache,\n-        sess: Lrc<Session>,\n+        tcx: ty::TyCtxt<'_>,\n     ) -> Result<(Self, clean::Crate), Error> {\n         debug!(\"Initializing json renderer\");\n         Ok((\n             JsonRenderer {\n-                sess,\n+                sess: tcx.sess,\n                 index: Rc::new(RefCell::new(FxHashMap::default())),\n                 out_path: options.output,\n             },"}, {"sha": "caa0706fd2b56dd498ee23c693044c0a889b9354", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "patch": "@@ -62,13 +62,11 @@ use std::default::Default;\n use std::env;\n use std::process;\n \n-use rustc_data_structures::sync::Lrc;\n use rustc_driver::abort_on_err;\n use rustc_errors::ErrorReported;\n-use rustc_interface::interface;\n+use rustc_middle::ty;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n use rustc_session::getopts;\n-use rustc_session::Session;\n use rustc_session::{early_error, early_warn};\n \n #[macro_use]\n@@ -476,9 +474,9 @@ fn run_renderer<T: formats::FormatRenderer>(\n     render_info: config::RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n-    sess: Lrc<Session>,\n+    tcx: ty::TyCtxt<'_>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, sess) {\n+    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n             let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n@@ -577,7 +575,6 @@ fn main_options(options: config::Options) -> MainResult {\n                 info!(\"going to format\");\n                 let (error_format, edition, debugging_options) = diag_opts;\n                 let diag = core::new_handler(error_format, None, &debugging_options);\n-                let sess_format = sess.clone();\n                 match output_format {\n                     None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n                         run_renderer::<html::render::Context>(\n@@ -586,7 +583,7 @@ fn main_options(options: config::Options) -> MainResult {\n                             render_info,\n                             &diag,\n                             edition,\n-                            sess_format,\n+                            tcx,\n                         )\n                     }),\n                     Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n@@ -596,7 +593,7 @@ fn main_options(options: config::Options) -> MainResult {\n                             render_info,\n                             &diag,\n                             edition,\n-                            sess_format,\n+                            tcx,\n                         )\n                     }),\n                 }"}]}