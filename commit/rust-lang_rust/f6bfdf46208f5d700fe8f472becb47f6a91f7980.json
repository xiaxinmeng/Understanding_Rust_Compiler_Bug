{"sha": "f6bfdf46208f5d700fe8f472becb47f6a91f7980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YmZkZjQ2MjA4ZjVkNzAwZmU4ZjQ3MmJlY2I0N2Y2YTkxZjc5ODA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-06T14:37:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T14:37:43Z"}, "message": "Rollup merge of #68837 - jonas-schievink:assoc-item-lookup-2, r=estebank\n\nMake associated item collection a query\n\nBefore this change, every time associated items were iterated over (which rustc does *a lot* \u2013 this can probably be further optimized), there would be N+1 queries to fetch all assoc. items. Now there's just one after they've been computed once.", "tree": {"sha": "be5bee3e326c4b39e103d3d82b4fb642aaa484b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5bee3e326c4b39e103d3d82b4fb642aaa484b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6bfdf46208f5d700fe8f472becb47f6a91f7980", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePCS3CRBK7hj4Ov3rIwAAdHIIAGz4PjrMC4bPaM+yOE4UGVjK\nWm39gh0NdtjyjDrRopqYZlrpW2RiDzmPtc2BQvIwKtSJG5adXzXB4Asod5zBakkJ\nIaqSjxe5VfqzX0DL7/DKDvoC3FBa8jaW24HsnUWAZ0NE/eeDVV/Yewu6V8I9zhag\nyuDHHiDuTAZ2bEaTbA1cYFtqg94siwQBYFUrNbI5mYaq82ERLLYiINEt6pSlGrgG\nKuhecEPDNbRJztPHJYmB2ufMtrM/6HAXsMj7uXkzztrVnv7DhxtflcnVBMbyAdmM\nDJ3E5XU88SCD3uUerelTlQ0a4O3yHzx7NFXNAMAQPZQFQE2ngxkZij9g/w+6JLg=\n=m0BV\n-----END PGP SIGNATURE-----\n", "payload": "tree be5bee3e326c4b39e103d3d82b4fb642aaa484b2\nparent 424304a14f3d4dd8508006ab349b39b983342cf1\nparent 4fc4b951f1da755298aea69f10a4951745ee8501\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580999863 +0100\ncommitter GitHub <noreply@github.com> 1580999863 +0100\n\nRollup merge of #68837 - jonas-schievink:assoc-item-lookup-2, r=estebank\n\nMake associated item collection a query\n\nBefore this change, every time associated items were iterated over (which rustc does *a lot* \u2013 this can probably be further optimized), there would be N+1 queries to fetch all assoc. items. Now there's just one after they've been computed once.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfdf46208f5d700fe8f472becb47f6a91f7980", "html_url": "https://github.com/rust-lang/rust/commit/f6bfdf46208f5d700fe8f472becb47f6a91f7980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfdf46208f5d700fe8f472becb47f6a91f7980/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424304a14f3d4dd8508006ab349b39b983342cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/424304a14f3d4dd8508006ab349b39b983342cf1", "html_url": "https://github.com/rust-lang/rust/commit/424304a14f3d4dd8508006ab349b39b983342cf1"}, {"sha": "4fc4b951f1da755298aea69f10a4951745ee8501", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc4b951f1da755298aea69f10a4951745ee8501", "html_url": "https://github.com/rust-lang/rust/commit/4fc4b951f1da755298aea69f10a4951745ee8501"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "228271e0c4c3ae609cda636264dc978d55d560fd", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=f6bfdf46208f5d700fe8f472becb47f6a91f7980", "patch": "@@ -310,6 +310,11 @@ rustc_queries! {\n         /// Maps from a trait item to the trait item \"descriptor\".\n         query associated_item(_: DefId) -> ty::AssocItem {}\n \n+        /// Collects the associated items defined on a trait or impl.\n+        query associated_items(key: DefId) -> ty::AssocItemsIterator<'tcx> {\n+            desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n+        }\n+\n         query impl_trait_ref(_: DefId) -> Option<ty::TraitRef<'tcx>> {}\n         query impl_polarity(_: DefId) -> ty::ImplPolarity {}\n "}, {"sha": "2538322431ec9b21f71cc45012904498671de095", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f6bfdf46208f5d700fe8f472becb47f6a91f7980", "patch": "@@ -2743,19 +2743,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         variant.fields.iter().position(|field| self.hygienic_eq(ident, field.ident, variant.def_id))\n     }\n \n-    pub fn associated_items(self, def_id: DefId) -> AssocItemsIterator<'tcx> {\n-        // Ideally, we would use `-> impl Iterator` here, but it falls\n-        // afoul of the conservative \"capture [restrictions]\" we put\n-        // in place, so we use a hand-written iterator.\n-        //\n-        // [restrictions]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n-        AssocItemsIterator {\n-            tcx: self,\n-            def_ids: self.associated_item_def_ids(def_id),\n-            next_index: 0,\n-        }\n-    }\n-\n     /// Returns `true` if the impls are the same polarity and the trait either\n     /// has no items or is annotated #[marker] and prevents item overrides.\n     pub fn impls_are_allowed_to_overlap(\n@@ -2987,20 +2974,22 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Copy, Clone, HashStable)]\n pub struct AssocItemsIterator<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    def_ids: &'tcx [DefId],\n-    next_index: usize,\n+    pub items: &'tcx [AssocItem],\n }\n \n-impl Iterator for AssocItemsIterator<'_> {\n+impl<'tcx> Iterator for AssocItemsIterator<'tcx> {\n     type Item = AssocItem;\n \n+    #[inline]\n     fn next(&mut self) -> Option<AssocItem> {\n-        let def_id = self.def_ids.get(self.next_index)?;\n-        self.next_index += 1;\n-        Some(self.tcx.associated_item(*def_id))\n+        if let Some((first, rest)) = self.items.split_first() {\n+            self.items = rest;\n+            Some(*first)\n+        } else {\n+            None\n+        }\n     }\n }\n "}, {"sha": "aa05165e3de324876f6a339445c3aa95d8edc676", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bfdf46208f5d700fe8f472becb47f6a91f7980/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=f6bfdf46208f5d700fe8f472becb47f6a91f7980", "patch": "@@ -206,6 +206,14 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n+fn associated_items<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AssocItemsIterator<'tcx> {\n+    ty::AssocItemsIterator {\n+        items: tcx.arena.alloc_from_iter(\n+            tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did)),\n+        ),\n+    }\n+}\n+\n fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n     tcx.hir().span_if_local(def_id).unwrap()\n }\n@@ -356,6 +364,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         asyncness,\n         associated_item,\n         associated_item_def_ids,\n+        associated_items,\n         adt_sized_constraint,\n         def_span,\n         param_env,"}]}