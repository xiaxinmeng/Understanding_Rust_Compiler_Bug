{"sha": "4e789e03be332c73836aae018eb83a47bc82d3c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzg5ZTAzYmUzMzJjNzM4MzZhYWUwMThlYjgzYTQ3YmM4MmQzYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-06T20:55:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-06T23:27:50Z"}, "message": "Remove the coherence impls pass that was specialized to builtin bounds,\nsince there are separate checks that apply to Copy (and Send uses the\ngeneric defaulted trait rules). Also prohibit `Sized` from being\nmanually implemented for now.", "tree": {"sha": "7f6b906147bbe69c1c47eefe3363e47e502ecc07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6b906147bbe69c1c47eefe3363e47e502ecc07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e789e03be332c73836aae018eb83a47bc82d3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e789e03be332c73836aae018eb83a47bc82d3c9", "html_url": "https://github.com/rust-lang/rust/commit/4e789e03be332c73836aae018eb83a47bc82d3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e789e03be332c73836aae018eb83a47bc82d3c9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e216896e4778738b4ed01e427f711f3a0b2c44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e216896e4778738b4ed01e427f711f3a0b2c44c", "html_url": "https://github.com/rust-lang/rust/commit/2e216896e4778738b4ed01e427f711f3a0b2c44c"}], "stats": {"total": 274, "additions": 184, "deletions": 90}, "files": [{"sha": "e89c96b36e1a23887e2b52631945d2a2c99985dd", "filename": "src/librustc_typeck/coherence/impls.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs?ref=2e216896e4778738b4ed01e427f711f3a0b2c44c", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementations checker: builtin traits and default impls are allowed just\n-//! for structs and enums.\n-\n-use middle::ty;\n-use syntax::ast::{Item, ItemImpl};\n-use syntax::ast;\n-use syntax::visit;\n-\n-pub fn check(tcx: &ty::ctxt) {\n-    let mut impls = ImplsChecker { tcx: tcx };\n-    visit::walk_crate(&mut impls, tcx.map.krate());\n-}\n-\n-struct ImplsChecker<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>\n-}\n-\n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for ImplsChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &'v ast::Item) {\n-        match item.node {\n-            ast::ItemImpl(_, _, _, Some(_), _, _) => {\n-                let trait_ref = ty::impl_id_to_trait_ref(self.tcx, item.id);\n-                if let Some(_) = self.tcx.lang_items.to_builtin_kind(trait_ref.def_id) {\n-                    match trait_ref.self_ty().sty {\n-                        ty::ty_struct(..) | ty::ty_enum(..) => {}\n-                        _ => {\n-                            span_err!(self.tcx.sess, item.span, E0209,\n-                                \"builtin traits can only be \\\n-                                          implemented on structs or enums\");\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-}"}, {"sha": "a06dcbaf556bdd7ea032914df2b415844c8dfdb1", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -49,7 +49,6 @@ use syntax::visit;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use util::ppaux::Repr;\n \n-mod impls;\n mod orphan;\n mod overlap;\n mod unsafety;\n@@ -583,7 +582,6 @@ pub fn check_coherence(crate_context: &CrateCtxt) {\n         inference_context: new_infer_ctxt(crate_context.tcx),\n         inherent_impls: RefCell::new(FnvHashMap()),\n     }.check(crate_context.tcx.map.krate());\n-    impls::check(crate_context.tcx);\n     unsafety::check(crate_context.tcx);\n     orphan::check(crate_context.tcx);\n     overlap::check(crate_context.tcx);"}, {"sha": "0857203b777ac84a78e760c2e3ea49d18dad5465", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 89, "deletions": 21, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -37,10 +37,13 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                        a trait or new type instead\");\n         }\n     }\n-}\n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &ast::Item) {\n+    /// Checks exactly one impl for orphan rules and other such\n+    /// restrictions.  In this fn, it can happen that multiple errors\n+    /// apply to a specific impl, so just return after reporting one\n+    /// to prevent inundating the user with a bunch of similar error\n+    /// reports.\n+    fn check_item(&self, item: &ast::Item) {\n         let def_id = ast_util::local_def(item.id);\n         match item.node {\n             ast::ItemImpl(_, _, _, None, _, _) => {\n@@ -63,6 +66,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                         span_err!(self.tcx.sess, item.span, E0118,\n                                   \"no base type found for inherent implementation; \\\n                                    implement a trait or new type instead\");\n+                        return;\n                     }\n                 }\n             }\n@@ -81,6 +85,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                                  types defined in this crate; \\\n                                  only traits defined in the current crate can be \\\n                                  implemented for arbitrary types\");\n+                            return;\n                         }\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n@@ -90,11 +95,44 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                                      some local type (e.g. `MyStruct<T>`); only traits defined in \\\n                                      the current crate can be implemented for a type parameter\",\n                                     param_ty.user_string(self.tcx));\n+                            return;\n                         }\n                     }\n                 }\n \n-                // Impls of a defaulted trait face additional rules.\n+                // In addition to the above rules, we restrict impls of defaulted traits\n+                // so that they can only be implemented on structs/enums. To see why this\n+                // restriction exists, consider the following example (#22978). Imagine\n+                // that crate A defines a defaulted trait `Foo` and a fn that operates\n+                // on pairs of types:\n+                //\n+                // ```\n+                // // Crate A\n+                // trait Foo { }\n+                // impl Foo for .. { }\n+                // fn two_foos<A:Foo,B:Foo>(..) {\n+                //     one_foo::<(A,B)>(..)\n+                // }\n+                // fn one_foo<T:Foo>(..) { .. }\n+                // ```\n+                //\n+                // This type-checks fine; in particular the fn\n+                // `two_foos` is able to conclude that `(A,B):Foo`\n+                // because `A:Foo` and `B:Foo`.\n+                //\n+                // Now imagine that crate B comes along and does the following:\n+                //\n+                // ```\n+                // struct A { }\n+                // struct B { }\n+                // impl Foo for A { }\n+                // impl Foo for B { }\n+                // impl !Send for (A, B) { }\n+                // ```\n+                //\n+                // This final impl is legal according to the orpan\n+                // rules, but it invalidates the reasoning from\n+                // `two_foos` above.\n                 debug!(\"trait_ref={} trait_def_id={} trait_has_default_impl={}\",\n                        trait_ref.repr(self.tcx),\n                        trait_def_id.repr(self.tcx),\n@@ -104,29 +142,53 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     trait_def_id.krate != ast::LOCAL_CRATE\n                 {\n                     let self_ty = trait_ref.self_ty();\n-                    match self_ty.sty {\n-                        ty::ty_struct(self_def_id, _) | ty::ty_enum(self_def_id, _) => {\n-                            // The orphan check often rules this out,\n-                            // but not always. For example, the orphan\n-                            // check would accept `impl Send for\n-                            // Box<SomethingLocal>`, but we want to\n-                            // forbid that.\n-                            if self_def_id.krate != ast::LOCAL_CRATE {\n-                                self.tcx.sess.span_err(\n-                                    item.span,\n-                                    \"cross-crate traits with a default impl \\\n+                    let opt_self_def_id = match self_ty.sty {\n+                        ty::ty_struct(self_def_id, _) | ty::ty_enum(self_def_id, _) =>\n+                            Some(self_def_id),\n+                        ty::ty_uniq(..) =>\n+                            self.tcx.lang_items.owned_box(),\n+                        _ =>\n+                            None\n+                    };\n+\n+                    let msg = match opt_self_def_id {\n+                        // We only want to permit structs/enums, but not *all* structs/enums.\n+                        // They must be local to the current crate, so that people\n+                        // can't do `unsafe impl Send for Rc<SomethingLocal>` or\n+                        // `unsafe impl !Send for Box<SomethingLocalAndSend>`.\n+                        Some(self_def_id) => {\n+                            if self_def_id.krate == ast::LOCAL_CRATE {\n+                                None\n+                            } else {\n+                                Some(format!(\n+                                    \"cross-crate traits with a default impl, like `{}`, \\\n                                      can only be implemented for a struct/enum type \\\n-                                     defined in the current crate\");\n+                                     defined in the current crate\",\n+                                    ty::item_path_str(self.tcx, trait_def_id)))\n                             }\n                         }\n                         _ => {\n-                            self.tcx.sess.span_err(\n-                                item.span,\n-                                \"cross-crate traits with a default impl \\\n-                                 can only be implemented for a struct or enum type\");\n+                            Some(format!(\n+                                \"cross-crate traits with a default impl, like `{}`, \\\n+                                 can only be implemented for a struct/enum type, \\\n+                                 not `{}`\",\n+                                ty::item_path_str(self.tcx, trait_def_id),\n+                                self_ty.user_string(self.tcx)))\n                         }\n+                    };\n+\n+                    if let Some(msg) = msg {\n+                        span_err!(self.tcx.sess, item.span, E0321, \"{}\", msg);\n+                        return;\n                     }\n                 }\n+\n+                // Disallow *all* explicit impls of `Sized` for now.\n+                if Some(trait_def_id) == self.tcx.lang_items.sized_trait() {\n+                    span_err!(self.tcx.sess, item.span, E0322,\n+                              \"explicit impls for the `Sized` trait are not permitted\");\n+                    return;\n+                }\n             }\n             ast::ItemDefaultImpl(..) => {\n                 // \"Trait\" impl\n@@ -135,14 +197,20 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 if trait_ref.def_id.krate != ast::LOCAL_CRATE {\n                     span_err!(self.tcx.sess, item.span, E0318,\n                               \"cannot create default implementations for traits outside the \\\n-                               crate they're defined in; define a new trait instead.\");\n+                               crate they're defined in; define a new trait instead\");\n+                    return;\n                 }\n             }\n             _ => {\n                 // Not an impl\n             }\n         }\n+    }\n+}\n \n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        self.check_item(item);\n         visit::walk_item(self, item);\n     }\n }"}, {"sha": "03fa269ccf82908651b7056cbba5ed3f63fa1078", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -175,7 +175,9 @@ register_diagnostics! {\n     E0250, // expected constant expr for array length\n     E0318, // can't create default impls for traits outside their crates\n     E0319, // trait impls for defaulted traits allowed just for structs/enums\n-    E0320  // recursive overflow during dropck\n+    E0320, // recursive overflow during dropck\n+    E0321, // extended coherence rules for defaulted traits violated\n+    E0322  // cannot implement Sized explicitly\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "506e7a00c75bcc72271c6f289984e1c5db52618e", "filename": "src/test/auxiliary/typeck-default-trait-impl-cross-crate-coherence-lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -15,3 +15,5 @@ use std::marker::MarkerTrait;\n \n pub trait DefaultedTrait : MarkerTrait { }\n impl DefaultedTrait for .. { }\n+\n+pub struct Something<T> { t: T }"}, {"sha": "3034be177ca68110a3523bd118d9c503b6b3e552", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::Copy;\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+impl Copy for TestE {}\n+impl Copy for MyType {}\n+impl Copy for (MyType, MyType) {}\n+//~^ ERROR E0206\n+\n+impl Copy for &'static NotSync {}\n+//~^ ERROR E0206\n+\n+impl Copy for [MyType] {}\n+//~^ ERROR E0206\n+\n+impl Copy for &'static [NotSync] {}\n+//~^ ERROR E0206\n+\n+fn main() {\n+}"}, {"sha": "b05c1ff0f0b7265d62fe90db7dbf8980f7517d52", "filename": "src/test/compile-fail/coherence-impls-send.rs", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::Send;\n+use std::marker::Copy;\n \n enum TestE {\n   A\n@@ -24,20 +24,17 @@ impl !Sync for NotSync {}\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n-//~^ ERROR builtin traits can only be implemented on structs or enums\n+//~^ ERROR E0321\n \n unsafe impl Send for &'static NotSync {}\n-//~^ ERROR builtin traits can only be implemented on structs or enums\n+//~^ ERROR E0321\n \n unsafe impl Send for [MyType] {}\n-//~^ ERROR builtin traits can only be implemented on structs or enums\n+//~^ ERROR E0321\n \n unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR builtin traits can only be implemented on structs or enums\n-//~^^ ERROR conflicting implementations for trait `core::marker::Send`\n-\n-fn is_send<T: Send>() {}\n+//~^ ERROR E0321\n+//~| ERROR conflicting implementations\n \n fn main() {\n-    is_send::<(MyType, TestE)>();\n }", "previous_filename": "src/test/compile-fail/coherence-impls-builtin.rs"}, {"sha": "a9a3ebaffb75abff44bfc810ac3ca74544b24b5b", "filename": "src/test/compile-fail/coherence-impls-sized.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::Copy;\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+impl Sized for TestE {} //~ ERROR E0322\n+impl Sized for MyType {} //~ ERROR E0322\n+impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+impl Sized for &'static NotSync {} //~ ERROR E0322\n+impl Sized for [MyType] {} //~ ERROR E0322\n+//~^ ERROR E0277\n+impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+\n+fn main() {\n+}"}, {"sha": "97dffec2dd9bd4758db4a11f9f89107d00581b72", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -19,13 +19,15 @@ use lib::TheTrait;\n \n struct TheType;\n \n-impl TheTrait<usize> for isize { } //~ ERROR E0117\n+impl TheTrait<usize> for isize { }\n+//~^ ERROR E0117\n \n impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n-impl !Send for Vec<isize> { } //~ ERROR E0117\n-//~^ ERROR conflicting\n+impl !Send for Vec<isize> { }\n+//~^ ERROR E0117\n+//~| ERROR E0119\n \n fn main() { }"}, {"sha": "3a29bb9c2277cfe0395c11e1ee89b0c9fb6583a0", "filename": "src/test/compile-fail/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -20,15 +20,15 @@ extern crate \"typeck-default-trait-impl-cross-crate-coherence-lib\" as lib;\n use lib::DefaultedTrait;\n \n struct A;\n-impl DefaultedTrait for (A,) { }\n-//~^ ERROR can only be implemented for a struct or enum type\n+impl DefaultedTrait for (A,) { } //~ ERROR E0321\n \n struct B;\n-impl !DefaultedTrait for (B,) { }\n-//~^ ERROR can only be implemented for a struct or enum type\n+impl !DefaultedTrait for (B,) { } //~ ERROR E0321\n \n struct C;\n-impl DefaultedTrait for Box<C> { }\n-//~^ ERROR can only be implemented for a struct or enum type\n+struct D<T>(T);\n+impl DefaultedTrait for Box<C> { } //~ ERROR E0321\n+impl DefaultedTrait for lib::Something<C> { } //~ ERROR E0321\n+impl DefaultedTrait for D<C> { } // OK\n \n fn main() { }"}, {"sha": "a345bd1b65c0ea1f1f7c83ac410dd066e7dfb78c", "filename": "src/test/compile-fail/typeck-default-trait-impl-outside-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e789e03be332c73836aae018eb83a47bc82d3c9/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs?ref=4e789e03be332c73836aae018eb83a47bc82d3c9", "patch": "@@ -13,6 +13,6 @@\n #![feature(optin_builtin_traits)]\n \n impl Copy for .. {}\n-//~^ ERROR cannot create default implementations for traits outside the crate they're defined in; define a new trait instead.\n+//~^ ERROR E0318\n \n fn main() {}"}]}