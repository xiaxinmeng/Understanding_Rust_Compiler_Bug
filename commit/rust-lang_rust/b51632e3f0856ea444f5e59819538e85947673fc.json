{"sha": "b51632e3f0856ea444f5e59819538e85947673fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTYzMmUzZjA4NTZlYTQ0NGY1ZTU5ODE5NTM4ZTg1OTQ3NjczZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T08:17:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T08:17:36Z"}, "message": "Auto merge of #56070 - oli-obk:const_let, r=eddyb\n\nAllow assignments in const contexts\n\nfixes https://github.com/rust-lang/rust/issues/54098\nfixes https://github.com/rust-lang/rust/issues/51251\nfixes https://github.com/rust-lang/rust/issues/52613", "tree": {"sha": "781797013c772397ae09f3fdbb1aa2d9ff07395e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781797013c772397ae09f3fdbb1aa2d9ff07395e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51632e3f0856ea444f5e59819538e85947673fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51632e3f0856ea444f5e59819538e85947673fc", "html_url": "https://github.com/rust-lang/rust/commit/b51632e3f0856ea444f5e59819538e85947673fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51632e3f0856ea444f5e59819538e85947673fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423291f14bbb820265b2bbf33d6fffb044035b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/423291f14bbb820265b2bbf33d6fffb044035b86", "html_url": "https://github.com/rust-lang/rust/commit/423291f14bbb820265b2bbf33d6fffb044035b86"}, {"sha": "6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "html_url": "https://github.com/rust-lang/rust/commit/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176"}], "stats": {"total": 425, "additions": 382, "deletions": 43}, "files": [{"sha": "e6a7c20f7937934374bbae4dcbe84d5810bfcc4f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -429,6 +429,7 @@ impl_stable_hash_for!(\n         CalledClosureAsFunction,\n         VtableForArgumentlessMethod,\n         ModifiedConstantMemory,\n+        ModifiedStatic,\n         AssumptionNotHeld,\n         InlineAsm,\n         ReallocateNonBasePtr,"}, {"sha": "503e0abdbf3002a247af861259e2e0f2ff7ea211", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -308,6 +308,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n     ModifiedConstantMemory,\n+    ModifiedStatic,\n     AssumptionNotHeld,\n     InlineAsm,\n     TypeNotPrimitive(Ty<'tcx>),\n@@ -412,6 +413,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"tried to call a vtable function without arguments\",\n             ModifiedConstantMemory =>\n                 \"tried to modify constant memory\",\n+            ModifiedStatic =>\n+                \"tried to modify a static's initial value from another static's initializer\",\n             AssumptionNotHeld =>\n                 \"`assume` argument was false\",\n             InlineAsm =>"}, {"sha": "dd247a96fa48a48053e6899ff5b3ec210c1b049e", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -89,7 +89,8 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n         Default +\n         Clone;\n \n-    /// The memory kind to use for copied statics -- or None if those are not supported.\n+    /// The memory kind to use for copied statics -- or None if statics should not be mutated\n+    /// and thus any such attempt will cause a `ModifiedStatic` error to be raised.\n     /// Statics are copied under two circumstances: When they are mutated, and when\n     /// `static_with_default_tag` or `find_foreign_static` (see below) returns an owned allocation\n     /// that is added to the memory so that the work is not done twice."}, {"sha": "57d79bfc9fe088379ae08942cc405cdfae2300f2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -397,10 +397,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             if alloc.mutability == Mutability::Immutable {\n                 return err!(ModifiedConstantMemory);\n             }\n-            let kind = M::STATIC_KIND.expect(\n-                \"An allocation is being mutated but the machine does not expect that to happen\"\n-            );\n-            Ok((MemoryKind::Machine(kind), alloc.into_owned()))\n+            match M::STATIC_KIND {\n+                Some(kind) => Ok((MemoryKind::Machine(kind), alloc.into_owned())),\n+                None => err!(ModifiedStatic),\n+            }\n         });\n         // Unpack the error type manually because type inference doesn't\n         // work otherwise (and we cannot help it because `impl Trait`)"}, {"sha": "f21efaa048bb8770efdc1bf3f78d4860957e825b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -199,6 +199,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     | CalledClosureAsFunction\n                     | VtableForArgumentlessMethod\n                     | ModifiedConstantMemory\n+                    | ModifiedStatic\n                     | AssumptionNotHeld\n                     // FIXME: should probably be removed and turned into a bug! call\n                     | TypeNotPrimitive(_)"}, {"sha": "fc2c6c3ab1f374daa8768cd67d8c395e4e35b003", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -243,13 +243,52 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        match *dest {\n-            Place::Local(index) if (self.mir.local_kind(index) == LocalKind::Var ||\n-                                   self.mir.local_kind(index) == LocalKind::Arg) &&\n-                                   self.tcx.sess.features_untracked().const_let => {\n-                debug!(\"store to var {:?}\", index);\n-                self.local_qualif[index] = Some(self.qualif);\n+        if self.tcx.features().const_let {\n+            let mut dest = dest;\n+            let index = loop {\n+                match dest {\n+                    // with `const_let` active, we treat all locals equal\n+                    Place::Local(index) => break *index,\n+                    // projections are transparent for assignments\n+                    // we qualify the entire destination at once, even if just a field would have\n+                    // stricter qualification\n+                    Place::Projection(proj) => {\n+                        // Catch more errors in the destination. `visit_place` also checks various\n+                        // projection rules like union field access and raw pointer deref\n+                        self.visit_place(\n+                            dest,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        );\n+                        dest = &proj.base;\n+                    },\n+                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                    Place::Static(..) => {\n+                        // Catch more errors in the destination. `visit_place` also checks that we\n+                        // do not try to access statics from constants or try to mutate statics\n+                        self.visit_place(\n+                            dest,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        );\n+                        return;\n+                    }\n+                }\n+            };\n+            debug!(\"store to var {:?}\", index);\n+            match &mut self.local_qualif[index] {\n+                // this is overly restrictive, because even full assignments do not clear the qualif\n+                // While we could special case full assignments, this would be inconsistent with\n+                // aggregates where we overwrite all fields via assignments, which would not get\n+                // that feature.\n+                Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n+                // insert new qualification\n+                qualif @ None => *qualif = Some(self.qualif),\n             }\n+            return;\n+        }\n+\n+        match *dest {\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n                                    self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n                 debug!(\"store to {:?} (temp or return pointer)\", index);\n@@ -478,6 +517,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 // Only allow statics (not consts) to refer to other statics.\n                 if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+                    if context.is_mutating_use() {\n+                        // this is not strictly necessary as miri will also bail out\n+                        // For interior mutability we can't really catch this statically as that\n+                        // goes through raw pointers and intermediate temporaries, so miri has\n+                        // to catch this anyway\n+                        self.tcx.sess.span_err(\n+                            self.span,\n+                            \"cannot mutate statics in the initializer of another static\",\n+                        );\n+                    }\n                     return;\n                 }\n                 self.add(Qualif::NOT_CONST);"}, {"sha": "ef0de61d219adbbb91b553b34b405b54b315271f", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// New test for #53818: modifying static memory at compile-time is not allowed.\n+// The test should never compile successfully\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n+\n+use std::cell::UnsafeCell;\n+\n+struct Foo(UnsafeCell<u32>);\n+\n+unsafe impl Send for Foo {}\n+unsafe impl Sync for Foo {}\n+\n+static FOO: Foo = Foo(UnsafeCell::new(42));\n+\n+static BAR: () = unsafe {\n+    *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n+};\n+\n+fn main() {}"}, {"sha": "0892b05a69df273ea05da0cba2433462b118c3e9", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/assign-to-static-within-other-static-2.rs:27:5\n+   |\n+LL |     *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n+   |     ^^^^^^^^^^^^^^^^ tried to modify a static's initial value from another static's initializer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6f16f644eec68177c7d9161f7c29d7b0c6589cb3", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// New test for #53818: modifying static memory at compile-time is not allowed.\n+// The test should never compile successfully\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n+\n+use std::cell::UnsafeCell;\n+\n+static mut FOO: u32 = 42;\n+static BOO: () = unsafe {\n+    FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+};\n+\n+fn main() {}"}, {"sha": "ca652c9df32adb2c1f6869e2fcfc35d5118dbdca", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,8 @@\n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/assign-to-static-within-other-static.rs:21:5\n+   |\n+LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+   |     ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "01fcc8307c0c11b55ad8b2bda635a018297cf729", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // New test for #53818: modifying static memory at compile-time is not allowed.\n-// The test should never succeed.\n+// The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n #![feature(const_let)]\n@@ -27,9 +27,9 @@ fn foo() {}\n \n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ ERROR statements in statics are unstable (see issue #48821)\n-    // This error is caused by a separate bug that the feature gate error is reported\n-    // even though the feature gate \"const_let\" is active.\n+    // we do not error on the above access, because that is not detectable statically. Instead,\n+    // const evaluation will error when trying to evaluate it. Due to the error below, we never even\n+    // attempt to const evaluate `BAR`, so we don't see the error\n \n     foo();\n     //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants"}, {"sha": "01ad1fc9a21b9fac6164b2a5bf06b57e81ddbbae", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -1,18 +1,9 @@\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/mod-static-with-const-fn.rs:29:5\n-   |\n-LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/mod-static-with-const-fn.rs:34:5\n    |\n LL |     foo();\n    |     ^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "a3c53a451e106732063ff34e2a8f89fc11fba354", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+#![feature(const_let)]\n+\n+struct S(i32);\n+\n+const A: () = {\n+    let mut s = S(0);\n+    s.0 = 1;\n+};\n+\n+fn main() {}"}, {"sha": "0de7396501adc053762a4e2a6b15b06cccd1bdd9", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,25 @@\n+// compile-pass\n+\n+#![feature(const_let)]\n+#![feature(const_fn)]\n+\n+pub struct AA {\n+    pub data: [u8; 10],\n+}\n+\n+impl AA {\n+    pub const fn new() -> Self {\n+        let mut res: AA = AA { data: [0; 10] };\n+        res.data[0] = 5;\n+        res\n+    }\n+}\n+\n+static mut BB: AA = AA::new();\n+\n+fn main() {\n+    let ptr = unsafe { &mut BB };\n+    for a in ptr.data.iter() {\n+        println!(\"{}\", a);\n+    }\n+}"}, {"sha": "83825456b5c61d9f732303cd858e69afdd6da34f", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_let)]\n+#![feature(const_fn)]\n+\n+struct S {\n+    state: u32,\n+}\n+\n+impl S {\n+    const fn foo(&mut self, x: u32) {\n+        self.state = x;\n+    }\n+}\n+\n+const FOO: S = {\n+    let mut s = S { state: 42 };\n+    s.foo(3); //~ ERROR references in constants may only refer to immutable values\n+    s\n+};\n+\n+fn main() {\n+    assert_eq!(FOO.state, 3);\n+}"}, {"sha": "7f9a953c10fe8ae8b9fe0190b3e5097751aa86a9", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,9 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const_let_assign3.rs:16:5\n+   |\n+LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n+   |     ^ constants require immutable values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0017`."}, {"sha": "4ce41f80f82c8dff332491835619331abdf21e40", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_let)]\n+\n+use std::cell::Cell;\n+\n+const FOO: &(Cell<usize>, bool) = {\n+    let mut a = (Cell::new(0), false);\n+    a.1 = true; // sets `qualif(a)` to `qualif(a) | qualif(true)`\n+    &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+};\n+\n+fn main() {}"}, {"sha": "d695f64e2c3b55a6a1d9fddf1372cfc6f9ba6856", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,9 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/partial_qualif.rs:8:5\n+   |\n+LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |     ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0492`."}, {"sha": "34e8eaba9f28f6ba91d96425eb73470958218e9b", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_let)]\n+\n+use std::cell::Cell;\n+\n+const FOO: &u32 = {\n+    let mut a = 42;\n+    {\n+        let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n+        unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n+    }\n+    &{a}\n+};\n+\n+fn main() {}"}, {"sha": "d5252f199beac10bf42384c0e212c2b948574d7f", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,18 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/projection_qualif.rs:8:27\n+   |\n+LL |         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n+   |                           ^^^^^^ constants require immutable values\n+\n+error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n+  --> $DIR/projection_qualif.rs:9:18\n+   |\n+LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n+   |                  ^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0017, E0658.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "d8749bb5fd90bff0251e2c94a71fe0ffd246fa9d", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/promote_const_let.rs:6:9\n+   |\n+LL |     let x: &'static u32 = {\n+   |            ------------ type annotation requires that `y` is borrowed for `'static`\n+LL |         let y = 42;\n+LL |         &y //~ ERROR does not live long enough\n+   |         ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `y` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "8de9b00eb111d3bb0baca2e63cd9278d0ba68ced", "filename": "src/test/ui/consts/promote_const_let.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,8 @@\n+#![feature(const_let)]\n+\n+fn main() {\n+    let x: &'static u32 = {\n+        let y = 42;\n+        &y //~ ERROR does not live long enough\n+    };\n+}"}, {"sha": "6bbb7495fb0dca1035a811a19ddc173f98730315", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/promote_const_let.rs:6:10\n+   |\n+LL |         &y //~ ERROR does not live long enough\n+   |          ^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "806a74ee4530b0f798783a60930668b78d6c0ccc", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_let)]\n+\n+use std::cell::Cell;\n+\n+// this is overly conservative. The reset to `None` should clear `a` of all qualifications\n+// while we could fix this, it would be inconsistent with `qualif_overwrite_2.rs`.\n+// We can fix this properly in the future by allowing constants that do not depend on generics\n+// to be checked by an analysis on the final value instead of looking at the body.\n+const FOO: &Option<Cell<usize>> = {\n+    let mut a = Some(Cell::new(0));\n+    a = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n+    &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+};\n+\n+fn main() {}"}, {"sha": "4fac64bf8063f19dbec23b44a35eb5278989fee8", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,9 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/qualif_overwrite.rs:12:5\n+   |\n+LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |     ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0492`."}, {"sha": "29557a3da47811d491291021e7fc49bc339d5872", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_let)]\n+\n+use std::cell::Cell;\n+\n+// const qualification is not smart enough to know about fields and always assumes that there might\n+// be other fields that caused the qualification\n+const FOO: &Option<Cell<usize>> = {\n+    let mut a = (Some(Cell::new(0)),);\n+    a.0 = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n+    &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n+};\n+\n+fn main() {}"}, {"sha": "181b728c7b76f2746f63f1e59a150238eccc4359", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -0,0 +1,9 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/qualif_overwrite_2.rs:10:5\n+   |\n+LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0492`."}, {"sha": "8f8d87739b8cda98a1048fd3806f3619aa6ba899", "filename": "src/test/ui/error-codes/E0017.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0017.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0017.rs:17:38\n+  --> $DIR/E0017.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "bf400fde365bea419f99a853a2ecb2781f179c05", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -14,5 +14,6 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n+                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n fn main() {}"}, {"sha": "94a90d92d3e77a43b0af0e2223b8fc70a1586fee", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0017.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                            ^\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0017.rs:17:38\n+  --> $DIR/E0017.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "7d25d41f18b6291752ac79744efd4b4f2fc000c8", "filename": "src/test/ui/error-codes/E0388.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0388.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0388.rs:17:38\n+  --> $DIR/E0388.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "3203798c70958de0538b45e5116264ab86da45d4", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -14,6 +14,7 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n+                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n \n fn main() {}"}, {"sha": "46efda9147b6d5b686049e7cb7bea7e353504e90", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0388.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                            ^\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0388.rs:17:38\n+  --> $DIR/E0388.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "191f09b54ee7324a334877e8dc4405af6586dd81", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -12,10 +12,10 @@\n \n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n-//~^ ERROR statements in statics are unstable\n+//~^ ERROR cannot mutate statics in the initializer of another static\n \n pub static mut C: u32 = unsafe { C = 1; 0 };\n-//~^ ERROR statements in statics are unstable\n+//~^ ERROR cannot mutate statics in the initializer of another static\n \n pub static D: u32 = D;\n "}, {"sha": "673a71b4642f39028ae47e1a13b093819a9fc8ef", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b51632e3f0856ea444f5e59819538e85947673fc/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=b51632e3f0856ea444f5e59819538e85947673fc", "patch": "@@ -1,19 +1,14 @@\n-error[E0658]: statements in statics are unstable (see issue #48821)\n+error: cannot mutate statics in the initializer of another static\n   --> $DIR/write-to-static-mut-in-static.rs:14:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n+error: cannot mutate statics in the initializer of another static\n   --> $DIR/write-to-static-mut-in-static.rs:17:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}