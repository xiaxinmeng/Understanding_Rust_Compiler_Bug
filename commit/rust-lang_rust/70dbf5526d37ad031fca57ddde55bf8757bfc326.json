{"sha": "70dbf5526d37ad031fca57ddde55bf8757bfc326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZGJmNTUyNmQzN2FkMDMxZmNhNTdkZGRlNTViZjg3NTdiZmMzMjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-27T19:48:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "Use spans for input borrowed types unrelated to return type", "tree": {"sha": "75d397c532057a49e0202e26964c65d398fa01cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d397c532057a49e0202e26964c65d398fa01cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70dbf5526d37ad031fca57ddde55bf8757bfc326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf5526d37ad031fca57ddde55bf8757bfc326", "html_url": "https://github.com/rust-lang/rust/commit/70dbf5526d37ad031fca57ddde55bf8757bfc326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf5526d37ad031fca57ddde55bf8757bfc326/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "183dfac1f31cc16975bb1f598779df5689d1e729", "url": "https://api.github.com/repos/rust-lang/rust/commits/183dfac1f31cc16975bb1f598779df5689d1e729", "html_url": "https://github.com/rust-lang/rust/commit/183dfac1f31cc16975bb1f598779df5689d1e729"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "022f83af8159ca3c2bd9e6597be3206e2a3330a2", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -287,6 +287,7 @@ struct ElisionFailureInfo {\n     index: usize,\n     lifetime_count: usize,\n     have_bound_regions: bool,\n+    span: Span,\n }\n \n type ScopeRef<'a> = &'a Scope<'a>;\n@@ -2273,6 +2274,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     index: i,\n                     lifetime_count: gather.lifetimes.len(),\n                     have_bound_regions: gather.have_bound_regions,\n+                    span: input.span,\n                 }\n             })\n             .collect();\n@@ -2483,11 +2485,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             params.iter().cloned().filter(|info| info.lifetime_count > 0).collect();\n \n         let elided_len = elided_params.len();\n+        let mut spans = vec![];\n \n-        // FIXME: collect spans of the input params when appropriate to use in the diagnostic.\n         for (i, info) in elided_params.into_iter().enumerate() {\n-            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions } = info;\n+            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions, span } = info;\n \n+            spans.push(span);\n             let help_name = if let Some(ident) =\n                 parent.and_then(|body| self.tcx.hir().body(body).params[index].pat.simple_ident())\n             {\n@@ -2518,31 +2521,39 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n+        let help = |msg| {\n+            if spans.is_empty() {\n+                db.help(msg);\n+            } else {\n+                db.span_help(spans, msg);\n+            }\n+        };\n+\n         if len == 0 {\n             db.help(\n                 \"this function's return type contains a borrowed value, \\\n-                but there is no value for it to be borrowed from\",\n+                 but there is no value for it to be borrowed from\",\n             );\n             self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n-            db.help(\n+            help(\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\",\n             );\n             let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n             self.suggest_lifetime(db, span, msg)\n         } else if elided_len == 1 {\n-            db.help(&format!(\n+            help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n-                but the signature does not say which {} it is borrowed from\",\n+                 but the signature does not say which {} it is borrowed from\",\n                 m\n             ));\n             true\n         } else {\n-            db.help(&format!(\n+            help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n-                but the signature does not say whether it is borrowed from {}\",\n+                 but the signature does not say whether it is borrowed from {}\",\n                 m\n             ));\n             true"}, {"sha": "a12c601b936af838ff4edce737cb4a75303dc986", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+  --> $DIR/issue-63388-2.rs:11:14\n+   |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              ^^^^^^^^       ^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/issue-63388-2.rs:11:9"}, {"sha": "1be066caa87a9fe29645f4d3e39b2da514f4fb4b", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL | type Foo = fn(&u8, &u8) -> &u8;\n    |                            ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/issue-19707.rs:3:15\n+   |\n+LL | type Foo = fn(&u8, &u8) -> &u8;\n+   |               ^^^  ^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | type Foo<'lifetime> = fn(&u8, &u8) -> &'lifetime u8;\n@@ -16,7 +20,11 @@ error[E0106]: missing lifetime specifier\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n    |                           ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/issue-19707.rs:5:14\n+   |\n+LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n+   |              ^^^  ^^^\n    = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing a Higher-Ranked lifetime\n    |"}, {"sha": "882102799d913a1584828c1f2c7c8f77dd5059bd", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n    |                                                              ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n+help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n+  --> $DIR/issue-26638.rs:1:21\n+   |\n+LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn parse_type<'lifetime>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'lifetime str { iter.next() }"}, {"sha": "e2b57a20325d31fd17bb46059628c5cb398f1c45", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL | fn f(a: &S, b: i32) -> &i32 {\n    |                        ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n+help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n+  --> $DIR/issue-30255.rs:9:9\n+   |\n+LL | fn f(a: &S, b: i32) -> &i32 {\n+   |         ^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f<'lifetime>(a: &S, b: i32) -> &'lifetime i32 {\n@@ -16,7 +20,11 @@ error[E0106]: missing lifetime specifier\n LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n    |                                  ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n+  --> $DIR/issue-30255.rs:14:9\n+   |\n+LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n+   |         ^^              ^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'lifetime>(a: &S, b: bool, c: &i32) -> &'lifetime i32 {\n@@ -28,7 +36,11 @@ error[E0106]: missing lifetime specifier\n LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n    |                                            ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n+  --> $DIR/issue-30255.rs:19:9\n+   |\n+LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n+   |         ^^^^^              ^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'lifetime>(a: &bool, b: bool, c: &S, d: &i32) -> &'lifetime i32 {"}, {"sha": "d1b597804cda9fe06004d8dfef3927e3f75dc461", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -12,7 +12,11 @@ error[E0106]: missing lifetime specifier\n LL | fn g(_x: &isize, _y: &isize) -> &isize {\n    |                                 ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:10\n+   |\n+LL | fn g(_x: &isize, _y: &isize) -> &isize {\n+   |          ^^^^^^      ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'lifetime>(_x: &isize, _y: &isize) -> &'lifetime isize {\n@@ -24,7 +28,11 @@ error[E0106]: missing lifetime specifier\n LL | fn h(_x: &Foo) -> &isize {\n    |                   ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n+help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:10\n+   |\n+LL | fn h(_x: &Foo) -> &isize {\n+   |          ^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'lifetime>(_x: &Foo) -> &'lifetime isize {"}, {"sha": "52a980a61daa05282f9f8c3a6d1f22015952c56a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL | fn foo(x: &i32, y: &i32) -> &i32 {\n    |                             ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+  --> $DIR/ex1b-return-no-names-if-else.rs:1:11\n+   |\n+LL | fn foo(x: &i32, y: &i32) -> &i32 {\n+   |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'lifetime>(x: &i32, y: &i32) -> &'lifetime i32 {"}, {"sha": "aabe088d63ca66a6dddf0e49ad10a329f209f6b1", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,15 +4,23 @@ error[E0106]: missing lifetime specifier\n LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n    |                                          ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/rfc1623.rs:8:29\n+   |\n+LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n+   |                             ^^^  ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623.rs:10:39\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n    |                                       ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/rfc1623.rs:10:26\n+   |\n+LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n+   |                          ^^^  ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3b7936c5f44b6847b8bf6bb6ad03e1297f9ce4e0", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -10,15 +10,23 @@ error[E0106]: missing lifetime specifier\n LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n    |                                  ^ help: consider using the named lifetime: `&'a`\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+  --> $DIR/return-without-lifetime.rs:5:20\n+   |\n+LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n+   |                    ^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:7:35\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n    |                                   ^ help: consider using the named lifetime: `&'a`\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+  --> $DIR/return-without-lifetime.rs:7:20\n+   |\n+LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n+   |                    ^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1e15196f8ec85077741a7ade63957853d4e1ee16", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n    |                                       ^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:20\n+   |\n+LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n+   |                    ^^^^^^  ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn main<'lifetime>() {"}, {"sha": "801504627c0acd5ffd03f353c5ed72c52ece5d4a", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -4,7 +4,11 @@ error[E0106]: missing lifetime specifier\n LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n    |                              ^^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+  --> $DIR/in-fn-return-illegal.rs:5:11\n+   |\n+LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n+   |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'lifetime>(x: &u32, y: &u32) -> &'lifetime u32 { loop { } }"}, {"sha": "ef3ad18ee8861aebfc060015f6dceca95cd6e794", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf5526d37ad031fca57ddde55bf8757bfc326/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=70dbf5526d37ad031fca57ddde55bf8757bfc326", "patch": "@@ -30,7 +30,11 @@ error[E0106]: missing lifetime specifier\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n    |                                   ^^ expected named lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n+  --> $DIR/underscore-lifetime-binders.rs:16:12\n+   |\n+LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n+   |            ^^^^^^     ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo2<'lifetime>(_: &'_ u8, y: &'_ u8) -> &'lifetime u8 { y }"}]}