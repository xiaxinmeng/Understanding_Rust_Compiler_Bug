{"sha": "1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWQyNjI2NTNiYmQ4ZGZiYzQ0YTY5Y2M1MDM5ZDZlNGFlNmY0NmI=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-04-11T21:31:34Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-04-11T21:37:05Z"}, "message": "save-analysis: use `qpath_def` for associated types", "tree": {"sha": "28d9e7b7aa18f5b40f456f7e5a9e79fc9d2d03d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d9e7b7aa18f5b40f456f7e5a9e79fc9d2d03d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "html_url": "https://github.com/rust-lang/rust/commit/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "html_url": "https://github.com/rust-lang/rust/commit/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "9b21e42bf387086751c83a963e4febda7ad86124", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "patch": "@@ -23,7 +23,6 @@ use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n-use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_data_structures::sync::Lrc;\n \n@@ -658,23 +657,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 ..\n             }) => HirDef::Local(self.tcx.hir().hir_to_node_id(canonical_id)),\n \n-            Node::Ty(ty) => if let hir::Ty {\n-                node: hir::TyKind::Path(ref qpath),\n-                ..\n-            } = *ty\n-            {\n-                match *qpath {\n-                    hir::QPath::Resolved(_, ref path) => path.def,\n-                    hir::QPath::TypeRelative(..) => {\n-                        let ty = hir_ty_to_ty(self.tcx, ty);\n-                        if let ty::Projection(proj) = ty.sty {\n-                            return HirDef::AssociatedTy(proj.item_def_id);\n-                        }\n-                        HirDef::Err\n-                    }\n-                }\n-            } else {\n-                HirDef::Err\n+            Node::Ty(&hir::Ty { node: hir::TyKind::Path(ref qpath), .. } ) => {\n+                let hir_id = self.tcx.hir().node_to_hir_id(id);\n+                self.tables.qpath_def(qpath, hir_id)\n             },\n \n             _ => HirDef::Err,"}, {"sha": "710c84a6bc980f04b855cb5a84f221a6d4606868", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1ced262653bbd8dfbc44a69cc5039d6e4ae6f46b", "patch": "@@ -379,7 +379,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     }\n }\n \n-/// A quasi-deprecated helper used in rustdoc and save-analysis to get\n+/// A quasi-deprecated helper used in rustdoc and clippy to get\n /// the type from a HIR node.\n pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n     // In case there are any projections etc, find the \"environment\""}]}