{"sha": "b50662d68c886de44628e7ce55e331515df6c5e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MDY2MmQ2OGM4ODZkZTQ0NjI4ZTdjZTU1ZTMzMTUxNWRmNmM1ZTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-10T09:19:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-10T11:21:39Z"}, "message": "fix CI", "tree": {"sha": "5c80356d5e072dfef7f7f829deb10af749fbf0dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c80356d5e072dfef7f7f829deb10af749fbf0dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b50662d68c886de44628e7ce55e331515df6c5e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b50662d68c886de44628e7ce55e331515df6c5e0", "html_url": "https://github.com/rust-lang/rust/commit/b50662d68c886de44628e7ce55e331515df6c5e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b50662d68c886de44628e7ce55e331515df6c5e0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e6af49d946b123181a15f34a7c0dad24a48d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6af49d946b123181a15f34a7c0dad24a48d5e", "html_url": "https://github.com/rust-lang/rust/commit/b8e6af49d946b123181a15f34a7c0dad24a48d5e"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "1d49394e29b8ee4d188c5687bc446b4e4d7cf814", "filename": ".travis.yml", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b50662d68c886de44628e7ce55e331515df6c5e0/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b50662d68c886de44628e7ce55e331515df6c5e0/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b50662d68c886de44628e7ce55e331515df6c5e0", "patch": "@@ -9,13 +9,16 @@ cache:\n os:\n - linux\n - osx\n+dist: xenial\n \n before_script:\n+# install extra stuff for cross-compilation\n+- if [[ \"$TRAVIS_OS_NAME\" == linux ]]; then sudo apt update && sudo apt install gcc-multilib; fi\n # macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307, https://github.com/travis-ci/travis-ci/issues/10165)\n - if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then rvm get stable; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n-  if [ \"$TRAVIS_EVENT_TYPE\" = cron ]; then\n+  if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n     RUST_TOOLCHAIN=nightly\n   else\n     RUST_TOOLCHAIN=$(cat rust-version)\n@@ -24,7 +27,7 @@ before_script:\n   if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n     export MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n   else\n-    export MIRI_SYSROOT_BASE=~/.cache/miri/HOST\n+    export MIRI_SYSROOT_BASE=~/.cache/miri/\n   fi\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n@@ -38,10 +41,13 @@ script:\n   cargo build --release --all-features --all-targets &&\n   cargo install --all-features --force --path .\n - |\n-  # Get ourselves a MIR-full libstd\n+  # Get ourselves a MIR-full libstd for the host and a foreign architecture\n   cargo miri setup &&\n-  cargo miri setup --target i686-unknown-linux-gnu &&\n-  cargo miri setup --target i686-apple-darwin\n+  if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then\n+    cargo miri setup --target i686-apple-darwin\n+  else\n+    cargo miri setup --target i686-unknown-linux-gnu\n+  fi\n - |\n   # Test miri with full MIR, on the host and other architectures\n   MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&"}, {"sha": "4f4aebd8079150921c2c58a68ee6d4372c3ae89b", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50662d68c886de44628e7ce55e331515df6c5e0/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b50662d68c886de44628e7ce55e331515df6c5e0/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=b50662d68c886de44628e7ce55e331515df6c5e0", "patch": "@@ -27,13 +27,12 @@ build: false\n test_script:\n     - set RUSTFLAGS=-g\n     - set RUST_BACKTRACE=1\n-    # Test plain miri\n+    # Build miri\n     - cargo build --release --all-features --all-targets\n-    - cargo test --release --all-features\n     # Get ourselves a MIR-full libstd, and use it henceforth\n     - cargo run --release --all-features --bin cargo-miri -- miri setup\n     - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\miri\\miri\\cache\\HOST\n-    # Test miri with full MIR\n+    # Test miri\n     - cargo test --release --all-features\n \n notifications:"}, {"sha": "7e1785fd3b9380a19ebd844aa6b92cc9295084ab", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b50662d68c886de44628e7ce55e331515df6c5e0/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50662d68c886de44628e7ce55e331515df6c5e0/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=b50662d68c886de44628e7ce55e331515df6c5e0", "patch": "@@ -342,22 +342,21 @@ fn main() {\n                 .collect()\n         };\n         args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n \n         // this check ensures that dependencies are built but not interpreted and the final crate is\n         // interpreted but not built\n         let miri_enabled = std::env::args().any(|s| s == \"--emit=dep-info,metadata\");\n-\n         let mut command = if miri_enabled {\n             let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n             path.set_file_name(\"miri\");\n             Command::new(path)\n         } else {\n             Command::new(\"rustc\")\n         };\n+        command.args(&args);\n \n-        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n-\n-        match command.args(&args).status() {\n+        match command.status() {\n             Ok(exit) => {\n                 if !exit.success() {\n                     std::process::exit(exit.code().unwrap_or(42));\n@@ -388,7 +387,7 @@ where\n     args.push(r#\"feature=\"cargo-miri\"\"#.to_owned());\n \n     let path = std::env::current_exe().expect(\"current executable path invalid\");\n-    let exit_status = std::process::Command::new(\"cargo\")\n+    let exit_status = Command::new(\"cargo\")\n         .args(&args)\n         .env(\"RUSTC\", path)\n         .spawn()"}, {"sha": "701dc8ca92ca26a7e3b75a3785326dd90f56b815", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50662d68c886de44628e7ce55e331515df6c5e0/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50662d68c886de44628e7ce55e331515df6c5e0/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=b50662d68c886de44628e7ce55e331515df6c5e0", "patch": "@@ -113,6 +113,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             Some(name) => name.as_str(),\n             None => self.tcx.item_name(def_id).as_str(),\n         };\n+        // Strip linker suffixes (seen on 32bit macOS)\n+        let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n \n         let tcx = &{self.tcx.tcx};\n "}]}