{"sha": "334426b7a8768faa9559c2578f4ababa40f7f649", "node_id": "C_kwDOAAsO6NoAKDMzNDQyNmI3YTg3NjhmYWE5NTU5YzI1NzhmNGFiYWJhNDBmN2Y2NDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T03:57:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T03:57:53Z"}, "message": "Rollup merge of #106363 - estebank:mutability-mismatch-arg, r=Nilstrieb\n\nStructured suggestion for `&mut dyn Iterator` when possible\n\nFix #37914.", "tree": {"sha": "c0de7edf78c631ed5bf989d08adf2dc51e3ddaa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0de7edf78c631ed5bf989d08adf2dc51e3ddaa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334426b7a8768faa9559c2578f4ababa40f7f649", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJju5DBCRBK7hj4Ov3rIwAAx3AIABrGpke9cSLz5SaHNJC7yDxs\ndNzbS6xi9xSazVPctbwrIfu7K/JqvE9of0kWUTWBtDGOr90aU0f/ZN9grjkWBwa3\nynKyvQhdIEeJMAnso818hP52sFO0UPdfHfL6THplHUnFBugJUPGIc9P6XpZmPNy9\n5S+Expkdr1oFV07FlhaL88+MQQEp9Kb5mCekuDahU4WdDpM7kRGl38COl6b176Yz\noV3uR9Z+Q6IktwJiBwojbuKr8ES0uRxM8CWCqgZUh+Hezxr/brVMw7fMz6L0qmUJ\nvuRlhm+07boOH2xZYslWDixejVOBTe3Mxe9EzB0vOBQ7hNh7Dm7ZgYwvsVwMiWg=\n=6YFy\n-----END PGP SIGNATURE-----\n", "payload": "tree c0de7edf78c631ed5bf989d08adf2dc51e3ddaa2\nparent 6afd16171d73983bcb7f7d23f855fcedc29d675c\nparent b693365b846b13c1da6c5158cc7f4598a1aaa2e4\nauthor Michael Goulet <michael@errs.io> 1673236673 -0800\ncommitter GitHub <noreply@github.com> 1673236673 -0800\n\nRollup merge of #106363 - estebank:mutability-mismatch-arg, r=Nilstrieb\n\nStructured suggestion for `&mut dyn Iterator` when possible\n\nFix #37914.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334426b7a8768faa9559c2578f4ababa40f7f649", "html_url": "https://github.com/rust-lang/rust/commit/334426b7a8768faa9559c2578f4ababa40f7f649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334426b7a8768faa9559c2578f4ababa40f7f649/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afd16171d73983bcb7f7d23f855fcedc29d675c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afd16171d73983bcb7f7d23f855fcedc29d675c", "html_url": "https://github.com/rust-lang/rust/commit/6afd16171d73983bcb7f7d23f855fcedc29d675c"}, {"sha": "b693365b846b13c1da6c5158cc7f4598a1aaa2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b693365b846b13c1da6c5158cc7f4598a1aaa2e4", "html_url": "https://github.com/rust-lang/rust/commit/b693365b846b13c1da6c5158cc7f4598a1aaa2e4"}], "stats": {"total": 121, "additions": 91, "deletions": 30}, "files": [{"sha": "d276bcdb81e3e68e726397420be8d55b0b77d5c5", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -57,7 +57,12 @@ pub enum MethodError<'tcx> {\n     PrivateMatch(DefKind, DefId, Vec<DefId>),\n \n     // Found a `Self: Sized` bound where `Self` is a trait object.\n-    IllegalSizedBound(Vec<DefId>, bool, Span),\n+    IllegalSizedBound {\n+        candidates: Vec<DefId>,\n+        needs_mut: bool,\n+        bound_span: Span,\n+        self_expr: &'tcx hir::Expr<'tcx>,\n+    },\n \n     // Found a match, but the return type is wrong\n     BadReturnType,\n@@ -112,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(NoMatch(..)) => false,\n             Err(Ambiguity(..)) => true,\n             Err(PrivateMatch(..)) => allow_private,\n-            Err(IllegalSizedBound(..)) => true,\n+            Err(IllegalSizedBound { .. }) => true,\n             Err(BadReturnType) => bug!(\"no return type expectations but got BadReturnType\"),\n         }\n     }\n@@ -236,7 +241,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Vec::new(),\n                 };\n \n-            return Err(IllegalSizedBound(candidates, needs_mut, span));\n+            return Err(IllegalSizedBound { candidates, needs_mut, bound_span: span, self_expr });\n         }\n \n         Ok(result.callee)"}, {"sha": "536c4270659582b17f32581b0f7488f405cb2381", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -176,10 +176,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span) => {\n-                let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n+            MethodError::IllegalSizedBound { candidates, needs_mut, bound_span, self_expr } => {\n+                let msg = if needs_mut {\n+                    with_forced_trimmed_paths!(format!(\n+                        \"the `{item_name}` method cannot be invoked on `{rcvr_ty}`\"\n+                    ))\n+                } else {\n+                    format!(\"the `{item_name}` method cannot be invoked on a trait object\")\n+                };\n                 let mut err = self.sess().struct_span_err(span, &msg);\n-                err.span_label(bound_span, \"this has a `Sized` requirement\");\n+                if !needs_mut {\n+                    err.span_label(bound_span, \"this has a `Sized` requirement\");\n+                }\n                 if !candidates.is_empty() {\n                     let help = format!(\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\\n@@ -197,7 +205,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             *region,\n                             ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() },\n                         );\n-                        err.note(&format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty));\n+                        let msg = format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty);\n+                        let mut kind = &self_expr.kind;\n+                        while let hir::ExprKind::AddrOf(_, _, expr)\n+                        | hir::ExprKind::Unary(hir::UnOp::Deref, expr) = kind\n+                        {\n+                            kind = &expr.kind;\n+                        }\n+                        if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = kind\n+                            && let hir::def::Res::Local(hir_id) = path.res\n+                            && let Some(hir::Node::Pat(b)) = self.tcx.hir().find(hir_id)\n+                            && let Some(hir::Node::Param(p)) = self.tcx.hir().find_parent(b.hir_id)\n+                            && let Some(node) = self.tcx.hir().find_parent(p.hir_id)\n+                            && let Some(decl) = node.fn_decl()\n+                            && let Some(ty) = decl.inputs.iter().find(|ty| ty.span == p.ty_span)\n+                            && let hir::TyKind::Ref(_, mut_ty) = &ty.kind\n+                            && let hir::Mutability::Not = mut_ty.mutbl\n+                        {\n+                            err.span_suggestion_verbose(\n+                                mut_ty.ty.span.shrink_to_lo(),\n+                                &msg,\n+                                \"mut \",\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.help(&msg);\n+                        }\n                     }\n                 }\n                 err.emit();"}, {"sha": "74f3c887f0276b24301733fc5f0d262fd215de62", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "3b02c5a5ad15a5dc5b42e118f845624dedeac8e4", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "89613bd5c20282694d124777f322325542047c9a", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -0,0 +1,13 @@\n+error: the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n+  --> $DIR/mutability-mismatch-arg.rs:3:9\n+   |\n+LL |      *t.min().unwrap()\n+   |         ^^^\n+   |\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+   |\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n+\n+error: aborting due to previous error\n+"}, {"sha": "01bb3537c2ddc7449e1e2788bf995b39848cec07", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -4,7 +4,6 @@ pub trait MutTrait {\n     fn function(&mut self)\n     where\n         Self: Sized;\n-    //~^ this has a `Sized` requirement\n }\n \n impl MutTrait for MutType {\n@@ -17,7 +16,6 @@ pub trait Trait {\n     fn function(&self)\n     where\n         Self: Sized;\n-    //~^ this has a `Sized` requirement\n }\n \n impl Trait for Type {\n@@ -26,9 +24,9 @@ impl Trait for Type {\n \n fn main() {\n     (&MutType as &dyn MutTrait).function();\n-    //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+    //~^ ERROR the `function` method cannot be invoked on `&dyn MutTrait`\n+    //~| HELP you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n     (&mut Type as &mut dyn Trait).function();\n-    //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&dyn Trait` instead of `&mut dyn Trait`\n+    //~^ ERROR the `function` method cannot be invoked on `&mut dyn Trait`\n+    //~| HELP you need `&dyn Trait` instead of `&mut dyn Trait`\n }"}, {"sha": "2ca571d9b7926d7b4c65341d4d562e982a5ff617", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -1,24 +1,18 @@\n-error: the `function` method cannot be invoked on a trait object\n-  --> $DIR/mutability-mismatch.rs:28:33\n+error: the `function` method cannot be invoked on `&dyn MutTrait`\n+  --> $DIR/mutability-mismatch.rs:26:33\n    |\n-LL |         Self: Sized;\n-   |               ----- this has a `Sized` requirement\n-...\n LL |     (&MutType as &dyn MutTrait).function();\n    |                                 ^^^^^^^^\n    |\n-   = note: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+   = help: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n \n-error: the `function` method cannot be invoked on a trait object\n-  --> $DIR/mutability-mismatch.rs:31:35\n+error: the `function` method cannot be invoked on `&mut dyn Trait`\n+  --> $DIR/mutability-mismatch.rs:29:35\n    |\n-LL |         Self: Sized;\n-   |               ----- this has a `Sized` requirement\n-...\n LL |     (&mut Type as &mut dyn Trait).function();\n    |                                   ^^^^^^^^\n    |\n-   = note: you need `&dyn Trait` instead of `&mut dyn Trait`\n+   = help: you need `&dyn Trait` instead of `&mut dyn Trait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1c969b90e4dbf89fc087bbbcd992cc432105d34", "filename": "src/test/ui/suggestions/imm-ref-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -1,5 +1,5 @@\n fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n-     t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n+     t.min().unwrap() //~ ERROR the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n }\n \n fn main() {"}, {"sha": "f7f7902c17d16718812d4efda382f9f16b43605d", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334426b7a8768faa9559c2578f4ababa40f7f649/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=334426b7a8768faa9559c2578f4ababa40f7f649", "patch": "@@ -1,13 +1,13 @@\n-error: the `min` method cannot be invoked on a trait object\n+error: the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n   --> $DIR/imm-ref-trait-object.rs:2:8\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-   = note: this has a `Sized` requirement\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n    |\n-   = note: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n \n error: aborting due to previous error\n "}]}