{"sha": "651215e2837e5f667f412fb28d3c849fbfbd3852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MTIxNWUyODM3ZTVmNjY3ZjQxMmZiMjhkM2M4NDlmYmZiZDM4NTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-22T23:33:03Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Replace for_each with for", "tree": {"sha": "8a5ad057639b44d036d88911dab6b3bfcd20fddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a5ad057639b44d036d88911dab6b3bfcd20fddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/651215e2837e5f667f412fb28d3c849fbfbd3852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/651215e2837e5f667f412fb28d3c849fbfbd3852", "html_url": "https://github.com/rust-lang/rust/commit/651215e2837e5f667f412fb28d3c849fbfbd3852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/651215e2837e5f667f412fb28d3c849fbfbd3852/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11adc1300cbff4970f97f9f647ab51bb0db872df", "url": "https://api.github.com/repos/rust-lang/rust/commits/11adc1300cbff4970f97f9f647ab51bb0db872df", "html_url": "https://github.com/rust-lang/rust/commit/11adc1300cbff4970f97f9f647ab51bb0db872df"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "3acf30a94fb24913779aa37d5845f37d94c70f6a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=651215e2837e5f667f412fb28d3c849fbfbd3852", "patch": "@@ -1683,15 +1683,17 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n-        generics.params.iter().for_each(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => {}\n-            hir::GenericParamKind::Type { ref default, .. } => {\n-                let def_id = self.tcx.hir.local_def_id(param.id);\n-                let has_default = Untracked(default.is_some());\n-                let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n-                self.record(def_id, encode_info, (def_id, has_default));\n+        for param in &generics.params {\n+            match param.kind {\n+                hir::GenericParamKind::Lifetime { .. } => {}\n+                hir::GenericParamKind::Type { ref default, .. } => {\n+                    let def_id = self.tcx.hir.local_def_id(param.id);\n+                    let has_default = Untracked(default.is_some());\n+                    let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n+                    self.record(def_id, encode_info, (def_id, has_default));\n+                }\n             }\n-        });\n+        }\n     }\n \n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {"}, {"sha": "45c5dd2e5eb3562ae38191362062aef50dc05e6d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=651215e2837e5f667f412fb28d3c849fbfbd3852", "patch": "@@ -2340,28 +2340,30 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             HasTypeParameters(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap();\n-                generics.params.iter().for_each(|param| match param.kind {\n-                    GenericParamKind::Lifetime { .. } => {}\n-                    GenericParamKind::Type { .. } => {\n-                        let ident = param.ident.modern();\n-                        debug!(\"with_type_parameter_rib: {}\", param.id);\n-\n-                        if seen_bindings.contains_key(&ident) {\n-                            let span = seen_bindings.get(&ident).unwrap();\n-                            let err = ResolutionError::NameAlreadyUsedInTypeParameterList(\n-                                ident.name,\n-                                span,\n-                            );\n-                            resolve_error(self, param.ident.span, err);\n-                        }\n-                        seen_bindings.entry(ident).or_insert(param.ident.span);\n+                for param in &generics.params {\n+                    match param.kind {\n+                        GenericParamKind::Lifetime { .. } => {}\n+                        GenericParamKind::Type { .. } => {\n+                            let ident = param.ident.modern();\n+                            debug!(\"with_type_parameter_rib: {}\", param.id);\n+\n+                            if seen_bindings.contains_key(&ident) {\n+                                let span = seen_bindings.get(&ident).unwrap();\n+                                let err = ResolutionError::NameAlreadyUsedInTypeParameterList(\n+                                    ident.name,\n+                                    span,\n+                                );\n+                                resolve_error(self, param.ident.span, err);\n+                            }\n+                            seen_bindings.entry(ident).or_insert(param.ident.span);\n \n-                    // Plain insert (no renaming).\n-                    let def = Def::TyParam(self.definitions.local_def_id(param.id));\n-                        function_type_rib.bindings.insert(ident, def);\n-                        self.record_def(param.id, PathResolution::new(def));\n+                        // Plain insert (no renaming).\n+                        let def = Def::TyParam(self.definitions.local_def_id(param.id));\n+                            function_type_rib.bindings.insert(ident, def);\n+                            self.record_def(param.id, PathResolution::new(def));\n+                        }\n                     }\n-                });\n+                }\n                 self.ribs[TypeNS].push(function_type_rib);\n             }\n "}, {"sha": "090a39720d83713eaadf197180ccf4ab0dfc0d08", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651215e2837e5f667f412fb28d3c849fbfbd3852/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=651215e2837e5f667f412fb28d3c849fbfbd3852", "patch": "@@ -824,10 +824,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             if let Some(ref generic_args) = seg.args {\n                 match **generic_args {\n                     ast::GenericArgs::AngleBracketed(ref data) => {\n-                        data.args.iter().for_each(|arg| match arg {\n-                            ast::GenericArg::Type(ty) => self.visit_ty(ty),\n-                            _ => {}\n-                        });\n+                        for arg in &data.args {\n+                            match arg {\n+                                ast::GenericArg::Type(ty) => self.visit_ty(ty),\n+                                _ => {}\n+                            }\n+                        }\n                     }\n                     ast::GenericArgs::Parenthesized(ref data) => {\n                         for t in &data.inputs {\n@@ -911,10 +913,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // Explicit types in the turbo-fish.\n         if let Some(ref generic_args) = seg.args {\n             if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n-                data.args.iter().for_each(|arg| match arg {\n-                    ast::GenericArg::Type(ty) => self.visit_ty(ty),\n-                    _ => {}\n-                });\n+                for arg in &data.args {\n+                    match arg {\n+                        ast::GenericArg::Type(ty) => self.visit_ty(ty),\n+                        _ => {}\n+                    }\n+                }\n             }\n         }\n \n@@ -1522,19 +1526,21 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n     }\n \n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n-        generics.params.iter().for_each(|param| match param.kind {\n-            ast::GenericParamKind::Lifetime { .. } => {}\n-            ast::GenericParamKind::Type { ref default, .. } => {\n-                for bound in &param.bounds {\n-                    if let ast::GenericBound::Trait(ref trait_ref, _) = *bound {\n-                        self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n+        for param in &generics.params {\n+            match param.kind {\n+                ast::GenericParamKind::Lifetime { .. } => {}\n+                ast::GenericParamKind::Type { ref default, .. } => {\n+                    for bound in &param.bounds {\n+                        if let ast::GenericBound::Trait(ref trait_ref, _) = *bound {\n+                            self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n+                        }\n+                    }\n+                    if let Some(ref ty) = default {\n+                        self.visit_ty(&ty);\n                     }\n-                }\n-                if let Some(ref ty) = default {\n-                    self.visit_ty(&ty);\n                 }\n             }\n-        });\n+        }\n     }\n \n     fn visit_ty(&mut self, t: &'l ast::Ty) {"}]}