{"sha": "8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDhlNGYyNWFiYzk1ZDA2NDg3YzM0ZTBiMmI4NTc3OGFhNmE0YjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-11T20:19:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-11T20:19:58Z"}, "message": "Use Attrs::docs in NavigationTarget instead of DocCommentsOwner", "tree": {"sha": "641bd502632512a1dff24d0cbd99710425a815bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641bd502632512a1dff24d0cbd99710425a815bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "html_url": "https://github.com/rust-lang/rust/commit/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91bf15a2f53629209bd13d2e46121b9be8af1f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bf15a2f53629209bd13d2e46121b9be8af1f94", "html_url": "https://github.com/rust-lang/rust/commit/91bf15a2f53629209bd13d2e46121b9be8af1f94"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "c64b78445cc229824e2d7a7d8da3fd046a3f80ca", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "patch": "@@ -23,7 +23,7 @@ use crate::{\n };\n \n /// Holds documentation\n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Documentation(String);\n \n impl Documentation {"}, {"sha": "234f80a3a59b2f050356b48f24b90c7088b2288f", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8ed8e4f25abc95d06487c34e0b2b85778aa6a4b4", "patch": "@@ -1,11 +1,13 @@\n //! FIXME: write short doc here\n \n use either::Either;\n-use hir::{AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n+use hir::{\n+    AssocItem, Documentation, FieldSource, HasAttrs, HasSource, HirFileId, InFile, ModuleSource,\n+};\n use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n-    ast::{self, DocCommentsOwner, NameOwner},\n+    ast::{self, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, IDENT_PAT, TYPE_PARAM},\n     TextRange,\n@@ -43,7 +45,7 @@ pub struct NavigationTarget {\n     pub kind: SyntaxKind,\n     pub container_name: Option<SmolStr>,\n     pub description: Option<String>,\n-    pub docs: Option<String>,\n+    pub docs: Option<Documentation>,\n }\n \n pub(crate) trait ToNav {\n@@ -71,7 +73,7 @@ impl NavigationTarget {\n                 frange.range,\n                 src.value.syntax().kind(),\n             );\n-            res.docs = src.value.doc_comment_text();\n+            res.docs = module.attrs(db).docs();\n             res.description = src.value.short_label();\n             return res;\n         }\n@@ -214,14 +216,14 @@ impl ToNavFromAst for hir::Trait {}\n \n impl<D> ToNav for D\n where\n-    D: HasSource + ToNavFromAst + Copy,\n-    D::Ast: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+    D: HasSource + ToNavFromAst + Copy + HasAttrs,\n+    D::Ast: ast::NameOwner + ShortLabel,\n {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         let mut res =\n             NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n-        res.docs = src.value.doc_comment_text();\n+        res.docs = self.docs(db);\n         res.description = src.value.short_label();\n         res\n     }\n@@ -274,7 +276,7 @@ impl ToNav for hir::Field {\n         match &src.value {\n             FieldSource::Named(it) => {\n                 let mut res = NavigationTarget::from_named(db, src.with_value(it));\n-                res.docs = it.doc_comment_text();\n+                res.docs = self.docs(db);\n                 res.description = it.short_label();\n                 res\n             }\n@@ -298,7 +300,7 @@ impl ToNav for hir::MacroDef {\n         log::debug!(\"nav target {:#?}\", src.value.syntax());\n         let mut res =\n             NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n-        res.docs = src.value.doc_comment_text();\n+        res.docs = self.docs(db);\n         res\n     }\n }\n@@ -374,26 +376,28 @@ impl ToNav for hir::TypeParam {\n     }\n }\n \n-pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<Documentation> {\n     let parse = db.parse(symbol.file_id);\n     let node = symbol.ptr.to_node(parse.tree().syntax());\n+    let file_id = HirFileId::from(symbol.file_id);\n \n-    match_ast! {\n+    let it = match_ast! {\n         match node {\n-            ast::Fn(it) => it.doc_comment_text(),\n-            ast::Struct(it) => it.doc_comment_text(),\n-            ast::Enum(it) => it.doc_comment_text(),\n-            ast::Trait(it) => it.doc_comment_text(),\n-            ast::Module(it) => it.doc_comment_text(),\n-            ast::TypeAlias(it) => it.doc_comment_text(),\n-            ast::Const(it) => it.doc_comment_text(),\n-            ast::Static(it) => it.doc_comment_text(),\n-            ast::RecordField(it) => it.doc_comment_text(),\n-            ast::Variant(it) => it.doc_comment_text(),\n-            ast::MacroCall(it) => it.doc_comment_text(),\n-            _ => None,\n+            ast::Fn(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Struct(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Enum(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Trait(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Module(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::TypeAlias(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Const(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Static(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::RecordField(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::Variant(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            ast::MacroCall(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n+            _ => return None,\n         }\n-    }\n+    };\n+    it.docs()\n }\n \n /// Get a description of a symbol."}]}