{"sha": "959313aad0a7d2eb68bd15894b5e6f94580f4582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTMxM2FhZDBhN2QyZWI2OGJkMTU4OTRiNWU2Zjk0NTgwZjQ1ODI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T13:40:05Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-14T13:40:05Z"}, "message": "format: minor stylistic improvements", "tree": {"sha": "f25a6f737e55e0a45d56a8148dc8529f6678d177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25a6f737e55e0a45d56a8148dc8529f6678d177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959313aad0a7d2eb68bd15894b5e6f94580f4582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959313aad0a7d2eb68bd15894b5e6f94580f4582", "html_url": "https://github.com/rust-lang/rust/commit/959313aad0a7d2eb68bd15894b5e6f94580f4582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959313aad0a7d2eb68bd15894b5e6f94580f4582/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002310a496e92315b3544dbd1a40f8fff190881e", "url": "https://api.github.com/repos/rust-lang/rust/commits/002310a496e92315b3544dbd1a40f8fff190881e", "html_url": "https://github.com/rust-lang/rust/commit/002310a496e92315b3544dbd1a40f8fff190881e"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "41799eede9e86d9a7a4405752db3029c5dbaf727", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/959313aad0a7d2eb68bd15894b5e6f94580f4582/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959313aad0a7d2eb68bd15894b5e6f94580f4582/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=959313aad0a7d2eb68bd15894b5e6f94580f4582", "patch": "@@ -413,12 +413,10 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::CountIs(i) => count(\"Is\", Some(self.ecx.expr_usize(sp, i))),\n             parse::CountIsParam(i) => {\n                 // This needs mapping too, as `i` is referring to a macro\n-                // argument.\n-                let i = match self.count_positions.get(&i) {\n-                    Some(&i) => i,\n-                    None => 0, // error already emitted elsewhere\n-                };\n-                let i = i + self.count_args_index_offset;\n+                // argument. If `i` is not found in `count_positions` then\n+                // the error had already been emitted elsewhere.\n+                let i = self.count_positions.get(&i).cloned().unwrap_or(0)\n+                      + self.count_args_index_offset;\n                 count(\"Param\", Some(self.ecx.expr_usize(sp, i)))\n             }\n             parse::CountImplied => count(\"Implied\", None),\n@@ -503,10 +501,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     },\n                 };\n \n-                let fill = match arg.format.fill {\n-                    Some(c) => c,\n-                    None => ' ',\n-                };\n+                let fill = arg.format.fill.unwrap_or(' ');\n \n                 if *arg != simple_arg || fill != ' ' {\n                     self.all_pieces_simple = false;\n@@ -805,8 +800,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n         let sp = fmt.span.from_inner_byte_pos(err.start, err.end);\n-        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n-                                                        err.description));\n+        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\", err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {\n             e.note(&note);"}]}