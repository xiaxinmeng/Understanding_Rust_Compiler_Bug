{"sha": "1379b5fac7aa99d0408c4612bd73beb41a851303", "node_id": "C_kwDOAAsO6NoAKDEzNzliNWZhYzdhYTk5ZDA0MDhjNDYxMmJkNzNiZWI0MWE4NTEzMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T07:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T07:58:13Z"}, "message": "Auto merge of #14630 - Veykril:arc, r=Veykril\n\ninternal: `Arc<String>` -> `Arc<str>`", "tree": {"sha": "26848b38beea81c3a2f421d007a7daac9db5ce66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26848b38beea81c3a2f421d007a7daac9db5ce66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1379b5fac7aa99d0408c4612bd73beb41a851303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1379b5fac7aa99d0408c4612bd73beb41a851303", "html_url": "https://github.com/rust-lang/rust/commit/1379b5fac7aa99d0408c4612bd73beb41a851303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1379b5fac7aa99d0408c4612bd73beb41a851303/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c55b2e2777358bd9b42b0cfb6705c71a9abbfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c55b2e2777358bd9b42b0cfb6705c71a9abbfa", "html_url": "https://github.com/rust-lang/rust/commit/11c55b2e2777358bd9b42b0cfb6705c71a9abbfa"}, {"sha": "f2295cda42f6284d8385451864a97c5cba499fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2295cda42f6284d8385451864a97c5cba499fac", "html_url": "https://github.com/rust-lang/rust/commit/f2295cda42f6284d8385451864a97c5cba499fac"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "fe3792ef6c1edb127c56f694ff25d85e190be615", "filename": "crates/base-db/src/change.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Fchange.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -12,7 +12,7 @@ use crate::{CrateGraph, ProcMacros, SourceDatabaseExt, SourceRoot, SourceRootId}\n #[derive(Default)]\n pub struct Change {\n     pub roots: Option<Vec<SourceRoot>>,\n-    pub files_changed: Vec<(FileId, Option<Arc<String>>)>,\n+    pub files_changed: Vec<(FileId, Option<Arc<str>>)>,\n     pub crate_graph: Option<CrateGraph>,\n     pub proc_macros: Option<ProcMacros>,\n }\n@@ -42,7 +42,7 @@ impl Change {\n         self.roots = Some(roots);\n     }\n \n-    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<String>>) {\n+    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<str>>) {\n         self.files_changed.push((file_id, new_text))\n     }\n \n@@ -72,7 +72,7 @@ impl Change {\n             let source_root = db.source_root(source_root_id);\n             let durability = durability(&source_root);\n             // XXX: can't actually remove the file, just reset the text\n-            let text = text.unwrap_or_default();\n+            let text = text.unwrap_or_else(|| Arc::from(\"\"));\n             db.set_file_text_with_durability(file_id, text, durability)\n         }\n         if let Some(crate_graph) = self.crate_graph {"}, {"sha": "1936eabdd9f3b64ee34ea241c83e70997c0f8db8", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -190,7 +190,7 @@ impl ChangeFixture {\n                 default_target_data_layout = meta.target_data_layout;\n             }\n \n-            change.change_file(file_id, Some(Arc::new(text)));\n+            change.change_file(file_id, Some(Arc::from(text)));\n             let path = VfsPath::new_virtual_path(meta.path);\n             file_set.insert(file_id, path);\n             files.push(file_id);\n@@ -240,7 +240,7 @@ impl ChangeFixture {\n             fs.insert(core_file, VfsPath::new_virtual_path(\"/sysroot/core/lib.rs\".to_string()));\n             roots.push(SourceRoot::new_library(fs));\n \n-            change.change_file(core_file, Some(Arc::new(mini_core.source_code())));\n+            change.change_file(core_file, Some(Arc::from(mini_core.source_code())));\n \n             let all_crates = crate_graph.crates_in_topological_order();\n \n@@ -279,7 +279,7 @@ impl ChangeFixture {\n             );\n             roots.push(SourceRoot::new_library(fs));\n \n-            change.change_file(proc_lib_file, Some(Arc::new(source)));\n+            change.change_file(proc_lib_file, Some(Arc::from(source)));\n \n             let all_crates = crate_graph.crates_in_topological_order();\n "}, {"sha": "358ca1453d2e670efcc269d335493c8c4cc822ac", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -57,7 +57,7 @@ pub const DEFAULT_LRU_CAP: usize = 128;\n \n pub trait FileLoader {\n     /// Text of the file.\n-    fn file_text(&self, file_id: FileId) -> Arc<String>;\n+    fn file_text(&self, file_id: FileId) -> Arc<str>;\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }\n@@ -90,7 +90,7 @@ fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFil\n #[salsa::query_group(SourceDatabaseExtStorage)]\n pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n-    fn file_text(&self, file_id: FileId) -> Arc<String>;\n+    fn file_text(&self, file_id: FileId) -> Arc<str>;\n     /// Path to a file, relative to the root of its source root.\n     /// Source root of the file.\n     #[salsa::input]\n@@ -118,7 +118,7 @@ fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHas\n pub struct FileLoaderDelegate<T>(pub T);\n \n impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+    fn file_text(&self, file_id: FileId) -> Arc<str> {\n         SourceDatabaseExt::file_text(self.0, file_id)\n     }\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {"}, {"sha": "50751ab9c89ac6db8f7339fa761f6665ad1ae498", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -15,7 +15,7 @@ fn check_def_map_is_not_recomputed(ra_fixture_initial: &str, ra_fixture_change:\n         });\n         assert!(format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n-    db.set_file_text(pos.file_id, Arc::new(ra_fixture_change.to_string()));\n+    db.set_file_text(pos.file_id, Arc::from(ra_fixture_change));\n \n     {\n         let events = db.log_executed(|| {\n@@ -96,7 +96,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         });\n         assert!(format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n-    db.set_file_text(pos.file_id, Arc::new(\"m!(Y);\".to_string()));\n+    db.set_file_text(pos.file_id, Arc::from(\"m!(Y);\"));\n \n     {\n         let events = db.log_executed(|| {\n@@ -150,7 +150,7 @@ fn quux() { 92 }\n m!(Y);\n m!(Z);\n \"#;\n-    db.set_file_text(pos.file_id, Arc::new(new_text.to_string()));\n+    db.set_file_text(pos.file_id, Arc::from(new_text));\n \n     {\n         let events = db.log_executed(|| {"}, {"sha": "6bfcd90970dde91b88b9210f811f9a30f5ffa323", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -71,7 +71,7 @@ impl fmt::Debug for TestDB {\n impl panic::RefUnwindSafe for TestDB {}\n \n impl FileLoader for TestDB {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+    fn file_text(&self, file_id: FileId) -> Arc<str> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {"}, {"sha": "ca96a8d17246f3ca643041f304d755bbe2d94d72", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -76,7 +76,7 @@ impl salsa::ParallelDatabase for TestDB {\n impl panic::RefUnwindSafe for TestDB {}\n \n impl FileLoader for TestDB {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+    fn file_text(&self, file_id: FileId) -> Arc<str> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {"}, {"sha": "af482e5cc6d1442d68957bef2178fa78aaab1488", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -572,10 +572,9 @@ fn salsa_bug() {\n             let x = 1;\n             x.push(1);\n         }\n-    \"\n-    .to_string();\n+    \";\n \n-    db.set_file_text(pos.file_id, Arc::new(new_text));\n+    db.set_file_text(pos.file_id, Arc::from(new_text));\n \n     let module = db.module_for_file(pos.file_id);\n     let crate_def_map = module.def_map(&db);"}, {"sha": "788eb30e28cdeeb19f698c7441e31aed640d5a90", "filename": "crates/hir-ty/src/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -33,10 +33,9 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n             +\n             1\n         }\n-    \"\n-    .to_string();\n+    \";\n \n-    db.set_file_text(pos.file_id, Arc::new(new_text));\n+    db.set_file_text(pos.file_id, Arc::from(new_text));\n \n     {\n         let events = db.log_executed(|| {"}, {"sha": "b9f9cbd7fbadabf23453002af89cfe7f80dbe45a", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -113,7 +113,7 @@ impl Upcast<dyn HirDatabase> for RootDatabase {\n }\n \n impl FileLoader for RootDatabase {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+    fn file_text(&self, file_id: FileId) -> Arc<str> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {"}, {"sha": "2557c65a10628482535394e4545a9c6ef840ab34", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -438,11 +438,11 @@ impl<'a> FindUsages<'a> {\n         fn scope_files<'a>(\n             sema: &'a Semantics<'_, RootDatabase>,\n             scope: &'a SearchScope,\n-        ) -> impl Iterator<Item = (Arc<String>, FileId, TextRange)> + 'a {\n+        ) -> impl Iterator<Item = (Arc<str>, FileId, TextRange)> + 'a {\n             scope.entries.iter().map(|(&file_id, &search_range)| {\n                 let text = sema.db.file_text(file_id);\n                 let search_range =\n-                    search_range.unwrap_or_else(|| TextRange::up_to(TextSize::of(text.as_str())));\n+                    search_range.unwrap_or_else(|| TextRange::up_to(TextSize::of(&*text)));\n \n                 (text, file_id, search_range)\n             })\n@@ -553,7 +553,7 @@ impl<'a> FindUsages<'a> {\n \n                 let text = sema.db.file_text(file_id);\n                 let search_range =\n-                    search_range.unwrap_or_else(|| TextRange::up_to(TextSize::of(text.as_str())));\n+                    search_range.unwrap_or_else(|| TextRange::up_to(TextSize::of(&*text)));\n \n                 let tree = Lazy::new(|| sema.parse(file_id).syntax().clone());\n                 let finder = &Finder::new(\"self\");"}, {"sha": "a1945087d7558d8282fc29f1820a86e8843028da", "filename": "crates/ide-ssr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide-ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Flib.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -224,7 +224,7 @@ impl<'db> MatchFinder<'db> {\n         let file = self.sema.parse(file_id);\n         let mut res = Vec::new();\n         let file_text = self.sema.db.file_text(file_id);\n-        let mut remaining_text = file_text.as_str();\n+        let mut remaining_text = &*file_text;\n         let mut base = 0;\n         let len = snippet.len() as u32;\n         while let Some(offset) = remaining_text.find(snippet) {"}, {"sha": "d14cf83f0d773c0cf3118b0a78f4e97017b76dad", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -244,7 +244,7 @@ impl Analysis {\n             Err(\"Analysis::from_single_file has no target layout\".into()),\n             None,\n         );\n-        change.change_file(file_id, Some(Arc::new(text)));\n+        change.change_file(file_id, Some(Arc::from(text)));\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);\n         (host.analysis(), file_id)\n@@ -263,7 +263,7 @@ impl Analysis {\n     }\n \n     /// Gets the text of the source file.\n-    pub fn file_text(&self, file_id: FileId) -> Cancellable<Arc<String>> {\n+    pub fn file_text(&self, file_id: FileId) -> Cancellable<Arc<str>> {\n         self.with_db(|db| db.file_text(file_id))\n     }\n "}, {"sha": "0597302ca840284960ee4e53d1538c657008678a", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -164,8 +164,8 @@ impl fmt::Display for FilesStats {\n     }\n }\n \n-impl StatCollect<FileId, Arc<String>> for FilesStats {\n-    fn collect_entry(&mut self, _: FileId, value: Option<Arc<String>>) {\n+impl StatCollect<FileId, Arc<str>> for FilesStats {\n+    fn collect_entry(&mut self, _: FileId, value: Option<Arc<str>>) {\n         self.total += 1;\n         self.size += value.unwrap().len();\n     }"}, {"sha": "33c1b36f228a9d9bddce78e89860f5a722537202", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -162,9 +162,9 @@ fn load_crate_graph(\n     let changes = vfs.take_changes();\n     for file in changes {\n         if file.exists() {\n-            let contents = vfs.file_contents(file.file_id).to_vec();\n-            if let Ok(text) = String::from_utf8(contents) {\n-                analysis_change.change_file(file.file_id, Some(Arc::new(text)))\n+            let contents = vfs.file_contents(file.file_id);\n+            if let Ok(text) = std::str::from_utf8(contents) {\n+                analysis_change.change_file(file.file_id, Some(Arc::from(text)))\n             }\n         }\n     }"}, {"sha": "cd449bad1639d1d3c1182b600cf2a3cebcac58ed", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -269,7 +269,7 @@ impl GlobalState {\n                     String::from_utf8(bytes).ok().and_then(|text| {\n                         let (text, line_endings) = LineEndings::normalize(text);\n                         line_endings_map.insert(file.file_id, line_endings);\n-                        Some(Arc::new(text))\n+                        Some(Arc::from(text))\n                     })\n                 } else {\n                     None\n@@ -440,6 +440,10 @@ impl GlobalStateSnapshot {\n             ProjectWorkspace::DetachedFiles { .. } => None,\n         })\n     }\n+\n+    pub(crate) fn vfs_memory_usage(&self) -> usize {\n+        self.vfs.read().0.memory_usage()\n+    }\n }\n \n pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {"}, {"sha": "3c39f205e74c9a5b80d0c20994d3e2c9ebe04c0f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -103,6 +103,7 @@ pub(crate) fn handle_analyzer_status(\n                 .collect::<Vec<&AbsPath>>()\n         );\n     }\n+    format_to!(buf, \"\\nVfs memory usage: {}\\n\", snap.vfs_memory_usage());\n     buf.push_str(\"\\nAnalysis:\\n\");\n     buf.push_str(\n         &snap"}, {"sha": "6a69f70962b449637ac489390938c6a3e200bd2d", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -65,7 +65,7 @@ fn integrated_highlighting_benchmark() {\n         let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n         text.push_str(\"\\npub fn _dummy() {}\\n\");\n         let mut change = Change::new();\n-        change.change_file(file_id, Some(Arc::new(text)));\n+        change.change_file(file_id, Some(Arc::from(text)));\n         host.apply_change(change);\n     }\n \n@@ -121,7 +121,7 @@ fn integrated_completion_benchmark() {\n             patch(&mut text, \"db.struct_data(self.id)\", \"sel;\\ndb.struct_data(self.id)\")\n                 + \"sel\".len();\n         let mut change = Change::new();\n-        change.change_file(file_id, Some(Arc::new(text)));\n+        change.change_file(file_id, Some(Arc::from(text)));\n         host.apply_change(change);\n         completion_offset\n     };\n@@ -160,7 +160,7 @@ fn integrated_completion_benchmark() {\n             patch(&mut text, \"sel;\\ndb.struct_data(self.id)\", \"self.;\\ndb.struct_data(self.id)\")\n                 + \"self.\".len();\n         let mut change = Change::new();\n-        change.change_file(file_id, Some(Arc::new(text)));\n+        change.change_file(file_id, Some(Arc::from(text)));\n         host.apply_change(change);\n         completion_offset\n     };"}, {"sha": "b510b9e394274bb16d2796a46962074fe8f0932c", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1379b5fac7aa99d0408c4612bd73beb41a851303/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=1379b5fac7aa99d0408c4612bd73beb41a851303", "patch": "@@ -139,6 +139,11 @@ impl Vfs {\n         self.get(file_id).as_deref().unwrap()\n     }\n \n+    /// Returns the overall memory usage for the stored files.\n+    pub fn memory_usage(&self) -> usize {\n+        self.data.iter().flatten().map(|d| d.capacity()).sum()\n+    }\n+\n     /// Returns an iterator over the stored ids and their corresponding paths.\n     ///\n     /// This will skip deleted files.\n@@ -158,7 +163,7 @@ impl Vfs {\n     ///\n     /// If the path does not currently exists in the `Vfs`, allocates a new\n     /// [`FileId`] for it.\n-    pub fn set_file_contents(&mut self, path: VfsPath, contents: Option<Vec<u8>>) -> bool {\n+    pub fn set_file_contents(&mut self, path: VfsPath, mut contents: Option<Vec<u8>>) -> bool {\n         let file_id = self.alloc_file_id(path);\n         let change_kind = match (self.get(file_id), &contents) {\n             (None, None) => return false,\n@@ -167,7 +172,9 @@ impl Vfs {\n             (Some(_), None) => ChangeKind::Delete,\n             (Some(_), Some(_)) => ChangeKind::Modify,\n         };\n-\n+        if let Some(contents) = &mut contents {\n+            contents.shrink_to_fit();\n+        }\n         *self.get_mut(file_id) = contents;\n         self.changes.push(ChangedFile { file_id, change_kind });\n         true"}]}