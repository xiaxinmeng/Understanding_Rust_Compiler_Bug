{"sha": "8d1083e319841624f64400e1524805a40d725439", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTA4M2UzMTk4NDE2MjRmNjQ0MDBlMTUyNDgwNWE0MGQ3MjU0Mzk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-04-29T19:11:46Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-04-29T19:13:21Z"}, "message": "Change to probe-stack=call (instead of inline-or-call) everywhere again, for now.\n\nWe had already reverted the change on stable back in PR #83412.\n\nSince then, we've had some movement on issue #83139, but not a 100% fix.\n\nBut also since then, we had bug reported, issue #84667, that looks like outright\ncodegen breakage, rather than problems confined to debuginfo issues.\n\nSo we are reverting PR #77885 on stable and beta. We'll reland PR #77885 (or some\nvariant) switching back to an LLVM-dependent selection of out-of-line call vs\ninline-asm, after these other issues have been resolved.", "tree": {"sha": "79fb7608f2fca011ddc5aaf13f8be69114ddadc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fb7608f2fca011ddc5aaf13f8be69114ddadc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1083e319841624f64400e1524805a40d725439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1083e319841624f64400e1524805a40d725439", "html_url": "https://github.com/rust-lang/rust/commit/8d1083e319841624f64400e1524805a40d725439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1083e319841624f64400e1524805a40d725439/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814a560072c305d274affc78219e4a7e0558252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814a560072c305d274affc78219e4a7e0558252f", "html_url": "https://github.com/rust-lang/rust/commit/814a560072c305d274affc78219e4a7e0558252f"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "f5d7be4537be097a98d6a49b20ec597edfdea359", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> Target {\n         arch: \"x86\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n             ..base\n         },\n     }"}, {"sha": "06d71db4af2410264730ccfae91177b2ac4f4b13", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -6,7 +6,8 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.eliminate_frame_pointer = false;\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "19d7b3c95cf6d3d53e9bd24b697fdbf85275ad50", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> Target {\n     // http://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".to_string();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-linux-android\".to_string(),"}, {"sha": "d8e37e72371543281372af5369e06ab93bb019ca", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -7,7 +7,8 @@ pub fn target() -> Target {\n     let pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n     pre_link_args.push(\"-m32\".to_string());\n     pre_link_args.push(\"-Wl,-znotext\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),"}, {"sha": "e4c01db543980035011ca832f268a06823246706", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),"}, {"sha": "165505ee73139eb2c545c874fb6422108ee39c21", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),"}, {"sha": "228976779f0d438e03d6e203a4af82c199b30425", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -6,7 +6,8 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-Wl,-melf_i386\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind\n     // implementation, apparently relies on frame pointers existing... somehow."}, {"sha": "989e3fb1adf049e9f2be73716a9e422c54a78968", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),"}, {"sha": "7ff79961375cf053071888cddb0b969645bf6059", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -6,7 +6,8 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-fuse-ld=lld\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),"}, {"sha": "c7963dbde777db542b3fd4718cbaf8281f780180", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),"}, {"sha": "64f47b4aa9bbde7f7d701358bdc298dda0fcc30f", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn opts() -> TargetOptions {\n         env: \"gnu\".to_string(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n-        stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+        // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+        stack_probes: StackProbeType::Call,\n         eliminate_frame_pointer: false,\n         linker_is_gnu: true,\n         position_independent_executables: true,"}, {"sha": "dc7597fe7b2a15905b20421551c00a998b0344af", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -10,7 +10,8 @@ pub fn target() -> Target {\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "adb877185897bcbf540caa5f1ecc0caac9cedad2", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> Target {\n         arch: \"x86_64\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n             ..base\n         },\n     }"}, {"sha": "c228e42ef300408a662c0bd34aec209e4f57ca8a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> Target {\n         arch: \"x86_64\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n             ..base\n         },\n     }"}, {"sha": "e3a5de4cbd1a403cfb900092cf00d969d3346720", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -10,7 +10,8 @@ pub fn target() -> Target {\n         arch: \"x86_64\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n             ..base\n         },\n     }"}, {"sha": "aa65ebe1f9dbd77615e0f381b5ef7eb098b6438c", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -4,7 +4,8 @@ pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS;\n \n     Target {"}, {"sha": "9065283b731ee79c3132225de8c1a80f517fc666", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -7,7 +7,8 @@ pub fn target() -> Target {\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".to_string(),"}, {"sha": "b78e43d4fe9b6f842db4d179d5437936bfde8c8b", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -6,7 +6,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.vendor = \"pc\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),"}, {"sha": "2fa53470f74f2af8ddef69fd88998b4c8e542df8", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -6,7 +6,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.vendor = \"sun\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),"}, {"sha": "d69830f0a3f4fa5e2ca88cc40422ed86743b9487", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),"}, {"sha": "b5fc15f5e04bf200038118a5f9ae0d5db909c0fc", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {"}, {"sha": "fcd96ddd61b33cb0016efa69bf397127cc691aa9", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;\n "}, {"sha": "1ef24b6eb365eaca18ed01736c71544e5459db31", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+rdrnd,+rdseed\".to_string();\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),"}, {"sha": "085079e06e570a0e3f7aea0aa4f119c8eb4f8638", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n "}, {"sha": "7b77ad668cd2ff4ec042d4e8e43839ed0f67ff65", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.has_elf_tls = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743"}, {"sha": "5ad243aa4075e2c3616e24a053e213cf22a3c96e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.static_position_independent_executables = true;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;"}, {"sha": "0269c7afe55e9a73131058910e9bf8a0b26bf4be", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),"}, {"sha": "28d9801b78cb581cf835339b45c39171c6666234", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_hermitkernel.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_hermitkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_hermitkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_hermitkernel.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -7,7 +7,8 @@ pub fn target() -> Target {\n     base.features =\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n             .to_string();\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-none-elf\".to_string(),"}, {"sha": "4eb3f34a036142e1368637235f09e443b7d92b2f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),"}, {"sha": "b8269ecae20bbaefee34ba49c073e47512621e25", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n \n     Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),"}, {"sha": "f9f775084fb417845d454989132a8a350ebf8005", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1083e319841624f64400e1524805a40d725439/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=8d1083e319841624f64400e1524805a40d725439", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n-    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+    base.stack_probes = StackProbeType::Call;\n     base.disable_redzone = true;\n \n     Target {"}]}