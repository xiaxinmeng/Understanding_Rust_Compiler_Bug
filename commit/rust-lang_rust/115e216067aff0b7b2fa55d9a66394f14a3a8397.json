{"sha": "115e216067aff0b7b2fa55d9a66394f14a3a8397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNWUyMTYwNjdhZmYwYjdiMmZhNTVkOWE2NjM5NGYxNGEzYTgzOTc=", "commit": {"author": {"name": "Rustin-Liu", "email": "rustin.liu@gmail.com", "date": "2020-04-24T14:05:32Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-04-05T14:57:14Z"}, "message": "Rename AssociatedItems to AssocItems\n\nSigned-off-by: Rustin-Liu <rustin.liu@gmail.com>", "tree": {"sha": "a8f76545b1f08022a8617f83de489807a2981b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f76545b1f08022a8617f83de489807a2981b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/115e216067aff0b7b2fa55d9a66394f14a3a8397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/115e216067aff0b7b2fa55d9a66394f14a3a8397", "html_url": "https://github.com/rust-lang/rust/commit/115e216067aff0b7b2fa55d9a66394f14a3a8397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/115e216067aff0b7b2fa55d9a66394f14a3a8397/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39eee173fbcc21462d255b364b87715cd33b62db", "url": "https://api.github.com/repos/rust-lang/rust/commits/39eee173fbcc21462d255b364b87715cd33b62db", "html_url": "https://github.com/rust-lang/rust/commit/39eee173fbcc21462d255b364b87715cd33b62db"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "bc7f5af826efad79dc780638b2bf2f4e2ab01724", "filename": "test.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/115e216067aff0b7b2fa55d9a66394f14a3a8397/test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115e216067aff0b7b2fa55d9a66394f14a3a8397/test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.rs?ref=115e216067aff0b7b2fa55d9a66394f14a3a8397", "patch": "@@ -0,0 +1,125 @@\n+#![allow(missing_docs)]\n+\n+use embedded_hal::digital::v2::{InputPin, OutputPin};\n+use generic_array::{ArrayLength, GenericArray};\n+use heapless::Vec;\n+\n+pub trait HeterogenousArray {\n+    type Len;\n+}\n+\n+/// Macro to implement a iterator on trait objects from a tuple struct.\n+#[macro_export]\n+macro_rules! impl_heterogenous_array {\n+    ($s:ident, $t:ty, $len:tt, [$($idx:tt),+]) => {\n+        impl<'a> IntoIterator for &'a $s {\n+            type Item = &'a $t;\n+            type IntoIter = generic_array::GenericArrayIter<&'a $t, $len>;\n+            fn into_iter(self) -> Self::IntoIter {\n+                self.as_array().into_iter()\n+            }\n+        }\n+        impl<'a> IntoIterator for &'a mut $s {\n+            type Item = &'a mut $t;\n+            type IntoIter = generic_array::GenericArrayIter<&'a mut $t, $len>;\n+            fn into_iter(self) -> Self::IntoIter {\n+                self.as_mut_array().into_iter()\n+            }\n+        }\n+        impl $crate::matrix::HeterogenousArray for $s {\n+            type Len = $len;\n+        }\n+        impl $s {\n+            pub fn as_array(&self) -> generic_array::GenericArray<&$t, $len> {\n+                generic_array::arr![&$t; $( &self.$idx as &$t, )+]\n+            }\n+            pub fn as_mut_array(&mut self) -> generic_array::GenericArray<&mut $t, $len> {\n+                generic_array::arr![&mut $t; $( &mut self.$idx as &mut $t, )+]\n+            }\n+        }\n+    }\n+}\n+\n+pub struct Matrix<C, R> {\n+    cols: C,\n+    rows: R,\n+}\n+\n+impl<C, R> Matrix<C, R> {\n+    pub fn new<E>(cols: C, rows: R) -> Result<Self, E>\n+        where\n+                for<'a> &'a mut R: IntoIterator<Item = &'a mut dyn OutputPin<Error = E>>,\n+    {\n+        let mut res = Self { cols, rows };\n+        res.clear()?;\n+        Ok(res)\n+    }\n+    pub fn clear<'a, E: 'a>(&'a mut self) -> Result<(), E>\n+        where\n+            &'a mut R: IntoIterator<Item = &'a mut dyn OutputPin<Error = E>>,\n+    {\n+        for r in self.rows.into_iter() {\n+            r.set_high()?;\n+        }\n+        Ok(())\n+    }\n+    pub fn get<'a, E: 'a>(&'a mut self) -> Result<PressedKeys<R::Len, C::Len>, E>\n+        where\n+            &'a mut R: IntoIterator<Item = &'a mut dyn OutputPin<Error = E>>,\n+            R: HeterogenousArray,\n+            R::Len: ArrayLength<GenericArray<bool, C::Len>>,\n+            &'a C: IntoIterator<Item = &'a dyn InputPin<Error = E>>,\n+            C: HeterogenousArray,\n+            C::Len: ArrayLength<bool>,\n+    {\n+        let cols = &self.cols;\n+        self.rows\n+            .into_iter()\n+            .map(|r| {\n+                r.set_low()?;\n+                let col = cols\n+                    .into_iter()\n+                    .map(|c| c.is_low())\n+                    .collect::<Result<Vec<_, C::Len>, E>>()?\n+                    .into_iter()\n+                    .collect();\n+                r.set_high()?;\n+                Ok(col)\n+            })\n+            .collect::<Result<Vec<_, R::Len>, E>>()\n+            .map(|res| PressedKeys(res.into_iter().collect()))\n+    }\n+}\n+\n+#[derive(Default, PartialEq, Eq)]\n+pub struct PressedKeys<U, V>(pub GenericArray<GenericArray<bool, V>, U>)\n+    where\n+        V: ArrayLength<bool>,\n+        U: ArrayLength<GenericArray<bool, V>>;\n+\n+impl<U, V> PressedKeys<U, V>\n+    where\n+        V: ArrayLength<bool>,\n+        U: ArrayLength<GenericArray<bool, V>>,\n+{\n+    pub fn iter_pressed<'a>(&'a self) -> impl Iterator<Item = (usize, usize)> + Clone + 'a {\n+        self.0.iter().enumerate().flat_map(|(i, r)| {\n+            r.iter()\n+                .enumerate()\n+                .filter_map(move |(j, &b)| if b { Some((i, j)) } else { None })\n+        })\n+    }\n+}\n+\n+impl<'a, U, V> IntoIterator for &'a PressedKeys<U, V>\n+    where\n+        V: ArrayLength<bool>,\n+        U: ArrayLength<GenericArray<bool, V>>,\n+        U: ArrayLength<&'a GenericArray<bool, V>>,\n+{\n+    type IntoIter = core::slice::Iter<'a, GenericArray<bool, V>>;\n+    type Item = &'a GenericArray<bool, V>;\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.0.iter()\n+    }\n+}\n\\ No newline at end of file"}]}