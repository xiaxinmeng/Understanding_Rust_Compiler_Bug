{"sha": "da32752d92589e99feab80921b9eecb6090cf310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzI3NTJkOTI1ODllOTlmZWFiODA5MjFiOWVlY2I2MDkwY2YzMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T00:45:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T00:45:49Z"}, "message": "Auto merge of #41237 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #40377, #40559, #41173, #41202, #41204, #41209, #41216, #41231\n- Failed merges:", "tree": {"sha": "9832f02c18cd5bb0ad0b33607ea46912e4974b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9832f02c18cd5bb0ad0b33607ea46912e4974b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da32752d92589e99feab80921b9eecb6090cf310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da32752d92589e99feab80921b9eecb6090cf310", "html_url": "https://github.com/rust-lang/rust/commit/da32752d92589e99feab80921b9eecb6090cf310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da32752d92589e99feab80921b9eecb6090cf310/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8107c0d7ce4f39364fc96d0eeb6a23673491f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8107c0d7ce4f39364fc96d0eeb6a23673491f81", "html_url": "https://github.com/rust-lang/rust/commit/f8107c0d7ce4f39364fc96d0eeb6a23673491f81"}, {"sha": "72538dee4dbfe28882ae5ff37d4ae0cdafe758d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72538dee4dbfe28882ae5ff37d4ae0cdafe758d5", "html_url": "https://github.com/rust-lang/rust/commit/72538dee4dbfe28882ae5ff37d4ae0cdafe758d5"}], "stats": {"total": 530, "additions": 399, "deletions": 131}, "files": [{"sha": "726e94e49a19ecf279e980438603df346dde52ab", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -147,7 +147,7 @@ pub fn llvm(build: &Build, target: &str) {\n     }\n \n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n-        cfg.env(\"RUST_LOG\", \"sccache=debug\");\n+        cfg.env(\"RUST_LOG\", \"sccache=info\");\n     }\n \n     // FIXME: we don't actually need to build all LLVM tools and all LLVM"}, {"sha": "59b93b784b2f6f27db319fc06d23c2fa93a4600c", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -38,7 +38,6 @@ if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n     args=\"$args --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\"\n     args=\"$args --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\"\n     args=\"$args --env SCCACHE_ERROR_LOG=/tmp/sccache/sccache.log\"\n-    args=\"$args --env SCCACHE_LOG_LEVEL=debug\"\n     args=\"$args --volume $objdir/tmp:/tmp/sccache\"\n else\n     mkdir -p $HOME/.cache/sccache"}, {"sha": "54e602a81db7389e93e2eb682e8c2371ce423223", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -114,6 +114,7 @@\n - [loop_break_value](loop-break-value.md)\n - [macro_reexport](macro-reexport.md)\n - [main](main.md)\n+- [manually_drop](manually-drop.md)\n - [map_entry_recover_keys](map-entry-recover-keys.md)\n - [mpsc_select](mpsc-select.md)\n - [n16](n16.md)"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/doc/unstable-book/src/manually-drop.md", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Fdoc%2Funstable-book%2Fsrc%2Fmanually-drop.md", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Fdoc%2Funstable-book%2Fsrc%2Fmanually-drop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmanually-drop.md?ref=da32752d92589e99feab80921b9eecb6090cf310"}, {"sha": "99afd08e81183eb451df419c93a633b43456bb9c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -44,6 +44,7 @@\n #![feature(heap_api)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]\n+#![feature(manually_drop)]\n #![feature(nonzero)]\n #![feature(pattern)]\n #![feature(placement_in)]"}, {"sha": "3069adb12e92cd127c5bd29d03d266da23d49df4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1558,7 +1558,7 @@ fn insert_head<T, F>(v: &mut [T], is_less: &mut F)\n             //    performance than with the 2nd method.\n             //\n             // All methods were benchmarked, and the 3rd showed best results. So we chose that one.\n-            let mut tmp = NoDrop { value: ptr::read(&v[0]) };\n+            let mut tmp = mem::ManuallyDrop::new(ptr::read(&v[0]));\n \n             // Intermediate state of the insertion process is always tracked by `hole`, which\n             // serves two purposes:\n@@ -1571,13 +1571,13 @@ fn insert_head<T, F>(v: &mut [T], is_less: &mut F)\n             // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n             // initially held exactly once.\n             let mut hole = InsertionHole {\n-                src: &mut tmp.value,\n+                src: &mut *tmp,\n                 dest: &mut v[1],\n             };\n             ptr::copy_nonoverlapping(&v[1], &mut v[0], 1);\n \n             for i in 2..v.len() {\n-                if !is_less(&v[i], &tmp.value) {\n+                if !is_less(&v[i], &*tmp) {\n                     break;\n                 }\n                 ptr::copy_nonoverlapping(&v[i], &mut v[i - 1], 1);\n@@ -1587,12 +1587,6 @@ fn insert_head<T, F>(v: &mut [T], is_less: &mut F)\n         }\n     }\n \n-    // Holds a value, but never drops it.\n-    #[allow(unions_with_drop_fields)]\n-    union NoDrop<T> {\n-        value: T\n-    }\n-\n     // When dropped, copies from `src` into `dest`.\n     struct InsertionHole<T> {\n         src: *mut T,"}, {"sha": "b0287631585125a9febd3fb903e5d51e2358ae8e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -691,9 +691,6 @@ extern \"rust-intrinsic\" {\n     /// initialize memory previous set to the result of `uninit`.\n     pub fn uninit<T>() -> T;\n \n-    /// Moves a value out of scope without running drop glue.\n-    pub fn forget<T>(_: T) -> ();\n-\n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n     /// Both types must have the same size. Neither the original, nor the result,"}, {"sha": "8bf641e37fe467c2120defd6b1a90afc79b0674c", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1532,14 +1532,18 @@ pub trait Iterator {\n     /// Stopping at the first `true`:\n     ///\n     /// ```\n-    /// let a = [1, 2, 3];\n+    /// let a = [1, 2, 3, 4];\n     ///\n     /// let mut iter = a.iter();\n     ///\n-    /// assert_eq!(iter.position(|&x| x == 2), Some(1));\n+    /// assert_eq!(iter.position(|&x| x >= 2), Some(1));\n     ///\n     /// // we can still use `iter`, as there are more elements.\n     /// assert_eq!(iter.next(), Some(&3));\n+    ///\n+    /// // The returned index depends on iterator state\n+    /// assert_eq!(iter.position(|&x| x == 4), Some(0));\n+    ///\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7be927b28ed7eb7ecfef5fcc8da2ab1d0cdc9410", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -171,7 +171,7 @@ pub use intrinsics::transmute;\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n-    unsafe { intrinsics::forget(t) }\n+    ManuallyDrop::new(t);\n }\n \n /// Returns the size of a type in bytes.\n@@ -736,3 +736,121 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n     }\n }\n \n+\n+/// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n+///\n+/// This wrapper is 0-cost.\n+///\n+/// # Examples\n+///\n+/// This wrapper helps with explicitly documenting the drop order dependencies between fields of\n+/// the type:\n+///\n+/// ```rust\n+/// # #![feature(manually_drop)]\n+/// use std::mem::ManuallyDrop;\n+/// struct Peach;\n+/// struct Banana;\n+/// struct Melon;\n+/// struct FruitBox {\n+///     // Immediately clear there\u2019s something non-trivial going on with these fields.\n+///     peach: ManuallyDrop<Peach>,\n+///     melon: Melon, // Field that\u2019s independent of the other two.\n+///     banana: ManuallyDrop<Banana>,\n+/// }\n+///\n+/// impl Drop for FruitBox {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // Explicit ordering in which field destructors are run specified in the intuitive\n+///             // location \u2013 the destructor of the structure containing the fields.\n+///             // Moreover, one can now reorder fields within the struct however much they want.\n+///             ManuallyDrop::drop(&mut self.peach);\n+///             ManuallyDrop::drop(&mut self.banana);\n+///         }\n+///         // After destructor for `FruitBox` runs (this function), the destructor for Melon gets\n+///         // invoked in the usual manner, as it is not wrapped in `ManuallyDrop`.\n+///     }\n+/// }\n+/// ```\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[allow(unions_with_drop_fields)]\n+pub union ManuallyDrop<T>{ value: T }\n+\n+impl<T> ManuallyDrop<T> {\n+    /// Wrap a value to be manually dropped.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(manually_drop)]\n+    /// use std::mem::ManuallyDrop;\n+    /// ManuallyDrop::new(Box::new(()));\n+    /// ```\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n+    pub fn new(value: T) -> ManuallyDrop<T> {\n+        ManuallyDrop { value: value }\n+    }\n+\n+    /// Extract the value from the ManuallyDrop container.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(manually_drop)]\n+    /// use std::mem::ManuallyDrop;\n+    /// let x = ManuallyDrop::new(Box::new(()));\n+    /// let _: Box<()> = ManuallyDrop::into_inner(x);\n+    /// ```\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n+    pub fn into_inner(slot: ManuallyDrop<T>) -> T {\n+        unsafe {\n+            slot.value\n+        }\n+    }\n+\n+    /// Manually drops the contained value.\n+    ///\n+    /// # Unsafety\n+    ///\n+    /// This function runs the destructor of the contained value and thus the wrapped value\n+    /// now represents uninitialized data. It is up to the user of this method to ensure the\n+    /// uninitialized data is not actually used.\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n+    pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {\n+        ptr::drop_in_place(&mut slot.value)\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T> ::ops::Deref for ManuallyDrop<T> {\n+    type Target = T;\n+    #[inline]\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            &self.value\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        unsafe {\n+            &mut self.value\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n+    fn fmt(&self, fmt: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        unsafe {\n+            fmt.debug_tuple(\"ManuallyDrop\").field(&self.value).finish()\n+        }\n+    }\n+}"}, {"sha": "6f9f2915dfe102c1fe6022d660816e69279152ed", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -20,12 +20,6 @@ use cmp;\n use mem;\n use ptr;\n \n-/// Holds a value, but never drops it.\n-#[allow(unions_with_drop_fields)]\n-union NoDrop<T> {\n-    value: T\n-}\n-\n /// When dropped, copies from `src` into `dest`.\n struct CopyOnDrop<T> {\n     src: *mut T,\n@@ -49,15 +43,15 @@ fn shift_head<T, F>(v: &mut [T], is_less: &mut F)\n             // Read the first element into a stack-allocated variable. If a following comparison\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n-            let mut tmp = NoDrop { value: ptr::read(v.get_unchecked(0)) };\n+            let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));\n             let mut hole = CopyOnDrop {\n-                src: &mut tmp.value,\n+                src: &mut *tmp,\n                 dest: v.get_unchecked_mut(1),\n             };\n             ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);\n \n             for i in 2..len {\n-                if !is_less(v.get_unchecked(i), &tmp.value) {\n+                if !is_less(v.get_unchecked(i), &*tmp) {\n                     break;\n                 }\n \n@@ -81,15 +75,15 @@ fn shift_tail<T, F>(v: &mut [T], is_less: &mut F)\n             // Read the last element into a stack-allocated variable. If a following comparison\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n-            let mut tmp = NoDrop { value: ptr::read(v.get_unchecked(len - 1)) };\n+            let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));\n             let mut hole = CopyOnDrop {\n-                src: &mut tmp.value,\n+                src: &mut *tmp,\n                 dest: v.get_unchecked_mut(len - 2),\n             };\n             ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);\n \n             for i in (0..len-2).rev() {\n-                if !is_less(&tmp.value, v.get_unchecked(i)) {\n+                if !is_less(&*tmp, v.get_unchecked(i)) {\n                     break;\n                 }\n \n@@ -403,12 +397,12 @@ fn partition<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> (usize, bool)\n \n         // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n         // operation panics, the pivot will be automatically written back into the slice.\n-        let mut tmp = NoDrop { value: unsafe { ptr::read(pivot) } };\n+        let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n         let _pivot_guard = CopyOnDrop {\n-            src: unsafe { &mut tmp.value },\n+            src: &mut *tmp,\n             dest: pivot,\n         };\n-        let pivot = unsafe { &tmp.value };\n+        let pivot = &*tmp;\n \n         // Find the first pair of out-of-order elements.\n         let mut l = 0;\n@@ -452,12 +446,12 @@ fn partition_equal<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> usize\n \n     // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n     // operation panics, the pivot will be automatically written back into the slice.\n-    let mut tmp = NoDrop { value: unsafe { ptr::read(pivot) } };\n+    let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n     let _pivot_guard = CopyOnDrop {\n-        src: unsafe { &mut tmp.value },\n+        src: &mut *tmp,\n         dest: pivot,\n     };\n-    let pivot = unsafe { &tmp.value };\n+    let pivot = &*tmp;\n \n     // Now partition the slice.\n     let mut l = 0;"}, {"sha": "b9a974045bced110527e953ebffe296dccceb6b6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -643,6 +643,8 @@ macro_rules! options {\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n             Some(::rustc_back::LinkerFlavor::one_of());\n+        pub const parse_optimization_fuel: Option<&'static str> =\n+            Some(\"crate=integer\");\n     }\n \n     #[allow(dead_code)]\n@@ -787,6 +789,21 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_optimization_fuel(slot: &mut Option<(String, u64)>, v: Option<&str>) -> bool {\n+            match v {\n+                None => false,\n+                Some(s) => {\n+                    let parts = s.split('=').collect::<Vec<_>>();\n+                    if parts.len() != 2 { return false; }\n+                    let crate_name = parts[0].to_string();\n+                    let fuel = parts[1].parse::<u64>();\n+                    if fuel.is_err() { return false; }\n+                    *slot = Some((crate_name, fuel.unwrap()));\n+                    true\n+                }\n+            }\n+        }\n     }\n ) }\n \n@@ -991,6 +1008,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n+    fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n+        \"Set the optimization fuel quota for a crate.\"),\n+    print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Make Rustc print the total optimization fuel used by a crate.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1784,11 +1805,13 @@ mod dep_tracking {\n \n     impl_dep_tracking_hash_via_hash!(bool);\n     impl_dep_tracking_hash_via_hash!(usize);\n+    impl_dep_tracking_hash_via_hash!(u64);\n     impl_dep_tracking_hash_via_hash!(String);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n+    impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n@@ -1810,6 +1833,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n                                                  Option<cstore::NativeLibraryKind>));\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self"}, {"sha": "039db3d9ee9117484aa69847768089bbfcdf608b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -123,6 +123,20 @@ pub struct Session {\n     pub code_stats: RefCell<CodeStats>,\n \n     next_node_id: Cell<ast::NodeId>,\n+\n+    /// If -zfuel=crate=n is specified, Some(crate).\n+    optimization_fuel_crate: Option<String>,\n+    /// If -zfuel=crate=n is specified, initially set to n. Otherwise 0.\n+    optimization_fuel_limit: Cell<u64>,\n+    /// We're rejecting all further optimizations.\n+    out_of_fuel: Cell<bool>,\n+\n+    // The next two are public because the driver needs to read them.\n+\n+    /// If -zprint-fuel=crate, Some(crate).\n+    pub print_fuel_crate: Option<String>,\n+    /// Always set to zero and incremented so that we can print fuel expended by a crate.\n+    pub print_fuel: Cell<u64>,\n }\n \n pub struct PerfStats {\n@@ -507,6 +521,32 @@ impl Session {\n         println!(\"Total time spent decoding DefPath tables:      {}\",\n                  duration_to_secs_str(self.perf_stats.decode_def_path_tables_time.get()));\n     }\n+\n+    /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n+    /// This expends fuel if applicable, and records fuel if applicable.\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n+        let mut ret = true;\n+        match self.optimization_fuel_crate {\n+            Some(ref c) if c == crate_name => {\n+                let fuel = self.optimization_fuel_limit.get();\n+                ret = fuel != 0;\n+                if fuel == 0 && !self.out_of_fuel.get() {\n+                    println!(\"optimization-fuel-exhausted: {}\", msg());\n+                    self.out_of_fuel.set(true);\n+                } else if fuel > 0 {\n+                    self.optimization_fuel_limit.set(fuel-1);\n+                }\n+            }\n+            _ => {}\n+        }\n+        match self.print_fuel_crate {\n+            Some(ref c) if c == crate_name=> {\n+                self.print_fuel.set(self.print_fuel.get()+1);\n+            },\n+            _ => {}\n+        }\n+        ret\n+    }\n }\n \n pub fn build_session(sopts: config::Options,\n@@ -602,6 +642,12 @@ pub fn build_session_(sopts: config::Options,\n         }\n     );\n \n+    let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n+    let optimization_fuel_limit = Cell::new(sopts.debugging_opts.fuel.as_ref()\n+        .map(|i| i.1).unwrap_or(0));\n+    let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n+    let print_fuel = Cell::new(0);\n+\n     let sess = Session {\n         dep_graph: dep_graph.clone(),\n         target: target_cfg,\n@@ -643,6 +689,11 @@ pub fn build_session_(sopts: config::Options,\n             decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n         },\n         code_stats: RefCell::new(CodeStats::new()),\n+        optimization_fuel_crate: optimization_fuel_crate,\n+        optimization_fuel_limit: optimization_fuel_limit,\n+        print_fuel_crate: print_fuel_crate,\n+        print_fuel: print_fuel,\n+        out_of_fuel: Cell::new(false),\n     };\n \n     init_llvm(&sess);"}, {"sha": "8b7438c0bfad2ed5f73efbfece42ffbbd22978d4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -732,6 +732,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n        }, f)\n     }\n+\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n+        let cname = self.crate_name(LOCAL_CRATE).as_str();\n+        self.sess.consider_optimizing(&cname, msg)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {"}, {"sha": "d7a4b3fda63bb84054d49fde393e1f2ef62e9fe3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -580,7 +580,6 @@ enum StructKind {\n }\n \n impl<'a, 'gcx, 'tcx> Struct {\n-    // FIXME(camlorn): reprs need a better representation to deal with multiple reprs on one type.\n     fn new(dl: &TargetDataLayout, fields: &Vec<&'a Layout>,\n                   repr: &ReprOptions, kind: StructKind,\n                   scapegoat: Ty<'gcx>) -> Result<Struct, LayoutError<'gcx>> {\n@@ -598,12 +597,8 @@ impl<'a, 'gcx, 'tcx> Struct {\n         // Neither do  1-member and 2-member structs.\n         // In addition, code in trans assume that 2-element structs can become pairs.\n         // It's easier to just short-circuit here.\n-        let mut can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n-            && ! (repr.c || repr.packed);\n-\n-        // Disable field reordering until we can decide what to do.\n-        // The odd pattern here avoids a warning about the value never being read.\n-        if can_optimize { can_optimize = false; }\n+        let can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n+            && !(repr.c || repr.packed || repr.linear || repr.simd);\n \n         let (optimize, sort_ascending) = match kind {\n             StructKind::AlwaysSizedUnivariant => (can_optimize, false),"}, {"sha": "a2c356c20db09d563afa0e532dc964c39f139138", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1411,13 +1411,16 @@ pub struct ReprOptions {\n     pub packed: bool,\n     pub simd: bool,\n     pub int: Option<attr::IntType>,\n+    // Internal only for now. If true, don't reorder fields.\n+    pub linear: bool,\n }\n \n impl_stable_hash_for!(struct ReprOptions {\n     c,\n     packed,\n     simd,\n-    int\n+    int,\n+    linear\n });\n \n impl ReprOptions {\n@@ -1440,6 +1443,9 @@ impl ReprOptions {\n             ret.simd = true;\n         }\n \n+        // This is here instead of layout because the choice must make it into metadata.\n+        ret.linear = !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\",\n+            tcx.item_path_str(did)));\n         ret\n     }\n "}, {"sha": "adb22197226023fcb80731626f1ecc97255275f7", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -20,10 +20,11 @@ use std::fmt;\n use std::mem;\n use std::collections::range::RangeArgument;\n use std::collections::Bound::{Excluded, Included, Unbounded};\n+use std::mem::ManuallyDrop;\n \n pub unsafe trait Array {\n     type Element;\n-    type PartialStorage: Default + Unsize<[ManuallyDrop<Self::Element>]>;\n+    type PartialStorage: Unsize<[ManuallyDrop<Self::Element>]>;\n     const LEN: usize;\n }\n \n@@ -66,7 +67,7 @@ impl<A: Array> ArrayVec<A> {\n     pub fn new() -> Self {\n         ArrayVec {\n             count: 0,\n-            values: Default::default(),\n+            values: unsafe { ::std::mem::uninitialized() },\n         }\n     }\n \n@@ -81,7 +82,7 @@ impl<A: Array> ArrayVec<A> {\n     /// Panics when the stack vector is full.\n     pub fn push(&mut self, el: A::Element) {\n         let arr = &mut self.values as &mut [ManuallyDrop<_>];\n-        arr[self.count] = ManuallyDrop { value: el };\n+        arr[self.count] = ManuallyDrop::new(el);\n         self.count += 1;\n     }\n \n@@ -90,8 +91,8 @@ impl<A: Array> ArrayVec<A> {\n             let arr = &mut self.values as &mut [ManuallyDrop<_>];\n             self.count -= 1;\n             unsafe {\n-                let value = ptr::read(&arr[self.count]);\n-                Some(value.value)\n+                let value = ptr::read(&*arr[self.count]);\n+                Some(value)\n             }\n         } else {\n             None\n@@ -210,7 +211,7 @@ impl<A: Array> Iterator for Iter<A> {\n     fn next(&mut self) -> Option<A::Element> {\n         let arr = &self.store as &[ManuallyDrop<_>];\n         unsafe {\n-            self.indices.next().map(|i| ptr::read(&arr[i]).value)\n+            self.indices.next().map(|i| ptr::read(&*arr[i]))\n         }\n     }\n \n@@ -233,7 +234,7 @@ impl<'a, A: Array> Iterator for Drain<'a, A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A::Element> {\n-        self.iter.next().map(|elt| unsafe { ptr::read(elt as *const ManuallyDrop<_>).value })\n+        self.iter.next().map(|elt| unsafe { ptr::read(&**elt) })\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -295,25 +296,3 @@ impl<'a, A: Array> IntoIterator for &'a mut ArrayVec<A> {\n         self.iter_mut()\n     }\n }\n-\n-// FIXME: This should use repr(transparent) from rust-lang/rfcs#1758.\n-#[allow(unions_with_drop_fields)]\n-pub union ManuallyDrop<T> {\n-    value: T,\n-    #[allow(dead_code)]\n-    empty: (),\n-}\n-\n-impl<T> ManuallyDrop<T> {\n-    fn new() -> ManuallyDrop<T> {\n-        ManuallyDrop {\n-            empty: ()\n-        }\n-    }\n-}\n-\n-impl<T> Default for ManuallyDrop<T> {\n-    fn default() -> Self {\n-        ManuallyDrop::new()\n-    }\n-}"}, {"sha": "72c533a74618b8185eae1cb22807539ef56cdb4f", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -39,6 +39,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(discriminant_value)]\n #![feature(specialization)]\n+#![feature(manually_drop)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "1a892b73aa5d771c86f6f2dd1c09796763647997", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -517,6 +517,16 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.make_glob_map = resolve::MakeGlobMap::Yes;\n         }\n \n+        if sess.print_fuel_crate.is_some() {\n+            let old_callback = control.compilation_done.callback;\n+            control.compilation_done.callback = box move |state| {\n+                old_callback(state);\n+                let sess = state.session;\n+                println!(\"Fuel used by {}: {}\",\n+                    sess.print_fuel_crate.as_ref().unwrap(),\n+                    sess.print_fuel.get());\n+            }\n+        }\n         control\n     }\n }"}, {"sha": "7077eade61182af2387119e8dd0801d8e3b48062", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -16,7 +16,7 @@ use llvm;\n use llvm::{ValueRef};\n use abi::{Abi, FnType};\n use adt;\n-use mir::lvalue::LvalueRef;\n+use mir::lvalue::{LvalueRef, Alignment};\n use base::*;\n use common::*;\n use declare;\n@@ -36,8 +36,6 @@ use syntax_pos::Span;\n use std::cmp::Ordering;\n use std::iter;\n \n-use mir::lvalue::Alignment;\n-\n fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     let llvm_name = match name {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n@@ -188,7 +186,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             C_nil(ccx)\n         }\n         // Effectively no-ops\n-        \"uninit\" | \"forget\" => {\n+        \"uninit\" => {\n             C_nil(ccx)\n         }\n         \"needs_drop\" => {\n@@ -622,7 +620,10 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n                     for i in 0..elems.len() {\n                         let val = bcx.extract_value(val, i);\n-                        bcx.store(val, bcx.struct_gep(llresult, i), None);\n+                        let lval = LvalueRef::new_sized_ty(llresult, ret_ty,\n+                                                           Alignment::AbiAligned);\n+                        let (dest, align) = lval.trans_field_ptr(bcx, i);\n+                        bcx.store(val, dest, align.to_align());\n                     }\n                     C_nil(ccx)\n                 }"}, {"sha": "f4c9a136ace3c9516e9857fb20651f1976455e3a", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -386,7 +386,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n             let lvalue = LvalueRef::alloca(bcx, arg_ty, &format!(\"arg{}\", arg_index));\n             for (i, &tupled_arg_ty) in tupled_arg_tys.iter().enumerate() {\n-                let dst = bcx.struct_gep(lvalue.llval, i);\n+                let (dst, _) = lvalue.trans_field_ptr(bcx, i);\n                 let arg = &mircx.fn_ty.args[idx];\n                 idx += 1;\n                 if common::type_is_fat_ptr(bcx.ccx, tupled_arg_ty) {"}, {"sha": "cd58fcd4806da62d104e61679c7a9527ae71bad6", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -124,7 +124,6 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n-            \"forget\" => (1, vec![ param(0) ], tcx.mk_nil()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {\n                 (1,"}, {"sha": "c59101cc779968eea9f7f7f3e772f3359ac6e401", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -469,22 +469,28 @@ impl LangString {\n         );\n \n         for token in tokens {\n-            match token {\n+            match token.trim() {\n                 \"\" => {},\n-                \"should_panic\" => { data.should_panic = true; seen_rust_tags = true; },\n-                \"no_run\" => { data.no_run = true; seen_rust_tags = true; },\n-                \"ignore\" => { data.ignore = true; seen_rust_tags = true; },\n-                \"rust\" => { data.rust = true; seen_rust_tags = true; },\n-                \"test_harness\" => { data.test_harness = true; seen_rust_tags = true; },\n+                \"should_panic\" => {\n+                    data.should_panic = true;\n+                    seen_rust_tags = seen_other_tags == false;\n+                }\n+                \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n+                \"ignore\" => { data.ignore = true; seen_rust_tags = !seen_other_tags; }\n+                \"rust\" => { data.rust = true; seen_rust_tags = true; }\n+                \"test_harness\" => {\n+                    data.test_harness = true;\n+                    seen_rust_tags = !seen_other_tags || seen_rust_tags;\n+                }\n                 \"compile_fail\" if allow_compile_fail => {\n                     data.compile_fail = true;\n-                    seen_rust_tags = true;\n+                    seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     data.no_run = true;\n                 }\n                 x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n                     if let Ok(_) = x[1..].parse::<u32>() {\n                         data.error_codes.push(x.to_owned());\n-                        seen_rust_tags = true;\n+                        seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     } else {\n                         seen_other_tags = true;\n                     }\n@@ -670,9 +676,11 @@ mod tests {\n         t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n         t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n         t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, Vec::new());\n         t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());\n         t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, Vec::new());\n+        t(\"text, no_run\",          false,        true,   false,  false, false, false, Vec::new());\n+        t(\"text,no_run\",           false,        true,   false,  false, false, false, Vec::new());\n     }\n \n     #[test]"}, {"sha": "052340a0f253a11cf43e257c5da563b62c7585f8", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -277,7 +277,7 @@ mod prim_pointer { }\n /// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n /// the element type allows it:\n ///\n-/// - [`Clone`][clone] (only if `T: [Copy][copy]`)\n+/// - [`Clone`][clone] (only if `T: `[`Copy`][copy])\n /// - [`Debug`][debug]\n /// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]"}, {"sha": "48c9fda31e8c80707674537252d6a2fe4306d0a9", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -10,10 +10,9 @@\n \n #![feature(core_intrinsics)]\n \n-use std::intrinsics::{init, forget};\n+use std::intrinsics::{init};\n \n // Test that the `forget` and `init` intrinsics are really unsafe\n pub fn main() {\n     let stuff = init::<isize>(); //~ ERROR call to unsafe function requires unsafe\n-    forget(stuff);             //~ ERROR call to unsafe function requires unsafe\n }"}, {"sha": "3832c040108f8f0b0ad35306357929331a479255", "filename": "src/test/run-pass/optimization-fuel-0.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+\n+use std::mem::size_of;\n+\n+// compile-flags: -Z fuel=foo=0\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+\n+fn main() {\n+    assert_eq!(size_of::<S1>(), 6);\n+    assert_eq!(size_of::<S2>(), 6);\n+}\n+"}, {"sha": "5f294e26aa53efce4bb6337b82328d8b32365388", "filename": "src/test/run-pass/optimization-fuel-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+\n+use std::mem::size_of;\n+\n+// compile-flags: -Z fuel=foo=1\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+\n+fn main() {\n+    let optimized = (size_of::<S1>() == 4) as usize\n+        +(size_of::<S2>() == 4) as usize;\n+    assert_eq!(optimized, 1);\n+}\n+\n+"}, {"sha": "2f50e63153ea4bf8722b3bec2458aaa40d6168be", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -31,6 +31,17 @@ enum e3 {\n     a([u16; 0], u8), b\n }\n \n+struct ReorderedStruct {\n+    a: u8,\n+    b: u16,\n+    c: u8\n+}\n+\n+enum ReorderedEnum {\n+    A(u8, u16, u8),\n+    B(u8, u16, u8),\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -54,4 +65,6 @@ pub fn main() {\n     assert_eq!(size_of::<e1>(), 8 as usize);\n     assert_eq!(size_of::<e2>(), 8 as usize);\n     assert_eq!(size_of::<e3>(), 4 as usize);\n+    assert_eq!(size_of::<ReorderedStruct>(), 4);\n+    assert_eq!(size_of::<ReorderedEnum>(), 6);\n }"}, {"sha": "0d9e243763f78257a8ed92d54dda8de39fd2d498", "filename": "src/test/ui/print-fuel/print-fuel.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+#![allow(dead_code)]\n+\n+// compile-flags: -Z print-fuel=foo\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+struct S3(u8, u16, u8);\n+\n+fn main() {\n+}"}, {"sha": "cc88cc077bb219a372491432f57bdb0f76b8ba62", "filename": "src/test/ui/print-fuel/print-fuel.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -0,0 +1 @@\n+Fuel used by foo: 3"}, {"sha": "830678f174f88cf38e0d76836bac2cc7c9a9ee96", "filename": "src/test/ui/print_type_sizes/nullable.stdout", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1,25 +1,22 @@\n-print-type-size type: `IndirectNonZero<u32>`: 20 bytes, alignment: 4 bytes\n-print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.nested`: 12 bytes, alignment: 4 bytes\n+print-type-size type: `IndirectNonZero<u32>`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.nested`: 8 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `MyOption<IndirectNonZero<u32>>`: 20 bytes, alignment: 4 bytes\n-print-type-size     variant `Some`: 20 bytes\n-print-type-size         field `.0`: 20 bytes\n-print-type-size type: `EmbeddedDiscr`: 12 bytes, alignment: 4 bytes\n-print-type-size     variant `Record`: 10 bytes\n-print-type-size         field `.pre`: 1 bytes\n-print-type-size         padding: 3 bytes\n-print-type-size         field `.val`: 4 bytes, alignment: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `NestedNonZero<u32>`: 12 bytes, alignment: 4 bytes\n print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.val`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `MyOption<IndirectNonZero<u32>>`: 12 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 12 bytes\n+print-type-size         field `.0`: 12 bytes\n+print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     variant `Record`: 7 bytes\n+print-type-size         field `.val`: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `NestedNonZero<u32>`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n+print-type-size     field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes"}, {"sha": "83fd333c9c7fc45dba547de22add55c477521ef9", "filename": "src/test/ui/print_type_sizes/packed.stdout", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1,13 +1,11 @@\n-print-type-size type: `Padded`: 16 bytes, alignment: 4 bytes\n+print-type-size type: `Padded`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n+print-type-size     field `.h`: 2 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.c`: 1 bytes\n-print-type-size     padding: 1 bytes\n-print-type-size     field `.h`: 2 bytes, alignment: 2 bytes\n print-type-size     field `.d`: 1 bytes\n-print-type-size     end padding: 3 bytes\n+print-type-size     end padding: 2 bytes\n print-type-size type: `Packed`: 10 bytes, alignment: 1 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes"}, {"sha": "0eaff7118b35c38a528dab7052d2cd498acb15aa", "filename": "src/test/ui/print_type_sizes/padding.stdout", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -1,10 +1,12 @@\n print-type-size type: `E1`: 12 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 4 bytes\n-print-type-size     variant `A`: 5 bytes\n-print-type-size         field `.0`: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 7 bytes\n print-type-size         field `.1`: 1 bytes\n-print-type-size     variant `B`: 8 bytes\n-print-type-size         field `.0`: 8 bytes\n+print-type-size         padding: 2 bytes\n+print-type-size         field `.0`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `B`: 11 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `A`: 7 bytes\n@@ -15,7 +17,7 @@ print-type-size     variant `B`: 11 bytes\n print-type-size         padding: 3 bytes\n print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `S`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 2 bytes"}, {"sha": "a7a43e6858ef9dd267695177cafb36a21d8ea1f9", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32752d92589e99feab80921b9eecb6090cf310/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=da32752d92589e99feab80921b9eecb6090cf310", "patch": "@@ -11,7 +11,7 @@\n extern crate toml;\n extern crate rustc_serialize;\n \n-use std::collections::{BTreeMap, HashMap};\n+use std::collections::BTreeMap;\n use std::env;\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -101,13 +101,13 @@ static MINGW: &'static [&'static str] = &[\n struct Manifest {\n     manifest_version: String,\n     date: String,\n-    pkg: HashMap<String, Package>,\n+    pkg: BTreeMap<String, Package>,\n }\n \n #[derive(RustcEncodable)]\n struct Package {\n     version: String,\n-    target: HashMap<String, Target>,\n+    target: BTreeMap<String, Target>,\n }\n \n #[derive(RustcEncodable)]\n@@ -138,7 +138,7 @@ struct Builder {\n     input: PathBuf,\n     output: PathBuf,\n     gpg_passphrase: String,\n-    digests: HashMap<String, String>,\n+    digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n     rust_version: String,\n@@ -162,7 +162,7 @@ fn main() {\n         input: input,\n         output: output,\n         gpg_passphrase: passphrase,\n-        digests: HashMap::new(),\n+        digests: BTreeMap::new(),\n         s3_address: s3_address,\n         date: date,\n         rust_version: String::new(),\n@@ -214,7 +214,7 @@ impl Builder {\n         let mut manifest = Manifest {\n             manifest_version: \"2\".to_string(),\n             date: self.date.to_string(),\n-            pkg: HashMap::new(),\n+            pkg: BTreeMap::new(),\n         };\n \n         self.package(\"rustc\", &mut manifest.pkg, HOSTS);\n@@ -230,7 +230,7 @@ impl Builder {\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n-            target: HashMap::new(),\n+            target: BTreeMap::new(),\n         };\n         for host in HOSTS {\n             let filename = self.filename(\"rust\", host);\n@@ -299,7 +299,7 @@ impl Builder {\n \n     fn package(&mut self,\n                pkgname: &str,\n-               dst: &mut HashMap<String, Package>,\n+               dst: &mut BTreeMap<String, Package>,\n                targets: &[&str]) {\n         let targets = targets.iter().map(|name| {\n             let filename = self.filename(pkgname, name);"}]}