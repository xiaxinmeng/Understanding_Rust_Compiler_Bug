{"sha": "6b0a447150e6a1e41edecdd037013608769f1040", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMGE0NDcxNTBlNmExZTQxZWRlY2RkMDM3MDEzNjA4NzY5ZjEwNDA=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-09-20T07:11:52Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-20T07:11:52Z"}, "message": "feat: support parameter attributes (#3793)", "tree": {"sha": "766b0b79ab6d37fd20ab3f581e6702083218d1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766b0b79ab6d37fd20ab3f581e6702083218d1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0a447150e6a1e41edecdd037013608769f1040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0a447150e6a1e41edecdd037013608769f1040", "html_url": "https://github.com/rust-lang/rust/commit/6b0a447150e6a1e41edecdd037013608769f1040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0a447150e6a1e41edecdd037013608769f1040/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4449250539b7e8ab27d8c12a77ca38ce278eac51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4449250539b7e8ab27d8c12a77ca38ce278eac51", "html_url": "https://github.com/rust-lang/rust/commit/4449250539b7e8ab27d8c12a77ca38ce278eac51"}], "stats": {"total": 210, "additions": 195, "deletions": 15}, "files": [{"sha": "d3937bbdb317c2119ae89da22125c69ce6e84a97", "filename": "src/items.rs", "status": "modified", "additions": 74, "deletions": 15, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6b0a447150e6a1e41edecdd037013608769f1040/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0a447150e6a1e41edecdd037013608769f1040/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6b0a447150e6a1e41edecdd037013608769f1040", "patch": "@@ -1905,12 +1905,39 @@ fn get_missing_arg_comments(\n \n impl Rewrite for ast::Param {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        let param_attrs_result = self\n+            .attrs\n+            .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n+        let (span, has_multiple_attr_lines) = if !self.attrs.is_empty() {\n+            let num_attrs = self.attrs.len();\n+            (\n+                mk_sp(self.attrs[num_attrs - 1].span.hi(), self.pat.span.lo()),\n+                param_attrs_result.matches(\"\\n\").count() > 0,\n+            )\n+        } else {\n+            (mk_sp(self.span.lo(), self.span.lo()), false)\n+        };\n+\n         if let Some(ref explicit_self) = self.to_self() {\n-            rewrite_explicit_self(context, explicit_self)\n+            rewrite_explicit_self(\n+                context,\n+                explicit_self,\n+                &param_attrs_result,\n+                span,\n+                shape,\n+                has_multiple_attr_lines,\n+            )\n         } else if is_named_arg(self) {\n-            let mut result = self\n-                .pat\n-                .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n+            let mut result = combine_strs_with_missing_comments(\n+                context,\n+                &param_attrs_result,\n+                &self\n+                    .pat\n+                    .rewrite(context, Shape::legacy(shape.width, shape.indent))?,\n+                span,\n+                shape,\n+                !has_multiple_attr_lines,\n+            )?;\n \n             if !is_empty_infer(&*self.ty, self.pat.span) {\n                 let (before_comment, after_comment) =\n@@ -1936,6 +1963,10 @@ impl Rewrite for ast::Param {\n fn rewrite_explicit_self(\n     context: &RewriteContext<'_>,\n     explicit_self: &ast::ExplicitSelf,\n+    param_attrs: &str,\n+    span: Span,\n+    shape: Shape,\n+    has_multiple_attr_lines: bool,\n ) -> Option<String> {\n     match explicit_self.node {\n         ast::SelfKind::Region(lt, m) => {\n@@ -1946,9 +1977,23 @@ fn rewrite_explicit_self(\n                         context,\n                         Shape::legacy(context.config.max_width(), Indent::empty()),\n                     )?;\n-                    Some(format!(\"&{} {}self\", lifetime_str, mut_str))\n+                    Some(combine_strs_with_missing_comments(\n+                        context,\n+                        &param_attrs,\n+                        &format!(\"&{} {}self\", lifetime_str, mut_str),\n+                        span,\n+                        shape,\n+                        !has_multiple_attr_lines,\n+                    )?)\n                 }\n-                None => Some(format!(\"&{}self\", mut_str)),\n+                None => Some(combine_strs_with_missing_comments(\n+                    context,\n+                    &param_attrs,\n+                    &format!(\"&{}self\", mut_str),\n+                    span,\n+                    shape,\n+                    !has_multiple_attr_lines,\n+                )?),\n             }\n         }\n         ast::SelfKind::Explicit(ref ty, mutability) => {\n@@ -1957,21 +2002,35 @@ fn rewrite_explicit_self(\n                 Shape::legacy(context.config.max_width(), Indent::empty()),\n             )?;\n \n-            Some(format!(\n-                \"{}self: {}\",\n-                format_mutability(mutability),\n-                type_str\n-            ))\n+            Some(combine_strs_with_missing_comments(\n+                context,\n+                &param_attrs,\n+                &format!(\"{}self: {}\", format_mutability(mutability), type_str),\n+                span,\n+                shape,\n+                !has_multiple_attr_lines,\n+            )?)\n         }\n-        ast::SelfKind::Value(mutability) => Some(format!(\"{}self\", format_mutability(mutability))),\n+        ast::SelfKind::Value(mutability) => Some(combine_strs_with_missing_comments(\n+            context,\n+            &param_attrs,\n+            &format!(\"{}self\", format_mutability(mutability)),\n+            span,\n+            shape,\n+            !has_multiple_attr_lines,\n+        )?),\n     }\n }\n \n pub(crate) fn span_lo_for_arg(arg: &ast::Param) -> BytePos {\n-    if is_named_arg(arg) {\n-        arg.pat.span.lo()\n+    if arg.attrs.is_empty() {\n+        if is_named_arg(arg) {\n+            arg.pat.span.lo()\n+        } else {\n+            arg.ty.span.lo()\n+        }\n     } else {\n-        arg.ty.span.lo()\n+        arg.attrs[0].span.lo()\n     }\n }\n "}, {"sha": "3407a3b2ef2e5d85a434f3503b0d12ca6c25af11", "filename": "tests/source/fn-param-attributes.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b0a447150e6a1e41edecdd037013608769f1040/tests%2Fsource%2Ffn-param-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0a447150e6a1e41edecdd037013608769f1040/tests%2Fsource%2Ffn-param-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-param-attributes.rs?ref=6b0a447150e6a1e41edecdd037013608769f1040", "patch": "@@ -0,0 +1,57 @@\n+// https://github.com/rust-lang/rustfmt/issues/3623\n+\n+fn foo(#[cfg(something)] x: i32, y: i32) -> i32 {\n+    x + y\n+}\n+\n+fn foo_b(#[cfg(something)]x: i32, y: i32) -> i32 {\n+    x + y\n+}\n+\n+fn add(#[cfg(something)]#[deny(C)]  x: i32, y: i32) -> i32 {\n+    x + y\n+}\n+\n+struct NamedSelfRefStruct {}\n+impl NamedSelfRefStruct {\n+    fn foo(\n+#[cfg(something)]  self: &Self,\n+    ) {}\n+}\n+\n+struct MutStruct {}\n+impl MutStruct {\n+    fn foo(\n+        #[cfg(foo)]&mut self,#[deny(C)] b: i32,\n+    ) {}\n+}\n+\n+fn main() {\n+    let c = |\n+        #[allow(C)]a: u32,\n+        #[cfg(something)] b: i32,\n+        #[cfg_attr(something, cfg(nothing))]#[deny(C)] c: i32,\n+    | {};\n+    let _ = c(1, 2);\n+}\n+\n+pub fn bar(\n+    /// bar\n+#[test] a: u32,\n+    /// Bar\n+            #[must_use]\n+/// Baz\n+    #[no_mangle] b: i32,\n+) {}\n+\n+\n+fn abc(\n+    #[foo]\n+    #[bar] param: u32,\n+) {\n+    // ...\n+}\n+\n+fn really_really_really_loooooooooooooooooooong(#[cfg(some_even_longer_config_feature_that_keeps_going_and_going_and_going_forever_and_ever_and_ever_on_and_on)] b: i32) {\n+    // ...\n+}"}, {"sha": "829575518debd5bd80b888baa5fe4c35a2e23e27", "filename": "tests/target/fn-param-attributes.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6b0a447150e6a1e41edecdd037013608769f1040/tests%2Ftarget%2Ffn-param-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0a447150e6a1e41edecdd037013608769f1040/tests%2Ftarget%2Ffn-param-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-param-attributes.rs?ref=6b0a447150e6a1e41edecdd037013608769f1040", "patch": "@@ -0,0 +1,64 @@\n+// https://github.com/rust-lang/rustfmt/issues/3623\n+\n+fn foo(#[cfg(something)] x: i32, y: i32) -> i32 {\n+    x + y\n+}\n+\n+fn foo_b(#[cfg(something)] x: i32, y: i32) -> i32 {\n+    x + y\n+}\n+\n+fn add(\n+    #[cfg(something)]\n+    #[deny(C)]\n+    x: i32,\n+    y: i32,\n+) -> i32 {\n+    x + y\n+}\n+\n+struct NamedSelfRefStruct {}\n+impl NamedSelfRefStruct {\n+    fn foo(#[cfg(something)] self: &Self) {}\n+}\n+\n+struct MutStruct {}\n+impl MutStruct {\n+    fn foo(#[cfg(foo)] &mut self, #[deny(C)] b: i32) {}\n+}\n+\n+fn main() {\n+    let c = |#[allow(C)] a: u32,\n+             #[cfg(something)] b: i32,\n+             #[cfg_attr(something, cfg(nothing))]\n+             #[deny(C)]\n+             c: i32| {};\n+    let _ = c(1, 2);\n+}\n+\n+pub fn bar(\n+    /// bar\n+    #[test]\n+    a: u32,\n+    /// Bar\n+    #[must_use]\n+    /// Baz\n+    #[no_mangle]\n+    b: i32,\n+) {\n+}\n+\n+fn abc(\n+    #[foo]\n+    #[bar]\n+    param: u32,\n+) {\n+    // ...\n+}\n+\n+fn really_really_really_loooooooooooooooooooong(\n+    #[cfg(some_even_longer_config_feature_that_keeps_going_and_going_and_going_forever_and_ever_and_ever_on_and_on)]\n+    b: i32,\n+) {\n+    // ...\n+}"}]}