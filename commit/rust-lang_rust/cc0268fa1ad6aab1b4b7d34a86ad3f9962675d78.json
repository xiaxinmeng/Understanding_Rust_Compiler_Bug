{"sha": "cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDI2OGZhMWFkNmFhYjFiNGI3ZDM0YTg2YWQzZjk5NjI2NzVkNzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T12:13:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-30T16:56:53Z"}, "message": "Mask shift amount", "tree": {"sha": "3d85e680940750298e9aa721222375e6c2412a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d85e680940750298e9aa721222375e6c2412a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78", "html_url": "https://github.com/rust-lang/rust/commit/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "html_url": "https://github.com/rust-lang/rust/commit/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "22269b5ee29e596a8029cfcbcec4ffcdbaf979be", "filename": "src/num.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=cc0268fa1ad6aab1b4b7d34a86ad3f9962675d78", "patch": "@@ -168,16 +168,18 @@ pub(crate) fn trans_int_binop<'tcx>(\n         BinOp::BitOr => b.bor(lhs, rhs),\n         BinOp::Shl => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let rhs = clif_intcast(fx, rhs, lhs_ty, false);\n-            fx.bcx.ins().ishl(lhs, rhs)\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n+            fx.bcx.ins().ishl(lhs, actual_shift)\n         }\n         BinOp::Shr => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let rhs = clif_intcast(fx, rhs, lhs_ty, false);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             if signed {\n-                fx.bcx.ins().sshr(lhs, rhs)\n+                fx.bcx.ins().sshr(lhs, actual_shift)\n             } else {\n-                fx.bcx.ins().ushr(lhs, rhs)\n+                fx.bcx.ins().ushr(lhs, actual_shift)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -283,18 +285,24 @@ pub(crate) fn trans_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n+            let val = fx.bcx.ins().ishl(lhs, actual_shift);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow =\n                 fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, rhs)\n+                fx.bcx.ins().ushr(lhs, actual_shift)\n             } else {\n-                fx.bcx.ins().sshr(lhs, rhs)\n+                fx.bcx.ins().sshr(lhs, actual_shift)\n             };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;"}]}