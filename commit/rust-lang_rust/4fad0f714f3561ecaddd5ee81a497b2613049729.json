{"sha": "4fad0f714f3561ecaddd5ee81a497b2613049729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYWQwZjcxNGYzNTYxZWNhZGRkNWVlODFhNDk3YjI2MTMwNDk3Mjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-21T16:38:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-21T16:38:08Z"}, "message": "Add some basic intrinsic support (only size_of atm)", "tree": {"sha": "d8e487d6027ff7636c3f2b70b144fccdb410dba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8e487d6027ff7636c3f2b70b144fccdb410dba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fad0f714f3561ecaddd5ee81a497b2613049729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fad0f714f3561ecaddd5ee81a497b2613049729", "html_url": "https://github.com/rust-lang/rust/commit/4fad0f714f3561ecaddd5ee81a497b2613049729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fad0f714f3561ecaddd5ee81a497b2613049729/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0350f2faa97229c49ac2b7efb7058ae7abf0232b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0350f2faa97229c49ac2b7efb7058ae7abf0232b", "html_url": "https://github.com/rust-lang/rust/commit/0350f2faa97229c49ac2b7efb7058ae7abf0232b"}], "stats": {"total": 105, "additions": 83, "deletions": 22}, "files": [{"sha": "d37ca321334d99c6d2ff9726a186db3a8901ce22", "filename": "example.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4fad0f714f3561ecaddd5ee81a497b2613049729/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fad0f714f3561ecaddd5ee81a497b2613049729/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=4fad0f714f3561ecaddd5ee81a497b2613049729", "patch": "@@ -3,7 +3,7 @@\n #![allow(dead_code)]\n \n #[lang=\"sized\"]\n-trait Sized {}\n+pub trait Sized {}\n \n #[lang=\"copy\"]\n unsafe trait Copy {}\n@@ -68,8 +68,11 @@ unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     drop_in_place(to_drop);\n }\n \n-extern \"rust-intrinsic\" {\n-    fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn size_of<T>() -> usize;\n+        pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n }\n \n fn abc(a: u8) -> u8 {\n@@ -149,10 +152,20 @@ fn debug_tuple() -> DebugTuple {\n     DebugTuple(())\n }\n \n-unsafe fn use_copy_intrinsic(src: *const u8, dst: *mut u8) {\n-    copy::<u8>(src, dst, 1);\n+fn size_of<T>() -> usize {\n+    unsafe {\n+        intrinsics::size_of::<T>()\n+    }\n+}\n+\n+fn use_size_of() -> usize {\n+    size_of::<u64>()\n }\n \n+/*unsafe fn use_copy_intrinsic(src: *const u8, dst: *mut u8) {\n+    intrinsics::copy::<u8>(src, dst, 1);\n+}*/\n+\n /*unsafe fn use_copy_intrinsic_ref(src: *const u8, dst: *mut u8) {\n     let copy2 = &copy::<u8>;\n     copy2(src, dst, 1);"}, {"sha": "e228b863b1ce1bd54490c8f69c2abef5bcfe4e67", "filename": "src/abi.rs", "status": "modified", "additions": 64, "deletions": 16, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4fad0f714f3561ecaddd5ee81a497b2613049729/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fad0f714f3561ecaddd5ee81a497b2613049729/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=4fad0f714f3561ecaddd5ee81a497b2613049729", "patch": "@@ -12,7 +12,7 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<\n     let (call_conv, inputs, _output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n-            unimplemented!();\n+            unimplemented!(\"rust-call\");\n         }\n         Abi::System => bug!(\"system abi should be selected elsewhere\"),\n         // TODO: properly implement intrinsics\n@@ -153,25 +153,73 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n ) {\n     let func = ::base::trans_operand(fx, func);\n+\n     let return_place = if let Some((place, _)) = destination {\n-        ::base::trans_place(fx, place).expect_addr()\n+        Some(::base::trans_place(fx, place))\n     } else {\n-        fx.bcx.ins().iconst(types::I64, 0)\n+        None\n     };\n-    let args = Some(return_place)\n+\n+    let args = args\n         .into_iter()\n-        .chain(\n-            args\n-                .into_iter()\n-                .map(|arg| {\n-                    let arg = ::base::trans_operand(fx, arg);\n-                    if let Some(_) = fx.cton_type(arg.layout().ty) {\n-                        arg.load_value(fx)\n-                    } else {\n-                        arg.force_stack(fx)\n-                    }\n-                })\n-        ).collect::<Vec<_>>();\n+        .map(|arg| {\n+            let arg = ::base::trans_operand(fx, arg);\n+            if let Some(_) = fx.cton_type(arg.layout().ty) {\n+                arg.load_value(fx)\n+            } else {\n+                arg.force_stack(fx)\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let fn_ty = func.layout().ty;\n+    if let TypeVariants::TyFnDef(def_id, substs) = fn_ty.sty {\n+        let instance = ty::Instance::resolve(\n+            fx.tcx,\n+            ParamEnv::reveal_all(),\n+            def_id,\n+            substs\n+        ).unwrap();\n+\n+        // Handle intrinsics old codegen wants Expr's for, ourselves.\n+        if let InstanceDef::Intrinsic(def_id) = instance.def {\n+            let intrinsic = fx.tcx.item_name(def_id).as_str();\n+            let intrinsic = &intrinsic[..];\n+\n+            let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+            match intrinsic {\n+                \"copy\" => {\n+                    /*let elem_ty = substs.type_at(0);\n+                    assert_eq!(args.len(), 3);\n+                    let src = args[0];\n+                    let dst = args[1];\n+                    let count = args[2];*/\n+                    unimplemented!(\"copy\");\n+                }\n+                \"size_of\" => {\n+                    let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n+                    let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n+                    return_place.unwrap().write_cvalue(fx, size_of);\n+                }\n+                _ => fx.tcx.sess.fatal(&format!(\"unsupported intrinsic {}\", intrinsic)),\n+            }\n+            if let Some((_, dest)) = *destination {\n+                let ret_ebb = fx.get_ebb(dest);\n+                fx.bcx.ins().jump(ret_ebb, &[]);\n+            } else {\n+                fx.bcx.ins().trap(TrapCode::User(!0));\n+            }\n+            return;\n+        }\n+    }\n+\n+    let return_ptr = match return_place {\n+        Some(place) => place.expect_addr(),\n+        None => fx.bcx.ins().iconst(types::I64, 0),\n+    };\n+\n+    let args = Some(return_ptr).into_iter().chain(args).collect::<Vec<_>>();\n+\n     match func {\n         CValue::Func(func, _) => {\n             fx.bcx.ins().call(func, &args);"}, {"sha": "74cc4943f56ee1568a3d09ab4271575d82ff2195", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fad0f714f3561ecaddd5ee81a497b2613049729/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fad0f714f3561ecaddd5ee81a497b2613049729/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4fad0f714f3561ecaddd5ee81a497b2613049729", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n             CPlace::Var(_, layout) |\n-            CPlace::Addr(_, layout) => layout\n+            CPlace::Addr(_, layout) => layout,\n         }\n     }\n "}]}