{"sha": "7e6f40b6f1339a16864e61a49f9d8f341184dc69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNmY0MGI2ZjEzMzlhMTY4NjRlNjFhNDlmOWQ4ZjM0MTE4NGRjNjk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T17:03:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T17:03:46Z"}, "message": "Expose coercions for patterns and expressions in semantics", "tree": {"sha": "576a01e72c59bc6da0d9e5c1f1543e20fba41c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/576a01e72c59bc6da0d9e5c1f1543e20fba41c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6f40b6f1339a16864e61a49f9d8f341184dc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6f40b6f1339a16864e61a49f9d8f341184dc69", "html_url": "https://github.com/rust-lang/rust/commit/7e6f40b6f1339a16864e61a49f9d8f341184dc69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6f40b6f1339a16864e61a49f9d8f341184dc69/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576e3a4e122ac7089d6e209a86cbf825e927908b", "url": "https://api.github.com/repos/rust-lang/rust/commits/576e3a4e122ac7089d6e209a86cbf825e927908b", "html_url": "https://github.com/rust-lang/rust/commit/576e3a4e122ac7089d6e209a86cbf825e927908b"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "a4028c523fe27baccde14514a2093a3caebbc1eb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=7e6f40b6f1339a16864e61a49f9d8f341184dc69", "patch": "@@ -216,14 +216,18 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_expr(expr)\n     }\n \n-    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n         self.imp.type_of_expr_with_coercion(expr)\n     }\n \n     pub fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.imp.type_of_pat(pat)\n     }\n \n+    pub fn type_of_pat_with_coercion(&self, expr: &ast::Pat) -> Option<(Type, Option<Type>)> {\n+        self.imp.type_of_pat_with_coercion(expr)\n+    }\n+\n     pub fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n         self.imp.type_of_self(param)\n     }\n@@ -564,14 +568,18 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n \n-    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n         self.analyze(expr.syntax()).type_of_expr_with_coercion(self.db, expr)\n     }\n \n     fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.analyze(pat.syntax()).type_of_pat(self.db, pat)\n     }\n \n+    fn type_of_pat_with_coercion(&self, pat: &ast::Pat)-> Option<(Type, Option<Type>)> {\n+        self.analyze(pat.syntax()).type_of_pat_with_coercion(self.db, pat)\n+    }\n+\n     fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n         self.analyze(param.syntax()).type_of_self(self.db, param)\n     }"}, {"sha": "ff0b6697c79af21bf9ca58a287ad6c2ecef6ef92", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=7e6f40b6f1339a16864e61a49f9d8f341184dc69", "patch": "@@ -126,15 +126,15 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         expr: &ast::Expr,\n-    ) -> Option<Type> {\n+    ) -> Option<(Type, Option<Type>)> {\n         let expr_id = self.expr_id(db, expr)?;\n         let infer = self.infer.as_ref()?;\n         let ty = infer\n             .expr_adjustments\n             .get(&expr_id)\n-            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target))\n-            .unwrap_or_else(|| &infer[expr_id]);\n-        Type::new_with_resolver(db, &self.resolver, ty.clone())\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n+        let mk_ty = |ty: &hir_ty::Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n+        mk_ty(&infer[expr_id]).map(|it| (it, ty.and_then(mk_ty)))\n     }\n \n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n@@ -143,6 +143,21 @@ impl SourceAnalyzer {\n         Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n+    pub(crate) fn type_of_pat_with_coercion(\n+        &self,\n+        db: &dyn HirDatabase,\n+        pat: &ast::Pat,\n+    ) -> Option<(Type, Option<Type>)> {\n+        let pat_id = self.pat_id(pat)?;\n+        let infer = self.infer.as_ref()?;\n+        let ty = infer\n+            .pat_adjustments\n+            .get(&pat_id)\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n+        let mk_ty = |ty: &hir_ty::Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n+        mk_ty(&infer[pat_id]).map(|it| (it, ty.and_then(mk_ty)))\n+    }\n+\n     pub(crate) fn type_of_self(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "e545454159bfc0164f95c406935056f30ac6ad8a", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6f40b6f1339a16864e61a49f9d8f341184dc69/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=7e6f40b6f1339a16864e61a49f9d8f341184dc69", "patch": "@@ -55,7 +55,8 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n \n     // Infer type\n-    let ty = ctx.sema.type_of_expr_with_coercion(&expr)?;\n+    let (ty, coerced) = ctx.sema.type_of_expr_with_coercion(&expr)?;\n+    let ty = coerced.unwrap_or(ty);\n     if ty.contains_unknown() || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;"}]}