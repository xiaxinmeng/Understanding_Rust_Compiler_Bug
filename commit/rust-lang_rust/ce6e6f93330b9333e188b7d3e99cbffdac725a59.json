{"sha": "ce6e6f93330b9333e188b7d3e99cbffdac725a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNmU2ZjkzMzMwYjkzMzNlMTg4YjdkM2U5OWNiZmZkYWM3MjVhNTk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-23T14:34:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-22T19:01:21Z"}, "message": "use is_uninhabited in more places", "tree": {"sha": "8800554b40439db6366ddc9558a6eb325ba4c53c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8800554b40439db6366ddc9558a6eb325ba4c53c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce6e6f93330b9333e188b7d3e99cbffdac725a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6e6f93330b9333e188b7d3e99cbffdac725a59", "html_url": "https://github.com/rust-lang/rust/commit/ce6e6f93330b9333e188b7d3e99cbffdac725a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce6e6f93330b9333e188b7d3e99cbffdac725a59/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "html_url": "https://github.com/rust-lang/rust/commit/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "3d2088ea12e8efa69a0f4a8a058738901d5fd8ee", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n             }\n \n-            if sized && fields.iter().any(|f| f.abi == Abi::Uninhabited) {\n+            if sized && fields.iter().any(|f| f.abi.is_uninhabited()) {\n                 abi = Abi::Uninhabited;\n             }\n \n@@ -724,7 +724,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 // See issue #49298 for more details on the need to leave space\n                 // for non-ZST uninhabited data (mostly partial initialization).\n                 let absent = |fields: &[TyLayout]| {\n-                    let uninhabited = fields.iter().any(|f| f.abi == Abi::Uninhabited);\n+                    let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());\n                     let is_zst = fields.iter().all(|f| f.is_zst());\n                     uninhabited && is_zst\n                 };\n@@ -872,7 +872,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                                 _ => Abi::Aggregate { sized: true },\n                             };\n \n-                            if st.iter().all(|v| v.abi == Abi::Uninhabited) {\n+                            if st.iter().all(|v| v.abi.is_uninhabited()) {\n                                 abi = Abi::Uninhabited;\n                             }\n \n@@ -900,7 +900,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let discr_type = def.repr.discr_type();\n                 let bits = Integer::from_attr(tcx, discr_type).size().bits();\n                 for (i, discr) in def.discriminants(tcx).enumerate() {\n-                    if variants[i].iter().any(|f| f.abi == Abi::Uninhabited) {\n+                    if variants[i].iter().any(|f| f.abi.is_uninhabited()) {\n                         continue;\n                     }\n                     let mut x = discr.val as i128;\n@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     }\n                 }\n \n-                if layout_variants.iter().all(|v| v.abi == Abi::Uninhabited) {\n+                if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {\n                     abi = Abi::Uninhabited;\n                 }\n "}, {"sha": "7b0c413e857617b7ffbd5fd975285875ddf33579", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -279,7 +279,7 @@ pub fn create_function_debug_context(\n         }\n         None => {}\n     };\n-    if cx.layout_of(sig.output()).abi == ty::layout::Abi::Uninhabited {\n+    if cx.layout_of(sig.output()).abi.is_uninhabited() {\n         flags = flags | DIFlags::FlagNoReturn;\n     }\n "}, {"sha": "7141c9ece89d7180ea0c7f85f22e1fb29afbf8e1", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -23,7 +23,7 @@\n use llvm;\n use llvm::AttributePlace::Function;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::LayoutOf;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::spec::PanicStrategy;\n@@ -137,7 +137,7 @@ pub fn declare_fn(\n     let fty = FnType::new(cx, sig, &[]);\n     let llfn = declare_raw_fn(cx, name, fty.llvm_cconv(), fty.llvm_type(cx));\n \n-    if cx.layout_of(sig.output()).abi == layout::Abi::Uninhabited {\n+    if cx.layout_of(sig.output()).abi.is_uninhabited() {\n         llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n     }\n "}, {"sha": "bc6ebd360e8315db992b5867e7da985187f1b428", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -278,7 +278,7 @@ impl PlaceRef<'ll, 'tcx> {\n     /// Obtain the actual discriminant of a value.\n     pub fn codegen_get_discr(self, bx: &Builder<'a, 'll, 'tcx>, cast_to: Ty<'tcx>) -> &'ll Value {\n         let cast_to = bx.cx.layout_of(cast_to).immediate_llvm_type(bx.cx);\n-        if self.layout.abi == layout::Abi::Uninhabited {\n+        if self.layout.abi.is_uninhabited() {\n             return C_undef(cast_to);\n         }\n         match self.layout.variants {\n@@ -341,7 +341,7 @@ impl PlaceRef<'ll, 'tcx> {\n     /// Set the discriminant for a new value of the given case of the given\n     /// representation.\n     pub fn codegen_set_discr(&self, bx: &Builder<'a, 'll, 'tcx>, variant_index: usize) {\n-        if self.layout.for_variant(bx.cx, variant_index).abi == layout::Abi::Uninhabited {\n+        if self.layout.for_variant(bx.cx, variant_index).abi.is_uninhabited() {\n             return;\n         }\n         match self.layout.variants {"}, {"sha": "fa22bdff94dddbeb29fda3c9a0295e6c2100ea8b", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -290,7 +290,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     mir::CastKind::Misc => {\n                         assert!(cast.is_llvm_immediate());\n                         let ll_t_out = cast.immediate_llvm_type(bx.cx);\n-                        if operand.layout.abi == layout::Abi::Uninhabited {\n+                        if operand.layout.abi.is_uninhabited() {\n                             return (bx, OperandRef {\n                                 val: OperandValue::Immediate(C_undef(ll_t_out)),\n                                 layout: cast,"}, {"sha": "c966750f3aa07d8b28c7f00fca94254e819189c0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e6f93330b9333e188b7d3e99cbffdac725a59/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ce6e6f93330b9333e188b7d3e99cbffdac725a59", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         rval: OpTy<'tcx>,\n     ) -> EvalResult<'tcx, (u128, usize)> {\n         trace!(\"read_discriminant_value {:#?}\", rval.layout);\n-        if rval.layout.abi == layout::Abi::Uninhabited {\n+        if rval.layout.abi.is_uninhabited() {\n             return err!(Unreachable);\n         }\n "}]}