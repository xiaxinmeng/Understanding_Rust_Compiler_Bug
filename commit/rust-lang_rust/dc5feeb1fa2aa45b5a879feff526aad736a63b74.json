{"sha": "dc5feeb1fa2aa45b5a879feff526aad736a63b74", "node_id": "C_kwDOAAsO6NoAKGRjNWZlZWIxZmEyYWE0NWI1YTg3OWZlZmY1MjZhYWQ3MzZhNjNiNzQ", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-12-02T22:38:04Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-12-03T01:31:38Z"}, "message": "Don't \"simplify\" during optimizations if optimizations are disabled", "tree": {"sha": "b80be36cfd951b403c2b5ecae1564cf1def4db61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80be36cfd951b403c2b5ecae1564cf1def4db61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5feeb1fa2aa45b5a879feff526aad736a63b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5feeb1fa2aa45b5a879feff526aad736a63b74", "html_url": "https://github.com/rust-lang/rust/commit/dc5feeb1fa2aa45b5a879feff526aad736a63b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5feeb1fa2aa45b5a879feff526aad736a63b74/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42e31fffc40342fa269214e0dbc3550f4b64f3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e31fffc40342fa269214e0dbc3550f4b64f3d3", "html_url": "https://github.com/rust-lang/rust/commit/42e31fffc40342fa269214e0dbc3550f4b64f3d3"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "a7e003a55b4007e3fe4f901aa1be8dc9b57fd878", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc5feeb1fa2aa45b5a879feff526aad736a63b74/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5feeb1fa2aa45b5a879feff526aad736a63b74/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=dc5feeb1fa2aa45b5a879feff526aad736a63b74", "patch": "@@ -35,7 +35,7 @@ use rustc_span::{Span, Symbol};\n #[macro_use]\n mod pass_manager;\n \n-use pass_manager::{self as pm, Lint, MirLint};\n+use pass_manager::{self as pm, Lint, MirLint, WithMinOptLevel};\n \n mod abort_unwinding_calls;\n mod add_call_guards;\n@@ -438,6 +438,10 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    fn o1<T>(x: T) -> WithMinOptLevel<T> {\n+        WithMinOptLevel(1, x)\n+    }\n+\n     // Lowering generator control-flow and variables has to happen before we do anything else\n     // to them. We run some optimizations before that, because they may be harder to do on the state\n     // machine than on MIR with async primitives.\n@@ -450,7 +454,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n             &unreachable_prop::UnreachablePropagation,\n             &uninhabited_enum_branching::UninhabitedEnumBranching,\n-            &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n+            &o1(simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\")),\n             &inline::Inline,\n             &generator::StateTransform,\n         ],\n@@ -472,17 +476,21 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &instcombine::InstCombine,\n             &separate_const_switch::SeparateConstSwitch,\n+            //\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,\n-            &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+            //\n+            // FIXME: The old pass manager ran this only at mir-opt-level >= 1, but\n+            // const-prop runs unconditionally. Should this run unconditionally as well?\n+            &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,\n             &simplify_try::SimplifyArmIdentity,\n             &simplify_try::SimplifyBranchSame,\n             &dest_prop::DestinationPropagation,\n-            &simplify_branches::SimplifyBranches::new(\"final\"),\n-            &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &simplify::SimplifyCfg::new(\"final\"),\n+            &o1(simplify_branches::SimplifyConstCondition::new(\"final\")),\n+            &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n+            &o1(simplify::SimplifyCfg::new(\"final\")),\n             &nrvo::RenameReturnPlace,\n             &const_debuginfo::ConstDebugInfo,\n             &simplify::SimplifyLocals,"}, {"sha": "729b8cae5e47acad54078a4e9b303577960c44ad", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc5feeb1fa2aa45b5a879feff526aad736a63b74/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5feeb1fa2aa45b5a879feff526aad736a63b74/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=dc5feeb1fa2aa45b5a879feff526aad736a63b74", "patch": "@@ -49,6 +49,29 @@ where\n     }\n }\n \n+pub struct WithMinOptLevel<T>(pub u32, pub T);\n+\n+impl<T> MirPass<'tcx> for WithMinOptLevel<T>\n+where\n+    T: MirPass<'tcx>,\n+{\n+    fn name(&self) -> Cow<'_, str> {\n+        self.1.name()\n+    }\n+\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        sess.mir_opt_level() >= self.0 as usize\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        self.1.run_pass(tcx, body)\n+    }\n+\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        self.1.phase_change()\n+    }\n+}\n+\n pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n     let start_phase = body.phase;\n     let mut cnt = 0;"}]}