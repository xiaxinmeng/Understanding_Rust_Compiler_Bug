{"sha": "44df04179902d248bfe1cff2fa346c02b40d3338", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZGYwNDE3OTkwMmQyNDhiZmUxY2ZmMmZhMzQ2YzAyYjQwZDMzMzg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T09:37:52Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T09:37:52Z"}, "message": "Stop needlessly boxing vectors in alias.rs", "tree": {"sha": "d09e7ed284b3d66ee35f4cbde01ca35113814fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09e7ed284b3d66ee35f4cbde01ca35113814fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44df04179902d248bfe1cff2fa346c02b40d3338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44df04179902d248bfe1cff2fa346c02b40d3338", "html_url": "https://github.com/rust-lang/rust/commit/44df04179902d248bfe1cff2fa346c02b40d3338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44df04179902d248bfe1cff2fa346c02b40d3338/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51dae63c44f7d82886436c9e90a3e26aa591d9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/51dae63c44f7d82886436c9e90a3e26aa591d9af", "html_url": "https://github.com/rust-lang/rust/commit/51dae63c44f7d82886436c9e90a3e26aa591d9af"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "339c0c9f610ba4da17b2b9f94bbceb3145c1fad5", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/44df04179902d248bfe1cff2fa346c02b40d3338/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df04179902d248bfe1cff2fa346c02b40d3338/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=44df04179902d248bfe1cff2fa346c02b40d3338", "patch": "@@ -23,7 +23,7 @@ type restrict = @{node_id: node_id,\n                   mutable ok: valid,\n                   mutable copied: copied};\n \n-type scope = @[restrict];\n+type scope = [restrict];\n \n tag local_info { local(uint); }\n \n@@ -38,17 +38,15 @@ type ctx =\n fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n     // Stores information about object fields and function\n     // arguments that's otherwise not easily available.\n-    let cx =\n-        @{tcx: tcx,\n-          local_map: std::map::new_int_hash(),\n-          mutable next_local: 0u,\n-          copy_map: std::map::new_int_hash()};\n-    let v =\n-        @{visit_fn: visit_fn,\n-          visit_expr: bind visit_expr(cx, _, _, _),\n-          visit_decl: bind visit_decl(cx, _, _, _)\n-             with *visit::default_visitor::<scope>()};\n-    visit::visit_crate(*crate, @[], visit::mk_vt(v));\n+    let cx = @{tcx: tcx,\n+               local_map: std::map::new_int_hash(),\n+               mutable next_local: 0u,\n+               copy_map: std::map::new_int_hash()};\n+    let v = @{visit_fn: visit_fn,\n+              visit_expr: bind visit_expr(cx, _, _, _),\n+              visit_decl: bind visit_decl(cx, _, _, _)\n+              with *visit::default_visitor::<scope>()};\n+    visit::visit_crate(*crate, [], visit::mk_vt(v));\n     tcx.sess.abort_if_errors();\n     ret cx.copy_map;\n }\n@@ -60,7 +58,7 @@ fn visit_fn(f: ast::_fn, _tp: [ast::ty_param], _sp: span, _name: fn_ident,\n       // Blocks need to obey any restrictions from the enclosing scope.\n       ast::proto_block. | ast::proto_closure. { sc }\n       // Non capturing functions start out fresh.\n-      _ { @[] }\n+      _ { [] }\n     };\n     v.visit_block(f.body, scope, v);\n }\n@@ -257,7 +255,7 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n     v.visit_expr(input, sc, v);\n     let root = expr_root(cx.tcx, input, true);\n     for a: ast::arm in arms {\n-        let new_sc = *sc;\n+        let new_sc = sc;\n         let root_var = path_def_id(cx, root.ex);\n         let pat_id_map = ast_util::pat_id_map(a.pats[0]);\n         type info = {id: node_id, mutable unsafe: [ty::t], span: span};\n@@ -288,7 +286,7 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n                          mutable copied: not_copied}];\n         }\n         register_locals(cx, a.pats[0]);\n-        visit::visit_arm(a, @new_sc, v);\n+        visit::visit_arm(a, new_sc, v);\n     }\n }\n \n@@ -297,7 +295,7 @@ fn check_for_each(cx: ctx, local: @ast::local, call: @ast::expr,\n     v.visit_expr(call, sc, v);\n     alt call.node {\n       ast::expr_call(f, args) {\n-        let new_sc = *sc + check_call(cx, f, args);\n+        let new_sc = sc + check_call(cx, f, args);\n         for proot in *pattern_roots(cx.tcx, [], local.node.pat) {\n             new_sc += [@{node_id: proot.id,\n                          span: proot.span,\n@@ -308,7 +306,7 @@ fn check_for_each(cx: ctx, local: @ast::local, call: @ast::expr,\n                          mutable copied: not_copied}];\n         }\n         register_locals(cx, local.node.pat);\n-        visit::visit_block(blk, @new_sc, v);\n+        visit::visit_block(blk, new_sc, v);\n       }\n     }\n }\n@@ -330,7 +328,7 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n       _ {}\n     }\n     let root_var = path_def_id(cx, root.ex);\n-    let new_sc = *sc;\n+    let new_sc = sc;\n     for proot in *pattern_roots(cx.tcx, ext_ds, local.node.pat) {\n         new_sc += [@{node_id: proot.id,\n                      span: proot.span,\n@@ -341,7 +339,7 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n                      mutable copied: not_copied}];\n     }\n     register_locals(cx, local.node.pat);\n-    visit::visit_block(blk, @new_sc, v);\n+    visit::visit_block(blk, new_sc, v);\n }\n \n fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n@@ -352,7 +350,7 @@ fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n     let my_local_id =\n         alt cx.local_map.find(my_defnum) { some(local(id)) { id } _ { 0u } };\n     let var_t = ty::expr_ty(cx.tcx, ex);\n-    for r: restrict in *sc {\n+    for r: restrict in sc {\n         // excludes variables introduced since the alias was made\n         if my_local_id < r.local_id {\n             for ty in r.unsafe_tys {\n@@ -371,7 +369,7 @@ fn check_lval(cx: @ctx, dest: @ast::expr, sc: scope, v: vt<scope>) {\n       ast::expr_path(p) {\n         let def = cx.tcx.def_map.get(dest.id);\n         let dnum = ast_util::def_id_of_def(def).node;\n-        for r: restrict in *sc {\n+        for r: restrict in sc {\n             if r.root_var == some(dnum) { r.ok = overwritten(dest.span, p); }\n         }\n       }\n@@ -389,7 +387,7 @@ fn test_scope(cx: ctx, sc: scope, r: restrict, p: ast::path) {\n     let prob = r.ok;\n     alt r.root_var {\n       some(dn) {\n-        for other in *sc {\n+        for other in sc {\n             if other.node_id == dn {\n                 prob = other.ok;\n                 if prob != valid { break; }"}]}