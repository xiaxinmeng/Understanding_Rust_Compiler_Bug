{"sha": "aa2def023e6b0aa8a68f4992423f566d435e55c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMmRlZjAyM2U2YjBhYThhNjhmNDk5MjQyM2Y1NjZkNDM1ZTU1YzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T16:40:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T16:40:12Z"}, "message": "Merge #5804\n\n5804: Add type safety to diagnostic codes\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "769fbd88c0845367795e1273333245d2cadfc475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769fbd88c0845367795e1273333245d2cadfc475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2def023e6b0aa8a68f4992423f566d435e55c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPARsCRBK7hj4Ov3rIwAAdHIIACUFygb1/4aioN0/yNUIMsoO\n4AnSnwUStPfoLc9sCbWQSt7WxPWAUUpdC9v64ugw+P68G6iDFBlneWE6ITyR3pYb\nKT7+dRWG1MP2lz4u9KGq2qAVXmMKmD97yqep95nUyJwuA42fuc9WjjNGICPO3xph\nEGwJNPDO8n8Wr95WmGDzEeYsqIf6C+FJM75Ash0XBJfLdkKLjW0hm3mCouUmDL4i\nSVngo6mICdO4s+SBrv3i6ushd8H3ODxPjmNr4f0DNC0qTJrBbA8z42bqVAwKUz3a\n24OjZl/wJaDEc4yHCiOD9k+BeSZy0ADJKjkue3DY8aXl+24oYPtdOeBqLet7CBE=\n=/cVV\n-----END PGP SIGNATURE-----\n", "payload": "tree 769fbd88c0845367795e1273333245d2cadfc475\nparent f7a8ce35256e6a79dbe641787007e18a74e52b16\nparent 8146669542dfc887956901b54a453c9a97fee7e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597768812 +0000\ncommitter GitHub <noreply@github.com> 1597768812 +0000\n\nMerge #5804\n\n5804: Add type safety to diagnostic codes\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2def023e6b0aa8a68f4992423f566d435e55c6", "html_url": "https://github.com/rust-lang/rust/commit/aa2def023e6b0aa8a68f4992423f566d435e55c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2def023e6b0aa8a68f4992423f566d435e55c6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a8ce35256e6a79dbe641787007e18a74e52b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a8ce35256e6a79dbe641787007e18a74e52b16", "html_url": "https://github.com/rust-lang/rust/commit/f7a8ce35256e6a79dbe641787007e18a74e52b16"}, {"sha": "8146669542dfc887956901b54a453c9a97fee7e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8146669542dfc887956901b54a453c9a97fee7e3", "html_url": "https://github.com/rust-lang/rust/commit/8146669542dfc887956901b54a453c9a97fee7e3"}], "stats": {"total": 127, "additions": 47, "deletions": 80}, "files": [{"sha": "3e19d9117a907e1975b0093c176e480d1cfadb8e", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=aa2def023e6b0aa8a68f4992423f566d435e55c6", "patch": "@@ -2,7 +2,7 @@\n \n use std::any::Any;\n \n-use hir_expand::diagnostics::Diagnostic;\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticCode};\n use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n@@ -15,8 +15,8 @@ pub struct UnresolvedModule {\n }\n \n impl Diagnostic for UnresolvedModule {\n-    fn name(&self) -> &'static str {\n-        \"unresolved-module\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unresolved-module\")\n     }\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()"}, {"sha": "78ccc212c84c4214feb2a8747371b14b25389e48", "filename": "crates/hir_expand/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs?ref=aa2def023e6b0aa8a68f4992423f566d435e55c6", "patch": "@@ -20,8 +20,17 @@ use syntax::SyntaxNodePtr;\n \n use crate::InFile;\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub struct DiagnosticCode(pub &'static str);\n+\n+impl DiagnosticCode {\n+    pub fn as_str(&self) -> &str {\n+        self.0\n+    }\n+}\n+\n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n-    fn name(&self) -> &'static str;\n+    fn code(&self) -> DiagnosticCode;\n     fn message(&self) -> String;\n     /// Used in highlighting and related purposes\n     fn display_source(&self) -> InFile<SyntaxNodePtr>;"}, {"sha": "9ba005fabd4e45dcd7741cc3d5f4492aeb8c2033", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=aa2def023e6b0aa8a68f4992423f566d435e55c6", "patch": "@@ -6,7 +6,7 @@ mod unsafe_check;\n use std::any::Any;\n \n use hir_def::DefWithBodyId;\n-use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticCode, DiagnosticSink};\n use hir_expand::{name::Name, HirFileId, InFile};\n use stdx::format_to;\n use syntax::{ast, AstPtr, SyntaxNodePtr};\n@@ -32,8 +32,8 @@ pub struct NoSuchField {\n }\n \n impl Diagnostic for NoSuchField {\n-    fn name(&self) -> &'static str {\n-        \"no-such-field\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"no-such-field\")\n     }\n \n     fn message(&self) -> String {\n@@ -58,8 +58,8 @@ pub struct MissingFields {\n }\n \n impl Diagnostic for MissingFields {\n-    fn name(&self) -> &'static str {\n-        \"missing-structure-fields\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-structure-fields\")\n     }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n@@ -94,8 +94,8 @@ pub struct MissingPatFields {\n }\n \n impl Diagnostic for MissingPatFields {\n-    fn name(&self) -> &'static str {\n-        \"missing-pat-fields\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-pat-fields\")\n     }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n@@ -127,8 +127,8 @@ pub struct MissingMatchArms {\n }\n \n impl Diagnostic for MissingMatchArms {\n-    fn name(&self) -> &'static str {\n-        \"missing-match-arm\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-match-arm\")\n     }\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n@@ -148,8 +148,8 @@ pub struct MissingOkInTailExpr {\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n-    fn name(&self) -> &'static str {\n-        \"missing-ok-in-tail-expr\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-ok-in-tail-expr\")\n     }\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n@@ -169,8 +169,8 @@ pub struct BreakOutsideOfLoop {\n }\n \n impl Diagnostic for BreakOutsideOfLoop {\n-    fn name(&self) -> &'static str {\n-        \"break-outside-of-loop\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"break-outside-of-loop\")\n     }\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n@@ -190,8 +190,8 @@ pub struct MissingUnsafe {\n }\n \n impl Diagnostic for MissingUnsafe {\n-    fn name(&self) -> &'static str {\n-        \"missing-unsafe\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-unsafe\")\n     }\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n@@ -213,8 +213,8 @@ pub struct MismatchedArgCount {\n }\n \n impl Diagnostic for MismatchedArgCount {\n-    fn name(&self) -> &'static str {\n-        \"mismatched-arg-count\"\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"mismatched-arg-count\")\n     }\n     fn message(&self) -> String {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };"}, {"sha": "92b5adaa2abb251627bbabfaa48a24dfdae43a78", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 59, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2def023e6b0aa8a68f4992423f566d435e55c6/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=aa2def023e6b0aa8a68f4992423f566d435e55c6", "patch": "@@ -25,7 +25,7 @@ use self::fixes::DiagnosticWithFix;\n \n #[derive(Debug)]\n pub struct Diagnostic {\n-    pub name: Option<String>,\n+    // pub name: Option<String>,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n@@ -71,7 +71,7 @@ pub(crate) fn diagnostics(\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(parse.errors().iter().take(128).map(|err| Diagnostic {\n-        name: None,\n+        // name: None,\n         range: err.range(),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n@@ -98,14 +98,14 @@ pub(crate) fn diagnostics(\n         })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n-        .filter(|diag| !config.disabled.contains(diag.name()));\n+        .filter(|diag| !config.disabled.contains(diag.code().as_str()));\n \n     // Finalize the `DiagnosticSink` building process.\n     let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name().into()),\n+                // name: Some(d.name().into()),\n                 message: d.message(),\n                 range: sema.diagnostics_display_range(d).range,\n                 severity: Severity::Error,\n@@ -122,7 +122,7 @@ pub(crate) fn diagnostics(\n \n fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n     Diagnostic {\n-        name: Some(d.name().into()),\n+        // name: Some(d.name().into()),\n         range: sema.diagnostics_display_range(d).range,\n         message: d.message(),\n         severity: Severity::Error,\n@@ -149,7 +149,7 @@ fn check_unnecessary_braces_in_use_statement(\n                 });\n \n         acc.push(Diagnostic {\n-            name: None,\n+            // name: None,\n             range: use_range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n@@ -196,7 +196,7 @@ fn check_struct_shorthand_initialization(\n \n                 let field_range = record_field.syntax().text_range();\n                 acc.push(Diagnostic {\n-                    name: None,\n+                    // name: None,\n                     range: field_range,\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n@@ -294,54 +294,6 @@ mod tests {\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n-    /// Takes a multi-file input fixture with annotated cursor position and the list of disabled diagnostics,\n-    /// and checks that provided diagnostics aren't spawned during analysis.\n-    fn check_disabled_diagnostics(ra_fixture: &str, disabled_diagnostics: &[&'static str]) {\n-        let mut config = DiagnosticsConfig::default();\n-        config.disabled = disabled_diagnostics.into_iter().map(|diag| diag.to_string()).collect();\n-\n-        let mock = MockAnalysis::with_files(ra_fixture);\n-        let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n-        let analysis = mock.analysis();\n-\n-        let diagnostics = files\n-            .clone()\n-            .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(&config, file_id).unwrap())\n-            .collect::<Vec<_>>();\n-\n-        // First, we have to check that diagnostic is not emitted when it's added to the disabled diagnostics list.\n-        for diagnostic in diagnostics {\n-            if let Some(name) = diagnostic.name {\n-                assert!(\n-                    !disabled_diagnostics.contains(&name.as_str()),\n-                    \"Diagnostic {} is disabled\",\n-                    name\n-                );\n-            }\n-        }\n-\n-        // Then, we must reset the config and repeat the check, so that we'll be sure that without\n-        // config these diagnostics are emitted.\n-        // This is required for tests to not become outdated if e.g. diagnostics name changes:\n-        // without this additional run the test will pass simply because a diagnostic with an old name\n-        // will no longer exist.\n-        let diagnostics = files\n-            .into_iter()\n-            .flat_map(|file_id| {\n-                analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n-            })\n-            .collect::<Vec<_>>();\n-\n-        assert!(\n-            diagnostics\n-                .into_iter()\n-                .filter_map(|diag| diag.name)\n-                .any(|name| disabled_diagnostics.contains(&name.as_str())),\n-            \"At least one of the diagnostics was not emitted even without config; are the diagnostics names correct?\"\n-        );\n-    }\n-\n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n@@ -604,9 +556,6 @@ fn test_fn() {\n             expect![[r#\"\n                 [\n                     Diagnostic {\n-                        name: Some(\n-                            \"unresolved-module\",\n-                        ),\n                         message: \"unresolved module\",\n                         range: 0..8,\n                         severity: Error,\n@@ -783,6 +732,15 @@ struct Foo {\n \n     #[test]\n     fn test_disabled_diagnostics() {\n-        check_disabled_diagnostics(r#\"mod foo;\"#, &[\"unresolved-module\"]);\n+        let mut config = DiagnosticsConfig::default();\n+        config.disabled.insert(\"unresolved-module\".into());\n+\n+        let (analysis, file_id) = single_file(r#\"mod foo;\"#);\n+\n+        let diagnostics = analysis.diagnostics(&config, file_id).unwrap();\n+        assert!(diagnostics.is_empty());\n+\n+        let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n+        assert!(!diagnostics.is_empty());\n     }\n }"}]}