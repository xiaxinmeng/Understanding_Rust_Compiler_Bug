{"sha": "57f7618f628e3028a301a8308c71ee7d49707d22", "node_id": "C_kwDOAAsO6NoAKDU3Zjc2MThmNjI4ZTMwMjhhMzAxYTgzMDhjNzFlZTdkNDk3MDdkMjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-07T06:52:27Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T03:17:20Z"}, "message": "Remove some usages of guess_head_span from typeck", "tree": {"sha": "81f4e4f934463ae5c454cbb3c27bcc37ad68a74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f4e4f934463ae5c454cbb3c27bcc37ad68a74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57f7618f628e3028a301a8308c71ee7d49707d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57f7618f628e3028a301a8308c71ee7d49707d22", "html_url": "https://github.com/rust-lang/rust/commit/57f7618f628e3028a301a8308c71ee7d49707d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57f7618f628e3028a301a8308c71ee7d49707d22/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad2334ecb8c9463458c166beb24391c627145a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad2334ecb8c9463458c166beb24391c627145a0", "html_url": "https://github.com/rust-lang/rust/commit/aad2334ecb8c9463458c166beb24391c627145a0"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "c3205aeb07477b395358b655545f986db8378121", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -1958,11 +1958,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         );\n                     }\n \n-                    if adt_def.did().is_local() {\n-                        err.span_label(\n-                            tcx.def_span(adt_def.did()),\n-                            format!(\"variant `{assoc_ident}` not found for this enum\"),\n-                        );\n+                    if let Some(sp) = tcx.hir().span_if_local(adt_def.did()) {\n+                        err.span_label(sp, format!(\"variant `{}` not found here\", assoc_ident));\n                     }\n \n                     err.emit()"}, {"sha": "7795e65132f5094cbd9d76e240849d9f3924f1da", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -1,6 +1,6 @@\n use crate::check::coercion::{AsCoercionSite, CoerceMany};\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n-use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n@@ -127,7 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &cause,\n                 Some(&arm.body),\n                 arm_ty,\n-                Some(&mut |err: &mut Diagnostic| {\n+                Some(&mut |err| {\n                     let Some(ret) = self.ret_type_span else {\n                         return;\n                     };"}, {"sha": "f384b67ee75f67fb492326cc2d502e376d6a7746", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -437,15 +437,17 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n         let item_kind = assoc_item_kind_str(impl_m);\n-        let def_span = tcx.sess.source_map().guess_head_span(span);\n         let span = impl_m\n             .def_id\n             .as_local()\n             .and_then(|did| tcx.hir().get_generics(did))\n-            .map_or(def_span, |g| g.span);\n-        let generics_span = trait_m.def_id.as_local().map(|did| {\n-            let def_sp = tcx.def_span(did);\n-            tcx.hir().get_generics(did).map_or(def_sp, |g| g.span)\n+            .map_or(span, |g| g.span);\n+        let generics_span = tcx.hir().span_if_local(trait_m.def_id).map(|sp| {\n+            trait_m\n+                .def_id\n+                .as_local()\n+                .and_then(|did| tcx.hir().get_generics(did))\n+                .map_or(sp, |g| g.span)\n         });\n \n         let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {"}, {"sha": "ddbc16139734ac5376af3b66cfbbd8307038b935", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -183,8 +183,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if let (ty::FnDef(def_id, ..), true) =\n             (&found.kind(), self.suggest_fn_call(err, expr, expected, found))\n         {\n-            if def_id.is_local() {\n-                err.span_label(self.tcx.def_span(def_id), &format!(\"{} defined here\", found));\n+            if let Some(sp) = self.tcx.hir().span_if_local(*def_id) {\n+                err.span_label(sp, format!(\"{found} defined here\"));\n             }\n         } else if !self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n             let is_struct_pat_shorthand_field ="}, {"sha": "f5572de38cb2fd218f7232a9c9ff94bdf602f129", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -621,9 +621,8 @@ fn missing_items_err(\n     // adding the associated item at the end of its body.\n     let sugg_sp = full_impl_span.with_lo(hi).with_hi(hi);\n     // Obtain the level of indentation ending in `sugg_sp`.\n-    let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n-    // Make the whitespace that will make the suggestion have the right indentation.\n-    let padding: String = \" \".repeat(indentation);\n+    let padding =\n+        tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n \n     for trait_item in missing_items {\n         let snippet = suggestion_signature(trait_item, tcx);"}, {"sha": "f9a25b69ff6210120212f96d52df10a2982e6ef5", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant named `B` found for enum `S`\n   --> $DIR/issue-34209.rs:7:12\n    |\n LL | enum S {\n-   | ------ variant `B` not found for this enum\n+   | ------ variant `B` not found here\n ...\n LL |         S::B {} => {},\n    |            ^ help: there is a variant with a similar name: `A`"}, {"sha": "a422bc65635418d5cb03faeb049fbde185c8e229", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57f7618f628e3028a301a8308c71ee7d49707d22/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f7618f628e3028a301a8308c71ee7d49707d22/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=57f7618f628e3028a301a8308c71ee7d49707d22", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant named `Squareee` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:12:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Squareee` not found for this enum\n+   | ---------- variant `Squareee` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n    |                                         ^^^^^^^^ help: there is a variant with a similar name: `Square`\n@@ -11,7 +11,7 @@ error[E0599]: no variant named `Circl` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:13:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Circl` not found for this enum\n+   | ---------- variant `Circl` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n    |                                         ^^^^^ help: there is a variant with a similar name: `Circle`\n@@ -20,7 +20,7 @@ error[E0599]: no variant named `Rombus` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:14:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Rombus` not found for this enum\n+   | ---------- variant `Rombus` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n    |                                         ^^^^^^ variant not found in `Shape`"}]}