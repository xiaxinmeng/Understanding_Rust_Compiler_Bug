{"sha": "9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "node_id": "C_kwDOAAsO6NoAKDljNTFjZjdlN2ZmZDRjYTFiNzE1OTY1N2E3NmUxZDRmYmFiMTgyNzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T19:11:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T19:11:05Z"}, "message": "Auto merge of #110546 - matthiaskrgr:rollup-346kik6, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #110123 ('./configure' now checks if 'config.toml' exists before writing to that destination)\n - #110429 (Spelling src bootstrap)\n - #110430 (Spelling src ci)\n - #110515 (Don't special-case download-rustc in `maybe_install_llvm`)\n - #110521 (Fix `x test lint-docs linkchecker` when download-rustc is enabled)\n - #110525 (Fix `tests/run-make-translation` when download-rustc is enabled)\n - #110531 (small type system cleanup)\n - #110533 (Missing blanket impl trait not public)\n - #110540 (Fix wrong comment in rustc_hir/src/hir.rs)\n - #110541 (Fix various configure bugs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "966375423147a92549520540aad967d289d9d464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966375423147a92549520540aad967d289d9d464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "html_url": "https://github.com/rust-lang/rust/commit/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0d9b492da81a647eedf17210cf55b86a44888c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0d9b492da81a647eedf17210cf55b86a44888c", "html_url": "https://github.com/rust-lang/rust/commit/df0d9b492da81a647eedf17210cf55b86a44888c"}, {"sha": "0820e31a00c02cdefe2e47a5b6c1df27ad531f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/0820e31a00c02cdefe2e47a5b6c1df27ad531f69", "html_url": "https://github.com/rust-lang/rust/commit/0820e31a00c02cdefe2e47a5b6c1df27ad531f69"}], "stats": {"total": 199, "additions": 113, "deletions": 86}, "files": [{"sha": "41b135972af11458ebc394377610af743f8731ae", "filename": "README.md", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -22,6 +22,8 @@ Read [\"Installation\"] from [The Book].\n \n The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. It lives at the root of the project.\n+It also uses a file named `config.toml` to determine various configuration settings for the build.\n+You can see a full list of options in `config.example.toml`.\n \n The `x.py` command can be run directly on most Unix systems in the following\n format:\n@@ -85,6 +87,8 @@ See [the rustc-dev-guide for more info][sysllvm].\n \n ### Building on a Unix-like system\n \n+#### Build steps\n+\n 1. Clone the [source] with `git`:\n \n    ```sh\n@@ -96,18 +100,13 @@ See [the rustc-dev-guide for more info][sysllvm].\n \n 2. Configure the build settings:\n \n-   The Rust build system uses a file named `config.toml` in the root of the\n-   source tree to determine various configuration settings for the build.\n-   Set up the defaults intended for distros to get started. You can see a full\n-   list of options in `config.example.toml`.\n-\n    ```sh\n-   printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n+   ./configure\n    ```\n \n    If you plan to use `x.py install` to create an installation, it is\n    recommended that you set the `prefix` value in the `[install]` section to a\n-   directory.\n+   directory: `./configure --set install.prefix=<path>`\n \n 3. Build and install:\n \n@@ -117,12 +116,25 @@ See [the rustc-dev-guide for more info][sysllvm].\n \n    When complete, `./x.py install` will place several programs into\n    `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n-   API-documentation tool. If you've set `profile = \"user\"` or\n-   `build.extended = true`, it will also include [Cargo], Rust's package\n-   manager.\n+   API-documentation tool. By default, it will also include [Cargo], Rust's package manager.\n+   You can disable this behavior by passing `--set build.extended=false` to `./configure`.\n \n [Cargo]: https://github.com/rust-lang/cargo\n \n+#### Configure and Make\n+\n+This project provides a configure script and makefile (the latter of which just invokes `x.py`).\n+`./configure` is the recommended way to programatically generate a `config.toml`. `make` is not\n+recommended (we suggest using `x.py` directly), but it is supported and we try not to break it\n+unnecessarily.\n+\n+```sh\n+./configure\n+make && sudo make install\n+```\n+\n+`configure` generates a `config.toml` which can also be used with normal `x.py` invocations.\n+\n ### Building on Windows\n \n On Windows, we suggest using [winget] to install dependencies by running the\n@@ -186,7 +198,7 @@ toolchain.\n 4. Navigate to Rust's source code (or clone it), then build it:\n \n    ```sh\n-   ./x.py build && ./x.py install\n+   python x.py setup user && python x.py build && python x.py install\n    ```\n \n #### MSVC\n@@ -204,6 +216,7 @@ With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:\n \n ```sh\n+python x.py setup user\n python x.py build\n ```\n \n@@ -232,21 +245,7 @@ Windows build triples are:\n \n The build triple can be specified by either specifying `--build=<triple>` when\n invoking `x.py` commands, or by creating a `config.toml` file (as described in\n-[Installing from Source](#installing-from-source)), and modifying the `build`\n-option under the `[build]` section.\n-\n-### Configure and Make\n-\n-While it's not the recommended build system, this project also provides a\n-configure script and makefile (the latter of which just invokes `x.py`).\n-\n-```sh\n-./configure\n-make && sudo make install\n-```\n-\n-`configure` generates a `config.toml` which can also be used with normal `x.py`\n-invocations.\n+[Building on a Unix-like system](#building-on-a-unix-like-system)), and passing `--set build.build=<triple>` to `./configure`.\n \n ## Building Documentation\n "}, {"sha": "486718ea6a00d1effa173cf9b7bea95f79625593", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1960,7 +1960,7 @@ pub enum ExprKind<'hir> {\n     Lit(&'hir Lit),\n     /// A cast (e.g., `foo as f64`).\n     Cast(&'hir Expr<'hir>, &'hir Ty<'hir>),\n-    /// A type reference (e.g., `Foo`).\n+    /// A type ascription (e.g., `x: Foo`). See RFC 3307.\n     Type(&'hir Expr<'hir>, &'hir Ty<'hir>),\n     /// Wraps the expression in a terminating scope.\n     /// This makes it semantically equivalent to `{ let _t = expr; _t }`."}, {"sha": "68002bfcfbd138231c319c15515c10c7404db0fc", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -178,7 +178,7 @@ impl FlagComputation {\n \n             &ty::Alias(ty::Projection, data) => {\n                 self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n-                self.add_projection_ty(data);\n+                self.add_alias_ty(data);\n             }\n \n             &ty::Alias(ty::Opaque, ty::AliasTy { substs, .. }) => {\n@@ -267,7 +267,7 @@ impl FlagComputation {\n                 projection_ty,\n                 term,\n             })) => {\n-                self.add_projection_ty(projection_ty);\n+                self.add_alias_ty(projection_ty);\n                 self.add_term(term);\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n@@ -372,8 +372,8 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: ty::AliasTy<'_>) {\n-        self.add_substs(projection_ty.substs);\n+    fn add_alias_ty(&mut self, alias_ty: ty::AliasTy<'_>) {\n+        self.add_substs(alias_ty.substs);\n     }\n \n     fn add_substs(&mut self, substs: &[GenericArg<'_>]) {"}, {"sha": "6808861d643ca9e1ff01aa6088e0c8a00d601bd0", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -170,29 +170,20 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n-        ty::PredicateKind::ObjectSafe(_) => {}\n-        ty::PredicateKind::ClosureKind(..) => {}\n-        ty::PredicateKind::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n-        ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n+\n         ty::PredicateKind::ConstEvaluatable(ct) => {\n             wf.compute(ct.into());\n         }\n-        ty::PredicateKind::ConstEquate(c1, c2) => {\n-            wf.compute(c1.into());\n-            wf.compute(c2.into());\n-        }\n-        ty::PredicateKind::Ambiguous => {}\n-        ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n-            bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n-        }\n-        ty::PredicateKind::AliasRelate(..) => {\n-            bug!(\"We should only wf check where clauses and `AliasRelate` is not a `Clause`\")\n+\n+        ty::PredicateKind::ObjectSafe(_)\n+        | ty::PredicateKind::ClosureKind(..)\n+        | ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n+        | ty::PredicateKind::AliasRelate(..)\n+        | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n+            bug!(\"We should only wf check where clauses, unexpected predicate: {predicate:?}\")\n         }\n     }\n "}, {"sha": "e6788ee6feecaa22b125e29d246109f3f4589b42", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -575,7 +575,7 @@ def fix_bin_or_dylib(self, fname):\n         ]\n         patchelf_args = [\"--set-rpath\", \":\".join(rpath_entries)]\n         if not fname.endswith(\".so\"):\n-            # Finally, set the corret .interp for binaries\n+            # Finally, set the correct .interp for binaries\n             with open(\"{}/nix-support/dynamic-linker\".format(nix_deps_dir)) as dynamic_linker:\n                 patchelf_args += [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n "}, {"sha": "26bd80a008fb33ab80f0d5db20f0eb64b7db6342", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -97,6 +97,7 @@ def serialize_and_parse(self, args):\n     def test_no_args(self):\n         build = self.serialize_and_parse([])\n         self.assertEqual(build.get_toml(\"changelog-seen\"), '2')\n+        self.assertEqual(build.get_toml(\"profile\"), 'user')\n         self.assertIsNone(build.get_toml(\"llvm.download-ci-llvm\"))\n \n     def test_set_section(self):\n@@ -107,10 +108,9 @@ def test_set_target(self):\n         build = self.serialize_and_parse([\"--set\", \"target.x86_64-unknown-linux-gnu.cc=gcc\"])\n         self.assertEqual(build.get_toml(\"cc\", section=\"target.x86_64-unknown-linux-gnu\"), 'gcc')\n \n-    # Uncomment when #108928 is fixed.\n-    # def test_set_top_level(self):\n-    #     build = self.serialize_and_parse([\"--set\", \"profile=compiler\"])\n-    #     self.assertEqual(build.get_toml(\"profile\"), 'compiler')\n+    def test_set_top_level(self):\n+        build = self.serialize_and_parse([\"--set\", \"profile=compiler\"])\n+        self.assertEqual(build.get_toml(\"profile\"), 'compiler')\n \n if __name__ == '__main__':\n     SUITE = unittest.TestSuite()"}, {"sha": "3d3f991bffaa745f626df3095e2bd15511881003", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1399,7 +1399,7 @@ impl<'a> Builder<'a> {\n \n         // Add extra cfg not defined in/by rustc\n         //\n-        // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n+        // Note: Although it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n         // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n         // `rustflags` without `cargo` making it required.\n         rustflags.arg(\"-Zunstable-options\");"}, {"sha": "87018574048a030fdfd48cb70d459b62c63e288a", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -22,7 +22,7 @@ pub enum GitInfo {\n     /// If the info should be used (`omit_git_hash` is false), this will be\n     /// `Some`, otherwise it will be `None`.\n     Present(Option<Info>),\n-    /// This is not a git repostory, but the info can be fetched from the\n+    /// This is not a git repository, but the info can be fetched from the\n     /// `git-commit-info` file.\n     RecordedForTarball(Info),\n }"}, {"sha": "f95a97518c55fe1fccfb4c032bf19440553367f7", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -417,6 +417,8 @@ def parse_example_config(known_args, config):\n         # Avoid using quotes unless it's necessary.\n         targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", \"'{}'\".format(target) if \".\" in target else target)\n \n+    if 'profile' not in config:\n+        set('profile', 'user', config)\n     configure_file(sections, top_level_keys, targets, config)\n     return section_order, sections, targets\n \n@@ -475,7 +477,7 @@ def configure_section(lines, config):\n def configure_top_level_key(lines, top_level_key, value):\n     for i, line in enumerate(lines):\n         if line.startswith('#' + top_level_key + ' = ') or line.startswith(top_level_key + ' = '):\n-            lines[i] = \"{} = {}\".format(top_level_key, value)\n+            lines[i] = \"{} = {}\".format(top_level_key, to_toml(value))\n             return\n \n     raise RuntimeError(\"failed to find config line for {}\".format(top_level_key))\n@@ -521,8 +523,14 @@ def write_config_toml(writer, section_order, targets, sections):\n         else:\n             writer = write_uncommented(sections[section], writer)\n \n+def quit_if_file_exists(file):\n+    if os.path.isfile(file):\n+        err(\"Existing '\" + file + \"' detected.\")\n \n if __name__ == \"__main__\":\n+    # If 'config.toml' already exists, exit the script at this point\n+    quit_if_file_exists('config.toml')\n+\n     p(\"processing command line\")\n     # Parse all known arguments into a configuration structure that reflects the\n     # TOML we're going to write out"}, {"sha": "3b35ca1d15dc867e5c3cc5068044aa5643d5c157", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1965,20 +1965,6 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         }\n     }\n \n-    // FIXME: for reasons I don't understand, the LLVM so in the `rustc` component is different than the one in `rust-dev`.\n-    // Only the one in `rustc` works with the downloaded compiler.\n-    if builder.download_rustc() && target == builder.build.build {\n-        let src_libdir = builder.ci_rustc_dir(target).join(\"lib\");\n-        for entry in t!(std::fs::read_dir(&src_libdir)) {\n-            let entry = t!(entry);\n-            if entry.file_name().to_str().unwrap().starts_with(\"libLLVM-\") {\n-                install_llvm_file(builder, &entry.path(), dst_libdir);\n-                return !builder.config.dry_run();\n-            }\n-        }\n-        panic!(\"libLLVM.so not found in src_libdir {}!\", src_libdir.display());\n-    }\n-\n     // On macOS, rustc (and LLVM tools) link to an unversioned libLLVM.dylib\n     // instead of libLLVM-11-rust-....dylib, as on linux. It's not entirely\n     // clear why this is the case, though. llvm-config will emit the versioned"}, {"sha": "cfc741863136892bea4b2568f052a16c5d0683c6", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1153,7 +1153,7 @@ impl Step for Libunwind {\n         run.builder.ensure(Libunwind { target: run.target });\n     }\n \n-    /// Build linunwind.a\n+    /// Build libunwind.a\n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         builder.update_submodule(&Path::new(\"src/llvm-project\"));\n "}, {"sha": "bedf34d89e8c90c3305b29bc632f40b63413b602", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1,7 +1,7 @@\n //! This module renders the JSON output of libtest into a human-readable form, trying to be as\n //! similar to libtest's native output as possible.\n //!\n-//! This is needed because we need to use libtest in JSON mode to extract granluar information\n+//! This is needed because we need to use libtest in JSON mode to extract granular information\n //! about the executed tests. Doing so suppresses the human-readable output, and (compared to Cargo\n //! and rustc) libtest doesn't include the rendered human-readable output as a JSON field. We had\n //! to reimplement all the rendering logic in this module because of that."}, {"sha": "140259b02135fd9ccfcef34615ac622288004a8a", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -100,7 +100,7 @@ pub fn check(build: &mut Build) {\n Couldn't find required command: cmake\n \n You should install cmake, or set `download-ci-llvm = true` in the\n-`[llvm]` section section of `config.toml` to download LLVM rather\n+`[llvm]` section of `config.toml` to download LLVM rather\n than building it.\n \"\n             );"}, {"sha": "9f7259f883a5963bb82cc42af0bbb9eb166ed0b1", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -211,7 +211,7 @@ For targets: `armv7-unknown-linux-gnueabihf`\n (\\*) These options have been selected to match the configuration of the arm\n       toolchains shipped with Ubuntu 15.10\n (+) These options have been selected to match the gcc flags we use to compile C\n-    libraries like jemalloc. See the mk/cfg/arm(v7)-uknown-linux-gnueabi{,hf}.mk\n+    libraries like jemalloc. See the mk/cfg/arm(v7)-unknown-linux-gnueabi{,hf}.mk\n     file in Rust's source code.\n \n ### `aarch64-linux-gnu.config`"}, {"sha": "4437a870b207ecd5fef1630757760cff2a1915d7", "filename": "src/ci/docker/host-x86_64/disabled/riscv64gc-linux/0001-Remove-stime-function-calls.patch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -5,7 +5,7 @@ Subject: [PATCH] Remove stime() function calls\n \n stime() has been deprecated in glibc 2.31 and replaced with\n clock_settime(). Let's replace the stime() function calls with\n-clock_settime() in preperation.\n+clock_settime() in preparation.\n \n function                                             old     new   delta\n rdate_main                                           197     224     +27"}, {"sha": "5bfbbae206b4180acf7543a76e69013ddb168222", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/mips-linux-gnu.config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -528,7 +528,7 @@ CT_CC_GCC_DEC_FLOAT_AUTO=y\n CT_CC_GCC_HAS_ARCH_OPTIONS=y\n \n #\n-# archictecture-specific options\n+# architecture-specific options\n #\n CT_CC_GCC_mips_llsc=m\n CT_CC_GCC_mips_synci=m"}, {"sha": "c28d655427e3c25b914646b8fd97fdef502d56ce", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/mips64-linux-gnu.config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -529,7 +529,7 @@ CT_CC_GCC_DEC_FLOAT_AUTO=y\n CT_CC_GCC_HAS_ARCH_OPTIONS=y\n \n #\n-# archictecture-specific options\n+# architecture-specific options\n #\n CT_CC_GCC_mips_llsc=m\n CT_CC_GCC_mips_synci=m"}, {"sha": "50dfe7b2dd1a61cb4afae205ce81d41a0d0c3dbc", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/mips64el-linux-gnu.config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -529,7 +529,7 @@ CT_CC_GCC_DEC_FLOAT_AUTO=y\n CT_CC_GCC_HAS_ARCH_OPTIONS=y\n \n #\n-# archictecture-specific options\n+# architecture-specific options\n #\n CT_CC_GCC_mips_llsc=m\n CT_CC_GCC_mips_synci=m"}, {"sha": "3566c7c8593e2143765d078c35f738b6c37d28fc", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/mipsel-linux-gnu.config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -528,7 +528,7 @@ CT_CC_GCC_DEC_FLOAT_AUTO=y\n CT_CC_GCC_HAS_ARCH_OPTIONS=y\n \n #\n-# archictecture-specific options\n+# architecture-specific options\n #\n CT_CC_GCC_mips_llsc=m\n CT_CC_GCC_mips_synci=m"}, {"sha": "a5691da8cda2dc38343c6718a12c026948f3d422", "filename": "src/ci/docker/host-x86_64/mingw-check/validate-toolstate.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash\n-# A quick smoke test to make sure publish_tooolstate.py works.\n+# A quick smoke test to make sure publish_toolstate.py works.\n \n set -euo pipefail\n IFS=$'\\n\\t'"}, {"sha": "c5d807b2d7d909af8587f41d133af11dbc64ba94", "filename": "src/ci/docker/scripts/qemu-bare-bones-rcS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -9,7 +9,7 @@ mount -t sysfs none /sys\n /addentropy < /addentropy\n cat /dev/urandom | head -n 2048 | /addentropy\n \n-# Set up IP that qemu expects. This confgures eth0 with the public IP that QEMU\n+# Set up IP that qemu expects. This configures eth0 with the public IP that QEMU\n # will communicate to as well as the loopback 127.0.0.1 address.\n ifconfig eth0 10.0.2.15\n ifconfig lo up"}, {"sha": "e4c05b57378352e443fc0fd60cec8f0844359147", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -20,7 +20,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         trace!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for trait_def_id in cx.tcx.all_traits() {\n-            if !cx.cache.effective_visibilities.is_directly_public(cx.tcx, trait_def_id)\n+            if !cx.cache.effective_visibilities.is_reachable(cx.tcx, trait_def_id)\n                 || cx.generated_synthetics.get(&(ty.0, trait_def_id)).is_some()\n             {\n                 continue;"}, {"sha": "b11fb287cf4dd4fe619a903fb4c34d9788b3354b", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -39,11 +39,12 @@ impl<'a> LintExtractor<'a> {\n     fn collect_groups(&self) -> Result<LintGroups, Box<dyn Error>> {\n         let mut result = BTreeMap::new();\n         let mut cmd = Command::new(self.rustc_path);\n+        cmd.env_remove(\"LD_LIBRARY_PATH\");\n         cmd.arg(\"-Whelp\");\n         let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n         if !output.status.success() {\n             return Err(format!(\n-                \"failed to collect lint info: {:?}\\n--- stderr\\n{}--- stdout\\n{}\\n\",\n+                \"failed to collect lint info: failed to run {cmd:?}: {:?}\\n--- stderr\\n{}--- stdout\\n{}\\n\",\n                 output.status,\n                 std::str::from_utf8(&output.stderr).unwrap(),\n                 std::str::from_utf8(&output.stdout).unwrap(),"}, {"sha": "fe29b9abda39a44b098e1c0a6a432fd3f5506b13", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -403,6 +403,12 @@ impl<'a> LintExtractor<'a> {\n         fs::write(&tempfile, source)\n             .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n         let mut cmd = Command::new(self.rustc_path);\n+        // NOTE: bootstrap sets `LD_LIBRARY_PATH` for building lint-docs itself.\n+        // Unfortunately, lint-docs is a bootstrap tool while rustc is built from source,\n+        // and sometimes the paths conflict. In particular, when using `download-rustc`,\n+        // the LLVM versions can differ between `ci-llvm` and `ci-rustc-sysroot`.\n+        // Unset LD_LIBRARY_PATH here so it doesn't interfere with running the compiler.\n+        cmd.env_remove(\"LD_LIBRARY_PATH\");\n         if options.contains(&\"edition2015\") {\n             cmd.arg(\"--edition=2015\");\n         } else {\n@@ -415,6 +421,9 @@ impl<'a> LintExtractor<'a> {\n         }\n         cmd.arg(\"lint_example.rs\");\n         cmd.current_dir(tempdir.path());\n+        if self.verbose {\n+            eprintln!(\"running: {cmd:?}\");\n+        }\n         let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n         let stderr = std::str::from_utf8(&output.stderr).unwrap();\n         let msgs = stderr"}, {"sha": "07e0547cfa090b532085531afeef6cfe495deed4", "filename": "tests/run-make/translation/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/tests%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/tests%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Ftranslation%2FMakefile?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -46,6 +46,8 @@ sysroot: test.rs working.ftl\n \trm -f $(FAKEROOT)/lib/rustlib/src\n \tmkdir $(FAKEROOT)/lib/rustlib/src\n \tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\t# When download-rustc is enabled, `$(SYSROOT)` will have a share directory. Delete the link to it.\n+\trm -f $(FAKEROOT)/share\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n \tln -s $(CURDIR)/working.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | $(CGREP) \"this is a test message\""}, {"sha": "95ddd4c74715aa4fb607b99ce424400565759799", "filename": "tests/rustdoc/issue-94183-blanket-impl-reexported-trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/tests%2Frustdoc%2Fissue-94183-blanket-impl-reexported-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276/tests%2Frustdoc%2Fissue-94183-blanket-impl-reexported-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-94183-blanket-impl-reexported-trait.rs?ref=9c51cf7e7ffd4ca1b7159657a76e1d4fbab18276", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/94183>.\n+// This test ensures that a publicly re-exported private trait will\n+// appear in the blanket impl list.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.S.html'\n+\n+mod actual_sub {\n+    pub trait Actual {}\n+    pub trait Another {}\n+\n+    // `Another` is publicly re-exported so it should appear in the blanket impl list.\n+    // @has - '//*[@id=\"blanket-implementations-list\"]//*[@class=\"code-header\"]' 'impl<T> Another for T'\n+    impl<T> Another for T {}\n+\n+    trait Foo {}\n+\n+    // `Foo` is not publicly re-exported nor reachable so it shouldn't appear in the\n+    // blanket impl list.\n+    // @!has - '//*[@id=\"blanket-implementations-list\"]//*[@class=\"code-header\"]' 'impl<T> Foo for T'\n+    impl<T> Foo for T {}\n+}\n+\n+pub use actual_sub::{Actual, Another};\n+\n+// `Actual` is publicly re-exported so it should appear in the blanket impl list.\n+// @has - '//*[@id=\"blanket-implementations-list\"]//*[@class=\"code-header\"]' 'impl<T> Actual for T'\n+impl<T> Actual for T {}\n+\n+pub struct S;"}]}