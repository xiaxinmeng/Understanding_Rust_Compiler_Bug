{"sha": "87420cd1bc9b032290e55e1569c6c45398eec929", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDIwY2QxYmM5YjAzMjI5MGU1NWUxNTY5YzZjNDUzOThlZWM5Mjk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-11T19:05:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-11T19:28:06Z"}, "message": "Make Place Boxed on Statement to reduce size from 64 bytes to 32 bytes", "tree": {"sha": "230f22dd4efee22056bfcd729f349374da5e479d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/230f22dd4efee22056bfcd729f349374da5e479d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87420cd1bc9b032290e55e1569c6c45398eec929", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl15SscACgkQiMlBzaHU\nZDIsZhAAtvH1EwGKVfDzUGDTHFIGhrAWgDnPu+dBJcWpboyCL0Y/GYY053Opr+j3\nPGKr02EFs5GnjPAXSQWIu1t+nQO0ZXoBx+u0REWiWVApa6X5jNRghZ1Lw142/8ih\n+x1Gmswu0HjPkcslCFaOy6iFylVzPFdqvsYW89cJ7Z8rstJHyCGLXPV0IoLyeqgR\n2V7XFdSz8qT+ym/IDqhenUXSDHKFDN9LsyQ+ZTSRHEarEsf08g5wMA/fzPgVPD03\ncoWW/QzL7a5hKcpYa4k4YUVFRFVqt58FCpN4eIDGT0/CU9VA5nM5T/YgDEHlrMI0\nJQ4IWnqHXvjj3yh+0Ljyr9kQKRrrG1VnulRD8UxLaS2gT03BuRqsaOiO8jen8/ZU\nZZDyx9UvXeSZHkvtjsDUVMUpfCjmIVTgGi6VhqDUT03OINLOyzecnt/Tl7B7FEVV\nf2Y8yWGh9VFuzPDPXJJAWNj9MxCVr74iYriSjA4LV00th6oEgHVv8+71VUzO9I96\noEZdGsPzGMadmVKVo9WvIja07gRd6vpRXWW/dZOURaz0EhCOCd25jkEdGNs+vGoB\n44j6ayu7gBjG+2otTY5L+EwwsstazZLqNjik7a4gciKWdOrPLtSC8Q5SvRxXFfR/\nwG1vIC4EdTEW/Q/JQFVvSx2ou3+5YzCe8uWQYuITdJ3+a9JPf7E=\n=lKTy\n-----END PGP SIGNATURE-----", "payload": "tree 230f22dd4efee22056bfcd729f349374da5e479d\nparent e73d189e4e2ad55fcea595a14f9adea0960c65a1\nauthor Santiago Pastorino <spastorino@gmail.com> 1568228745 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1568230086 -0300\n\nMake Place Boxed on Statement to reduce size from 64 bytes to 32 bytes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87420cd1bc9b032290e55e1569c6c45398eec929", "html_url": "https://github.com/rust-lang/rust/commit/87420cd1bc9b032290e55e1569c6c45398eec929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87420cd1bc9b032290e55e1569c6c45398eec929/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73d189e4e2ad55fcea595a14f9adea0960c65a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73d189e4e2ad55fcea595a14f9adea0960c65a1", "html_url": "https://github.com/rust-lang/rust/commit/e73d189e4e2ad55fcea595a14f9adea0960c65a1"}], "stats": {"total": 404, "additions": 228, "deletions": 176}, "files": [{"sha": "0ebc70750a6bba18aaffb2f1372e03ca7c723da0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -1547,7 +1547,7 @@ pub struct Statement<'tcx> {\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Statement<'_>, 64);\n+static_assert_size!(Statement<'_>, 32);\n \n impl Statement<'_> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n@@ -1568,7 +1568,7 @@ impl Statement<'_> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum StatementKind<'tcx> {\n     /// Write the RHS Rvalue to the LHS Place.\n-    Assign(Place<'tcx>, Box<Rvalue<'tcx>>),\n+    Assign(Box<(Place<'tcx>, Rvalue<'tcx>)>),\n \n     /// This represents all the reading that a pattern match may do\n     /// (e.g., inspecting constants and discriminant values), and the\n@@ -1577,10 +1577,10 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Note that this also is emitted for regular `let` bindings to ensure that locals that are\n     /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`\n-    FakeRead(FakeReadCause, Place<'tcx>),\n+    FakeRead(FakeReadCause, Box<Place<'tcx>>),\n \n     /// Write the discriminant for a variant to the enum Place.\n-    SetDiscriminant { place: Place<'tcx>, variant_index: VariantIdx },\n+    SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n \n     /// Start a live range for the storage of the local.\n     StorageLive(Local),\n@@ -1597,7 +1597,7 @@ pub enum StatementKind<'tcx> {\n     /// by miri and only generated when \"-Z mir-emit-retag\" is passed.\n     /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>\n     /// for more details.\n-    Retag(RetagKind, Place<'tcx>),\n+    Retag(RetagKind, Box<Place<'tcx>>),\n \n     /// Encodes a user's type ascription. These need to be preserved\n     /// intact so that NLL can respect them. For example:\n@@ -1611,7 +1611,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Contravariant` -- requires that `T_y :> T`\n     /// - `Invariant` -- requires that `T_y == T`\n     /// - `Bivariant` -- no effect\n-    AscribeUserType(Place<'tcx>, ty::Variance, Box<UserTypeProjection>),\n+    AscribeUserType(Box<(Place<'tcx>, UserTypeProjection)>, ty::Variance),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -1675,7 +1675,7 @@ impl Debug for Statement<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n-            Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n+            Assign(box(ref place, ref rv)) => write!(fmt, \"{:?} = {:?}\", place, rv),\n             FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n             Retag(ref kind, ref place) => write!(\n                 fmt,\n@@ -1696,7 +1696,7 @@ impl Debug for Statement<'_> {\n             InlineAsm(ref asm) => {\n                 write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n             }\n-            AscribeUserType(ref place, ref variance, ref c_ty) => {\n+            AscribeUserType(box(ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }\n             Nop => write!(fmt, \"nop\"),\n@@ -2998,14 +2998,14 @@ BraceStructTypeFoldableImpl! {\n \n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for StatementKind<'tcx> {\n-        (StatementKind::Assign)(a, b),\n+        (StatementKind::Assign)(a),\n         (StatementKind::FakeRead)(cause, place),\n         (StatementKind::SetDiscriminant) { place, variant_index },\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),\n         (StatementKind::InlineAsm)(a),\n         (StatementKind::Retag)(kind, place),\n-        (StatementKind::AscribeUserType)(a, v, b),\n+        (StatementKind::AscribeUserType)(a, v),\n         (StatementKind::Nop),\n     }\n }"}, {"sha": "1e3b9eb29c79d0f07198409ccc43ee32f66eb1c3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -344,7 +344,9 @@ macro_rules! make_mir_visitor {\n \n                 self.visit_source_info(source_info);\n                 match kind {\n-                    StatementKind::Assign(place, rvalue) => {\n+                    StatementKind::Assign(\n+                        box(ref $($mutability)? place, ref $($mutability)? rvalue)\n+                    ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n                     StatementKind::FakeRead(_, place) => {\n@@ -391,7 +393,10 @@ macro_rules! make_mir_visitor {\n                     StatementKind::Retag(kind, place) => {\n                         self.visit_retag(kind, place, location);\n                     }\n-                    StatementKind::AscribeUserType(place, variance, user_ty) => {\n+                    StatementKind::AscribeUserType(\n+                        box(ref $($mutability)? place, ref $($mutability)? user_ty),\n+                        variance\n+                    ) => {\n                         self.visit_ascribe_user_ty(place, variance, user_ty, location);\n                     }\n                     StatementKind::Nop => {}"}, {"sha": "dab7dfc04175110b57b369126d2817c1d9bb34fe", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -16,12 +16,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         self.set_debug_loc(&mut bx, statement.source_info);\n         match statement.kind {\n-            mir::StatementKind::Assign(ref place, ref rvalue) => {\n+            mir::StatementKind::Assign(box(ref place, ref rvalue)) => {\n                 if let mir::Place {\n                     base: mir::PlaceBase::Local(index),\n                     projection: box [],\n-                } = *place {\n-                    match self.locals[index] {\n+                } = place {\n+                    match self.locals[*index] {\n                         LocalRef::Place(cg_dest) => {\n                             self.codegen_rvalue(bx, cg_dest, rvalue)\n                         }\n@@ -30,7 +30,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                         LocalRef::Operand(None) => {\n                             let (mut bx, operand) = self.codegen_rvalue_operand(bx, rvalue);\n-                            if let Some(name) = self.mir.local_decls[index].name {\n+                            if let Some(name) = self.mir.local_decls[*index].name {\n                                 match operand.val {\n                                     OperandValue::Ref(x, ..) |\n                                     OperandValue::Immediate(x) => {\n@@ -44,7 +44,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     }\n                                 }\n                             }\n-                            self.locals[index] = LocalRef::Operand(Some(operand));\n+                            self.locals[*index] = LocalRef::Operand(Some(operand));\n                             bx\n                         }\n                         LocalRef::Operand(Some(op)) => {\n@@ -64,7 +64,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     self.codegen_rvalue(bx, cg_dest, rvalue)\n                 }\n             }\n-            mir::StatementKind::SetDiscriminant{ref place, variant_index} => {\n+            mir::StatementKind::SetDiscriminant{box ref place, variant_index} => {\n                 self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx"}, {"sha": "413f7e2e406356c43573fe59dfa8cd2de0c115e1", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -1600,7 +1600,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"annotate_argument_and_return_for_borrow: location={:?}\",\n             location\n         );\n-        if let Some(&Statement { kind: StatementKind::Assign(ref reservation, _), ..})\n+        if let Some(&Statement { kind: StatementKind::Assign(box(ref reservation, _)), ..})\n              = &self.body[location.block].statements.get(location.statement_index)\n         {\n             debug!(\n@@ -1625,11 +1625,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     target, stmt\n                 );\n                 if let StatementKind::Assign(\n-                    Place {\n-                        base: PlaceBase::Local(assigned_to),\n-                        projection: box [],\n-                    },\n-                    box rvalue\n+                    box(\n+                        Place {\n+                            base: PlaceBase::Local(assigned_to),\n+                            projection: box [],\n+                        },\n+                        rvalue\n+                    )\n                 ) = &stmt.kind {\n                     debug!(\n                         \"annotate_argument_and_return_for_borrow: assigned_to={:?} \\"}, {"sha": "5bccd2835c980d32f6d75caee10ead5fa486e834", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -41,7 +41,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut target = place.local_or_deref_local();\n         for stmt in &self.body[location.block].statements[location.statement_index..] {\n             debug!(\"add_moved_or_invoked_closure_note: stmt={:?} target={:?}\", stmt, target);\n-            if let StatementKind::Assign(into, box Rvalue::Use(from)) = &stmt.kind {\n+            if let StatementKind::Assign(box(into, Rvalue::Use(from))) = &stmt.kind {\n                 debug!(\"add_fnonce_closure_note: into={:?} from={:?}\", into, from);\n                 match from {\n                     Operand::Copy(ref place) |\n@@ -792,8 +792,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         debug!(\"move_spans: moved_place={:?} location={:?} stmt={:?}\", moved_place, location, stmt);\n         if let  StatementKind::Assign(\n-            _,\n-            box Rvalue::Aggregate(ref kind, ref places)\n+            box(_, Rvalue::Aggregate(ref kind, ref places))\n         ) = stmt.kind {\n             let (def_id, is_generator) = match kind {\n                 box AggregateKind::Closure(def_id, _) => (def_id, false),\n@@ -830,10 +829,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             .get(location.statement_index)\n         {\n             Some(&Statement {\n-                kind: StatementKind::Assign(Place {\n+                kind: StatementKind::Assign(box(Place {\n                     base: PlaceBase::Local(local),\n                     projection: box [],\n-                }, _),\n+                }, _)),\n                 ..\n             }) => local,\n             _ => return OtherUse(use_span),\n@@ -846,7 +845,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         for stmt in &self.body[location.block].statements[location.statement_index + 1..] {\n             if let StatementKind::Assign(\n-                _, box Rvalue::Aggregate(ref kind, ref places)\n+                box(_, Rvalue::Aggregate(ref kind, ref places))\n             ) = stmt.kind {\n                 let (def_id, is_generator) = match kind {\n                     box AggregateKind::Closure(def_id, _) => (def_id, false),"}, {"sha": "3b10d8f19668c26950bf82a30c05170816e96d0d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -546,7 +546,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n         self.check_activations(location, span, flow_state);\n \n         match stmt.kind {\n-            StatementKind::Assign(ref lhs, ref rhs) => {\n+            StatementKind::Assign(box(ref lhs, ref rhs)) => {\n                 self.consume_rvalue(\n                     location,\n                     (rhs, span),\n@@ -561,7 +561,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                     flow_state,\n                 );\n             }\n-            StatementKind::FakeRead(_, ref place) => {\n+            StatementKind::FakeRead(_, box ref place) => {\n                 // Read for match doesn't access any memory and is used to\n                 // assert that a place is safe and live. So we don't have to\n                 // do any checks here.\n@@ -1387,7 +1387,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let stmt = &bbd.statements[loc.statement_index];\n                 debug!(\"temporary assigned in: stmt={:?}\", stmt);\n \n-                if let StatementKind::Assign(_, box Rvalue::Ref(_, _, ref source)) = stmt.kind {\n+                if let StatementKind::Assign(box(_, Rvalue::Ref(_, _, ref source))) = stmt.kind {\n                     propagate_closure_used_mut_place(self, source);\n                 } else {\n                     bug!(\"closures should only capture user variables \\"}, {"sha": "aa732b0092a223f300a5528c6420ceab3498115b", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -89,11 +89,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 // If that ever stops being the case, then the ever initialized\n                 // flow could be used.\n                 if let Some(StatementKind::Assign(\n-                    Place {\n-                        base: PlaceBase::Local(local),\n-                        projection: box [],\n-                    },\n-                    box Rvalue::Use(Operand::Move(move_from)),\n+                    box(\n+                        Place {\n+                            base: PlaceBase::Local(local),\n+                            projection: box [],\n+                        },\n+                        Rvalue::Use(Operand::Move(move_from))\n+                    )\n                 )) = self.body.basic_blocks()[location.block]\n                     .statements\n                     .get(location.statement_index)"}, {"sha": "eae2f832ba7918c80ed68a97061100a312ff8073", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -541,10 +541,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // it which simplifies the termination logic.\n         let mut queue = vec![location];\n         let mut target = if let Some(&Statement {\n-            kind: StatementKind::Assign(Place {\n+            kind: StatementKind::Assign(box(Place {\n                 base: PlaceBase::Local(local),\n                 projection: box [],\n-            }, _),\n+            }, _)),\n             ..\n         }) = stmt\n         {\n@@ -567,7 +567,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 debug!(\"was_captured_by_trait_object: stmt={:?}\", stmt);\n \n                 // The only kind of statement that we care about is assignments...\n-                if let StatementKind::Assign(place, box rvalue) = &stmt.kind {\n+                if let StatementKind::Assign(box(place, rvalue)) = &stmt.kind {\n                     let into = match place.local_or_deref_local() {\n                         Some(into) => into,\n                         None => {"}, {"sha": "1d429e3a6dee6c721daa18e3e2b26d6700ccbda8", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n         self.check_activations(location);\n \n         match statement.kind {\n-            StatementKind::Assign(ref lhs, ref rhs) => {\n+            StatementKind::Assign(box(ref lhs, ref rhs)) => {\n                 self.consume_rvalue(\n                     location,\n                     rhs,"}, {"sha": "10c038bc3336fc51a2e809ed566545a24b02ceb5", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -1343,7 +1343,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         debug!(\"check_stmt: {:?}\", stmt);\n         let tcx = self.tcx();\n         match stmt.kind {\n-            StatementKind::Assign(ref place, ref rv) => {\n+            StatementKind::Assign(box(ref place, ref rv)) => {\n                 // Assignments to temporaries are not \"interesting\";\n                 // they are not caused by the user, but rather artifacts\n                 // of lowering. Assignments to other sorts of places *are* interesting\n@@ -1450,7 +1450,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::AscribeUserType(ref place, variance, box ref projection) => {\n+            StatementKind::AscribeUserType(box(ref place, ref projection), variance) => {\n                 let place_ty = place.ty(body, tcx).ty;\n                 if let Err(terr) = self.relate_type_and_user_type(\n                     place_ty,"}, {"sha": "695080dfe23d90e2e41b0d7ef870b576d3e17930", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -89,7 +89,7 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n         _location: Location,\n     ) {\n         match &statement.kind {\n-            StatementKind::Assign(into, _) => {\n+            StatementKind::Assign(box(into, _)) => {\n                 if let PlaceBase::Local(local) = into.base {\n                     debug!(\n                         \"visit_statement: statement={:?} local={:?} \\"}, {"sha": "3ed6b4ff346784c66e27a4fc17a664ece3acae91", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> CFG<'tcx> {\n                        rvalue: Rvalue<'tcx>) {\n         self.push(block, Statement {\n             source_info,\n-            kind: StatementKind::Assign(place.clone(), box rvalue)\n+            kind: StatementKind::Assign(box(place.clone(), rvalue))\n         });\n     }\n "}, {"sha": "09b33c6654a9db084a0bc431d1ed99bc81e54ec8", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -147,9 +147,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                place.clone(),\n+                                box(\n+                                    place.clone(),\n+                                    UserTypeProjection { base: annotation_index, projs: vec![], }\n+                                ),\n                                 Variance::Invariant,\n-                                box UserTypeProjection { base: annotation_index, projs: vec![], },\n                             ),\n                         },\n                     );\n@@ -174,9 +176,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                Place::from(temp.clone()),\n+                                box(\n+                                    Place::from(temp.clone()),\n+                                    UserTypeProjection { base: annotation_index, projs: vec![], },\n+                                ),\n                                 Variance::Invariant,\n-                                box UserTypeProjection { base: annotation_index, projs: vec![], },\n                             ),\n                         },\n                     );"}, {"sha": "613044dba29022ba32aa7b87716810fd7aa65f0c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             source_info,\n             kind: StatementKind::FakeRead(\n                 FakeReadCause::ForMatchedPlace,\n-                scrutinee_place.clone(),\n+                box(scrutinee_place.clone()),\n             ),\n         });\n \n@@ -320,7 +320,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place)),\n                     },\n                 );\n \n@@ -362,12 +362,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info: pattern_source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place.clone())),\n                     },\n                 );\n \n                 let ty_source_info = self.source_info(user_ty_span);\n-                let user_ty = box pat_ascription_ty.user_ty(\n+                let user_ty = pat_ascription_ty.user_ty(\n                     &mut self.canonical_user_type_annotations,\n                     place.ty(&self.local_decls, self.hir.tcx()).ty,\n                     ty_source_info.span,\n@@ -377,7 +377,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            place,\n+                            box(\n+                                place,\n+                                user_ty,\n+                            ),\n                             // We always use invariant as the variance here. This is because the\n                             // variance field from the ascription refers to the variance to use\n                             // when applying the type to the value being matched, but this\n@@ -393,7 +396,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             // contrast, is intended to be used to relate `T` to the type of\n                             // `<expr>`.\n                             ty::Variance::Invariant,\n-                            user_ty,\n                         ),\n                     },\n                 );\n@@ -1523,7 +1525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     source_info: guard_end,\n                     kind: StatementKind::FakeRead(\n                         FakeReadCause::ForMatchGuard,\n-                        Place::from(temp),\n+                        box(Place::from(temp)),\n                     ),\n                 });\n             }\n@@ -1573,7 +1575,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     post_guard_block,\n                     Statement {\n                         source_info: guard_end,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, place),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, box(place)),\n                     },\n                 );\n             }\n@@ -1606,7 +1608,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ascription.user_ty,\n             );\n \n-            let user_ty = box ascription.user_ty.clone().user_ty(\n+            let user_ty = ascription.user_ty.clone().user_ty(\n                 &mut self.canonical_user_type_annotations,\n                 ascription.source.ty(&self.local_decls, self.hir.tcx()).ty,\n                 source_info.span\n@@ -1616,9 +1618,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        ascription.source.clone(),\n+                        box(\n+                            ascription.source.clone(),\n+                            user_ty,\n+                        ),\n                         ascription.variance,\n-                        user_ty,\n                     ),\n                 },\n             );"}, {"sha": "a86fcb30f4d36ca97bbf7c94fec381eaf69e9834", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -268,8 +268,8 @@ impl<'a, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'tcx> {\n \n         debug!(\"Borrows::statement_effect: stmt={:?}\", stmt);\n         match stmt.kind {\n-            mir::StatementKind::Assign(ref lhs, ref rhs) => {\n-                if let mir::Rvalue::Ref(_, _, ref place) = **rhs {\n+            mir::StatementKind::Assign(box(ref lhs, ref rhs)) => {\n+                if let mir::Rvalue::Ref(_, _, ref place) = *rhs {\n                     if place.ignore_borrow(\n                         self.tcx,\n                         self.body,"}, {"sha": "0f66b13fdc51af33d7404e3113583334aec274d9", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -119,8 +119,8 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         match stmt.kind {\n             StatementKind::StorageLive(l) => sets.gen(l),\n             StatementKind::StorageDead(l) => sets.kill(l),\n-            StatementKind::Assign(ref place, _)\n-            | StatementKind::SetDiscriminant { ref place, .. } => {\n+            StatementKind::Assign(box(ref place, _))\n+            | StatementKind::SetDiscriminant { box ref place, .. } => {\n                 if let PlaceBase::Local(local) = place.base {\n                     sets.gen(local);\n                 }"}, {"sha": "698c50166270a2bea6b3b5d684df8ded2d746a1b", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -268,7 +268,7 @@ struct Gatherer<'b, 'a, 'tcx> {\n impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_statement(&mut self, stmt: &Statement<'tcx>) {\n         match stmt.kind {\n-            StatementKind::Assign(ref place, ref rval) => {\n+            StatementKind::Assign(box(ref place, ref rval)) => {\n                 self.create_move_path(place);\n                 if let RvalueInitializationState::Shallow = rval.initialization_state() {\n                     // Box starts out uninitialized - need to create a separate"}, {"sha": "affca10bf5265e01db586b9e71eb60e50185841f", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -82,7 +82,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.tcx.span = stmt.source_info.span;\n \n         match stmt.kind {\n-            Assign(ref place, ref rvalue) => self.eval_rvalue_into_place(rvalue, place)?,\n+            Assign(box(ref place, ref rvalue)) => self.eval_rvalue_into_place(rvalue, place)?,\n \n             SetDiscriminant {\n                 ref place,"}, {"sha": "6daca5e261431f7d4149c79b1945badd4e355f53", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -217,7 +217,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n             // Function arguments should be retagged, and we make this one raw.\n             body.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, dropee_ptr.clone()),\n+                kind: StatementKind::Retag(RetagKind::Raw, box(dropee_ptr.clone())),\n             });\n         }\n         let patch = {\n@@ -415,8 +415,10 @@ impl CloneShimBuilder<'tcx> {\n         let rcvr = Place::from(Local::new(1+0)).deref();\n         let ret_statement = self.make_statement(\n             StatementKind::Assign(\n-                Place::return_place(),\n-                box Rvalue::Use(Operand::Copy(rcvr))\n+                box(\n+                    Place::return_place(),\n+                    Rvalue::Use(Operand::Copy(rcvr))\n+                )\n             )\n         );\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n@@ -458,8 +460,10 @@ impl CloneShimBuilder<'tcx> {\n         // `let ref_loc: &ty = &src;`\n         let statement = self.make_statement(\n             StatementKind::Assign(\n-                ref_loc.clone(),\n-                box Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src)\n+                box(\n+                    ref_loc.clone(),\n+                    Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src)\n+                )\n             )\n         );\n \n@@ -486,8 +490,10 @@ impl CloneShimBuilder<'tcx> {\n         let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n         let compute_cond = self.make_statement(\n             StatementKind::Assign(\n-                cond.clone(),\n-                box Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg))\n+                box(\n+                    cond.clone(),\n+                    Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg))\n+                )\n             )\n         );\n \n@@ -521,14 +527,18 @@ impl CloneShimBuilder<'tcx> {\n         let inits = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n-                    Place::from(beg),\n-                    box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                    box(\n+                        Place::from(beg),\n+                        Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                    )\n                 )\n             ),\n             self.make_statement(\n                 StatementKind::Assign(\n-                    end.clone(),\n-                    box Rvalue::Use(Operand::Constant(self.make_usize(len)))\n+                    box(\n+                        end.clone(),\n+                        Rvalue::Use(Operand::Constant(self.make_usize(len)))\n+                    )\n                 )\n             )\n         ];\n@@ -559,11 +569,13 @@ impl CloneShimBuilder<'tcx> {\n         let statements = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n-                    Place::from(beg),\n-                    box Rvalue::BinaryOp(\n-                        BinOp::Add,\n-                        Operand::Copy(Place::from(beg)),\n-                        Operand::Constant(self.make_usize(1))\n+                    box(\n+                        Place::from(beg),\n+                        Rvalue::BinaryOp(\n+                            BinOp::Add,\n+                            Operand::Copy(Place::from(beg)),\n+                            Operand::Constant(self.make_usize(1))\n+                        )\n                     )\n                 )\n             )\n@@ -582,8 +594,10 @@ impl CloneShimBuilder<'tcx> {\n         let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n         let init = self.make_statement(\n             StatementKind::Assign(\n-                Place::from(beg),\n-                box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                box(\n+                    Place::from(beg),\n+                    Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                )\n             )\n         );\n         self.block(vec![init], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n@@ -609,11 +623,13 @@ impl CloneShimBuilder<'tcx> {\n         // `goto #6;`\n         let statement = self.make_statement(\n             StatementKind::Assign(\n-                Place::from(beg),\n-                box Rvalue::BinaryOp(\n-                    BinOp::Add,\n-                    Operand::Copy(Place::from(beg)),\n-                    Operand::Constant(self.make_usize(1))\n+                box(\n+                    Place::from(beg),\n+                    Rvalue::BinaryOp(\n+                        BinOp::Add,\n+                        Operand::Copy(Place::from(beg)),\n+                        Operand::Constant(self.make_usize(1))\n+                    )\n                 )\n             )\n         );\n@@ -727,8 +743,10 @@ fn build_call_shim<'tcx>(\n             statements.push(Statement {\n                 source_info,\n                 kind: StatementKind::Assign(\n-                    Place::from(ref_rcvr),\n-                    box Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_l)\n+                    box(\n+                        Place::from(ref_rcvr),\n+                        Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_l)\n+                    )\n                 )\n             });\n             Operand::Move(Place::from(ref_rcvr))"}, {"sha": "833c8b1646bb68d2ec31ad55f5db9a8809c927e2", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             basic_blocks[START_BLOCK].statements.splice(0..0,\n                 places.into_iter().map(|place| Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::FnEntry, place),\n+                    kind: StatementKind::Retag(RetagKind::FnEntry, box(place)),\n                 })\n             );\n         }\n@@ -125,7 +125,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         for (source_info, dest_place, dest_block) in returns {\n             basic_blocks[dest_block].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Default, dest_place),\n+                kind: StatementKind::Retag(RetagKind::Default, box(dest_place)),\n             });\n         }\n \n@@ -137,11 +137,11 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             for i in (0..block_data.statements.len()).rev() {\n                 let (retag_kind, place) = match block_data.statements[i].kind {\n                     // If we are casting *from* a reference, we may have to retag-as-raw.\n-                    StatementKind::Assign(ref place, box Rvalue::Cast(\n+                    StatementKind::Assign(box(ref place, Rvalue::Cast(\n                         CastKind::Misc,\n                         ref src,\n                         dest_ty,\n-                    )) => {\n+                    ))) => {\n                         let src_ty = src.ty(&*local_decls, tcx);\n                         if src_ty.is_region_ptr() {\n                             // The only `Misc` casts on references are those creating raw pointers.\n@@ -155,7 +155,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                     // Assignments of reference or ptr type are the ones where we may have\n                     // to update tags.  This includes `x = &[mut] ...` and hence\n                     // we also retag after taking a reference!\n-                    StatementKind::Assign(ref place, box ref rvalue) if needs_retag(place) => {\n+                    StatementKind::Assign(box(ref place, ref rvalue)) if needs_retag(place) => {\n                         let kind = match rvalue {\n                             Rvalue::Ref(_, borrow_kind, _)\n                                 if borrow_kind.allows_two_phase_borrow()\n@@ -173,7 +173,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 let source_info = block_data.statements[i].source_info;\n                 block_data.statements.insert(i+1, Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(retag_kind, place),\n+                    kind: StatementKind::Retag(retag_kind, box(place)),\n                 });\n             }\n         }"}, {"sha": "ea173279aa07321604650d5ae7fb19ec33b93895", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n                        location: Location) {\n         match statement.kind {\n             StatementKind::AscribeUserType(..)\n-            | StatementKind::Assign(_, box Rvalue::Ref(_, BorrowKind::Shallow, _))\n+            | StatementKind::Assign(box(_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n             | StatementKind::FakeRead(..) => statement.make_nop(),\n             _ => (),\n         }"}, {"sha": "614d5d2a4a2fbd5174564b233523934b1274ef63", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -665,7 +665,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         location: Location,\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n-        if let StatementKind::Assign(ref place, ref mut rval) = statement.kind {\n+        if let StatementKind::Assign(box(ref place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place\n                 .ty(&self.local_decls, self.tcx)\n                 .ty;"}, {"sha": "28f97f41b50cf7027d4d0181f3e6e71fcedab517", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -94,11 +94,13 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                     // That use of the source must be an assignment.\n                     match statement.kind {\n                         StatementKind::Assign(\n-                            Place {\n-                                base: PlaceBase::Local(local),\n-                                projection: box [],\n-                            },\n-                            box Rvalue::Use(ref operand)\n+                            box(\n+                                Place {\n+                                    base: PlaceBase::Local(local),\n+                                    projection: box [],\n+                                },\n+                                Rvalue::Use(ref operand)\n+                            )\n                         ) if local == dest_local => {\n                             let maybe_action = match *operand {\n                                 Operand::Copy(ref src_place) |\n@@ -148,24 +150,28 @@ fn eliminate_self_assignments(\n             if let Some(stmt) = body[location.block].statements.get(location.statement_index) {\n                 match stmt.kind {\n                     StatementKind::Assign(\n-                        Place {\n-                            base: PlaceBase::Local(local),\n-                            projection: box [],\n-                        },\n-                        box Rvalue::Use(Operand::Copy(Place {\n-                            base: PlaceBase::Local(src_local),\n-                            projection: box [],\n-                        })),\n+                        box(\n+                            Place {\n+                                base: PlaceBase::Local(local),\n+                                projection: box [],\n+                            },\n+                            Rvalue::Use(Operand::Copy(Place {\n+                                base: PlaceBase::Local(src_local),\n+                                projection: box [],\n+                            })),\n+                        )\n                     ) |\n                     StatementKind::Assign(\n-                        Place {\n-                            base: PlaceBase::Local(local),\n-                            projection: box [],\n-                        },\n-                        box Rvalue::Use(Operand::Move(Place {\n-                            base: PlaceBase::Local(src_local),\n-                            projection: box [],\n-                        })),\n+                        box(\n+                            Place {\n+                                base: PlaceBase::Local(local),\n+                                projection: box [],\n+                            },\n+                            Rvalue::Use(Operand::Move(Place {\n+                                base: PlaceBase::Local(src_local),\n+                                projection: box [],\n+                            })),\n+                        )\n                     ) if local == dest_local && dest_local == src_local => {}\n                     _ => {\n                         continue;"}, {"sha": "c1224be6324e20bd58379e882864c0e89420d1e2", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -12,8 +12,8 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n         for bb in basic_blocks {\n             bb.expand_statements(|stmt| {\n                 // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n-                if let StatementKind::Assign(_, ref rhs) = stmt.kind {\n-                    if let Rvalue::Aggregate(ref kind, _) = **rhs {\n+                if let StatementKind::Assign(box(_, ref rhs)) = stmt.kind {\n+                    if let Rvalue::Aggregate(ref kind, _) = *rhs {\n                         // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n                         if let AggregateKind::Array(_) = **kind {\n                             return None;\n@@ -28,7 +28,7 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n                 let stmt = stmt.replace_nop();\n                 let source_info = stmt.source_info;\n                 let (lhs, kind, operands) = match stmt.kind {\n-                    StatementKind::Assign(lhs, box rvalue) => {\n+                    StatementKind::Assign(box(lhs, rvalue)) => {\n                         match rvalue {\n                             Rvalue::Aggregate(kind, operands) => (lhs, kind, operands),\n                             _ => bug!()"}, {"sha": "a9c66b3c8c6d18dac2a90fa39358599414668692", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -452,7 +452,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(location.clone(), box Rvalue::Use(value.clone())),\n+            kind: StatementKind::Assign(box(location.clone(), Rvalue::Use(value.clone()))),\n             source_info: terminator.source_info\n         };\n "}, {"sha": "0ce2db93c421d0ce99d7e835aa19180e8ce7d783", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -217,7 +217,10 @@ impl TransformVisitor<'tcx> {\n         let self_place = Place::from(self_arg());\n         Statement {\n             source_info,\n-            kind: StatementKind::SetDiscriminant { place: self_place, variant_index: state_disc },\n+            kind: StatementKind::SetDiscriminant {\n+                place: box self_place,\n+                variant_index: state_disc,\n+            },\n         }\n     }\n \n@@ -230,7 +233,7 @@ impl TransformVisitor<'tcx> {\n         let self_place = Place::from(self_arg());\n         let assign = Statement {\n             source_info: source_info(body),\n-            kind: StatementKind::Assign(temp.clone(), box Rvalue::Discriminant(self_place)),\n+            kind: StatementKind::Assign(box(temp.clone(), Rvalue::Discriminant(self_place))),\n         };\n         (assign, temp)\n     }\n@@ -288,8 +291,12 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n             // We must assign the value first in case it gets declared dead below\n             data.statements.push(Statement {\n                 source_info,\n-                kind: StatementKind::Assign(Place::return_place(),\n-                                            box self.make_state(state_idx, v)),\n+                kind: StatementKind::Assign(\n+                    box(\n+                        Place::return_place(),\n+                        self.make_state(state_idx, v)\n+                    )\n+                ),\n             });\n             let state = if let Some(resume) = resume { // Yield\n                 let state = 3 + self.suspension_points.len();\n@@ -929,7 +936,7 @@ fn create_generator_drop_shim<'tcx>(\n         // Alias tracking must know we changed the type\n         body.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n             source_info,\n-            kind: StatementKind::Retag(RetagKind::Raw, Place::from(self_arg())),\n+            kind: StatementKind::Retag(RetagKind::Raw, box Place::from(self_arg())),\n         })\n     }\n "}, {"sha": "5ad026dc143c9574c4dbce509b8371555877eacf", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -457,7 +457,7 @@ impl Inliner<'tcx> {\n \n                     let stmt = Statement {\n                         source_info: callsite.location,\n-                        kind: StatementKind::Assign(tmp.clone(), box dest)\n+                        kind: StatementKind::Assign(box(tmp.clone(), dest))\n                     };\n                     caller_body[callsite.bb]\n                         .statements.push(stmt);\n@@ -608,7 +608,7 @@ impl Inliner<'tcx> {\n \n         let stmt = Statement {\n             source_info: callsite.location,\n-            kind: StatementKind::Assign(Place::from(arg_tmp), box arg),\n+            kind: StatementKind::Assign(box(Place::from(arg_tmp), arg)),\n         };\n         caller_body[callsite.bb].statements.push(stmt);\n         arg_tmp"}, {"sha": "7d1b96b8be170dc89d11cde8d5194285a88cf723", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            kind: StatementKind::Assign(Place::from(dest), box rvalue)\n+            kind: StatementKind::Assign(box(Place::from(dest), rvalue))\n         });\n     }\n \n@@ -222,10 +222,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         // First, take the Rvalue or Call out of the source MIR,\n         // or duplicate it, depending on keep_original.\n         if loc.statement_index < no_stmts {\n-            let (rvalue, source_info) = {\n+            let (mut rvalue, source_info) = {\n                 let statement = &mut self.source[loc.block].statements[loc.statement_index];\n                 let rhs = match statement.kind {\n-                    StatementKind::Assign(_, ref mut rhs) => rhs,\n+                    StatementKind::Assign(box(_, ref mut rhs)) => rhs,\n                     _ => {\n                         span_bug!(statement.source_info.span, \"{:?} is not an assignment\",\n                                   statement);\n@@ -235,12 +235,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 (if self.keep_original {\n                     rhs.clone()\n                 } else {\n-                    let unit = box Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n+                    let unit = Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n                     mem::replace(rhs, unit)\n                 }, statement.source_info)\n             };\n \n-            let mut rvalue = *rvalue;\n             self.visit_rvalue(&mut rvalue, loc);\n             self.assign(new_temp, rvalue, source_info.span);\n         } else {\n@@ -326,7 +325,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Candidate::Ref(loc) => {\n                     let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n-                        StatementKind::Assign(_, box Rvalue::Ref(_, _, ref mut place)) => {\n+                        StatementKind::Assign(box(_, Rvalue::Ref(_, _, ref mut place))) => {\n                             // Use the underlying local for this (necessarily interior) borrow.\n                             let ty = place.base.ty(local_decls).ty;\n                             let span = statement.source_info.span;\n@@ -345,7 +344,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Candidate::Repeat(loc) => {\n                     let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n-                        StatementKind::Assign(_, box Rvalue::Repeat(ref mut operand, _)) => {\n+                        StatementKind::Assign(box(_, Rvalue::Repeat(ref mut operand, _))) => {\n                             let ty = operand.ty(local_decls, self.tcx);\n                             let span = statement.source_info.span;\n                             mem::replace(\n@@ -420,10 +419,10 @@ pub fn promote_candidates<'tcx>(\n             Candidate::Repeat(Location { block, statement_index }) |\n             Candidate::Ref(Location { block, statement_index }) => {\n                 match body[block].statements[statement_index].kind {\n-                    StatementKind::Assign(Place {\n+                    StatementKind::Assign(box(Place {\n                         base: PlaceBase::Local(local),\n                         projection: box [],\n-                    }, _) => {\n+                    }, _)) => {\n                         if temps[local] == TempState::PromotedOut {\n                             // Already promoted.\n                             continue;\n@@ -473,10 +472,10 @@ pub fn promote_candidates<'tcx>(\n     for block in body.basic_blocks_mut() {\n         block.statements.retain(|statement| {\n             match statement.kind {\n-                StatementKind::Assign(Place {\n+                StatementKind::Assign(box(Place {\n                     base: PlaceBase::Local(index),\n                     projection: box [],\n-                }, _) |\n+                }, _)) |\n                 StatementKind::StorageLive(index) |\n                 StatementKind::StorageDead(index) => {\n                     !promoted(index)"}, {"sha": "7cc1e634cf812da820c6aa6428d4e134eef85e83", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -982,23 +982,25 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         for candidate in &self.promotion_candidates {\n             match *candidate {\n                 Candidate::Repeat(Location { block: bb, statement_index: stmt_idx }) => {\n-                    if let StatementKind::Assign(_, box Rvalue::Repeat(\n+                    if let StatementKind::Assign(box(_, Rvalue::Repeat(\n                         Operand::Move(Place {\n                             base: PlaceBase::Local(index),\n                             projection: box [],\n                         }),\n                         _\n-                    )) = self.body[bb].statements[stmt_idx].kind {\n+                    ))) = self.body[bb].statements[stmt_idx].kind {\n                         promoted_temps.insert(index);\n                     }\n                 }\n                 Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n                     if let StatementKind::Assign(\n-                        _,\n-                        box Rvalue::Ref(_, _, Place {\n-                            base: PlaceBase::Local(index),\n-                            projection: box [],\n-                        })\n+                        box(\n+                            _,\n+                            Rvalue::Ref(_, _, Place {\n+                                base: PlaceBase::Local(index),\n+                                projection: box [],\n+                            })\n+                        )\n                     ) = self.body[bb].statements[stmt_idx].kind {\n                         promoted_temps.insert(index);\n                     }"}, {"sha": "80e020a9eb7e65b8442040178ddb657c975c554e", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -206,7 +206,7 @@ fn check_statement(\n ) -> McfResult {\n     let span = statement.source_info.span;\n     match &statement.kind {\n-        StatementKind::Assign(place, rval) => {\n+        StatementKind::Assign(box(place, rval)) => {\n             check_place(place, span)?;\n             check_rvalue(tcx, body, rval, span)\n         }"}, {"sha": "70b11944e2fbcc463288cf09b745cd47a5121fc1", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -41,10 +41,10 @@ impl RemoveNoopLandingPads {\n                     // These are all nops in a landing pad\n                 }\n \n-                StatementKind::Assign(Place {\n+                StatementKind::Assign(box(Place {\n                     base: PlaceBase::Local(_),\n                     projection: box [],\n-                }, box Rvalue::Use(_)) => {\n+                }, Rvalue::Use(_))) => {\n                     // Writing to a local (e.g., a drop flag) does not\n                     // turn a landing pad to a non-nop\n                 }"}, {"sha": "68fa082d2940786ab737eca0b02c30fcb1b73a17", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -150,7 +150,7 @@ fn each_block<'tcx, O>(\n     for (j, stmt) in statements.iter().enumerate() {\n         debug!(\"rustc_peek: ({:?},{}) {:?}\", bb, j, stmt);\n         let (place, rvalue) = match stmt.kind {\n-            mir::StatementKind::Assign(ref place, ref rvalue) => {\n+            mir::StatementKind::Assign(box(ref place, ref rvalue)) => {\n                 (place, rvalue)\n             }\n             mir::StatementKind::FakeRead(..) |\n@@ -166,7 +166,7 @@ fn each_block<'tcx, O>(\n         };\n \n         if place == peek_arg_place {\n-            if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = **rvalue {\n+            if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = *rvalue {\n                 // Okay, our search is over.\n                 match move_data.rev_lookup.find(peeking_at_place.as_ref()) {\n                     LookupResult::Exact(peek_mpi) => {"}, {"sha": "34ad5cb5dc787d8762262a0b327a54e3a7fb476d", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -200,8 +200,8 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n \n             for candidate in &visitor.candidates {\n                 let statement = &body[candidate.block].statements[candidate.statement_index];\n-                if let StatementKind::Assign(ref dst_place, ref rval) = statement.kind {\n-                    if let Rvalue::Aggregate(box AggregateKind::Array(_), ref items) = **rval {\n+                if let StatementKind::Assign(box(ref dst_place, ref rval)) = statement.kind {\n+                    if let Rvalue::Aggregate(box AggregateKind::Array(_), ref items) = *rval {\n                         let items : Vec<_> = items.iter().map(|item| {\n                             if let Operand::Move(Place {\n                                 base: PlaceBase::Local(local),\n@@ -293,24 +293,28 @@ impl RestoreSubsliceArrayMoveOut {\n             if block.statements.len() > location.statement_index {\n                 let statement = &block.statements[location.statement_index];\n                 if let StatementKind::Assign(\n-                    Place {\n-                        base: PlaceBase::Local(_),\n-                        projection: box [],\n-                    },\n-                    box Rvalue::Use(Operand::Move(Place {\n-                        base: _,\n-                        projection: box [.., ProjectionElem::ConstantIndex {\n+                    box(\n+                        Place {\n+                            base: PlaceBase::Local(_),\n+                            projection: box [],\n+                        },\n+                        Rvalue::Use(Operand::Move(Place {\n+                            base: _,\n+                            projection: box [.., ProjectionElem::ConstantIndex {\n                                 offset, min_length: _, from_end: false\n-                        }],\n-                    })),\n+                            }],\n+                        })),\n+                    )\n                 ) = &statement.kind {\n                     // FIXME remove once we can use slices patterns\n                     if let StatementKind::Assign(\n-                        _,\n-                        box Rvalue::Use(Operand::Move(Place {\n-                            base,\n-                            projection: box [proj_base @ .., _],\n-                        })),\n+                        box(\n+                            _,\n+                            Rvalue::Use(Operand::Move(Place {\n+                                base,\n+                                projection: box [proj_base @ .., _],\n+                            })),\n+                        )\n                     ) = &statement.kind {\n                         return Some((*offset, PlaceRef {\n                             base,"}, {"sha": "b3565d40b8e217e9bdab4f4f2a737adfb3654481", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -24,7 +24,7 @@ pub fn expand_aggregate<'tcx>(\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n                     kind: StatementKind::SetDiscriminant {\n-                        place: lhs.clone(),\n+                        place: box(lhs.clone()),\n                         variant_index,\n                     },\n                     source_info,\n@@ -39,7 +39,7 @@ pub fn expand_aggregate<'tcx>(\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n                 kind: StatementKind::SetDiscriminant {\n-                    place: lhs.clone(),\n+                    place: box(lhs.clone()),\n                     variant_index,\n                 },\n                 source_info,\n@@ -70,7 +70,7 @@ pub fn expand_aggregate<'tcx>(\n         };\n         Statement {\n             source_info,\n-            kind: StatementKind::Assign(lhs_field, box Rvalue::Use(op)),\n+            kind: StatementKind::Assign(box(lhs_field, Rvalue::Use(op))),\n         }\n     }).chain(set_discriminant)\n }"}, {"sha": "52ad97bbde1d7ce6a471d9ccc33d8dcaf22f06d1", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -978,7 +978,7 @@ where\n     fn assign(&self, lhs: &Place<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> {\n         Statement {\n             source_info: self.source_info,\n-            kind: StatementKind::Assign(lhs.clone(), box rhs)\n+            kind: StatementKind::Assign(box(lhs.clone(), rhs))\n         }\n     }\n }"}, {"sha": "2ea9924af7f28d427ccb150392262f8ce2032056", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87420cd1bc9b032290e55e1569c6c45398eec929/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=87420cd1bc9b032290e55e1569c6c45398eec929", "patch": "@@ -120,7 +120,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn add_assign(&mut self, loc: Location, place: Place<'tcx>, rv: Rvalue<'tcx>) {\n-        self.add_statement(loc, StatementKind::Assign(place, box rv));\n+        self.add_statement(loc, StatementKind::Assign(box(place, rv)));\n     }\n \n     pub fn make_nop(&mut self, loc: Location) {"}]}