{"sha": "4720fcac4c8a9667f8160a67260a080a2553cd58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjBmY2FjNGM4YTk2NjdmODE2MGE2NzI2MGEwODBhMjU1M2NkNTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T12:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T12:35:33Z"}, "message": "Rollup merge of #59216 - stepnivlk:type_dependent_defs-wrappers, r=oli-obk\n\nType dependent defs wrappers\n\nFirst of all, forgive me if something would seem lame to you or I offend some rule (although I tried to read through docs), this is my first PR.\n\nIssue: https://github.com/rust-lang/rust/issues/59094\n\nThis PR adds 3 helper methods to `TypeckTables`:\n* `opt_type_dependent_def`\n* `opt_type_dependent_def_id`\n* `type_dependent_def_id`\n\nI didn't add `type_dependent_def` as was proposed in the issue simply because it wasn't used anywhere in the code. Only non-option wrapped`type_dependent_defs()[]` accesses were found in clippy which always called `def_id()` on result.\nSpeaking of clippy, should I open separate PR in its own repo, given it's used as submodule here?\n\nSry it took me so long, as I said I'm new here and I had tough week :).", "tree": {"sha": "0d6a3c59aff79089cf7ba067dd2518a362b33195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6a3c59aff79089cf7ba067dd2518a362b33195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4720fcac4c8a9667f8160a67260a080a2553cd58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnL+VCRBK7hj4Ov3rIwAAdHIIAKAIYFygzT6xXZoi+PwnhlPF\nSMlCs1jAs+h8hQDBc46kQAekVxTLPYMgW1v8PQXpvdTi0CAgsk/Mo7CVqkx3f72G\n9uEi9MHDVRM14hNwIHPcvPhxODpn5PPmT9RqFVP8Ece6XrvKPMuVn4z8omDLvBs0\nNrPXnuxI9N+1Jtcmydr2eP6JelKIBFseICkB/jtOXfcdiPDur1iNcWS2TFGFfrhd\nUIrhjOr574czTUg9aHsLU/wz4ctP0W10y4XUYr6PsDL3vwVKcjCwYi7gdeUwvbb/\nFbqK8E8hesAhd5IPoku6h00IJ4WgST/2EMI/KHGGU+4sfBvsFQgAdlHTJAI69OM=\n=oSF8\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d6a3c59aff79089cf7ba067dd2518a362b33195\nparent edad34b3d7425248562018cf4234f46d73805dce\nparent f4742f46fe540e289888eec0bac077ff606f63c5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553776533 +0100\ncommitter GitHub <noreply@github.com> 1553776533 +0100\n\nRollup merge of #59216 - stepnivlk:type_dependent_defs-wrappers, r=oli-obk\n\nType dependent defs wrappers\n\nFirst of all, forgive me if something would seem lame to you or I offend some rule (although I tried to read through docs), this is my first PR.\n\nIssue: https://github.com/rust-lang/rust/issues/59094\n\nThis PR adds 3 helper methods to `TypeckTables`:\n* `opt_type_dependent_def`\n* `opt_type_dependent_def_id`\n* `type_dependent_def_id`\n\nI didn't add `type_dependent_def` as was proposed in the issue simply because it wasn't used anywhere in the code. Only non-option wrapped`type_dependent_defs()[]` accesses were found in clippy which always called `def_id()` on result.\nSpeaking of clippy, should I open separate PR in its own repo, given it's used as submodule here?\n\nSry it took me so long, as I said I'm new here and I had tough week :).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4720fcac4c8a9667f8160a67260a080a2553cd58", "html_url": "https://github.com/rust-lang/rust/commit/4720fcac4c8a9667f8160a67260a080a2553cd58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4720fcac4c8a9667f8160a67260a080a2553cd58/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edad34b3d7425248562018cf4234f46d73805dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/edad34b3d7425248562018cf4234f46d73805dce", "html_url": "https://github.com/rust-lang/rust/commit/edad34b3d7425248562018cf4234f46d73805dce"}, {"sha": "f4742f46fe540e289888eec0bac077ff606f63c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4742f46fe540e289888eec0bac077ff606f63c5", "html_url": "https://github.com/rust-lang/rust/commit/f4742f46fe540e289888eec0bac077ff606f63c5"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "8e8543dd334f67939f7bf86ae74dc14e61a18526", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -98,8 +98,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_method(&mut self, id: hir::HirId) {\n-        if let Some(def) = self.tables.type_dependent_defs().get(id) {\n-            self.check_def_id(def.def_id());\n+        if let Some(def_id) = self.tables.type_dependent_def_id(id) {\n+            self.check_def_id(def_id);\n         } else {\n             bug!(\"no type-dependent def for method\");\n         }"}, {"sha": "01e57273e54a1d10c9346be8cf498910e8da04c0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -559,8 +559,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n             ty::Error => { }\n             _ => {\n-                if let Some(def) = self.mc.tables.type_dependent_defs().get(call.hir_id) {\n-                    let def_id = def.def_id();\n+                if let Some(def_id) = self.mc.tables.type_dependent_def_id(call.hir_id) {\n                     let call_scope = region::Scope {\n                         id: call.hir_id.local_id,\n                         data: region::ScopeData::Node"}, {"sha": "b55e840596b851b5cc24f7c577972fa64ce815c6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                 Some(self.tables.qpath_def(qpath, expr.hir_id))\n             }\n             hir::ExprKind::MethodCall(..) => {\n-                self.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                self.tables.type_dependent_def(expr.hir_id)\n             }\n             _ => None\n         };"}, {"sha": "ea003ba1ac7010662ed7faf59f73216b036b2fee", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -482,6 +482,15 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn type_dependent_def(&self, id: HirId) -> Option<Def> {\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n+        self.type_dependent_defs.get(&id.local_id).cloned()\n+    }\n+\n+    pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {\n+        self.type_dependent_def(id).map(|def| def.def_id())\n+    }\n+\n     pub fn type_dependent_defs_mut(&mut self) -> LocalTableInContextMut<'_, Def> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,"}, {"sha": "37c147d93d85c65d4e1c5c7ce9a1bbc4647609e7", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 }\n             },\n             hir::ExprKind::MethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                cx.tables.type_dependent_def(expr.hir_id)\n             },\n             _ => None\n         };"}, {"sha": "e4f92f81e9ff6c92ae3fae57f92f4950926d8ac9", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -834,13 +834,11 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     let (def_id, substs, user_ty) = match overloaded_callee {\n         Some((def_id, substs)) => (def_id, substs, None),\n         None => {\n-            let type_dependent_defs = cx.tables().type_dependent_defs();\n-            let def = type_dependent_defs\n-                .get(expr.hir_id)\n+            let def = cx.tables().type_dependent_def(expr.hir_id)\n                 .unwrap_or_else(|| {\n                     span_bug!(expr.span, \"no type-dependent def for method callee\")\n                 });\n-            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, def);\n+            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"method_callee: user_ty={:?}\", user_ty);\n             (def.def_id(), cx.tables().node_substs(expr.hir_id), user_ty)\n         }"}, {"sha": "a0a0d7be1b95d4ae34f15d2ca16e5a4bd3bbfd05", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -405,8 +405,7 @@ fn check_expr_kind<'a, 'tcx>(\n             for index in hirvec.iter() {\n                 method_call_result &= v.check_expr(index);\n             }\n-            if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n-                let def_id = def.def_id();\n+            if let Some(def_id) = v.tables.type_dependent_def_id(e.hir_id) {\n                 match v.tcx.associated_item(def_id).container {\n                     ty::ImplContainer(_) => method_call_result & v.handle_const_fn_call(def_id),\n                     ty::TraitContainer(_) => NotPromotable,"}, {"sha": "adb1a4b13088730bb19065550e27c4005a9d5b04", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -1053,8 +1053,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             hir::ExprKind::MethodCall(_, span, _) => {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n-                if let Some(def) = self.tables.type_dependent_defs().get(expr.hir_id) {\n-                    if self.visit(self.tcx.type_of(def.def_id())) {\n+                if let Some(def_id) = self.tables.type_dependent_def_id(expr.hir_id) {\n+                    if self.visit(self.tcx.type_of(def_id)) {\n                         return;\n                     }\n                 } else {\n@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                 _ => None,\n             }\n             hir::QPath::TypeRelative(..) => {\n-                self.tables.type_dependent_defs().get(id).cloned()\n+                self.tables.type_dependent_def(id)\n             }\n         };\n         if let Some(def) = def {"}, {"sha": "898ea62046d4896b7b2824a2af12b04d175811dd", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -573,8 +573,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ExprKind::MethodCall(ref seg, ..) => {\n                 let expr_hir_id = self.tcx.hir().definitions().node_to_hir_id(expr.id);\n-                let method_id = match self.tables.type_dependent_defs().get(expr_hir_id) {\n-                    Some(id) => id.def_id(),\n+                let method_id = match self.tables.type_dependent_def_id(expr_hir_id) {\n+                    Some(id) => id,\n                     None => {\n                         debug!(\"Could not resolve method id for {:?}\", expr);\n                         return None;"}, {"sha": "5c498923379653f23eba2af66c5b163c298c2fa8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4720fcac4c8a9667f8160a67260a080a2553cd58/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4720fcac4c8a9667f8160a67260a080a2553cd58", "patch": "@@ -4802,10 +4802,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (self.to_ty(qself), qself, segment)\n             }\n         };\n-        if let Some(cached_def) = self.tables.borrow().type_dependent_defs().get(hir_id) {\n+        if let Some(cached_def) = self.tables.borrow().type_dependent_def(hir_id) {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n+            return (cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.ident;\n         let def = match self.resolve_ufcs(span, item_name, ty, hir_id) {"}]}