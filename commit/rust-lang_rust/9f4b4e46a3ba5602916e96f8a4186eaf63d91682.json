{"sha": "9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "node_id": "C_kwDOAAsO6NoAKDlmNGI0ZTQ2YTNiYTU2MDI5MTZlOTZmOGE0MTg2ZWFmNjNkOTE2ODI", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-09-23T19:14:34Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-11-20T20:01:21Z"}, "message": "constify remaining layout methods\n\nRemove bad impl for Eq\n\nUpdate Cargo.lock and fix last ValidAlign", "tree": {"sha": "7f00b0955b368fcfd63df2e397943cbe4a7d3394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f00b0955b368fcfd63df2e397943cbe4a7d3394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "html_url": "https://github.com/rust-lang/rust/commit/9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911cbf8e46f0f3b044c87fc5cbca922878db757b", "url": "https://api.github.com/repos/rust-lang/rust/commits/911cbf8e46f0f3b044c87fc5cbca922878db757b", "html_url": "https://github.com/rust-lang/rust/commit/911cbf8e46f0f3b044c87fc5cbca922878db757b"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "2c1911c350efc5cadc26196b08d934cee419337a", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "patch": "@@ -157,9 +157,10 @@ impl Layout {\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[must_use]\n     #[inline]\n-    pub fn for_value<T: ?Sized>(t: &T) -> Self {\n+    pub const fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n         // SAFETY: see rationale in `new` for why this is using the unsafe variant\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n@@ -191,8 +192,9 @@ impl Layout {\n     /// [trait object]: ../../book/ch17-02-trait-objects.html\n     /// [extern type]: ../../unstable-book/language-features/extern-types.html\n     #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[must_use]\n-    pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n+    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n         // SAFETY: we pass along the prerequisites of these functions to the caller\n         let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };\n         // SAFETY: see rationale in `new` for why this is using the unsafe variant\n@@ -229,8 +231,9 @@ impl Layout {\n     /// Returns an error if the combination of `self.size()` and the given\n     /// `align` violates the conditions listed in [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n+    pub const fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n         Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n     }\n \n@@ -287,10 +290,11 @@ impl Layout {\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[must_use = \"this returns a new `Layout`, \\\n                   without modifying the original\"]\n     #[inline]\n-    pub fn pad_to_align(&self) -> Layout {\n+    pub const fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n@@ -311,8 +315,9 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n+    pub const fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n         // > must not overflow isize (i.e., the rounded value must be\n@@ -370,8 +375,9 @@ impl Layout {\n     /// # assert_eq!(repr_c(&[u64, u32, u16, u32]), Ok((s, vec![0, 8, 12, 16])));\n     /// ```\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n+    pub const fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n         let new_align = cmp::max(self.align, next.align);\n         let pad = self.padding_needed_for(next.align());\n \n@@ -396,8 +402,9 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n+    pub const fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n         let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n         Layout::from_size_alignment(size, self.align)\n@@ -410,8 +417,9 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n+    pub const fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n         let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n         Layout::from_size_alignment(new_size, self.align)\n@@ -422,13 +430,18 @@ impl Layout {\n     /// On arithmetic overflow or when the total size would exceed\n     /// `isize::MAX`, returns `LayoutError`.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n+    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         // Reduce the amount of code we need to monomorphize per `T`.\n         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);\n \n         #[inline]\n-        fn inner(element_size: usize, align: Alignment, n: usize) -> Result<Layout, LayoutError> {\n+        const fn inner(\n+            element_size: usize,\n+            align: Alignment,\n+            n: usize,\n+        ) -> Result<Layout, LayoutError> {\n             // We need to check two things about the size:\n             //  - That the total size won't overflow a `usize`, and\n             //  - That the total size still fits in an `isize`."}, {"sha": "459489942b19cd4056ed7afd853c65ad717ce15b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "patch": "@@ -98,6 +98,8 @@\n // Library features:\n #![feature(const_align_offset)]\n #![feature(const_align_of_val)]\n+#![feature(const_align_of_val_raw)]\n+#![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n #![feature(const_array_into_iter_constructors)]\n #![feature(const_bigint_helper_methods)]\n@@ -140,6 +142,7 @@\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]\n #![feature(const_size_of_val)]\n+#![feature(const_size_of_val_raw)]\n #![feature(const_slice_from_raw_parts_mut)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_slice_split_at_mut)]"}, {"sha": "61eb23c7bca16a1ed7b5b20d3c1eb123f8e57c2e", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4b4e46a3ba5602916e96f8a4186eaf63d91682/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=9f4b4e46a3ba5602916e96f8a4186eaf63d91682", "patch": "@@ -9,7 +9,7 @@ use crate::{cmp, fmt, hash, mem, num};\n /// Note that particularly large alignments, while representable in this type,\n /// are likely not to be supported by actual allocators and linkers.\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-#[derive(Copy, Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq)]\n #[repr(transparent)]\n pub struct Alignment(AlignmentEnum);\n \n@@ -167,16 +167,25 @@ impl From<Alignment> for usize {\n     }\n }\n \n-#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-impl cmp::Ord for Alignment {\n+#[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+impl const cmp::PartialEq for Alignment {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.as_nonzero().get() == other.as_nonzero().get()\n+    }\n+}\n+\n+#[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+impl const cmp::Ord for Alignment {\n     #[inline]\n     fn cmp(&self, other: &Self) -> cmp::Ordering {\n-        self.as_nonzero().cmp(&other.as_nonzero())\n+        self.as_nonzero().get().cmp(&other.as_nonzero().get())\n     }\n }\n \n+#[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"87864\")]\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-impl cmp::PartialOrd for Alignment {\n+impl const cmp::PartialOrd for Alignment {\n     #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n         Some(self.cmp(other))"}]}