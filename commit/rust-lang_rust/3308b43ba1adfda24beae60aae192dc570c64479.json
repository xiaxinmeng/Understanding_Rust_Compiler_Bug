{"sha": "3308b43ba1adfda24beae60aae192dc570c64479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDhiNDNiYTFhZGZkYTI0YmVhZTYwYWFlMTkyZGM1NzBjNjQ0Nzk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T18:00:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T18:00:02Z"}, "message": "Rollup merge of #80444 - glittershark:bound-as-ref, r=dtolnay\n\nAdd as_ref and as_mut methods for Bound\n\nAdd as_ref and as_mut method for std::ops::range::Bound, patterned off\nof the methods of the same name on Option.\n\nI'm not quite sure what the process is for introducing new feature gates (this is my first contribution) so I've left these ungated, but happy to do whatever is necessary to gate them.", "tree": {"sha": "2735ad5e41bf16ff5ee15bb456998954b3412529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2735ad5e41bf16ff5ee15bb456998954b3412529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3308b43ba1adfda24beae60aae192dc570c64479", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIajCRBK7hj4Ov3rIwAAdHIIAKkW5F1SvNq+YNbSP0t5d4sA\nY09gscLS0x60UpqWJ7uAAHiATCFvX3TV9n4xW4iNMnPCdsXp7KmhIAEk4cBEOa1X\npiE6ZsHmDF0cIFWpYF/N9jkT2s+eAfrJ2BwBOfswr5tZ2xZLmOTI7izEuVPxhwGg\n6/VcS8D9C0evmOTe8gkfbtyx2xfIpJV7xR5au2YDsgTmCyUXws+U8IPPnRBgLBBH\nIlxJWk/HCaS9cixkJFmCcP+JLjI0eElgEeanC1Q1nF5VHSHPoKQtlcKGBpwGx9Tv\nfKtNTDZglMHdSTigc/AAF3ZkQ0/YjsmZwJpsKBI7Bq8rb7DMYNSv1dKb6dSMmWE=\n=VSxB\n-----END PGP SIGNATURE-----\n", "payload": "tree 2735ad5e41bf16ff5ee15bb456998954b3412529\nparent 9fc298ca894204fc9699f8989b2d3f1bf425d583\nparent eb72dc5d40767f9267e0e42dc1139f7976a0abd1\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647202 +0000\ncommitter GitHub <noreply@github.com> 1610647202 +0000\n\nRollup merge of #80444 - glittershark:bound-as-ref, r=dtolnay\n\nAdd as_ref and as_mut methods for Bound\n\nAdd as_ref and as_mut method for std::ops::range::Bound, patterned off\nof the methods of the same name on Option.\n\nI'm not quite sure what the process is for introducing new feature gates (this is my first contribution) so I've left these ungated, but happy to do whatever is necessary to gate them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3308b43ba1adfda24beae60aae192dc570c64479", "html_url": "https://github.com/rust-lang/rust/commit/3308b43ba1adfda24beae60aae192dc570c64479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3308b43ba1adfda24beae60aae192dc570c64479/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc298ca894204fc9699f8989b2d3f1bf425d583", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc298ca894204fc9699f8989b2d3f1bf425d583", "html_url": "https://github.com/rust-lang/rust/commit/9fc298ca894204fc9699f8989b2d3f1bf425d583"}, {"sha": "eb72dc5d40767f9267e0e42dc1139f7976a0abd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb72dc5d40767f9267e0e42dc1139f7976a0abd1", "html_url": "https://github.com/rust-lang/rust/commit/eb72dc5d40767f9267e0e42dc1139f7976a0abd1"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "0571dc74b9af90aaf78beac4fe6112448698c379", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3308b43ba1adfda24beae60aae192dc570c64479/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3308b43ba1adfda24beae60aae192dc570c64479/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=3308b43ba1adfda24beae60aae192dc570c64479", "patch": "@@ -678,6 +678,29 @@ pub enum Bound<T> {\n     Unbounded,\n }\n \n+#[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n+impl<T> Bound<T> {\n+    /// Converts from `&Bound<T>` to `Bound<&T>`.\n+    #[inline]\n+    pub fn as_ref(&self) -> Bound<&T> {\n+        match *self {\n+            Included(ref x) => Included(x),\n+            Excluded(ref x) => Excluded(x),\n+            Unbounded => Unbounded,\n+        }\n+    }\n+\n+    /// Converts from `&mut Bound<T>` to `Bound<&T>`.\n+    #[inline]\n+    pub fn as_mut(&mut self) -> Bound<&mut T> {\n+        match *self {\n+            Included(ref mut x) => Included(x),\n+            Excluded(ref mut x) => Excluded(x),\n+            Unbounded => Unbounded,\n+        }\n+    }\n+}\n+\n impl<T: Clone> Bound<&T> {\n     /// Map a `Bound<&T>` to a `Bound<T>` by cloning the contents of the bound.\n     ///"}]}