{"sha": "637139d2ff4202f9296777f8f4750bcc233b09f8", "node_id": "C_kwDOAAsO6NoAKDYzNzEzOWQyZmY0MjAyZjkyOTY3NzdmOGY0NzUwYmNjMjMzYjA5Zjg", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-11-21T14:37:51Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-11-21T18:16:40Z"}, "message": "Add `clippy_utils::msrv::Msrv` to keep track of the current MSRV", "tree": {"sha": "fb3407b0e086943e888900b28488546e18d8c421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3407b0e086943e888900b28488546e18d8c421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637139d2ff4202f9296777f8f4750bcc233b09f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637139d2ff4202f9296777f8f4750bcc233b09f8", "html_url": "https://github.com/rust-lang/rust/commit/637139d2ff4202f9296777f8f4750bcc233b09f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637139d2ff4202f9296777f8f4750bcc233b09f8/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ec465cc3dfb62a2dad7e808b399fa76a1c9170", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ec465cc3dfb62a2dad7e808b399fa76a1c9170", "html_url": "https://github.com/rust-lang/rust/commit/51ec465cc3dfb62a2dad7e808b399fa76a1c9170"}], "stats": {"total": 899, "additions": 466, "deletions": 433}, "files": [{"sha": "29d0d45dcc965fb31f0b9ba6b442a15276bda308", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -443,22 +443,22 @@ value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n ```\n \n The project's MSRV can then be matched against the feature MSRV in the LintPass\n-using the `meets_msrv` utility function.\n+using the `Msrv::meets` method.\n \n ``` rust\n-if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n+if !self.msrv.meets(msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```"}, {"sha": "ec7f1dd0d846cbe8a0f87ad50c43e733ebfec59a", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -120,7 +120,7 @@ fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n \n     let new_lint = if enable_msrv {\n         format!(\n-            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv())));\\n    \",\n             lint_pass = lint.pass,\n             ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n@@ -238,10 +238,9 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     result.push_str(&if enable_msrv {\n         formatdoc!(\n             r#\"\n-            use clippy_utils::msrvs;\n+            use clippy_utils::msrvs::{{self, Msrv}};\n             {pass_import}\n             use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n-            use rustc_semver::RustcVersion;\n             use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n \n         \"#\n@@ -263,12 +262,12 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         formatdoc!(\n             r#\"\n             pub struct {name_camel} {{\n-                msrv: Option<RustcVersion>,\n+                msrv: Msrv,\n             }}\n \n             impl {name_camel} {{\n                 #[must_use]\n-                pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                pub fn new(msrv: Msrv) -> Self {{\n                     Self {{ msrv }}\n                 }}\n             }}\n@@ -357,15 +356,14 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n         let _ = writedoc!(\n             lint_file_contents,\n             r#\"\n-                use clippy_utils::{{meets_msrv, msrvs}};\n+                use clippy_utils::msrvs::{{self, Msrv}};\n                 use rustc_lint::{{{context_import}, LintContext}};\n-                use rustc_semver::RustcVersion;\n \n                 use super::{name_upper};\n \n                 // TODO: Adjust the parameters as necessary\n-                pub(super) fn check(cx: &{context_import}, msrv: Option<RustcVersion>) {{\n-                    if !meets_msrv(msrv, todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n+                pub(super) fn check(cx: &{context_import}, msrv: &Msrv) {{\n+                    if !msrv.meets(todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n                         return;\n                     }}\n                     todo!();"}, {"sha": "3cf8ba0a52119450f4b0bcdafa2c55690bf61b34", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{trim_span, walk_span_to_context};\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -33,10 +32,10 @@ declare_clippy_lint! {\n impl_lint_pass!(AlmostCompleteLetterRange => [ALMOST_COMPLETE_LETTER_RANGE]);\n \n pub struct AlmostCompleteLetterRange {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n impl AlmostCompleteLetterRange {\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -46,7 +45,7 @@ impl EarlyLintPass for AlmostCompleteLetterRange {\n             let ctxt = e.span.ctxt();\n             let sugg = if let Some(start) = walk_span_to_context(start.span, ctxt)\n                 && let Some(end) = walk_span_to_context(end.span, ctxt)\n-                && meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE)\n+                && self.msrv.meets(msrvs::RANGE_INCLUSIVE)\n             {\n                 Some((trim_span(cx.sess().source_map(), start.between(end)), \"..=\"))\n             } else {\n@@ -60,7 +59,7 @@ impl EarlyLintPass for AlmostCompleteLetterRange {\n         if let PatKind::Range(Some(start), Some(end), kind) = &p.kind\n             && matches!(kind.node, RangeEnd::Excluded)\n         {\n-            let sugg = if meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE) {\n+            let sugg = if self.msrv.meets(msrvs::RANGE_INCLUSIVE) {\n                 \"..=\"\n             } else {\n                 \"...\""}, {"sha": "ccf82f132f4e42dd1af0b6a533c678dd757e2337", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -63,12 +63,12 @@ const KNOWN_CONSTS: [(f64, &str, usize, Option<RustcVersion>); 19] = [\n ];\n \n pub struct ApproxConstant {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ApproxConstant {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n \n@@ -87,7 +87,7 @@ impl ApproxConstant {\n         let s = s.as_str();\n         if s.parse::<f64>().is_ok() {\n             for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n-                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| meets_msrv(self.msrv, msrv)) {\n+                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| self.msrv.meets(msrv)) {\n                     span_lint_and_help(\n                         cx,\n                         APPROX_CONSTANT,"}, {"sha": "54364f9dab214e626661b49fbf08ae2030d966b1", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -2,9 +2,8 @@\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::macros::{is_panic, macro_backtrace};\n-use clippy_utils::msrvs;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{first_line_of_span, is_present_in_source, snippet_opt, without_block_comments};\n-use clippy_utils::{extract_msrv_attr, meets_msrv};\n use if_chain::if_chain;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;\n@@ -14,7 +13,6 @@ use rustc_hir::{\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, Level, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -599,7 +597,7 @@ fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n }\n \n pub struct EarlyAttributes {\n-    pub msrv: Option<RustcVersion>,\n+    pub msrv: Msrv,\n }\n \n impl_lint_pass!(EarlyAttributes => [\n@@ -614,7 +612,7 @@ impl EarlyLintPass for EarlyAttributes {\n     }\n \n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n-        check_deprecated_cfg_attr(cx, attr, self.msrv);\n+        check_deprecated_cfg_attr(cx, attr, &self.msrv);\n         check_mismatched_target_os(cx, attr);\n     }\n \n@@ -654,9 +652,9 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n     }\n }\n \n-fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Option<RustcVersion>) {\n+fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: &Msrv) {\n     if_chain! {\n-        if meets_msrv(msrv, msrvs::TOOL_ATTRIBUTES);\n+        if msrv.meets(msrvs::TOOL_ATTRIBUTES);\n         // check cfg_attr\n         if attr.has_name(sym::cfg_attr);\n         if let Some(items) = attr.meta_item_list();"}, {"sha": "442262983337686fab42a2e0482d41cba26cdf8f", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_ABS_TO_UNSIGNED;\n \n@@ -15,9 +14,9 @@ pub(super) fn check(\n     cast_expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if meets_msrv(msrv, msrvs::UNSIGNED_ABS)\n+    if msrv.meets(msrvs::UNSIGNED_ABS)\n         && let ty::Int(from) = cast_from.kind()\n         && let ty::Uint(to) = cast_to.kind()\n         && let ExprKind::MethodCall(method_path, receiver, ..) = cast_expr.kind"}, {"sha": "cf07e050ccce99e6966ae2d9b2ec55a32df8067e", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_constant;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_isize_or_usize;\n-use clippy_utils::{in_constant, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::{utils, CAST_LOSSLESS};\n \n@@ -16,7 +16,7 @@ pub(super) fn check(\n     cast_op: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if !should_lint(cx, expr, cast_from, cast_to, msrv) {\n         return;\n@@ -57,13 +57,7 @@ pub(super) fn check(\n     );\n }\n \n-fn should_lint(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n-) -> bool {\n+fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>, msrv: &Msrv) -> bool {\n     // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n     if in_constant(cx, expr.hir_id) {\n         return false;\n@@ -89,7 +83,7 @@ fn should_lint(\n             };\n             !is_isize_or_usize(cast_from) && from_nbits < to_nbits\n         },\n-        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv, msrvs::FROM_BOOL) => true,\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) && msrv.meets(msrvs::FROM_BOOL) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "e862f13e69fc7059011014ad82f3310e8666ea73", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,16 +1,16 @@\n-use clippy_utils::{diagnostics::span_lint_and_then, meets_msrv, msrvs, source};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::{diagnostics::span_lint_and_then, source};\n use if_chain::if_chain;\n use rustc_ast::Mutability;\n use rustc_hir::{Expr, ExprKind, Node};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, layout::LayoutOf, Ty, TypeAndMut};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Option<RustcVersion>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n-    if !meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS) {\n+    if !msrv.meets(msrvs::PTR_SLICE_RAW_PARTS) {\n         return;\n     }\n "}, {"sha": "627b795d6edd8f5ea04603bfead49042878ff7c5", "filename": "clippy_lints/src/casts/cast_slice_from_raw_parts.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_FROM_RAW_PARTS;\n \n@@ -25,15 +25,9 @@ fn raw_parts_kind(cx: &LateContext<'_>, did: DefId) -> Option<RawPartsKind> {\n     }\n }\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_to: Ty<'_>,\n-    msrv: Option<RustcVersion>,\n-) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_to: Ty<'_>, msrv: &Msrv) {\n     if_chain! {\n-        if meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS);\n+        if msrv.meets(msrvs::PTR_SLICE_RAW_PARTS);\n         if let ty::RawPtr(ptrty) = cast_to.kind();\n         if let ty::Slice(_) = ptrty.ty.kind();\n         if let ExprKind::Call(fun, [ptr_arg, len_arg]) = cast_expr.peel_blocks().kind;"}, {"sha": "c6d505c4a181fc2e3b52c2be3b1d713f7123eec2", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -21,11 +21,11 @@ mod ptr_as_ptr;\n mod unnecessary_cast;\n mod utils;\n \n-use clippy_utils::{is_hir_ty_cfg_dependant, meets_msrv, msrvs};\n+use clippy_utils::is_hir_ty_cfg_dependant;\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -648,12 +648,12 @@ declare_clippy_lint! {\n }\n \n pub struct Casts {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl Casts {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -686,7 +686,7 @@ impl_lint_pass!(Casts => [\n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !in_external_macro(cx.sess(), expr.span) {\n-            ptr_as_ptr::check(cx, expr, self.msrv);\n+            ptr_as_ptr::check(cx, expr, &self.msrv);\n         }\n \n         if expr.span.from_expansion() {\n@@ -705,7 +705,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n                 return;\n             }\n-            cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, self.msrv);\n+            cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, &self.msrv);\n             as_ptr_cast_mut::check(cx, expr, cast_expr, cast_to);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n@@ -717,25 +717,25 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n-                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                     cast_nan_to_int::check(cx, expr, cast_expr, cast_from, cast_to);\n                 }\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);\n             }\n \n             as_underscore::check(cx, expr, cast_to_hir);\n \n-            if meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n+            if self.msrv.meets(msrvs::BORROW_AS_PTR) {\n                 borrow_as_ptr::check(cx, expr, cast_expr, cast_to_hir);\n             }\n         }\n \n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n-        ptr_as_ptr::check(cx, expr, self.msrv);\n-        cast_slice_different_sizes::check(cx, expr, self.msrv);\n+        ptr_as_ptr::check(cx, expr, &self.msrv);\n+        cast_slice_different_sizes::check(cx, expr, &self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "43d75a03235e23c6396d648c06f4bba71b96b37f", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,19 +1,18 @@\n use std::borrow::Cow;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, TypeAndMut};\n-use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVersion>) {\n-    if !meets_msrv(msrv, msrvs::POINTER_CAST) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Msrv) {\n+    if !msrv.meets(msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "9102a89e37726ab035c349a6768c25bddd0cb796", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,14 +1,14 @@\n //! lint on manually implemented checked conversions that could be transformed into `try_from`\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{in_constant, is_integer_literal, meets_msrv, msrvs, SpanlessEq};\n+use clippy_utils::{in_constant, is_integer_literal, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -37,12 +37,12 @@ declare_clippy_lint! {\n }\n \n pub struct CheckedConversions {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl CheckedConversions {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -51,7 +51,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n+        if !self.msrv.meets(msrvs::TRY_FROM) {\n             return;\n         }\n "}, {"sha": "faa8467d26614d2c4451a5612ef87b60c6ccfce8", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::mir::{enclosing_mir, expr_local, local_assignments, used_exactly_once, PossibleBorrowerMap};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::{expr_sig, is_copy, peel_mid_ty_refs, ty_sig, variant_of_res};\n use clippy_utils::{\n-    fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, meets_msrv, msrvs, path_to_local,\n-    walk_to_expr_usage,\n+    fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, path_to_local, walk_to_expr_usage,\n };\n+\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::graph::iterate::{CycleDetector, TriColorDepthFirstSearch};\n@@ -28,7 +29,6 @@ use rustc_middle::ty::{\n     self, Binder, BoundVariableKind, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n     ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n };\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n@@ -181,12 +181,12 @@ pub struct Dereferencing<'tcx> {\n     possible_borrowers: Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n \n     // `IntoIterator` for arrays requires Rust 1.53.\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl<'tcx> Dereferencing<'tcx> {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Dereferencing::default()\n@@ -286,7 +286,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n         match (self.state.take(), kind) {\n             (None, kind) => {\n                 let expr_ty = typeck.expr_ty(expr);\n-                let (position, adjustments) = walk_parents(cx, &mut self.possible_borrowers, expr, self.msrv);\n+                let (position, adjustments) = walk_parents(cx, &mut self.possible_borrowers, expr, &self.msrv);\n                 match kind {\n                     RefOp::Deref => {\n                         if let Position::FieldAccess {\n@@ -698,7 +698,7 @@ fn walk_parents<'tcx>(\n     cx: &LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n     e: &'tcx Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> (Position, &'tcx [Adjustment<'tcx>]) {\n     let mut adjustments = [].as_slice();\n     let mut precedence = 0i8;\n@@ -1082,7 +1082,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     param_ty: ParamTy,\n     mut expr: &Expr<'tcx>,\n     precedence: i8,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> Position {\n     let destruct_trait_def_id = cx.tcx.lang_items().destruct_trait();\n     let sized_trait_def_id = cx.tcx.lang_items().sized_trait();\n@@ -1182,7 +1182,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n                 && let ty::Param(param_ty) = trait_predicate.self_ty().kind()\n                 && let GenericArgKind::Type(ty) = substs_with_referent_ty[param_ty.index as usize].unpack()\n                 && ty.is_array()\n-                && !meets_msrv(msrv, msrvs::ARRAY_INTO_ITERATOR)\n+                && !msrv.meets(msrvs::ARRAY_INTO_ITERATOR)\n             {\n                 return false;\n             }"}, {"sha": "ec45be558f14baba1aba8dc0e5166a1d268cc8e6", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,19 +1,19 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::is_diag_trait_item;\n use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n use clippy_utils::macros::{\n     is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n };\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::DefId;\n use rustc_span::edition::Edition::Edition2021;\n@@ -158,12 +158,12 @@ impl_lint_pass!(FormatArgs => [\n ]);\n \n pub struct FormatArgs {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl FormatArgs {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                 check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n                 check_to_string_in_format_args(cx, name, arg.param.value);\n             }\n-            if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n+            if self.msrv.meets(msrvs::FORMAT_ARGS_CAPTURE) {\n                 check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n             }\n         }"}, {"sha": "7ff4a05fcdd60b8e4f4fd04d95be070afbfd9880", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::span_is_local;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::path_def_id;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{meets_msrv, msrvs, path_def_id};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_path, Visitor};\n use rustc_hir::{\n@@ -10,7 +11,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter::OnlyBodies;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, Symbol};\n@@ -49,12 +49,12 @@ declare_clippy_lint! {\n }\n \n pub struct FromOverInto {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl FromOverInto {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         FromOverInto { msrv }\n     }\n }\n@@ -63,7 +63,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::RE_REBALANCING_COHERENCE) || !span_is_local(item.span) {\n+        if !self.msrv.meets(msrvs::RE_REBALANCING_COHERENCE) || !span_is_local(item.span) {\n             return;\n         }\n "}, {"sha": "9cadaaa493e465c0b4032f6adec143c752eb5681", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::eager_or_lazy::switch_to_eager_eval;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{\n-    contains_return, higher, is_else_clause, is_res_lang_ctor, meets_msrv, msrvs, path_res, peel_blocks,\n-};\n+use clippy_utils::{contains_return, higher, is_else_clause, is_res_lang_ctor, path_res, peel_blocks};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -47,12 +45,12 @@ declare_clippy_lint! {\n }\n \n pub struct IfThenSomeElseNone {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl IfThenSomeElseNone {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -61,7 +59,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::BOOL_THEN) {\n+        if !self.msrv.meets(msrvs::BOOL_THEN) {\n             return;\n         }\n \n@@ -94,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             } else {\n                 format!(\"{{ /* snippet */ {arg_snip} }}\")\n             };\n-            let method_name = if switch_to_eager_eval(cx, expr) && meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+            let method_name = if switch_to_eager_eval(cx, expr) && self.msrv.meets(msrvs::BOOL_THEN_SOME) {\n                 \"then_some\"\n             } else {\n                 method_body.insert_str(0, \"|| \");"}, {"sha": "ee5f10da5b8481c48c19943f20db750bbe0aca50", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLet;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::is_copy;\n-use clippy_utils::{is_expn_of, is_lint_allowed, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{is_expn_of, is_lint_allowed, path_to_local};\n use if_chain::if_chain;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::Applicability;\n@@ -11,7 +12,6 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::Ident, Span};\n \n@@ -51,14 +51,13 @@ declare_clippy_lint! {\n     \"avoid indexing on slices which could be destructed\"\n }\n \n-#[derive(Copy, Clone)]\n pub struct IndexRefutableSlice {\n     max_suggested_slice: u64,\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl IndexRefutableSlice {\n-    pub fn new(max_suggested_slice_pattern_length: u64, msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(max_suggested_slice_pattern_length: u64, msrv: Msrv) -> Self {\n         Self {\n             max_suggested_slice: max_suggested_slice_pattern_length,\n             msrv,\n@@ -74,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n             if !expr.span.from_expansion() || is_expn_of(expr.span, \"if_chain\").is_some();\n             if let Some(IfLet {let_pat, if_then, ..}) = IfLet::hir(cx, expr);\n             if !is_lint_allowed(cx, INDEX_REFUTABLE_SLICE, expr.hir_id);\n-            if meets_msrv(self.msrv, msrvs::SLICE_PATTERNS);\n+            if self.msrv.meets(msrvs::SLICE_PATTERNS);\n \n             let found_slices = find_slice_values(cx, let_pat);\n             if !found_slices.is_empty();"}, {"sha": "dd1b23e7d9d29f19a513b36efbc1468e690907b0", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,13 +1,11 @@\n-use clippy_utils::{\n-    diagnostics::{self, span_lint_and_sugg},\n-    meets_msrv, msrvs, source,\n-    sugg::Sugg,\n-    ty,\n-};\n+use clippy_utils::diagnostics::{self, span_lint_and_sugg};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::source;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{source_map::Spanned, sym};\n \n@@ -68,12 +66,12 @@ declare_clippy_lint! {\n }\n \n pub struct InstantSubtraction {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl InstantSubtraction {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -101,7 +99,7 @@ impl LateLintPass<'_> for InstantSubtraction {\n                 } else {\n                     if_chain! {\n                         if !expr.span.from_expansion();\n-                        if meets_msrv(self.msrv, msrvs::TRY_FROM);\n+                        if self.msrv.meets(msrvs::TRY_FROM);\n \n                         if is_an_instant(cx, lhs);\n                         if is_a_duration(cx, rhs);"}, {"sha": "46acc9679f512300d55e63eac9361b01d05770db", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 35, "deletions": 73, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -52,10 +52,9 @@ extern crate declare_clippy_lint;\n use std::io;\n use std::path::PathBuf;\n \n-use clippy_utils::parse_msrv;\n+use clippy_utils::msrvs::Msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::{Lint, LintId};\n-use rustc_semver::RustcVersion;\n use rustc_session::Session;\n \n #[cfg(feature = \"internal\")]\n@@ -322,48 +321,10 @@ pub use crate::utils::conf::{lookup_conf_file, Conf};\n /// Used in `./src/driver.rs`.\n pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     // NOTE: Do not add any more pre-expansion passes. These should be removed eventually.\n+    let msrv = Msrv::read(&conf.msrv, sess);\n+    let msrv = move || msrv.clone();\n \n-    let msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(format!(\n-                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n-            ));\n-            None\n-        })\n-    });\n-\n-    store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n-}\n-\n-fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n-    let cargo_msrv = std::env::var(\"CARGO_PKG_RUST_VERSION\")\n-        .ok()\n-        .and_then(|v| parse_msrv(&v, None, None));\n-    let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(format!(\n-                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n-            ));\n-            None\n-        })\n-    });\n-\n-    if let Some(cargo_msrv) = cargo_msrv {\n-        if let Some(clippy_msrv) = clippy_msrv {\n-            // if both files have an msrv, let's compare them and emit a warning if they differ\n-            if clippy_msrv != cargo_msrv {\n-                sess.warn(format!(\n-                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n-                ));\n-            }\n-\n-            Some(clippy_msrv)\n-        } else {\n-            Some(cargo_msrv)\n-        }\n-    } else {\n-        clippy_msrv\n-    }\n+    store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv: msrv() }));\n }\n \n #[doc(hidden)]\n@@ -595,43 +556,44 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n     store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n-    let msrv = read_msrv(conf, sess);\n+    let msrv = Msrv::read(&conf.msrv, sess);\n+    let msrv = move || msrv.clone();\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n-    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv())));\n     store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n             avoid_breaking_exported_api,\n-            msrv,\n+            msrv(),\n             allow_expect_in_tests,\n             allow_unwrap_in_tests,\n         ))\n     });\n-    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv())));\n     let matches_for_let_else = conf.matches_for_let_else;\n-    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv, matches_for_let_else)));\n-    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv)));\n-    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n-    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv(), matches_for_let_else)));\n+    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv())));\n+    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv())));\n+    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv())));\n     store.register_late_pass(move |_| Box::new(needless_question_mark::NeedlessQuestionMark));\n-    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv)));\n-    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv())));\n+    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv())));\n     store.register_late_pass(|_| Box::new(size_of_in_element_count::SizeOfInElementCount));\n     store.register_late_pass(|_| Box::new(same_name_method::SameNameMethod));\n     let max_suggested_slice_pattern_length = conf.max_suggested_slice_pattern_length;\n     store.register_late_pass(move |_| {\n         Box::new(index_refutable_slice::IndexRefutableSlice::new(\n             max_suggested_slice_pattern_length,\n-            msrv,\n+            msrv(),\n         ))\n     });\n     store.register_late_pass(|_| Box::<shadow::Shadow>::default());\n@@ -648,7 +610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(borrow_deref_ref::BorrowDerefRef));\n     store.register_late_pass(|_| Box::new(no_effect::NoEffect));\n     store.register_late_pass(|_| Box::new(temporary_assignment::TemporaryAssignment));\n-    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv())));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n     store.register_late_pass(move |_| {\n         Box::new(cognitive_complexity::CognitiveComplexity::new(\n@@ -806,7 +768,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n     store.register_late_pass(|_| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n     store.register_late_pass(|_| Box::new(unnamed_address::UnnamedAddress));\n-    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv())));\n     store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n     store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n@@ -840,7 +802,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::<vec_init_then_push::VecInitThenPush>::default());\n     store.register_late_pass(|_| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|_| Box::new(from_str_radix_10::FromStrRadix10));\n-    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv())));\n     store.register_late_pass(|_| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n     store.register_late_pass(|_| Box::new(unused_async::UnusedAsync));\n@@ -865,14 +827,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv())));\n     store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));\n     store.register_late_pass(|_| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     store.register_late_pass(|_| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n-    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv())));\n     store.register_late_pass(|_| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_late_pass(|_| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n@@ -896,20 +858,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n-    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n+    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv())));\n     store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|_| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|_| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|_| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n-    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv())));\n+    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv())));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n-    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv())));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n-    store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv())));\n     store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));\n     store.register_late_pass(|_| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n@@ -920,7 +882,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_trait_methods::MissingTraitMethods));\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n-    store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "462d73cf0b974ff8675b306763e8c5108446cb1f", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_parent_expr, meets_msrv, msrvs};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -34,12 +34,12 @@ declare_clippy_lint! {\n \n #[derive(Clone)]\n pub struct ManualBits {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualBits {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -48,7 +48,7 @@ impl_lint_pass!(ManualBits => [MANUAL_BITS]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualBits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::MANUAL_BITS) {\n+        if !self.msrv.meets(msrvs::MANUAL_BITS) {\n             return;\n         }\n "}, {"sha": "bb6d628af3b5061f35c3a19e7df8498481c8ad5e", "filename": "clippy_lints/src/manual_clamp.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_clamp.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,28 +1,25 @@\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n+use clippy_utils::higher::If;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::visitors::is_const_evaluatable;\n+use clippy_utils::MaybePath;\n+use clippy_utils::{\n+    eq_expr_value, is_diag_trait_item, is_trait_method, path_res, path_to_local_id, peel_blocks, peel_blocks_with_stmt,\n+};\n use itertools::Itertools;\n+use rustc_errors::Applicability;\n use rustc_errors::Diagnostic;\n use rustc_hir::{\n     def::Res, Arm, BinOpKind, Block, Expr, ExprKind, Guard, HirId, PatKind, PathSegment, PrimTy, QPath, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n use std::ops::Deref;\n \n-use clippy_utils::{\n-    diagnostics::{span_lint_and_then, span_lint_hir_and_then},\n-    eq_expr_value,\n-    higher::If,\n-    is_diag_trait_item, is_trait_method, meets_msrv, msrvs, path_res, path_to_local_id, peel_blocks,\n-    peel_blocks_with_stmt,\n-    sugg::Sugg,\n-    ty::implements_trait,\n-    visitors::is_const_evaluatable,\n-    MaybePath,\n-};\n-use rustc_errors::Applicability;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Identifies good opportunities for a clamp function from std or core, and suggests using it.\n@@ -87,11 +84,11 @@ declare_clippy_lint! {\n impl_lint_pass!(ManualClamp => [MANUAL_CLAMP]);\n \n pub struct ManualClamp {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualClamp {\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -114,7 +111,7 @@ struct InputMinMax<'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::CLAMP) {\n+        if !self.msrv.meets(msrvs::CLAMP) {\n             return;\n         }\n         if !expr.span.from_expansion() {\n@@ -130,7 +127,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n     }\n \n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n-        if !meets_msrv(self.msrv, msrvs::CLAMP) {\n+        if !self.msrv.meets(msrvs::CLAMP) {\n             return;\n         }\n         for suggestion in is_two_if_pattern(cx, block) {"}, {"sha": "5ab049d8d133fd34629227da15fbfef84c255915", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,15 +1,12 @@\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, source::snippet};\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{def_id::DefId, sym};\n \n-use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, meets_msrv, msrvs, source::snippet,\n-};\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Suggests to use dedicated built-in methods,\n@@ -45,12 +42,12 @@ declare_clippy_lint! {\n impl_lint_pass!(ManualIsAsciiCheck => [MANUAL_IS_ASCII_CHECK]);\n \n pub struct ManualIsAsciiCheck {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualIsAsciiCheck {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -70,11 +67,11 @@ enum CharRange {\n \n impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT) {\n+        if !self.msrv.meets(msrvs::IS_ASCII_DIGIT) {\n             return;\n         }\n \n-        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::IS_ASCII_DIGIT_CONST) {\n+        if in_constant(cx, expr.hir_id) && !self.msrv.meets(msrvs::IS_ASCII_DIGIT_CONST) {\n             return;\n         }\n "}, {"sha": "20f06830952cf1350e18dbe137d6cb82552c9643", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,16 +1,16 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLetOrMatch;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::peel_blocks;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::{for_each_expr, Descend};\n-use clippy_utils::{meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, MatchSource, Pat, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -50,13 +50,13 @@ declare_clippy_lint! {\n }\n \n pub struct ManualLetElse {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     matches_behaviour: MatchLintBehaviour,\n }\n \n impl ManualLetElse {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>, matches_behaviour: MatchLintBehaviour) -> Self {\n+    pub fn new(msrv: Msrv, matches_behaviour: MatchLintBehaviour) -> Self {\n         Self {\n             msrv,\n             matches_behaviour,\n@@ -69,7 +69,7 @@ impl_lint_pass!(ManualLetElse => [MANUAL_LET_ELSE]);\n impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &'tcx Stmt<'tcx>) {\n         let if_let_or_match = if_chain! {\n-            if meets_msrv(self.msrv, msrvs::LET_ELSE);\n+            if self.msrv.meets(msrvs::LET_ELSE);\n             if !in_external_macro(cx.sess(), stmt.span);\n             if let StmtKind::Local(local) = stmt.kind;\n             if let Some(init) = local.init;"}, {"sha": "d32fa1121f4e747a6b4528e3958ef2bdc2ff9f16", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n+use clippy_utils::is_doc_hidden;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{is_doc_hidden, meets_msrv, msrvs};\n use rustc_ast::ast::{self, VisibilityKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{self as hir, Expr, ExprKind, QPath};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::DefIdTree;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::{sym, Span};\n@@ -63,12 +63,12 @@ declare_clippy_lint! {\n \n #[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveStruct {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualNonExhaustiveStruct {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -77,14 +77,14 @@ impl_lint_pass!(ManualNonExhaustiveStruct => [MANUAL_NON_EXHAUSTIVE]);\n \n #[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveEnum {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     constructed_enum_variants: FxHashSet<(DefId, DefId)>,\n     potential_enums: Vec<(LocalDefId, LocalDefId, Span, Span)>,\n }\n \n impl ManualNonExhaustiveEnum {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             constructed_enum_variants: FxHashSet::default(),\n@@ -97,7 +97,7 @@ impl_lint_pass!(ManualNonExhaustiveEnum => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustiveStruct {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n+        if !self.msrv.meets(msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n \n@@ -149,7 +149,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n \n impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n+        if !self.msrv.meets(msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n "}, {"sha": "8d447c37150b8d2a01f095755e878dbf13740b08", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::consts::{constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{in_constant, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{in_constant, path_to_local};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, Node, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -34,12 +34,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualRemEuclid {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualRemEuclid {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -48,11 +48,11 @@ impl_lint_pass!(ManualRemEuclid => [MANUAL_REM_EUCLID]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::REM_EUCLID) {\n+        if !self.msrv.meets(msrvs::REM_EUCLID) {\n             return;\n         }\n \n-        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::REM_EUCLID_CONST) {\n+        if in_constant(cx, expr.hir_id) && !self.msrv.meets(msrvs::REM_EUCLID_CONST) {\n             return;\n         }\n "}, {"sha": "4907f02b5a3ef323166bb3f1cf2672a322d8fa11", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{get_parent_expr, match_def_path, paths, SpanlessEq};\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -50,12 +50,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualRetain {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualRetain {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -71,9 +71,9 @@ impl<'tcx> LateLintPass<'tcx> for ManualRetain {\n             && let hir::ExprKind::MethodCall(_, target_expr, [], _) = &collect_expr.kind\n             && let Some(collect_def_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id)\n             && match_def_path(cx, collect_def_id, &paths::CORE_ITER_COLLECT) {\n-            check_into_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n-            check_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n-            check_to_owned(cx, parent_expr, left_expr, target_expr, self.msrv);\n+            check_into_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n+            check_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n+            check_to_owned(cx, parent_expr, left_expr, target_expr, &self.msrv);\n         }\n     }\n \n@@ -85,7 +85,7 @@ fn check_into_iter(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if let hir::ExprKind::MethodCall(_, into_iter_expr, [_], _) = &target_expr.kind\n         && let Some(filter_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n@@ -104,7 +104,7 @@ fn check_iter(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if let hir::ExprKind::MethodCall(_, filter_expr, [], _) = &target_expr.kind\n         && let Some(copied_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n@@ -127,9 +127,9 @@ fn check_to_owned(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if meets_msrv(msrv,  msrvs::STRING_RETAIN)\n+    if msrv.meets(msrvs::STRING_RETAIN)\n         && let hir::ExprKind::MethodCall(_, filter_expr, [], _) = &target_expr.kind\n         && let Some(to_owned_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n         && match_def_path(cx, to_owned_def_id, &paths::TO_OWNED_METHOD)\n@@ -215,10 +215,10 @@ fn match_acceptable_def_path(cx: &LateContext<'_>, collect_def_id: DefId) -> boo\n         .any(|&method| match_def_path(cx, collect_def_id, method))\n }\n \n-fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, msrv: Option<RustcVersion>) -> bool {\n+fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, msrv: &Msrv) -> bool {\n     let expr_ty = cx.typeck_results().expr_ty(expr).peel_refs();\n     ACCEPTABLE_TYPES.iter().any(|(ty, acceptable_msrv)| {\n         is_type_diagnostic_item(cx, expr_ty, *ty)\n-            && acceptable_msrv.map_or(true, |acceptable_msrv| meets_msrv(msrv, acceptable_msrv))\n+            && acceptable_msrv.map_or(true, |acceptable_msrv| msrv.meets(acceptable_msrv))\n     })\n }"}, {"sha": "de166b9765f4194b6ff22e909c8a370c3200146d", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{eq_expr_value, higher, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n@@ -11,7 +12,6 @@ use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n@@ -48,12 +48,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualStrip {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -68,7 +68,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n+        if !self.msrv.meets(msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "7b15a307fecf47d66a50a013117e83eabd28602c", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -23,13 +23,13 @@ mod single_match;\n mod try_err;\n mod wild_in_or_pats;\n \n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_opt, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, is_span_match, meets_msrv, msrvs};\n+use clippy_utils::{higher, in_constant, is_span_match};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, SpanData, SyntaxContext};\n \n@@ -930,13 +930,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     infallible_destructuring_match_linted: bool,\n }\n \n impl Matches {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Matches::default()\n@@ -1000,9 +1000,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n             if !from_expansion && !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n-                    if !(meets_msrv(self.msrv, msrvs::MATCHES_MACRO)\n-                        && match_like_matches::check_match(cx, expr, ex, arms))\n-                    {\n+                    if !(self.msrv.meets(msrvs::MATCHES_MACRO) && match_like_matches::check_match(cx, expr, ex, arms)) {\n                         match_same_arms::check(cx, arms);\n                     }\n \n@@ -1034,7 +1032,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             collapsible_match::check_if_let(cx, if_let.let_pat, if_let.if_then, if_let.if_else);\n             if !from_expansion {\n                 if let Some(else_expr) = if_let.if_else {\n-                    if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n+                    if self.msrv.meets(msrvs::MATCHES_MACRO) {\n                         match_like_matches::check_if_let(\n                             cx,\n                             expr,"}, {"sha": "35024ec1224f04053e5d6ac01c71c2c20b8c5a00", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_non_aggregate_primitive_type;\n-use clippy_utils::{is_default_equivalent, is_res_lang_ctor, meets_msrv, msrvs, path_res};\n+use clippy_utils::{is_default_equivalent, is_res_lang_ctor, path_res};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n@@ -227,12 +227,12 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n }\n \n pub struct MemReplace {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl MemReplace {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -248,7 +248,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv, msrvs::MEM_TAKE) {\n+                if self.msrv.meets(msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "4e6ec61f6a83dab5b14f96a8c8920001a071e822", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,25 +1,25 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n-use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<RustcVersion>) {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: &Msrv) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && msrv.meets(msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },\n-        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) => {\n+        _ if is_trait_method(cx, expr, sym::Iterator) && msrv.meets(msrvs::ITERATOR_COPIED) => {\n             match get_iterator_item_ty(cx, recv_ty) {\n                 // <T as Iterator>::Item\n                 Some(ty) => ty,"}, {"sha": "ae03da0d3f9ce3296a8ee70f8712b5ffc8587e44", "filename": "clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,27 +1,27 @@\n use super::ERR_EXPECT;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::has_debug_impl;\n-use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_middle::ty::Ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span};\n \n pub(super) fn check(\n     cx: &LateContext<'_>,\n     _expr: &rustc_hir::Expr<'_>,\n     recv: &rustc_hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n     expect_span: Span,\n     err_span: Span,\n+    msrv: &Msrv,\n ) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         // Test the version to make sure the lint can be showed (expect_err has been\n         // introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n-        if meets_msrv(msrv, msrvs::EXPECT_ERR);\n+        if msrv.meets(msrvs::EXPECT_ERR);\n \n         // Grabs the `Result<T, E>` type\n         let result_type = cx.typeck_results().expr_ty(recv);"}, {"sha": "175e04f8ac061bd4d5d0305afa3c04bf01d24d44", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::is_trait_method;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n@@ -14,10 +14,10 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx hir::Expr<'_>,\n     recv: &'tcx hir::Expr<'_>,\n     arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, msrvs::ITERATOR_FIND_MAP) {\n+        if !msrv.meets(msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "301aff5ae6ac0ba21ebba1dbc8ee98d6af2d465f", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,23 +1,22 @@\n //! Lint for `c.is_digit(10)`\n \n use super::IS_DIGIT_ASCII_RADIX;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::{\n-    consts::constant_full_int, consts::FullInt, diagnostics::span_lint_and_sugg, meets_msrv, msrvs,\n-    source::snippet_with_applicability,\n+    consts::constant_full_int, consts::FullInt, diagnostics::span_lint_and_sugg, source::snippet_with_applicability,\n };\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n \n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n     self_arg: &'tcx Expr<'_>,\n     radix: &'tcx Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if !meets_msrv(msrv, msrvs::IS_ASCII_DIGIT) {\n+    if !msrv.meets(msrvs::IS_ASCII_DIGIT) {\n         return;\n     }\n "}, {"sha": "52cc1e0464bf331cd3f624cfff75d725e5af9773", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,27 +1,21 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n-use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs, peel_blocks};\n+use clippy_utils::{is_diag_trait_item, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_semver::RustcVersion;\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span};\n \n use super::MAP_CLONE;\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    e: &hir::Expr<'_>,\n-    recv: &hir::Expr<'_>,\n-    arg: &hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n-) {\n+pub(super) fn check(cx: &LateContext<'_>, e: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>, msrv: &Msrv) {\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n         if cx.tcx.impl_of_method(method_id)\n@@ -97,10 +91,10 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n     );\n }\n \n-fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool, msrv: Option<RustcVersion>) {\n+fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool, msrv: &Msrv) {\n     let mut applicability = Applicability::MachineApplicable;\n \n-    let (message, sugg_method) = if is_copy && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n+    let (message, sugg_method) = if is_copy && msrv.meets(msrvs::ITERATOR_COPIED) {\n         (\"you are using an explicit closure for copying elements\", \"copied\")\n     } else {\n         (\"you are using an explicit closure for cloning elements\", \"cloned\")"}, {"sha": "3122f72ee9155ad932c50eb9e721663a0d74d1b3", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,11 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_semver::RustcVersion;\n use rustc_span::symbol::sym;\n \n use super::MAP_UNWRAP_OR;\n@@ -19,13 +18,13 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx hir::Expr<'_>,\n     map_arg: &'tcx hir::Expr<'_>,\n     unwrap_arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n-    if is_result && !meets_msrv(msrv, msrvs::RESULT_MAP_OR_ELSE) {\n+    if is_result && !msrv.meets(msrvs::RESULT_MAP_OR_ELSE) {\n         return false;\n     }\n "}, {"sha": "c5451195727cf8a5e9ae1c6901f97debbe9e40d2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -104,16 +104,16 @@ mod zst_offset;\n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::{contains_ty_adt_constructor_opaque, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n+use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::{Expr, ExprKind, TraitItem, TraitItemKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n@@ -3163,7 +3163,7 @@ declare_clippy_lint! {\n \n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     allow_expect_in_tests: bool,\n     allow_unwrap_in_tests: bool,\n }\n@@ -3172,7 +3172,7 @@ impl Methods {\n     #[must_use]\n     pub fn new(\n         avoid_breaking_exported_api: bool,\n-        msrv: Option<RustcVersion>,\n+        msrv: Msrv,\n         allow_expect_in_tests: bool,\n         allow_unwrap_in_tests: bool,\n     ) -> Self {\n@@ -3325,7 +3325,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 single_char_add_str::check(cx, expr, receiver, args);\n                 into_iter_on_ref::check(cx, expr, method_span, method_call.ident.name, receiver);\n                 single_char_pattern::check(cx, expr, method_call.ident.name, receiver, args);\n-                unnecessary_to_owned::check(cx, expr, method_call.ident.name, receiver, args, self.msrv);\n+                unnecessary_to_owned::check(cx, expr, method_call.ident.name, receiver, args, &self.msrv);\n             },\n             hir::ExprKind::Binary(op, lhs, rhs) if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne => {\n                 let mut info = BinaryExprInfo {\n@@ -3501,7 +3501,7 @@ impl Methods {\n                 (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n                 (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n                 (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n-                (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, self.msrv),\n+                (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, &self.msrv),\n                 (\"collect\", []) if is_trait_method(cx, expr, sym::Iterator) => {\n                     needless_collect::check(cx, span, expr, recv, call_span);\n                     match method_call(recv) {\n@@ -3512,7 +3512,7 @@ impl Methods {\n                             map_collect_result_unit::check(cx, expr, m_recv, m_arg);\n                         },\n                         Some((\"take\", take_self_arg, [take_arg], _, _)) => {\n-                            if meets_msrv(self.msrv, msrvs::STR_REPEAT) {\n+                            if self.msrv.meets(msrvs::STR_REPEAT) {\n                                 manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n                             }\n                         },\n@@ -3539,7 +3539,7 @@ impl Methods {\n                 },\n                 (\"expect\", [_]) => match method_call(recv) {\n                     Some((\"ok\", recv, [], _, _)) => ok_expect::check(cx, expr, recv),\n-                    Some((\"err\", recv, [], err_span, _)) => err_expect::check(cx, expr, recv, self.msrv, span, err_span),\n+                    Some((\"err\", recv, [], err_span, _)) => err_expect::check(cx, expr, recv, span, err_span, &self.msrv),\n                     _ => expect_used::check(cx, expr, recv, false, self.allow_expect_in_tests),\n                 },\n                 (\"expect_err\", [_]) => expect_used::check(cx, expr, recv, true, self.allow_expect_in_tests),\n@@ -3578,7 +3578,7 @@ impl Methods {\n                     unit_hash::check(cx, expr, recv, arg);\n                 },\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n-                (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n+                (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, &self.msrv),\n                 (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n                 (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n                 (\"iter\" | \"iter_mut\" | \"into_iter\", []) => {\n@@ -3601,7 +3601,7 @@ impl Methods {\n                 },\n                 (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                     if name == \"map\" {\n-                        map_clone::check(cx, expr, recv, m_arg, self.msrv);\n+                        map_clone::check(cx, expr, recv, m_arg, &self.msrv);\n                         if let Some((map_name @ (\"iter\" | \"into_iter\"), recv2, _, _, _)) = method_call(recv) {\n                             iter_kv_map::check(cx, map_name, expr, recv2, m_arg);\n                         }\n@@ -3610,8 +3610,8 @@ impl Methods {\n                     }\n                     if let Some((name, recv2, args, span2,_)) = method_call(recv) {\n                         match (name, args) {\n-                            (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, self.msrv),\n-                            (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, self.msrv),\n+                            (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, &self.msrv),\n+                            (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, &self.msrv),\n                             (\"filter\", [f_arg]) => {\n                                 filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false);\n                             },\n@@ -3632,7 +3632,7 @@ impl Methods {\n                         match (name2, args2) {\n                             (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                             (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n-                            (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, self.msrv),\n+                            (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, &self.msrv),\n                             (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n                             (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n                             (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n@@ -3680,10 +3680,10 @@ impl Methods {\n                     vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n                 },\n                 (\"seek\", [arg]) => {\n-                    if meets_msrv(self.msrv, msrvs::SEEK_FROM_CURRENT) {\n+                    if self.msrv.meets(msrvs::SEEK_FROM_CURRENT) {\n                         seek_from_current::check(cx, expr, recv, arg);\n                     }\n-                    if meets_msrv(self.msrv, msrvs::SEEK_REWIND) {\n+                    if self.msrv.meets(msrvs::SEEK_REWIND) {\n                         seek_to_start_instead_of_rewind::check(cx, expr, recv, arg, span);\n                     }\n                 },\n@@ -3699,7 +3699,7 @@ impl Methods {\n                 (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n                     if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);\n-                        str_splitn::check(cx, name, expr, recv, pat_arg, count, self.msrv);\n+                        str_splitn::check(cx, name, expr, recv, pat_arg, count, &self.msrv);\n                     }\n                 },\n                 (\"splitn_mut\" | \"rsplitn_mut\", [count_arg, _]) => {\n@@ -3717,7 +3717,7 @@ impl Methods {\n                 },\n                 (\"take\", []) => needless_option_take::check(cx, expr, recv),\n                 (\"then\", [arg]) => {\n-                    if !meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+                    if !self.msrv.meets(msrvs::BOOL_THEN_SOME) {\n                         return;\n                     }\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\");\n@@ -3760,7 +3760,7 @@ impl Methods {\n                 },\n                 (\"unwrap_or_else\", [u_arg]) => match method_call(recv) {\n                     Some((\"map\", recv, [map_arg], _, _))\n-                        if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, self.msrv) => {},\n+                        if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, &self.msrv) => {},\n                     _ => {\n                         unwrap_or_else_default::check(cx, expr, recv, u_arg);\n                         unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");"}, {"sha": "3e33f9193374e3a4c80b838624a9cddc162c30ef", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, peel_blocks};\n+use clippy_utils::{match_def_path, path_to_local_id, paths, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::sym;\n \n use super::OPTION_AS_REF_DEREF;\n@@ -19,9 +19,9 @@ pub(super) fn check(\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n     is_mut: bool,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n-    if !meets_msrv(msrv, msrvs::OPTION_AS_DEREF) {\n+    if !msrv.meets(msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "3c01ce1fecd3a28a161625b72d63331405ff852a", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::usage::local_used_after_expr;\n use clippy_utils::visitors::{for_each_expr_with_closures, Descend};\n-use clippy_utils::{is_diag_item_method, match_def_path, meets_msrv, msrvs, path_to_local_id, paths};\n+use clippy_utils::{is_diag_item_method, match_def_path, path_to_local_id, paths};\n use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -12,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span, Symbol, SyntaxContext};\n \n use super::{MANUAL_SPLIT_ONCE, NEEDLESS_SPLITN};\n@@ -24,7 +24,7 @@ pub(super) fn check(\n     self_arg: &Expr<'_>,\n     pat_arg: &Expr<'_>,\n     count: u128,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if count < 2 || !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n         return;\n@@ -34,7 +34,7 @@ pub(super) fn check(\n         IterUsageKind::Nth(n) => count > n + 1,\n         IterUsageKind::NextTuple => count > 2,\n     };\n-    let manual = count == 2 && meets_msrv(msrv, msrvs::STR_SPLIT_ONCE);\n+    let manual = count == 2 && msrv.meets(msrvs::STR_SPLIT_ONCE);\n \n     match parse_iter_usage(cx, expr.span.ctxt(), cx.tcx.hir().parent_iter(expr.hir_id)) {\n         Some(usage) if needless(usage.kind) => lint_needless(cx, method_name, expr, self_arg, pat_arg),"}, {"sha": "21d1df4d0c212fb9472bbbe883afe2c8f2660907", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,11 +1,11 @@\n use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n use clippy_utils::visitors::find_all_ret_expressions;\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n use rustc_hir_analysis::check::{FnCtxt, Inherited};\n@@ -16,7 +16,6 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::EarlyBinder;\n use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n-use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n use std::cmp::max;\n@@ -29,7 +28,7 @@ pub fn check<'tcx>(\n     method_name: Symbol,\n     receiver: &'tcx Expr<'_>,\n     args: &'tcx [Expr<'_>],\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n@@ -200,7 +199,7 @@ fn check_into_iter_call_arg(\n     expr: &Expr<'_>,\n     method_name: Symbol,\n     receiver: &Expr<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n@@ -215,7 +214,7 @@ fn check_into_iter_call_arg(\n             if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n+            let cloned_or_copied = if is_copy(cx, item_ty) && msrv.meets(msrvs::ITERATOR_COPIED) {\n                 \"copied\"\n             } else {\n                 \"cloned\""}, {"sha": "5bc04bc17fb4f00bdf2cba1c1d9db4b08e8991a4", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,17 +1,15 @@\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{\n-    fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, meets_msrv, msrvs, trait_ref_of_method,\n-};\n+use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -75,12 +73,12 @@ declare_clippy_lint! {\n impl_lint_pass!(MissingConstForFn => [MISSING_CONST_FOR_FN]);\n \n pub struct MissingConstForFn {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl MissingConstForFn {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -95,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv, msrvs::CONST_IF_MATCH) {\n+        if !self.msrv.meets(msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n@@ -152,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, err.as_ref());\n             }"}, {"sha": "0a1b9d173cf9409ee453de6f7085ac14b9f8ab89", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,16 +1,16 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::higher;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, msrvs, path_to_local};\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_const, path_to_local};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use std::cmp::Ordering;\n@@ -161,12 +161,12 @@ declare_clippy_lint! {\n }\n \n pub struct Ranges {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl Ranges {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -181,7 +181,7 @@ impl_lint_pass!(Ranges => [\n impl<'tcx> LateLintPass<'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref op, l, r) = expr.kind {\n-            if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n+            if self.msrv.meets(msrvs::RANGE_CONTAINS) {\n                 check_possible_range_contains(cx, op.node, l, r, expr, expr.span);\n             }\n         }"}, {"sha": "61bff4a0e38d842194be07d7d8bd960436aed2fe", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::msrvs::{self, Msrv};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -37,12 +36,12 @@ declare_clippy_lint! {\n }\n \n pub struct RedundantFieldNames {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl RedundantFieldNames {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -51,7 +50,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv, msrvs::FIELD_INIT_SHORTHAND) {\n+        if !self.msrv.meets(msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "3aa2490bc44e018fa32371b1f94e0c69a46e4892", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -34,12 +33,12 @@ declare_clippy_lint! {\n }\n \n pub struct RedundantStaticLifetimes {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl RedundantStaticLifetimes {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -96,7 +95,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv, msrvs::STATIC_IN_CONST) {\n+        if !self.msrv.meets(msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "83e651aba8e89b15ed99db9dfcf768afece1431f", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -16,10 +16,10 @@ mod utils;\n mod wrong_transmute;\n \n use clippy_utils::in_constant;\n+use clippy_utils::msrvs::Msrv;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n@@ -410,7 +410,7 @@ declare_clippy_lint! {\n }\n \n pub struct Transmute {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n impl_lint_pass!(Transmute => [\n     CROSSPOINTER_TRANSMUTE,\n@@ -431,7 +431,7 @@ impl_lint_pass!(Transmute => [\n ]);\n impl Transmute {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -461,7 +461,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmuting_null::check(cx, e, arg, to_ty)\n-                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, self.msrv)\n+                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, &self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)"}, {"sha": "3dde4eee67179fd9a394b10d5799b1d93ca04748", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,12 +1,12 @@\n use super::TRANSMUTE_PTR_TO_REF;\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{meets_msrv, msrvs, sugg};\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TypeVisitable};\n-use rustc_semver::RustcVersion;\n \n /// Checks for `transmute_ptr_to_ref` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n     path: &'tcx Path<'_>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::RawPtr(from_ptr_ty), ty::Ref(_, to_ref_ty, mutbl)) => {\n@@ -37,7 +37,7 @@ pub(super) fn check<'tcx>(\n \n                     let sugg = if let Some(ty) = get_explicit_type(path) {\n                         let ty_snip = snippet_with_applicability(cx, ty.span, \"..\", &mut app);\n-                        if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                        if msrv.meets(msrvs::POINTER_CAST) {\n                             format!(\"{deref}{}.cast::<{ty_snip}>()\", arg.maybe_par())\n                         } else if from_ptr_ty.has_erased_regions() {\n                             sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {ty_snip}\"))).to_string()\n@@ -46,7 +46,7 @@ pub(super) fn check<'tcx>(\n                         }\n                     } else if from_ptr_ty.ty == *to_ref_ty {\n                         if from_ptr_ty.has_erased_regions() {\n-                            if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                            if msrv.meets(msrvs::POINTER_CAST) {\n                                 format!(\"{deref}{}.cast::<{to_ref_ty}>()\", arg.maybe_par())\n                             } else {\n                                 sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {to_ref_ty}\")))"}, {"sha": "2c2730267db646fc92c0adbbe65039eb81a3efda", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -2,14 +2,14 @@\n \n use clippy_utils::ast_utils::{eq_field_pat, eq_id, eq_maybe_qself, eq_pat, eq_path};\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::{meets_msrv, msrvs, over};\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::over;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Mutability, Pat, PatKind, PatKind::*, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n \n@@ -45,14 +45,13 @@ declare_clippy_lint! {\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n \n-#[derive(Clone, Copy)]\n pub struct UnnestedOrPatterns {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl UnnestedOrPatterns {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n@@ -61,27 +60,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n+        if self.msrv.meets(msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "06975443d8fa145be745ed72b67a11cb932d7221", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_from_proc_macro;\n+use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::ty::same_type_and_consts;\n-use clippy_utils::{is_from_proc_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -14,7 +15,6 @@ use rustc_hir::{\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n@@ -57,13 +57,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct UseSelf {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n     stack: Vec<StackItem>,\n }\n \n impl UseSelf {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(msrv: Msrv) -> Self {\n         Self {\n             msrv,\n             ..Self::default()\n@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n             if !hir_ty.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check {\n                 impl_id,\n                 in_body,\n@@ -228,7 +228,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n@@ -248,7 +248,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if_chain! {\n             if !pat.span.from_expansion();\n-            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             // get the path from the pattern\n             if let PatKind::Path(QPath::Resolved(_, path))"}, {"sha": "9876a8a765ccbca52ed97abc0aa2d89769ad2bab", "filename": "clippy_lints/src/utils/internal_lints/msrv_attr_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -41,7 +41,7 @@ impl LateLintPass<'_> for MsrvAttrImpl {\n                     .type_of(f.did)\n                     .walk()\n                     .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n-                    .any(|t| match_type(cx, t.expect_ty(), &paths::RUSTC_VERSION))\n+                    .any(|t| match_type(cx, t.expect_ty(), &paths::MSRV))\n             });\n             if !items.iter().any(|item| item.ident.name == sym!(enter_lint_attrs));\n             then {"}, {"sha": "86ee172cb28ad88fcdec615f08a16952db1a03fd", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -105,8 +105,6 @@ use rustc_middle::ty::{\n     layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n-use rustc_semver::RustcVersion;\n-use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::SourceMap;\n use rustc_span::sym;\n@@ -118,36 +116,17 @@ use crate::consts::{constant, Constant};\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n-pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n-    if let Ok(version) = RustcVersion::parse(msrv) {\n-        return Some(version);\n-    } else if let Some(sess) = sess {\n-        if let Some(span) = span {\n-            sess.span_err(span, format!(\"`{msrv}` is not a valid Rust version\"));\n-        }\n-    }\n-    None\n-}\n-\n-pub fn meets_msrv(msrv: Option<RustcVersion>, lint_msrv: RustcVersion) -> bool {\n-    msrv.map_or(true, |msrv| msrv.meets(lint_msrv))\n-}\n-\n #[macro_export]\n macro_rules! extract_msrv_attr {\n     ($context:ident) => {\n         fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n             let sess = rustc_lint::LintContext::sess(cx);\n-            match $crate::get_unique_inner_attr(sess, attrs, \"msrv\") {\n-                Some(msrv_attr) => {\n-                    if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = $crate::parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n-                    } else {\n-                        sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n-                    }\n-                },\n-                _ => (),\n-            }\n+            self.msrv.enter_lint_attrs(sess, attrs);\n+        }\n+\n+        fn exit_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n+            let sess = rustc_lint::LintContext::sess(cx);\n+            self.msrv.exit_lint_attrs(sess, attrs);\n         }\n     };\n }"}, {"sha": "2c9f75736e52919b3d3b4c7f7c671fc8b4156922", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -1,4 +1,11 @@\n+use std::sync::OnceLock;\n+\n+use rustc_ast::Attribute;\n use rustc_semver::RustcVersion;\n+use rustc_session::Session;\n+use rustc_span::Span;\n+\n+use crate::attrs::get_unique_inner_attr;\n \n macro_rules! msrv_aliases {\n     ($($major:literal,$minor:literal,$patch:literal {\n@@ -40,3 +47,97 @@ msrv_aliases! {\n     1,16,0 { STR_REPEAT }\n     1,55,0 { SEEK_REWIND }\n }\n+\n+fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n+    if let Ok(version) = RustcVersion::parse(msrv) {\n+        return Some(version);\n+    } else if let Some(sess) = sess {\n+        if let Some(span) = span {\n+            sess.span_err(span, format!(\"`{msrv}` is not a valid Rust version\"));\n+        }\n+    }\n+    None\n+}\n+\n+/// Tracks the current MSRV from `clippy.toml`, `Cargo.toml` or set via `#[clippy::msrv]`\n+#[derive(Debug, Clone, Default)]\n+pub struct Msrv {\n+    stack: Vec<RustcVersion>,\n+}\n+\n+impl Msrv {\n+    fn new(initial: Option<RustcVersion>) -> Self {\n+        Self {\n+            stack: Vec::from_iter(initial),\n+        }\n+    }\n+\n+    fn read_inner(conf_msrv: &Option<String>, sess: &Session) -> Self {\n+        let cargo_msrv = std::env::var(\"CARGO_PKG_RUST_VERSION\")\n+            .ok()\n+            .and_then(|v| parse_msrv(&v, None, None));\n+        let clippy_msrv = conf_msrv.as_ref().and_then(|s| {\n+            parse_msrv(s, None, None).or_else(|| {\n+                sess.err(format!(\n+                    \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n+                ));\n+                None\n+            })\n+        });\n+\n+        // if both files have an msrv, let's compare them and emit a warning if they differ\n+        if let Some(cargo_msrv) = cargo_msrv\n+            && let Some(clippy_msrv) = clippy_msrv\n+            && clippy_msrv != cargo_msrv\n+        {\n+            sess.warn(format!(\n+                \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n+            ));\n+        }\n+\n+        Self::new(clippy_msrv.or(cargo_msrv))\n+    }\n+\n+    /// Set the initial MSRV from the Clippy config file or from Cargo due to the `rust-version`\n+    /// field in `Cargo.toml`\n+    ///\n+    /// Returns a `&'static Msrv` as `Copy` types are more easily passed to the\n+    /// `register_{late,early}_pass` callbacks\n+    pub fn read(conf_msrv: &Option<String>, sess: &Session) -> &'static Self {\n+        static PARSED: OnceLock<Msrv> = OnceLock::new();\n+\n+        PARSED.get_or_init(|| Self::read_inner(conf_msrv, sess))\n+    }\n+\n+    pub fn current(&self) -> Option<RustcVersion> {\n+        self.stack.last().copied()\n+    }\n+\n+    pub fn meets(&self, required: RustcVersion) -> bool {\n+        self.current().map_or(true, |version| version.meets(required))\n+    }\n+\n+    fn parse_attr(sess: &Session, attrs: &[Attribute]) -> Option<RustcVersion> {\n+        if let Some(msrv_attr) = get_unique_inner_attr(sess, attrs, \"msrv\") {\n+            if let Some(msrv) = msrv_attr.value_str() {\n+                return parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n+            }\n+\n+            sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n+        }\n+\n+        None\n+    }\n+\n+    pub fn enter_lint_attrs(&mut self, sess: &Session, attrs: &[Attribute]) {\n+        if let Some(version) = Self::parse_attr(sess, attrs) {\n+            self.stack.push(version);\n+        }\n+    }\n+\n+    pub fn exit_lint_attrs(&mut self, sess: &Session, attrs: &[Attribute]) {\n+        if Self::parse_attr(sess, attrs).is_some() {\n+            self.stack.pop();\n+        }\n+    }\n+}"}, {"sha": "3cf8cb76651e05649e2fdf58072997dc08f68dd7", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -60,6 +60,8 @@ pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_SWAP: [&str; 3] = [\"core\", \"mem\", \"swap\"];\n+#[cfg(feature = \"internal\")]\n+pub const MSRV: [&str; 3] = [\"clippy_utils\", \"msrvs\", \"Msrv\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n@@ -101,8 +103,6 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n-#[cfg(feature = \"internal\")]\n-pub const RUSTC_VERSION: [&str; 2] = [\"rustc_semver\", \"RustcVersion\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];"}, {"sha": "0def1245615635a5954f5ddfe045d85fa0a11a19", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -3,6 +3,7 @@\n // of terminologies might not be relevant in the context of Clippy. Note that its behavior might\n // differ from the time of `rustc` even if the name stays the same.\n \n+use crate::msrvs::Msrv;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n@@ -18,7 +19,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -280,7 +281,7 @@ fn check_terminator<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n-    msrv: Option<RustcVersion>,\n+    msrv: &Msrv,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n@@ -364,7 +365,7 @@ fn check_terminator<'tcx>(\n     }\n }\n \n-fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n+fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: &Msrv) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since, .. } = const_stab.level {\n@@ -383,15 +384,12 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n \n                 let since = rustc_span::Symbol::intern(short_version);\n \n-                crate::meets_msrv(\n-                    msrv,\n-                    RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n-                        panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n-                    }),\n-                )\n+                msrv.meets(RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n+                    panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n+                }))\n             } else {\n                 // Unstable const fn with the feature enabled.\n-                msrv.is_none()\n+                msrv.current().is_none()\n             }\n         })\n }"}, {"sha": "08634063a5754a775c385ff4ce4e03b48f9a556f", "filename": "tests/ui-internal/invalid_msrv_attr_impl.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -11,9 +11,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use clippy_utils::extract_msrv_attr;\n+use clippy_utils::msrvs::Msrv;\n use rustc_hir::Expr;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -22,7 +22,7 @@ declare_lint! {\n }\n \n struct Pass {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl_lint_pass!(Pass => [TEST_LINT]);"}, {"sha": "f8af77e6d395c05201895d362eedb232a7f08108", "filename": "tests/ui-internal/invalid_msrv_attr_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -11,9 +11,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use clippy_utils::extract_msrv_attr;\n+use clippy_utils::msrvs::Msrv;\n use rustc_hir::Expr;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -22,7 +22,7 @@ declare_lint! {\n }\n \n struct Pass {\n-    msrv: Option<RustcVersion>,\n+    msrv: Msrv,\n }\n \n impl_lint_pass!(Pass => [TEST_LINT]);"}, {"sha": "28ab132394b82a9e67d58f6c35b03d706f6ae476", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -27,3 +27,26 @@ fn no_patch_meets() {\n     #![clippy::msrv = \"1.43\"]\n     let log2_10 = 3.321928094887362;\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/6920\n+fn scoping() {\n+    mod m {\n+        #![clippy::msrv = \"1.42.0\"]\n+    }\n+\n+    // Should warn\n+    let log2_10 = 3.321928094887362;\n+\n+    mod a {\n+        #![clippy::msrv = \"1.42.0\"]\n+\n+        fn should_warn() {\n+            #![clippy::msrv = \"1.43.0\"]\n+            let log2_10 = 3.321928094887362;\n+        }\n+\n+        fn should_not_warn() {\n+            let log2_10 = 3.321928094887362;\n+        }\n+    }\n+}"}, {"sha": "6174443372f87c7dc4bf2ef6a3829d2729e273b4", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637139d2ff4202f9296777f8f4750bcc233b09f8/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=637139d2ff4202f9296777f8f4750bcc233b09f8", "patch": "@@ -23,5 +23,21 @@ LL |     let log2_10 = 3.321928094887362;\n    |\n    = help: consider using the constant directly\n \n-error: aborting due to 3 previous errors\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:38:19\n+   |\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:45:27\n+   |\n+LL |             let log2_10 = 3.321928094887362;\n+   |                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n+\n+error: aborting due to 5 previous errors\n "}]}