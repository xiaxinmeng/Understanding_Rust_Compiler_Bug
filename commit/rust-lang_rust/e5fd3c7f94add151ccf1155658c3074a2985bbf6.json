{"sha": "e5fd3c7f94add151ccf1155658c3074a2985bbf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmQzYzdmOTRhZGQxNTFjY2YxMTU1NjU4YzMwNzRhMjk4NWJiZjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-03-05T10:11:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-05T10:11:46Z"}, "message": "Merge pull request #1603 from Manishearth/publish\n\nRustup publish", "tree": {"sha": "69b806373f6b4ed7bf06218bfe6573cdf94959e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b806373f6b4ed7bf06218bfe6573cdf94959e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fd3c7f94add151ccf1155658c3074a2985bbf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fd3c7f94add151ccf1155658c3074a2985bbf6", "html_url": "https://github.com/rust-lang/rust/commit/e5fd3c7f94add151ccf1155658c3074a2985bbf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fd3c7f94add151ccf1155658c3074a2985bbf6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f4505253e4d7fcad6eb5d363d6ba774e0bf020", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f4505253e4d7fcad6eb5d363d6ba774e0bf020", "html_url": "https://github.com/rust-lang/rust/commit/a7f4505253e4d7fcad6eb5d363d6ba774e0bf020"}, {"sha": "2a8fca599b22d02708b81c2e11a3075f195d0969", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8fca599b22d02708b81c2e11a3075f195d0969", "html_url": "https://github.com/rust-lang/rust/commit/2a8fca599b22d02708b81c2e11a3075f195d0969"}], "stats": {"total": 92, "additions": 48, "deletions": 44}, "files": [{"sha": "40552ad65f6df5c0f3acec5e1da5b81f7b7688b4", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.118 \u2014 2017-03-05\n+* Rustup to *rustc 1.17.0-nightly (b1e31766d 2017-03-03)*\n+\n ## 0.0.117 \u2014 2017-03-01\n * Rustup to *rustc 1.17.0-nightly (be760566c 2017-02-28)*\n "}, {"sha": "6e80e222aa1756c8acfc6a280330f2c5b5a81f0d", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.117\"\n+version = \"0.0.118\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -30,7 +30,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.117\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.118\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.1.1\"\n "}, {"sha": "afdbf09c26c8a79717ae19dcaaabe9d5180d884f", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.117\"\n+version = \"0.0.118\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "dd5baaadca6ce613f147cc6834505c89c6e4c670", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc_const_eval::ConstContext;\n-use rustc_const_math::{ConstUsize,ConstIsize,ConstInt};\n+use rustc_const_math::{ConstUsize, ConstIsize, ConstInt};\n use rustc::hir;\n use syntax::ast::RangeLimits;\n use utils::{self, higher};\n@@ -60,7 +60,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             // Array with known size can be checked statically\n             let ty = cx.tables.expr_ty(array);\n             if let ty::TyArray(_, size) = ty.sty {\n-                let size = ConstInt::Usize(ConstUsize::new(size as u64, cx.sess().target.uint_type).expect(\"array size is invalid\"));\n+                let size = ConstInt::Usize(ConstUsize::new(size as u64, cx.sess().target.uint_type)\n+                    .expect(\"array size is invalid\"));\n                 let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n \n                 // Index is a constant uint\n@@ -123,23 +124,24 @@ fn to_const_range(\n         Some(Some(ConstVal::Integral(x))) => {\n             if limits == RangeLimits::Closed {\n                 match x {\n-                    ConstInt::U8(_) => (x + ConstInt::U8(1)),\n-                    ConstInt::U16(_) => (x + ConstInt::U16(1)),\n-                    ConstInt::U32(_) => (x + ConstInt::U32(1)),\n-                    ConstInt::U64(_) => (x + ConstInt::U64(1)),\n-                    ConstInt::U128(_) => (x + ConstInt::U128(1)),\n-                    ConstInt::Usize(ConstUsize::Us16(_)) => (x + ConstInt::Usize(ConstUsize::Us16(1))),\n-                    ConstInt::Usize(ConstUsize::Us32(_)) => (x + ConstInt::Usize(ConstUsize::Us32(1))),\n-                    ConstInt::Usize(ConstUsize::Us64(_)) => (x + ConstInt::Usize(ConstUsize::Us64(1))),\n-                    ConstInt::I8(_) => (x + ConstInt::I8(1)),\n-                    ConstInt::I16(_) => (x + ConstInt::I16(1)),\n-                    ConstInt::I32(_) => (x + ConstInt::I32(1)),\n-                    ConstInt::I64(_) => (x + ConstInt::I64(1)),\n-                    ConstInt::I128(_) => (x + ConstInt::I128(1)),\n-                    ConstInt::Isize(ConstIsize::Is16(_)) => (x + ConstInt::Isize(ConstIsize::Is16(1))),\n-                    ConstInt::Isize(ConstIsize::Is32(_)) => (x + ConstInt::Isize(ConstIsize::Is32(1))),\n-                    ConstInt::Isize(ConstIsize::Is64(_)) => (x + ConstInt::Isize(ConstIsize::Is64(1))),\n-                }.expect(\"such a big array is not realistic\")\n+                        ConstInt::U8(_) => (x + ConstInt::U8(1)),\n+                        ConstInt::U16(_) => (x + ConstInt::U16(1)),\n+                        ConstInt::U32(_) => (x + ConstInt::U32(1)),\n+                        ConstInt::U64(_) => (x + ConstInt::U64(1)),\n+                        ConstInt::U128(_) => (x + ConstInt::U128(1)),\n+                        ConstInt::Usize(ConstUsize::Us16(_)) => (x + ConstInt::Usize(ConstUsize::Us16(1))),\n+                        ConstInt::Usize(ConstUsize::Us32(_)) => (x + ConstInt::Usize(ConstUsize::Us32(1))),\n+                        ConstInt::Usize(ConstUsize::Us64(_)) => (x + ConstInt::Usize(ConstUsize::Us64(1))),\n+                        ConstInt::I8(_) => (x + ConstInt::I8(1)),\n+                        ConstInt::I16(_) => (x + ConstInt::I16(1)),\n+                        ConstInt::I32(_) => (x + ConstInt::I32(1)),\n+                        ConstInt::I64(_) => (x + ConstInt::I64(1)),\n+                        ConstInt::I128(_) => (x + ConstInt::I128(1)),\n+                        ConstInt::Isize(ConstIsize::Is16(_)) => (x + ConstInt::Isize(ConstIsize::Is16(1))),\n+                        ConstInt::Isize(ConstIsize::Is32(_)) => (x + ConstInt::Isize(ConstIsize::Is32(1))),\n+                        ConstInt::Isize(ConstIsize::Is64(_)) => (x + ConstInt::Isize(ConstIsize::Is64(1))),\n+                    }\n+                    .expect(\"such a big array is not realistic\")\n             } else {\n                 x\n             }"}, {"sha": "7be6f6bf0d6e365ce3eb4c486c634b5e1541752a", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc_const_eval::lookup_const_by_id;\n use rustc_const_math::ConstInt;\n use rustc::hir::*;\n-use rustc::ty::{TyCtxt, self};\n+use rustc::ty::{self, TyCtxt};\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::hash::{Hash, Hasher};\n@@ -179,17 +179,15 @@ pub fn lit_to_constant<'a, 'tcx>(lit: &LitKind, tcx: TyCtxt<'a, 'tcx, 'tcx>, mut\n             match (&ty.sty, hint) {\n                 (&ty::TyInt(ity), _) |\n                 (_, Signed(ity)) => {\n-                    Constant::Int(ConstInt::new_signed_truncating(n as i128,\n-                        ity, tcx.sess.target.int_type))\n-                }\n+                    Constant::Int(ConstInt::new_signed_truncating(n as i128, ity, tcx.sess.target.int_type))\n+                },\n                 (&ty::TyUint(uty), _) |\n                 (_, Unsigned(uty)) => {\n-                    Constant::Int(ConstInt::new_unsigned_truncating(n as u128,\n-                        uty, tcx.sess.target.uint_type))\n-                }\n-                _ => bug!()\n+                    Constant::Int(ConstInt::new_unsigned_truncating(n as u128, uty, tcx.sess.target.uint_type))\n+                },\n+                _ => bug!(),\n             }\n-        }\n+        },\n         LitKind::Float(ref is, ty) => Constant::Float(is.to_string(), ty.into()),\n         LitKind::FloatUnsuffixed(ref is) => Constant::Float(is.to_string(), FloatWidth::Any),\n         LitKind::Bool(b) => Constant::Bool(b),\n@@ -291,7 +289,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 if let Some((const_expr, tables)) = lookup_const_by_id(self.tcx, def_id, substs) {\n                     let mut cx = ConstEvalLateContext {\n                         tcx: self.tcx,\n-                        tables,\n+                        tables: tables,\n                         needed_resolution: false,\n                     };\n                     let ret = cx.expr(const_expr);"}, {"sha": "d2b07661d5b5b2f82e39b08405c8c88a9ddcf3ee", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -66,7 +66,8 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                 // Is it an unsafe function? They don't implement the closure traits\n                 ty::TyFnDef(_, _, fn_ty) |\n                 ty::TyFnPtr(fn_ty) => {\n-                    if fn_ty.skip_binder().unsafety == Unsafety::Unsafe || fn_ty.skip_binder().output().sty == ty::TyNever {\n+                    if fn_ty.skip_binder().unsafety == Unsafety::Unsafe ||\n+                       fn_ty.skip_binder().output().sty == ty::TyNever {\n                         return;\n                     }\n                 },"}, {"sha": "90b616b20d4b01a098155d14dfa3271f148894ae", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -211,14 +211,14 @@ fn report_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm],\n     };\n     let els_str = els.map_or(String::new(), |els| format!(\" else {}\", expr_block(cx, els, None, \"..\")));\n     span_lint_and_then(cx,\n-                        lint,\n-                        expr.span,\n-                        \"you seem to be trying to use match for destructuring a single pattern. \\\n-                        Consider using `if let`\",\n-                        |db| {\n+                       lint,\n+                       expr.span,\n+                       \"you seem to be trying to use match for destructuring a single pattern. Consider using `if \\\n+                        let`\",\n+                       |db| {\n         db.span_suggestion(expr.span,\n-                            \"try this\",\n-                            format!(\"if let {} = {} {}{}\",\n+                           \"try this\",\n+                           format!(\"if let {} = {} {}{}\",\n                                     snippet(cx, arms[0].pats[0].span, \"..\"),\n                                     snippet(cx, ex.span, \"..\"),\n                                     expr_block(cx, &arms[0].body, None, \"..\"),"}, {"sha": "b4e79a1401de15ec0fd6d33f3c2876de82ea71d5", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -382,7 +382,7 @@ fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n \n                 val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||\n                 val.try_cmp(neg_infinity) == Ok(Ordering::Equal)\n-            }\n+            },\n         }\n     } else {\n         false"}, {"sha": "693b14d1b9997a028cec7eb61a0778dbc6e3ac63", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fd3c7f94add151ccf1155658c3074a2985bbf6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e5fd3c7f94add151ccf1155658c3074a2985bbf6", "patch": "@@ -975,7 +975,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n }\n \n pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>) -> Option<u64> {\n-    cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx|\n-        ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes())\n-    )\n+    cx.tcx\n+        .infer_ctxt((), Reveal::All)\n+        .enter(|infcx| ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes()))\n }"}]}