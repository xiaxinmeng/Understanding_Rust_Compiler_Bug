{"sha": "cfabd173724e5e1bae204126261a03d850d86107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYWJkMTczNzI0ZTVlMWJhZTIwNDEyNjI2MWEwM2Q4NTBkODYxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T10:40:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T10:40:42Z"}, "message": "Auto merge of #31674 - VladUreche:issue/21221, r=nikomatsakis\n\nThis commit adds functionality that allows the name resolution pass\nto search for entities (traits/types/enums/structs) by name, in\norder to show recommendations along with the errors.\n\nFor now, only E0405 and E0412 have suggestions attached, as per the\nrequest in bug #21221, but it's likely other errors can also benefit\nfrom the ability to generate suggestions.", "tree": {"sha": "4b8eab46124888ba0b2442cce54f2a917815e049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8eab46124888ba0b2442cce54f2a917815e049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfabd173724e5e1bae204126261a03d850d86107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfabd173724e5e1bae204126261a03d850d86107", "html_url": "https://github.com/rust-lang/rust/commit/cfabd173724e5e1bae204126261a03d850d86107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfabd173724e5e1bae204126261a03d850d86107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "html_url": "https://github.com/rust-lang/rust/commit/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2"}, {"sha": "88af8fa0b1d5b461f380faea39d8f5948dfed395", "url": "https://api.github.com/repos/rust-lang/rust/commits/88af8fa0b1d5b461f380faea39d8f5948dfed395", "html_url": "https://github.com/rust-lang/rust/commit/88af8fa0b1d5b461f380faea39d8f5948dfed395"}], "stats": {"total": 606, "additions": 521, "deletions": 85}, "files": [{"sha": "bfd8a6f1f61f0b385369e08967ed4ab1a375326c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -461,12 +461,12 @@ impl Foo for Bar { // ok!\n \"##,\n \n E0405: r##\"\n-An unknown trait was implemented. Example of erroneous code:\n+The code refers to a trait that is not in scope. Example of erroneous code:\n \n ```compile_fail\n struct Foo;\n \n-impl SomeTrait for Foo {} // error: use of undeclared trait name `SomeTrait`\n+impl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n ```\n \n Please verify that the name of the trait wasn't misspelled and ensure that it\n@@ -599,20 +599,20 @@ trait Baz : Foo + Foo2 {\n \"##,\n \n E0412: r##\"\n-An undeclared type name was used. Example of erroneous codes:\n+The type name used is not in scope. Example of erroneous codes:\n \n ```compile_fail\n-impl Something {} // error: use of undeclared type name `Something`\n+impl Something {} // error: type name `Something` is not in scope\n \n // or:\n \n trait Foo {\n-    fn bar(N); // error: use of undeclared type name `N`\n+    fn bar(N); // error: type name `N` is not in scope\n }\n \n // or:\n \n-fn foo(x: T) {} // error: use of undeclared type name `T`\n+fn foo(x: T) {} // type name `T` is not in scope\n ```\n \n To fix this error, please verify you didn't misspell the type name, you did"}, {"sha": "0508a9ef729befc5c5de438ce615aa321e757685", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 231, "deletions": 26, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -81,6 +81,8 @@ use rustc_front::hir::{ItemFn, ItemForeignMod, ItemImpl, ItemMod, ItemStatic, It\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use rustc_front::hir::Local;\n use rustc_front::hir::{Pat, PatKind, Path, PrimTy};\n+use rustc_front::hir::{PathSegment, PathParameters};\n+use rustc_front::hir::HirVec;\n use rustc_front::hir::{TraitRef, Ty, TyBool, TyChar, TyFloat, TyInt};\n use rustc_front::hir::{TyRptr, TyStr, TyUint, TyPath, TyPtr};\n use rustc_front::util::walk_pat;\n@@ -117,6 +119,12 @@ enum SuggestionType {\n     NotFound,\n }\n \n+/// Candidates for a name resolution failure\n+pub struct SuggestedCandidates {\n+    name: String,\n+    candidates: Vec<Path>,\n+}\n+\n pub enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n@@ -127,7 +135,7 @@ pub enum ResolutionError<'a> {\n     /// error E0404: is not a trait\n     IsNotATrait(&'a str),\n     /// error E0405: use of undeclared trait name\n-    UndeclaredTraitName(&'a str),\n+    UndeclaredTraitName(&'a str, SuggestedCandidates),\n     /// error E0406: undeclared associated type\n     UndeclaredAssociatedType,\n     /// error E0407: method is not a member of trait\n@@ -145,7 +153,7 @@ pub enum ResolutionError<'a> {\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n-    UseOfUndeclared(&'a str, &'a str),\n+    UseOfUndeclared(&'a str, &'a str, SuggestedCandidates),\n     /// error E0413: declaration shadows an enum variant or unit-like struct in scope\n     DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n@@ -248,12 +256,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n         ResolutionError::IsNotATrait(name) => {\n             struct_span_err!(resolver.session, span, E0404, \"`{}` is not a trait\", name)\n         }\n-        ResolutionError::UndeclaredTraitName(name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0405,\n-                             \"use of undeclared trait name `{}`\",\n-                             name)\n+        ResolutionError::UndeclaredTraitName(name, candidates) => {\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0405,\n+                                           \"trait `{}` is not in scope\",\n+                                           name);\n+            show_candidates(&mut err, span, &candidates);\n+            err\n         }\n         ResolutionError::UndeclaredAssociatedType => {\n             struct_span_err!(resolver.session, span, E0406, \"undeclared associated type\")\n@@ -313,13 +323,15 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              E0411,\n                              \"use of `Self` outside of an impl or trait\")\n         }\n-        ResolutionError::UseOfUndeclared(kind, name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0412,\n-                             \"use of undeclared {} `{}`\",\n-                             kind,\n-                             name)\n+        ResolutionError::UseOfUndeclared(kind, name, candidates) => {\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0412,\n+                                           \"{} `{}` is undefined or not in scope\",\n+                                           kind,\n+                                           name);\n+            show_candidates(&mut err, span, &candidates);\n+            err\n         }\n         ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(name) => {\n             struct_span_err!(resolver.session,\n@@ -839,6 +851,7 @@ pub struct ModuleS<'a> {\n pub type Module<'a> = &'a ModuleS<'a>;\n \n impl<'a> ModuleS<'a> {\n+\n     fn new(parent_link: ParentLink<'a>, def: Option<Def>, external: bool, is_public: bool) -> Self {\n         ModuleS {\n             parent_link: parent_link,\n@@ -1970,10 +1983,28 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 Err(())\n             }\n         } else {\n-            resolve_error(self,\n-                          trait_path.span,\n-                          ResolutionError::UndeclaredTraitName(&path_names_to_string(trait_path,\n-                                                                                      path_depth)));\n+\n+            // find possible candidates\n+            let trait_name = trait_path.segments.last().unwrap().identifier.name;\n+            let candidates =\n+                self.lookup_candidates(\n+                    trait_name,\n+                    TypeNS,\n+                    |def| match def {\n+                        Def::Trait(_) => true,\n+                        _             => false,\n+                    },\n+                );\n+\n+            // create error object\n+            let name = &path_names_to_string(trait_path, path_depth);\n+            let error =\n+                ResolutionError::UndeclaredTraitName(\n+                    name,\n+                    candidates,\n+                );\n+\n+            resolve_error(self, trait_path.span, error);\n             Err(())\n         }\n     }\n@@ -2297,13 +2328,33 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                           ty.span,\n                                           ResolutionError::SelfUsedOutsideImplOrTrait);\n                         } else {\n-                            resolve_error(self,\n-                                          ty.span,\n-                                          ResolutionError::UseOfUndeclared(\n-                                                                    kind,\n-                                                                    &path_names_to_string(path,\n-                                                                                           0))\n-                                         );\n+                            let segment = path.segments.last();\n+                            let segment = segment.expect(\"missing name in path\");\n+                            let type_name = segment.identifier.name;\n+\n+                            let candidates =\n+                                self.lookup_candidates(\n+                                    type_name,\n+                                    TypeNS,\n+                                    |def| match def {\n+                                        Def::Trait(_) |\n+                                        Def::Enum(_) |\n+                                        Def::Struct(_) |\n+                                        Def::TyAlias(_) => true,\n+                                        _               => false,\n+                                    },\n+                                );\n+\n+                            // create error object\n+                            let name = &path_names_to_string(path, 0);\n+                            let error =\n+                                ResolutionError::UseOfUndeclared(\n+                                    kind,\n+                                    name,\n+                                    candidates,\n+                                );\n+\n+                            resolve_error(self, ty.span, error);\n                         }\n                     }\n                 }\n@@ -3458,6 +3509,99 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         found_traits\n     }\n \n+    /// When name resolution fails, this method can be used to look up candidate\n+    /// entities with the expected name. It allows filtering them using the\n+    /// supplied predicate (which should be used to only accept the types of\n+    /// definitions expected e.g. traits). The lookup spans across all crates.\n+    ///\n+    /// NOTE: The method does not look into imports, but this is not a problem,\n+    /// since we report the definitions (thus, the de-aliased imports).\n+    fn lookup_candidates<FilterFn>(&mut self,\n+                                   lookup_name: Name,\n+                                   namespace: Namespace,\n+                                   filter_fn: FilterFn) -> SuggestedCandidates\n+        where FilterFn: Fn(Def) -> bool {\n+\n+        let mut lookup_results = Vec::new();\n+        let mut worklist = Vec::new();\n+        worklist.push((self.graph_root, Vec::new(), false));\n+\n+        while let Some((in_module,\n+                        path_segments,\n+                        in_module_is_extern)) = worklist.pop() {\n+            build_reduced_graph::populate_module_if_necessary(self, &in_module);\n+\n+            in_module.for_each_child(|name, ns, name_binding| {\n+\n+                // avoid imports entirely\n+                if name_binding.is_import() { return; }\n+\n+                // collect results based on the filter function\n+                if let Some(def) = name_binding.def() {\n+                    if name == lookup_name && ns == namespace && filter_fn(def) {\n+                        // create the path\n+                        let ident = hir::Ident::from_name(name);\n+                        let params = PathParameters::none();\n+                        let segment = PathSegment {\n+                            identifier: ident,\n+                            parameters: params,\n+                        };\n+                        let span = name_binding.span.unwrap_or(syntax::codemap::DUMMY_SP);\n+                        let mut segms = path_segments.clone();\n+                        segms.push(segment);\n+                        let segms = HirVec::from_vec(segms);\n+                        let path = Path {\n+                            span: span,\n+                            global: true,\n+                            segments: segms,\n+                        };\n+                        // the entity is accessible in the following cases:\n+                        // 1. if it's defined in the same crate, it's always\n+                        // accessible (since private entities can be made public)\n+                        // 2. if it's defined in another crate, it's accessible\n+                        // only if both the module is public and the entity is\n+                        // declared as public (due to pruning, we don't explore\n+                        // outside crate private modules => no need to check this)\n+                        if !in_module_is_extern || name_binding.is_public() {\n+                            lookup_results.push(path);\n+                        }\n+                    }\n+                }\n+\n+                // collect submodules to explore\n+                if let Some(module) = name_binding.module() {\n+                    // form the path\n+                    let path_segments = match module.parent_link {\n+                        NoParentLink => path_segments.clone(),\n+                        ModuleParentLink(_, name) => {\n+                            let mut paths = path_segments.clone();\n+                            let ident = hir::Ident::from_name(name);\n+                            let params = PathParameters::none();\n+                            let segm = PathSegment {\n+                                identifier: ident,\n+                                parameters: params,\n+                            };\n+                            paths.push(segm);\n+                            paths\n+                        }\n+                        _ => unreachable!(),\n+                    };\n+\n+                    if !in_module_is_extern || name_binding.is_public() {\n+                        // add the module to the lookup\n+                        let is_extern = in_module_is_extern || module.is_extern_crate;\n+                        worklist.push((module, path_segments, is_extern));\n+                    }\n+                }\n+            })\n+        }\n+\n+        SuggestedCandidates {\n+            name: lookup_name.as_str().to_string(),\n+            candidates: lookup_results,\n+        }\n+    }\n+\n     fn record_def(&mut self, node_id: NodeId, resolution: PathResolution) {\n         debug!(\"(recording def) recording {:?} for {}\", resolution, node_id);\n         assert!(match resolution.last_private {\n@@ -3513,6 +3657,67 @@ fn path_names_to_string(path: &Path, depth: usize) -> String {\n     names_to_string(&names[..])\n }\n \n+/// When an entity with a given name is not available in scope, we search for\n+/// entities with that name in all crates. This method allows outputting the\n+/// results of this search in a programmer-friendly way\n+fn show_candidates(session: &mut DiagnosticBuilder,\n+                   span: syntax::codemap::Span,\n+                   candidates: &SuggestedCandidates) {\n+\n+    let paths = &candidates.candidates;\n+\n+    if paths.len() > 0 {\n+        // don't show more than MAX_CANDIDATES results, so\n+        // we're consistent with the trait suggestions\n+        const MAX_CANDIDATES: usize = 5;\n+\n+        // we want consistent results across executions, but candidates are produced\n+        // by iterating through a hash map, so make sure they are ordered:\n+        let mut path_strings: Vec<_> = paths.into_iter()\n+                                            .map(|p| path_names_to_string(&p, 0))\n+                                            .collect();\n+        path_strings.sort();\n+\n+        // behave differently based on how many candidates we have:\n+        if !paths.is_empty() {\n+            if paths.len() == 1 {\n+                session.fileline_help(\n+                    span,\n+                    &format!(\"you can to import it into scope: `use {};`.\",\n+                        &path_strings[0]),\n+                );\n+            } else {\n+                session.fileline_help(span, \"you can import several candidates \\\n+                    into scope (`use ...;`):\");\n+                let count = path_strings.len() as isize - MAX_CANDIDATES as isize + 1;\n+\n+                for (idx, path_string) in path_strings.iter().enumerate() {\n+                    if idx == MAX_CANDIDATES - 1 && count > 1 {\n+                        session.fileline_help(\n+                            span,\n+                            &format!(\"  and {} other candidates\", count).to_string(),\n+                        );\n+                        break;\n+                    } else {\n+                        session.fileline_help(\n+                            span,\n+                            &format!(\"  `{}`\", path_string).to_string(),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    } else {\n+        // nothing found:\n+        session.fileline_help(\n+            span,\n+            &format!(\"no candidates by the name of `{}` found in your \\\n+            project; maybe you misspelled the name or forgot to import \\\n+            an external crate?\", candidates.name.to_string()),\n+        );\n+    };\n+}\n+\n /// A somewhat inefficient routine to obtain the name of a module.\n fn module_to_string(module: Module) -> String {\n     let mut names = Vec::new();"}, {"sha": "fae0fe16a266c4e5c3bdc7de5576a93bca2c0480", "filename": "src/test/auxiliary/issue-21221-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fauxiliary%2Fissue-21221-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fauxiliary%2Fissue-21221-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21221-3.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// testing whether the lookup mechanism picks up types\n+// defined in the outside crate\n+\n+#![crate_type=\"lib\"]\n+\n+pub mod outer {\n+    // should suggest this\n+    pub trait OuterTrait {}\n+\n+    // should not suggest this since the module is private\n+    mod private_module {\n+        pub trait OuterTrait {}\n+    }\n+\n+    // should not suggest since the trait is private\n+    pub mod public_module {\n+        trait OuterTrait {}\n+    }\n+}"}, {"sha": "fffe060ee24a54261b3822e33b5d8a52327268b3", "filename": "src/test/auxiliary/issue-21221-4.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fauxiliary%2Fissue-21221-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fauxiliary%2Fissue-21221-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21221-4.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// testing whether the lookup mechanism picks up types\n+// defined in the outside crate\n+\n+#![crate_type=\"lib\"]\n+\n+mod foo {\n+    // should not be suggested => foo is private\n+    pub trait T {}\n+}\n+\n+// should be suggested\n+pub use foo::T;"}, {"sha": "59d871460978347496475de3e445c4d594e18e31", "filename": "src/test/compile-fail/associated-types-eq-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -17,7 +17,7 @@ pub trait Foo {\n }\n \n fn foo2<I: Foo>(x: I) {\n-    let _: A = x.boo(); //~ERROR use of undeclared\n+    let _: A = x.boo(); //~ERROR undefined or not in scope\n }\n \n pub fn main() {}"}, {"sha": "a3139905244c6aa4ec9a0216a31164bacaf1bd17", "filename": "src/test/compile-fail/bad-type-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -10,6 +10,6 @@\n \n fn foo<T>() {\n     fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n-    //~^ ERROR use of undeclared type name\n+    //~^ ERROR type name `T` is undefined or not in scope\n }\n fn main() { }"}, {"sha": "d8bdd5974c7e1e098039ca404161876de040a21d", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -24,7 +24,7 @@ extern \"rust-intrinsic\" {\n \n     // Unresolved bounds should still error.\n     fn align_of<T: NoSuchTrait>() -> usize;\n-    //~^ ERROR use of undeclared trait name `NoSuchTrait`\n+    //~^ ERROR trait `NoSuchTrait` is not in scope\n }\n \n fn main() {}"}, {"sha": "1e5662aa1721ffc44d88d79e6d3cb3315f95ea8d", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     C; //~ ERROR: unresolved\n     import(); //~ ERROR: unresolved\n \n-    foo::<A>(); //~ ERROR: undeclared\n-    foo::<C>(); //~ ERROR: undeclared\n-    foo::<D>(); //~ ERROR: undeclared\n+    foo::<A>(); //~ ERROR: not in scope\n+    foo::<C>(); //~ ERROR: not in scope\n+    foo::<D>(); //~ ERROR: not in scope\n }"}, {"sha": "6fcda66486b78018ef3fe61b08c2d0270ec6e89b", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -15,7 +15,7 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n     //~^ ERROR cannot use an outer type parameter in this context\n-    //~| ERROR use of undeclared type name `T`\n+    //~| ERROR type name `T` is undefined or not in scope\n }\n \n fn main() {"}, {"sha": "0447cf781ff95c81da07ceff1485a2c510b2b688", "filename": "src/test/compile-fail/issue-18058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n impl Undefined {}\n-//~^ ERROR use of undeclared type name `Undefined`\n+//~^ ERROR type name `Undefined` is undefined or not in scope\n \n fn main() {}"}, {"sha": "f06496463e4c1d015e2415b888b2c19faae837dc", "filename": "src/test/compile-fail/issue-18119.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-18119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-18119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18119.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -13,10 +13,10 @@ static Y: u8 = 1;\n fn foo() {}\n \n impl X {}\n-//~^ ERROR use of undeclared type name `X`\n+//~^ ERROR type name `X` is undefined or not in scope\n impl Y {}\n-//~^ ERROR use of undeclared type name `Y`\n+//~^ ERROR type name `Y` is undefined or not in scope\n impl foo {}\n-//~^ ERROR use of undeclared type name `foo`\n+//~^ ERROR type name `foo` is undefined or not in scope\n \n fn main() {}"}, {"sha": "3a7a1692f38cf8b1e3bf01f313a474c6e2427511", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -17,7 +17,7 @@ trait From<Src> {\n trait To: Sized {\n     fn to<Dst: From<Self>>(self) ->\n         <Dst as From<Self>>::Dst\n-        //~^ ERROR use of undeclared associated type `From::Dst`\n+        //~^ ERROR associated type `From::Dst` is undefined or not in scope\n     {\n         From::from(self)\n     }"}, {"sha": "03dd7b6754ad3ce651f200ea2516cee556505ced", "filename": "src/test/compile-fail/issue-21221-1.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod mul1 {\n+    pub trait Mul {}\n+}\n+\n+mod mul2 {\n+    pub trait Mul {}\n+}\n+\n+mod mul3 {\n+    enum Mul {\n+      Yes,\n+      No\n+    }\n+}\n+\n+mod mul4 {\n+    type Mul = String;\n+}\n+\n+mod mul5 {\n+    struct Mul{\n+        left_term: u32,\n+        right_term: u32\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct Foo;\n+\n+// When we comment the next line:\n+//use mul1::Mul;\n+\n+// BEFORE, we got the following error for the `impl` below:\n+//   error: use of undeclared trait name `Mul` [E0405]\n+// AFTER, we get this message:\n+//   error: trait `Mul` is not in scope.\n+//   help: ...\n+//   help: you can import several candidates into scope (`use ...;`):\n+//   help:   `mul1::Mul`\n+//   help:   `mul2::Mul`\n+//   help:   `std::ops::Mul`\n+\n+impl Mul for Foo {\n+//~^ ERROR trait `Mul` is not in scope\n+//~| HELP `mul1::Mul`\n+//~| HELP `mul2::Mul`\n+//~| HELP `std::ops::Mul`\n+}\n+\n+// BEFORE, we got:\n+//   error: use of undeclared type name `Mul` [E0412]\n+// AFTER, we get:\n+//   error: type name `Mul` is not in scope. Maybe you meant:\n+//   help: ...\n+//   help: you can import several candidates into scope (`use ...;`):\n+//   help:   `mul1::Mul`\n+//   help:   `mul2::Mul`\n+//   help:   `mul3::Mul`\n+//   help:   `mul4::Mul`\n+//   help:   and 2 other candidates\n+fn getMul() -> Mul {\n+//~^ ERROR type name `Mul` is undefined or not in scope\n+//~| HELP `mul1::Mul`\n+//~| HELP `mul2::Mul`\n+//~| HELP `mul3::Mul`\n+//~| HELP `mul4::Mul`\n+//~| HELP and 2 other candidates\n+}\n+\n+// Let's also test what happens if the trait doesn't exist:\n+impl ThisTraitReallyDoesntExistInAnyModuleReally for Foo {\n+//~^ ERROR trait `ThisTraitReallyDoesntExistInAnyModuleReally` is not in scope\n+}\n+\n+// Let's also test what happens if there's just one alternative:\n+impl Div for Foo {\n+//~^ ERROR trait `Div` is not in scope\n+//~| HELP `use std::ops::Div;`\n+}\n+\n+fn main() {\n+    let foo = Foo();\n+    println!(\"Hello, {:?}!\", foo);\n+}"}, {"sha": "4145d20dea5557189c21b02dbed7be370a10881d", "filename": "src/test/compile-fail/issue-21221-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod foo {\n+    pub mod bar {\n+        // note: trait T is not public, but being in the current\n+        // crate, it's fine to show it, since the programmer can\n+        // decide to make it public based on the suggestion ...\n+        trait T {}\n+    }\n+    // imports should be ignored:\n+    use self::bar::T;\n+}\n+\n+pub mod baz {\n+    pub use foo;\n+    pub use std::ops::{Mul as T};\n+}\n+\n+struct Foo;\n+impl T for Foo { }\n+//~^ ERROR trait `T` is not in scope\n+//~| HELP you can to import it into scope: `use foo::bar::T;`."}, {"sha": "ba66496b93039a7a39016611fe3012aaf97a43d5", "filename": "src/test/compile-fail/issue-21221-3.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// testing whether the lookup mechanism picks up types\n+// defined in the outside crate\n+\n+// aux-build:issue-21221-3.rs\n+\n+extern crate issue_21221_3;\n+\n+struct Foo;\n+\n+// NOTE: This shows only traits accessible from the current\n+// crate, thus the two private entities:\n+//   `issue_21221_3::outer::private_module::OuterTrait` and\n+//   `issue_21221_3::outer::public_module::OuterTrait`\n+// are hidden from the view.\n+impl OuterTrait for Foo {}\n+//~^ ERROR trait `OuterTrait` is not in scope\n+//~| HELP you can to import it into scope: `use issue_21221_3::outer::OuterTrait;`.\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "8d09510ae091adc93b5b9181cb040515acf3be26", "filename": "src/test/compile-fail/issue-21221-4.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// testing whether the lookup mechanism picks up types\n+// defined in the outside crate\n+\n+// aux-build:issue-21221-4.rs\n+\n+extern crate issue_21221_4;\n+\n+struct Foo;\n+\n+impl T for Foo {}\n+//~^ ERROR trait `T` is not in scope\n+//~| HELP you can to import it into scope: `use issue_21221_4::T;`.\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "74f1be95420bd8ed247906f74a0ae8c88bbe62f3", "filename": "src/test/compile-fail/issue-22037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -11,7 +11,7 @@\n trait A {\n     type Output;\n     fn a(&self) -> <Self as A>::X;\n-//~^ ERROR: use of undeclared associated type `A::X`\n+//~^ ERROR: associated type `A::X` is undefined or not in scope\n }\n \n impl A for u32 {"}, {"sha": "46a43bdfcb8d6108b9e9c11d9413a35975c88585", "filename": "src/test/compile-fail/issue-22384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -14,5 +14,5 @@ trait Trait {\n \n fn main() {\n     <<i32 as Copy>::foobar as Trait>::foo();\n-    //~^ ERROR use of undeclared associated type `Copy::foobar`\n+    //~^ ERROR associated type `Copy::foobar` is undefined or not in scope\n }"}, {"sha": "03473bd44cc1bcce136af6bdf35c25260068f068", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -13,8 +13,8 @@ fn siphash<T>() {\n     trait t {\n         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function; try using\n         //~^ ERROR can't use type parameters from outer function; try using\n-        //~^^ ERROR use of undeclared type name `T`\n-        //~^^^ ERROR use of undeclared type name `T`\n+        //~^^ ERROR type name `T` is undefined or not in scope\n+        //~^^^ ERROR type name `T` is undefined or not in scope\n     }\n }\n "}, {"sha": "4f955df82051f535df746e4147542fdf0c3cbecb", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -11,7 +11,7 @@\n fn foo<T>() {\n     struct foo {\n         x: T, //~ ERROR can't use type parameters from outer function;\n-        //~^ ERROR use of undeclared type name\n+        //~^ ERROR type name `T` is undefined or not in scope\n     }\n \n     impl<T> Drop for foo<T> {"}, {"sha": "a6fe719509c9d5aa8a8efe0a95ef74b9f4a176a1", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -23,7 +23,7 @@ mod a {\n     pub mod sub {\n         use a::b::*;\n         fn sub() -> bar { 1 }\n-        //~^ ERROR: undeclared type name\n+        //~^ ERROR: type name `bar` is undefined or not in scope\n     }\n }\n "}, {"sha": "20d239c6ae046540009c5215f44c7d415be7c04a", "filename": "src/test/compile-fail/issue-5997-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -11,7 +11,7 @@\n fn f<Z>() -> bool {\n     enum E { V(Z) }\n     //~^ ERROR can't use type parameters from outer function\n-    //~^^ ERROR use of undeclared type name `Z`\n+    //~^^ ERROR type name `Z` is undefined or not in scope\n     true\n }\n "}, {"sha": "40be2f04cb43ca5daace5380ff219a76ee9936b2", "filename": "src/test/compile-fail/issue-5997-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f<T>() -> bool {\n-    struct S(T); //~ ERROR use of undeclared type name `T`\n+    struct S(T); //~ ERROR type name `T` is undefined or not in scope\n     //~^ ERROR can't use type parameters from outer function; try using\n \n     true"}, {"sha": "96ac2de17628504c22ad540bf7860b60217550e8", "filename": "src/test/compile-fail/issue-7607-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: isize\n }\n \n-impl Fo { //~ ERROR use of undeclared type name `Fo`\n+impl Fo { //~ ERROR type name `Fo` is undefined or not in scope\n     fn foo() {}\n }\n "}, {"sha": "1c97c0c886da28bc9df2330c3bdfa17e9c6b72e6", "filename": "src/test/compile-fail/issue-8767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl B { //~ ERROR use of undeclared type name `B`\n+impl B { //~ ERROR type name `B` is undefined or not in scope\n }\n \n fn main() {"}, {"sha": "af1046bcd5d97b02d7668b531923e47e4a500d0f", "filename": "src/test/compile-fail/no-implicit-prelude-nested.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -18,23 +18,23 @@\n mod foo {\n     mod baz {\n         struct Test;\n-        impl Add for Test {} //~ ERROR: use of undeclared trait\n-        impl Clone for Test {} //~ ERROR: use of undeclared trait\n-        impl Iterator for Test {} //~ ERROR: use of undeclared trait\n-        impl ToString for Test {} //~ ERROR: use of undeclared trait\n-        impl Writer for Test {} //~ ERROR: use of undeclared trait\n+        impl Add for Test {} //~ ERROR: not in scope\n+        impl Clone for Test {} //~ ERROR: not in scope\n+        impl Iterator for Test {} //~ ERROR: not in scope\n+        impl ToString for Test {} //~ ERROR: not in scope\n+        impl Writer for Test {} //~ ERROR: not in scope\n \n         fn foo() {\n             drop(2) //~ ERROR: unresolved name\n         }\n     }\n \n     struct Test;\n-    impl Add for Test {} //~ ERROR: use of undeclared trait\n-    impl Clone for Test {} //~ ERROR: use of undeclared trait\n-    impl Iterator for Test {} //~ ERROR: use of undeclared trait\n-    impl ToString for Test {} //~ ERROR: use of undeclared trait\n-    impl Writer for Test {} //~ ERROR: use of undeclared trait\n+    impl Add for Test {} //~ ERROR: not in scope\n+    impl Clone for Test {} //~ ERROR: not in scope\n+    impl Iterator for Test {} //~ ERROR: not in scope\n+    impl ToString for Test {} //~ ERROR: not in scope\n+    impl Writer for Test {} //~ ERROR: not in scope\n \n     fn foo() {\n         drop(2) //~ ERROR: unresolved name\n@@ -45,11 +45,11 @@ fn qux() {\n     #[no_implicit_prelude]\n     mod qux_inner {\n         struct Test;\n-        impl Add for Test {} //~ ERROR: use of undeclared trait\n-        impl Clone for Test {} //~ ERROR: use of undeclared trait\n-        impl Iterator for Test {} //~ ERROR: use of undeclared trait\n-        impl ToString for Test {} //~ ERROR: use of undeclared trait\n-        impl Writer for Test {} //~ ERROR: use of undeclared trait\n+        impl Add for Test {} //~ ERROR: not in scope\n+        impl Clone for Test {} //~ ERROR: not in scope\n+        impl Iterator for Test {} //~ ERROR: not in scope\n+        impl ToString for Test {} //~ ERROR: not in scope\n+        impl Writer for Test {} //~ ERROR: not in scope\n \n         fn foo() {\n             drop(2) //~ ERROR: unresolved name"}, {"sha": "4693fd14e7de756f4d1246ec08abc6023a55e17a", "filename": "src/test/compile-fail/no-implicit-prelude.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -17,11 +17,11 @@\n // fail with the same error message).\n \n struct Test;\n-impl Add for Test {} //~ ERROR: use of undeclared trait\n-impl Clone for Test {} //~ ERROR: use of undeclared trait\n-impl Iterator for Test {} //~ ERROR: use of undeclared trait\n-impl ToString for Test {} //~ ERROR: use of undeclared trait\n-impl Writer for Test {} //~ ERROR: use of undeclared trait\n+impl Add for Test {} //~ ERROR: not in scope\n+impl Clone for Test {} //~ ERROR: not in scope\n+impl Iterator for Test {} //~ ERROR: not in scope\n+impl ToString for Test {} //~ ERROR: not in scope\n+impl Writer for Test {} //~ ERROR: not in scope\n \n fn main() {\n     drop(2) //~ ERROR: unresolved name"}, {"sha": "dcab3a46b0a5945c86d27a626ded7dd8e4482d18", "filename": "src/test/compile-fail/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -42,7 +42,7 @@ pub mod foo2 {\n fn test_glob2() {\n     use foo2::*;\n \n-    let _x: Box<Bar>;  //~ ERROR use of undeclared type name `Bar`\n+    let _x: Box<Bar>;  //~ ERROR type name `Bar` is undefined or not in scope\n }\n \n // neither public\n@@ -58,7 +58,7 @@ fn test_glob3() {\n     use foo3::*;\n \n     Bar();  //~ ERROR unresolved name `Bar`\n-    let _x: Box<Bar>;  //~ ERROR  use of undeclared type name `Bar`\n+    let _x: Box<Bar>;  //~ ERROR  type name `Bar` is undefined or not in scope\n }\n \n fn main() {"}, {"sha": "92134ecde91aa56c9ba3bccb0281128e5a98f6f6", "filename": "src/test/compile-fail/resolve-type-param-in-item-in-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -18,7 +18,7 @@ trait TraitA<A> {\n             //~^ ERROR parameter `B` is never used\n             Variance(A)\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR use of undeclared type name `A`\n+                //~^^ ERROR type name `A` is undefined or not in scope\n         }\n     }\n }\n@@ -27,7 +27,7 @@ trait TraitB<A> {\n     fn outer(self) {\n         struct Foo<B>(A);\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR use of undeclared type name `A`\n+                //~^^ ERROR type name `A` is undefined or not in scope\n                 //~^^^ ERROR parameter `B` is never used\n     }\n }\n@@ -36,7 +36,7 @@ trait TraitC<A> {\n     fn outer(self) {\n         struct Foo<B> { a: A }\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR use of undeclared type name `A`\n+                //~^^ ERROR type name `A` is undefined or not in scope\n                 //~^^^ ERROR parameter `B` is never used\n     }\n }\n@@ -45,7 +45,7 @@ trait TraitD<A> {\n     fn outer(self) {\n         fn foo<B>(a: A) { }\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR use of undeclared type name `A`\n+                //~^^ ERROR type name `A` is undefined or not in scope\n     }\n }\n "}, {"sha": "dae3a79832b10ddf847cde152cc2bfec77fc32ba", "filename": "src/test/compile-fail/resolve-unknown-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -10,10 +10,10 @@\n \n \n trait NewTrait : SomeNonExistentTrait {}\n-//~^ ERROR use of undeclared trait name `SomeNonExistentTrait`\n+//~^ ERROR trait `SomeNonExistentTrait` is not in scope\n \n impl SomeNonExistentTrait for isize {}\n-//~^ ERROR use of undeclared trait name `SomeNonExistentTrait`\n+//~^ ERROR trait `SomeNonExistentTrait` is not in scope\n \n fn f<T:SomeNonExistentTrait>() {}\n-//~^ ERROR use of undeclared trait name `SomeNonExistentTrait`\n+//~^ ERROR trait `SomeNonExistentTrait` is not in scope"}, {"sha": "c04e197b6bd774ad72489772baf1f66a3c58914e", "filename": "src/test/compile-fail/trait-impl-for-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Ftrait-impl-for-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Ftrait-impl-for-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-for-module.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -14,7 +14,7 @@ mod a {\n trait A {\n }\n \n-impl A for a { //~ ERROR use of undeclared type name `a`\n+impl A for a { //~ ERROR type name `a` is undefined or not in scope\n }\n \n fn main() {"}, {"sha": "21450856ae6ca1dc844e6d9b75e926c3c2422660", "filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfabd173724e5e1bae204126261a03d850d86107/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=cfabd173724e5e1bae204126261a03d850d86107", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-fn f<F:Nonexist(isize) -> isize>(x: F) {} //~ ERROR undeclared trait name `Nonexist`\n+fn f<F:Nonexist(isize) -> isize>(x: F) {} //~ ERROR trait `Nonexist` is not in scope\n \n type Typedef = isize;\n "}]}