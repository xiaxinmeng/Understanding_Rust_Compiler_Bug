{"sha": "4600212a385b41f0c718b6b07dbb6c2c4531314a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDAyMTJhMzg1YjQxZjBjNzE4YjZiMDdkYmI2YzJjNDUzMTMxNGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-30T05:29:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-03T06:12:20Z"}, "message": "Fix inner statics having the same symbol name\n\nBefore, the path name for all items defined in methods of traits and impls never\ntook into account the name of the method. This meant that if you had two statics\nof the same name in two different methods the statics would end up having the\nsame symbol named (even after mangling) because the path components leading to\nthe symbol were exactly the same (just __extensions__ and the static name).\n\nIt turns out that if you add the symbol \"A\" twice to LLVM, it automatically\nmakes the second one \"A1\" instead of \"A\". What this meant is that in local crate\ncompilations we never found this bug. Even across crates, this was never a\nproblem. The problem arises when you have generic methods that don't get\ngenerated at compile-time of a library. If the statics were re-added to LLVM by\na client crate of a library in a different order, you would reference different\nconstants (the integer suffixes wouldn't be guaranteed to be the same).\n\nThis fixes the problem by adding the method name to symbol path when building\nthe ast_map. In doing so, two symbols in two different methods are disambiguated\nagainst.", "tree": {"sha": "128dd8716bcadf95470181b374d1ebed9d1b6e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128dd8716bcadf95470181b374d1ebed9d1b6e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4600212a385b41f0c718b6b07dbb6c2c4531314a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4600212a385b41f0c718b6b07dbb6c2c4531314a", "html_url": "https://github.com/rust-lang/rust/commit/4600212a385b41f0c718b6b07dbb6c2c4531314a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4600212a385b41f0c718b6b07dbb6c2c4531314a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f151b388bc55731aa7493ae712e13740aff2380", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f151b388bc55731aa7493ae712e13740aff2380", "html_url": "https://github.com/rust-lang/rust/commit/4f151b388bc55731aa7493ae712e13740aff2380"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "5da94bebf165934f08ad1c8d6332bf18cb2b77aa", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=4600212a385b41f0c718b6b07dbb6c2c4531314a", "patch": "@@ -153,7 +153,15 @@ impl Ctx {\n         for a in decl.inputs.iter() {\n             self.map.insert(a.id, node_arg);\n         }\n+        match *fk {\n+            visit::fk_method(name, _, _) => { self.path.push(path_name(name)) }\n+            _ => {}\n+        }\n         visit::walk_fn(self, fk, decl, body, sp, id, ());\n+        match *fk {\n+            visit::fk_method(*) => { self.path.pop(); }\n+            _ => {}\n+        }\n     }\n \n     fn map_stmt(&mut self, stmt: @stmt) {"}, {"sha": "706586684ec0a0d5d3e9b0c385de0cbac66cd39a", "filename": "src/test/auxiliary/inner_static.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Ftest%2Fauxiliary%2Finner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Ftest%2Fauxiliary%2Finner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finner_static.rs?ref=4600212a385b41f0c718b6b07dbb6c2c4531314a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct A<T>;\n+\n+impl<T> A<T> {\n+    pub fn foo(&self) -> int {\n+        static a: int = 5;\n+        return a\n+    }\n+\n+    pub fn bar(&self) -> int {\n+        static a: int = 3;\n+        return a;\n+    }\n+}\n+\n+pub fn foo() -> int {\n+    let a = A::<()>;\n+    return a.foo() + a.bar();\n+}"}, {"sha": "969dc607b801460ca01a39bcee560d7644b1df23", "filename": "src/test/run-pass/inner-static.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Ftest%2Frun-pass%2Finner-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4600212a385b41f0c718b6b07dbb6c2c4531314a/src%2Ftest%2Frun-pass%2Finner-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-static.rs?ref=4600212a385b41f0c718b6b07dbb6c2c4531314a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:inner_static.rs\n+// xfail-fast\n+\n+extern mod inner_static;\n+\n+pub fn main() {\n+    let a = inner_static::A::<()>;\n+    assert_eq!(a.bar(), 3);\n+}"}]}