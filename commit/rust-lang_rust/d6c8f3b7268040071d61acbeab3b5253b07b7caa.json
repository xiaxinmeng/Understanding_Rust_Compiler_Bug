{"sha": "d6c8f3b7268040071d61acbeab3b5253b07b7caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzhmM2I3MjY4MDQwMDcxZDYxYWNiZWFiM2I1MjUzYjA3YjdjYWE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-09-16T12:14:59Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-11-25T14:25:55Z"}, "message": "Add `LpDowncast`, `LoanPath` variant tracking downcasts in match arms.\n\n`LpDowncast` carries the `DefId` of the variant itself.  To support\nthis, added the enum variant `DefId` to the `cat_downcast` variant in\n`mem_categorization::categorization`.\n\n(updated to fix mem_categorization to handle downcast of enum\nstruct-variants properly.)", "tree": {"sha": "75c4280f269b18d0ce8dda268ecd79f925f2178e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c4280f269b18d0ce8dda268ecd79f925f2178e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c8f3b7268040071d61acbeab3b5253b07b7caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c8f3b7268040071d61acbeab3b5253b07b7caa", "html_url": "https://github.com/rust-lang/rust/commit/d6c8f3b7268040071d61acbeab3b5253b07b7caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c8f3b7268040071d61acbeab3b5253b07b7caa/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "html_url": "https://github.com/rust-lang/rust/commit/e31fc9dd4f21138d322cfc8adc270a58bcc4146f"}], "stats": {"total": 153, "additions": 105, "deletions": 48}, "files": [{"sha": "1985e4cf77bc66a783fea0cfda5f7ce94f3cc7ae", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -52,6 +52,7 @@ fn owned_ptr_base_path<'a>(loan_path: &'a LoanPath) -> &'a LoanPath {\n                     None => Some(&**lp_base)\n                 }\n             }\n+            LpDowncast(ref lp_base, _) |\n             LpExtend(ref lp_base, _, _) => owned_ptr_base_path_helper(&**lp_base)\n         }\n     }\n@@ -75,6 +76,7 @@ fn owned_ptr_base_path_rc(loan_path: &Rc<LoanPath>) -> Rc<LoanPath> {\n                     None => Some(lp_base.clone())\n                 }\n             }\n+            LpDowncast(ref lp_base, _) |\n             LpExtend(ref lp_base, _, _) => owned_ptr_base_path_helper(lp_base)\n         }\n     }\n@@ -298,6 +300,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 LpVar(_) | LpUpvar(_) => {\n                     break;\n                 }\n+                LpDowncast(ref lp_base, _) |\n                 LpExtend(ref lp_base, _, _) => {\n                     loan_path = &**lp_base;\n                 }\n@@ -726,6 +729,11 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             LpVar(_) | LpUpvar(_) => {\n                 // assigning to `x` does not require that `x` is initialized\n             }\n+            LpDowncast(ref lp_base, _) => {\n+                // assigning to `(P->Variant).f` is ok if assigning to `P` is ok\n+                self.check_if_assigned_path_is_moved(id, span,\n+                                                     use_kind, lp_base);\n+            }\n             LpExtend(ref lp_base, _, LpInterior(_)) => {\n                 // assigning to `P.f` is ok if assigning to `P` is ok\n                 self.check_if_assigned_path_is_moved(id, span,\n@@ -864,7 +872,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         cmt = b;\n                     }\n \n-                    mc::cat_downcast(b) |\n+                    mc::cat_downcast(b, _) |\n                     mc::cat_interior(b, _) => {\n                         assert_eq!(cmt.mutbl, mc::McInherited);\n                         cmt = b;"}, {"sha": "3ce32036abce1870c670e97fbfcfd0d7918932a0", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -144,7 +144,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             None\n         }\n \n-        mc::cat_downcast(ref b) |\n+        mc::cat_downcast(ref b, _) |\n         mc::cat_interior(ref b, _) => {\n             match b.ty.sty {\n                 ty::ty_struct(did, _) | ty::ty_enum(did, _) => {"}, {"sha": "7a7ed3e75d20edac25793480156aeec8dfac0eb3", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n                 Ok(())\n             }\n \n-            mc::cat_downcast(ref base) |\n+            mc::cat_downcast(ref base, _) |\n             mc::cat_deref(ref base, _, mc::OwnedPtr) |     // L-Deref-Send\n             mc::cat_interior(ref base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             mc::cat_deref(_, _, mc::Implicit(_, r)) => {\n                 r\n             }\n-            mc::cat_downcast(ref cmt) |\n+            mc::cat_downcast(ref cmt, _) |\n             mc::cat_deref(ref cmt, _, mc::OwnedPtr) |\n             mc::cat_interior(ref cmt, _) => {\n                 self.scope(cmt)"}, {"sha": "f311918282c1a28660b3d896a2cda885e148e789", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -400,6 +400,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             LpUpvar(ty::UpvarId{ var_id: local_id, closure_expr_id: _ }) => {\n                 self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n             }\n+            LpDowncast(ref base, _) |\n             LpExtend(ref base, mc::McInherited, _) |\n             LpExtend(ref base, mc::McDeclared, _) => {\n                 self.mark_loan_path_as_mutated(&**base);"}, {"sha": "aaa0fa88242b00dbfb9d530b556c32ea3ecce632", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -124,7 +124,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                         bccx.cmt_to_string(&*move_from)).as_slice());\n         }\n \n-        mc::cat_downcast(ref b) |\n+        mc::cat_downcast(ref b, _) |\n         mc::cat_interior(ref b, _) => {\n             match b.ty.sty {\n                 ty::ty_struct(did, _)"}, {"sha": "38ac1d0f2b85a8054f4214190cffcc8ed4a0a031", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 SafeIf(lp.clone(), vec![lp])\n             }\n \n-            mc::cat_downcast(cmt_base) => {\n+            mc::cat_downcast(cmt_base, _) => {\n                 // When we borrow the interior of an enum, we have to\n                 // ensure the enum itself is not mutated, because that\n                 // could cause the type of the memory to change."}, {"sha": "fdd9f6c38b0617ad50e232bf5475b547ae753473", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -284,11 +284,27 @@ impl Loan {\n \n #[deriving(PartialEq, Eq, Hash, Show)]\n pub enum LoanPath {\n-    LpVar(ast::NodeId),               // `x` in doc.rs\n-    LpUpvar(ty::UpvarId),             // `x` captured by-value into closure\n+    LpVar(ast::NodeId),                   // `x` in doc.rs\n+    LpUpvar(ty::UpvarId),                 // `x` captured by-value into closure\n+    LpDowncast(Rc<LoanPath>, ast::DefId), // `x` downcast to particular enum variant\n     LpExtend(Rc<LoanPath>, mc::MutabilityCategory, LoanPathElem)\n }\n \n+impl LoanPath {\n+    fn kill_id(&self, tcx: &ty::ctxt) -> ast::NodeId {\n+        //! Returns the lifetime of the local variable that forms the\n+        //! base of this path.  (See move_data::add_gen_kills.)\n+        match *self {\n+            LpVar(id) =>\n+                tcx.region_maps.var_scope(id),\n+            LpUpvar(ty::UpvarId { var_id: _, closure_expr_id }) =>\n+                closure_to_block(closure_expr_id, tcx),\n+            LpDowncast(ref base_lp, _) | LpExtend(ref base_lp, _, _) =>\n+                base_lp.kill_id(tcx),\n+        }\n+    }\n+}\n+\n #[deriving(PartialEq, Eq, Hash, Show)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n@@ -319,6 +335,7 @@ impl LoanPath {\n                 let block_id = closure_to_block(upvar_id.closure_expr_id, tcx);\n                 region::CodeExtent::from_node_id(block_id)\n             }\n+            LpDowncast(ref base, _) |\n             LpExtend(ref base, _, _) => base.kill_scope(tcx),\n         }\n     }\n@@ -402,9 +419,12 @@ pub fn opt_loan_path(cmt: &mc::cmt) -> Option<Rc<LoanPath>> {\n             })\n         }\n \n-        mc::cat_downcast(ref cmt_base) => {\n+        mc::cat_downcast(ref cmt_base, variant_def_id) =>\n             opt_loan_path(cmt_base)\n-        }\n+            .map(|lp| {\n+                Rc::new(LpDowncast(lp, variant_def_id))\n+            }),\n+\n     }\n }\n \n@@ -862,6 +882,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 out.push_str(ty::local_var_name_str(self.tcx, id).get());\n             }\n \n+            LpDowncast(ref lp_base, variant_def_id) => {\n+                out.push('(');\n+                self.append_loan_path_to_string(&**lp_base, out);\n+                out.push_str(\"->\");\n+                out.push_str(ty::item_path_str(self.tcx, variant_def_id).as_slice());\n+                out.push(')');\n+            }\n+\n+\n             LpExtend(ref lp_base, _, LpInterior(mc::InteriorField(fname))) => {\n                 self.append_autoderefd_loan_path_to_string(&**lp_base, out);\n                 match fname {\n@@ -899,6 +928,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.append_autoderefd_loan_path_to_string(&**lp_base, out)\n             }\n \n+            LpDowncast(ref lp_base, variant_def_id) => {\n+                out.push('(');\n+                self.append_autoderefd_loan_path_to_string(&**lp_base, out);\n+                out.push(':');\n+                out.push_str(ty::item_path_str(self.tcx, variant_def_id).as_slice());\n+                out.push(')');\n+            }\n+\n             LpVar(..) | LpUpvar(..) | LpExtend(_, _, LpInterior(..)) => {\n                 self.append_loan_path_to_string(loan_path, out)\n             }\n@@ -966,6 +1003,15 @@ impl<'tcx> Repr<'tcx> for LoanPath {\n                 format!(\"$({} captured by id={})\", s, closure_expr_id)\n             }\n \n+            &LpDowncast(ref lp, variant_def_id) => {\n+                let variant_str = if variant_def_id.krate == ast::LOCAL_CRATE {\n+                    ty::item_path_str(tcx, variant_def_id)\n+                } else {\n+                    variant_def_id.repr(tcx)\n+                };\n+                format!(\"({}->{})\", lp.repr(tcx), variant_str)\n+            }\n+\n             &LpExtend(ref lp, _, LpDeref(_)) => {\n                 format!(\"{}.*\", lp.repr(tcx))\n             }"}, {"sha": "5e6d5c43a39e6d6306a91780d99220b292180d2e", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -175,6 +175,7 @@ fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n             // location, as there is no accurate tracking of the indices.\n             false\n         }\n+        LpDowncast(ref lp_base, _) |\n         LpExtend(ref lp_base, _, _) => {\n             loan_path_is_precise(&**lp_base)\n         }\n@@ -266,6 +267,7 @@ impl MoveData {\n                 index\n             }\n \n+            LpDowncast(ref base, _) |\n             LpExtend(ref base, _, _) => {\n                 let parent_index = self.move_path(tcx, base.clone());\n \n@@ -324,6 +326,7 @@ impl MoveData {\n             None => {\n                 match **lp {\n                     LpVar(..) | LpUpvar(..) => { }\n+                    LpDowncast(ref b, _) |\n                     LpExtend(ref b, _, _) => {\n                         self.add_existing_base_paths(b, result);\n                     }\n@@ -434,32 +437,24 @@ impl MoveData {\n         // of scope:\n         for path in self.paths.borrow().iter() {\n             match *path.loan_path {\n-                LpVar(id) => {\n-                    let kill_scope = tcx.region_maps.var_scope(id);\n-                    let path = (*self.path_map.borrow())[path.loan_path];\n+                LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n+                    let kill_scope = path.loan_path.kill_scope(tcx);\n+                    let path = *self.path_map.borrow().get(&path.loan_path);\n                     self.kill_moves(path, kill_scope.node_id(), dfcx_moves);\n                 }\n-                LpUpvar(ty::UpvarId { var_id: _, closure_expr_id }) => {\n-                    let kill_id = closure_to_block(closure_expr_id, tcx);\n-                    let path = (*self.path_map.borrow())[path.loan_path];\n-                    self.kill_moves(path, kill_id, dfcx_moves);\n-                }\n                 LpExtend(..) => {}\n             }\n         }\n \n         // Kill all assignments when the variable goes out of scope:\n         for (assignment_index, assignment) in\n                 self.var_assignments.borrow().iter().enumerate() {\n-            match *self.path_loan_path(assignment.path) {\n-                LpVar(id) => {\n-                    let kill_scope = tcx.region_maps.var_scope(id);\n+            let lp = self.path_loan_path(assignment.path);\n+            match *lp {\n+                LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n+                    let kill_scope = lp.kill_scope(tcx);\n                     dfcx_assign.add_kill(kill_scope.node_id(), assignment_index);\n                 }\n-                LpUpvar(ty::UpvarId { var_id: _, closure_expr_id }) => {\n-                    let kill_id = closure_to_block(closure_expr_id, tcx);\n-                    dfcx_assign.add_kill(kill_id, assignment_index);\n-                }\n                 LpExtend(..) => {\n                     tcx.sess.bug(\"var assignment for non var path\");\n                 }"}, {"sha": "2b03774e999b6f76dd1fab9a27f89a997eec4c98", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> euv::Delegate<'tcx> for GlobalChecker {\n                     break\n                 }\n                 mc::cat_deref(ref cmt, _, _) |\n-                mc::cat_downcast(ref cmt) |\n+                mc::cat_downcast(ref cmt, _) |\n                 mc::cat_interior(ref cmt, _) => cur = cmt,\n \n                 mc::cat_rvalue(..) |"}, {"sha": "de31f38b22db92daa6d690e5060bfc2353279aa4", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -98,7 +98,7 @@ pub enum categorization<'tcx> {\n     cat_local(ast::NodeId),                    // local variable\n     cat_deref(cmt<'tcx>, uint, PointerKind),   // deref of a ptr\n     cat_interior(cmt<'tcx>, InteriorKind),     // something interior: field, tuple, etc\n-    cat_downcast(cmt<'tcx>),                   // selects a particular enum variant (*1)\n+    cat_downcast(cmt, ast::DefId),             // selects a particular enum variant (*1)\n \n     // (*1) downcast is only required if the enum has more than one variant\n }\n@@ -1102,13 +1102,14 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     pub fn cat_downcast<N:ast_node>(&self,\n                                     node: &N,\n                                     base_cmt: cmt<'tcx>,\n-                                    downcast_ty: Ty<'tcx>)\n+                                    downcast_ty: Ty<'tcx>,\n+                                    variant_did: ast::DefId)\n                                     -> cmt<'tcx> {\n         Rc::new(cmt_ {\n             id: node.id(),\n             span: node.span(),\n             mutbl: base_cmt.mutbl.inherit(),\n-            cat: cat_downcast(base_cmt),\n+            cat: cat_downcast(base_cmt, variant_did),\n             ty: downcast_ty,\n             note: NoteNone\n         })\n@@ -1172,6 +1173,21 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n         op(self, cmt.clone(), pat);\n \n+        let def_map = self.tcx().def_map.borrow();\n+        let opt_def = def_map.get(&pat.id);\n+\n+        // Note: This goes up here (rather than within the PatEnum arm\n+        // alone) because struct patterns can refer to struct types or\n+        // to struct variants within enums.\n+        let cmt = match opt_def {\n+            Some(&def::DefVariant(enum_did, variant_did, _))\n+                // univariant enums do not need downcasts\n+                if !ty::enum_is_univariant(self.tcx(), enum_did) => {\n+                    self.cat_downcast(pat, cmt.clone(), cmt.ty, variant_did)\n+                }\n+            _ => cmt\n+        };\n+\n         match pat.node {\n           ast::PatWild(_) => {\n             // _\n@@ -1181,24 +1197,15 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             // variant(..)\n           }\n           ast::PatEnum(_, Some(ref subpats)) => {\n-            match self.tcx().def_map.borrow().get(&pat.id) {\n-                Some(&def::DefVariant(enum_did, _, _)) => {\n+            match opt_def {\n+                Some(&def::DefVariant(..)) => {\n                     // variant(x, y, z)\n-\n-                    let downcast_cmt = {\n-                        if ty::enum_is_univariant(self.tcx(), enum_did) {\n-                            cmt // univariant, no downcast needed\n-                        } else {\n-                            self.cat_downcast(pat, cmt.clone(), cmt.ty)\n-                        }\n-                    };\n-\n                     for (i, subpat) in subpats.iter().enumerate() {\n                         let subpat_ty = if_ok!(self.pat_ty(&**subpat)); // see (*2)\n \n                         let subcmt =\n                             self.cat_imm_interior(\n-                                pat, downcast_cmt.clone(), subpat_ty,\n+                                pat, cmt.clone(), subpat_ty,\n                                 InteriorField(PositionalField(i)));\n \n                         if_ok!(self.cat_pattern(subcmt, &**subpat, |x,y,z| op(x,y,z)));\n@@ -1356,7 +1363,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           cat_upvar(ref var) => {\n               upvar_to_string(var, true)\n           }\n-          cat_downcast(ref cmt) => {\n+          cat_downcast(ref cmt, _) => {\n             self.cmt_to_string(&**cmt)\n           }\n         }\n@@ -1392,7 +1399,7 @@ impl<'tcx> cmt_<'tcx> {\n             cat_upvar(..) => {\n                 Rc::new((*self).clone())\n             }\n-            cat_downcast(ref b) |\n+            cat_downcast(ref b, _) |\n             cat_interior(ref b, _) |\n             cat_deref(ref b, _, OwnedPtr) => {\n                 b.guarantor()\n@@ -1416,7 +1423,7 @@ impl<'tcx> cmt_<'tcx> {\n             cat_deref(ref b, _, Implicit(ty::MutBorrow, _)) |\n             cat_deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n             cat_deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n-            cat_downcast(ref b) |\n+            cat_downcast(ref b, _) |\n             cat_deref(ref b, _, OwnedPtr) |\n             cat_interior(ref b, _) => {\n                 // Aliasability depends on base cmt\n@@ -1500,7 +1507,7 @@ impl<'tcx> Repr<'tcx> for categorization<'tcx> {\n             cat_interior(ref cmt, interior) => {\n                 format!(\"{}.{}\", cmt.cat.repr(tcx), interior.repr(tcx))\n             }\n-            cat_downcast(ref cmt) => {\n+            cat_downcast(ref cmt, _) => {\n                 format!(\"{}->(enum)\", cmt.cat.repr(tcx))\n             }\n         }"}, {"sha": "f12b5cdad9886ffae2b25d2eb3057da5264cd535", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c8f3b7268040071d61acbeab3b5253b07b7caa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=d6c8f3b7268040071d61acbeab3b5253b07b7caa", "patch": "@@ -1503,7 +1503,7 @@ fn link_region<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                 }\n             }\n \n-            mc::cat_downcast(cmt_base) |\n+            mc::cat_downcast(cmt_base, _) |\n             mc::cat_deref(cmt_base, _, mc::OwnedPtr) |\n             mc::cat_interior(cmt_base, _) => {\n                 // Borrowing interior or owned data requires the base\n@@ -1744,7 +1744,7 @@ fn adjust_upvar_borrow_kind_for_mut<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n         match cmt.cat.clone() {\n             mc::cat_deref(base, _, mc::OwnedPtr) |\n             mc::cat_interior(base, _) |\n-            mc::cat_downcast(base) => {\n+            mc::cat_downcast(base, _) => {\n                 // Interior or owned data is mutable if base is\n                 // mutable, so iterate to the base.\n                 cmt = base;\n@@ -1795,7 +1795,7 @@ fn adjust_upvar_borrow_kind_for_unique<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>, cmt: mc::c\n         match cmt.cat.clone() {\n             mc::cat_deref(base, _, mc::OwnedPtr) |\n             mc::cat_interior(base, _) |\n-            mc::cat_downcast(base) => {\n+            mc::cat_downcast(base, _) => {\n                 // Interior or owned data is unique if base is\n                 // unique.\n                 cmt = base;"}]}