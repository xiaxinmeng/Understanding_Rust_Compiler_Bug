{"sha": "0c6e385493407815068b9ca618a0baa09ad20d08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmUzODU0OTM0MDc4MTUwNjhiOWNhNjE4YTBiYWEwOWFkMjBkMDg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-21T23:35:56Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T16:04:08Z"}, "message": "Implement a HashMapLint", "tree": {"sha": "d054e41e0f6afcb254e248f2b3af5130bc20f71d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d054e41e0f6afcb254e248f2b3af5130bc20f71d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6e385493407815068b9ca618a0baa09ad20d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6e385493407815068b9ca618a0baa09ad20d08", "html_url": "https://github.com/rust-lang/rust/commit/0c6e385493407815068b9ca618a0baa09ad20d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6e385493407815068b9ca618a0baa09ad20d08/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4484448cd1b879b361d0633d8a4188f46519e8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4484448cd1b879b361d0633d8a4188f46519e8c1", "html_url": "https://github.com/rust-lang/rust/commit/4484448cd1b879b361d0633d8a4188f46519e8c1"}], "stats": {"total": 125, "additions": 114, "deletions": 11}, "files": [{"sha": "f1c288886364ce178c38a82cf1a390ef74d473a3", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 90 lints included in this crate:\n+There are 91 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -31,6 +31,7 @@ name\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[hashmap_entry](https://github.com/Manishearth/rust-clippy/wiki#hashmap_entry)                                 | warn    | use of `contains_key` followed by `insert` on a `HashMap`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases"}, {"sha": "6448847ee2f390012703589bfab0d3ea6208ae29", "filename": "src/hashmap.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhashmap.rs?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -0,0 +1,73 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use syntax::codemap::Span;\n+use utils::{get_item_name, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n+use utils::HASHMAP_PATH;\n+\n+/// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap`.\n+///\n+/// **Why is this bad?** Using `HashMap::entry` is more efficient.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:** `if !m.contains_key(&k) { m.insert(k, v) }`\n+declare_lint! {\n+    pub HASHMAP_ENTRY,\n+    Warn,\n+    \"use of `contains_key` followed by `insert` on a `HashMap`\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct HashMapLint;\n+\n+impl LintPass for HashMapLint {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(HASHMAP_ENTRY)\n+    }\n+}\n+\n+impl LateLintPass for HashMapLint {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {\n+            [\n+                let ExprIf(ref check, ref then, _) = expr.node,\n+                let ExprUnary(UnOp::UnNot, ref check) = check.node,\n+                let ExprMethodCall(ref name, _, ref params) = check.node,\n+                params.len() >= 2,\n+                name.node.as_str() == \"contains_key\"\n+            ], {\n+                let map = &params[0];\n+                let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(map));\n+\n+                if match_type(cx, obj_ty, &HASHMAP_PATH) {\n+                    if let Some(ref then) = then.expr {\n+                        check_for_insert(cx, expr.span, map, then);\n+                    }\n+                    else if then.stmts.len() == 1 {\n+                        if let StmtSemi(ref stmt, _) = then.stmts[0].node {\n+                            check_for_insert(cx, expr.span, map, stmt);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, expr: &Expr) {\n+    if_let_chain! {\n+        [\n+            let ExprMethodCall(ref name, _, ref params) = expr.node,\n+            params.len() >= 3,\n+            name.node.as_str() == \"insert\",\n+            get_item_name(cx, map) == get_item_name(cx, &*params[0])\n+        ], {\n+            span_help_and_lint(cx, HASHMAP_ENTRY, span,\n+                               \"usage of `contains_key` followed by `insert` on `HashMap`\",\n+                               &format!(\"Consider using `{}.entry({}).or_insert({})`\",\n+                                        snippet(cx, map.span, \"..\"),\n+                                        snippet(cx, params[1].span, \"..\"),\n+                                        snippet(cx, params[2].span, \"..\")));\n+        }\n+    }\n+}"}, {"sha": "76c04d53a0b0f4d4f2e6809b6cb8840dd235d351", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -65,6 +65,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod cyclomatic_complexity;\n pub mod escape;\n+pub mod hashmap;\n pub mod misc_early;\n pub mod array_indexing;\n pub mod panic;\n@@ -104,6 +105,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::UnitCmp);\n     reg.register_late_lint_pass(box loops::LoopsPass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n+    reg.register_late_lint_pass(box hashmap::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);\n     reg.register_late_lint_pass(box types::CastPass);\n     reg.register_late_lint_pass(box types::TypeComplexityPass);\n@@ -158,6 +160,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n+        hashmap::HASHMAP_ENTRY,\n         identity_op::IDENTITY_OP,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,"}, {"sha": "a0454a325e4dae66b2b3c0de2b8aa77f3628d5c1", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::Lit_::*;\n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n             in_external_macro, expr_block, span_help_and_lint, is_integer_literal,\n             get_enclosing_block};\n-use utils::{VEC_PATH, LL_PATH};\n+use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH};\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n ///\n@@ -457,7 +457,7 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     is_iterable_array(ty) ||\n         match_type(cx, ty, &VEC_PATH) ||\n         match_type(cx, ty, &LL_PATH) ||\n-        match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]) ||\n+        match_type(cx, ty, &HASHMAP_PATH) ||\n         match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"]) ||\n         match_type(cx, ty, &[\"collections\", \"vec_deque\", \"VecDeque\"]) ||\n         match_type(cx, ty, &[\"collections\", \"binary_heap\", \"BinaryHeap\"]) ||"}, {"sha": "76b57317c31191e3c7a7356323012884567b4101", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -18,15 +18,16 @@ use std::ops::{Deref, DerefMut};\n pub type MethodArgs = HirVec<P<Expr>>;\n \n // module DefPaths for certain structs/enums we check for\n-pub const OPTION_PATH: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n-pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n-pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n-pub const VEC_PATH:    [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n-pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const OPTION_PATH:  [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const RESULT_PATH:  [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n+pub const STRING_PATH:  [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n+pub const VEC_PATH:     [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n+pub const LL_PATH:      [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-pub const MUTEX_PATH:  [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n-pub const CLONE_PATH:  [&'static str; 2] = [\"Clone\", \"clone\"];\n-pub const BEGIN_UNWIND:[&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n+pub const MUTEX_PATH:   [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const CLONE_PATH:   [&'static str; 2] = [\"Clone\", \"clone\"];\n+pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///"}, {"sha": "9b15acf40727dca13f1d8146d55b33a4582f3d5a", "filename": "tests/compile-fail/hashmap.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c6e385493407815068b9ca618a0baa09ad20d08/tests%2Fcompile-fail%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6e385493407815068b9ca618a0baa09ad20d08/tests%2Fcompile-fail%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fhashmap.rs?ref=0c6e385493407815068b9ca618a0baa09ad20d08", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+\n+#![deny(hashmap_entry)]\n+\n+use std::collections::HashMap;\n+use std::hash::Hash;\n+\n+fn insert_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(k, v); } //~ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+}\n+\n+fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(k, v) } else { None }; //~ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n+}\n+\n+/* TODO\n+fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n+    if !m.contains_key(&k) { m.insert(o, v) } else { None };\n+}\n+*/\n+\n+fn main() {\n+}"}]}