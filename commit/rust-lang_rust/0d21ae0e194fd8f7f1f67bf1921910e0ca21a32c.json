{"sha": "0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjFhZTBlMTk0ZmQ4ZjdmMWY2N2JmMTkyMTkxMGUwY2EyMWEzMmM=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-24T09:35:05Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-24T09:35:05Z"}, "message": "manual-unwrap-or / pr remarks, round 3", "tree": {"sha": "9125e1ac9dfcd9ee565be4ba49f581d284b5bfbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9125e1ac9dfcd9ee565be4ba49f581d284b5bfbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "html_url": "https://github.com/rust-lang/rust/commit/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6533d8becfd198299d0bd38550dd6c574cbd194f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6533d8becfd198299d0bd38550dd6c574cbd194f", "html_url": "https://github.com/rust-lang/rust/commit/6533d8becfd198299d0bd38550dd6c574cbd194f"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "22aa37e41fec0e4124b7b3ba316c4bfc91e777f9", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::constant_simple;\n use crate::utils;\n+use crate::utils::sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def, Arm, Expr, ExprKind, Pat, PatKind, QPath};\n@@ -104,28 +105,20 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             None\n         };\n         if let Some(or_arm) = applicable_or_arm(match_arms);\n-        if let Some(scrutinee_snippet) = utils::snippet_opt(cx, scrutinee.span);\n         if let Some(or_body_snippet) = utils::snippet_opt(cx, or_arm.body.span);\n         if let Some(indent) = utils::indent_of(cx, expr.span);\n         if constant_simple(cx, cx.typeck_results(), or_arm.body).is_some();\n         then {\n             let reindented_or_body =\n                 utils::reindent_multiline(or_body_snippet.into(), true, Some(indent));\n-            let wrap_in_parens = !matches!(scrutinee, Expr {\n-                kind: ExprKind::Call(..) | ExprKind::Path(_), ..\n-            });\n-            let l_paren = if wrap_in_parens { \"(\" } else { \"\" };\n-            let r_paren = if wrap_in_parens { \")\" } else { \"\" };\n             utils::span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n                 &format!(\"this pattern reimplements `{}`\", case.unwrap_fn_path()),\n                 \"replace with\",\n                 format!(\n-                    \"{}{}{}.unwrap_or({})\",\n-                    l_paren,\n-                    scrutinee_snippet,\n-                    r_paren,\n+                    \"{}.unwrap_or({})\",\n+                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par(),\n                     reindented_or_body,\n                 ),\n                 Applicability::MachineApplicable,"}, {"sha": "5aa5a43cb92cf672da6888096fed8bd4ceb9db3b", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "patch": "@@ -74,9 +74,19 @@ fn result_unwrap_or() {\n     let a = Ok::<i32, &str>(1);\n     a.unwrap_or(42);\n \n-    // int case, suggestion must surround with parenthesis\n+    // int case, suggestion must surround Result expr with parenthesis\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n+    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    struct S {}\n+    impl S {\n+        fn method(self) -> Option<i32> {\n+            Some(42)\n+        }\n+    }\n+    let s = S {};\n+    s.method().unwrap_or(42);\n+\n     // int case reversed\n     Ok::<i32, &str>(1).unwrap_or(42);\n "}, {"sha": "df534031f54c32c83991357f07cb3826f021323c", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "patch": "@@ -95,12 +95,25 @@ fn result_unwrap_or() {\n         Err(_) => 42,\n     };\n \n-    // int case, suggestion must surround with parenthesis\n+    // int case, suggestion must surround Result expr with parenthesis\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n+    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    struct S {}\n+    impl S {\n+        fn method(self) -> Option<i32> {\n+            Some(42)\n+        }\n+    }\n+    let s = S {};\n+    match s.method() {\n+        Some(i) => i,\n+        None => 42,\n+    };\n+\n     // int case reversed\n     match Ok::<i32, &str>(1) {\n         Err(_) => 42,"}, {"sha": "fc174c4c2705dc3c6d7ea4b6df6b889b7b881c8c", "filename": "tests/ui/manual_unwrap_or.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c/tests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.stderr?ref=0d21ae0e194fd8f7f1f67bf1921910e0ca21a32c", "patch": "@@ -84,8 +84,17 @@ LL | |         Err(_) => 42,\n LL | |     };\n    | |_____^ help: replace with: `(Ok(1) as Result<i32, &str>).unwrap_or(42)`\n \n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:112:5\n+   |\n+LL | /     match s.method() {\n+LL | |         Some(i) => i,\n+LL | |         None => 42,\n+LL | |     };\n+   | |_____^ help: replace with: `s.method().unwrap_or(42)`\n+\n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:105:5\n+  --> $DIR/manual_unwrap_or.rs:118:5\n    |\n LL | /     match Ok::<i32, &str>(1) {\n LL | |         Err(_) => 42,\n@@ -94,7 +103,7 @@ LL | |     };\n    | |_____^ help: replace with: `Ok::<i32, &str>(1).unwrap_or(42)`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:111:5\n+  --> $DIR/manual_unwrap_or.rs:124:5\n    |\n LL | /     match Ok::<i32, &str>(1) {\n LL | |         Ok(i) => i,\n@@ -103,7 +112,7 @@ LL | |     };\n    | |_____^ help: replace with: `Ok::<i32, &str>(1).unwrap_or(1 + 42)`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:118:5\n+  --> $DIR/manual_unwrap_or.rs:131:5\n    |\n LL | /     match Ok::<i32, &str>(1) {\n LL | |         Ok(i) => i,\n@@ -124,13 +133,13 @@ LL |     });\n    |\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:128:5\n+  --> $DIR/manual_unwrap_or.rs:141:5\n    |\n LL | /     match Ok::<&str, &str>(\"Bob\") {\n LL | |         Ok(i) => i,\n LL | |         Err(_) => \"Alice\",\n LL | |     };\n    | |_____^ help: replace with: `Ok::<&str, &str>(\"Bob\").unwrap_or(\"Alice\")`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}