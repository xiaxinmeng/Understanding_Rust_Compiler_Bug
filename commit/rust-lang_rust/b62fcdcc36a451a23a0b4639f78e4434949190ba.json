{"sha": "b62fcdcc36a451a23a0b4639f78e4434949190ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmZjZGNjMzZhNDUxYTIzYTBiNDYzOWY3OGU0NDM0OTQ5MTkwYmE=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-11T06:27:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-12T01:44:27Z"}, "message": "Hack to print lines when error spans are available.", "tree": {"sha": "f2fa89e621dfe4aff7a4050a87b7520da1cc5877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2fa89e621dfe4aff7a4050a87b7520da1cc5877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62fcdcc36a451a23a0b4639f78e4434949190ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62fcdcc36a451a23a0b4639f78e4434949190ba", "html_url": "https://github.com/rust-lang/rust/commit/b62fcdcc36a451a23a0b4639f78e4434949190ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62fcdcc36a451a23a0b4639f78e4434949190ba/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1870e975599e3687672db4656c60b494c2ce7232", "url": "https://api.github.com/repos/rust-lang/rust/commits/1870e975599e3687672db4656c60b494c2ce7232", "html_url": "https://github.com/rust-lang/rust/commit/1870e975599e3687672db4656c60b494c2ce7232"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "a5382a67e05ee48986d0efe3c568e529e2e5756a", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b62fcdcc36a451a23a0b4639f78e4434949190ba/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62fcdcc36a451a23a0b4639f78e4434949190ba/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=b62fcdcc36a451a23a0b4639f78e4434949190ba", "patch": "@@ -1,4 +1,5 @@\n-\n+import std::uint;\n+import std::str;\n import std::vec;\n import std::term;\n import std::io;\n@@ -58,8 +59,12 @@ fn span_to_str(&span sp, &codemap cm) -> str {\n fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n                    &codemap cm) {\n     auto ss = \"<input>:0:0:0:0\";\n+    let option::t[@file_lines] maybe_lines = none;\n     alt (sp) {\n-        case (some(?ssp)) { ss = span_to_str(ssp, cm); }\n+        case (some(?ssp)) {\n+            ss = span_to_str(ssp, cm);\n+            maybe_lines = some(span_to_lines(ssp, cm));\n+        }\n         case (none) { }\n     }\n     io::stdout().write_str(ss + \": \");\n@@ -71,6 +76,22 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n         term::reset(io::stdout().get_buf_writer());\n     }\n     io::stdout().write_str(#fmt(\" %s\\n\", msg));\n+    alt (maybe_lines) {\n+        case (some(?lines)) {\n+            auto rdr = io::file_reader(lines.name);\n+            auto file = str::unsafe_from_bytes(rdr.read_whole_stream());\n+            auto fm = codemap::get_filemap(cm, lines.name);\n+            for (uint line in lines.lines) {\n+                io::stdout().write_str(#fmt(\"%s:%u \", fm.name, line + 1u));\n+                auto s = codemap::get_line(fm, line as int, file);\n+                if (!str::ends_with(s, \"\\n\")) {\n+                    s += \"\\n\";\n+                }\n+                io::stdout().write_str(s);\n+            }\n+        }\n+        case (_) {}\n+    }\n }\n \n fn emit_warning(&option::t[span] sp, &str msg, &codemap cm) {\n@@ -83,6 +104,38 @@ fn emit_note(&option::t[span] sp, &str msg, &codemap cm) {\n     emit_diagnostic(sp, msg, \"note\", 10u8, cm);\n }\n \n+type file_lines = rec(str name, vec[uint] lines);\n+\n+fn span_to_lines(span sp, codemap::codemap cm) -> @file_lines {\n+    auto lo = codemap::lookup_pos(cm, sp.lo);\n+    auto hi = codemap::lookup_pos(cm, sp.hi);\n+    auto lines = [];\n+    for each (uint i in uint::range(lo.line - 1u, hi.line as uint)) {\n+        lines += [i];\n+    }\n+    ret @rec(name=lo.filename, lines=lines);\n+}\n+\n+fn get_line(filemap fm, int line, &str file) -> str {\n+    let uint end;\n+    if ((line as uint) + 1u >= vec::len(fm.lines)) {\n+        end = str::byte_len(file);\n+    } else {\n+        end = fm.lines.(line + 1);\n+    }\n+    ret str::slice(file, fm.lines.(line), end);\n+}\n+\n+fn get_filemap(codemap cm, str filename) -> filemap {\n+    for (filemap fm in cm.files) {\n+        if (fm.name == filename) {\n+            ret fm;\n+        }\n+    }\n+    //XXjdm the following triggers a mismatched type bug\n+    //      (or expected function, found _|_)\n+    fail;// (\"asking for \" + filename + \" which we don't know about\");\n+}\n \n //\n // Local Variables:"}]}