{"sha": "74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWJlNmU2OWU0MWFkM2IzZWZhZjkwOTVmZDQ1ZDYzYzNhNzZkZDA=", "commit": {"author": {"name": "scott-linder", "email": "scott.b.linder@wmich.edu", "date": "2017-06-11T16:11:20Z"}, "committer": {"name": "scott-linder", "email": "scott.b.linder@wmich.edu", "date": "2017-06-11T16:20:20Z"}, "message": "Add `check_local` to `TypePass` for `BORROWED_BOX`\n\nAdds a boolean flag to indicate whether the current type in `check_ty`\nis in a local declaration, as only the borrowed box lint should consider\nthese types.", "tree": {"sha": "1e4210e8226e80fde037e16a980dad2f7bfb65c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4210e8226e80fde037e16a980dad2f7bfb65c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "html_url": "https://github.com/rust-lang/rust/commit/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0/comments", "author": null, "committer": null, "parents": [{"sha": "c29f5ea83b7184b575bb23abac4b47553f807b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29f5ea83b7184b575bb23abac4b47553f807b54", "html_url": "https://github.com/rust-lang/rust/commit/c29f5ea83b7184b575bb23abac4b47553f807b54"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "da4fe963c30380c2aafe0eac787880b66c5a60dd", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "patch": "@@ -100,35 +100,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, field: &StructField) {\n-        check_ty(cx, &field.ty);\n+        check_ty(cx, &field.ty, false);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &TraitItem) {\n         match item.node {\n             TraitItemKind::Const(ref ty, _) |\n-            TraitItemKind::Type(_, Some(ref ty)) => check_ty(cx, ty),\n+            TraitItemKind::Type(_, Some(ref ty)) => check_ty(cx, ty, false),\n             TraitItemKind::Method(ref sig, _) => check_fn_decl(cx, &sig.decl),\n             _ => (),\n         }\n     }\n+\n+    fn check_local(&mut self, cx: &LateContext, local: &Local) {\n+        if let Some(ref ty) = local.ty {\n+            check_ty(cx, ty, true);\n+        }\n+    }\n }\n \n fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n     for input in &decl.inputs {\n-        check_ty(cx, input);\n+        check_ty(cx, input, false);\n     }\n \n     if let FunctionRetTy::Return(ref ty) = decl.output {\n-        check_ty(cx, ty);\n+        check_ty(cx, ty, false);\n     }\n }\n \n-fn check_ty(cx: &LateContext, ast_ty: &hir::Ty) {\n+fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n     if in_macro(ast_ty.span) {\n         return;\n     }\n     match ast_ty.node {\n-        TyPath(ref qpath) => {\n+        TyPath(ref qpath) if !is_local => {\n             let def = cx.tables.qpath_def(qpath, ast_ty.id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items.owned_box() {\n@@ -159,20 +165,20 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty) {\n             }\n             match *qpath {\n                 QPath::Resolved(Some(ref ty), ref p) => {\n-                    check_ty(cx, ty);\n+                    check_ty(cx, ty, is_local);\n                     for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n-                        check_ty(cx, ty);\n+                        check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => {\n                     for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n-                        check_ty(cx, ty);\n+                        check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::TypeRelative(ref ty, ref seg) => {\n-                    check_ty(cx, ty);\n+                    check_ty(cx, ty, is_local);\n                     for ty in seg.parameters.types() {\n-                        check_ty(cx, ty);\n+                        check_ty(cx, ty, is_local);\n                     }\n                 },\n             }\n@@ -213,18 +219,18 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty) {\n                             }};\n                         }\n                     }\n-                    check_ty(cx, ty);\n+                    check_ty(cx, ty, is_local);\n                 },\n-                _ => check_ty(cx, ty),\n+                _ => check_ty(cx, ty, is_local),\n             }\n         },\n         // recurse\n         TySlice(ref ty) |\n         TyArray(ref ty, _) |\n-        TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty),\n+        TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty, is_local),\n         TyTup(ref tys) => {\n             for ty in tys {\n-                check_ty(cx, ty);\n+                check_ty(cx, ty, is_local);\n             }\n         },\n         _ => {},"}, {"sha": "11838a0ec1ca2e4eb617dbbafdad45f309d9bdda", "filename": "clippy_tests/examples/borrow_box.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0/clippy_tests%2Fexamples%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0/clippy_tests%2Fexamples%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fborrow_box.stderr?ref=74ebe6e69e41ad3b3efaf9095fd45d63c3a76dd0", "patch": "@@ -10,6 +10,12 @@ note: lint level defined here\n 4 | #![deny(borrowed_box)]\n   |         ^^^^^^^^^^^^\n \n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> borrow_box.rs:14:14\n+   |\n+14 |     let foo: &Box<bool>;\n+   |              ^^^^^^^^^^ help: try `&bool`\n+\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n   --> borrow_box.rs:18:10\n    |"}]}