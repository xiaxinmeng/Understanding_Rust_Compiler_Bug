{"sha": "f8e2beb3d49a92432234882472b32e1e33f11fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTJiZWIzZDQ5YTkyNDMyMjM0ODgyNDcyYjMyZTFlMzNmMTFmZWU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-01T20:09:54Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-04T17:47:13Z"}, "message": "Treat two-phase borrow reservations as mutable accesses", "tree": {"sha": "3e7d9e786f30ce5b3e442d20d3b9edb42830ed54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7d9e786f30ce5b3e442d20d3b9edb42830ed54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e2beb3d49a92432234882472b32e1e33f11fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e2beb3d49a92432234882472b32e1e33f11fee", "html_url": "https://github.com/rust-lang/rust/commit/f8e2beb3d49a92432234882472b32e1e33f11fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e2beb3d49a92432234882472b32e1e33f11fee/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eda7232797c6a92b39f5058e6e1840e5aa08d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eda7232797c6a92b39f5058e6e1840e5aa08d8b", "html_url": "https://github.com/rust-lang/rust/commit/7eda7232797c6a92b39f5058e6e1840e5aa08d8b"}], "stats": {"total": 403, "additions": 328, "deletions": 75}, "files": [{"sha": "c81da66672fbf70c84cfe4a9c831677e44137dfc", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -52,7 +52,7 @@ crate enum TwoPhaseActivation {\n     ActivatedAt(Location),\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n crate struct BorrowData<'tcx> {\n     /// Location where the borrow reservation starts.\n     /// In many cases, this will be equal to the activation location but not always."}, {"sha": "16436a1f2b076b7c9e38811cf69486dd208c7f72", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -318,7 +318,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         (place, _span): (&Place<'tcx>, Span),\n         borrow: &BorrowData<'tcx>,\n-    ) {\n+    ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n@@ -347,7 +347,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n             .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n-        err.buffer(&mut self.errors_buffer);\n+        err\n     }\n \n     pub(super) fn report_conflicting_borrow(\n@@ -356,7 +356,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         (place, span): (&Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n-    ) {\n+    ) -> DiagnosticBuilder<'cx> {\n         let issued_spans = self.retrieve_borrow_spans(issued_borrow);\n         let issued_span = issued_spans.args_or_use();\n \n@@ -460,9 +460,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         \"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe()\n                     ),\n                 );\n-                err.buffer(&mut self.errors_buffer);\n \n-                return;\n+                return err;\n             }\n \n             (BorrowKind::Unique, _, _, _, _, _) => {\n@@ -563,7 +562,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             None,\n         );\n \n-        err.buffer(&mut self.errors_buffer);\n+        err\n     }\n \n     /// Returns the description of the root place for a conflicting borrow and the full"}, {"sha": "64c0eaab9232f63f05aded0bb84f15a0917719ce", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 78, "deletions": 23, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -18,12 +18,13 @@ use rustc::ty::{self, TyCtxt};\n \n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::bit_set::BitSet;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use smallvec::SmallVec;\n \n-use std::rc::Rc;\n use std::collections::BTreeMap;\n+use std::mem;\n+use std::rc::Rc;\n \n use syntax_pos::Span;\n \n@@ -238,6 +239,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         locals_are_invalidated_at_exit,\n         access_place_error_reported: Default::default(),\n         reservation_error_reported: Default::default(),\n+        reservation_warnings: Default::default(),\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n@@ -260,6 +262,14 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     }\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n+    // Buffer any reservation warnings.\n+    let reservation_warnings = mem::replace(&mut mbcx.reservation_warnings, Default::default());\n+    for (_, (place, span, context, bk, borrow)) in reservation_warnings {\n+        let mut diag = mbcx.report_conflicting_borrow(context, (&place, span), bk, &borrow);\n+        downgrade_if_error(&mut diag);\n+        diag.buffer(&mut mbcx.errors_buffer);\n+    }\n+\n     // For each non-user used mutable variable, check if it's been assigned from\n     // a user-declared local. If so, then put that local into the used_mut set.\n     // Note that this set is expected to be small - only upvars from closures\n@@ -341,18 +351,9 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     // if AST-borrowck signalled no errors, then\n                     // downgrade all the buffered MIR-borrowck errors\n                     // to warnings.\n-                    for err in &mut mbcx.errors_buffer {\n-                        if err.is_error() {\n-                            err.level = Level::Warning;\n-                            err.warn(\n-                                \"this error has been downgraded to a warning for backwards \\\n-                                 compatibility with previous releases\",\n-                            );\n-                            err.warn(\n-                                \"this represents potential undefined behavior in your code and \\\n-                                 this warning will become a hard error in the future\",\n-                            );\n-                        }\n+\n+                    for err in mbcx.errors_buffer.iter_mut() {\n+                        downgrade_if_error(err);\n                     }\n                 }\n                 SignalledError::SawSomeError => {\n@@ -378,6 +379,20 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     result\n }\n \n+fn downgrade_if_error(diag: &mut Diagnostic) {\n+    if diag.is_error() {\n+        diag.level = Level::Warning;\n+        diag.warn(\n+            \"this error has been downgraded to a warning for backwards \\\n+            compatibility with previous releases\",\n+        );\n+        diag.warn(\n+            \"this represents potential undefined behavior in your code and \\\n+            this warning will become a hard error in the future\",\n+        );\n+    }\n+}\n+\n pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     mir: &'cx Mir<'tcx>,\n@@ -410,6 +425,13 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     // but it is currently inconvenient to track down the `BorrowIndex`\n     // at the time we detect and report a reservation error.\n     reservation_error_reported: FxHashSet<Place<'tcx>>,\n+    /// Migration warnings to be reported for #56254. We delay reporting these\n+    /// so that we can suppress the warning if there's a corresponding error\n+    /// for the activation of the borrow.\n+    reservation_warnings: FxHashMap<\n+        BorrowIndex,\n+        (Place<'tcx>, Span, Context, BorrowKind, BorrowData<'tcx>)\n+    >,\n     /// This field keeps track of move errors that are to be reported for given move indicies.\n     ///\n     /// There are situations where many errors can be reported for a single move out (see #53807)\n@@ -921,11 +943,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let conflict_error =\n             self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n+        if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {\n+            // Suppress this warning when there's an error being emited for the\n+            // same borrow: fixing the error is likely to fix the warning.\n+            self.reservation_warnings.remove(&borrow_idx);\n+        }\n+\n         if conflict_error || mutability_error {\n             debug!(\n                 \"access_place: logging error place_span=`{:?}` kind=`{:?}`\",\n                 place_span, kind\n             );\n+\n             self.access_place_error_reported\n                 .insert((place_span.0.clone(), place_span.1));\n         }\n@@ -976,8 +1005,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared)\n-                | (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow)\n+                (Read(_), BorrowKind::Shared)\n+                | (Read(_), BorrowKind::Shallow)\n                 | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n                 | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n                     Control::Continue\n@@ -991,28 +1020,53 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if !is_active(&this.dominators, borrow, context.loc) {\n-                        assert!(allow_two_phase_borrow(&this.infcx.tcx, borrow.kind));\n+                        assert!(allow_two_phase_borrow(&tcx, borrow.kind));\n                         return Control::Continue;\n                     }\n \n                     error_reported = true;\n                     match kind {\n                         ReadKind::Copy  => {\n                             this.report_use_while_mutably_borrowed(context, place_span, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                         ReadKind::Borrow(bk) => {\n-                            this.report_conflicting_borrow(context, place_span, bk, &borrow)\n+                            this.report_conflicting_borrow(context, place_span, bk, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                     }\n                     Control::Break\n                 }\n \n-                (Reservation(kind), BorrowKind::Unique)\n-                | (Reservation(kind), BorrowKind::Mut { .. })\n+                (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shallow)\n+                | (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shared) if {\n+                    tcx.migrate_borrowck()\n+                } => {\n+                    let bi = this.borrow_set.location_map[&context.loc];\n+                    debug!(\n+                        \"recording invalid reservation of place: {:?} with \\\n+                         borrow index {:?} as warning\",\n+                        place_span.0,\n+                        bi,\n+                    );\n+                    // rust-lang/rust#56254 - This was previously permitted on\n+                    // the 2018 edition so we emit it as a warning. We buffer\n+                    // these sepately so that we only emit a warning if borrow\n+                    // checking was otherwise successful.\n+                    this.reservation_warnings.insert(\n+                        bi,\n+                        (place_span.0.clone(), place_span.1, context, bk, borrow.clone()),\n+                    );\n+\n+                    // Don't suppress actual errors.\n+                    Control::Continue\n+                }\n+\n+                (Reservation(kind), _)\n                 | (Activation(kind, _), _)\n                 | (Write(kind), _) => {\n                     match rw {\n-                        Reservation(_) => {\n+                        Reservation(..) => {\n                             debug!(\n                                 \"recording invalid reservation of \\\n                                  place: {:?}\",\n@@ -1033,7 +1087,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         WriteKind::MutableBorrow(bk) => {\n-                            this.report_conflicting_borrow(context, place_span, bk, &borrow)\n+                            this.report_conflicting_borrow(context, place_span, bk, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                         WriteKind::StorageDeadOrDrop => {\n                             this.report_borrowed_value_does_not_live_long_enough(\n@@ -1046,7 +1101,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             this.report_illegal_mutation_of_borrowed(context, place_span, borrow)\n                         }\n                         WriteKind::Move => {\n-                            this.report_move_out_while_borrowed(context, place_span, &borrow)\n+                            this.report_move_out_while_borrowed(context, place_span, borrow)\n                         }\n                     }\n                     Control::Break"}, {"sha": "2fde9924e36836fc3727bc7aa5195eb53376bd66", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -428,8 +428,8 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         // have already taken the reservation\n                     }\n \n-                    (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow)\n-                    | (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared)\n+                    (Read(_), BorrowKind::Shallow)\n+                    | (Read(_), BorrowKind::Shared)\n                     | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n                     | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n                         // Reads/reservations don't invalidate shared or shallow borrows\n@@ -448,16 +448,15 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         this.generate_invalidates(borrow_index, context.loc);\n                     }\n \n-                    (Reservation(_), BorrowKind::Unique)\n-                        | (Reservation(_), BorrowKind::Mut { .. })\n-                        | (Activation(_, _), _)\n-                        | (Write(_), _) => {\n-                            // unique or mutable borrows are invalidated by writes.\n-                            // Reservations count as writes since we need to check\n-                            // that activating the borrow will be OK\n-                            // FIXME(bob_twinkles) is this actually the right thing to do?\n-                            this.generate_invalidates(borrow_index, context.loc);\n-                        }\n+                    (Reservation(_), _)\n+                    | (Activation(_, _), _)\n+                    | (Write(_), _) => {\n+                        // unique or mutable borrows are invalidated by writes.\n+                        // Reservations count as writes since we need to check\n+                        // that activating the borrow will be OK\n+                        // FIXME(bob_twinkles) is this actually the right thing to do?\n+                        this.generate_invalidates(borrow_index, context.loc);\n+                    }\n                 }\n                 Control::Continue\n             },"}, {"sha": "28c997efc8af6e75292ab002e56546600985715f", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.ast.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -0,0 +1,36 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                   - immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:15\n+   |\n+LL |     v.extend(&v);\n+   |     -         ^- mutable borrow ends here\n+   |     |         |\n+   |     |         immutable borrow occurs here\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                   - immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "bfb2911074230af14ef3dbae9c0e51ff6dfefbd1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -0,0 +1,39 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+warning[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "bfb2911074230af14ef3dbae9c0e51ff6dfefbd1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -0,0 +1,39 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+warning[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "fb3a1fda63161f5617b557462bbb6e49c3928e36", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -0,0 +1,35 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^        ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "fb3a1fda63161f5617b557462bbb6e49c3928e36", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -0,0 +1,35 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^        ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "c15521a32a9018d1301302e659b7cafc6e52be8e", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e2beb3d49a92432234882472b32e1e33f11fee/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=f8e2beb3d49a92432234882472b32e1e33f11fee", "patch": "@@ -1,24 +1,54 @@\n-// compile-flags: -Z borrowck=mir -Z two-phase-borrows\n-\n-// This is similar to two-phase-reservation-sharing-interference.rs\n-// in that it shows a reservation that overlaps with a shared borrow.\n-//\n-// Currently, this test fails with lexical lifetimes, but succeeds\n-// with non-lexical lifetimes. (The reason is because the activation\n-// of the mutable borrow ends up overlapping with a lexically-scoped\n-// shared borrow; but a non-lexical shared borrow can end before the\n-// activation occurs.)\n-//\n-// So this test is just making a note of the current behavior.\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+// Test for #56254, we previously allowed the last example on the 2018\n+// editiion. Make sure that we now emit a warning in that case and an error for\n+// everyone else.\n+\n+//ignore-compare-mode-nll\n+\n+//revisions: ast migrate2015 migrate2018 nll2015 nll2018\n+\n+//[migrate2015] compile-flags: -Zborrowck=migrate -Ztwo-phase-borrows\n+//[migrate2018] edition:2018\n+//[nll2018] edition:2018\n+\n+#![cfg_attr(any(nll2015, nll2018), feature(nll))]\n+\n+fn double_conflicts() {\n     let mut v = vec![0, 1, 2];\n     let shared = &v;\n \n-    v.push(shared.len());\n+    v.extend(shared);\n+    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[ast]~^^^^^ ERROR cannot borrow `v` as mutable\n+}\n+\n+fn activation_conflict() {\n+    let mut v = vec![0, 1, 2];\n+\n+    v.extend(&v);\n+    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[ast]~^^^^^ ERROR cannot borrow `v` as immutable\n+}\n+\n+fn reservation_conflict() {\n+    let mut v = vec![0, 1, 2];\n+    let shared = &v;\n \n-    assert_eq!(v, [0, 1, 2, 3]);\n+    v.push(shared.len());\n+    //[nll2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2015]~^^^ WARNING cannot borrow `v` as mutable\n+    //[migrate2015]~| WARNING this error has been downgraded to a warning\n+    //[migrate2015]~| WARNING this warning will become a hard error in the future\n+    //[migrate2018]~^^^^^^ WARNING cannot borrow `v` as mutable\n+    //[migrate2018]~| WARNING this error has been downgraded to a warning\n+    //[migrate2018]~| WARNING this warning will become a hard error in the future\n+    //[ast]~^^^^^^^^^ ERROR cannot borrow `v` as mutable\n }\n+\n+fn main() {}"}, {"sha": "bcd743f47c53c9fc253f2a1ca139ee8e3a8a9042", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7eda7232797c6a92b39f5058e6e1840e5aa08d8b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eda7232797c6a92b39f5058e6e1840e5aa08d8b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=7eda7232797c6a92b39f5058e6e1840e5aa08d8b", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:17:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut v = vec![0, 1, 2];\n-LL | |     let shared = &v;\n-LL | |\n-...  |\n-LL | |     assert_eq!(v, [0, 1, 2, 3]);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}]}