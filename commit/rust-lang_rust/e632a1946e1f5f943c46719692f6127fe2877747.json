{"sha": "e632a1946e1f5f943c46719692f6127fe2877747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MzJhMTk0NmUxZjVmOTQzYzQ2NzE5NjkyZjYxMjdmZTI4Nzc3NDc=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-12-03T10:43:01Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-12-03T10:48:37Z"}, "message": "Remove unsafe_vector_initialization lint", "tree": {"sha": "4a3214c0d2b99f7689ddc201ebd5d2745d8aa019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3214c0d2b99f7689ddc201ebd5d2745d8aa019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e632a1946e1f5f943c46719692f6127fe2877747", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJcBQoFAAoJEPm6FDuV/22CgE0P/0Zby6ETMD4NoG3XrjfXkFAa\naZlMOUAsKVoXvajJB/UrqtBFVl/TIOrg2kIHi4YiD4M4iYTEWXKfkkDja8ZSMSva\nFuK5mk9QjxWTslACfZ5nmq7cKvJMcw8juDRHGunfoSNfPjZXQoN8Bnm3n3nHIZww\nDunQjjbL/8Z5R07qrlvvSs5UaQ8e3Rlhein668ZwtmRcgyqTKaR3nPM4s3JKFAGQ\naz2Ool7+dx1IM9a/F8LJ1VDENh7JvfDfc4wJGvHH49jmD5f592A3zUi5V+PPwIsm\nUcQtDi7QiY+mKBAKGAfH5rbbfejPEXcD3V5u/TDKb/po90kx+HQ0ooKdqEWJR/Bb\nzgvyOanSIQ21ISeH/YL6XIfDApJQ2YDmYBBvxSgZyKHXwSE4/FPE7BD5gLf9XmKl\nNZbdK4ZeQeF+kdOy1kKUG2Ri3YCJYuNuY8lN8zoPq8FfAS9N0jWraHxgjUrXFoEL\nPJo6oj7gWCn/PZdAgNlxWCsC/gOTJMOlq7q1Qcvu7bho4IkFbS0bEJ3WJIctXtZ8\nwbjS9TE0bhezAFM9oyKrsSkt3dU5WZOr+HSRXcOjtHL8ltkh8ASaRJzJPFZCawF3\n2nuB+rZNrX3rIpEqwWcT+YMGRmsHudpFZmygshKsQRR1ZLLKTKlsELbUE+WtAI4A\nanLKon5+79iW0fXNwqEA\n=dIHs\n-----END PGP SIGNATURE-----", "payload": "tree 4a3214c0d2b99f7689ddc201ebd5d2745d8aa019\nparent 67f9d24c1b32ddc44765e55a0daf8d038426acba\nauthor David Tolnay <dtolnay@gmail.com> 1543833781 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1543834117 -0800\n\nRemove unsafe_vector_initialization lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e632a1946e1f5f943c46719692f6127fe2877747", "html_url": "https://github.com/rust-lang/rust/commit/e632a1946e1f5f943c46719692f6127fe2877747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e632a1946e1f5f943c46719692f6127fe2877747/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f9d24c1b32ddc44765e55a0daf8d038426acba", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f9d24c1b32ddc44765e55a0daf8d038426acba", "html_url": "https://github.com/rust-lang/rust/commit/67f9d24c1b32ddc44765e55a0daf8d038426acba"}], "stats": {"total": 137, "additions": 39, "deletions": 98}, "files": [{"sha": "0d83224e3f622cf4faccca24f1392e7311cd7420", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 289 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "17bef09164b81f090dfa50d0a75fb7232461f90b", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -112,3 +112,14 @@ declare_deprecated_lint! {\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n     \"this lint has been changed to redundant_pattern_matching\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n+/// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n+/// replacement has very different performance characteristics so the lint is\n+/// deprecated.\n+declare_deprecated_lint! {\n+    pub UNSAFE_VECTOR_INITIALIZATION,\n+    \"the replacement suggested by this lint had substantially different behavior\"\n+}"}, {"sha": "f08294c839754cf9e514648b3669aefe8d2e8164", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -330,6 +330,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         \"if_let_redundant_pattern_matching\",\n         \"this lint has been changed to redundant_pattern_matching\",\n     );\n+    store.register_removed(\n+        \"unsafe_vector_initialization\",\n+        \"the replacement suggested by this lint had substantially different behavior\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n@@ -495,7 +499,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         panic_unimplemented::UNIMPLEMENTED,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n-        slow_vector_initialization::UNSAFE_VECTOR_INITIALIZATION,\n         strings::STRING_ADD,\n         write::PRINT_STDOUT,\n         write::USE_DEBUG,"}, {"sha": "0ec6fc0d0d16ae17f1104d8acab886ebf9109c03", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -39,32 +39,12 @@ declare_clippy_lint! {\n     \"slow vector initialization\"\n }\n \n-/// **What it does:** Checks unsafe vector initialization\n-///\n-/// **Why is this bad?** Changing the length of a vector may expose uninitialized memory, which\n-/// can lead to memory safety issues\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let mut vec1 = Vec::with_capacity(len);\n-/// unsafe {\n-///     vec1.set_len(len);\n-/// }\n-/// ```\n-declare_clippy_lint! {\n-    pub UNSAFE_VECTOR_INITIALIZATION,\n-    restriction,\n-    \"unsafe vector initialization\"\n-}\n-\n #[derive(Copy, Clone, Default)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SLOW_VECTOR_INITIALIZATION, UNSAFE_VECTOR_INITIALIZATION,)\n+        lint_array!(SLOW_VECTOR_INITIALIZATION,)\n     }\n }\n \n@@ -90,9 +70,6 @@ enum InitializationType<'tcx> {\n \n     /// Resize is a slow initialization with the form `vec.resize(.., 0)`\n     Resize(&'tcx Expr),\n-\n-    /// UnsafeSetLen is a slow initialization with the form `vec.set_len(..)`\n-    UnsafeSetLen(&'tcx Expr),\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -188,14 +165,6 @@ impl Pass {\n         vec_alloc: &VecAllocation<'_>,\n     ) {\n         match initialization {\n-            InitializationType::UnsafeSetLen(e) => Self::emit_lint(\n-                cx,\n-                e,\n-                vec_alloc,\n-                \"unsafe vector initialization\",\n-                UNSAFE_VECTOR_INITIALIZATION,\n-            ),\n-\n             InitializationType::Extend(e) | InitializationType::Resize(e) => Self::emit_lint(\n                 cx,\n                 e,\n@@ -282,25 +251,6 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n         }\n     }\n \n-    /// Checks if the given expression is using `set_len` to initialize the vector\n-    fn search_unsafe_set_len(&mut self, expr: &'tcx Expr) {\n-        if_chain! {\n-            if self.initialization_found;\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n-            if let ExprKind::Path(ref qpath_subj) = args[0].node;\n-            if match_qpath(&qpath_subj, &[&self.vec_alloc.variable_name.to_string()]);\n-            if path.ident.name == \"set_len\";\n-            if let Some(ref len_arg) = args.get(1);\n-\n-            // Check that len expression is equals to `with_capacity` expression\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n-\n-            then {\n-                self.slow_expression = Some(InitializationType::UnsafeSetLen(expr));\n-            }\n-        }\n-    }\n-\n     /// Returns `true` if give expression is `repeat(0).take(...)`\n     fn is_repeat_take(&self, expr: &Expr) -> bool {\n         if_chain! {\n@@ -349,7 +299,6 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n                 StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => {\n                     self.search_slow_extend_filling(expr);\n                     self.search_slow_resize_filling(expr);\n-                    self.search_unsafe_set_len(expr);\n                 },\n                 _ => (),\n             }"}, {"sha": "5364bf70ff091677bb99e64f04385fb0a08df195", "filename": "tests/ui/slow_vector_initialization.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/tests%2Fui%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/tests%2Fui%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.rs?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -7,15 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![warn(clippy::unsafe_vector_initialization)]\n-\n use std::iter::repeat;\n \n fn main() {\n     resize_vector();\n     extend_vector();\n     mixed_extend_resize_vector();\n-    unsafe_vector();\n }\n \n fn extend_vector() {\n@@ -65,14 +62,6 @@ fn resize_vector() {\n     vec1.resize(10, 0);\n }\n \n-fn unsafe_vector() {\n-    let mut unsafe_vec: Vec<u8> = Vec::with_capacity(200);\n-\n-    unsafe {\n-        unsafe_vec.set_len(200);\n-    }\n-}\n-\n fn do_stuff(vec: &mut Vec<u8>) {\n \n }"}, {"sha": "f45c3b48b1b4f916698ac2840f8a38c5cb1ef56e", "filename": "tests/ui/slow_vector_initialization.stderr", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e632a1946e1f5f943c46719692f6127fe2877747/tests%2Fui%2Fslow_vector_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e632a1946e1f5f943c46719692f6127fe2877747/tests%2Fui%2Fslow_vector_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stderr?ref=e632a1946e1f5f943c46719692f6127fe2877747", "patch": "@@ -1,71 +1,60 @@\n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:25:5\n+  --> $DIR/slow_vector_initialization.rs:22:5\n    |\n-24 |     let mut vec1 = Vec::with_capacity(len);\n+21 |     let mut vec1 = Vec::with_capacity(len);\n    |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n-25 |     vec1.extend(repeat(0).take(len));\n+22 |     vec1.extend(repeat(0).take(len));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::slow-vector-initialization` implied by `-D warnings`\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:29:5\n+  --> $DIR/slow_vector_initialization.rs:26:5\n    |\n-28 |     let mut vec2 = Vec::with_capacity(len - 10);\n+25 |     let mut vec2 = Vec::with_capacity(len - 10);\n    |                    ---------------------------- help: consider replace allocation with: `vec![0; len - 10]`\n-29 |     vec2.extend(repeat(0).take(len - 10));\n+26 |     vec2.extend(repeat(0).take(len - 10));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:43:5\n+  --> $DIR/slow_vector_initialization.rs:40:5\n    |\n-42 |     let mut resized_vec = Vec::with_capacity(30);\n+39 |     let mut resized_vec = Vec::with_capacity(30);\n    |                           ---------------------- help: consider replace allocation with: `vec![0; 30]`\n-43 |     resized_vec.resize(30, 0);\n+40 |     resized_vec.resize(30, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:46:5\n+  --> $DIR/slow_vector_initialization.rs:43:5\n    |\n-45 |     let mut extend_vec = Vec::with_capacity(30);\n+42 |     let mut extend_vec = Vec::with_capacity(30);\n    |                          ---------------------- help: consider replace allocation with: `vec![0; 30]`\n-46 |     extend_vec.extend(repeat(0).take(30));\n+43 |     extend_vec.extend(repeat(0).take(30));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:53:5\n+  --> $DIR/slow_vector_initialization.rs:50:5\n    |\n-52 |     let mut vec1 = Vec::with_capacity(len);\n+49 |     let mut vec1 = Vec::with_capacity(len);\n    |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n-53 |     vec1.resize(len, 0);\n+50 |     vec1.resize(len, 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:61:5\n+  --> $DIR/slow_vector_initialization.rs:58:5\n    |\n-60 |     let mut vec3 = Vec::with_capacity(len - 10);\n+57 |     let mut vec3 = Vec::with_capacity(len - 10);\n    |                    ---------------------------- help: consider replace allocation with: `vec![0; len - 10]`\n-61 |     vec3.resize(len - 10, 0);\n+58 |     vec3.resize(len - 10, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:65:5\n+  --> $DIR/slow_vector_initialization.rs:62:5\n    |\n-64 |     vec1 = Vec::with_capacity(10);\n+61 |     vec1 = Vec::with_capacity(10);\n    |            ---------------------- help: consider replace allocation with: `vec![0; 10]`\n-65 |     vec1.resize(10, 0);\n+62 |     vec1.resize(10, 0);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: unsafe vector initialization\n-  --> $DIR/slow_vector_initialization.rs:72:9\n-   |\n-69 |     let mut unsafe_vec: Vec<u8> = Vec::with_capacity(200);\n-   |                                   ----------------------- help: consider replace allocation with: `vec![0; 200]`\n-...\n-72 |         unsafe_vec.set_len(200);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unsafe-vector-initialization` implied by `-D warnings`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}]}