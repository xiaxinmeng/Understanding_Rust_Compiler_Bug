{"sha": "1debe9d112010a23c76711f557ee6fdc4728f4ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWJlOWQxMTIwMTBhMjNjNzY3MTFmNTU3ZWU2ZmRjNDcyOGY0ZWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-16T22:32:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "ast: Document paths and `where` clauses", "tree": {"sha": "51407e42947302b0674773a650788b06ac485347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51407e42947302b0674773a650788b06ac485347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1debe9d112010a23c76711f557ee6fdc4728f4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1debe9d112010a23c76711f557ee6fdc4728f4ec", "html_url": "https://github.com/rust-lang/rust/commit/1debe9d112010a23c76711f557ee6fdc4728f4ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1debe9d112010a23c76711f557ee6fdc4728f4ec/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42067c9e9ac605fc330c3ed11d29477ac251d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42067c9e9ac605fc330c3ed11d29477ac251d8a", "html_url": "https://github.com/rust-lang/rust/commit/c42067c9e9ac605fc330c3ed11d29477ac251d8a"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "ec4316150fbbd64d91017b1b61a9d7fe337bb8ec", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1debe9d112010a23c76711f557ee6fdc4728f4ec/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1debe9d112010a23c76711f557ee6fdc4728f4ec/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1debe9d112010a23c76711f557ee6fdc4728f4ec", "patch": "@@ -150,7 +150,7 @@ impl PartialEq for Ident {\n \n /// A SyntaxContext represents a chain of macro-expandings\n /// and renamings. Each macro expansion corresponds to\n-/// a fresh usize\n+/// a fresh u32\n \n // I'm representing this syntax context as an index into\n // a table, in order to work around a compiler bug\n@@ -216,6 +216,7 @@ pub struct Lifetime {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+/// A lifetime definition, eg `'a: 'b+'c+'d`\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n@@ -251,7 +252,9 @@ pub struct PathSegment {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PathParameters {\n+    /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n     AngleBracketedParameters(AngleBracketedParameterData),\n+    /// The `(A,B)` and `C` in `Foo(A,B) -> C`\n     ParenthesizedParameters(ParenthesizedParameterData),\n }\n \n@@ -436,34 +439,45 @@ impl Generics {\n     }\n }\n \n+/// A `where` clause in a definition\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n }\n \n+/// A single predicate in a `where` clause\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum WherePredicate {\n+    /// A type binding, eg `for<'c> Foo: Send+Clone+'c`\n     BoundPredicate(WhereBoundPredicate),\n+    /// A lifetime predicate, e.g. `'a: 'b+'c`\n     RegionPredicate(WhereRegionPredicate),\n+    /// An equality predicate (unsupported)\n     EqPredicate(WhereEqPredicate)\n }\n \n+/// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n+    /// Any lifetimes from a `for` binding\n     pub bound_lifetimes: Vec<LifetimeDef>,\n+    /// The type being bounded\n     pub bounded_ty: P<Ty>,\n+    /// Trait and lifetime bounds (`Clone+Send+'static`)\n     pub bounds: OwnedSlice<TyParamBound>,\n }\n \n+/// A lifetime predicate, e.g. `'a: 'b+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>,\n }\n \n+/// An equality predicate (unsupported), e.g. `T=int`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,"}]}