{"sha": "4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDhiZGM5NjliNTNiYzM0NzQ2YWNlNjc0ZWRkOGQwZDMyYzBmZGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-13T01:26:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-15T22:17:57Z"}, "message": "mk: Add prepare.mk\n\nThis is a slightly more generic rewrite of install.mk. Currently\nused for nothing, but we'll base all the binary distributables off it.", "tree": {"sha": "954c1590fbd11bd956813c209bba028b60bad0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/954c1590fbd11bd956813c209bba028b60bad0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "html_url": "https://github.com/rust-lang/rust/commit/4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd8bdc969b53bc34746ace674edd8d0d32c0fde/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d88a4a76c8360b21c4933586330c76b895522a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d88a4a76c8360b21c4933586330c76b895522a7", "html_url": "https://github.com/rust-lang/rust/commit/5d88a4a76c8360b21c4933586330c76b895522a7"}], "stats": {"total": 212, "additions": 200, "deletions": 12}, "files": [{"sha": "65c3d6267834d286c011273f4df7f99ae6768269", "filename": "Makefile.in", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4cd8bdc969b53bc34746ace674edd8d0d32c0fde/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4cd8bdc969b53bc34746ace674edd8d0d32c0fde/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "patch": "@@ -198,13 +198,6 @@ include $(CFG_SRC_DIR)mk/llvm.mk\n # Secondary makefiles, conditionalized for speed\n ######################################################################\n \n-# Source and binary distribution artifacts\n-ifneq ($(strip $(findstring dist,$(MAKECMDGOALS))   \\\n-               $(findstring clean,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including dist rules)\n-  include $(CFG_SRC_DIR)mk/dist.mk\n-endif\n-\n # Binary snapshots\n ifneq ($(strip $(findstring snap,$(MAKECMDGOALS))   \\\n                $(findstring clean,$(MAKECMDGOALS))),)\n@@ -227,18 +220,32 @@ ifneq ($(findstring perf,$(MAKECMDGOALS)),)\n   include $(CFG_SRC_DIR)mk/perf.mk\n endif\n \n-# Cleaning\n-ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including clean rules)\n-  include $(CFG_SRC_DIR)mk/clean.mk\n+# Copy all the distributables to another directory for binary install\n+ifneq ($(strip $(findstring prepare,$(MAKECMDGOALS)) \\\n+               $(findstring install,$(MAKECMDGOALS))),)\n+  CFG_INFO := $(info cfg: including prepare rules)\n+  include $(CFG_SRC_DIR)mk/prepare.mk\n endif\n \n-# Installation from the build directory\n+# (Unix) Installation from the build directory\n ifneq ($(findstring install,$(MAKECMDGOALS)),)\n   CFG_INFO := $(info cfg: including install rules)\n   include $(CFG_SRC_DIR)mk/install.mk\n endif\n \n+# Source and binary distribution artifacts\n+ifneq ($(strip $(findstring dist,$(MAKECMDGOALS)) \\\n+               $(findstring clean,$(MAKECMDGOALS))),)\n+  CFG_INFO := $(info cfg: including dist rules)\n+  include $(CFG_SRC_DIR)mk/dist.mk\n+endif\n+\n+# Cleaning\n+ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n+  CFG_INFO := $(info cfg: including clean rules)\n+  include $(CFG_SRC_DIR)mk/clean.mk\n+endif\n+\n # CTAGS building\n ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n                $(findstring TAGS.vi,$(MAKECMDGOALS))),)"}, {"sha": "0d3d7c34a9419ec82ae3a092ab05a570b21097ea", "filename": "mk/prepare.mk", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/4cd8bdc969b53bc34746ace674edd8d0d32c0fde/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4cd8bdc969b53bc34746ace674edd8d0d32c0fde/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=4cd8bdc969b53bc34746ace674edd8d0d32c0fde", "patch": "@@ -0,0 +1,181 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Basic support for producing installation images.\n+#\n+# The 'prepare' build target copies all release artifacts from the build\n+# directory to some other location, placing all binaries, libraries, and\n+# docs in their final locations relative to each other.\n+#\n+# It requires the following variables to be set:\n+#\n+#   PREPARE_HOST - the host triple \n+#   PREPARE_TARGETS - the target triples, space separated\n+#   PREPARE_DEST_DIR - the directory to put the image\n+\n+prepare: PREPARE_STAGE=2\n+prepare: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+prepare: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+prepare: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+prepare: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+prepare: prepare-base\n+\n+prepare-base: PREPARE_SOURCE_DIR=$(PREPARE_HOST)/stage$(PREPARE_STAGE)\n+prepare-base: PREPARE_SOURCE_BIN_DIR=$(PREPARE_SOURCE_DIR)/bin\n+prepare-base: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE)\n+prepare-base: PREPARE_SOURCE_MAN_DIR=$(S)/man\n+prepare-base: PREPARE_DEST_BIN_DIR=$(PREPARE_DEST_DIR)/bin\n+prepare-base: PREPARE_DEST_LIB_DIR=$(PREPARE_DEST_DIR)/$(CFG_LIBDIR_RELATIVE)\n+prepare-base: PREPARE_DEST_MAN_DIR=$(PREPARE_DEST_DIR)/man1\n+prepare-base: prepare-host prepare-targets\n+\n+DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n+DEFAULT_PREPARE_BIN_CMD = install -m755\n+DEFAULT_PREPARE_LIB_CMD = install -m644\n+DEFAULT_PREPARE_MAN_CMD = install -m755\n+\n+# On windows we install from stage3, but on unix only stage2\n+# Because of the way these rules are organized, preparing from any\n+# stage requires all these stages to be built\n+ifdef CFG_WINDOWSY_$(CFG_BUILD)\n+PREPARE_STAGES=1 2 3\n+else\n+PREPARE_STAGES=1 2\n+endif\n+\n+# Create a directory\n+# $(1) is the directory\n+define PREPARE_DIR\n+\t@$(Q)$(call E, install: $(1))\n+\t$(Q)$(PREPARE_DIR_CMD) $(1)\n+endef\n+\n+# Copy an executable\n+# $(1) is the filename/libname-glob\n+define PREPARE_BIN\n+\t@$(call E, install: $(PREPARE_DEST_BIN_DIR)/$(1))\n+\t$(Q)$(PREPARE_BIN_CMD) $(PREPARE_SOURCE_BIN_DIR)/$(1) $(PREPARE_DEST_BIN_DIR)/$(1)\n+endef\n+\n+# Copy a dylib or rlib\n+# $(1) is the filename/libname-glob\n+#\n+# XXX: Don't remove the $(nop) command below!\n+# Yeah, that's right, it's voodoo. Something in the way this macro is being expanded\n+# causes it to parse incorrectly. Throwing in that empty command seems to fix the\n+# problem. I'm sorry, just don't remove the $(nop), alright?\n+define PREPARE_LIB\n+\t$(nop)\n+\t@$(call E, install: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n+\t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n+\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))),\\\n+                        $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n+\tif [ -n \"$$MATCHES\" ]; then                                              \\\n+\t  echo \"warning: one or libraries matching Rust library '$(1)'\" &&       \\\n+\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     &&       \\\n+\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"                    &&       \\\n+\t  echo $$MATCHES ;                                                       \\\n+\tfi\n+\t$(Q)$(PREPARE_LIB_CMD) `ls -drt1 $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1) | tail -1` $(PREPARE_WORKING_DEST_LIB_DIR)/\n+endef\n+\n+# Copy a man page\n+# $(1) - source dir\n+define PREPARE_MAN\n+\t@$(call E, install: $(PREPARE_DEST_MAN_DIR)/$(1))\n+\t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n+endef\n+\n+\n+PREPARE_TOOLS = $(filter-out compiletest, $(TOOLS))\n+\n+prepare-host: prepare-host-dirs prepare-host-tools\n+\n+prepare-host-dirs:\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_BIN_DIR))\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_LIB_DIR))\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_MAN_DIR))\n+\n+prepare-host-tools:\\\n+        $(foreach tool, $(PREPARE_TOOLS),\\\n+          $(foreach stage,$(PREPARE_STAGES),\\\n+            $(foreach host,$(CFG_HOST),\\\n+              prepare-host-tool-$(tool)-$(stage)-$(host))))\n+\n+# $(1) is tool\n+# $(2) is stage\n+# $(3) is host\n+define DEF_PREPARE_HOST_TOOL\n+prepare-host-tool-$(1)-$(2)-$(3): $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)) \\\n+                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3))\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_MAN,$(1).1),),)\n+endef\n+\n+$(foreach tool,$(PREPARE_TOOLS),\\\n+  $(foreach stage,$(PREPARE_STAGES),\\\n+    $(foreach host,$(CFG_HOST),\\\n+        $(eval $(call DEF_PREPARE_HOST_TOOL,$(tool),$(stage),$(host))))))\n+\n+# $(1) is tool\n+# $(2) is stage\n+# $(3) is host\n+define DEF_PREPARE_HOST_LIB\n+prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3): $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3))\\\n+                                 $$(HLIB$(2)_H_$(3))/stamp.$(1)\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1))),),)\n+endef\n+\n+$(foreach lib,$(CRATES),\\\n+  $(foreach stage,$(PREPARE_STAGES),\\\n+    $(foreach host,$(CFG_HOST),\\\n+      $(eval $(call DEF_PREPARE_HOST_LIB,$(lib),$(stage),$(host))))))\n+\n+prepare-targets:\\\n+        $(foreach host,$(CFG_HOST),\\\n+           $(foreach target,$(CFG_TARGET),\\\n+             $(foreach stage,$(PREPARE_STAGES),\\\n+               prepare-target-$(target)-host-$(host)-$(stage))))\n+\n+# $(1) is target\n+# $(2) is host\n+# $(3) is stage\n+define DEF_PREPARE_TARGET_N\n+# Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n+prepare-target-$(1)-host-$(2)-$(3): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/rustlib/$(1)/lib\n+prepare-target-$(1)-host-$(2)-$(3): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(1)/lib\n+prepare-target-$(1)-host-$(2)-$(3): \\\n+        $$(foreach crate,$$(TARGET_CRATES), \\\n+          $$(TLIB$(3)_T_$(1)_H_$(2))/stamp.$$(crate))\n+# Only install if this host and target combo is being prepared\n+\t$$(if $$(findstring $(2), $$(PREPARE_HOST)),\\\n+      $$(if $$(findstring $(1), $$(PREPARE_TARGETS)),\\\n+        $$(if $$(findstring $(3), $$(PREPARE_STAGE)),\\\n+          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR))\\\n+          $$(foreach crate,$$(TARGET_CRATES),\\\n+            $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate))))\\\n+          $$(foreach crate,$$(TARGET_CRATES),\\\n+            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate))))\\\n+          $$(call PREPARE_LIB,libmorestack.a)\n+          $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n+endef\n+\n+$(foreach host,$(CFG_HOST),\\\n+  $(foreach target,$(CFG_TARGET), \\\n+    $(foreach stage,$(PREPARE_STAGES),\\\n+      $(eval $(call DEF_PREPARE_TARGET_N,$(target),$(host),$(stage))))))"}]}