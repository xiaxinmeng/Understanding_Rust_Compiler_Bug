{"sha": "b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZWMwYTU4MmUxNmNiNmUyMWQ5MTk5YzliNmRmMGY4YzRjOGYwMGM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-11T00:39:10Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-13T17:34:35Z"}, "message": "Default methods get through compilation, but not linkage (cc: #2794).", "tree": {"sha": "90a7458e2c02698aafd204fd66df919925362031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a7458e2c02698aafd204fd66df919925362031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c", "html_url": "https://github.com/rust-lang/rust/commit/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0833e0b038ea3015a2036e0c9431f6c60db82f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0833e0b038ea3015a2036e0c9431f6c60db82f", "html_url": "https://github.com/rust-lang/rust/commit/0e0833e0b038ea3015a2036e0c9431f6c60db82f"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "696b3d39804483e7d92780669b061b785087b3cc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b1ec0a582e16cb6e21d9199c9b6df0f8c4c8f00c", "patch": "@@ -5217,12 +5217,13 @@ fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id,\n }\n \n fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n+    debug!{\"get_item_val(id=`%?`)\", id};\n     let tcx = ccx.tcx;\n     match ccx.item_vals.find(id) {\n       some(v) => v,\n       none => {\n         let mut exprt = false;\n-        let val = match check ccx.tcx.items.get(id) {\n+        let val = match ccx.tcx.items.get(id) {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append(*pth, ~[path_name(i.ident)]);\n             match check i.node {\n@@ -5246,11 +5247,33 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n               }\n             }\n           }\n+          ast_map::node_trait_method(trait_method, _, pth) => {\n+            debug!{\"get_item_val(): processing a node_trait_method\"};\n+            match *trait_method {\n+              ast::required(_) => {\n+                ccx.sess.bug(~\"unexpected variant: required trait method in \\\n+                               get_item_val()\");\n+              }\n+              ast::provided(m) => {\n+                // FIXME (#2794): Default methods currently compiling but not\n+                // linking successfully; not sure if this is correct.  It's\n+                // just copypasta from the node_method case.\n+                exprt = true;\n+                let mty = ty::node_id_to_type(ccx.tcx, id);\n+                let pth =\n+                    vec::append(*pth, ~[path_name(@ccx.names(~\"meth\")),\n+                                        path_name(m.ident)]);\n+                let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n+                set_inline_hint_if_appr(m.attrs, llfn);\n+                llfn\n+              }\n+            }\n+          }\n           ast_map::node_method(m, impl_id, pth) => {\n             exprt = true;\n             let mty = ty::node_id_to_type(ccx.tcx, id);\n             let pth = vec::append(*pth, ~[path_name(@ccx.names(~\"meth\")),\n-                                         path_name(m.ident)]);\n+                                          path_name(m.ident)]);\n             let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n             set_inline_hint_if_appr(m.attrs, llfn);\n             llfn\n@@ -5310,6 +5333,9 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             set_inline_hint(llfn);\n             llfn\n           }\n+          _ => {\n+            ccx.sess.bug(~\"get_item_val(): unexpected variant\");\n+          }\n         };\n         if !(exprt || ccx.reachable.contains_key(id)) {\n             lib::llvm::SetLinkage(val, lib::llvm::InternalLinkage);"}]}