{"sha": "c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzU2NTNhNDhmYTY4NzFiZjJhMDdkZDU2Y2I3ZjI4MDExMTViZmI=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-10-12T23:07:52Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-10-14T10:40:53Z"}, "message": "x.py: setup: Refactor to centralise list of profiles\n\nPut all()'s otuput in the order we want to print things in, and add a\ncomment about why they are in this order.  Provide purpose() and\nall_for_help().  Use these things everywhere.\n\nMove all the abbrev character (\"a\", \"b\", etc.) processing into\ninteractive_path.\n\nNo functional change.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "f61d224fec48e30ac3c1c58bf6ed78ab8a8a3575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61d224fec48e30ac3c1c58bf6ed78ab8a8a3575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "html_url": "https://github.com/rust-lang/rust/commit/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5565241f65cf402c3dbcb55dd492f172c473d4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "html_url": "https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "f38c6876747685bceaa11e895fe0903cbb572dfd", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "patch": "@@ -551,9 +551,7 @@ Arguments:\n                     profile_string.parse().unwrap_or_else(|err| {\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n-                        for choice in Profile::all() {\n-                            eprintln!(\"- {}\", choice);\n-                        }\n+                        eprint!(\"{}\", Profile::all_for_help(\"- \"));\n                         std::process::exit(1);\n                     })\n                 } else {"}, {"sha": "85b361e16a3faf7664b5a1ee1691234921c2c153", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5653a48fa6871bf2a07dd56cb7f2801115bfb/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=c4c5653a48fa6871bf2a07dd56cb7f2801115bfb", "patch": "@@ -1,4 +1,5 @@\n use crate::{t, VERSION};\n+use std::fmt::Write as _;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{\n@@ -20,7 +21,28 @@ impl Profile {\n     }\n \n     pub fn all() -> impl Iterator<Item = Self> {\n-        [Profile::Compiler, Profile::Codegen, Profile::Library, Profile::User].iter().copied()\n+        use Profile::*;\n+        // N.B. these are ordered by how they are displayed, not alphabetically\n+        [Library, Compiler, Codegen, User].iter().copied()\n+    }\n+\n+    pub fn purpose(&self) -> String {\n+        use Profile::*;\n+        match self {\n+            Library => \"Contribute to the standard library\",\n+            Compiler => \"Contribute to the compiler or rustdoc\",\n+            Codegen => \"Contribute to the compiler, and also modify LLVM or codegen\",\n+            User => \"Install Rust from source\",\n+        }\n+        .to_string()\n+    }\n+\n+    pub fn all_for_help(indent: &str) -> String {\n+        let mut out = String::new();\n+        for choice in Profile::all() {\n+            writeln!(&mut out, \"{}{}\", indent, choice).unwrap();\n+        }\n+        out\n     }\n }\n \n@@ -29,10 +51,10 @@ impl FromStr for Profile {\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n-            \"b\" | \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n-            \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n-            \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n+            \"lib\" | \"library\" => Ok(Profile::Library),\n+            \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n+            \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n+            \"maintainer\" | \"user\" => Ok(Profile::User),\n             _ => Err(format!(\"unknown profile: '{}'\", s)),\n         }\n     }\n@@ -104,19 +126,33 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n+    fn abbrev_all() -> impl Iterator<Item = (String, Profile)> {\n+        ('a'..).map(|c| c.to_string()).zip(Profile::all())\n+    }\n+\n+    fn parse_with_abbrev(input: &str) -> Result<Profile, String> {\n+        let input = input.trim().to_lowercase();\n+        for (letter, profile) in abbrev_all() {\n+            if input == letter {\n+                return Ok(profile);\n+            }\n+        }\n+        input.parse()\n+    }\n+\n     let mut input = String::new();\n-    println!(\n-        \"Welcome to the Rust project! What do you want to do with x.py?\n-a) Contribute to the standard library\n-b) Contribute to the compiler or rustdoc\n-c) Contribute to the compiler, and also modify LLVM or codegen\n-d) Install Rust from source\"\n-    );\n+    println!(\"Welcome to the Rust project! What do you want to do with x.py?\");\n+    for (letter, profile) in abbrev_all() {\n+        println!(\"{}) {}\", letter, profile.purpose());\n+    }\n     let template = loop {\n-        print!(\"Please choose one (a/b/c/d): \");\n+        print!(\n+            \"Please choose one ({}): \",\n+            abbrev_all().map(|(l, _)| l).collect::<Vec<_>>().join(\"/\")\n+        );\n         io::stdout().flush()?;\n         io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().parse() {\n+        break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,\n             Err(err) => {\n                 println!(\"error: {}\", err);"}]}