{"sha": "3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "node_id": "C_kwDOAAsO6NoAKDNkMGFjN2VhMjM4ODg0Mzg3NTI5NTdlZWViNWFhMmI3M2I0ZmRhNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T21:45:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T21:45:20Z"}, "message": "Auto merge of #92566 - the8472:inline-tra, r=m-ou-se\n\nInline `__iterator_get_unchecked` for some iterator adapters.\n\nThis aligns the inline attributes of existing `__iterator_get_unchecked` with those of `next()` on adapters that have both.\n\nIt improves the performance of iterators using unchecked access when building in incremental mode (due to the larger CGU count?). It might negatively affect incremental compile times for better runtime results, but considering that the equivalent `next()` implementations also are `#[inline]` and usually are more complex this should be ok.\n\n```\n./x.py bench library/core -i --stage 0 --test-args bench_trusted_random_access\n\nOLD: 119,172 ns/iter\nNEW:  17,714 ns/iter\n```", "tree": {"sha": "fc7a1602a1d73a0e5a9eed9b28fbc90c42ffdbc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7a1602a1d73a0e5a9eed9b28fbc90c42ffdbc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "html_url": "https://github.com/rust-lang/rust/commit/3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed05e996e37e44b1a3980b84754af621fd3c4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed05e996e37e44b1a3980b84754af621fd3c4ce", "html_url": "https://github.com/rust-lang/rust/commit/bed05e996e37e44b1a3980b84754af621fd3c4ce"}, {"sha": "a68a5d219d0138c7b39403c6b9dc08e2cf5d05be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68a5d219d0138c7b39403c6b9dc08e2cf5d05be", "html_url": "https://github.com/rust-lang/rust/commit/a68a5d219d0138c7b39403c6b9dc08e2cf5d05be"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "0abe20e4ca3b2aea95aa0fbd59f1906a7ad8e8d4", "filename": "library/core/benches/iter.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fiter.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -367,3 +367,27 @@ fn bench_partial_cmp(b: &mut Bencher) {\n fn bench_lt(b: &mut Bencher) {\n     b.iter(|| (0..100000).map(black_box).lt((0..100000).map(black_box)))\n }\n+\n+#[bench]\n+fn bench_trusted_random_access_adapters(b: &mut Bencher) {\n+    let vec1: Vec<_> = (0usize..100000).collect();\n+    let vec2 = black_box(vec1.clone());\n+    b.iter(|| {\n+        let mut iter = vec1\n+            .iter()\n+            .copied()\n+            .enumerate()\n+            .map(|(idx, e)| idx.wrapping_add(e))\n+            .zip(vec2.iter().copied())\n+            .map(|(a, b)| a.wrapping_add(b))\n+            .fuse();\n+        let mut acc: usize = 0;\n+        let size = iter.size();\n+        for i in 0..size {\n+            // SAFETY: TRA requirements are satisfied by 0..size iteration and then dropping the\n+            // iterator.\n+            acc = acc.wrapping_add(unsafe { iter.__iterator_get_unchecked(i) });\n+        }\n+        acc\n+    })\n+}"}, {"sha": "f1f1ae6e4635dee4b50a3cdc2458322c0b72e659", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -3,6 +3,7 @@\n #![feature(flt2dec)]\n #![feature(int_log)]\n #![feature(test)]\n+#![feature(trusted_random_access)]\n \n extern crate test;\n "}, {"sha": "10b4db84b3904e1a115e50dcb261d86259e17504", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -129,6 +129,7 @@ where\n \n     #[rustc_inherit_overflow_checks]\n     #[doc(hidden)]\n+    #[inline]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "6cbb35dc7c6292ff586bbd36d3b73f64a13c202d", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -125,6 +125,7 @@ where\n     }\n \n     #[doc(hidden)]\n+    #[inline]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "de44bd66501e20bb3445fdffdb700062d65c00f4", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -554,6 +554,7 @@ pub unsafe trait TrustedRandomAccessNoCoerce: Sized {\n ///\n /// Same requirements calling `get_unchecked` directly.\n #[doc(hidden)]\n+#[inline]\n pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item\n where\n     I: Iterator,\n@@ -576,6 +577,7 @@ unsafe impl<I: Iterator> SpecTrustedRandomAccess for I {\n }\n \n unsafe impl<I: Iterator + TrustedRandomAccessNoCoerce> SpecTrustedRandomAccess for I {\n+    #[inline]\n     unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`."}, {"sha": "78bf3381b4d269f8e6be66741896f2a05046023f", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ac7ea23888438752957eeeb5aa2b73b4fda72/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "patch": "@@ -326,6 +326,7 @@ macro_rules! iterator {\n             }\n \n             #[doc(hidden)]\n+            #[inline]\n             unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                 // SAFETY: the caller must guarantee that `i` is in bounds of\n                 // the underlying slice, so `i` cannot overflow an `isize`, and"}]}