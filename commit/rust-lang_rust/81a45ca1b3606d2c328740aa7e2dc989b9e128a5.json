{"sha": "81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYTQ1Y2ExYjM2MDZkMmMzMjg3NDBhYTdlMmRjOTg5YjllMTI4YTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:08:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:08:46Z"}, "message": "Make FromSource private", "tree": {"sha": "beb2951ab9f7a7ab1420cb072c8839957c6de02f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb2951ab9f7a7ab1420cb072c8839957c6de02f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "html_url": "https://github.com/rust-lang/rust/commit/81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4eeff2c82e7d8b95706c2bcb0388eeeb3ddd24e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4eeff2c82e7d8b95706c2bcb0388eeeb3ddd24e", "html_url": "https://github.com/rust-lang/rust/commit/f4eeff2c82e7d8b95706c2bcb0388eeeb3ddd24e"}], "stats": {"total": 125, "additions": 84, "deletions": 41}, "files": [{"sha": "43f0d664b470afef06bb9d560ac9eb8ae7ba2cc4", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -1,6 +1,6 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use either::Either;\n-use hir::{db::HirDatabase, InFile, SourceAnalyzer};\n+use hir::{db::HirDatabase, InFile, SourceAnalyzer, SourceBinder};\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n@@ -142,12 +142,16 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n     }\n+    pub(crate) fn source_binder(&self) -> SourceBinder<'a, DB> {\n+        SourceBinder::new(self.db)\n+    }\n     pub(crate) fn source_analyzer(\n         &self,\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        SourceAnalyzer::new(self.db, InFile::new(self.frange.file_id.into(), node), offset)\n+        let src = InFile::new(self.frange.file_id.into(), node);\n+        self.source_binder().analyze(src, offset)\n     }\n \n     pub(crate) fn covering_node_for_range(&self, range: TextRange) -> SyntaxElement {"}, {"sha": "aedcd62863618d5bd4aad1307a94e17b0408ce84", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::{db::HirDatabase, FromSource, InFile};\n+use hir::{db::HirDatabase, InFile};\n use join_to_string::join;\n use ra_syntax::{\n     ast::{\n@@ -136,15 +136,16 @@ fn find_struct_impl(\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n     })?;\n+    let mut sb = ctx.source_binder();\n \n     let struct_ty = {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n-        hir::Struct::from_source(db, src)?.ty(db)\n+        sb.to_def::<hir::Struct, _>(src)?.ty(db)\n     };\n \n     let block = module.descendants().filter_map(ast::ImplBlock::cast).find_map(|impl_blk| {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n-        let blk = hir::ImplBlock::from_source(db, src)?;\n+        let blk = sb.to_def::<hir::ImplBlock, _>(src)?;\n \n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();"}, {"sha": "59722eba3f4d8b1aa528393c81ab2398aafb4beb", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n-pub trait FromSource: Sized {\n+pub(crate) trait FromSource: Sized {\n     type Ast;\n     fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self>;\n }"}, {"sha": "11829f42a1aa8c8c1888d3aaf312a75c20d98310", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -45,7 +45,6 @@ pub use crate::{\n         MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n         TypeParam, Union, VariantDef,\n     },\n-    from_source::FromSource,\n     has_source::HasSource,\n     source_analyzer::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     source_binder::SourceBinder,"}, {"sha": "66930e492bc1a5dbcd8711aea64b2fc4b8e493b7", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, ImplId, ModuleId, StaticId,\n     StructFieldId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n-use hir_expand::InFile;\n+use hir_expand::{AstId, InFile, MacroDefId, MacroDefKind};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode, SyntaxNode, TextUnit};\n use rustc_hash::FxHashMap;\n@@ -62,18 +62,7 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n     }\n \n     fn to_id<T: ToId>(&mut self, src: InFile<T>) -> Option<T::ID> {\n-        let container = self.find_container(src.as_ref().map(|it| it.syntax()))?;\n-        let db = self.db;\n-        let dyn_map =\n-            &*self.child_by_source_cache.entry(container).or_insert_with(|| match container {\n-                ChildContainer::DefWithBodyId(it) => it.child_by_source(db),\n-                ChildContainer::ModuleId(it) => it.child_by_source(db),\n-                ChildContainer::TraitId(it) => it.child_by_source(db),\n-                ChildContainer::ImplId(it) => it.child_by_source(db),\n-                ChildContainer::EnumId(it) => it.child_by_source(db),\n-                ChildContainer::VariantId(it) => it.child_by_source(db),\n-            });\n-        dyn_map[T::KEY].get(&src).copied()\n+        T::to_id(self, src)\n     }\n \n     fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n@@ -145,20 +134,47 @@ impl_froms! {\n }\n \n pub trait ToId: Sized + AstNode + 'static {\n+    type ID: Sized + Copy + 'static;\n+    fn to_id<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>)\n+        -> Option<Self::ID>;\n+}\n+\n+pub trait ToIdByKey: Sized + AstNode + 'static {\n     type ID: Sized + Copy + 'static;\n     const KEY: Key<Self, Self::ID>;\n }\n \n-macro_rules! to_id_impls {\n+impl<T: ToIdByKey> ToId for T {\n+    type ID = <T as ToIdByKey>::ID;\n+    fn to_id<DB: HirDatabase>(\n+        sb: &mut SourceBinder<'_, DB>,\n+        src: InFile<Self>,\n+    ) -> Option<Self::ID> {\n+        let container = sb.find_container(src.as_ref().map(|it| it.syntax()))?;\n+        let db = sb.db;\n+        let dyn_map =\n+            &*sb.child_by_source_cache.entry(container).or_insert_with(|| match container {\n+                ChildContainer::DefWithBodyId(it) => it.child_by_source(db),\n+                ChildContainer::ModuleId(it) => it.child_by_source(db),\n+                ChildContainer::TraitId(it) => it.child_by_source(db),\n+                ChildContainer::ImplId(it) => it.child_by_source(db),\n+                ChildContainer::EnumId(it) => it.child_by_source(db),\n+                ChildContainer::VariantId(it) => it.child_by_source(db),\n+            });\n+        dyn_map[T::KEY].get(&src).copied()\n+    }\n+}\n+\n+macro_rules! to_id_key_impls {\n     ($(($id:ident, $ast:path, $key:path)),* ,) => {$(\n-        impl ToId for $ast {\n+        impl ToIdByKey for $ast {\n             type ID = $id;\n             const KEY: Key<Self, Self::ID> = $key;\n         }\n     )*}\n }\n \n-to_id_impls![\n+to_id_key_impls![\n     (StructId, ast::StructDef, keys::STRUCT),\n     (UnionId, ast::UnionDef, keys::UNION),\n     (EnumId, ast::EnumDef, keys::ENUM),\n@@ -171,3 +187,23 @@ to_id_impls![\n     (StructFieldId, ast::RecordFieldDef, keys::RECORD_FIELD),\n     (EnumVariantId, ast::EnumVariant, keys::ENUM_VARIANT),\n ];\n+\n+// FIXME: use DynMap as well?\n+impl ToId for ast::MacroCall {\n+    type ID = MacroDefId;\n+    fn to_id<DB: HirDatabase>(\n+        sb: &mut SourceBinder<'_, DB>,\n+        src: InFile<Self>,\n+    ) -> Option<Self::ID> {\n+        let kind = MacroDefKind::Declarative;\n+\n+        let module_src = ModuleSource::from_child_node(sb.db, src.as_ref().map(|it| it.syntax()));\n+        let module = crate::Module::from_definition(sb.db, InFile::new(src.file_id, module_src))?;\n+        let krate = Some(module.krate().id);\n+\n+        let ast_id =\n+            Some(AstId::new(src.file_id, sb.db.ast_id_map(src.file_id).ast_id(&src.value)));\n+\n+        Some(MacroDefId { krate, ast_id, kind })\n+    }\n+}"}, {"sha": "5913f12b16fdea9486a6a57d6f667a4a0d5e9a97", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -2,7 +2,7 @@\n \n use std::marker::PhantomData;\n \n-use hir_expand::InFile;\n+use hir_expand::{InFile, MacroDefId};\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n@@ -29,6 +29,8 @@ pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordFieldDef, StructFieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n \n+pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n+\n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object.\n ///"}, {"sha": "bd14a6d135ecd2b72be5fb1799f4126d700eb27d", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{FromSource, ImplBlock};\n+use hir::{ImplBlock, SourceBinder};\n use ra_db::SourceDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n@@ -12,6 +12,7 @@ pub(crate) fn goto_implementation(\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let parse = db.parse(position.file_id);\n     let syntax = parse.tree().syntax().clone();\n+    let mut sb = SourceBinder::new(db);\n \n     let src = hir::ModuleSource::from_position(db, position);\n     let module = hir::Module::from_definition(\n@@ -22,64 +23,64 @@ pub(crate) fn goto_implementation(\n     if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             nominal_def.syntax().text_range(),\n-            impls_for_def(db, position, &nominal_def, module)?,\n+            impls_for_def(&mut sb, position, &nominal_def, module)?,\n         ));\n     } else if let Some(trait_def) = find_node_at_offset::<ast::TraitDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             trait_def.syntax().text_range(),\n-            impls_for_trait(db, position, &trait_def, module)?,\n+            impls_for_trait(&mut sb, position, &trait_def, module)?,\n         ));\n     }\n \n     None\n }\n \n fn impls_for_def(\n-    db: &RootDatabase,\n+    sb: &mut SourceBinder<RootDatabase>,\n     position: FilePosition,\n     node: &ast::NominalDef,\n     module: hir::Module,\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n         ast::NominalDef::StructDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            hir::Struct::from_source(db, src)?.ty(db)\n+            sb.to_def::<hir::Struct, _>(src)?.ty(sb.db)\n         }\n         ast::NominalDef::EnumDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            hir::Enum::from_source(db, src)?.ty(db)\n+            sb.to_def::<hir::Enum, _>(src)?.ty(sb.db)\n         }\n         ast::NominalDef::UnionDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            hir::Union::from_source(db, src)?.ty(db)\n+            sb.to_def::<hir::Union, _>(src)?.ty(sb.db)\n         }\n     };\n \n     let krate = module.krate();\n-    let impls = ImplBlock::all_in_crate(db, krate);\n+    let impls = ImplBlock::all_in_crate(sb.db, krate);\n \n     Some(\n         impls\n             .into_iter()\n-            .filter(|impl_block| ty.is_equal_for_find_impls(&impl_block.target_ty(db)))\n-            .map(|imp| imp.to_nav(db))\n+            .filter(|impl_block| ty.is_equal_for_find_impls(&impl_block.target_ty(sb.db)))\n+            .map(|imp| imp.to_nav(sb.db))\n             .collect(),\n     )\n }\n \n fn impls_for_trait(\n-    db: &RootDatabase,\n+    sb: &mut SourceBinder<RootDatabase>,\n     position: FilePosition,\n     node: &ast::TraitDef,\n     module: hir::Module,\n ) -> Option<Vec<NavigationTarget>> {\n     let src = hir::InFile { file_id: position.file_id.into(), value: node.clone() };\n-    let tr = hir::Trait::from_source(db, src)?;\n+    let tr = sb.to_def(src)?;\n \n     let krate = module.krate();\n-    let impls = ImplBlock::for_trait(db, krate, tr);\n+    let impls = ImplBlock::for_trait(sb.db, krate, tr);\n \n-    Some(impls.into_iter().map(|imp| imp.to_nav(db)).collect())\n+    Some(impls.into_iter().map(|imp| imp.to_nav(sb.db)).collect())\n }\n \n #[cfg(test)]\n@@ -210,7 +211,7 @@ mod tests {\n             \"\n             //- /lib.rs\n             #[derive(Copy)]\n-            struct Foo<|>;            \n+            struct Foo<|>;\n             \",\n             &[\"impl IMPL_BLOCK FileId(1) [0; 15)\"],\n         );"}, {"sha": "dcffc3df223081fc0547a498033b884169401226", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a45ca1b3606d2c328740aa7e2dc989b9e128a5/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "patch": "@@ -1,6 +1,6 @@\n //! Functions that are used to classify an element from its definition or reference.\n \n-use hir::{FromSource, InFile, Module, ModuleSource, PathResolution, SourceBinder};\n+use hir::{InFile, Module, ModuleSource, PathResolution, SourceBinder};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode};\n use test_utils::tested_by;\n@@ -101,7 +101,7 @@ pub(crate) fn classify_name(\n             },\n             ast::MacroCall(it) => {\n                 let src = name.with_value(it);\n-                let def = hir::MacroDef::from_source(sb.db, src.clone())?;\n+                let def = sb.to_def(src.clone())?;\n \n                 let module_src = ModuleSource::from_child_node(sb.db, src.as_ref().map(|it| it.syntax()));\n                 let module = Module::from_definition(sb.db, src.with_value(module_src))?;"}]}