{"sha": "4aa4ce6ee26045f74f28d6a5067d01bf54221616", "node_id": "C_kwDOAAsO6NoAKDRhYTRjZTZlZTI2MDQ1Zjc0ZjI4ZDZhNTA2N2QwMWJmNTQyMjE2MTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-26T06:39:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-26T06:39:28Z"}, "message": "Rollup merge of #109621 - scottmcm:update-variantidx, r=compiler-errors\n\nRefactor: `VariantIdx::from_u32(0)` -> `FIRST_VARIANT`\n\nSince structs are always `VariantIdx(0)`, there's a bunch of files where the only reason they had `VariantIdx` or `vec::Idx` imported at all was to get the first variant.\n\nSo this uses a constant for that, and adds some doc-comments to `VariantIdx` while I'm there, since [it doesn't have any today](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/abi/struct.VariantIdx.html).", "tree": {"sha": "3808129509fbe0bc71c4be45b5fddef1c678c4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3808129509fbe0bc71c4be45b5fddef1c678c4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa4ce6ee26045f74f28d6a5067d01bf54221616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkH+igCRBK7hj4Ov3rIwAAjTwIAKJqmqlAqpuORWbbh3FGKfyC\nEZgMR4k/VUXDmoTGYe+1c0RtdKBx3XqnsrJEUYhdTbW2tiSOQ+2YEjgNX/VpFu6Z\nYA4u+d18/PquL7gZbuhgw62nGT1V6Agn20sOb5Ts0ED3Ca736A0DP6FBgm6r/wpF\no98aWt6fSvZNNuQORTv6C/Q0cWNSipulJ0/Y13V5Dwd3RUE6W5fVrv0TnWkfWeDO\ny8lXsNBp1UOyO3q/ChavFXqcOgFY0hd/C5U/p6+8BRUrVZzQHEMijgs5Hn7K6HlR\n7Al+uK9eZefl6SuADrOfMful2J6uVYbqudRD5R2UZDN8GlStXhNTehuOARVxOnU=\n=Sxh+\n-----END PGP SIGNATURE-----\n", "payload": "tree 3808129509fbe0bc71c4be45b5fddef1c678c4de\nparent 776a8f4ecae4292b064987f10b01b4e2e81fc2f4\nparent 0439d131768081174fe4ed53a6f09d41a9e5629f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679812768 +0200\ncommitter GitHub <noreply@github.com> 1679812768 +0200\n\nRollup merge of #109621 - scottmcm:update-variantidx, r=compiler-errors\n\nRefactor: `VariantIdx::from_u32(0)` -> `FIRST_VARIANT`\n\nSince structs are always `VariantIdx(0)`, there's a bunch of files where the only reason they had `VariantIdx` or `vec::Idx` imported at all was to get the first variant.\n\nSo this uses a constant for that, and adds some doc-comments to `VariantIdx` while I'm there, since [it doesn't have any today](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/abi/struct.VariantIdx.html).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa4ce6ee26045f74f28d6a5067d01bf54221616", "html_url": "https://github.com/rust-lang/rust/commit/4aa4ce6ee26045f74f28d6a5067d01bf54221616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa4ce6ee26045f74f28d6a5067d01bf54221616/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776a8f4ecae4292b064987f10b01b4e2e81fc2f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/776a8f4ecae4292b064987f10b01b4e2e81fc2f4", "html_url": "https://github.com/rust-lang/rust/commit/776a8f4ecae4292b064987f10b01b4e2e81fc2f4"}, {"sha": "0439d131768081174fe4ed53a6f09d41a9e5629f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0439d131768081174fe4ed53a6f09d41a9e5629f", "html_url": "https://github.com/rust-lang/rust/commit/0439d131768081174fe4ed53a6f09d41a9e5629f"}], "stats": {"total": 158, "additions": 80, "deletions": 78}, "files": [{"sha": "343f27326ad60f52118e643b325012f6d32dd236", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -43,7 +43,7 @@ pub trait LayoutCalculator {\n             .max_by_key(|niche| niche.available(dl));\n \n         LayoutS {\n-            variants: Variants::Single { index: VariantIdx::new(0) },\n+            variants: Variants::Single { index: FIRST_VARIANT },\n             fields: FieldsShape::Arbitrary {\n                 offsets: vec![Size::ZERO, b_offset],\n                 memory_index: vec![0, 1],\n@@ -264,7 +264,7 @@ pub trait LayoutCalculator {\n             abi = Abi::Uninhabited;\n         }\n         Some(LayoutS {\n-            variants: Variants::Single { index: VariantIdx::new(0) },\n+            variants: Variants::Single { index: FIRST_VARIANT },\n             fields: FieldsShape::Arbitrary { offsets, memory_index },\n             abi,\n             largest_niche,\n@@ -277,7 +277,7 @@ pub trait LayoutCalculator {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();\n         LayoutS {\n-            variants: Variants::Single { index: VariantIdx::new(0) },\n+            variants: Variants::Single { index: FIRST_VARIANT },\n             fields: FieldsShape::Primitive,\n             abi: Abi::Uninhabited,\n             largest_niche: None,\n@@ -331,7 +331,7 @@ pub trait LayoutCalculator {\n             }\n             // If it's a struct, still compute a layout so that we can still compute the\n             // field offsets.\n-            None => VariantIdx::new(0),\n+            None => FIRST_VARIANT,\n         };\n \n         let is_struct = !is_enum ||\n@@ -467,7 +467,7 @@ pub trait LayoutCalculator {\n                 .max_by_key(|(_i, layout)| layout.size.bytes())\n                 .map(|(i, _layout)| i)?;\n \n-            let all_indices = (0..=variants.len() - 1).map(VariantIdx::new);\n+            let all_indices = variants.indices();\n             let needs_disc =\n                 |index: VariantIdx| index != largest_variant_index && !absent(&variants[index]);\n             let niche_variants = all_indices.clone().find(|v| needs_disc(*v)).unwrap().index()\n@@ -896,8 +896,8 @@ pub trait LayoutCalculator {\n         let optimize = !repr.inhibit_union_abi_opt();\n         let mut size = Size::ZERO;\n         let mut abi = Abi::Aggregate { sized: true };\n-        let index = VariantIdx::new(0);\n-        for field in &variants[index] {\n+        let only_variant = &variants[FIRST_VARIANT];\n+        for field in only_variant {\n             assert!(field.0.is_sized());\n             align = align.max(field.align());\n \n@@ -930,8 +930,8 @@ pub trait LayoutCalculator {\n         }\n \n         Some(LayoutS {\n-            variants: Variants::Single { index },\n-            fields: FieldsShape::Union(NonZeroUsize::new(variants[index].len())?),\n+            variants: Variants::Single { index: FIRST_VARIANT },\n+            fields: FieldsShape::Union(NonZeroUsize::new(only_variant.len())?),\n             abi,\n             largest_niche: None,\n             align,"}, {"sha": "6740001c38be1699c9949d69b5086237abf4e854", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -1380,8 +1380,21 @@ impl Niche {\n }\n \n rustc_index::newtype_index! {\n+    /// The *source-order* index of a variant in a type.\n+    ///\n+    /// For enums, these are always `0..variant_count`, regardless of any\n+    /// custom discriminants that may have been defined, and including any\n+    /// variants that may end up uninhabited due to field types.  (Some of the\n+    /// variants may not be present in a monomorphized ABI [`Variants`], but\n+    /// those skipped variants are always counted when determining the *index*.)\n+    ///\n+    /// `struct`s, `tuples`, and `unions`s are considered to have a single variant\n+    /// with variant index zero, aka [`FIRST_VARIANT`].\n     #[derive(HashStable_Generic)]\n-    pub struct VariantIdx {}\n+    pub struct VariantIdx {\n+        /// Equivalent to `VariantIdx(0)`.\n+        const FIRST_VARIANT = 0;\n+    }\n }\n \n #[derive(PartialEq, Eq, Hash, Clone)]\n@@ -1422,7 +1435,7 @@ impl LayoutS {\n         let size = scalar.size(cx);\n         let align = scalar.align(cx);\n         LayoutS {\n-            variants: Variants::Single { index: VariantIdx::new(0) },\n+            variants: Variants::Single { index: FIRST_VARIANT },\n             fields: FieldsShape::Primitive,\n             abi: Abi::Scalar(scalar),\n             largest_niche,"}, {"sha": "4b27d240985177c6d850e06479cabd5477d972fd", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n@@ -36,7 +36,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::FIRST_VARIANT;\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -812,7 +812,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             },\n             PlaceTy { ty, variant_index: None } => match *ty.kind() {\n                 ty::Adt(adt_def, substs) if !adt_def.is_enum() => {\n-                    (adt_def.variant(VariantIdx::new(0)), substs)\n+                    (adt_def.variant(FIRST_VARIANT), substs)\n                 }\n                 ty::Closure(_, substs) => {\n                     return match substs"}, {"sha": "1825fb8cb228840ebfa3555612881a5aac2f8803", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -785,7 +785,7 @@ fn codegen_stmt<'tcx>(\n                             let variant_dest = lval.downcast_variant(fx, variant_index);\n                             (variant_index, variant_dest, active_field_index)\n                         }\n-                        _ => (VariantIdx::from_u32(0), lval, None),\n+                        _ => (FIRST_VARIANT, lval, None),\n                     };\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);"}, {"sha": "1bd03403f244b3c5b97f4f9e1d584a8a7c7e8ed0", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "93eefd92342d8f44f64f2b52e2b2361d8471c001", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variant(VariantIdx::new(0)).fields.len() {\n+            for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n                 let src_f = src.value_field(fx, mir::Field::new(i));\n                 let dst_f = dst.place_field(fx, mir::Field::new(i));\n "}, {"sha": "6c4ca8f7fb12dade7a68ff5f8f51765886d27765", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -24,7 +24,6 @@ use rustc_data_structures::sync::ParallelIterator;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::Idx;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols;\n@@ -40,7 +39,7 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n-use rustc_target::abi::{Align, VariantIdx};\n+use rustc_target::abi::{Align, FIRST_VARIANT};\n \n use std::collections::BTreeSet;\n use std::time::{Duration, Instant};\n@@ -307,7 +306,7 @@ pub fn coerce_unsized_into<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variant(VariantIdx::new(0)).fields.len() {\n+            for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n                 let src_f = src.project_field(bx, i);\n                 let dst_f = dst.project_field(bx, i);\n "}, {"sha": "4bc4fdab59e1974e322b78991bb5a71a54878ef7", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n-use rustc_target::abi::{self, VariantIdx};\n+use rustc_target::abi::{self, FIRST_VARIANT};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     #[instrument(level = \"trace\", skip(self, bx))]\n@@ -118,7 +118,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let variant_dest = dest.project_downcast(bx, variant_index);\n                         (variant_index, variant_dest, active_field_index)\n                     }\n-                    _ => (VariantIdx::from_u32(0), dest, None),\n+                    _ => (FIRST_VARIANT, dest, None),\n                 };\n                 if active_field_index.is_some() {\n                     assert_eq!(operands.len(), 1);"}, {"sha": "8e4454d7cec28dc7618d42110662b04887243af9", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -8,7 +8,7 @@ use crate::interpret::{\n use crate::interpret::{MPlaceTy, Value};\n use rustc_middle::ty::{self, ScalarInt, Ty, TyCtxt};\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_target::abi::{Align, VariantIdx};\n+use rustc_target::abi::{Align, VariantIdx, FIRST_VARIANT};\n \n #[instrument(skip(ecx), level = \"debug\")]\n fn branches<'tcx>(\n@@ -412,7 +412,7 @@ fn valtree_into_mplace<'tcx>(\n \n                         let inner_ty = match ty.kind() {\n                             ty::Adt(def, substs) => {\n-                                def.variant(VariantIdx::from_u32(0)).fields[i].ty(tcx, substs)\n+                                def.variant(FIRST_VARIANT).fields[i].ty(tcx, substs)\n                             }\n                             ty::Tuple(inner_tys) => inner_tys[i],\n                             _ => bug!(\"unexpected unsized type {:?}\", ty),"}, {"sha": "a95bcaa3f9988f9e28ca0baf47e0946f0c0b081f", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::Mutability;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n-use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, VariantIdx};\n+use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, FIRST_VARIANT};\n \n use super::{\n     alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,\n@@ -796,7 +796,7 @@ where\n                 let variant_dest = self.place_downcast(&dest, variant_index)?;\n                 (variant_index, variant_dest, active_field_index)\n             }\n-            _ => (VariantIdx::from_u32(0), dest.clone(), None),\n+            _ => (FIRST_VARIANT, dest.clone(), None),\n         };\n         if active_field_index.is_some() {\n             assert_eq!(operands.len(), 1);"}, {"sha": "2be385d551e8a98bafb47fea12e5ec7d2a3fb896", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n-use rustc_target::abi::{Size, VariantIdx};\n+use rustc_target::abi::{Size, FIRST_VARIANT};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum EdgeKind {\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         check_equal(self, location, *f_ty);\n                     }\n                     ty::Adt(adt_def, substs) => {\n-                        let var = parent_ty.variant_index.unwrap_or(VariantIdx::from_u32(0));\n+                        let var = parent_ty.variant_index.unwrap_or(FIRST_VARIANT);\n                         let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n                             fail_out_of_bounds(self, location);\n                             return;"}, {"sha": "5ca4087cdd3c487c638758b84b5da86901b02d59", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -14,12 +14,11 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::PatKind;\n-use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, adjustment, AdtKind, Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::FIRST_VARIANT;\n use ty::BorrowKind::ImmBorrow;\n \n use crate::mem_categorization as mc;\n@@ -549,7 +548,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             &*with_expr,\n                             with_place.clone(),\n                             with_field.ty(self.tcx(), substs),\n-                            ProjectionKind::Field(f_index as u32, VariantIdx::new(0)),\n+                            ProjectionKind::Field(f_index as u32, FIRST_VARIANT),\n                         );\n                         self.delegate_consume(&field_place, field_place.hir_id);\n                     }"}, {"sha": "19c4146de89954f6aa6cb7c27d3acc4f866f68d8", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -59,10 +59,9 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::PatKind;\n-use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n pub(crate) trait HirNode {\n@@ -331,7 +330,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     expr,\n                     base,\n                     expr_ty,\n-                    ProjectionKind::Field(field_idx as u32, VariantIdx::new(0)),\n+                    ProjectionKind::Field(field_idx as u32, FIRST_VARIANT),\n                 ))\n             }\n \n@@ -561,7 +560,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | Res::SelfTyParam { .. }\n             | Res::SelfTyAlias { .. } => {\n                 // Structs and Unions have only have one variant.\n-                Ok(VariantIdx::new(0))\n+                Ok(FIRST_VARIANT)\n             }\n             _ => bug!(\"expected ADT path, found={:?}\", res),\n         }\n@@ -675,7 +674,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {\n                     let subpat_ty = self.pat_ty_adjusted(subpat)?;\n-                    let projection_kind = ProjectionKind::Field(i as u32, VariantIdx::new(0));\n+                    let projection_kind = ProjectionKind::Field(i as u32, FIRST_VARIANT);\n                     let sub_place =\n                         self.cat_projection(pat, place_with_id.clone(), subpat_ty, projection_kind);\n                     self.cat_pattern_(sub_place, subpat, op)?;"}, {"sha": "8fe5a3cc78911ec39c084922d2656a15a6165418", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -49,8 +49,7 @@ use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_index::vec::Idx;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::FIRST_VARIANT;\n \n use std::iter;\n \n@@ -1406,7 +1405,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ProjectionKind::Field(..)\n                     ))\n                 );\n-                def.variants().get(VariantIdx::new(0)).unwrap().fields.iter().enumerate().any(\n+                def.variants().get(FIRST_VARIANT).unwrap().fields.iter().enumerate().any(\n                     |(i, field)| {\n                         let paths_using_field = captured_by_move_projs\n                             .iter()"}, {"sha": "c1b247e3d615a559b9140588f5d21266941b91a5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -58,7 +58,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n use rustc_hir::intravisit::FnKind as HirFnKind;\n use rustc_hir::{Body, FnDecl, ForeignItemKind, GenericParamKind, Node, PatKind, PredicateOrigin};\n-use rustc_index::vec::Idx;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -69,7 +68,7 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, Span};\n-use rustc_target::abi::{Abi, VariantIdx};\n+use rustc_target::abi::{Abi, FIRST_VARIANT};\n use rustc_trait_selection::infer::{InferCtxtExt, TyCtxtInferExt};\n use rustc_trait_selection::traits::{self, misc::type_allowed_to_implement_copy};\n \n@@ -2788,7 +2787,7 @@ impl ClashingExternDeclarations {\n                         );\n                         if is_transparent && !is_non_null {\n                             debug_assert_eq!(def.variants().len(), 1);\n-                            let v = &def.variant(VariantIdx::new(0));\n+                            let v = &def.variant(FIRST_VARIANT);\n                             // continue with `ty`'s non-ZST field,\n                             // otherwise `ty` is a ZST and we can return\n                             if let Some(field) = transparent_newtype_field(tcx, v) {"}, {"sha": "50d7fb1813a573a00b36496153a3e0253ddc2a80", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -10,11 +10,11 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::DataTypeKind;\n use rustc_span::symbol::sym;\n-use rustc_target::abi::{ReprOptions, VariantIdx};\n+use rustc_target::abi::{ReprOptions, VariantIdx, FIRST_VARIANT};\n \n use std::cell::RefCell;\n use std::cmp::Ordering;\n@@ -228,7 +228,7 @@ impl AdtDefData {\n             AdtKind::Struct => AdtFlags::IS_STRUCT,\n         };\n \n-        if kind == AdtKind::Struct && variants[VariantIdx::new(0)].ctor.is_some() {\n+        if kind == AdtKind::Struct && variants[FIRST_VARIANT].ctor.is_some() {\n             flags |= AdtFlags::HAS_CTOR;\n         }\n \n@@ -357,7 +357,7 @@ impl<'tcx> AdtDef<'tcx> {\n     /// Asserts this is a struct or union and returns its unique variant.\n     pub fn non_enum_variant(self) -> &'tcx VariantDef {\n         assert!(self.is_struct() || self.is_union());\n-        &self.variant(VariantIdx::new(0))\n+        &self.variant(FIRST_VARIANT)\n     }\n \n     #[inline]\n@@ -493,7 +493,7 @@ impl<'tcx> AdtDef<'tcx> {\n \n     #[inline]\n     pub fn variant_range(self) -> Range<VariantIdx> {\n-        VariantIdx::new(0)..VariantIdx::new(self.variants().len())\n+        FIRST_VARIANT..self.variants().next_index()\n     }\n \n     /// Computes the discriminant value used by a specific variant."}, {"sha": "d03cc324e518fefe85702860c0dd9198bc1c0c66", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -22,7 +22,7 @@ use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n@@ -517,8 +517,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     #[inline]\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n-        let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();\n-        VariantIdx::new(0)..VariantIdx::new(num_variants)\n+        FIRST_VARIANT..tcx.generator_layout(def_id).unwrap().variant_fields.next_index()\n     }\n \n     /// The discriminant for the given variant. Panics if the `variant_index` is"}, {"sha": "e112bf9829b68f74e05e4f3b9306f8aed1c41081", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -13,9 +13,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::AdtDef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, Variance};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n-\n-use rustc_index::vec::Idx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n \n use std::assert_matches::assert_matches;\n use std::iter;\n@@ -91,7 +89,7 @@ fn convert_to_hir_projections_and_truncate_for_capture(\n         let hir_projection = match mir_projection {\n             ProjectionElem::Deref => HirProjectionKind::Deref,\n             ProjectionElem::Field(field, _) => {\n-                let variant = variant.unwrap_or(VariantIdx::new(0));\n+                let variant = variant.unwrap_or(FIRST_VARIANT);\n                 HirProjectionKind::Field(field.index() as u32, variant)\n             }\n             ProjectionElem::Downcast(.., idx) => {"}, {"sha": "04e9273fc46c9968dc1731e0cf837681175aa175", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n use rustc_span::{sym, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::FIRST_VARIANT;\n \n impl<'tcx> Cx<'tcx> {\n     pub(crate) fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {\n@@ -357,7 +357,7 @@ impl<'tcx> Cx<'tcx> {\n                                 Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {\n                                     Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))\n                                 }\n-                                Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),\n+                                Res::SelfCtor(..) => Some((adt_def, FIRST_VARIANT)),\n                                 _ => None,\n                             })\n                         } else {\n@@ -510,7 +510,7 @@ impl<'tcx> Cx<'tcx> {\n                         debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n                         ExprKind::Adt(Box::new(AdtExpr {\n                             adt_def: *adt,\n-                            variant_index: VariantIdx::new(0),\n+                            variant_index: FIRST_VARIANT,\n                             substs,\n                             user_ty,\n                             fields: self.field_refs(fields),\n@@ -732,7 +732,7 @@ impl<'tcx> Cx<'tcx> {\n             }\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n-                variant_index: VariantIdx::new(0),\n+                variant_index: FIRST_VARIANT,\n                 name: Field::new(self.typeck_results.field_index(expr.hir_id)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {"}, {"sha": "8a7b1fce51db40213e60390178e0b02dd121add9", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -60,7 +60,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, VariantDef};\n use rustc_middle::{middle::stability::EvalResult, mir::interpret::ConstValue};\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::{Integer, Size, VariantIdx};\n+use rustc_target::abi::{Integer, Size, VariantIdx, FIRST_VARIANT};\n \n use self::Constructor::*;\n use self::SliceKind::*;\n@@ -706,7 +706,7 @@ impl<'tcx> Constructor<'tcx> {\n             Variant(idx) => idx,\n             Single => {\n                 assert!(!adt.is_enum());\n-                VariantIdx::new(0)\n+                FIRST_VARIANT\n             }\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt),\n         }"}, {"sha": "fe6728fc76e4c08d14b3b5e8d26892c5db180fb0", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::traits::Reveal;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n use std::{fmt, iter};\n \n /// The value of an inserted drop flag.\n@@ -468,7 +468,7 @@ where\n             let fields = self.move_paths_for_fields(\n                 self.place,\n                 self.path,\n-                &adt.variant(VariantIdx::new(0)),\n+                &adt.variant(FIRST_VARIANT),\n                 substs,\n             );\n             self.drop_ladder(fields, succ, unwind)\n@@ -894,7 +894,7 @@ where\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n         let free_func = tcx.require_lang_item(LangItem::BoxFree, Some(self.source_info.span));\n         let args = adt\n-            .variant(VariantIdx::new(0))\n+            .variant(FIRST_VARIANT)\n             .fields\n             .iter()\n             .enumerate()"}, {"sha": "7136e42189af90cb11468fe28589e9800b3d149d", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::FIRST_VARIANT;\n use rustc_target::spec::abi::Abi;\n \n use crate::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -911,7 +911,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                     check_equal(self, *f_ty);\n                 }\n                 ty::Adt(adt_def, substs) => {\n-                    let var = parent_ty.variant_index.unwrap_or(VariantIdx::from_u32(0));\n+                    let var = parent_ty.variant_index.unwrap_or(FIRST_VARIANT);\n                     let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n                         self.validation = Err(\"malformed MIR\");\n                         return;"}, {"sha": "970a0a8d4bf5072275989c0e5c2d817e97add17e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n \n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -816,11 +816,8 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n \n     let source_info = SourceInfo::outermost(span);\n \n-    let variant_index = if adt_def.is_enum() {\n-        adt_def.variant_index_with_ctor_id(ctor_id)\n-    } else {\n-        VariantIdx::new(0)\n-    };\n+    let variant_index =\n+        if adt_def.is_enum() { adt_def.variant_index_with_ctor_id(ctor_id) } else { FIRST_VARIANT };\n \n     // Generate the following MIR:\n     //"}, {"sha": "b67607a4db63e180a87a4cd909b629e04784d3ae", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::abstract_const::CastKind;\n use rustc_middle::ty::{self, Expr, TyCtxt, TypeVisitableExt};\n use rustc_middle::{mir, thir};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n \n use std::iter;\n \n@@ -44,7 +44,7 @@ pub(crate) fn destructure_const<'tcx>(\n                 let (head, rest) = branches.split_first().unwrap();\n                 (VariantIdx::from_u32(head.unwrap_leaf().try_to_u32().unwrap()), rest)\n             } else {\n-                (VariantIdx::from_u32(0), branches)\n+                (FIRST_VARIANT, branches)\n             };\n             let fields = &def.variant(variant_idx).fields;\n             let mut field_consts = Vec::with_capacity(fields.len());"}, {"sha": "380931742e389eabac8de7224b099a8e67a7433f", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa4ce6ee26045f74f28d6a5067d01bf54221616/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=4aa4ce6ee26045f74f28d6a5067d01bf54221616", "patch": "@@ -1,7 +1,7 @@\n use hir::def_id::DefId;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::{GeneratorLayout, GeneratorSavedLocal};\n use rustc_middle::ty::layout::{\n     IntegerExt, LayoutCx, LayoutError, LayoutOf, TyAndLayout, MAX_SIMD_LANES,\n@@ -227,7 +227,7 @@ fn layout_of_uncached<'tcx>(\n             let largest_niche = if count != 0 { element.largest_niche } else { None };\n \n             tcx.mk_layout(LayoutS {\n-                variants: Variants::Single { index: VariantIdx::new(0) },\n+                variants: Variants::Single { index: FIRST_VARIANT },\n                 fields: FieldsShape::Array { stride: element.size, count },\n                 abi,\n                 largest_niche,\n@@ -238,7 +238,7 @@ fn layout_of_uncached<'tcx>(\n         ty::Slice(element) => {\n             let element = cx.layout_of(element)?;\n             tcx.mk_layout(LayoutS {\n-                variants: Variants::Single { index: VariantIdx::new(0) },\n+                variants: Variants::Single { index: FIRST_VARIANT },\n                 fields: FieldsShape::Array { stride: element.size, count: 0 },\n                 abi: Abi::Aggregate { sized: false },\n                 largest_niche: None,\n@@ -247,7 +247,7 @@ fn layout_of_uncached<'tcx>(\n             })\n         }\n         ty::Str => tcx.mk_layout(LayoutS {\n-            variants: Variants::Single { index: VariantIdx::new(0) },\n+            variants: Variants::Single { index: FIRST_VARIANT },\n             fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },\n             abi: Abi::Aggregate { sized: false },\n             largest_niche: None,\n@@ -399,7 +399,7 @@ fn layout_of_uncached<'tcx>(\n             };\n \n             tcx.mk_layout(LayoutS {\n-                variants: Variants::Single { index: VariantIdx::new(0) },\n+                variants: Variants::Single { index: FIRST_VARIANT },\n                 fields,\n                 abi: Abi::Vector { element: e_abi, count: e_len },\n                 largest_niche: e_ly.largest_niche,"}]}