{"sha": "d227a825bc6122c9e38d33cba5789a209934576f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMjdhODI1YmM2MTIyYzllMzhkMzNjYmE1Nzg5YTIwOTkzNDU3NmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-28T05:29:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T05:29:55Z"}, "message": "Rollup merge of #73672 - nellshamrell:async-fix, r=estebank\n\nAdds a clearer message for when the async keyword is missing from a f\u2026\n\n\u2026unction\n\nThis is a somewhat simple fix for #66731.\n\nUnder the current version of Rust, if a user has a rust file that looks like this:\n\n```rust\nfn boo (){}\n\nasync fn foo() {\n    boo().await;\n}\n\nfn main() {\n\n}\n```\n\nAnd they attempt to run it, they will receive an error message that looks like this:\n\n```bash\nerror: incorrect use of `await`                                                                                                        --> test.rs:4:14                                                                                                                       |                                                                                                                                   4 |     boo.await();                                                                                                                    |              ^^ help: `await` is not a method call, remove the parentheses                                                                                                                                                                                              error[E0277]: the trait bound `fn() {boo}: std::future::Future` is not satisfied                                                        --> test.rs:4:5                                                                                                                        |                                                                                                                                  4  |     boo.await();                                                                                                                    |     ^^^^^^^^^ the trait `std::future::Future` is not implemented for `fn() {boo}`                                                                                                                                                                                      error: aborting due to 2 previous errors                                                                                                                                                                                                                                    For more information about this error, try `rustc --explain E0277`.\n```\n\nThis is not very clear.\n\nWith the changes made in this PR, when a user compiles and runs that same rust code, they will receive an error message that looks like this:\n\n```bash\nerror[E0277]: `()` is not a future.\n --> test.rs:4:5\n  |\n4 |     boo().await;\n  |     ^^^^^^^^^^^ `()` is not a future\n  |\n  = help: the trait `std::future::Future` is not implemented for `()`\n  = note: required by `std::future::Future::poll`\n```\n\nIn the future, I think we should make this error message even clearer, perhaps through a solution like the one described in [this comment](https://github.com/rust-lang/rust/issues/66731#issuecomment-644394287). However, as that potentially involves a major change proposal, I would rather get this change in now and make the error message a little clearer while an MCP is drafted and discussed.\n\nSigned-off-by: Nell Shamrell <nellshamrell@gmail.com>", "tree": {"sha": "10521cbdef4c77eac5d749ff5372a5250dbc5392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10521cbdef4c77eac5d749ff5372a5250dbc5392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d227a825bc6122c9e38d33cba5789a209934576f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+CrUCRBK7hj4Ov3rIwAAdHIIAFdhMiQbrXuCPTrTU2vg437B\nqrJXSHi0NpmQQyQYYg7/8olmhdApGq1wC7ULHRwlR9K3JBgaZBgthr47gqH0wsM7\nAJnQ+BNWffQrdAAwQZL8FtyCmGPNmhsyXpCpcfDciRyQr77emBLVPgM9g+IHv85Z\nX7N8VQ3VEzri5fHXE/Jpr93BnicOcQNI5dGrhhgSax5kAwZ+zW7+6pnqR9jd1KmH\nXLM+19UwQ/APSgVZDw0i7BLaJUCAgnF1MpsbDoBPaUnPsepr0uD2dLJGQpsBQLv1\nor76b8259KOpCZTyEuESt/bjkZWiuFYWKdRk8pVicXvOuORBx1FbIj4GPOV5GWg=\n=KBaX\n-----END PGP SIGNATURE-----\n", "payload": "tree 10521cbdef4c77eac5d749ff5372a5250dbc5392\nparent 45ec25e088efeabd21c793bde8ab7a05103cc8d2\nparent 5e28eb580ff48a84fe6f49bff31c4c022f243ac9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593322195 -0700\ncommitter GitHub <noreply@github.com> 1593322195 -0700\n\nRollup merge of #73672 - nellshamrell:async-fix, r=estebank\n\nAdds a clearer message for when the async keyword is missing from a f\u2026\n\n\u2026unction\n\nThis is a somewhat simple fix for #66731.\n\nUnder the current version of Rust, if a user has a rust file that looks like this:\n\n```rust\nfn boo (){}\n\nasync fn foo() {\n    boo().await;\n}\n\nfn main() {\n\n}\n```\n\nAnd they attempt to run it, they will receive an error message that looks like this:\n\n```bash\nerror: incorrect use of `await`                                                                                                        --> test.rs:4:14                                                                                                                       |                                                                                                                                   4 |     boo.await();                                                                                                                    |              ^^ help: `await` is not a method call, remove the parentheses                                                                                                                                                                                              error[E0277]: the trait bound `fn() {boo}: std::future::Future` is not satisfied                                                        --> test.rs:4:5                                                                                                                        |                                                                                                                                  4  |     boo.await();                                                                                                                    |     ^^^^^^^^^ the trait `std::future::Future` is not implemented for `fn() {boo}`                                                                                                                                                                                      error: aborting due to 2 previous errors                                                                                                                                                                                                                                    For more information about this error, try `rustc --explain E0277`.\n```\n\nThis is not very clear.\n\nWith the changes made in this PR, when a user compiles and runs that same rust code, they will receive an error message that looks like this:\n\n```bash\nerror[E0277]: `()` is not a future.\n --> test.rs:4:5\n  |\n4 |     boo().await;\n  |     ^^^^^^^^^^^ `()` is not a future\n  |\n  = help: the trait `std::future::Future` is not implemented for `()`\n  = note: required by `std::future::Future::poll`\n```\n\nIn the future, I think we should make this error message even clearer, perhaps through a solution like the one described in [this comment](https://github.com/rust-lang/rust/issues/66731#issuecomment-644394287). However, as that potentially involves a major change proposal, I would rather get this change in now and make the error message a little clearer while an MCP is drafted and discussed.\n\nSigned-off-by: Nell Shamrell <nellshamrell@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d227a825bc6122c9e38d33cba5789a209934576f", "html_url": "https://github.com/rust-lang/rust/commit/d227a825bc6122c9e38d33cba5789a209934576f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d227a825bc6122c9e38d33cba5789a209934576f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ec25e088efeabd21c793bde8ab7a05103cc8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ec25e088efeabd21c793bde8ab7a05103cc8d2", "html_url": "https://github.com/rust-lang/rust/commit/45ec25e088efeabd21c793bde8ab7a05103cc8d2"}, {"sha": "5e28eb580ff48a84fe6f49bff31c4c022f243ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e28eb580ff48a84fe6f49bff31c4c022f243ac9", "html_url": "https://github.com/rust-lang/rust/commit/5e28eb580ff48a84fe6f49bff31c4c022f243ac9"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "abf461338d80a95137e6c1e8f2715ccfdd8e27a4", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -27,6 +27,7 @@ use crate::task::{Context, Poll};\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[lang = \"future_trait\"]\n+#[rustc_on_unimplemented(label = \"`{Self}` is not a future\", message = \"`{Self}` is not a future\")]\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "86d459bf084b1f6827c92525f8dc317f518ac7b9", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -5,7 +5,7 @@\n use std::future::Future;\n \n fn get_future() -> impl Future<Output = ()> {\n-//~^ ERROR the trait bound `(): std::future::Future` is not satisfied\n+//~^ ERROR `()` is not a future\n     panic!()\n }\n "}, {"sha": "9523f040aa8cd91c3526600b6d207913be08228a", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -1,12 +1,13 @@\n-error[E0277]: the trait bound `(): std::future::Future` is not satisfied\n+error[E0277]: `()` is not a future\n   --> $DIR/async-error-span.rs:7:20\n    |\n LL | fn get_future() -> impl Future<Output = ()> {\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `()`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n LL |\n LL |     panic!()\n    |     -------- this returned value is of type `!`\n    |\n+   = help: the trait `std::future::Future` is not implemented for `()`\n    = note: the return type of a function must have a statically known size\n \n error[E0698]: type inside `async fn` body must be known in this context"}, {"sha": "34d12db8806dc0845e77096f283c0804e73d9579", "filename": "src/test/ui/async-await/issue-70594.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -6,7 +6,7 @@ async fn fun() {\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `loop` is not allowed in a `const`\n     //~| error: `.await` is not allowed in a `const`\n-    //~| error: the trait bound `(): std::future::Future` is not satisfied\n+    //~| error: `()` is not a future\n }\n \n fn main() {}"}, {"sha": "1b7abe317222d982c6eb8d276d03769af2394746", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -27,12 +27,13 @@ error[E0744]: `.await` is not allowed in a `const`\n LL |     [1; ().await];\n    |         ^^^^^^^^\n \n-error[E0277]: the trait bound `(): std::future::Future` is not satisfied\n+error[E0277]: `()` is not a future\n   --> $DIR/issue-70594.rs:4:9\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^ the trait `std::future::Future` is not implemented for `()`\n+   |         ^^^^^^^^ `()` is not a future\n    |\n+   = help: the trait `std::future::Future` is not implemented for `()`\n    = note: required by `std::future::Future::poll`\n \n error: aborting due to 5 previous errors"}, {"sha": "e3ba74a03c898c933470709ef1097adb569faad0", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -27,12 +27,13 @@ LL | fn main() {\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n+error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n   --> $DIR/issue-62009-1.rs:12:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n+   = help: the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    = note: required by `std::future::Future::poll`\n \n error: aborting due to 4 previous errors"}, {"sha": "fecba721ac9fdeb101053fd43ce0b7e2789ee00e", "filename": "src/test/ui/issues-71798.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fissues-71798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fissues-71798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.rs?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -1,5 +1,5 @@\n fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n-    *x //~^ ERROR the trait bound `u32: std::future::Future` is not satisfied\n+    *x //~^ ERROR `u32` is not a future\n }\n \n fn main() {"}, {"sha": "b3b29a726413156e284f85931100cdb5e688fba3", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -4,14 +4,15 @@ error[E0425]: cannot find value `u` in this scope\n LL |     let _ = test_ref & u;\n    |                        ^ not found in this scope\n \n-error[E0277]: the trait bound `u32: std::future::Future` is not satisfied\n+error[E0277]: `u32` is not a future\n   --> $DIR/issues-71798.rs:1:25\n    |\n LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `u32`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n LL |     *x\n    |     -- this returned value is of type `u32`\n    |\n+   = help: the trait `std::future::Future` is not implemented for `u32`\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "11372494772d0962c55e4d66faf252c6330ec8f5", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d227a825bc6122c9e38d33cba5789a209934576f/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=d227a825bc6122c9e38d33cba5789a209934576f", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `fn() -> impl std::future::Future {foo}: std::future::Future` is not satisfied\n+error[E0277]: `fn() -> impl std::future::Future {foo}` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n LL | async fn foo() {}\n@@ -8,14 +8,15 @@ LL | fn bar(f: impl Future<Output=()>) {}\n    |                ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |         ^^^ `fn() -> impl std::future::Future {foo}` is not a future\n    |\n+   = help: the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n help: use parentheses to call the function\n    |\n LL |     bar(foo());\n    |            ^^\n \n-error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]: std::future::Future` is not satisfied\n+error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n@@ -24,8 +25,9 @@ LL | fn bar(f: impl Future<Output=()>) {}\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |         ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   |         ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n    |\n+   = help: the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n help: use parentheses to call the closure\n    |\n LL |     bar(async_closure());"}]}