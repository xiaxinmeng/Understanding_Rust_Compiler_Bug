{"sha": "267d3620a59c66a58d4d53f77d3f31e44f0f07fe", "node_id": "C_kwDOAAsO6NoAKDI2N2QzNjIwYTU5YzY2YTU4ZDRkNTNmNzdkM2YzMWU0NGYwZjA3ZmU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-22T21:31:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-26T17:00:31Z"}, "message": "Move fn parameter ribs outwards.", "tree": {"sha": "b02c38c4f040e069507e16b8956a5a1af9fcc87b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02c38c4f040e069507e16b8956a5a1af9fcc87b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267d3620a59c66a58d4d53f77d3f31e44f0f07fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267d3620a59c66a58d4d53f77d3f31e44f0f07fe", "html_url": "https://github.com/rust-lang/rust/commit/267d3620a59c66a58d4d53f77d3f31e44f0f07fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267d3620a59c66a58d4d53f77d3f31e44f0f07fe/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae70e366f3b77c127f6cb799fcaab4de96974d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae70e366f3b77c127f6cb799fcaab4de96974d5c", "html_url": "https://github.com/rust-lang/rust/commit/ae70e366f3b77c127f6cb799fcaab4de96974d5c"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "ed65100ae77511584e0c70b190c899be0e15d18a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/267d3620a59c66a58d4d53f77d3f31e44f0f07fe/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d3620a59c66a58d4d53f77d3f31e44f0f07fe/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=267d3620a59c66a58d4d53f77d3f31e44f0f07fe", "patch": "@@ -695,14 +695,25 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     },\n                     |this| {\n                         this.visit_generic_params(&bare_fn.generic_params, false);\n-                        this.resolve_fn_signature(\n-                            ty.id,\n-                            None,\n-                            false,\n-                            // We don't need to deal with patterns in parameters, because\n-                            // they are not possible for foreign or bodiless functions.\n-                            bare_fn.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n-                            &bare_fn.decl.output,\n+                        this.with_lifetime_rib(\n+                            LifetimeRibKind::AnonymousCreateParameter {\n+                                binder: ty.id,\n+                                report_in_path: false,\n+                            },\n+                            |this| {\n+                                this.resolve_fn_signature(\n+                                    ty.id,\n+                                    false,\n+                                    // We don't need to deal with patterns in parameters, because\n+                                    // they are not possible for foreign or bodiless functions.\n+                                    bare_fn\n+                                        .decl\n+                                        .inputs\n+                                        .iter()\n+                                        .map(|Param { ty, .. }| (None, &**ty)),\n+                                    &bare_fn.decl.output,\n+                                )\n+                            },\n                         );\n                     },\n                 )\n@@ -782,12 +793,19 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             | FnKind::Fn(_, _, sig, _, generics, None) => {\n                 self.visit_fn_header(&sig.header);\n                 self.visit_generics(generics);\n-                self.resolve_fn_signature(\n-                    fn_id,\n-                    None,\n-                    sig.decl.has_self(),\n-                    sig.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n-                    &sig.decl.output,\n+                self.with_lifetime_rib(\n+                    LifetimeRibKind::AnonymousCreateParameter {\n+                        binder: fn_id,\n+                        report_in_path: false,\n+                    },\n+                    |this| {\n+                        this.resolve_fn_signature(\n+                            fn_id,\n+                            sig.decl.has_self(),\n+                            sig.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n+                            &sig.decl.output,\n+                        )\n+                    },\n                 );\n                 return;\n             }\n@@ -812,15 +830,22 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         let declaration = &sig.decl;\n                         let async_node_id = sig.header.asyncness.opt_return_id();\n \n-                        this.resolve_fn_signature(\n-                            fn_id,\n-                            async_node_id,\n-                            declaration.has_self(),\n-                            declaration\n-                                .inputs\n-                                .iter()\n-                                .map(|Param { pat, ty, .. }| (Some(&**pat), &**ty)),\n-                            &declaration.output,\n+                        this.with_lifetime_rib(\n+                            LifetimeRibKind::AnonymousCreateParameter {\n+                                binder: fn_id,\n+                                report_in_path: async_node_id.is_some(),\n+                            },\n+                            |this| {\n+                                this.resolve_fn_signature(\n+                                    fn_id,\n+                                    declaration.has_self(),\n+                                    declaration\n+                                        .inputs\n+                                        .iter()\n+                                        .map(|Param { pat, ty, .. }| (Some(&**pat), &**ty)),\n+                                    &declaration.output,\n+                                )\n+                            },\n                         );\n \n                         // Construct the list of in-scope lifetime parameters for async lowering.\n@@ -1035,12 +1060,19 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                                 kind: LifetimeBinderKind::PolyTrait,\n                                 ..\n                             } => {\n-                                self.resolve_fn_signature(\n-                                    binder,\n-                                    None,\n-                                    false,\n-                                    p_args.inputs.iter().map(|ty| (None, &**ty)),\n-                                    &p_args.output,\n+                                self.with_lifetime_rib(\n+                                    LifetimeRibKind::AnonymousCreateParameter {\n+                                        binder,\n+                                        report_in_path: false,\n+                                    },\n+                                    |this| {\n+                                        this.resolve_fn_signature(\n+                                            binder,\n+                                            false,\n+                                            p_args.inputs.iter().map(|ty| (None, &**ty)),\n+                                            &p_args.output,\n+                                        )\n+                                    },\n                                 );\n                                 break;\n                             }\n@@ -1813,18 +1845,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn resolve_fn_signature(\n         &mut self,\n         fn_id: NodeId,\n-        async_node_id: Option<NodeId>,\n         has_self: bool,\n         inputs: impl Iterator<Item = (Option<&'ast Pat>, &'ast Ty)> + Clone,\n         output_ty: &'ast FnRetTy,\n     ) {\n         // Add each argument to the rib.\n-        let parameter_rib = LifetimeRibKind::AnonymousCreateParameter {\n-            binder: fn_id,\n-            report_in_path: async_node_id.is_some(),\n-        };\n-        let elision_lifetime =\n-            self.with_lifetime_rib(parameter_rib, |this| this.resolve_fn_params(has_self, inputs));\n+        let elision_lifetime = self.resolve_fn_params(has_self, inputs);\n         debug!(?elision_lifetime);\n \n         let outer_failures = take(&mut self.diagnostic_metadata.current_elision_failures);"}]}