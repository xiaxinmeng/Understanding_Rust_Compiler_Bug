{"sha": "c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTE4ODQ1NzUyZTJjN2U3YmIzNjgyYzI5YTYyYWU5N2NmYTE4ZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-10-01T01:38:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-01T17:08:24Z"}, "message": "Clean up and add more comments to libstd/lib.rs", "tree": {"sha": "ccdac4b40a961d87604a016af3326b640bd668ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccdac4b40a961d87604a016af3326b640bd668ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "html_url": "https://github.com/rust-lang/rust/commit/c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2518845752e2c7e7bb3682c29a62ae97cfa18ed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5bb1f7c05f92986dcf612d81d9c20312dca2fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5bb1f7c05f92986dcf612d81d9c20312dca2fc", "html_url": "https://github.com/rust-lang/rust/commit/8f5bb1f7c05f92986dcf612d81d9c20312dca2fc"}], "stats": {"total": 149, "additions": 70, "deletions": 79}, "files": [{"sha": "6f9aa6d1e082e0db58f877e432778c1d75a4bce0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 66, "deletions": 67, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c2518845752e2c7e7bb3682c29a62ae97cfa18ed/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2518845752e2c7e7bb3682c29a62ae97cfa18ed/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "patch": "@@ -210,8 +210,27 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n+// Don't link to std. We are std.\n+#![no_std]\n+\n+#![deny(missing_docs)]\n+\n+// Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n \n+// Always use alloc_system during stage0 since jemalloc might be unavailable or\n+// disabled (Issue #30592)\n+#![cfg_attr(stage0, feature(alloc_system))]\n+\n+// Turn warnings into errors, but only after stage0, where it can be useful for\n+// code to emit warnings during language transitions\n+#![cfg_attr(not(stage0), deny(warnings))]\n+\n+// std may use features in a platform-specific way\n+#![allow(unused_features)]\n+\n+// std is implemented with unstable features, many of which are internal\n+// compiler details that will never be stable\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n@@ -283,21 +302,13 @@\n #![feature(zero_one)]\n #![cfg_attr(test, feature(update_panic_count))]\n \n-// Issue# 30592: Systematically use alloc_system during stage0 since jemalloc\n-// might be unavailable or disabled\n-#![cfg_attr(stage0, feature(alloc_system))]\n-\n-// Don't link to std. We are std.\n-#![no_std]\n-\n-#![deny(missing_docs)]\n-#![allow(unused_features)] // std may use features in a platform-specific way\n-#![cfg_attr(not(stage0), deny(warnings))]\n-\n+// Explicitly import the prelude. The compiler uses this same unstable attribute\n+// to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;\n \n+// Access to Bencher, etc.\n #[cfg(test)] extern crate test;\n \n // We want to reexport a few macros from core but libcore has already been\n@@ -325,11 +336,22 @@ extern crate alloc_system;\n // compiler-rt intrinsics\n extern crate compiler_builtins;\n \n-// Make std testable by not duplicating lang items and other globals. See #2912\n+// During testing, this crate is not actually the \"real\" std library, but rather\n+// it links to the real std library, which was compiled from this same source\n+// code. So any lang items std defines are conditionally excluded (or else they\n+// wolud generate duplicate lang item errors), and any globals it defines are\n+// _not_ the globals used by \"real\" std. So this import, defined only during\n+// testing gives test-std access to real-std lang items and globals. See #2912\n #[cfg(test)] extern crate std as realstd;\n \n-// NB: These reexports are in the order they should be listed in rustdoc\n+// The standard macros that are not built-in to the compiler.\n+#[macro_use]\n+mod macros;\n+\n+// The Rust prelude\n+pub mod prelude;\n \n+// Public module declarations and reexports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -362,48 +384,6 @@ pub use core::raw;\n pub use core::result;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::option;\n-\n-pub mod error;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc::boxed;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc::rc;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::borrow;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::fmt;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::slice;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::str;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::string;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core_collections::vec;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use rustc_unicode::char;\n-\n-/* Exported macros */\n-\n-#[macro_use]\n-mod macros;\n-\n-mod rtdeps;\n-\n-/* The Prelude. */\n-\n-pub mod prelude;\n-\n-\n-/* Primitive types */\n-\n-// NB: slice and str are primitive types too, but their module docs + primitive\n-// doc pages are inlined from the public re-exports of core_collections::{slice,\n-// str} above.\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::isize;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -414,7 +394,6 @@ pub use core::i16;\n pub use core::i32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i64;\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::usize;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -425,42 +404,62 @@ pub use core::u16;\n pub use core::u32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::u64;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use alloc::boxed;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use alloc::rc;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::borrow;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::fmt;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::slice;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::str;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::string;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core_collections::vec;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use rustc_unicode::char;\n \n #[path = \"num/f32.rs\"]   pub mod f32;\n #[path = \"num/f64.rs\"]   pub mod f64;\n \n-pub mod ascii;\n-\n-/* Common traits */\n-\n-pub mod num;\n-\n-/* Runtime and platform support */\n-\n #[macro_use]\n pub mod thread;\n-\n+pub mod ascii;\n pub mod collections;\n pub mod env;\n+pub mod error;\n pub mod ffi;\n pub mod fs;\n pub mod io;\n pub mod net;\n+pub mod num;\n pub mod os;\n pub mod panic;\n pub mod path;\n pub mod process;\n pub mod sync;\n pub mod time;\n-mod memchr;\n \n+// Platform-abstraction modules\n #[macro_use]\n mod sys_common;\n mod sys;\n \n-pub mod rt;\n+// Private support modules\n mod panicking;\n mod rand;\n+mod memchr;\n+\n+// This module just defines per-platform native library dependencies\n+mod rtdeps;\n+\n+// The runtime entry point and a few unstable public functions used by the\n+// compiler\n+pub mod rt;\n \n // Some external utilities of the standard library rely on randomness (aka\n // rustc_back::TempDir and tests) and need a way to get at the OS rng we've got"}, {"sha": "1dd9b73e262c82d5bbdc7520e1eb43e9c983ebb4", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2518845752e2c7e7bb3682c29a62ae97cfa18ed/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2518845752e2c7e7bb3682c29a62ae97cfa18ed/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=c2518845752e2c7e7bb3682c29a62ae97cfa18ed", "patch": "@@ -27,18 +27,6 @@\n use sync::Once;\n use sys;\n \n-macro_rules! rtabort {\n-    ($($t:tt)*) => (::sys_common::util::abort(format_args!($($t)*)))\n-}\n-\n-macro_rules! rtassert {\n-    ($e:expr) => ({\n-        if !$e {\n-            rtabort!(concat!(\"assertion failed: \", stringify!($e)))\n-        }\n-    })\n-}\n-\n pub mod at_exit_imp;\n #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n pub mod backtrace;\n@@ -101,6 +89,10 @@ pub fn at_exit<F: FnOnce() + Send + 'static>(f: F) -> Result<(), ()> {\n     if at_exit_imp::push(Box::new(f)) {Ok(())} else {Err(())}\n }\n \n+macro_rules! rtabort {\n+    ($($t:tt)*) => (::sys_common::util::abort(format_args!($($t)*)))\n+}\n+\n /// One-time runtime cleanup.\n pub fn cleanup() {\n     static CLEANUP: Once = Once::new();"}]}