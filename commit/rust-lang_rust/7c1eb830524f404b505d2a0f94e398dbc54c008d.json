{"sha": "7c1eb830524f404b505d2a0f94e398dbc54c008d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMWViODMwNTI0ZjQwNGI1MDVkMmEwZjk0ZTM5OGRiYzU0YzAwOGQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-07-30T21:58:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-08-08T22:17:28Z"}, "message": "rustpkg: Eliminate a copy", "tree": {"sha": "86e0dc866620e97c0b213df2503e03127e7a8484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e0dc866620e97c0b213df2503e03127e7a8484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1eb830524f404b505d2a0f94e398dbc54c008d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1eb830524f404b505d2a0f94e398dbc54c008d", "html_url": "https://github.com/rust-lang/rust/commit/7c1eb830524f404b505d2a0f94e398dbc54c008d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1eb830524f404b505d2a0f94e398dbc54c008d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0080f4e07891c89aa1f9851f8b0a3c754734fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0080f4e07891c89aa1f9851f8b0a3c754734fe8", "html_url": "https://github.com/rust-lang/rust/commit/a0080f4e07891c89aa1f9851f8b0a3c754734fe8"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "1c54b6304215fb8d746f3d1a9170892be4aa03b8", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c1eb830524f404b505d2a0f94e398dbc54c008d/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1eb830524f404b505d2a0f94e398dbc54c008d/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=7c1eb830524f404b505d2a0f94e398dbc54c008d", "patch": "@@ -163,7 +163,7 @@ pub fn first_pkgid_src_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<P\n pub fn built_executable_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<Path> {\n     let mut result = workspace.push(\"build\");\n     // should use a target-specific subdirectory\n-    result = mk_output_path(Main, Build, pkgid, &result);\n+    result = mk_output_path(Main, Build, pkgid, result);\n     debug!(\"built_executable_in_workspace: checking whether %s exists\",\n            result.to_str());\n     if os::path_exists(&result) {\n@@ -191,7 +191,7 @@ pub fn built_bench_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<Path>\n fn output_in_workspace(pkgid: &PkgId, workspace: &Path, what: OutputType) -> Option<Path> {\n     let mut result = workspace.push(\"build\");\n     // should use a target-specific subdirectory\n-    result = mk_output_path(what, Build, pkgid, &result);\n+    result = mk_output_path(what, Build, pkgid, result);\n     debug!(\"output_in_workspace: checking whether %s exists\",\n            result.to_str());\n     if os::path_exists(&result) {\n@@ -357,7 +357,7 @@ fn target_file_in_workspace(pkgid: &PkgId, workspace: &Path,\n             create the %s dir (pkgid=%s, workspace=%s, what=%?, where=%?\",\n             subdir, pkgid.to_str(), workspace.to_str(), what, where)));\n     }\n-    mk_output_path(what, where, pkgid, &result)\n+    mk_output_path(what, where, pkgid, result)\n }\n \n /// Return the directory for <pkgid>'s build artifacts in <workspace>.\n@@ -380,17 +380,14 @@ pub fn build_pkg_id_in_workspace(pkgid: &PkgId, workspace: &Path) -> Path {\n /// Return the output file for a given directory name,\n /// given whether we're building a library and whether we're building tests\n pub fn mk_output_path(what: OutputType, where: Target,\n-                      pkg_id: &PkgId, workspace: &Path) -> Path {\n+                      pkg_id: &PkgId, workspace: Path) -> Path {\n     let short_name_with_version = fmt!(\"%s-%s\", pkg_id.short_name,\n                                        pkg_id.version.to_str());\n     // Not local_path.dir_path()! For package foo/bar/blat/, we want\n     // the executable blat-0.5 to live under blat/\n     let dir = match where {\n         // If we're installing, it just goes under <workspace>...\n-        Install => {\n-            // bad copy, but I just couldn't make the borrow checker happy\n-            (*workspace).clone()\n-        }\n+        Install => workspace,\n         // and if we're just building, it goes in a package-specific subdir\n         Build => workspace.push_rel(&*pkg_id.local_path)\n     };"}]}