{"sha": "7b41fd215893c06110c7f650be47efed3910d90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNDFmZDIxNTg5M2MwNjExMGM3ZjY1MGJlNDdlZmVkMzkxMGQ5MGI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-05T22:06:40Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-05T22:50:47Z"}, "message": "Make some items in core::unicode private\n\nThey were reachable through opaque macros defined in `core`", "tree": {"sha": "1fad30842cbec0bf503a790cc7f33538fd9efd69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fad30842cbec0bf503a790cc7f33538fd9efd69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b41fd215893c06110c7f650be47efed3910d90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b41fd215893c06110c7f650be47efed3910d90b", "html_url": "https://github.com/rust-lang/rust/commit/7b41fd215893c06110c7f650be47efed3910d90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b41fd215893c06110c7f650be47efed3910d90b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae8bc2808bd3b5e125b72a44bfdcd24353e5211", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae8bc2808bd3b5e125b72a44bfdcd24353e5211", "html_url": "https://github.com/rust-lang/rust/commit/8ae8bc2808bd3b5e125b72a44bfdcd24353e5211"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "3fae3a46ada6b7c20be05f336bdb4d2b82745cb8", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b41fd215893c06110c7f650be47efed3910d90b/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b41fd215893c06110c7f650be47efed3910d90b/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=7b41fd215893c06110c7f650be47efed3910d90b", "patch": "@@ -14,8 +14,8 @@ pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n     micro: 0,\n     _priv: (),\n };\n-pub mod general_category {\n-    pub const Cc_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n+pub(crate) mod general_category {\n+    const Cc_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 0\n         ],\n@@ -28,7 +28,7 @@ pub mod general_category {\n         Cc_table.lookup(c)\n     }\n \n-    pub const N_table: &super::BoolTrie = &super::BoolTrie {\n+    const N_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x03ff000000000000, 0x0000000000000000, 0x720c000000000000, 0x0000000000000000,\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n@@ -141,8 +141,8 @@ pub mod general_category {\n \n }\n \n-pub mod derived_property {\n-    pub const Alphabetic_table: &super::BoolTrie = &super::BoolTrie {\n+pub(crate) mod derived_property {\n+    const Alphabetic_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n             0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n@@ -327,7 +327,7 @@ pub mod derived_property {\n         Alphabetic_table.lookup(c)\n     }\n \n-    pub const Case_Ignorable_table: &super::BoolTrie = &super::BoolTrie {\n+    const Case_Ignorable_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0400408000000000, 0x0000000140000000, 0x0190a10000000000, 0x0000000000000000,\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n@@ -464,7 +464,7 @@ pub mod derived_property {\n         Case_Ignorable_table.lookup(c)\n     }\n \n-    pub const Cased_table: &super::BoolTrie = &super::BoolTrie {\n+    const Cased_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n             0xffffffffffffffff, 0xffffffffffffffff, 0xf7ffffffffffffff, 0xfffffffffffffff0,\n@@ -565,7 +565,7 @@ pub mod derived_property {\n         Cased_table.lookup(c)\n     }\n \n-    pub const Grapheme_Extend_table: &super::BoolTrie = &super::BoolTrie {\n+    const Grapheme_Extend_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n@@ -689,7 +689,7 @@ pub mod derived_property {\n         Grapheme_Extend_table.lookup(c)\n     }\n \n-    pub const Lowercase_table: &super::BoolTrie = &super::BoolTrie {\n+    const Lowercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe00000000, 0x0420040000000000, 0xff7fffff80000000,\n             0x55aaaaaaaaaaaaaa, 0xd4aaaaaaaaaaab55, 0xe6512d2a4e243129, 0xaa29aaaab5555240,\n@@ -789,7 +789,7 @@ pub mod derived_property {\n         Lowercase_table.lookup(c)\n     }\n \n-    pub const Uppercase_table: &super::BoolTrie = &super::BoolTrie {\n+    const Uppercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000007fffffe, 0x0000000000000000, 0x000000007f7fffff,\n             0xaa55555555555555, 0x2b555555555554aa, 0x11aed2d5b1dbced6, 0x55d255554aaaa490,\n@@ -890,7 +890,7 @@ pub mod derived_property {\n         Uppercase_table.lookup(c)\n     }\n \n-    pub const XID_Continue_table: &super::BoolTrie = &super::BoolTrie {\n+    const XID_Continue_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x03ff000000000000, 0x07fffffe87fffffe, 0x04a0040000000000, 0xff7fffffff7fffff,\n             0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n@@ -1068,7 +1068,7 @@ pub mod derived_property {\n         XID_Continue_table.lookup(c)\n     }\n \n-    pub const XID_Start_table: &super::BoolTrie = &super::BoolTrie {\n+    const XID_Start_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n             0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n@@ -1250,8 +1250,8 @@ pub mod derived_property {\n \n }\n \n-pub mod property {\n-    pub const Pattern_White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n+pub(crate) mod property {\n+    const Pattern_White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n@@ -1268,7 +1268,7 @@ pub mod property {\n         Pattern_White_Space_table.lookup(c)\n     }\n \n-    pub const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n+    const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n@@ -1290,7 +1290,7 @@ pub mod property {\n \n }\n \n-pub mod conversions {\n+pub(crate) mod conversions {\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n             None        => [c, '\\0', '\\0'],"}, {"sha": "6de5d9e033b9309bd47e336cc6c4a162839ed55f", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b41fd215893c06110c7f650be47efed3910d90b/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/7b41fd215893c06110c7f650be47efed3910d90b/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=7b41fd215893c06110c7f650be47efed3910d90b", "patch": "@@ -606,7 +606,7 @@ def compute_trie(raw_data, chunk_size):\n     return root, child_data\n \n \n-def generate_bool_trie(name, codepoint_ranges, is_pub=True):\n+def generate_bool_trie(name, codepoint_ranges, is_pub=False):\n     # type: (str, List[Tuple[int, int]], bool) -> Iterator[str]\n     \"\"\"\n     Generate Rust code for BoolTrie struct.\n@@ -681,7 +681,7 @@ def generate_bool_trie(name, codepoint_ranges, is_pub=True):\n     yield \"    };\\n\\n\"\n \n \n-def generate_small_bool_trie(name, codepoint_ranges, is_pub=True):\n+def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n     # type: (str, List[Tuple[int, int]], bool) -> Iterator[str]\n     \"\"\"\n     Generate Rust code for `SmallBoolTrie` struct.\n@@ -726,7 +726,7 @@ def generate_property_module(mod, grouped_categories, category_subset):\n     Generate Rust code for module defining properties.\n     \"\"\"\n \n-    yield \"pub mod %s {\\n\" % mod\n+    yield \"pub(crate) mod %s {\\n\" % mod\n     for cat in sorted(category_subset):\n         if cat in (\"Cc\", \"White_Space\", \"Pattern_White_Space\"):\n             generator = generate_small_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n@@ -749,7 +749,7 @@ def generate_conversions_module(unicode_data):\n     Generate Rust code for module defining conversions.\n     \"\"\"\n \n-    yield \"pub mod conversions {\"\n+    yield \"pub(crate) mod conversions {\"\n     yield \"\"\"\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {"}]}