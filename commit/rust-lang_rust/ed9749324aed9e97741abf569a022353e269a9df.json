{"sha": "ed9749324aed9e97741abf569a022353e269a9df", "node_id": "C_kwDOAAsO6NoAKGVkOTc0OTMyNGFlZDllOTc3NDFhYmY1NjlhMDIyMzUzZTI2OWE5ZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T21:34:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T21:34:28Z"}, "message": "Auto merge of #105622 - matthiaskrgr:rollup-a6i81q7, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104405 (1.66.0 release notes)\n - #105561 (Normalize receiver substs and erase the regions)\n - #105593 (Fix typo in comment: length_limit)\n - #105597 (Correct typos in `core::sync::Exclusive::get_{pin_mut, mut}`)\n - #105614 (delete mentions of type ascription from lint descriptions)\n - #105615 (Fixup method doc that mentions removed param)\n - #105616 (Add a \"the\" to proc_macro documentation)\n - #105619 (rustdoc: remove no-op CSS `.source pre { overflow: auto }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d46ea92e62c30a1780d2999a1ff39a85042b6c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46ea92e62c30a1780d2999a1ff39a85042b6c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9749324aed9e97741abf569a022353e269a9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9749324aed9e97741abf569a022353e269a9df", "html_url": "https://github.com/rust-lang/rust/commit/ed9749324aed9e97741abf569a022353e269a9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9749324aed9e97741abf569a022353e269a9df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d7de337903a558dbeb1e82c844fe915ab8ff25", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "html_url": "https://github.com/rust-lang/rust/commit/37d7de337903a558dbeb1e82c844fe915ab8ff25"}, {"sha": "ab29c0459c8a10ff80219ddc3e80c79aec677809", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab29c0459c8a10ff80219ddc3e80c79aec677809", "html_url": "https://github.com/rust-lang/rust/commit/ab29c0459c8a10ff80219ddc3e80c79aec677809"}], "stats": {"total": 204, "additions": 180, "deletions": 24}, "files": [{"sha": "5b4d6ccd9b8b845b7f484e2d77dd835192a0793f", "filename": "RELEASES.md", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -1,3 +1,94 @@\n+Version 1.66.0 (2022-12-15)\n+==========================\n+\n+Language\n+--------\n+- [Permit specifying explicit discriminants on all `repr(Int)` enums](https://github.com/rust-lang/rust/pull/95710/)\n+  ```rust\n+  #[repr(u8)]\n+  enum Foo {\n+      A(u8) = 0,\n+      B(i8) = 1,\n+      C(bool) = 42,\n+  }\n+  ```\n+- [Allow transmutes between the same type differing only in lifetimes](https://github.com/rust-lang/rust/pull/101520/)\n+- [Change constant evaluation errors from a deny-by-default lint to a hard error](https://github.com/rust-lang/rust/pull/102091/)\n+- [Trigger `must_use` on `impl Trait` for supertraits](https://github.com/rust-lang/rust/pull/102287/)\n+  This makes `impl ExactSizeIterator` respect the existing `#[must_use]` annotation on `Iterator`.\n+- [Allow `..X` and `..=X` in patterns](https://github.com/rust-lang/rust/pull/102275/)\n+- [Uplift `clippy::for_loops_over_fallibles` lint into rustc](https://github.com/rust-lang/rust/pull/99696/)\n+- [Stabilize `sym` operands in inline assembly](https://github.com/rust-lang/rust/pull/103168/)\n+- [Update to Unicode 15](https://github.com/rust-lang/rust/pull/101912/)\n+- [Opaque types no longer imply lifetime bounds](https://github.com/rust-lang/rust/pull/95474/)\n+  This is a soundness fix which may break code that was erroneously relying on this behavior.\n+\n+Compiler\n+--------\n+- [Add armv5te-none-eabi and thumbv5te-none-eabi tier 3 targets](https://github.com/rust-lang/rust/pull/101329/)\n+  - Refer to Rust's [platform support page][platform-support-doc] for more\n+    information on Rust's tiered platform support.\n+- [Add support for linking against macOS universal libraries](https://github.com/rust-lang/rust/pull/98736)\n+\n+Libraries\n+---------\n+- [Fix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds](https://github.com/rust-lang/rust/pull/101040/)\n+- [Update to Unicode 15](https://github.com/rust-lang/rust/pull/101821/)\n+\n+Stabilized APIs\n+---------------\n+\n+- [`proc_macro::Span::source_text`](https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.source_text)\n+- [`uX::{checked_add_signed, overflowing_add_signed, saturating_add_signed, wrapping_add_signed}`](https://doc.rust-lang.org/stable/std/primitive.u8.html#method.checked_add_signed)\n+- [`iX::{checked_add_unsigned, overflowing_add_unsigned, saturating_add_unsigned, wrapping_add_unsigned}`](https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_add_unsigned)\n+- [`iX::{checked_sub_unsigned, overflowing_sub_unsigned, saturating_sub_unsigned, wrapping_sub_unsigned}`](https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_sub_unsigned)\n+- [`BTreeSet::{first, last, pop_first, pop_last}`](https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html#method.first)\n+- [`BTreeMap::{first_key_value, last_key_value, first_entry, last_entry, pop_first, pop_last}`](https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.first_key_value)\n+- [Add `AsFd` implementations for stdio lock types on WASI.](https://github.com/rust-lang/rust/pull/101768/)\n+- [`impl TryFrom<Vec<T>> for Box<[T; N]>`](https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#impl-TryFrom%3CVec%3CT%2C%20Global%3E%3E-for-Box%3C%5BT%3B%20N%5D%2C%20Global%3E)\n+- [`core::hint::black_box`](https://doc.rust-lang.org/stable/std/hint/fn.black_box.html)\n+- [`Duration::try_from_secs_{f32,f64}`](https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.try_from_secs_f32)\n+- [`Option::unzip`](https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unzip)\n+- [`std::os::fd`](https://doc.rust-lang.org/stable/std/os/fd/index.html)\n+\n+\n+Rustdoc\n+-------\n+\n+- [Add Rustdoc warning for invalid HTML tags in the documentation](https://github.com/rust-lang/rust/pull/101720/)\n+\n+Cargo\n+-----\n+\n+- [Added `cargo remove` to remove dependencies from Cargo.toml](https://doc.rust-lang.org/nightly/cargo/commands/cargo-remove.html)\n+- [`cargo publish` now waits for the new version to be downloadable before exiting](https://github.com/rust-lang/cargo/pull/11062)\n+\n+See [detailed release notes](https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-166-2022-12-15) for more.\n+\n+Compatibility Notes\n+-------------------\n+\n+- [Only apply `ProceduralMasquerade` hack to older versions of `rental`](https://github.com/rust-lang/rust/pull/94063/)\n+- [Don't export `__heap_base` and `__data_end` on wasm32-wasi.](https://github.com/rust-lang/rust/pull/102385/)\n+- [Don't export `__wasm_init_memory` on WebAssembly.](https://github.com/rust-lang/rust/pull/102426/)\n+- [Only export `__tls_*` on wasm32-unknown-unknown.](https://github.com/rust-lang/rust/pull/102440/)\n+- [Don't link to `libresolv` in libstd on Darwin](https://github.com/rust-lang/rust/pull/102766/)\n+- [Update libstd's libc to 0.2.135 (to make `libstd` no longer pull in `libiconv.dylib` on Darwin)](https://github.com/rust-lang/rust/pull/103277/)\n+- [Opaque types no longer imply lifetime bounds](https://github.com/rust-lang/rust/pull/95474/)\n+  This is a soundness fix which may break code that was erroneously relying on this behavior.\n+- [Make `order_dependent_trait_objects` show up in future-breakage reports](https://github.com/rust-lang/rust/pull/102635/)\n+- [Change std::process::Command spawning to default to inheriting the parent's signal mask](https://github.com/rust-lang/rust/pull/101077/)\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- [Enable BOLT for LLVM compilation](https://github.com/rust-lang/rust/pull/94381/)\n+- [Enable LTO for rustc_driver.so](https://github.com/rust-lang/rust/pull/101403/)\n+\n Version 1.65.0 (2022-11-03)\n ==========================\n "}, {"sha": "a3008e9e321c8b00736aa4a9636bae292dce5ba3", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -911,8 +911,7 @@ declare_lint! {\n \n declare_lint! {\n     /// The `trivial_casts` lint detects trivial casts which could be replaced\n-    /// with coercion, which may require [type ascription] or a temporary\n-    /// variable.\n+    /// with coercion, which may require a temporary variable.\n     ///\n     /// ### Example\n     ///\n@@ -934,12 +933,14 @@ declare_lint! {\n     /// with FFI interfaces or complex type aliases, where it triggers\n     /// incorrectly, or in situations where it will be more difficult to\n     /// clearly express the intent. It may be possible that this will become a\n-    /// warning in the future, possibly with [type ascription] providing a\n-    /// convenient way to work around the current issues. See [RFC 401] for\n-    /// historical context.\n-    ///\n-    /// [type ascription]: https://github.com/rust-lang/rust/issues/23416\n-    /// [RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+    /// warning in the future, possibly with an explicit syntax for coercions\n+    /// providing a convenient way to work around the current issues.\n+    /// See [RFC 401 (coercions)][rfc-401], [RFC 803 (type ascription)][rfc-803] and\n+    /// [RFC 3307 (remove type ascription)][rfc-3307] for historical context.\n+    ///\n+    /// [rfc-401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+    /// [rfc-803]: https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\n+    /// [rfc-3307]: https://github.com/rust-lang/rfcs/blob/master/text/3307-de-rfc-type-ascription.md\n     pub TRIVIAL_CASTS,\n     Allow,\n     \"detects trivial casts which could be removed\"\n@@ -967,12 +968,14 @@ declare_lint! {\n     /// with FFI interfaces or complex type aliases, where it triggers\n     /// incorrectly, or in situations where it will be more difficult to\n     /// clearly express the intent. It may be possible that this will become a\n-    /// warning in the future, possibly with [type ascription] providing a\n-    /// convenient way to work around the current issues. See [RFC 401] for\n-    /// historical context.\n-    ///\n-    /// [type ascription]: https://github.com/rust-lang/rust/issues/23416\n-    /// [RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+    /// warning in the future, possibly with an explicit syntax for coercions\n+    /// providing a convenient way to work around the current issues.\n+    /// See [RFC 401 (coercions)][rfc-401], [RFC 803 (type ascription)][rfc-803] and\n+    /// [RFC 3307 (remove type ascription)][rfc-3307] for historical context.\n+    ///\n+    /// [rfc-401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+    /// [rfc-803]: https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\n+    /// [rfc-3307]: https://github.com/rust-lang/rfcs/blob/master/text/3307-de-rfc-type-ascription.md\n     pub TRIVIAL_NUMERIC_CASTS,\n     Allow,\n     \"detects trivial casts of numeric types which could be removed\""}, {"sha": "f065c91a6b58b62e78e4c3c48b699f9fd7992220", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -1010,7 +1010,7 @@ fn foo(&self) -> Self::T { String::new() }\n         }\n         let mut short;\n         loop {\n-            // Look for the longest properly trimmed path that still fits in lenght_limit.\n+            // Look for the longest properly trimmed path that still fits in length_limit.\n             short = with_forced_trimmed_paths!(\n                 FmtPrinter::new_with_limit(\n                     self,"}, {"sha": "e9f327978aab1f0ac0617bafe6f3d85af4b31251", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -6,10 +6,8 @@ use rustc_middle::thir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the THIR `expr`.\n-    /// If the original expression was an AST statement,\n-    /// (e.g., `some().code(&here());`) then `opt_stmt_span` is the\n-    /// span of that statement (including its semicolon, if any).\n-    /// The scope is used if a statement temporary must be dropped.\n+    ///\n+    /// The `statement_scope` is used if a statement temporary must be dropped.\n     pub(crate) fn stmt_expr(\n         &mut self,\n         mut block: BasicBlock,"}, {"sha": "2da98d3342984bb7231514d46caeec899e442075", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -44,7 +44,13 @@ fn inner_resolve_instance<'tcx>(\n \n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n-        resolve_associated_item(tcx, def.did, param_env, trait_def_id, substs)\n+        resolve_associated_item(\n+            tcx,\n+            def.did,\n+            param_env,\n+            trait_def_id,\n+            tcx.normalize_erasing_regions(param_env, substs),\n+        )\n     } else {\n         let ty = tcx.type_of(def.def_id_for_type_of());\n         let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);"}, {"sha": "301ad41c96634407ff2c6e3791542f69a7743bab", "filename": "library/core/src/sync/exclusive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -138,7 +138,7 @@ impl<T: ?Sized> Exclusive<T> {\n         unsafe { Pin::new_unchecked(&mut self.get_unchecked_mut().inner) }\n     }\n \n-    /// Build a _mutable_ references to an `Exclusive<T>` from\n+    /// Build a _mutable_ reference to an `Exclusive<T>` from\n     /// a _mutable_ reference to a `T`. This allows you to skip\n     /// building an `Exclusive` with [`Exclusive::new`].\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n@@ -149,7 +149,7 @@ impl<T: ?Sized> Exclusive<T> {\n         unsafe { &mut *(r as *mut T as *mut Exclusive<T>) }\n     }\n \n-    /// Build a _pinned mutable_ references to an `Exclusive<T>` from\n+    /// Build a _pinned mutable_ reference to an `Exclusive<T>` from\n     /// a _pinned mutable_ reference to a `T`. This allows you to skip\n     /// building an `Exclusive` with [`Exclusive::new`].\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]"}, {"sha": "f0e4f5d8a8013d613098c4ecd0a2dfee921ac24a", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -1493,7 +1493,7 @@ pub mod tracked_env {\n     use std::ffi::OsStr;\n \n     /// Retrieve an environment variable and add it to build dependency info.\n-    /// Build system executing the compiler will know that the variable was accessed during\n+    /// The build system executing the compiler will know that the variable was accessed during\n     /// compilation, and will be able to rerun the build when the value of that variable changes.\n     /// Besides the dependency tracking this function should be equivalent to `env::var` from the\n     /// standard library, except that the argument must be UTF-8."}, {"sha": "d22d2f2edb038ba6c2d8b13322beccb039fe51bd", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -523,7 +523,6 @@ ul.block, .block li {\n }\n \n .source .content pre.rust {\n-\toverflow: auto;\n \tpadding-left: 0;\n }\n "}, {"sha": "dd14e05fd49b23177f5eb1a9ce0bda937315445f", "filename": "src/test/ui/associated-item/issue-105449.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ed9749324aed9e97741abf569a022353e269a9df/src%2Ftest%2Fui%2Fassociated-item%2Fissue-105449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9749324aed9e97741abf569a022353e269a9df/src%2Ftest%2Fui%2Fassociated-item%2Fissue-105449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-105449.rs?ref=ed9749324aed9e97741abf569a022353e269a9df", "patch": "@@ -0,0 +1,59 @@\n+// check-pass\n+// compile-flags: -C debug_assertions=yes -Zunstable-options\n+\n+#[allow(dead_code)]\n+fn problematic_function<Space>()\n+where\n+    DefaultAlloc: FinAllok<R1, Space>,\n+{\n+    let e = Edge2dElement;\n+    let _ = Into::<Point>::into(e.map_reference_coords());\n+}\n+impl<N> Allocator<N, R0> for DefaultAlloc {\n+    type Buffer = MStorage;\n+}\n+impl<N> Allocator<N, R1> for DefaultAlloc {\n+    type Buffer = MStorage;\n+}\n+impl<N, D> From<VectorN<N, D>> for Point\n+where\n+    DefaultAlloc: Allocator<N, D>,\n+{\n+    fn from(_: VectorN<N, D>) -> Self {\n+        unimplemented!()\n+    }\n+}\n+impl<GeometryDim, NodalDim> FinAllok<GeometryDim, NodalDim> for DefaultAlloc\n+where\n+    DefaultAlloc: Allocator<Ure, GeometryDim>,\n+    DefaultAlloc: Allocator<Ure, NodalDim>\n+{\n+}\n+impl FiniteElement<R1> for Edge2dElement {\n+    fn map_reference_coords(&self) -> VectorN<Ure, R1> {\n+        unimplemented!()\n+    }\n+}\n+type VectorN<N, R> = (N, R, <DefaultAlloc as Allocator<N, R>>::Buffer);\n+struct DefaultAlloc;\n+struct R0;\n+struct R1;\n+struct MStorage;\n+struct Point;\n+struct Edge2dElement;\n+struct Ure;\n+trait Allocator<N, R> {\n+    type Buffer;\n+}\n+trait FinAllok<GeometryDim, NodalDim>:\n+    Allocator<Ure, GeometryDim> +\n+    Allocator<Ure, NodalDim> +\n+{\n+}\n+trait FiniteElement<Rau>\n+where\n+    DefaultAlloc: FinAllok<Rau, Rau>,\n+{\n+    fn map_reference_coords(&self) -> VectorN<Ure, Rau>;\n+}\n+fn main() {}"}]}