{"sha": "fcb21999a7989792c9405a89e9c788ac143e0574", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYjIxOTk5YTc5ODk3OTJjOTQwNWE4OWU5Yzc4OGFjMTQzZTA1NzQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-21T02:31:44Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Report if the thing exists in another namespace", "tree": {"sha": "d1d736f01198f0f2bf11b3581c198f46b3c7dd3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d736f01198f0f2bf11b3581c198f46b3c7dd3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb21999a7989792c9405a89e9c788ac143e0574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb21999a7989792c9405a89e9c788ac143e0574", "html_url": "https://github.com/rust-lang/rust/commit/fcb21999a7989792c9405a89e9c788ac143e0574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb21999a7989792c9405a89e9c788ac143e0574/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ace4e75201d5bfc187bd40cf918cd2df6009419", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ace4e75201d5bfc187bd40cf918cd2df6009419", "html_url": "https://github.com/rust-lang/rust/commit/4ace4e75201d5bfc187bd40cf918cd2df6009419"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "50132577367196617bad3927040d68228a347897", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fcb21999a7989792c9405a89e9c788ac143e0574/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb21999a7989792c9405a89e9c788ac143e0574/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fcb21999a7989792c9405a89e9c788ac143e0574", "patch": "@@ -81,6 +81,7 @@ enum ResolutionFailure<'a> {\n }\n \n impl ResolutionFailure<'a> {\n+    // A partial or full resolution\n     fn res(&self) -> Option<Res> {\n         use ResolutionFailure::*;\n         match self {\n@@ -93,6 +94,14 @@ impl ResolutionFailure<'a> {\n             NotInScope(_) | NoParentItem | Dummy => None,\n         }\n     }\n+\n+    // This resolved fully (not just partially) but is erroneous for some other reason\n+    fn full_res(&self) -> Option<Res> {\n+        match self {\n+            Self::WrongNamespace(res, _) => Some(*res),\n+            _ => None,\n+        }\n+    }\n }\n \n enum AnchorFailure {\n@@ -128,6 +137,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     ) -> Result<(Res, Option<String>), ErrorKind<'path>> {\n         let cx = self.cx;\n \n+        debug!(\"looking for enum variant {}\", path_str);\n         let mut split = path_str.rsplitn(3, \"::\");\n         let variant_field_name = split\n             .next()\n@@ -260,7 +270,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, result, ns);\n             let result = match result {\n                 Ok((_, Res::Err)) => Err(()),\n-                _ => result.map_err(|_| ()),\n+                x => x,\n             };\n \n             if let Ok((_, res)) = result {\n@@ -419,6 +429,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             Ok((ty_res, Some(format!(\"{}.{}\", out, item_name))))\n                         })\n                     } else if ns == Namespace::ValueNS {\n+                        debug!(\"looking for variants or fields named {} for {:?}\", item_name, did);\n                         match cx.tcx.type_of(did).kind() {\n                             ty::Adt(def, _) => {\n                                 let field = if def.is_enum() {\n@@ -838,12 +849,36 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     }\n                 }\n \n+                // used for reporting better errors\n+                let check_full_res = |this: &mut Self, ns| {\n+                    match this.resolve(path_str, ns, &current_item, base_node, &extra_fragment) {\n+                        Ok(res) => {\n+                            debug!(\n+                                \"check_full_res: saw res for {} in {:?} ns: {:?}\",\n+                                path_str, ns, res.0\n+                            );\n+                            Some(res.0)\n+                        }\n+                        Err(ErrorKind::Resolve(kind)) => kind.full_res(),\n+                        // TODO: add `Res` to AnchorFailure\n+                        Err(ErrorKind::AnchorFailure(_)) => None,\n+                    }\n+                };\n+\n                 match disambiguator.map(Disambiguator::ns) {\n                     Some(ns @ (ValueNS | TypeNS)) => {\n                         match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n                         {\n                             Ok(res) => res,\n-                            Err(ErrorKind::Resolve(kind)) => {\n+                            Err(ErrorKind::Resolve(mut kind)) => {\n+                                // We only looked in one namespace. Try to give a better error if possible.\n+                                // TODO: handle MacroNS too\n+                                if kind.full_res().is_none() {\n+                                    let other_ns = if ns == ValueNS { TypeNS } else { ValueNS };\n+                                    if let Some(res) = check_full_res(self, other_ns) {\n+                                        kind = ResolutionFailure::WrongNamespace(res, other_ns);\n+                                    }\n+                                }\n                                 resolution_failure(\n                                     cx,\n                                     &item,\n@@ -965,30 +1000,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             Ok(res) => (res, extra_fragment),\n                             Err(mut kind) => {\n                                 // `macro_resolve` only looks in the macro namespace. Try to give a better error if possible.\n+                                //if kind.res().is_none() {\n                                 for &ns in &[TypeNS, ValueNS] {\n-                                    match self.resolve(\n-                                        path_str,\n-                                        ns,\n-                                        &current_item,\n-                                        base_node,\n-                                        &extra_fragment,\n-                                    ) {\n-                                        Ok(res) => {\n-                                            kind = ResolutionFailure::WrongNamespace(res.0, MacroNS)\n-                                        }\n-                                        // This will show up in the other namespace, no need to handle it here\n-                                        Err(ErrorKind::Resolve(\n-                                            ResolutionFailure::WrongNamespace(..),\n-                                        )) => {}\n-                                        Err(ErrorKind::AnchorFailure(_)) => {}\n-                                        Err(ErrorKind::Resolve(inner_kind)) => {\n-                                            if let Some(res) = inner_kind.res() {\n-                                                kind =\n-                                                    ResolutionFailure::WrongNamespace(res, MacroNS);\n-                                            }\n-                                        }\n+                                    if let Some(res) = check_full_res(self, ns) {\n+                                        kind = ResolutionFailure::WrongNamespace(res, MacroNS);\n+                                        break;\n                                     }\n                                 }\n+                                //}\n                                 resolution_failure(\n                                     cx,\n                                     &item,"}, {"sha": "99d080fb324e319a9cb72ba2bc0df3ec0c1d4613", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcb21999a7989792c9405a89e9c788ac143e0574/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb21999a7989792c9405a89e9c788ac143e0574/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=fcb21999a7989792c9405a89e9c788ac143e0574", "patch": "@@ -54,6 +54,7 @@ impl S {\n }\n \n /// [type@T::g]\n+/// [T::h!]\n pub trait T {\n     fn g() {}\n }"}]}