{"sha": "cb527bff09e057ff6eeefe893c44e19b9d29a920", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTI3YmZmMDllMDU3ZmY2ZWVlZmU4OTNjNDRlMTliOWQyOWE5MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T01:36:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T01:36:45Z"}, "message": "auto merge of #6105 : Aatch/rust/linker-improv, r=pcwalton\n\nAdds two extra flags: `--linker` which takes extra flags to pass to the linker, can be used multiple times and `--print-link-args` which prints out linker arguments. Currently `--print-link-args` needs execution to get past translation to get the `LinkMeta` data.\r\n\r\nI haven't done tests or updated any extra documentation yet, so this pull request is currently here for review.", "tree": {"sha": "b71d2187c10ccd2e14be0f19a48936b00a35ee64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71d2187c10ccd2e14be0f19a48936b00a35ee64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb527bff09e057ff6eeefe893c44e19b9d29a920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb527bff09e057ff6eeefe893c44e19b9d29a920", "html_url": "https://github.com/rust-lang/rust/commit/cb527bff09e057ff6eeefe893c44e19b9d29a920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb527bff09e057ff6eeefe893c44e19b9d29a920/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a857673ff76c966ceb061e3794b119e2e498c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a857673ff76c966ceb061e3794b119e2e498c40", "html_url": "https://github.com/rust-lang/rust/commit/7a857673ff76c966ceb061e3794b119e2e498c40"}, {"sha": "2deefbe847e68c8fa749ae59d7e84e1a80eba452", "url": "https://api.github.com/repos/rust-lang/rust/commits/2deefbe847e68c8fa749ae59d7e84e1a80eba452", "html_url": "https://github.com/rust-lang/rust/commit/2deefbe847e68c8fa749ae59d7e84e1a80eba452"}], "stats": {"total": 302, "additions": 171, "deletions": 131}, "files": [{"sha": "adaffe5873dabc1de9466e600364fdb0b6d68fc9", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 98, "deletions": 77, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=cb527bff09e057ff6eeefe893c44e19b9d29a920", "patch": "@@ -747,6 +747,71 @@ pub fn link_binary(sess: Session,\n                    obj_filename: &Path,\n                    out_filename: &Path,\n                    lm: LinkMeta) {\n+    // In the future, FreeBSD will use clang as default compiler.\n+    // It would be flexible to use cc (system's default C compiler)\n+    // instead of hard-coded gcc.\n+    // For win32, there is no cc command,\n+    // so we add a condition to make it use gcc.\n+    let cc_prog: ~str = if sess.targ_cfg.os == session::os_android {\n+        match &sess.opts.android_cross_path {\n+            &Some(copy path) => {\n+                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", path)\n+            }\n+            &None => {\n+                sess.fatal(~\"need Android NDK path for linking \\\n+                             (--android-cross-path)\")\n+            }\n+        }\n+    } else if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" }\n+    else { ~\"cc\" };\n+    // The invocations of cc share some flags across platforms\n+\n+\n+    let output = if *sess.building_library {\n+        let long_libname = output_dll_filename(sess.targ_cfg.os, lm);\n+        debug!(\"link_meta.name:  %s\", lm.name);\n+        debug!(\"long_libname: %s\", long_libname);\n+        debug!(\"out_filename: %s\", out_filename.to_str());\n+        debug!(\"dirname(out_filename): %s\", out_filename.dir_path().to_str());\n+\n+        out_filename.dir_path().push(long_libname)\n+    } else {\n+        /*bad*/copy *out_filename\n+    };\n+\n+    debug!(\"output: %s\", output.to_str());\n+    let mut cc_args = link_args(sess, obj_filename, out_filename, lm);\n+    debug!(\"%s link args: %s\", cc_prog, str::connect(cc_args, ~\" \"));\n+    // We run 'cc' here\n+    let prog = run::program_output(cc_prog, cc_args);\n+    if 0 != prog.status {\n+        sess.err(fmt!(\"linking with `%s` failed with code %d\",\n+                      cc_prog, prog.status));\n+        sess.note(fmt!(\"%s arguments: %s\",\n+                       cc_prog, str::connect(cc_args, ~\" \")));\n+        sess.note(prog.err + prog.out);\n+        sess.abort_if_errors();\n+    }\n+\n+    // Clean up on Darwin\n+    if sess.targ_cfg.os == session::os_macos {\n+        run::run_program(~\"dsymutil\", ~[output.to_str()]);\n+    }\n+\n+    // Remove the temporary object file if we aren't saving temps\n+    if !sess.opts.save_temps {\n+        if ! os::remove_file(obj_filename) {\n+            sess.warn(fmt!(\"failed to delete object file `%s`\",\n+                           obj_filename.to_str()));\n+        }\n+    }\n+}\n+\n+pub fn link_args(sess: Session,\n+                 obj_filename: &Path,\n+                 out_filename: &Path,\n+                 lm:LinkMeta) -> ~[~str] {\n+\n     // Converts a library file-stem into a cc -l argument\n     fn unlib(config: @session::config, stem: ~str) -> ~str {\n         if stem.starts_with(\"lib\") &&\n@@ -757,48 +822,23 @@ pub fn link_binary(sess: Session,\n         }\n     }\n \n+\n     let output = if *sess.building_library {\n         let long_libname = output_dll_filename(sess.targ_cfg.os, lm);\n-        debug!(\"link_meta.name:  %s\", lm.name);\n-        debug!(\"long_libname: %s\", long_libname);\n-        debug!(\"out_filename: %s\", out_filename.to_str());\n-        debug!(\"dirname(out_filename): %s\", out_filename.dir_path().to_str());\n-\n         out_filename.dir_path().push(long_libname)\n     } else {\n         /*bad*/copy *out_filename\n     };\n \n-    debug!(\"output: %s\", output.to_str());\n-\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let stage: ~str = ~\"-L\" + sess.filesearch.get_target_lib_path().to_str();\n \n-    // In the future, FreeBSD will use clang as default compiler.\n-    // It would be flexible to use cc (system's default C compiler)\n-    // instead of hard-coded gcc.\n-    // For win32, there is no cc command,\n-    // so we add a condition to make it use gcc.\n-    let cc_prog: ~str = if sess.targ_cfg.os == session::os_android {\n-        match &sess.opts.android_cross_path {\n-            &Some(copy path) => {\n-                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", path)\n-            }\n-            &None => {\n-                sess.fatal(~\"need Android NDK path for linking \\\n-                             (--android-cross-path)\")\n-            }\n-        }\n-    } else if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" }\n-    else { ~\"cc\" };\n-    // The invocations of cc share some flags across platforms\n+    let mut args = vec::append(~[stage], sess.targ_cfg.target_strs.cc_args);\n \n-    let mut cc_args =\n-        vec::append(~[stage], sess.targ_cfg.target_strs.cc_args);\n-    cc_args.push(~\"-o\");\n-    cc_args.push(output.to_str());\n-    cc_args.push(obj_filename.to_str());\n+    args.push(~\"-o\");\n+    args.push(output.to_str());\n+    args.push(obj_filename.to_str());\n \n     let lib_cmd;\n     let os = sess.targ_cfg.os;\n@@ -813,23 +853,23 @@ pub fn link_binary(sess: Session,\n     let cstore = sess.cstore;\n     for cstore::get_used_crate_files(cstore).each |cratepath| {\n         if cratepath.filetype() == Some(~\".rlib\") {\n-            cc_args.push(cratepath.to_str());\n+            args.push(cratepath.to_str());\n             loop;\n         }\n         let dir = cratepath.dirname();\n-        if dir != ~\"\" { cc_args.push(~\"-L\" + dir); }\n+        if dir != ~\"\" { args.push(~\"-L\" + dir); }\n         let libarg = unlib(sess.targ_cfg, cratepath.filestem().get());\n-        cc_args.push(~\"-l\" + libarg);\n+        args.push(~\"-l\" + libarg);\n     }\n \n     let ula = cstore::get_used_link_args(cstore);\n-    for ula.each |arg| { cc_args.push(/*bad*/copy *arg); }\n+    for ula.each |arg| { args.push(/*bad*/copy *arg); }\n \n     // Add all the link args for external crates.\n     do cstore::iter_crate_data(cstore) |crate_num, _| {\n         let link_args = csearch::get_link_args_for_crate(cstore, crate_num);\n         do vec::consume(link_args) |_, link_arg| {\n-            cc_args.push(link_arg);\n+            args.push(link_arg);\n         }\n     }\n \n@@ -842,93 +882,74 @@ pub fn link_binary(sess: Session,\n     // forces to make sure that library can be found at runtime.\n \n     for sess.opts.addl_lib_search_paths.each |path| {\n-        cc_args.push(~\"-L\" + path.to_str());\n+        args.push(~\"-L\" + path.to_str());\n     }\n \n     // The names of the extern libraries\n     let used_libs = cstore::get_used_libraries(cstore);\n-    for used_libs.each |l| { cc_args.push(~\"-l\" + *l); }\n+    for used_libs.each |l| { args.push(~\"-l\" + *l); }\n \n     if *sess.building_library {\n-        cc_args.push(lib_cmd);\n+        args.push(lib_cmd);\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n         if sess.targ_cfg.os == session::os_macos {\n-            cc_args.push(~\"-Wl,-install_name,@rpath/\"\n+            args.push(~\"-Wl,-install_name,@rpath/\"\n                       + output.filename().get());\n         }\n     }\n \n     // On linux librt and libdl are an indirect dependencies via rustrt,\n     // and binutils 2.22+ won't add them automatically\n     if sess.targ_cfg.os == session::os_linux {\n-        cc_args.push_all(~[~\"-lrt\", ~\"-ldl\"]);\n+        args.push_all(~[~\"-lrt\", ~\"-ldl\"]);\n \n         // LLVM implements the `frem` instruction as a call to `fmod`,\n         // which lives in libm. Similar to above, on some linuxes we\n         // have to be explicit about linking to it. See #2510\n-        cc_args.push(~\"-lm\");\n+        args.push(~\"-lm\");\n     }\n     else if sess.targ_cfg.os == session::os_android {\n-        cc_args.push_all(~[~\"-ldl\", ~\"-llog\",  ~\"-lsupc++\",\n+        args.push_all(~[~\"-ldl\", ~\"-llog\",  ~\"-lsupc++\",\n                            ~\"-lgnustl_shared\"]);\n-        cc_args.push(~\"-lm\");\n+        args.push(~\"-lm\");\n     }\n \n     if sess.targ_cfg.os == session::os_freebsd {\n-        cc_args.push_all(~[~\"-pthread\", ~\"-lrt\",\n-                                ~\"-L/usr/local/lib\", ~\"-lexecinfo\",\n-                                ~\"-L/usr/local/lib/gcc46\",\n-                                ~\"-L/usr/local/lib/gcc44\", ~\"-lstdc++\",\n-                                ~\"-Wl,-z,origin\",\n-                                ~\"-Wl,-rpath,/usr/local/lib/gcc46\",\n-                                ~\"-Wl,-rpath,/usr/local/lib/gcc44\"]);\n+        args.push_all(~[~\"-pthread\", ~\"-lrt\",\n+                        ~\"-L/usr/local/lib\", ~\"-lexecinfo\",\n+                        ~\"-L/usr/local/lib/gcc46\",\n+                        ~\"-L/usr/local/lib/gcc44\", ~\"-lstdc++\",\n+                        ~\"-Wl,-z,origin\",\n+                        ~\"-Wl,-rpath,/usr/local/lib/gcc46\",\n+                        ~\"-Wl,-rpath,/usr/local/lib/gcc44\"]);\n     }\n \n     // OS X 10.6 introduced 'compact unwind info', which is produced by the\n     // linker from the dwarf unwind info. Unfortunately, it does not seem to\n     // understand how to unwind our __morestack frame, so we have to turn it\n     // off. This has impacted some other projects like GHC.\n     if sess.targ_cfg.os == session::os_macos {\n-        cc_args.push(~\"-Wl,-no_compact_unwind\");\n+        args.push(~\"-Wl,-no_compact_unwind\");\n     }\n \n     // Stack growth requires statically linking a __morestack function\n-    cc_args.push(~\"-lmorestack\");\n+    args.push(~\"-lmorestack\");\n \n     // Always want the runtime linked in\n-    cc_args.push(~\"-lrustrt\");\n+    args.push(~\"-lrustrt\");\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to where\n     // extern libraries might live, based on the addl_lib_search_paths\n-    cc_args.push_all(rpath::get_rpath_flags(sess, &output));\n+    args.push_all(rpath::get_rpath_flags(sess, &output));\n \n-    debug!(\"%s link args: %s\", cc_prog, str::connect(cc_args, ~\" \"));\n-    // We run 'cc' here\n-    let prog = run::program_output(cc_prog, cc_args);\n-    if 0 != prog.status {\n-        sess.err(fmt!(\"linking with `%s` failed with code %d\",\n-                      cc_prog, prog.status));\n-        sess.note(fmt!(\"%s arguments: %s\",\n-                       cc_prog, str::connect(cc_args, ~\" \")));\n-        sess.note(prog.err + prog.out);\n-        sess.abort_if_errors();\n-    }\n+    // Finally add all the linker arguments provided on the command line\n+    args.push_all(sess.opts.linker_args);\n \n-    // Clean up on Darwin\n-    if sess.targ_cfg.os == session::os_macos {\n-        run::run_program(~\"dsymutil\", ~[output.to_str()]);\n-    }\n-\n-    // Remove the temporary object file if we aren't saving temps\n-    if !sess.opts.save_temps {\n-        if ! os::remove_file(obj_filename) {\n-            sess.warn(fmt!(\"failed to delete object file `%s`\",\n-                           obj_filename.to_str()));\n-        }\n-    }\n+    return args;\n }\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "8c053c265fa212500d2e4ecd69692bb77e260fe3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 69, "deletions": 54, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=cb527bff09e057ff6eeefe893c44e19b9d29a920", "patch": "@@ -234,7 +234,6 @@ pub fn compile_rest(sess: Session,\n     let rp_set = time(time_passes, ~\"region parameterization inference\", ||\n         middle::region::determine_rp_in_crate(sess, ast_map, def_map, crate));\n \n-\n     let outputs = outputs.get();\n \n     let (llmod, link_meta) = {\n@@ -309,6 +308,11 @@ pub fn compile_rest(sess: Session,\n \n     };\n \n+    if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n+        io::println(str::connect(link::link_args(sess,\n+            &outputs.obj_filename, &outputs.out_filename, link_meta), \" \"));\n+    }\n+\n     // NB: Android hack\n     if sess.targ_cfg.arch == abi::Arm &&\n             (sess.opts.output_type == link::output_type_object ||\n@@ -645,13 +649,21 @@ pub fn build_session_options(binary: @~str,\n         Some(s) => s\n     };\n \n-    let addl_lib_search_paths =\n-        getopts::opt_strs(matches, ~\"L\")\n-        .map(|s| Path(*s));\n+    let addl_lib_search_paths = getopts::opt_strs(matches, ~\"L\").map(|s| Path(*s));\n+\n+    let linker_args = getopts::opt_strs(matches, ~\"link-args\").flat_map( |a| {\n+        let mut args = ~[];\n+        for str::each_split_char(*a, ',') |arg| {\n+            args.push(str::from_slice(arg));\n+        }\n+        args\n+    });\n+\n     let cfg = parse_cfgspecs(getopts::opt_strs(matches, ~\"cfg\"), demitter);\n     let test = opt_present(matches, ~\"test\");\n     let android_cross_path = getopts::opt_maybe_str(\n         matches, ~\"android-cross-path\");\n+\n     let sopts = @session::options {\n         crate_type: crate_type,\n         is_static: static,\n@@ -664,6 +676,7 @@ pub fn build_session_options(binary: @~str,\n         jit: jit,\n         output_type: output_type,\n         addl_lib_search_paths: addl_lib_search_paths,\n+        linker_args: linker_args,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n         target_feature: target_feature,\n@@ -737,62 +750,64 @@ pub fn parse_pretty(sess: Session, name: &str) -> pp_mode {\n // rustc command line options\n pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n  ~[\n-  optflag(~\"\",  ~\"bin\", ~\"Compile an executable crate (default)\"),\n-  optflag(~\"c\", ~\"\",    ~\"Compile and assemble, but do not link\"),\n-  optmulti(~\"\", ~\"cfg\", ~\"Configure the compilation\n-                          environment\", ~\"SPEC\"),\n-  optflag(~\"\",  ~\"emit-llvm\",\n-                        ~\"Produce an LLVM bitcode file\"),\n-  optflag(~\"h\", ~\"help\",~\"Display this message\"),\n-  optmulti(~\"L\", ~\"\",   ~\"Add a directory to the library search path\",\n-                              ~\"PATH\"),\n-  optflag(~\"\",  ~\"lib\", ~\"Compile a library crate\"),\n-  optflag(~\"\",  ~\"ls\",  ~\"List the symbols defined by a library crate\"),\n-  optflag(~\"\", ~\"no-trans\",\n-                        ~\"Run all passes except translation; no output\"),\n-  optflag(~\"O\", ~\"\",    ~\"Equivalent to --opt-level=2\"),\n-  optopt(~\"o\", ~\"\",     ~\"Write output to <filename>\", ~\"FILENAME\"),\n-  optopt(~\"\", ~\"opt-level\",\n-                        ~\"Optimize with possible levels 0-3\", ~\"LEVEL\"),\n-  optopt( ~\"\",  ~\"out-dir\",\n-                        ~\"Write output to compiler-chosen filename\n-                          in <dir>\", ~\"DIR\"),\n-  optflag(~\"\", ~\"parse-only\",\n-                        ~\"Parse only; do not compile, assemble, or link\"),\n-  optflagopt(~\"\", ~\"pretty\",\n-                        ~\"Pretty-print the input instead of compiling;\n+  optflag(\"\",  \"bin\", \"Compile an executable crate (default)\"),\n+  optflag(\"c\", \"\",    \"Compile and assemble, but do not link\"),\n+  optmulti(\"\", \"cfg\", \"Configure the compilation\n+                          environment\", \"SPEC\"),\n+  optflag(\"\",  \"emit-llvm\",\n+                        \"Produce an LLVM bitcode file\"),\n+  optflag(\"h\", \"help\",\"Display this message\"),\n+  optmulti(\"L\", \"\",   \"Add a directory to the library search path\",\n+                              \"PATH\"),\n+  optflag(\"\",  \"lib\", \"Compile a library crate\"),\n+  optmulti(\"\",  \"link-args\", \"FLAGS is a comma-separated list of flags\n+                            passed to the linker\", \"FLAGS\"),\n+  optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n+  optflag(\"\", \"no-trans\",\n+                        \"Run all passes except translation; no output\"),\n+  optflag(\"O\", \"\",    \"Equivalent to --opt-level=2\"),\n+  optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n+  optopt(\"\", \"opt-level\",\n+                        \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+  optopt( \"\",  \"out-dir\",\n+                        \"Write output to compiler-chosen filename\n+                          in <dir>\", \"DIR\"),\n+  optflag(\"\", \"parse-only\",\n+                        \"Parse only; do not compile, assemble, or link\"),\n+  optflagopt(\"\", \"pretty\",\n+                        \"Pretty-print the input instead of compiling;\n                           valid types are: normal (un-annotated source),\n                           expanded (crates expanded),\n                           typed (crates expanded, with type annotations),\n                           or identified (fully parenthesized,\n-                          AST nodes and blocks with IDs)\", ~\"TYPE\"),\n-  optflag(~\"S\", ~\"\",    ~\"Compile only; do not assemble or link\"),\n-  optflag(~\"\", ~\"save-temps\",\n-                        ~\"Write intermediate files (.bc, .opt.bc, .o)\n+                          AST nodes and blocks with IDs)\", \"TYPE\"),\n+  optflag(\"S\", \"\",    \"Compile only; do not assemble or link\"),\n+  optflag(\"\", \"save-temps\",\n+                        \"Write intermediate files (.bc, .opt.bc, .o)\n                           in addition to normal output\"),\n-  optopt(~\"\", ~\"sysroot\",\n-                        ~\"Override the system root\", ~\"PATH\"),\n-  optflag(~\"\", ~\"test\", ~\"Build a test harness\"),\n-  optopt(~\"\", ~\"target\",\n-                        ~\"Target triple cpu-manufacturer-kernel[-os]\n+  optopt(\"\", \"sysroot\",\n+                        \"Override the system root\", \"PATH\"),\n+  optflag(\"\", \"test\", \"Build a test harness\"),\n+  optopt(\"\", \"target\",\n+                        \"Target triple cpu-manufacturer-kernel[-os]\n                           to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                          for detail)\", ~\"TRIPLE\"),\n-  optopt(~\"\", ~\"target-feature\",\n-                        ~\"Target specific attributes (llc -mattr=help\n-                          for detail)\", ~\"FEATURE\"),\n-  optopt(~\"\", ~\"android-cross-path\",\n-         ~\"The path to the Android NDK\", \"PATH\"),\n-  optmulti(~\"W\", ~\"warn\",\n-                        ~\"Set lint warnings\", ~\"OPT\"),\n-  optmulti(~\"A\", ~\"allow\",\n-                        ~\"Set lint allowed\", ~\"OPT\"),\n-  optmulti(~\"D\", ~\"deny\",\n-                        ~\"Set lint denied\", ~\"OPT\"),\n-  optmulti(~\"F\", ~\"forbid\",\n-                        ~\"Set lint forbidden\", ~\"OPT\"),\n-  optmulti(~\"Z\", ~\"\",   ~\"Set internal debugging options\", \"FLAG\"),\n-  optflag( ~\"v\", ~\"version\",\n-                        ~\"Print version info and exit\"),\n+                          for detail)\", \"TRIPLE\"),\n+  optopt(\"\", \"target-feature\",\n+                        \"Target specific attributes (llc -mattr=help\n+                          for detail)\", \"FEATURE\"),\n+  optopt(\"\", \"android-cross-path\",\n+         \"The path to the Android NDK\", \"PATH\"),\n+  optmulti(\"W\", \"warn\",\n+                        \"Set lint warnings\", \"OPT\"),\n+  optmulti(\"A\", \"allow\",\n+                        \"Set lint allowed\", \"OPT\"),\n+  optmulti(\"D\", \"deny\",\n+                        \"Set lint denied\", \"OPT\"),\n+  optmulti(\"F\", \"forbid\",\n+                        \"Set lint forbidden\", \"OPT\"),\n+  optmulti(\"Z\", \"\",   \"Set internal debugging options\", \"FLAG\"),\n+  optflag( \"v\", \"version\",\n+                        \"Print version info and exit\"),\n  ]\n }\n "}, {"sha": "ff623049f758d0cf501a7e885c03c69391ba3256", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb527bff09e057ff6eeefe893c44e19b9d29a920/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=cb527bff09e057ff6eeefe893c44e19b9d29a920", "patch": "@@ -63,6 +63,7 @@ pub static jit: uint = 1 << 19;\n pub static debug_info: uint = 1 << 20;\n pub static extra_debug_info: uint = 1 << 21;\n pub static static: uint = 1 << 22;\n+pub static print_link_args: uint = 1 << 23;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -90,6 +91,7 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"no-opt\", ~\"do not optimize, even if -O is passed\", no_opt),\n      (~\"no-monomorphic-collapse\", ~\"do not collapse template instantiations\",\n       no_monomorphic_collapse),\n+     (~\"print-link-args\", ~\"Print the arguments passed to the linker\", print_link_args),\n      (~\"gc\", ~\"Garbage collect shared data (experimental)\", gc),\n      (~\"jit\", ~\"Execute using JIT (experimental)\", jit),\n      (~\"extra-debug-info\", ~\"Extra debugging info (experimental)\",\n@@ -122,6 +124,7 @@ pub struct options {\n     jit: bool,\n     output_type: back::link::output_type,\n     addl_lib_search_paths: ~[Path],\n+    linker_args: ~[~str],\n     maybe_sysroot: Option<Path>,\n     target_triple: ~str,\n     target_feature: ~str,\n@@ -299,6 +302,7 @@ pub fn basic_options() -> @options {\n         jit: false,\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: ~[],\n+        linker_args:~[],\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n         target_feature: ~\"\","}]}