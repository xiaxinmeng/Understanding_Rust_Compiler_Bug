{"sha": "8818b00b634ee48e7617d9beb48c4d7bc6967f06", "node_id": "C_kwDOAAsO6NoAKDg4MThiMDBiNjM0ZWU0OGU3NjE3ZDliZWI0OGM0ZDdiYzY5NjdmMDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T23:09:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T23:09:35Z"}, "message": "Auto merge of #99963 - cjgillot:iter-submodule, r=compiler-errors\n\nSimplify implementation for par_for_each_module", "tree": {"sha": "5cf0dcd667c5132edda51ef3ace7e43a97d81083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf0dcd667c5132edda51ef3ace7e43a97d81083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8818b00b634ee48e7617d9beb48c4d7bc6967f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8818b00b634ee48e7617d9beb48c4d7bc6967f06", "html_url": "https://github.com/rust-lang/rust/commit/8818b00b634ee48e7617d9beb48c4d7bc6967f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8818b00b634ee48e7617d9beb48c4d7bc6967f06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015a824f2dffe32707fceb59c47effaf7b73486c", "url": "https://api.github.com/repos/rust-lang/rust/commits/015a824f2dffe32707fceb59c47effaf7b73486c", "html_url": "https://github.com/rust-lang/rust/commit/015a824f2dffe32707fceb59c47effaf7b73486c"}, {"sha": "4c5ec30342fdf15d939d714f6292fd307994d535", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5ec30342fdf15d939d714f6292fd307994d535", "html_url": "https://github.com/rust-lang/rust/commit/4c5ec30342fdf15d939d714f6292fd307994d535"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "85642bf82ccc9186416ede8f0826102b26576df7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8818b00b634ee48e7617d9beb48c4d7bc6967f06/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8818b00b634ee48e7617d9beb48c4d7bc6967f06/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=8818b00b634ee48e7617d9beb48c4d7bc6967f06", "patch": "@@ -146,25 +146,30 @@ impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n }\n \n impl<'hir> Map<'hir> {\n+    #[inline]\n     pub fn krate(self) -> &'hir Crate<'hir> {\n         self.tcx.hir_crate(())\n     }\n \n+    #[inline]\n     pub fn root_module(self) -> &'hir Mod<'hir> {\n         match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {\n             Some(OwnerNode::Crate(item)) => item,\n             _ => bug!(),\n         }\n     }\n \n+    #[inline]\n     pub fn items(self) -> impl Iterator<Item = ItemId> + 'hir {\n         self.tcx.hir_crate_items(()).items.iter().copied()\n     }\n \n+    #[inline]\n     pub fn module_items(self, module: LocalDefId) -> impl Iterator<Item = ItemId> + 'hir {\n         self.tcx.hir_module_items(module).items()\n     }\n \n+    #[inline]\n     pub fn par_for_each_item(self, f: impl Fn(ItemId) + Sync + Send) {\n         par_for_each_in(&self.tcx.hir_crate_items(()).items[..], |id| f(*id));\n     }\n@@ -489,11 +494,13 @@ impl<'hir> Map<'hir> {\n     /// Returns an iterator of the `DefId`s for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n+    #[inline]\n     pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {\n         self.tcx.hir_crate_items(()).body_owners.iter().copied()\n     }\n \n-    pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n+    #[inline]\n+    pub fn par_body_owners(self, f: impl Fn(LocalDefId) + Sync + Send) {\n         par_for_each_in(&self.tcx.hir_crate_items(()).body_owners[..], |&def_id| f(def_id));\n     }\n \n@@ -626,35 +633,22 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    #[cfg(not(parallel_compiler))]\n     #[inline]\n-    pub fn par_for_each_module(self, f: impl Fn(LocalDefId)) {\n-        self.for_each_module(f)\n-    }\n-\n-    #[cfg(parallel_compiler)]\n-    pub fn par_for_each_module(self, f: impl Fn(LocalDefId) + Sync) {\n-        use rustc_data_structures::sync::{par_iter, ParallelIterator};\n-        par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);\n-\n-        fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)\n-        where\n-            F: Fn(LocalDefId) + Sync,\n-        {\n-            (*f)(module);\n-            let items = tcx.hir_module_items(module);\n-            par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));\n-        }\n+    pub fn par_for_each_module(self, f: impl Fn(LocalDefId) + Sync + Send) {\n+        let crate_items = self.tcx.hir_crate_items(());\n+        par_for_each_in(&crate_items.submodules[..], |module| f(*module))\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    #[inline]\n     pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    #[inline]\n     pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }"}]}