{"sha": "1397f990fe190d88dff8963eac1cebb25210a09f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTdmOTkwZmUxOTBkODhkZmY4OTYzZWFjMWNlYmIyNTIxMGEwOWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-20T01:30:31Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-31T22:05:12Z"}, "message": "Cross crait inherant impls", "tree": {"sha": "e2789402566a095cbfc6130d635dd1f3bf37b8d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2789402566a095cbfc6130d635dd1f3bf37b8d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1397f990fe190d88dff8963eac1cebb25210a09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1397f990fe190d88dff8963eac1cebb25210a09f", "html_url": "https://github.com/rust-lang/rust/commit/1397f990fe190d88dff8963eac1cebb25210a09f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1397f990fe190d88dff8963eac1cebb25210a09f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d416d16cce61033b65474967fd7a4d780011dfb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d416d16cce61033b65474967fd7a4d780011dfb8", "html_url": "https://github.com/rust-lang/rust/commit/d416d16cce61033b65474967fd7a4d780011dfb8"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "d92623636f49df78a102433a615ccd09cef9dc73", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=1397f990fe190d88dff8963eac1cebb25210a09f", "patch": "@@ -32,7 +32,7 @@ use syntax::parse::token;\n \n use std::collections::hashmap::HashMap;\n \n-pub struct StaticMethodInfo {\n+pub struct MethodInfo {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n     pub vis: ast::Visibility,\n@@ -177,11 +177,11 @@ pub fn get_type_name_if_impl(cstore: &cstore::CStore, def: ast::DefId)\n     decoder::get_type_name_if_impl(&*cdata, def.node)\n }\n \n-pub fn get_static_methods_if_impl(cstore: &cstore::CStore,\n+pub fn get_methods_if_impl(cstore: &cstore::CStore,\n                                   def: ast::DefId)\n-                               -> Option<Vec<StaticMethodInfo> > {\n+                               -> Option<Vec<MethodInfo> > {\n     let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_static_methods_if_impl(cstore.intr.clone(), &*cdata, def.node)\n+    decoder::get_methods_if_impl(cstore.intr.clone(), &*cdata, def.node)\n }\n \n pub fn get_item_attrs(cstore: &cstore::CStore,"}, {"sha": "5403f91645a9b1732fffd4185165a70bc911a29a", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=1397f990fe190d88dff8963eac1cebb25210a09f", "patch": "@@ -15,7 +15,7 @@\n use back::svh::Svh;\n use metadata::cstore::crate_metadata;\n use metadata::common::*;\n-use metadata::csearch::StaticMethodInfo;\n+use metadata::csearch::MethodInfo;\n use metadata::csearch;\n use metadata::cstore;\n use metadata::tydecode::{parse_ty_data, parse_region_data, parse_def_id,\n@@ -902,10 +902,10 @@ pub fn get_type_name_if_impl(cdata: Cmd,\n     ret\n }\n \n-pub fn get_static_methods_if_impl(intr: Rc<IdentInterner>,\n+pub fn get_methods_if_impl(intr: Rc<IdentInterner>,\n                                   cdata: Cmd,\n                                   node_id: ast::NodeId)\n-                               -> Option<Vec<StaticMethodInfo> > {\n+                               -> Option<Vec<MethodInfo> > {\n     let item = lookup_item(node_id, cdata.data());\n     if item_family(item) != Impl {\n         return None;\n@@ -924,14 +924,14 @@ pub fn get_static_methods_if_impl(intr: Rc<IdentInterner>,\n         true\n     });\n \n-    let mut static_impl_methods = Vec::new();\n+    let mut impl_methods = Vec::new();\n     for impl_method_id in impl_method_ids.iter() {\n         let impl_method_doc = lookup_item(impl_method_id.node, cdata.data());\n         let family = item_family(impl_method_doc);\n         match family {\n-            StaticMethod => {\n-                static_impl_methods.push(StaticMethodInfo {\n-                    name: item_name(&*intr, impl_method_doc),\n+            StaticMethod | Method => {\n+                impl_methods.push(MethodInfo {\n+                    ident: item_name(&*intr, impl_method_doc),\n                     def_id: item_def_id(impl_method_doc, cdata),\n                     vis: item_visibility(impl_method_doc),\n                 });\n@@ -940,7 +940,7 @@ pub fn get_static_methods_if_impl(intr: Rc<IdentInterner>,\n         }\n     }\n \n-    return Some(static_impl_methods);\n+    return Some(impl_methods);\n }\n \n /// If node_id is the constructor of a tuple struct, retrieve the NodeId of"}, {"sha": "3d10289227745aa7595e29c54ff583a76bdb77aa", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1397f990fe190d88dff8963eac1cebb25210a09f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1397f990fe190d88dff8963eac1cebb25210a09f", "patch": "@@ -1950,15 +1950,14 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             DlImpl(def) => {\n-                // We only process static methods of impls here.\n                 match csearch::get_type_name_if_impl(&self.session.cstore, def) {\n                     None => {}\n                     Some(final_name) => {\n-                        let static_methods_opt =\n-                            csearch::get_static_methods_if_impl(&self.session.cstore, def);\n-                        match static_methods_opt {\n-                            Some(ref static_methods) if\n-                                static_methods.len() >= 1 => {\n+                        let methods_opt =\n+                            csearch::get_methods_if_impl(&self.session.cstore, def);\n+                        match methods_opt {\n+                            Some(ref methods) if\n+                                methods.len() >= 1 => {\n                                 debug!(\"(building reduced graph for \\\n                                         external crate) processing \\\n                                         static methods for type name {}\",\n@@ -2008,9 +2007,8 @@ impl<'a> Resolver<'a> {\n                                 // Add each static method to the module.\n                                 let new_parent =\n                                     ModuleReducedGraphParent(type_module);\n-                                for static_method_info in\n-                                        static_methods.iter() {\n-                                    let name = static_method_info.name;\n+                                for method_info in methods.iter() {\n+                                    let name = method_info.name;\n                                     debug!(\"(building reduced graph for \\\n                                              external crate) creating \\\n                                              static method '{}'\",\n@@ -2021,9 +2019,7 @@ impl<'a> Resolver<'a> {\n                                                        new_parent.clone(),\n                                                        OverwriteDuplicates,\n                                                        DUMMY_SP);\n-                                    let def = DefFn(\n-                                        static_method_info.def_id,\n-                                        false);\n+                                    let def = DefFn(method_info.def_id, false);\n \n                                     method_name_bindings.define_value(\n                                         def, DUMMY_SP,"}]}