{"sha": "494dd0b71936813e3a5565d5ea88c6fdf07240e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NGRkMGI3MTkzNjgxM2UzYTU1NjVkNWVhODhjNmZkZjA3MjQwZTM=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-22T16:28:56Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-22T16:28:56Z"}, "message": "Remove trait", "tree": {"sha": "787db624fc9195b8495e48d4a2c91f2a3922ba9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787db624fc9195b8495e48d4a2c91f2a3922ba9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494dd0b71936813e3a5565d5ea88c6fdf07240e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494dd0b71936813e3a5565d5ea88c6fdf07240e3", "html_url": "https://github.com/rust-lang/rust/commit/494dd0b71936813e3a5565d5ea88c6fdf07240e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494dd0b71936813e3a5565d5ea88c6fdf07240e3/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44b4ca60257d80a431b4c1aceb3c1e09fb8389e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44b4ca60257d80a431b4c1aceb3c1e09fb8389e", "html_url": "https://github.com/rust-lang/rust/commit/b44b4ca60257d80a431b4c1aceb3c1e09fb8389e"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "54b5b922ac7299cb817b28a0f93c1ad9dc399954", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 25, "deletions": 44, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/494dd0b71936813e3a5565d5ea88c6fdf07240e3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494dd0b71936813e3a5565d5ea88c6fdf07240e3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=494dd0b71936813e3a5565d5ea88c6fdf07240e3", "patch": "@@ -738,52 +738,33 @@ impl EarlyLintPass for DeprecatedAttr {\n     }\n }\n \n-trait UnusedDocCommentExt {\n-    fn warn_if_doc(\n-        &self,\n-        cx: &EarlyContext<'_>,\n-        node_span: Span,\n-        node_kind: &str,\n-        attrs: &[ast::Attribute],\n-    );\n-}\n+fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {\n+    let mut attrs = attrs.into_iter().peekable();\n \n-impl UnusedDocCommentExt for UnusedDocComment {\n-    fn warn_if_doc(\n-        &self,\n-        cx: &EarlyContext<'_>,\n-        node_span: Span,\n-        node_kind: &str,\n-        attrs: &[ast::Attribute],\n-    ) {\n-        let mut attrs = attrs.into_iter().peekable();\n-\n-        // Accumulate a single span for sugared doc comments.\n-        let mut sugared_span: Option<Span> = None;\n+    // Accumulate a single span for sugared doc comments.\n+    let mut sugared_span: Option<Span> = None;\n \n-        while let Some(attr) = attrs.next() {\n-            if attr.is_doc_comment() {\n-                sugared_span = Some(\n-                    sugared_span.map_or_else(|| attr.span, |span| span.with_hi(attr.span.hi())),\n-                );\n-            }\n+    while let Some(attr) = attrs.next() {\n+        if attr.is_doc_comment() {\n+            sugared_span =\n+                Some(sugared_span.map_or_else(|| attr.span, |span| span.with_hi(attr.span.hi())));\n+        }\n \n-            if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {\n-                continue;\n-            }\n+        if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {\n+            continue;\n+        }\n \n-            let span = sugared_span.take().unwrap_or_else(|| attr.span);\n+        let span = sugared_span.take().unwrap_or_else(|| attr.span);\n \n-            if attr.is_doc_comment() || attr.check_name(sym::doc) {\n-                cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n-                    let mut err = lint.build(\"unused doc comment\");\n-                    err.span_label(\n-                        node_span,\n-                        format!(\"rustdoc does not generate documentation for {}\", node_kind),\n-                    );\n-                    err.emit();\n-                });\n-            }\n+        if attr.is_doc_comment() || attr.check_name(sym::doc) {\n+            cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n+                let mut err = lint.build(\"unused doc comment\");\n+                err.span_label(\n+                    node_span,\n+                    format!(\"rustdoc does not generate documentation for {}\", node_kind),\n+                );\n+                err.emit();\n+            });\n         }\n     }\n }\n@@ -797,16 +778,16 @@ impl EarlyLintPass for UnusedDocComment {\n             ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Mac(..) => return,\n         };\n \n-        self.warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());\n+        warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n         let arm_span = arm.pat.span.with_hi(arm.body.span.hi());\n-        self.warn_if_doc(cx, arm_span, \"match arms\", &arm.attrs);\n+        warn_if_doc(cx, arm_span, \"match arms\", &arm.attrs);\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        self.warn_if_doc(cx, expr.span, \"expressions\", &expr.attrs);\n+        warn_if_doc(cx, expr.span, \"expressions\", &expr.attrs);\n     }\n }\n "}]}