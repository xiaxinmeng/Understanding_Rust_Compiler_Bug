{"sha": "53b352edb6f441bc3cf5386806fcc4686f275130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYjM1MmVkYjZmNDQxYmMzY2Y1Mzg2ODA2ZmNjNDY4NmYyNzUxMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T22:41:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T22:41:46Z"}, "message": "Auto merge of #64616 - Centril:rollup-du6728f, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #63448 (fix Miri discriminant handling)\n - #64592 (Point at original span when emitting unreachable lint)\n - #64601 (Fix backticks in documentation)\n - #64606 (Remove unnecessary `mut` in doc example)\n - #64611 (rustbuild: Don't package libstd twice)\n - #64613 (rustbuild: Copy crate doc files fewer times)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d80f5e453cbd58d0a450a6acea1f9555cd643ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d80f5e453cbd58d0a450a6acea1f9555cd643ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53b352edb6f441bc3cf5386806fcc4686f275130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53b352edb6f441bc3cf5386806fcc4686f275130", "html_url": "https://github.com/rust-lang/rust/commit/53b352edb6f441bc3cf5386806fcc4686f275130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53b352edb6f441bc3cf5386806fcc4686f275130/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9d2aff8de4d499b4ba7ca406e000f8d3754ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9d2aff8de4d499b4ba7ca406e000f8d3754ea7", "html_url": "https://github.com/rust-lang/rust/commit/9b9d2aff8de4d499b4ba7ca406e000f8d3754ea7"}, {"sha": "99cbffb15fd0e17ee27c1e161a6b1e37215c514b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cbffb15fd0e17ee27c1e161a6b1e37215c514b", "html_url": "https://github.com/rust-lang/rust/commit/99cbffb15fd0e17ee27c1e161a6b1e37215c514b"}], "stats": {"total": 682, "additions": 633, "deletions": 49}, "files": [{"sha": "e27a6bf7da0ac4f01fd4672458c7546ce8246ce6", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -762,7 +762,7 @@ impl Step for Analysis {\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n-        builder.ensure(Std { compiler, target });\n+        builder.ensure(compile::Std { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n "}, {"sha": "873a3c31d1535fe5ed527c917706dc0a68560b40", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -476,11 +476,11 @@ impl Step for Std {\n                  .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n \n             builder.run(&mut cargo);\n-            builder.cp_r(&my_out, &out);\n         };\n         for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n             run_cargo_rustdoc_for(krate);\n         }\n+        builder.cp_r(&my_out, &out);\n     }\n }\n "}, {"sha": "87470140e3148dd19dc04e409ee4f2bdbae6d013", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -1136,7 +1136,7 @@ fn resolve_local<'tcx>(\n     // Rule A. `let (ref x, ref y) = (foo().x, 44)`. The rvalue `(22, 44)`\n     // would have an extended lifetime, but not `foo()`.\n     //\n-    // Rule B. `let x = &foo().x`. The rvalue ``foo()` would have extended\n+    // Rule B. `let x = &foo().x`. The rvalue `foo()` would have extended\n     // lifetime.\n     //\n     // In some cases, multiple rules may apply (though not to the same"}, {"sha": "e52feea1624c11e3b5f1912f8a199e0105483ccc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -127,6 +127,7 @@ impl IntegerExt for Integer {\n \n pub trait PrimitiveExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;\n+    fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;\n }\n \n impl PrimitiveExt for Primitive {\n@@ -138,6 +139,16 @@ impl PrimitiveExt for Primitive {\n             Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),\n         }\n     }\n+\n+    /// Return an *integer* type matching this primitive.\n+    /// Useful in particular when dealing with enum discriminants.\n+    fn to_int_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+        match *self {\n+            Int(i, signed) => i.to_ty(tcx, signed),\n+            Pointer => tcx.types.usize,\n+            Float(..) => bug!(\"floats do not have an int type\"),\n+        }\n+    }\n }\n \n /// The first half of a fat pointer."}, {"sha": "c20e75868895991ac0871d418955a43f5c2204e6", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for CacheDecoder<'a, 'tcx> {\n \n // Both the `CrateNum` and the `DefIndex` of a `DefId` can change in between two\n // compilation sessions. We use the `DefPathHash`, which is stable across\n-// sessions, to map the old DefId`` to the new one.\n+// sessions, to map the old `DefId` to the new one.\n impl<'a, 'tcx> SpecializedDecoder<DefId> for CacheDecoder<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefId, Self::Error> {"}, {"sha": "dd214c4a031f7f9b2ff52f13e65e51669d0dc8b8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -1,11 +1,11 @@\n //! Functions concerning immediate values and operands, and reading from operands.\n //! All high-level functions to read from memory work on operands as sources.\n \n-use std::convert::TryInto;\n+use std::convert::{TryInto, TryFrom};\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{\n-    self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx,\n+    self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, PrimitiveExt, VariantIdx,\n };\n \n use rustc::mir::interpret::{\n@@ -609,15 +609,20 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, (u128, VariantIdx)> {\n         trace!(\"read_discriminant_value {:#?}\", rval.layout);\n \n-        let (discr_kind, discr_index) = match rval.layout.variants {\n+        let (discr_layout, discr_kind, discr_index) = match rval.layout.variants {\n             layout::Variants::Single { index } => {\n                 let discr_val = rval.layout.ty.discriminant_for_variant(*self.tcx, index).map_or(\n                     index.as_u32() as u128,\n                     |discr| discr.val);\n                 return Ok((discr_val, index));\n             }\n-            layout::Variants::Multiple { ref discr_kind, discr_index, .. } =>\n-                (discr_kind, discr_index),\n+            layout::Variants::Multiple {\n+                discr: ref discr_layout,\n+                ref discr_kind,\n+                discr_index,\n+                ..\n+            } =>\n+                (discr_layout, discr_kind, discr_index),\n         };\n \n         // read raw discriminant value\n@@ -634,7 +639,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     .map_err(|_| err_unsup!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n                     // going from layout tag type to typeck discriminant type\n-                    // requires first sign extending with the layout discriminant\n+                    // requires first sign extending with the discriminant layout\n                     let sexted = sign_extend(bits_discr, discr_val.layout.size) as i128;\n                     // and then zeroing with the typeck discriminant type\n                     let discr_ty = rval.layout.ty\n@@ -666,8 +671,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ref niche_variants,\n                 niche_start,\n             } => {\n-                let variants_start = niche_variants.start().as_u32() as u128;\n-                let variants_end = niche_variants.end().as_u32() as u128;\n+                let variants_start = niche_variants.start().as_u32();\n+                let variants_end = niche_variants.end().as_u32();\n                 let raw_discr = raw_discr.not_undef().map_err(|_| {\n                     err_unsup!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n                 })?;\n@@ -682,18 +687,34 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },\n                     Ok(raw_discr) => {\n-                        let adjusted_discr = raw_discr.wrapping_sub(niche_start)\n-                            .wrapping_add(variants_start);\n-                        if variants_start <= adjusted_discr && adjusted_discr <= variants_end {\n-                            let index = adjusted_discr as usize;\n-                            assert_eq!(index as u128, adjusted_discr);\n-                            assert!(index < rval.layout.ty\n+                        // We need to use machine arithmetic to get the relative variant idx:\n+                        // variant_index_relative = discr_val - niche_start_val\n+                        let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n+                        let discr_val = ImmTy::from_uint(raw_discr, discr_layout);\n+                        let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n+                        let variant_index_relative_val = self.binary_op(\n+                            mir::BinOp::Sub,\n+                            discr_val,\n+                            niche_start_val,\n+                        )?;\n+                        let variant_index_relative = variant_index_relative_val\n+                            .to_scalar()?\n+                            .assert_bits(discr_val.layout.size);\n+                        // Check if this is in the range that indicates an actual discriminant.\n+                        if variant_index_relative <= u128::from(variants_end - variants_start) {\n+                            let variant_index_relative = u32::try_from(variant_index_relative)\n+                                .expect(\"we checked that this fits into a u32\");\n+                            // Then computing the absolute variant idx should not overflow any more.\n+                            let variant_index = variants_start\n+                                .checked_add(variant_index_relative)\n+                                .expect(\"oveflow computing absolute variant idx\");\n+                            assert!((variant_index as usize) < rval.layout.ty\n                                 .ty_adt_def()\n                                 .expect(\"tagged layout for non adt\")\n                                 .variants.len());\n-                            (adjusted_discr, VariantIdx::from_usize(index))\n+                            (u128::from(variant_index), VariantIdx::from_u32(variant_index))\n                         } else {\n-                            (dataful_variant.as_u32() as u128, dataful_variant)\n+                            (u128::from(dataful_variant.as_u32()), dataful_variant)\n                         }\n                     },\n                 }"}, {"sha": "c3660fb7a2e28ffe07758838cbd994fb904ece10", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -8,7 +8,9 @@ use std::hash::Hash;\n use rustc::mir;\n use rustc::mir::interpret::truncate;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx};\n+use rustc::ty::layout::{\n+    self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n+};\n use rustc::ty::TypeFoldable;\n \n use super::{\n@@ -1027,7 +1029,7 @@ where\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n-                ref discr,\n+                discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n@@ -1038,7 +1040,7 @@ where\n                 // raw discriminants for enums are isize or bigger during\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n-                let size = discr.value.size(self);\n+                let size = discr_layout.value.size(self);\n                 let discr_val = truncate(discr_val, size);\n \n                 let discr_dest = self.place_field(dest, discr_index as u64)?;\n@@ -1050,22 +1052,32 @@ where\n                     ref niche_variants,\n                     niche_start,\n                 },\n+                discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n                 assert!(\n                     variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len(),\n                 );\n                 if variant_index != dataful_variant {\n-                    let niche_dest =\n-                        self.place_field(dest, discr_index as u64)?;\n-                    let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n-                    let niche_value = (niche_value as u128)\n-                        .wrapping_add(niche_start);\n-                    self.write_scalar(\n-                        Scalar::from_uint(niche_value, niche_dest.layout.size),\n-                        niche_dest\n+                    let variants_start = niche_variants.start().as_u32();\n+                    let variant_index_relative = variant_index.as_u32()\n+                        .checked_sub(variants_start)\n+                        .expect(\"overflow computing relative variant idx\");\n+                    // We need to use machine arithmetic when taking into account `niche_start`:\n+                    // discr_val = variant_index_relative + niche_start_val\n+                    let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n+                    let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n+                    let variant_index_relative_val =\n+                        ImmTy::from_uint(variant_index_relative, discr_layout);\n+                    let discr_val = self.binary_op(\n+                        mir::BinOp::Add,\n+                        variant_index_relative_val,\n+                        niche_start_val,\n                     )?;\n+                    // Write result.\n+                    let niche_dest = self.place_field(dest, discr_index as u64)?;\n+                    self.write_immediate(*discr_val, niche_dest)?;\n                 }\n             }\n         }"}, {"sha": "50fd72f06131904e927b65f83dfe0801b39ba703", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always);\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n             return tcx.types.never;\n         }\n \n@@ -69,7 +69,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // warnings).\n             match all_pats_diverge {\n                 Diverges::Maybe => Diverges::Maybe,\n-                Diverges::Always | Diverges::WarnedAlways => Diverges::WarnedAlways,\n+                Diverges::Always { .. } | Diverges::WarnedAlways => Diverges::WarnedAlways,\n             }\n         }).collect();\n \n@@ -167,6 +167,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             prior_arm_ty = Some(arm_ty);\n         }\n \n+        // If all of the arms in the `match` diverge,\n+        // and we're dealing with an actual `match` block\n+        // (as opposed to a `match` desugared from something else'),\n+        // we can emit a better note. Rather than pointing\n+        // at a diverging expression in an arbitrary arm,\n+        // we can point at the entire `match` expression\n+        if let (Diverges::Always { .. }, hir::MatchSource::Normal) = (all_arms_diverge, match_src) {\n+            all_arms_diverge = Diverges::Always {\n+                span: expr.span,\n+                custom_note: Some(\n+                    \"any code following this `match` expression is unreachable, as all arms diverge\"\n+                )\n+            };\n+        }\n+\n         // We won't diverge unless the discriminant or all arms diverge.\n         self.diverges.set(discrim_diverges | all_arms_diverge);\n \n@@ -176,7 +191,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// When the previously checked expression (the scrutinee) diverges,\n     /// warn the user about the match arms being unreachable.\n     fn warn_arms_when_scrutinee_diverges(&self, arms: &'tcx [hir::Arm], source: hir::MatchSource) {\n-        if self.diverges.get().always() {\n+        if self.diverges.get().is_always() {\n             use hir::MatchSource::*;\n             let msg = match source {\n                 IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\","}, {"sha": "049f2eb16bb00d8b96911f51b3ff9b9f7a07b42e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Any expression that produces a value of type `!` must have diverged\n         if ty.is_never() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always);\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n         }\n \n         // Record the type, which applies it effects."}, {"sha": "1d68d79db88568048cb2fc131eb5910d316b3fe1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -450,7 +450,20 @@ pub enum Diverges {\n \n     /// Definitely known to diverge and therefore\n     /// not reach the next sibling or its parent.\n-    Always,\n+    Always {\n+        /// The `Span` points to the expression\n+        /// that caused us to diverge\n+        /// (e.g. `return`, `break`, etc).\n+        span: Span,\n+        /// In some cases (e.g. a `match` expression\n+        /// where all arms diverge), we may be\n+        /// able to provide a more informative\n+        /// message to the user.\n+        /// If this is `None`, a default messsage\n+        /// will be generated, which is suitable\n+        /// for most cases.\n+        custom_note: Option<&'static str>\n+    },\n \n     /// Same as `Always` but with a reachability\n     /// warning already emitted.\n@@ -486,8 +499,22 @@ impl ops::BitOrAssign for Diverges {\n }\n \n impl Diverges {\n-    fn always(self) -> bool {\n-        self >= Diverges::Always\n+    /// Creates a `Diverges::Always` with the provided `span` and the default note message.\n+    fn always(span: Span) -> Diverges {\n+        Diverges::Always {\n+            span,\n+            custom_note: None\n+        }\n+    }\n+\n+    fn is_always(self) -> bool {\n+        // Enum comparison ignores the\n+        // contents of fields, so we just\n+        // fill them in with garbage here.\n+        self >= Diverges::Always {\n+            span: DUMMY_SP,\n+            custom_note: None\n+        }\n     }\n }\n \n@@ -2307,17 +2334,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Produces warning on the given node, if the current point in the\n     /// function is unreachable, and there hasn't been another warning.\n     fn warn_if_unreachable(&self, id: hir::HirId, span: Span, kind: &str) {\n-        if self.diverges.get() == Diverges::Always &&\n+        // FIXME: Combine these two 'if' expressions into one once\n+        // let chains are implemented\n+        if let Diverges::Always { span: orig_span, custom_note } = self.diverges.get() {\n             // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n             // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n             // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n-            !span.is_desugaring(DesugaringKind::CondTemporary) {\n-            self.diverges.set(Diverges::WarnedAlways);\n+            if !span.is_desugaring(DesugaringKind::CondTemporary) {\n+                self.diverges.set(Diverges::WarnedAlways);\n \n-            debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n+                debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n \n-            let msg = format!(\"unreachable {}\", kind);\n-            self.tcx().lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, &msg);\n+                let msg = format!(\"unreachable {}\", kind);\n+                self.tcx().struct_span_lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, &msg)\n+                    .span_note(\n+                        orig_span,\n+                        custom_note.unwrap_or(\"any code following this expression is unreachable\")\n+                    )\n+                    .emit();\n+            }\n         }\n     }\n \n@@ -3825,7 +3860,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                if !self.diverges.get().always() {\n+                if !self.diverges.get().is_always() {\n                     // #50009 -- Do not point at the entire fn block span, point at the return type\n                     // span, as it is the cause of the requirement, and\n                     // `consider_hint_about_removing_semicolon` will point at the last expression"}, {"sha": "c6dc02fea2d8462b2269e5c545a76b2f052f8717", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -935,7 +935,7 @@ impl Stdio {\n     ///     .expect(\"Failed to spawn child process\");\n     ///\n     /// {\n-    ///     let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    ///     let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n     ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n     /// }\n     ///"}, {"sha": "7d0d2392945e5e6700e91e7141c9acd1bdcffa01", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -3,7 +3,7 @@\n //! of source parsed during crate parsing (typically files, in-memory strings,\n //! or various bits of macro expansion) cover a continuous range of bytes in the\n //! `SourceMap` and are represented by `SourceFile`s. Byte positions are stored in\n-//! `Span`` and used pervasively in the compiler. They are absolute positions\n+//! `Span` and used pervasively in the compiler. They are absolute positions\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n@@ -645,7 +645,7 @@ impl SourceMap {\n     }\n \n     /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`\n-    /// ``c`.\n+    /// `c`.\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n         match self.span_to_snippet(sp) {\n             Ok(snippet) => {"}, {"sha": "6d37d1ded640077c3c57dcca83455908ab895b03", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -31,7 +31,7 @@ impl <'a> SpanlessHash<'a> {\n                 //\n                 // Not okay without two-phase borrows: the implicit\n                 // `&mut self` of the receiver is evaluated first, and\n-                // that conflicts with the `self.cx`` access during\n+                // that conflicts with the `self.cx` access during\n                 // argument evaluation, as demonstrated in `fn demo`\n                 // above.\n                 //"}, {"sha": "9f34fc73953a4bc93fae58930c0e91dc22056d97", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -0,0 +1,110 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// run-pass\n+\n+//! Make sure that we read and write enum discriminants correctly for corner cases caused\n+//! by layout optimizations.\n+\n+const OVERFLOW: usize = {\n+    // Tests for https://github.com/rust-lang/rust/issues/62138.\n+    #[repr(u8)]\n+    #[allow(dead_code)]\n+    enum WithWraparoundInvalidValues {\n+        X = 1,\n+        Y = 254,\n+    }\n+\n+    #[allow(dead_code)]\n+    enum Foo {\n+        A,\n+        B,\n+        C(WithWraparoundInvalidValues),\n+    }\n+\n+    let x = Foo::B;\n+    match x {\n+        Foo::B => 0,\n+        _ => panic!(),\n+    }\n+};\n+\n+const MORE_OVERFLOW: usize = {\n+    pub enum Infallible {}\n+\n+    // The check that the `bool` field of `V1` is encoding a \"niche variant\"\n+    // (i.e. not `V1`, so `V3` or `V4`) used to be mathematically incorrect,\n+    // causing valid `V1` values to be interpreted as other variants.\n+    #[allow(dead_code)]\n+    pub enum E1 {\n+        V1 { f: bool },\n+        V2 { f: Infallible },\n+        V3,\n+        V4,\n+    }\n+\n+    // Computing the discriminant used to be done using the niche type (here `u8`,\n+    // from the `bool` field of `V1`), overflowing for variants with large enough\n+    // indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+    #[allow(dead_code)]\n+    pub enum E2<X> {\n+        V1 { f: bool },\n+\n+        /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n+        _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n+        _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n+        _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n+        _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n+        _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n+        _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n+        _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n+        _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n+        _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n+        _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n+        _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n+        _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n+        _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n+        _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n+        _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n+        _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n+        _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n+        _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n+        _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n+        _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n+        _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n+        _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n+        _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n+        _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n+        _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n+        _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n+        _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n+        _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n+        _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n+        _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n+        _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n+\n+        V3,\n+        V4,\n+    }\n+\n+    if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+        unreachable!()\n+    }\n+    if let E1::V1 { .. } = (E1::V1 { f: true }) {\n+    } else {\n+        unreachable!()\n+    }\n+\n+    if let E2::V1 { .. } = E2::V3::<Infallible> {\n+        unreachable!()\n+    }\n+    if let E2::V3 { .. } = E2::V3::<Infallible> {\n+    } else {\n+        unreachable!()\n+    }\n+\n+    0\n+};\n+\n+fn main() {\n+    assert_eq!(OVERFLOW, 0);\n+    assert_eq!(MORE_OVERFLOW, 0);\n+}"}, {"sha": "8ca81ad22b72b9f82c11258e97b133a8788c01f5", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -0,0 +1,72 @@\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:23:13\n+   |\n+LL |     let x = Foo::B;\n+   |             ^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:25:9\n+   |\n+LL |         Foo::B => 0,\n+   |         ^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:88:28\n+   |\n+LL |     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+   |                            ^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:88:12\n+   |\n+LL |     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+   |            ^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:108:5\n+   |\n+LL |     assert_eq!(OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:108:5\n+   |\n+LL |     assert_eq!(OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:108:5\n+   |\n+LL |     assert_eq!(OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:109:5\n+   |\n+LL |     assert_eq!(MORE_OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:109:5\n+   |\n+LL |     assert_eq!(MORE_OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:109:5\n+   |\n+LL |     assert_eq!(MORE_OVERFLOW, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+"}, {"sha": "0ce31ea40ddbbf21330ae1b92d9e97fce9c2f0e2", "filename": "src/test/ui/dead-code-ret.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdead-code-ret.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/dead-code-ret.rs:6:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2df8f22944ee8d37d2a6cbe861651a7222b3a7fa", "filename": "src/test/ui/if-ret.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -5,4 +5,9 @@ LL | fn foo() { if (return) { } }\n    |                        ^^^\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n+note: any code following this expression is unreachable\n+  --> $DIR/if-ret.rs:6:15\n+   |\n+LL | fn foo() { if (return) { } }\n+   |               ^^^^^^^^\n "}, {"sha": "623f098d0b337a9c56485426709a1a7f46bd6fef", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,12 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/issue-2150.rs:7:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d1b23672dc7f4704588e7a2f8a66ceecf2c061f7", "filename": "src/test/ui/issues/issue-7246.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/issue-7246.rs:6:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e6c76c24c9110224512550fbd1329ea2eea5fcda", "filename": "src/test/ui/lint/lint-attr-non-item-node.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL |     #[deny(unreachable_code)]\n    |            ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/lint-attr-non-item-node.rs:6:9\n+   |\n+LL |         break;\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "84e9b5bab99ff0882d9484c8628de52075e9330a", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -10,6 +10,11 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n+note: any code following this expression is unreachable\n+  --> $DIR/liveness-unused.rs:91:9\n+   |\n+LL |         continue;\n+   |         ^^^^^^^^\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7"}, {"sha": "6c46b2473cce6d7843aa2bc49a0f318873aa74a6", "filename": "src/test/ui/match/match-no-arms-unreachable-after.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/match-no-arms-unreachable-after.rs:7:5\n+   |\n+LL |     match v { }\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "436c703e4b6b924eb254e01f1d499426d64346c9", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -10,12 +10,24 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n+note: any code following this expression is unreachable\n+  --> $DIR/never-assign-dead-code.rs:9:16\n+   |\n+LL |     let x: ! = panic!(\"aah\");\n+   |                ^^^^^^^^^^^^^\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n    |     ^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/never-assign-dead-code.rs:10:10\n+   |\n+LL |     drop(x);\n+   |          ^\n \n warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9"}, {"sha": "47b4e467abecb3a24dd95f4a78cc0667ee916b04", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_add.rs:17:19\n+   |\n+LL |     let x = Foo + return;\n+   |                   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8e246d940fd8d04913d1d349ea3498475003fe8e", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_again.rs:7:9\n+   |\n+LL |         continue;\n+   |         ^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "419a332e632f32aeb604318adb8fbe586a51174f", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_array.rs:9:26\n+   |\n+LL |     let x: [usize; 2] = [return, 22];\n+   |                          ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_array.rs:14:25\n    |\n LL |     let x: [usize; 2] = [22, return];\n    |                         ^^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_array.rs:14:30\n+   |\n+LL |     let x: [usize; 2] = [22, return];\n+   |                              ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7388fb4a6b9b2b0e7997633dd09a40a73360ace1", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,18 +9,35 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:10:9\n+   |\n+LL |     x = return;\n+   |         ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:20:14\n    |\n LL |         *p = return;\n    |              ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:20:9\n+   |\n+LL |         *p = return;\n+   |         ^^\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:26:15\n    |\n LL |     *{return; &mut i} = 22;\n    |               ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:26:7\n+   |\n+LL |     *{return; &mut i} = 22;\n+   |       ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "03a6139d688bb54cb66ddc1911d4db2fb602752b", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,13 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_block.rs:9:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_block.rs:25:9\n    |\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_block.rs:24:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "d0f666d2be44b0ca7cd815ad182978414cc04d69", "filename": "src/test/ui/reachable/expr_box.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_box.rs:6:17\n+   |\n+LL |     let x = box return;\n+   |                 ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3fcea90e7cd879a0ece0b098748dfe86b202dff6", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_call.rs:13:9\n+   |\n+LL |     foo(return, 22);\n+   |         ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n    |     ^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_call.rs:18:9\n+   |\n+LL |     bar(return);\n+   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d3ce0ca079f90620a558af1dd34af3686239fc36", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_cast.rs:9:14\n+   |\n+LL |     let x = {return} as !;\n+   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "03284576086a75f63a355353abbd9902febcec2e", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -12,13 +12,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_if.rs:7:9\n+   |\n+LL |     if {return} {\n+   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_if.rs:27:5\n    |\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_if.rs:21:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "a4cf8cfcfd9e669ed5cd84f8b5b9ef1221eff74a", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:7:12\n+   |\n+LL |     loop { return; }\n+   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -17,6 +22,11 @@ error: unreachable statement\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:20:12\n+   |\n+LL |     loop { return; }\n+   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -25,6 +35,11 @@ error: unreachable statement\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:31:5\n+   |\n+LL |     loop { 'middle: loop { loop { break 'middle; } } }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "f587e524d350dfbdcf8bc817251fb34ce8f31806", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:7:5\n+   |\n+LL |     match () { () => return }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -17,6 +22,11 @@ error: unreachable statement\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:18:5\n+   |\n+LL |     match () { () if false => return, () => return }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "7ad279c9f487a438191799e5eba8bc58258f2712", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_method.rs:16:13\n+   |\n+LL |     Foo.foo(return, 22);\n+   |             ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n    |         ^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_method.rs:21:13\n+   |\n+LL |     Foo.bar(return);\n+   |             ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ff6be76daea51770421e8dcf00eeb29c2626ebd", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_repeat.rs:9:26\n+   |\n+LL |     let x: [usize; 2] = [return; 2];\n+   |                          ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "31f7ebe7618ead294a21fb5bb501c8a3dac2121c", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_return.rs:10:30\n+   |\n+LL |     let x = {return {return {return;}}};\n+   |                              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e57618bf5e77cf3c242e12c242c9e675871de75", "filename": "src/test/ui/reachable/expr_return_in_macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -0,0 +1,15 @@\n+// Tests that we generate nice error messages\n+// when an expression is unreachble due to control\n+// flow inside of a macro expansion.\n+#![deny(unreachable_code)]\n+\n+macro_rules! early_return {\n+    () => {\n+        return ()\n+    }\n+}\n+\n+fn main() {\n+    return early_return!();\n+    //~^ ERROR unreachable expression\n+}"}, {"sha": "ff3abb5551f92d0eee32d7a6da79da4d5a6667a0", "filename": "src/test/ui/reachable/expr_return_in_macro.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -0,0 +1,22 @@\n+error: unreachable expression\n+  --> $DIR/expr_return_in_macro.rs:13:5\n+   |\n+LL |     return early_return!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/expr_return_in_macro.rs:4:9\n+   |\n+LL | #![deny(unreachable_code)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_return_in_macro.rs:8:9\n+   |\n+LL |         return ()\n+   |         ^^^^^^^^^\n+...\n+LL |     return early_return!();\n+   |            --------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "d08bcc4f0d1ae1d3e790900650da42bb839dfa4d", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,24 +9,47 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:14:35\n+   |\n+LL |     let x = Foo { a: 22, b: 33, ..return };\n+   |                                   ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:19:33\n    |\n LL |     let x = Foo { a: return, b: 33, ..return };\n    |                                 ^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:19:22\n+   |\n+LL |     let x = Foo { a: return, b: 33, ..return };\n+   |                      ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:24:39\n    |\n LL |     let x = Foo { a: 22, b: return, ..return };\n    |                                       ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:24:29\n+   |\n+LL |     let x = Foo { a: 22, b: return, ..return };\n+   |                             ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:29:13\n    |\n LL |     let x = Foo { a: 22, b: return };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:29:29\n+   |\n+LL |     let x = Foo { a: 22, b: return };\n+   |                             ^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "788499533db33b2a218e5b9020c0cd3d64e14688", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_tup.rs:9:30\n+   |\n+LL |     let x: (usize, usize) = (return, 2);\n+   |                              ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_tup.rs:14:29\n    |\n LL |     let x: (usize, usize) = (2, return);\n    |                             ^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_tup.rs:14:33\n+   |\n+LL |     let x: (usize, usize) = (2, return);\n+   |                                 ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "15eb735da75d83ad06cc08a2a14a54bbed3dca17", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_type.rs:9:14\n+   |\n+LL |     let x = {return}: !;\n+   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7f865196166398e44c22e6f52cf9eda376dd3d1d", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -15,6 +15,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_unary.rs:8:20\n+   |\n+LL |     let x: ! = ! { return; };\n+   |                    ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6d6d11ac691e9c39ac2b02607c866d857973e38", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -13,6 +13,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_while.rs:7:12\n+   |\n+LL |     while {return} {\n+   |            ^^^^^^\n \n error: unreachable block in `while` expression\n   --> $DIR/expr_while.rs:22:20\n@@ -23,6 +28,12 @@ LL | |\n LL | |         println!(\"I am dead.\");\n LL | |     }\n    | |_____^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_while.rs:22:12\n+   |\n+LL |     while {return} {\n+   |            ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca98a3947146ee5ecf58577c0128ca909dc79954", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -5,4 +5,9 @@ LL |         if let _ = return true && false {};\n    |                                         ^^\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n+note: any code following this expression is unreachable\n+  --> $DIR/protect-precedences.rs:13:20\n+   |\n+LL |         if let _ = return true && false {};\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "226f088c63a5e8bb8f0e0eef9485c6257cfc20a8", "filename": "src/test/ui/unreachable/unreachable-code.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-code.rs:5:3\n+   |\n+LL |   loop{}\n+   |   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "928f5634a12481cacf4663ed55f986e5a4795b3f", "filename": "src/test/ui/unreachable/unreachable-in-call.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-in-call.rs:13:10\n+   |\n+LL |     call(diverge(),\n+   |          ^^^^^^^^^\n \n error: unreachable call\n   --> $DIR/unreachable-in-call.rs:17:5\n    |\n LL |     call(\n    |     ^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-in-call.rs:19:9\n+   |\n+LL |         diverge());\n+   |         ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "889df790124dae0bd7e104a5d1f253cdea31b01d", "filename": "src/test/ui/unreachable/unreachable-try-pattern.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![warn(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-try-pattern.rs:19:36\n+   |\n+LL |     let y = (match x { Ok(n) => Ok(n as u32), Err(e) => Err(e) })?;\n+   |                                    ^\n \n warning: unreachable pattern\n   --> $DIR/unreachable-try-pattern.rs:19:24"}, {"sha": "9ce6e3df8046e785911f7f401e186d3c594fc962", "filename": "src/test/ui/unreachable/unwarned-match-on-never.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53b352edb6f441bc3cf5386806fcc4686f275130/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr?ref=53b352edb6f441bc3cf5386806fcc4686f275130", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:8:11\n+   |\n+LL |     match x {}\n+   |           ^\n \n error: unreachable arm\n   --> $DIR/unwarned-match-on-never.rs:15:15\n    |\n LL |         () => ()\n    |               ^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:14:11\n+   |\n+LL |     match (return) {\n+   |           ^^^^^^^^\n \n error: unreachable expression\n   --> $DIR/unwarned-match-on-never.rs:21:5\n@@ -23,6 +34,12 @@ LL | /     match () {\n LL | |         () => (),\n LL | |     }\n    | |_____^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:20:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}