{"sha": "65833dcd3d565c0efcc8fe81f3d3baa51f7559ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ODMzZGNkM2Q1NjVjMGVmY2M4ZmU4MWYzZDNiYWE1MWY3NTU5YmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-17T14:24:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-17T14:24:27Z"}, "message": "Rollup merge of #72261 - csmoe:issue-72095, r=estebank\n\nBreak out early on empty span when generate_fn_span\n\nCloses #72095\nr? @oli-obk\ncc @estebank @tmandry", "tree": {"sha": "c79e3096f0a3e6070591a833254b36f80839e98e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79e3096f0a3e6070591a833254b36f80839e98e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewUkbCRBK7hj4Ov3rIwAAdHIIABNPsiFQs4PKiM/1+cpILB99\ngF2cKFuYtV6rE8bEpq+DFRDeahIvPghk+5FwkW/0DFq+ypEgYjKkxbWRdDnESdK+\nXRc47i2lXFWGfkbaybqyJlVI6jOKk31wftqbsv6ZgfwxqrpnHoZ8RQBJR/Rr39JI\noVB8GNQ2eIiFm1ijhBxdK8bLoF5EiX3kUAeNROSKwNfb7us7ViwcSqnJRYzWDICN\nzCp5F22NfvE4rNmpm7oYp1DfNFzWY3c200LL5SfjXyzIyipEh0Wc4xrGE5jXCmQE\nGtC0g0eSfoddcIibINe4tzHyITparFtXy9TQOVXrMtRRX02we6PDBwA63TOo7qc=\n=2mOt\n-----END PGP SIGNATURE-----\n", "payload": "tree c79e3096f0a3e6070591a833254b36f80839e98e\nparent 49b81cae86f0b72d0351ad925aa8efde47ca6109\nparent 2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c\nauthor Ralf Jung <post@ralfj.de> 1589725467 +0200\ncommitter GitHub <noreply@github.com> 1589725467 +0200\n\nRollup merge of #72261 - csmoe:issue-72095, r=estebank\n\nBreak out early on empty span when generate_fn_span\n\nCloses #72095\nr? @oli-obk\ncc @estebank @tmandry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba", "html_url": "https://github.com/rust-lang/rust/commit/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b81cae86f0b72d0351ad925aa8efde47ca6109", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b81cae86f0b72d0351ad925aa8efde47ca6109", "html_url": "https://github.com/rust-lang/rust/commit/49b81cae86f0b72d0351ad925aa8efde47ca6109"}, {"sha": "2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "html_url": "https://github.com/rust-lang/rust/commit/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "51f5541766305d470856f4e2c7f1ae1aa5076736", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833dcd3d565c0efcc8fe81f3d3baa51f7559ba/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=65833dcd3d565c0efcc8fe81f3d3baa51f7559ba", "patch": "@@ -910,14 +910,23 @@ impl SourceMap {\n \n     pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n         let prev_span = self.span_extend_to_prev_str(span, \"fn\", true);\n-        self.span_to_snippet(prev_span)\n-            .map(|snippet| {\n-                let len = snippet\n-                    .find(|c: char| !c.is_alphanumeric() && c != '_')\n-                    .expect(\"no label after fn\");\n-                prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32))\n-            })\n-            .ok()\n+        if let Ok(snippet) = self.span_to_snippet(prev_span) {\n+            debug!(\n+                \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\",\n+                span, prev_span, snippet\n+            );\n+\n+            if snippet.is_empty() {\n+                return None;\n+            };\n+\n+            let len = snippet\n+                .find(|c: char| !c.is_alphanumeric() && c != '_')\n+                .expect(\"no label after fn\");\n+            Some(prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32)))\n+        } else {\n+            None\n+        }\n     }\n \n     /// Takes the span of a type parameter in a function signature and try to generate a span for"}]}