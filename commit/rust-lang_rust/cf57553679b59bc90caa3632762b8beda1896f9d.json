{"sha": "cf57553679b59bc90caa3632762b8beda1896f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNTc1NTM2NzliNTliYzkwY2FhMzYzMjc2MmI4YmVkYTE4OTZmOWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-30T23:22:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-31T18:00:47Z"}, "message": "Improve handling of trailing comments.", "tree": {"sha": "9da642e162ea489c0168104a67697c66f934392a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da642e162ea489c0168104a67697c66f934392a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf57553679b59bc90caa3632762b8beda1896f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf57553679b59bc90caa3632762b8beda1896f9d", "html_url": "https://github.com/rust-lang/rust/commit/cf57553679b59bc90caa3632762b8beda1896f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf57553679b59bc90caa3632762b8beda1896f9d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48cab962a08e370af523d082ef8946dfcfd3059", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48cab962a08e370af523d082ef8946dfcfd3059", "html_url": "https://github.com/rust-lang/rust/commit/b48cab962a08e370af523d082ef8946dfcfd3059"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "7128ffbe23a818d2e17b03d3bca01bfff61b9970", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cf57553679b59bc90caa3632762b8beda1896f9d/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf57553679b59bc90caa3632762b8beda1896f9d/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=cf57553679b59bc90caa3632762b8beda1896f9d", "patch": "@@ -5,6 +5,8 @@ import std::option;\n import driver::session::session;\n import front::ast;\n import front::lexer;\n+import front::codemap;\n+import front::codemap::codemap;\n import middle::ty;\n import util::common;\n import pp;\n@@ -34,6 +36,7 @@ tag mode {\n }\n \n type ps = @rec(pp::printer s,\n+               option::t[codemap] cm,\n                option::t[vec[lexer::cmnt]] comments,\n                mutable uint cur_cmnt,\n                mode mode);\n@@ -42,6 +45,7 @@ fn print_file(session sess, ast::_mod _mod, str filename, io::writer out,\n               mode mode) {\n     auto cmnts = lexer::gather_comments(sess, filename);\n     auto s = @rec(s=pp::mk_printer(out, default_columns),\n+                  cm=option::some[codemap](sess.get_codemap()),\n                   comments=option::some[vec[lexer::cmnt]](cmnts),\n                   mutable cur_cmnt=0u,\n                   mode=mode);\n@@ -52,6 +56,7 @@ fn print_file(session sess, ast::_mod _mod, str filename, io::writer out,\n fn ty_to_str(&@ast::ty ty) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mk_printer(writer.get_writer(), default_columns),\n+                  cm=option::none[codemap],\n                   comments=option::none[vec[lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -63,6 +68,7 @@ fn ty_to_str(&@ast::ty ty) -> str {\n fn block_to_str(&ast::block blk) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mk_printer(writer.get_writer(), default_columns),\n+                  cm=option::none[codemap],\n                   comments=option::none[vec[lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -76,6 +82,7 @@ fn block_to_str(&ast::block blk) -> str {\n fn pat_to_str(&@ast::pat p) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mk_printer(writer.get_writer(), default_columns),\n+                  cm=option::none[codemap],\n                   comments=option::none[vec[lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -1099,9 +1106,22 @@ fn maybe_print_comment(ps s, uint pos) {\n }\n \n fn maybe_print_line_comment(ps s, common::span span) -> bool {\n+    auto cm;\n+    alt (s.cm) {\n+        case (option::some[codemap](?ccm)) {\n+            cm = ccm;\n+        }\n+        case (_) {\n+            ret false;\n+        }\n+    }\n     alt (next_comment(s)) {\n         case (option::some[lexer::cmnt](?cmnt)) {\n-            if (span.hi + 4u >= cmnt.pos) {\n+            if (cmnt.style != lexer::trailing) { ret false; }\n+\n+            auto span_line = codemap::lookup_pos(cm, span.hi);\n+            auto comment_line = codemap::lookup_pos(cm, cmnt.pos);\n+            if (span_line.line == comment_line.line) {\n                 word(s.s, \" \");\n                 print_comment(s, cmnt);\n                 s.cur_cmnt += 1u;\n@@ -1128,12 +1148,11 @@ fn print_remaining_comments(ps s) {\n fn print_comment(ps s, lexer::cmnt cmnt) {\n     alt (cmnt.style) {\n         case (lexer::isolated) {\n-            cbox(s.s, 0u);\n+            zerobreak(s.s);\n             for (str line in cmnt.lines) {\n-                zerobreak(s.s);\n                 word_and_eol(s.s, line);\n+                zerobreak(s.s);\n             }\n-            end(s.s);\n             zerobreak(s.s);\n         }\n         case (lexer::trailing) {"}, {"sha": "88123740ac1ccbefda5c62b6595abcfbf6a9e85d", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf57553679b59bc90caa3632762b8beda1896f9d/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf57553679b59bc90caa3632762b8beda1896f9d/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=cf57553679b59bc90caa3632762b8beda1896f9d", "patch": "@@ -8,6 +8,7 @@ import std::option::some;\n import front::ast;\n import front::ast::ty;\n import front::ast::pat;\n+import front::codemap::codemap;\n import middle::walk;\n \n import std::io::stdout;\n@@ -129,6 +130,7 @@ fn expr_to_str(&@ast::expr e) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -140,6 +142,7 @@ fn ty_to_str(&ty t) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -167,6 +170,7 @@ fn block_to_str(&ast::block b) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -179,6 +183,7 @@ fn item_to_str(&@ast::item i) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -202,6 +207,7 @@ fn fun_to_str(&ast::_fn f, str name, vec[ast::ty_param] params) -> str {\n  let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);\n@@ -222,6 +228,7 @@ fn stmt_to_str(&ast::stmt st) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mk_printer(s.get_writer(), 80u);\n   auto out = @rec(s=out_,\n+                  cm=none[codemap],\n                   comments=none[vec[front::lexer::cmnt]],\n                   mutable cur_cmnt=0u,\n                   mode=mo_untyped);"}]}