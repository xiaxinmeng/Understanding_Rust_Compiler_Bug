{"sha": "bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZGNjNGU3Y2U2OTdiYmQ2YWQzOTg5ODdjNWU0ZWM0OTI4ZjVkYTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T09:10:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:17Z"}, "message": "Adjust parser generic parameter errors", "tree": {"sha": "507022857394927fbb9adb152dcb55f70887ea72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507022857394927fbb9adb152dcb55f70887ea72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "html_url": "https://github.com/rust-lang/rust/commit/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "899d013fefba27b66c655af4199ccecf8fb9fdae", "url": "https://api.github.com/repos/rust-lang/rust/commits/899d013fefba27b66c655af4199ccecf8fb9fdae", "html_url": "https://github.com/rust-lang/rust/commit/899d013fefba27b66c655af4199ccecf8fb9fdae"}], "stats": {"total": 147, "additions": 93, "deletions": 54}, "files": [{"sha": "7640f0bdf064e977c8ce091ddb717a5008c8ba90", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -948,10 +948,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn check_const_param(&mut self) -> bool {\n-        self.check_keyword(keywords::Const)\n-    }\n-\n     fn check_const_arg(&mut self) -> bool {\n         if self.token.can_begin_const_arg() {\n             true\n@@ -1046,7 +1042,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Attempt to consume a `<`. If `<<` is seen, replace it with a single\n-    /// `<` and continue. If a `<` is not seen, return false.\n+    /// `<` and continue. If `<-` is seen, replace it with a single `<`\n+    /// and continue. If a `<` is not seen, return false.\n     ///\n     /// This is meant to be used when parsing generics on a path to get the\n     /// starting token.\n@@ -1062,6 +1059,11 @@ impl<'a> Parser<'a> {\n                 self.bump_with(token::Lt, span);\n                 true\n             }\n+            token::LArrow => {\n+                let span = self.span.with_lo(self.span.lo() + BytePos(1));\n+                self.bump_with(token::BinOp(token::Minus), span);\n+                true\n+            }\n             _ => false,\n         };\n \n@@ -5518,7 +5520,6 @@ impl<'a> Parser<'a> {\n     /// trailing comma and erroneous trailing attributes.\n     crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n         let mut params = Vec::new();\n-        let mut prev_param: Option<ParamKindOrd> = None;\n         loop {\n             let attrs = self.parse_outer_attributes()?;\n             if self.check_lifetime() {\n@@ -5536,29 +5537,21 @@ impl<'a> Parser<'a> {\n                     bounds,\n                     kind: ast::GenericParamKind::Lifetime,\n                 });\n-                prev_param = Some(ParamKindOrd::Lifetime);\n-            } else if self.check_const_param() {\n+            } else if self.check_keyword(keywords::Const) {\n                 // Parse const parameter.\n                 params.push(self.parse_const_param(attrs)?);\n-                prev_param = Some(ParamKindOrd::Const);\n             } else if self.check_ident() {\n                 // Parse type parameter.\n                 params.push(self.parse_ty_param(attrs)?);\n-                prev_param = Some(ParamKindOrd::Type);\n             } else {\n                 // Check for trailing attributes and stop parsing.\n-                if !attrs.is_empty() {\n-                    if let Some(prev_param) = prev_param {\n-                        self.struct_span_err(\n-                            attrs[0].span,\n-                            &format!(\n-                                \"trailing attribute after {} parameter\",\n-                                prev_param,\n-                            ),\n-                        )\n-                        .span_label(attrs[0].span, \"attributes must go before parameters\")\n-                        .emit();\n-                    }\n+                if !attrs.is_empty() && !params.is_empty() {\n+                    self.struct_span_err(\n+                        attrs[0].span,\n+                        &format!(\"trailing attribute after generic parameter\"),\n+                    )\n+                    .span_label(attrs[0].span, \"attributes must go before parameters\")\n+                    .emit();\n                 }\n                 break\n             }\n@@ -5774,19 +5767,25 @@ impl<'a> Parser<'a> {\n                 });\n                 assoc_ty_bindings.push(span);\n             } else if self.check_const_arg() {\n+                // FIXME(const_generics): to distinguish between idents for types and consts,\n+                // we should introduce a GenericArg::Ident in the AST and distinguish when\n+                // lowering to the HIR. For now, idents for const args are not permitted.\n+\n                 // Parse const argument.\n                 let expr = if let token::OpenDelim(token::Brace) = self.token {\n                     self.parse_block_expr(None, self.span, BlockCheckMode::Default, ThinVec::new())?\n-                } else if self.token.can_begin_literal_or_bool() {\n-                    let lit = self.parse_lit()?;\n-                    self.mk_expr(lit.span, ExprKind::Lit(lit), ThinVec::new())\n-                } else {\n+                } else if self.token.is_ident() {\n                     // FIXME(const_generics): to distinguish between idents for types and consts,\n                     // we should introduce a GenericArg::Ident in the AST and distinguish when\n                     // lowering to the HIR. For now, idents for const args are not permitted.\n                     return Err(\n                         self.fatal(\"identifiers may currently not be used for const generics\")\n                     );\n+                } else {\n+                    // FIXME(const_generics): this currently conflicts with emplacement syntax\n+                    // with negative integer literals.\n+                    let lit = self.parse_lit()?;\n+                    self.mk_expr(lit.span, ExprKind::Lit(lit), ThinVec::new())\n                 };\n                 let value = AnonConst {\n                     id: ast::DUMMY_NODE_ID,\n@@ -6444,7 +6443,7 @@ impl<'a> Parser<'a> {\n         //     `<` (LIFETIME|IDENT) `,` - first generic parameter in a list\n         //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n         //     `<` (LIFETIME|IDENT) `=` - generic parameter with a default\n-        //     `<` const IDENT          - generic const parameter\n+        //     `<` const                - generic const parameter\n         // The only truly ambiguous case is\n         //     `<` IDENT `>` `::` IDENT ...\n         // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)"}, {"sha": "c3885f0d04d15038fc3ce0680e982bffd875ce5c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -284,7 +284,6 @@ impl Token {\n         match self {\n             OpenDelim(Brace) => true,\n             Interpolated(ref nt) => match nt.0 {\n-                NtExpr(..) => true,\n                 NtBlock(..) => true,\n                 NtLiteral(..) => true,\n                 _ => false,"}, {"sha": "ca5fdd9da859bae78bde7f472c409a9b310ec95e", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -7,7 +7,7 @@\n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n-    //~^ ERROR trailing attribute after lifetime parameter\n+    //~^ ERROR trailing attribute after generic parameter\n }\n \n fn main() {"}, {"sha": "55e7a9877846f271a79ac78561a15a13a9823d9c", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after lifetime parameter\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:25\n    |\n LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {"}, {"sha": "c795612acf08c13a59b92d967a4d332905182ec9", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -7,6 +7,6 @@\n struct RefAny<'a, T>(&'a T);\n \n impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n-//~^ ERROR trailing attribute after type parameter\n+//~^ ERROR trailing attribute after generic parameter\n \n fn main() {}"}, {"sha": "acd0ae3678a7c275d10f09d059b3cc1b30eeb670", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after type parameter\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:35\n    |\n LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}"}, {"sha": "3cfc70b41850a07ed2836bb10bdfa04b5f51fe6c", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -6,7 +6,7 @@ struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n fn hof_lt<Q>(_: Q)\n     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n-    //~^ ERROR trailing attribute after lifetime parameter\n+    //~^ ERROR trailing attribute after generic parameter\n {}\n \n fn main() {}"}, {"sha": "b9ca00974677b4a835f0654e8e381a639db79c0e", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after lifetime parameter\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:44\n    |\n LL |     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32"}, {"sha": "c582c596bfccdaac21a365cb6a6a9ad28c8e6da5", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -0,0 +1,19 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn u32_identity<const X: u32>() -> u32 {\n+    //~^ ERROR const generics in any position are currently unsupported\n+    5\n+}\n+\n+fn foo_a() {\n+    u32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+}\n+\n+fn foo_b() {\n+    u32_identity::<1 + 2>(); //~ ERROR expected one of `,` or `>`, found `+`\n+}\n+\n+fn main() {\n+    u32_identity::<5>(); // ok\n+}"}, {"sha": "1dd3a960316d99eea2e3b75ff826e263eab85faa", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found `<-`\n+  --> $DIR/const-expression-parameter.rs:10:19\n+   |\n+LL |     u32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+   |                   ^^ expected identifier\n+\n+error: expected one of `,` or `>`, found `+`\n+  --> $DIR/const-expression-parameter.rs:14:22\n+   |\n+LL |     u32_identity::<1 + 2>(); //~ ERROR expected one of `,` or `>`, found `+`\n+   |                      ^ expected one of `,` or `>` here\n+\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-expression-parameter.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-expression-parameter.rs:4:23\n+   |\n+LL | fn u32_identity<const X: u32>() -> u32 {\n+   |                       ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9bfd5bf23130210476c6e46ba4a9f0bdfba67a28", "filename": "src/test/ui/issues/issue-20616-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n@@ -12,7 +10,8 @@ type Type_1_<'a, T> = &'a T;\n //type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n \n \n-type Type_3<T> = Box<T,,>; //~ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+type Type_3<T> = Box<T,,>;\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`"}, {"sha": "f51fb949c740cc9de50d960c04029d3668b1dced", "filename": "src/test/ui/issues/issue-20616-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-3.rs:15:24\n+  --> $DIR/issue-20616-3.rs:13:24\n    |\n-LL | type Type_3<T> = Box<T,,>; //~ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+LL | type Type_3<T> = Box<T,,>;\n    |                        ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error"}, {"sha": "ffd1620c1d306fca9e86aeeb44f002341ec9555e", "filename": "src/test/ui/issues/issue-20616-7.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n@@ -27,7 +25,8 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n \n \n-type Type_7 = Box<(),,>; //~ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+type Type_7 = Box<(),,>;\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_8<'a,,> = &'a (); // error: expected ident, found `,`"}, {"sha": "c0e108375be29ddd51e0bab52ced252c5ec42a0a", "filename": "src/test/ui/issues/issue-20616-7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-7.rs:30:22\n+  --> $DIR/issue-20616-7.rs:28:22\n    |\n-LL | type Type_7 = Box<(),,>; //~ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+LL | type Type_7 = Box<(),,>;\n    |                      ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error"}, {"sha": "c9e8b61e50b5280269bd5c23fb9c9cac91ab5b54", "filename": "src/test/ui/issues/issue-20616-8.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n@@ -30,7 +28,8 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_7 = Box<(),,>; // error: expected type, found `,`\n \n \n-type Type_8<'a,,> = &'a (); //~ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+type Type_8<'a,,> = &'a ();\n+//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n \n \n //type Type_9<T,,> = Box<T>; // error: expected identifier, found `,`"}, {"sha": "0ef9192f1e73a392bbad3df6bcf7559974c047bd", "filename": "src/test/ui/issues/issue-20616-8.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/issue-20616-8.rs:33:16\n+  --> $DIR/issue-20616-8.rs:31:16\n    |\n-LL | type Type_8<'a,,> = &'a (); //~ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+LL | type Type_8<'a,,> = &'a ();\n    |                ^ expected one of `>`, `const`, identifier, or lifetime here\n \n error: aborting due to previous error"}, {"sha": "1c509f26fd63aa8c90b1c02b2e996c8c007678ba", "filename": "src/test/ui/issues/issue-20616-9.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n@@ -33,4 +31,5 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_8<'a,,> = &'a (); // error: expected identifier, found `,`\n \n \n-type Type_9<T,,> = Box<T>; //~ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+type Type_9<T,,> = Box<T>;\n+//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`"}, {"sha": "5fd1400a2e8cad777735994c09f2b921c180588a", "filename": "src/test/ui/issues/issue-20616-9.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr?ref=bbdcc4e7ce697bbd6ad398987c5e4ec4928f5da4", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/issue-20616-9.rs:36:15\n+  --> $DIR/issue-20616-9.rs:34:15\n    |\n-LL | type Type_9<T,,> = Box<T>; //~ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+LL | type Type_9<T,,> = Box<T>;\n    |               ^ expected one of `>`, `const`, identifier, or lifetime here\n \n error: aborting due to previous error"}]}