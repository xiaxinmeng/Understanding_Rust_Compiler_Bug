{"sha": "abd704b8446ee984c3d246841384cea49e92575f", "node_id": "C_kwDOAAsO6NoAKGFiZDcwNGI4NDQ2ZWU5ODRjM2QyNDY4NDEzODRjZWE0OWU5MjU3NWY", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-20T12:13:40Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-30T01:05:34Z"}, "message": "Remove all migrate.nll.stderr files", "tree": {"sha": "9f582dd4041c0ac63299ac7f496b937ff6098e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f582dd4041c0ac63299ac7f496b937ff6098e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd704b8446ee984c3d246841384cea49e92575f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd704b8446ee984c3d246841384cea49e92575f", "html_url": "https://github.com/rust-lang/rust/commit/abd704b8446ee984c3d246841384cea49e92575f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd704b8446ee984c3d246841384cea49e92575f/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "html_url": "https://github.com/rust-lang/rust/commit/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45"}], "stats": {"total": 334, "additions": 115, "deletions": 219}, "files": [{"sha": "10400cff5e51c33396addda8af0a1930e6963b34", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:19:46\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:17:46\n    |\n LL |     pub fn e(x: &'static mut isize) {\n    |              - help: consider changing this to be mutable: `mut x`\n@@ -8,7 +8,7 @@ LL |         let mut c1 = |y: &'static mut isize| x = y;\n    |                                              ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:28:50\n    |\n LL |     pub fn ee(x: &'static mut isize) {\n    |               - help: consider changing this to be mutable: `mut x`\n@@ -17,31 +17,31 @@ LL |             let mut c2 = |y: &'static mut isize| x = y;\n    |                                                  ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:42:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: consider changing this to be mutable: `mut x`\n LL |         || { x = (1,); };\n    |              ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:47:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:45:14\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: consider changing this to be mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |              ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:52:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:50:14\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: consider changing this to be mutable: `mut x`\n LL |         || { &mut x; };\n    |              ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:57:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:55:14\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: consider changing this to be mutable: `mut x`"}, {"sha": "10400cff5e51c33396addda8af0a1930e6963b34", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:19:46\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:17:46\n    |\n LL |     pub fn e(x: &'static mut isize) {\n    |              - help: consider changing this to be mutable: `mut x`\n@@ -8,7 +8,7 @@ LL |         let mut c1 = |y: &'static mut isize| x = y;\n    |                                              ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:28:50\n    |\n LL |     pub fn ee(x: &'static mut isize) {\n    |               - help: consider changing this to be mutable: `mut x`\n@@ -17,31 +17,31 @@ LL |             let mut c2 = |y: &'static mut isize| x = y;\n    |                                                  ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:42:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: consider changing this to be mutable: `mut x`\n LL |         || { x = (1,); };\n    |              ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:47:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:45:14\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: consider changing this to be mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |              ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:52:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:50:14\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: consider changing this to be mutable: `mut x`\n LL |         || { &mut x; };\n    |              ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:57:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:55:14\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: consider changing this to be mutable: `mut x`"}, {"sha": "fe7ed8ed3fa248cf2769f5c2e248430a6964daf7", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -3,15 +3,13 @@\n // looks at some parent.\n \n // revisions: migrate nll\n+//[nll]compile-flags: -Z borrowck=mir\n \n // Since we are testing nll (and migration) explicitly as a separate\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n \n-//[nll]compile-flags: -Z borrowck=mir\n-\n-\n // transcribed from borrowck-closures-unique.rs\n mod borrowck_closures_unique {\n     pub fn e(x: &'static mut isize) {"}, {"sha": "efd4e1a1716d333c119ff685bcad42f19e520bd6", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.migrate.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.migrate.stderr?ref=6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "patch": "@@ -1,32 +0,0 @@\n-error[E0506]: cannot assign to `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:11:5\n-   |\n-LL |     let res = (|| (|| &greeting)())();\n-   |                --      -------- borrow occurs due to use in closure\n-   |                |\n-   |                borrow of `greeting` occurs here\n-LL | \n-LL |     greeting = \"DEALLOCATED\".to_string();\n-   |     ^^^^^^^^ assignment to borrowed `greeting` occurs here\n-...\n-LL |     println!(\"thread result: {:?}\", res);\n-   |                                     --- borrow later used here\n-\n-error[E0505]: cannot move out of `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:14:10\n-   |\n-LL |     let res = (|| (|| &greeting)())();\n-   |                --      -------- borrow occurs due to use in closure\n-   |                |\n-   |                borrow of `greeting` occurs here\n-...\n-LL |     drop(greeting);\n-   |          ^^^^^^^^ move out of `greeting` occurs here\n-...\n-LL |     println!(\"thread result: {:?}\", res);\n-   |                                     --- borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0505, E0506.\n-For more information about an error, try `rustc --explain E0505`."}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:29:5\n+  --> $DIR/E0161.rs:32:5\n    |\n LL |     x.f();\n    |     ^^^^^"}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:29:5\n+  --> $DIR/E0161.rs:32:5\n    |\n LL |     x.f();\n    |     ^^^^^"}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:29:5\n+  --> $DIR/E0161.rs:32:5\n    |\n LL |     x.f();\n    |     ^^^^^"}, {"sha": "f3a7b68c7cf850eac4521ad4082321152d58e42d", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-nll\n-\n // Check that E0161 is a hard error in all possible configurations that might\n // affect it.\n \n@@ -13,6 +11,11 @@\n //[zflagsul] check-pass\n //[editionul] check-pass\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n #![allow(incomplete_features)]\n #![cfg_attr(nll, feature(nll))]\n #![cfg_attr(nllul, feature(nll))]"}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:29:5\n+  --> $DIR/E0161.rs:32:5\n    |\n LL |     x.f();\n    |     ^^^^^"}, {"sha": "7da6b029c26f0f6ad6e712410fa3fe9e16a4fbf0", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.migrate.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:52:5\n+  --> $DIR/issue-71955.rs:57:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -8,7 +8,7 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:52:5\n+  --> $DIR/issue-71955.rs:57:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -17,7 +17,7 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:52:5\n+  --> $DIR/issue-71955.rs:57:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -26,7 +26,7 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:52:5\n+  --> $DIR/issue-71955.rs:57:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -35,7 +35,7 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:52:5\n+  --> $DIR/issue-71955.rs:57:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -44,7 +44,7 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:63:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -53,7 +53,7 @@ LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:63:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -62,7 +62,7 @@ LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:63:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -71,7 +71,7 @@ LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:63:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -80,7 +80,7 @@ LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:58:5\n+  --> $DIR/issue-71955.rs:63:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough"}, {"sha": "c2feaa91280557c001a6d88fe53b304e89e5905b", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-71955.rs:42:1\n+  --> $DIR/issue-71955.rs:47:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^"}, {"sha": "3d6778b6942c52c8213684d14fc30ae50ff1df9d", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -3,6 +3,11 @@\n // [nll]compile-flags: -Zborrowck=mir\n // check-fail\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n #![feature(rustc_attrs)]\n \n trait Parser<'s> {"}, {"sha": "a2ab1f1856d3ee3ea8f0f34c9e59b42dc0b23def", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:128:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:127:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,19 +8,19 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-  --> $DIR/issue-30786.rs:106:9\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+  --> $DIR/issue-30786.rs:105:9\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ^^^^^^^^^     ^\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:141:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:140:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -29,13 +29,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-  --> $DIR/issue-30786.rs:106:9\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+  --> $DIR/issue-30786.rs:105:9\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ^^^^^^^^^     ^"}, {"sha": "a2ab1f1856d3ee3ea8f0f34c9e59b42dc0b23def", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:128:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:127:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,19 +8,19 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-  --> $DIR/issue-30786.rs:106:9\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n+  --> $DIR/issue-30786.rs:105:9\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ^^^^^^^^^     ^\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:141:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:140:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -29,13 +29,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-  --> $DIR/issue-30786.rs:106:9\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n+  --> $DIR/issue-30786.rs:105:9\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ^^^^^^^^^     ^"}, {"sha": "540c26c358b1dfefc9f1d697fc31f361d6e41bb8", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -7,15 +7,14 @@\n // through again.\n \n // revisions: migrate nll\n+//[nll]compile-flags: -Z borrowck=mir\n \n // Since we are testing nll (and migration) explicitly as a separate\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n // ignore-compare-mode-polonius\n \n-//[nll]compile-flags: -Z borrowck=mir\n-\n pub trait Stream {\n     type Item;\n     fn next(self) -> Option<Self::Item>;"}, {"sha": "9bb385b0dcdc8e0c0801f5b9003619c2450cad20", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr?ref=6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "patch": "@@ -1,15 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "d9fd1aebf277d719cce674760eaa55991154a72d", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:38:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:38:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "ba7572ebe31377ea9302d72836efb2fa9f337a47", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "08bc64926fac365247fa73e9b3a78064c3f1f009", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -6,6 +6,11 @@\n // revisions: migrate nll\n //[nll]compile-flags: -Z borrowck=mir\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n pub trait TheTrait {"}, {"sha": "0d4694a64d087c7f7502b550ef7f043ba1bacd81", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr?ref=6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "patch": "@@ -1,39 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n-   |\n-LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let z: Option<&'b &'a usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n-   |\n-LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let y: Paramd<'a> = Paramd { x: a };\n-LL |     let z: Option<&'b Paramd<'a>> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n-   |\n-LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let z: Option<&'a &'b usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "a27a010d7f302346ff76cb066406ac0f7197708e", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,50 +1,50 @@\n error[E0491]: in type `&'b &'a usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:16:12\n    |\n LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:10:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:14\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |              ^^\n note: but the referenced data is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:10:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:10\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          ^^\n \n error[E0491]: in type `&'b Paramd<'a>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:15:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:20:14\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |              ^^\n note: but the referenced data is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:15:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:20:10\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          ^^\n \n error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n    |\n LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:21:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:26:10\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-free-region-ordering-caller.rs:21:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:26:14\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |              ^^"}, {"sha": "546eb93d8ecab9a7f45f018dcca3de8751a85b28", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:16:12\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          --  -- lifetime `'b` defined here\n@@ -11,7 +11,7 @@ LL |     let z: Option<&'b &'a usize> = None;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          --  -- lifetime `'b` defined here\n@@ -24,7 +24,7 @@ LL |     let z: Option<&'b Paramd<'a>> = None;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          --  -- lifetime `'b` defined here"}, {"sha": "11997a5fb56a5c3659da35785af282d549d6e4f4", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -5,6 +5,11 @@\n // revisions: migrate nll\n //[nll]compile-flags: -Z borrowck=mir\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n struct Paramd<'a> { x: &'a usize }\n \n fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {"}, {"sha": "29e92f33ec9148a97bc12a522b49883726195c17", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr?ref=6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "patch": "@@ -1,28 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n-   |\n-LL | fn with_assoc_sub<'a,'b>() {\n-   |                   -- -- lifetime `'b` defined here\n-   |                   |\n-   |                   lifetime `'a` defined here\n-...\n-LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "f2308bb7c78b1e140b34eb2080484eb37a270256", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,33 +1,33 @@\n error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n    |\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:15\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:18\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:55:12\n    |\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:19\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:51:19\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:22\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:51:22\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                      ^^"}, {"sha": "472323772c1a50a0e68adb29d06120b28aac045a", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:55:12\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   -- -- lifetime `'b` defined here"}, {"sha": "695a81dca27c84925390f361575fc3ab1bd773e3", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -4,6 +4,11 @@\n // revisions: migrate nll\n //[nll]compile-flags: -Z borrowck=mir\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n pub trait TheTrait<'b> {"}, {"sha": "7035144302479f4a0578aa074b6d1d4607f78bca", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr?ref=6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "patch": "@@ -1,15 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "bda2896fca4ac9b3bb831986f4e9494c630bd2b6", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-outlives-projection-container-wc.rs:27:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:32:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/regions-outlives-projection-container-wc.rs:27:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:32:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "fc32a72d508963db013d438d3df048b49ae6be1b", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "c9b714cffb6e4528cc0bf1f8a7050fd61c98cd95", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd704b8446ee984c3d246841384cea49e92575f/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=abd704b8446ee984c3d246841384cea49e92575f", "patch": "@@ -6,6 +6,11 @@\n // revisions: migrate nll\n //[nll]compile-flags: -Z borrowck=mir\n \n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n pub trait TheTrait {"}]}