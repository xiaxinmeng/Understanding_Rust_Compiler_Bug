{"sha": "54d053c881514b024ba399ce2edc678e3f710ab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZDA1M2M4ODE1MTRiMDI0YmEzOTljZTJlZGM2NzhlM2Y3MTBhYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T20:52:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T20:52:14Z"}, "message": "minor", "tree": {"sha": "be2864c8f1906f096e37e0778fa18524e2ddbe67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2864c8f1906f096e37e0778fa18524e2ddbe67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d053c881514b024ba399ce2edc678e3f710ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d053c881514b024ba399ce2edc678e3f710ab7", "html_url": "https://github.com/rust-lang/rust/commit/54d053c881514b024ba399ce2edc678e3f710ab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d053c881514b024ba399ce2edc678e3f710ab7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b0379e1063941331253905795699a918233ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b0379e1063941331253905795699a918233ef9", "html_url": "https://github.com/rust-lang/rust/commit/d8b0379e1063941331253905795699a918233ef9"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e00bca6e38c3ee36b07c184bf1ce22fcb677bc27", "filename": "crates/ra_hir/src/function/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54d053c881514b024ba399ce2edc678e3f710ab7/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d053c881514b024ba399ce2edc678e3f710ab7/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs?ref=54d053c881514b024ba399ce2edc678e3f710ab7", "patch": "@@ -27,6 +27,11 @@ pub struct Function {\n }\n \n impl Function {\n+    pub(crate) fn new(def_id: DefId) -> Function {\n+        let fn_id = FnId(def_id);\n+        Function { fn_id }\n+    }\n+\n     pub fn guess_from_source(\n         db: &impl HirDatabase,\n         file_id: FileId,\n@@ -42,8 +47,7 @@ impl Function {\n             module_id: module.module_id,\n             source_item_id,\n         };\n-        let fn_id = FnId(def_loc.id(db));\n-        Ok(Some(Function { fn_id }))\n+        Ok(Some(Function::new(def_loc.id(db))))\n     }\n \n     pub fn guess_for_name_ref("}, {"sha": "9168dad3b04f4441b67228654f3f48f1de4f87ca", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54d053c881514b024ba399ce2edc678e3f710ab7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d053c881514b024ba399ce2edc678e3f710ab7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=54d053c881514b024ba399ce2edc678e3f710ab7", "patch": "@@ -41,6 +41,8 @@ pub use self::{\n \n pub use self::function::FnSignatureInfo;\n \n+/// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n+/// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct DefId(u32);\n ra_db::impl_numeric_id!(DefId);\n@@ -61,13 +63,13 @@ pub struct DefLoc {\n }\n \n impl DefId {\n-    pub fn loc(self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefLoc {\n+    pub(crate) fn loc(self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefLoc {\n         db.as_ref().id2loc(self)\n     }\n }\n \n impl DefLoc {\n-    pub fn id(&self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefId {\n+    pub(crate) fn id(&self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefId {\n         db.as_ref().loc2id(&self)\n     }\n }\n@@ -83,10 +85,14 @@ impl DefId {\n         let loc = self.loc(db);\n         let res = match loc.kind {\n             DefKind::Module => {\n-                let descr = Module::new(db, loc.source_root_id, loc.module_id)?;\n-                Def::Module(descr)\n+                let module = Module::new(db, loc.source_root_id, loc.module_id)?;\n+                Def::Module(module)\n             }\n-            DefKind::Item | DefKind::Function => Def::Item,\n+            DefKind::Function => {\n+                let function = Function::new(self);\n+                Def::Function(function)\n+            }\n+            DefKind::Item => Def::Item,\n         };\n         Ok(res)\n     }"}]}