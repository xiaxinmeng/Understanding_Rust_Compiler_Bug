{"sha": "ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMmQ5MGU5MDNhZjI5ZGNmYzViZmYzYmIwOGRkYmM2YzQ0NjQ5NzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T15:57:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T15:57:27Z"}, "message": "consider DepNode::Krate to be an input\n\nThis seems not only more correct but allows us to write tests that check\nwhether the krate hash as a whole is clean/dirty", "tree": {"sha": "846cde52ccaa06428a038f5bca10aaa94958386e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846cde52ccaa06428a038f5bca10aaa94958386e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "html_url": "https://github.com/rust-lang/rust/commit/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42e0a34519d44ef0424574093999126fae1d13f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42e0a34519d44ef0424574093999126fae1d13f", "html_url": "https://github.com/rust-lang/rust/commit/c42e0a34519d44ef0424574093999126fae1d13f"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "e95fbcc89175aad607105f9471c1d88863ac1606", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -147,6 +147,11 @@ impl<D: Clone + Debug> DepNode<D> {\n             }\n         }\n \n+        if label == \"Krate\" {\n+            // special case\n+            return Ok(DepNode::Krate);\n+        }\n+\n         check! {\n             CollectItem,\n             BorrowCheck,"}, {"sha": "65da3a09ecca53f3110673f88651609bd5ed2cad", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -133,6 +133,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         debug!(\"assert_dirty({:?})\", dep_node);\n \n         match dep_node {\n+            DepNode::Krate |\n             DepNode::Hir(_) => {\n                 // HIR nodes are inputs, so if we are asserting that the HIR node is\n                 // dirty, we check the dirty input set.\n@@ -161,6 +162,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         debug!(\"assert_clean({:?})\", dep_node);\n \n         match dep_node {\n+            DepNode::Krate |\n             DepNode::Hir(_) => {\n                 // For HIR nodes, check the inputs.\n                 if self.dirty_inputs.contains(&dep_node) {"}, {"sha": "5d01f8806028214bdd7a0612a5e977cb277c59e0", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -45,14 +45,19 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n \n     pub fn is_hashable(dep_node: &DepNode<DefId>) -> bool {\n         match *dep_node {\n+            DepNode::Krate |\n             DepNode::Hir(_) => true,\n             DepNode::MetaData(def_id) => !def_id.is_local(),\n             _ => false,\n         }\n     }\n \n-    pub fn hash(&mut self, dep_node: &DepNode<DefId>) -> Option<(DefId, u64)> {\n+    pub fn hash(&mut self, dep_node: &DepNode<DefId>) -> Option<u64> {\n         match *dep_node {\n+            DepNode::Krate => {\n+                Some(self.incremental_hashes_map[dep_node])\n+            }\n+\n             // HIR nodes (which always come from our crate) are an input:\n             DepNode::Hir(def_id) => {\n                 assert!(def_id.is_local(),\n@@ -65,15 +70,15 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n                         def_id,\n                         self.tcx.item_path_str(def_id));\n \n-                Some((def_id, self.incremental_hashes_map[dep_node]))\n+                Some(self.incremental_hashes_map[dep_node])\n             }\n \n             // MetaData from other crates is an *input* to us.\n             // MetaData nodes from *our* crates are an *output*; we\n             // don't hash them, but we do compute a hash for them and\n             // save it for others to use.\n             DepNode::MetaData(def_id) if !def_id.is_local() => {\n-                Some((def_id, self.metadata_hash(def_id)))\n+                Some(self.metadata_hash(def_id))\n             }\n \n             _ => {"}, {"sha": "75448d199f73e5a9ba8f9e74c402885a1adefa5a", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -222,7 +222,7 @@ fn dirty_nodes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     for hash in serialized_hashes {\n         if let Some(dep_node) = retraced.map(&hash.dep_node) {\n-            let (_, current_hash) = hcx.hash(&dep_node).unwrap();\n+            let current_hash = hcx.hash(&dep_node).unwrap();\n             if current_hash == hash.hash {\n                 continue;\n             }"}, {"sha": "af13484e4288d54174ee0763d4beb44717cebd27", "filename": "src/librustc_incremental/persist/preds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -62,7 +62,7 @@ impl<'q> Predecessors<'q> {\n         let mut hashes = FnvHashMap();\n         for input in inputs.values().flat_map(|v| v.iter().cloned()) {\n             hashes.entry(input)\n-                  .or_insert_with(|| hcx.hash(input).unwrap().1);\n+                  .or_insert_with(|| hcx.hash(input).unwrap());\n         }\n \n         Predecessors {"}, {"sha": "1dec361eb07d708d99d828262c58a5801b3a4297", "filename": "src/test/incremental/crate_hash_reorder.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2d90e903af29dcfc5bff3bb08ddbc6c4464975/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs?ref=ea2d90e903af29dcfc5bff3bb08ddbc6c4464975", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change field names\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 rpass2 rpass3\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+\n+// Check that reordering otherwise identical items is not considered a\n+// change at all.\n+#[rustc_clean(label=\"Krate\", cfg=\"rpass2\")]\n+\n+// But removing an item, naturally, is.\n+#[rustc_dirty(label=\"Krate\", cfg=\"rpass3\")]\n+\n+#[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32,\n+}\n+\n+pub struct Y {\n+    pub x: u32,\n+}\n+\n+#[cfg(rpass2)]\n+pub struct X {\n+    pub x: u32,\n+}\n+\n+pub fn main() { }"}]}