{"sha": "48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "node_id": "C_kwDOAAsO6NoAKDQ4ZWZkMzBjOWQyZWFjOWMxZGM0ZTM4OTY1MTBhZTVkZWQ3NjNkMjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-28T16:44:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-28T16:44:46Z"}, "message": "Rollup merge of #99689 - dtolnay:write, r=Mark-Simulacrum\n\nRevert `write!` and `writeln!` to late drop temporaries\n\nCloses (on master, but not on beta) #99684 by reverting the `write!` and `writeln!` parts of #96455.\n\nargument position | before<br>#94868 | after<br>#94868 | after<br>#96455 | after<br>this PR | desired<br>(unimplementable)\n--- |:---:|:---:|:---:|:---:|:---:\n`write!($tmp, \"\u2026\", \u2026)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | **\u2e3alate**\n`write!(\u2026, \"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | *early\u2e3a*\n`writeln!($tmp, \"\u2026\", \u2026)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | **\u2e3alate**\n`writeln!(\u2026, \"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | *early\u2e3a*\n`print!(\"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`println!(\"\u2026\", $tmp)` | *early\u2e3a* | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`eprint!(\"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`eprintln!(\"\u2026\", $tmp)` | *early\u2e3a* | **\u2e3alate**| *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`panic!(\"\u2026\", $tmp)` | *early\u2e3a* | *early\u2e3a* | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n\n\"Late drop\" refers to dropping temporaries at the nearest semicolon **outside** of the macro invocation.\n\n\"Early drop\" refers to dropping temporaries inside of the macro invocation.", "tree": {"sha": "54551d84db7fcc7828df93d7f443818df0033726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54551d84db7fcc7828df93d7f443818df0033726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4rz/CRBK7hj4Ov3rIwAAwFMIAA42SF5XHyD/s9JmylXe/JKo\nYoxpVfZr68GVhdqmI3OMdo+Hz/8Xd3DBFSuEzZIn3yssC9vFF0mZNj9n9oCfNGMk\nojbVNa/sp4RwiUk9BiAOXdctCw1AL0fKRU9cxE/TGvMEwfB+wzNsImNmw6XDVWvN\n+MqpAA8bgz2qrhhR7Ty5RSK3woBceba4kI0B3Z1Ki0sXN1JqZCp3TMpqnPOxAfic\nGfjghKqqfksfYCQLdKWqTdQaiGB57Mv5ggX3oU6tNAzVKkwRiGpBV0tc2cm/6oe7\nGLmChJSLCGTZaz113bDJdovtP4bTL9NqiMC3CeMRLaXaWH7eeTxpWB8sdu/5GQc=\n=fWP8\n-----END PGP SIGNATURE-----\n", "payload": "tree 54551d84db7fcc7828df93d7f443818df0033726\nparent a479cab09a26149d84a5a4948d4738c365a1f26c\nparent ffab6bf10ffcb4b76042c96e339513fdba4c6009\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659026686 +0530\ncommitter GitHub <noreply@github.com> 1659026686 +0530\n\nRollup merge of #99689 - dtolnay:write, r=Mark-Simulacrum\n\nRevert `write!` and `writeln!` to late drop temporaries\n\nCloses (on master, but not on beta) #99684 by reverting the `write!` and `writeln!` parts of #96455.\n\nargument position | before<br>#94868 | after<br>#94868 | after<br>#96455 | after<br>this PR | desired<br>(unimplementable)\n--- |:---:|:---:|:---:|:---:|:---:\n`write!($tmp, \"\u2026\", \u2026)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | **\u2e3alate**\n`write!(\u2026, \"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | *early\u2e3a*\n`writeln!($tmp, \"\u2026\", \u2026)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | **\u2e3alate**\n`writeln!(\u2026, \"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | **\u2e3alate** | *early\u2e3a*\n`print!(\"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`println!(\"\u2026\", $tmp)` | *early\u2e3a* | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`eprint!(\"\u2026\", $tmp)` | **\u2e3alate** | **\u2e3alate** | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`eprintln!(\"\u2026\", $tmp)` | *early\u2e3a* | **\u2e3alate**| *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n`panic!(\"\u2026\", $tmp)` | *early\u2e3a* | *early\u2e3a* | *early\u2e3a* | *early\u2e3a* | *early\u2e3a*\n\n\"Late drop\" refers to dropping temporaries at the nearest semicolon **outside** of the macro invocation.\n\n\"Early drop\" refers to dropping temporaries inside of the macro invocation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "html_url": "https://github.com/rust-lang/rust/commit/48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a479cab09a26149d84a5a4948d4738c365a1f26c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a479cab09a26149d84a5a4948d4738c365a1f26c", "html_url": "https://github.com/rust-lang/rust/commit/a479cab09a26149d84a5a4948d4738c365a1f26c"}, {"sha": "ffab6bf10ffcb4b76042c96e339513fdba4c6009", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffab6bf10ffcb4b76042c96e339513fdba4c6009", "html_url": "https://github.com/rust-lang/rust/commit/ffab6bf10ffcb4b76042c96e339513fdba4c6009"}], "stats": {"total": 160, "additions": 136, "deletions": 24}, "files": [{"sha": "3a115a8b8b6c614e343a0ae1f807d3cc4e03f255", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "patch": "@@ -496,10 +496,9 @@ macro_rules! r#try {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\n macro_rules! write {\n-    ($dst:expr, $($arg:tt)*) => {{\n-        let result = $dst.write_fmt($crate::format_args!($($arg)*));\n-        result\n-    }};\n+    ($dst:expr, $($arg:tt)*) => {\n+        $dst.write_fmt($crate::format_args!($($arg)*))\n+    };\n }\n \n /// Write formatted data into a buffer, with a newline appended.\n@@ -554,10 +553,9 @@ macro_rules! writeln {\n     ($dst:expr $(,)?) => {\n         $crate::write!($dst, \"\\n\")\n     };\n-    ($dst:expr, $($arg:tt)*) => {{\n-        let result = $dst.write_fmt($crate::format_args_nl!($($arg)*));\n-        result\n-    }};\n+    ($dst:expr, $($arg:tt)*) => {\n+        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n+    };\n }\n \n /// Indicates unreachable code."}, {"sha": "d959329b9fce29fc84e0b3b1028323ab4711d1c8", "filename": "src/test/ui/macros/format-args-temporaries-async.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-async.rs?ref=48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition:2021\n+\n+use std::fmt::{self, Display};\n+use std::future::Future;\n+use std::io;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct AsyncStdout;\n+\n+impl AsyncStdout {\n+    fn write_fmt<'a>(&'a mut self, _args: fmt::Arguments) -> WriteFmtFuture<'a, Self>\n+    where\n+        Self: Unpin,\n+    {\n+        WriteFmtFuture(self)\n+    }\n+}\n+\n+struct WriteFmtFuture<'a, T>(&'a mut T);\n+\n+impl<'a, T> Future for WriteFmtFuture<'a, T> {\n+    type Output = io::Result<()>;\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn async_main() {\n+    let _write = write!(&mut AsyncStdout, \"...\").await;\n+    let _writeln = writeln!(&mut AsyncStdout, \"...\").await;\n+}\n+\n+fn main() {\n+    let _ = async_main;\n+}"}, {"sha": "339ccbc33ac98161f18ad0c0e85d1a340b18a29d", "filename": "src/test/ui/macros/format-args-temporaries-in-write.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs?ref=48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "patch": "@@ -0,0 +1,50 @@\n+// check-fail\n+\n+use std::fmt::{self, Display};\n+\n+struct Mutex;\n+\n+impl Mutex {\n+    fn lock(&self) -> MutexGuard {\n+        MutexGuard(self)\n+    }\n+}\n+\n+struct MutexGuard<'a>(&'a Mutex);\n+\n+impl<'a> Drop for MutexGuard<'a> {\n+    fn drop(&mut self) {\n+        // Empty but this is a necessary part of the repro. Otherwise borrow\n+        // checker is fine with 'a dangling at the time that MutexGuard goes out\n+        // of scope.\n+    }\n+}\n+\n+struct Out;\n+\n+impl Out {\n+    fn write_fmt(&self, _args: fmt::Arguments) {}\n+}\n+\n+impl<'a> Display for MutexGuard<'a> {\n+    fn fmt(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+fn main() {\n+    // FIXME(dtolnay): We actually want both of these to work. I think it's\n+    // sadly unimplementable today though.\n+\n+    let _write = {\n+        let mutex = Mutex;\n+        write!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+        //~^ ERROR `mutex` does not live long enough\n+    };\n+\n+    let _writeln = {\n+        let mutex = Mutex;\n+        writeln!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+        //~^ ERROR `mutex` does not live long enough\n+    };\n+}"}, {"sha": "03ecc4b4418c61aa25f065301dfd25f89ad619e2", "filename": "src/test/ui/macros/format-args-temporaries-in-write.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr?ref=48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "patch": "@@ -0,0 +1,43 @@\n+error[E0597]: `mutex` does not live long enough\n+  --> $DIR/format-args-temporaries-in-write.rs:41:27\n+   |\n+LL |         write!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+   |                           ^^^^^^^^^^^^\n+   |                           |\n+   |                           borrowed value does not live long enough\n+   |                           a temporary with access to the borrow is created here ...\n+LL |\n+LL |     };\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `MutexGuard`\n+   |     |\n+   |     `mutex` dropped here while still borrowed\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.write_fmt($crate::format_args!($($arg)*));\n+   |                                                       +\n+\n+error[E0597]: `mutex` does not live long enough\n+  --> $DIR/format-args-temporaries-in-write.rs:47:29\n+   |\n+LL |         writeln!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+   |                             ^^^^^^^^^^^^\n+   |                             |\n+   |                             borrowed value does not live long enough\n+   |                             a temporary with access to the borrow is created here ...\n+LL |\n+LL |     };\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `MutexGuard`\n+   |     |\n+   |     `mutex` dropped here while still borrowed\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.write_fmt($crate::format_args_nl!($($arg)*));\n+   |                                                          +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "59323828bc37f0d9de2aaaf685104f0beb2f2d65", "filename": "src/test/ui/macros/format-args-temporaries.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efd30c9d2eac9c1dc4e3896510ae5ded763d26/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs?ref=48efd30c9d2eac9c1dc4e3896510ae5ded763d26", "patch": "@@ -20,29 +20,13 @@ impl<'a> Drop for MutexGuard<'a> {\n     }\n }\n \n-impl<'a> MutexGuard<'a> {\n-    fn write_fmt(&self, _args: fmt::Arguments) {}\n-}\n-\n impl<'a> Display for MutexGuard<'a> {\n     fn fmt(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {\n         Ok(())\n     }\n }\n \n fn main() {\n-    let _write = {\n-        let out = Mutex;\n-        let mutex = Mutex;\n-        write!(out.lock(), \"{}\", mutex.lock()) /* no semicolon */\n-    };\n-\n-    let _writeln = {\n-        let out = Mutex;\n-        let mutex = Mutex;\n-        writeln!(out.lock(), \"{}\", mutex.lock()) /* no semicolon */\n-    };\n-\n     let _print = {\n         let mutex = Mutex;\n         print!(\"{}\", mutex.lock()) /* no semicolon */"}]}