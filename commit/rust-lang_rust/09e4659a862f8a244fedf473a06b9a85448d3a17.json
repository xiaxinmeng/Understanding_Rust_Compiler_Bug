{"sha": "09e4659a862f8a244fedf473a06b9a85448d3a17", "node_id": "C_kwDOAAsO6NoAKDA5ZTQ2NTlhODYyZjhhMjQ0ZmVkZjQ3M2EwNmI5YTg1NDQ4ZDNhMTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-30T18:20:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-30T18:20:45Z"}, "message": "Auto merge of #9373 - lukaslueg:result_large_err, r=Alexendoo\n\nInitial implementation `result_large_err`\n\nThis is a shot at #6560, #4652, and #3884. The lint checks for `Result` being returned from functions/methods where the `Err` variant is larger than a configurable threshold (the default of which is 128 bytes). There has been some discussion around this, which I'll try to quickly summarize:\n\n* A large `Err`-variant may force an equally large `Result` if `Err` is actually bigger than `Ok`.\n* There is a cost involved in large `Result`, as LLVM may choose to `memcpy` them around above a certain size.\n* We usually expect the `Err` variant to be seldomly used, but pay the cost every time.\n* `Result` returned from library code has a high chance of bubbling up the call stack, getting stuffed into `MyLibError { IoError(std::io::Error), ParseError(parselib::Error), ...}`, exacerbating the problem.\n\nThis PR deliberately does not take into account comparing the `Ok` to the `Err` variant (e.g. a ratio, or one being larger than the other). Rather we choose an absolute threshold for `Err`'s size, above which we warn. The reason for this is that `Err`s probably get `map_err`'ed further up the call stack, and we can't draw conclusions from the ratio at the point where the `Result` is returned. A relative threshold would also be less predictable, while not accounting for the cost of LLVM being forced to generate less efficient code if the `Err`-variant is _large_ in absolute terms.\n\nWe lint private functions as well as public functions, as the perf-cost applies to in-crate code as well.\n\nIn order to account for type-parameters, I conjured up `fn approx_ty_size`. The function relies on `LateContext::layout_of` to compute the actual size, and in case of failure (e.g. due to generics) tries to come up with an \"at least size\". In the latter case, the size of obviously wrong, but the inspected size certainly can't be smaller than that. Please give the approach a heavy dose of review, as I'm not actually familiar with the type-system at all (read: I have no idea what I'm doing).\n\nThe approach does, however flimsy it is, allow us to successfully lint situations like\n\n```rust\npub union UnionError<T: Copy> {\n    _maybe: T,\n    _or_perhaps_even: (T, [u8; 512]),\n}\n\n// We know `UnionError<T>` will be at least 512 bytes, no matter what `T` is\npub fn param_large_union<T: Copy>() -> Result<(), UnionError<T>> {\n    Ok(())\n}\n```\n\nI've given some refactoring to `functions/result_unit_err.rs` to re-use some bits. This is also the groundwork for #6409\n\nThe default threshold is 128 because of https://github.com/rust-lang/rust-clippy/issues/4652#issue-505670554\n\n`lintcheck` does not trigger this lint for a threshold of 128. It does warn for 64, though.\n\nThe suggestion currently is the following, which is just a placeholder for discussion to be had. I did have the computed size in a `span_label`. However, that might cause both ui-tests here and lints elsewhere to become flaky wrt to their output (as the size is platform dependent).\n\n```\nerror: the `Err`-variant returned via this `Result` is very large\n  --> $DIR/result_large_err.rs:36:34\n   |\nLL | pub fn param_large_error<R>() -> Result<(), (u128, R, FullyDefinedLargeError)> {\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The `Err` variant is unusually large, at least 128 bytes\n```\n\nchangelog: Add [`result_large_err`] lint", "tree": {"sha": "7829e93161de14c2254bc1f18d06c994ed8b0ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7829e93161de14c2254bc1f18d06c994ed8b0ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e4659a862f8a244fedf473a06b9a85448d3a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e4659a862f8a244fedf473a06b9a85448d3a17", "html_url": "https://github.com/rust-lang/rust/commit/09e4659a862f8a244fedf473a06b9a85448d3a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e4659a862f8a244fedf473a06b9a85448d3a17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df60321003440948a6628c348746e94a1518ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4df60321003440948a6628c348746e94a1518ae0", "html_url": "https://github.com/rust-lang/rust/commit/4df60321003440948a6628c348746e94a1518ae0"}, {"sha": "66a97055b2721700b472e4460a560c8ded70b3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a97055b2721700b472e4460a560c8ded70b3c2", "html_url": "https://github.com/rust-lang/rust/commit/66a97055b2721700b472e4460a560c8ded70b3c2"}], "stats": {"total": 472, "additions": 401, "deletions": 71}, "files": [{"sha": "c488c142e46fc2847fe41d7c3c3582508a705eac", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -4025,6 +4025,7 @@ Released 2018-09-13\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n+[`result_large_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else"}, {"sha": "90911e0bf2595ca667b9b3f14b0a755c0e4290f6", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -1,6 +1,6 @@\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n-mod result_unit_err;\n+mod result;\n mod too_many_arguments;\n mod too_many_lines;\n \n@@ -217,17 +217,62 @@ declare_clippy_lint! {\n     \"public function returning `Result` with an `Err` type of `()`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for functions that return `Result` with an unusually large\n+    /// `Err`-variant.\n+    ///\n+    /// ### Why is this bad?\n+    /// A `Result` is at least as large as the `Err`-variant. While we\n+    /// expect that variant to be seldomly used, the compiler needs to reserve\n+    /// and move that much memory every single time.\n+    ///\n+    /// ### Known problems\n+    /// The size determined by Clippy is platform-dependent.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// pub enum ParseError {\n+    ///     UnparsedBytes([u8; 512]),\n+    ///     UnexpectedEof,\n+    /// }\n+    ///\n+    /// // The `Result` has at least 512 bytes, even in the `Ok`-case\n+    /// pub fn parse() -> Result<(), ParseError> {\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    /// should be\n+    /// ```\n+    /// pub enum ParseError {\n+    ///     UnparsedBytes(Box<[u8; 512]>),\n+    ///     UnexpectedEof,\n+    /// }\n+    ///\n+    /// // The `Result` is slightly larger than a pointer\n+    /// pub fn parse() -> Result<(), ParseError> {\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub RESULT_LARGE_ERR,\n+    perf,\n+    \"function returning `Result` with large `Err` type\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n     too_many_lines_threshold: u64,\n+    large_error_threshold: u64,\n }\n \n impl Functions {\n-    pub fn new(too_many_arguments_threshold: u64, too_many_lines_threshold: u64) -> Self {\n+    pub fn new(too_many_arguments_threshold: u64, too_many_lines_threshold: u64, large_error_threshold: u64) -> Self {\n         Self {\n             too_many_arguments_threshold,\n             too_many_lines_threshold,\n+            large_error_threshold,\n         }\n     }\n }\n@@ -240,6 +285,7 @@ impl_lint_pass!(Functions => [\n     DOUBLE_MUST_USE,\n     MUST_USE_CANDIDATE,\n     RESULT_UNIT_ERR,\n+    RESULT_LARGE_ERR,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -259,18 +305,18 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         must_use::check_item(cx, item);\n-        result_unit_err::check_item(cx, item);\n+        result::check_item(cx, item, self.large_error_threshold);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         must_use::check_impl_item(cx, item);\n-        result_unit_err::check_impl_item(cx, item);\n+        result::check_impl_item(cx, item, self.large_error_threshold);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         too_many_arguments::check_trait_item(cx, item, self.too_many_arguments_threshold);\n         not_unsafe_ptr_arg_deref::check_trait_item(cx, item);\n         must_use::check_trait_item(cx, item);\n-        result_unit_err::check_trait_item(cx, item);\n+        result::check_trait_item(cx, item, self.large_error_threshold);\n     }\n }"}, {"sha": "af520a493eda168b649d8bc9de9ce742de1b9169", "filename": "clippy_lints/src/functions/result.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -0,0 +1,100 @@\n+use rustc_errors::Diagnostic;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty};\n+use rustc_span::{sym, Span};\n+use rustc_typeck::hir_ty_to_ty;\n+\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n+use clippy_utils::trait_ref_of_method;\n+use clippy_utils::ty::{approx_ty_size, is_type_diagnostic_item};\n+\n+use super::{RESULT_LARGE_ERR, RESULT_UNIT_ERR};\n+\n+/// The type of the `Err`-variant in a `std::result::Result` returned by the\n+/// given `FnDecl`\n+fn result_err_ty<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    decl: &hir::FnDecl<'tcx>,\n+    item_span: Span,\n+) -> Option<(&'tcx hir::Ty<'tcx>, Ty<'tcx>)> {\n+    if !in_external_macro(cx.sess(), item_span)\n+        && let hir::FnRetTy::Return(hir_ty) = decl.output\n+        && let ty = hir_ty_to_ty(cx.tcx, hir_ty)\n+        && is_type_diagnostic_item(cx, ty, sym::Result)\n+        && let ty::Adt(_, substs) = ty.kind()\n+    {\n+        let err_ty = substs.type_at(1);\n+        Some((hir_ty, err_ty))\n+    } else {\n+        None\n+    }\n+}\n+\n+pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, large_err_threshold: u64) {\n+    if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.span)\n+    {\n+        if cx.access_levels.is_exported(item.def_id) {\n+            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+            check_result_unit_err(cx, err_ty, fn_header_span);\n+        }\n+        check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);\n+    }\n+}\n+\n+pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem<'tcx>, large_err_threshold: u64) {\n+    // Don't lint if method is a trait's implementation, we can't do anything about those\n+    if let hir::ImplItemKind::Fn(ref sig, _) = item.kind\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.span)\n+        && trait_ref_of_method(cx, item.def_id).is_none()\n+    {\n+        if cx.access_levels.is_exported(item.def_id) {\n+            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+            check_result_unit_err(cx, err_ty, fn_header_span);\n+        }\n+        check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);\n+    }\n+}\n+\n+pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::TraitItem<'tcx>, large_err_threshold: u64) {\n+    if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n+        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.span) {\n+            if cx.access_levels.is_exported(item.def_id) {\n+                check_result_unit_err(cx, err_ty, fn_header_span);\n+            }\n+            check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);\n+        }\n+    }\n+}\n+\n+fn check_result_unit_err(cx: &LateContext<'_>, err_ty: Ty<'_>, fn_header_span: Span) {\n+    if err_ty.is_unit() {\n+        span_lint_and_help(\n+            cx,\n+            RESULT_UNIT_ERR,\n+            fn_header_span,\n+            \"this returns a `Result<_, ()>`\",\n+            None,\n+            \"use a custom `Error` type instead\",\n+        );\n+    }\n+}\n+\n+fn check_result_large_err<'tcx>(cx: &LateContext<'tcx>, err_ty: Ty<'tcx>, hir_ty_span: Span, large_err_threshold: u64) {\n+    let ty_size = approx_ty_size(cx, err_ty);\n+    if ty_size >= large_err_threshold {\n+        span_lint_and_then(\n+            cx,\n+            RESULT_LARGE_ERR,\n+            hir_ty_span,\n+            \"the `Err`-variant returned from this function is very large\",\n+            |diag: &mut Diagnostic| {\n+                diag.span_label(hir_ty_span, format!(\"the `Err`-variant is at least {ty_size} bytes\"));\n+                diag.help(format!(\"try reducing the size of `{err_ty}`, for example by boxing large elements or replacing it with `Box<{err_ty}>`\"));\n+            },\n+        );\n+    }\n+}"}, {"sha": "2e63a1f920d64b39a69ad214ecd4cb6e03ada3a2", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4df60321003440948a6628c348746e94a1518ae0/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df60321003440948a6628c348746e94a1518ae0/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=4df60321003440948a6628c348746e94a1518ae0", "patch": "@@ -1,66 +0,0 @@\n-use rustc_hir as hir;\n-use rustc_lint::{LateContext, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty;\n-use rustc_span::{sym, Span};\n-use rustc_typeck::hir_ty_to_ty;\n-\n-use if_chain::if_chain;\n-\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::trait_ref_of_method;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-\n-use super::RESULT_UNIT_ERR;\n-\n-pub(super) fn check_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-    if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n-        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public {\n-            check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n-        }\n-    }\n-}\n-\n-pub(super) fn check_impl_item(cx: &LateContext<'_>, item: &hir::ImplItem<'_>) {\n-    if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n-        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public && trait_ref_of_method(cx, item.def_id).is_none() {\n-            check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n-        }\n-    }\n-}\n-\n-pub(super) fn check_trait_item(cx: &LateContext<'_>, item: &hir::TraitItem<'_>) {\n-    if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n-        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public {\n-            check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n-        }\n-    }\n-}\n-\n-fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span: Span, fn_header_span: Span) {\n-    if_chain! {\n-        if !in_external_macro(cx.sess(), item_span);\n-        if let hir::FnRetTy::Return(ty) = decl.output;\n-        let ty = hir_ty_to_ty(cx.tcx, ty);\n-        if is_type_diagnostic_item(cx, ty, sym::Result);\n-        if let ty::Adt(_, substs) = ty.kind();\n-        let err_ty = substs.type_at(1);\n-        if err_ty.is_unit();\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                RESULT_UNIT_ERR,\n-                fn_header_span,\n-                \"this returns a `Result<_, ()>`\",\n-                None,\n-                \"use a custom `Error` type instead\",\n-            );\n-        }\n-    }\n-}"}, {"sha": "134cbbf7b5c66ad5f218173022533dc55b19c77b", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -80,6 +80,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+    LintId::of(functions::RESULT_LARGE_ERR),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),"}, {"sha": "fd20e016578a1bad268088cfe5dac73f0182b881", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -171,6 +171,7 @@ store.register_lints(&[\n     functions::MUST_USE_CANDIDATE,\n     functions::MUST_USE_UNIT,\n     functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+    functions::RESULT_LARGE_ERR,\n     functions::RESULT_UNIT_ERR,\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,"}, {"sha": "195ce41e31e9f6b4687633830b35d974eca6ef3c", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n+    LintId::of(functions::RESULT_LARGE_ERR),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(loops::MANUAL_MEMCPY),"}, {"sha": "178e57aaf61ffbaa7c5add613bbfc0d3c70db39d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -668,10 +668,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n+    let large_error_threshold = conf.large_error_threshold;\n     store.register_late_pass(move || {\n         Box::new(functions::Functions::new(\n             too_many_arguments_threshold,\n             too_many_lines_threshold,\n+            large_error_threshold,\n         ))\n     });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();"}, {"sha": "84e65d5fa0b719044d3d43705141e5656aa9f63e", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -379,6 +379,10 @@ define_Conf! {\n     ///\n     /// Whether `dbg!` should be allowed in test functions\n     (allow_dbg_in_tests: bool = false),\n+    /// Lint: RESULT_LARGE_ERR\n+    ///\n+    /// The maximum size of the `Err`-variant in a `Result` returned from a function\n+    (large_error_threshold: u64 = 128),\n }\n \n /// Search for the configuration file."}, {"sha": "5a7f9568441c90acb857177748168c1f763772ca", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -831,3 +831,53 @@ pub fn ty_is_fn_once_param<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, predicates: &'tc\n         })\n         .unwrap_or(false)\n }\n+\n+/// Comes up with an \"at least\" guesstimate for the type's size, not taking into\n+/// account the layout of type parameters.\n+pub fn approx_ty_size<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> u64 {\n+    use rustc_middle::ty::layout::LayoutOf;\n+    if !is_normalizable(cx, cx.param_env, ty) {\n+        return 0;\n+    }\n+    match (cx.layout_of(ty).map(|layout| layout.size.bytes()), ty.kind()) {\n+        (Ok(size), _) => size,\n+        (Err(_), ty::Tuple(list)) => list.as_substs().types().map(|t| approx_ty_size(cx, t)).sum(),\n+        (Err(_), ty::Array(t, n)) => {\n+            n.try_eval_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n+        },\n+        (Err(_), ty::Adt(def, subst)) if def.is_struct() => def\n+            .variants()\n+            .iter()\n+            .map(|v| {\n+                v.fields\n+                    .iter()\n+                    .map(|field| approx_ty_size(cx, field.ty(cx.tcx, subst)))\n+                    .sum::<u64>()\n+            })\n+            .sum(),\n+        (Err(_), ty::Adt(def, subst)) if def.is_enum() => def\n+            .variants()\n+            .iter()\n+            .map(|v| {\n+                v.fields\n+                    .iter()\n+                    .map(|field| approx_ty_size(cx, field.ty(cx.tcx, subst)))\n+                    .sum::<u64>()\n+            })\n+            .max()\n+            .unwrap_or_default(),\n+        (Err(_), ty::Adt(def, subst)) if def.is_union() => def\n+            .variants()\n+            .iter()\n+            .map(|v| {\n+                v.fields\n+                    .iter()\n+                    .map(|field| approx_ty_size(cx, field.ty(cx.tcx, subst)))\n+                    .max()\n+                    .unwrap_or_default()\n+            })\n+            .max()\n+            .unwrap_or_default(),\n+        (Err(_), _) => 0,\n+    }\n+}"}, {"sha": "a52a0b5289fe4839f22bc68f9ec1bbfb206fc6e2", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -19,6 +19,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            enforced-import-renames\n            enum-variant-name-threshold\n            enum-variant-size-threshold\n+           large-error-threshold\n            literal-representation-threshold\n            max-fn-params-bools\n            max-include-file-size"}, {"sha": "78d8f76fe669fb32926d4459252735166997062d", "filename": "tests/ui/result_large_err.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui%2Fresult_large_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui%2Fresult_large_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.rs?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -0,0 +1,98 @@\n+#![warn(clippy::result_large_err)]\n+\n+pub fn small_err() -> Result<(), u128> {\n+    Ok(())\n+}\n+\n+pub fn large_err() -> Result<(), [u8; 512]> {\n+    Ok(())\n+}\n+\n+pub struct FullyDefinedLargeError {\n+    _foo: u128,\n+    _bar: [u8; 100],\n+    _foobar: [u8; 120],\n+}\n+\n+impl FullyDefinedLargeError {\n+    pub fn ret() -> Result<(), Self> {\n+        Ok(())\n+    }\n+}\n+\n+pub fn struct_error() -> Result<(), FullyDefinedLargeError> {\n+    Ok(())\n+}\n+\n+type Fdlr<T> = std::result::Result<T, FullyDefinedLargeError>;\n+pub fn large_err_via_type_alias<T>(x: T) -> Fdlr<T> {\n+    Ok(x)\n+}\n+\n+pub fn param_small_error<R>() -> Result<(), (R, u128)> {\n+    Ok(())\n+}\n+\n+pub fn param_large_error<R>() -> Result<(), (u128, R, FullyDefinedLargeError)> {\n+    Ok(())\n+}\n+\n+pub enum LargeErrorVariants<T> {\n+    _Small(u8),\n+    _Omg([u8; 512]),\n+    _Param(T),\n+}\n+\n+impl LargeErrorVariants<()> {\n+    pub fn large_enum_error() -> Result<(), Self> {\n+        Ok(())\n+    }\n+}\n+\n+trait TraitForcesLargeError {\n+    fn large_error() -> Result<(), [u8; 512]> {\n+        Ok(())\n+    }\n+}\n+\n+struct TraitImpl;\n+\n+impl TraitForcesLargeError for TraitImpl {\n+    // Should not lint\n+    fn large_error() -> Result<(), [u8; 512]> {\n+        Ok(())\n+    }\n+}\n+\n+pub union FullyDefinedUnionError {\n+    _maybe: u8,\n+    _or_even: [[u8; 16]; 32],\n+}\n+\n+pub fn large_union_err() -> Result<(), FullyDefinedUnionError> {\n+    Ok(())\n+}\n+\n+pub union UnionError<T: Copy> {\n+    _maybe: T,\n+    _or_perhaps_even: (T, [u8; 512]),\n+}\n+\n+pub fn param_large_union<T: Copy>() -> Result<(), UnionError<T>> {\n+    Ok(())\n+}\n+\n+pub struct ArrayError<T, U> {\n+    _large_array: [T; 32],\n+    _other_stuff: U,\n+}\n+\n+pub fn array_error_subst<U>() -> Result<(), ArrayError<i32, U>> {\n+    Ok(())\n+}\n+\n+pub fn array_error<T, U>() -> Result<(), ArrayError<(i32, T), U>> {\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "0f1f39d72cba187cff97f89762840cc32023c90c", "filename": "tests/ui/result_large_err.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui%2Fresult_large_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09e4659a862f8a244fedf473a06b9a85448d3a17/tests%2Fui%2Fresult_large_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.stderr?ref=09e4659a862f8a244fedf473a06b9a85448d3a17", "patch": "@@ -0,0 +1,91 @@\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:7:23\n+   |\n+LL | pub fn large_err() -> Result<(), [u8; 512]> {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n+   |\n+   = note: `-D clippy::result-large-err` implied by `-D warnings`\n+   = help: try reducing the size of `[u8; 512]`, for example by boxing large elements or replacing it with `Box<[u8; 512]>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:18:21\n+   |\n+LL |     pub fn ret() -> Result<(), Self> {\n+   |                     ^^^^^^^^^^^^^^^^ the `Err`-variant is at least 240 bytes\n+   |\n+   = help: try reducing the size of `FullyDefinedLargeError`, for example by boxing large elements or replacing it with `Box<FullyDefinedLargeError>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:23:26\n+   |\n+LL | pub fn struct_error() -> Result<(), FullyDefinedLargeError> {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 240 bytes\n+   |\n+   = help: try reducing the size of `FullyDefinedLargeError`, for example by boxing large elements or replacing it with `Box<FullyDefinedLargeError>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:28:45\n+   |\n+LL | pub fn large_err_via_type_alias<T>(x: T) -> Fdlr<T> {\n+   |                                             ^^^^^^^ the `Err`-variant is at least 240 bytes\n+   |\n+   = help: try reducing the size of `FullyDefinedLargeError`, for example by boxing large elements or replacing it with `Box<FullyDefinedLargeError>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:36:34\n+   |\n+LL | pub fn param_large_error<R>() -> Result<(), (u128, R, FullyDefinedLargeError)> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 256 bytes\n+   |\n+   = help: try reducing the size of `(u128, R, FullyDefinedLargeError)`, for example by boxing large elements or replacing it with `Box<(u128, R, FullyDefinedLargeError)>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:47:34\n+   |\n+LL |     pub fn large_enum_error() -> Result<(), Self> {\n+   |                                  ^^^^^^^^^^^^^^^^ the `Err`-variant is at least 513 bytes\n+   |\n+   = help: try reducing the size of `LargeErrorVariants<()>`, for example by boxing large elements or replacing it with `Box<LargeErrorVariants<()>>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:53:25\n+   |\n+LL |     fn large_error() -> Result<(), [u8; 512]> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n+   |\n+   = help: try reducing the size of `[u8; 512]`, for example by boxing large elements or replacing it with `Box<[u8; 512]>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:72:29\n+   |\n+LL | pub fn large_union_err() -> Result<(), FullyDefinedUnionError> {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n+   |\n+   = help: try reducing the size of `FullyDefinedUnionError`, for example by boxing large elements or replacing it with `Box<FullyDefinedUnionError>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:81:40\n+   |\n+LL | pub fn param_large_union<T: Copy>() -> Result<(), UnionError<T>> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n+   |\n+   = help: try reducing the size of `UnionError<T>`, for example by boxing large elements or replacing it with `Box<UnionError<T>>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:90:34\n+   |\n+LL | pub fn array_error_subst<U>() -> Result<(), ArrayError<i32, U>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 128 bytes\n+   |\n+   = help: try reducing the size of `ArrayError<i32, U>`, for example by boxing large elements or replacing it with `Box<ArrayError<i32, U>>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:94:31\n+   |\n+LL | pub fn array_error<T, U>() -> Result<(), ArrayError<(i32, T), U>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 128 bytes\n+   |\n+   = help: try reducing the size of `ArrayError<(i32, T), U>`, for example by boxing large elements or replacing it with `Box<ArrayError<(i32, T), U>>`\n+\n+error: aborting due to 11 previous errors\n+"}]}