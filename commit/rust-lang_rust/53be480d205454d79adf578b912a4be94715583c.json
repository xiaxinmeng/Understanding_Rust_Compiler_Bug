{"sha": "53be480d205454d79adf578b912a4be94715583c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYmU0ODBkMjA1NDU0ZDc5YWRmNTc4YjkxMmE0YmU5NDcxNTU4M2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T04:17:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:08Z"}, "message": "Convert std::int to istrs. Issue #855", "tree": {"sha": "0862c289cfd37cf89aa7dbad1852e3a7e749bde1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0862c289cfd37cf89aa7dbad1852e3a7e749bde1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53be480d205454d79adf578b912a4be94715583c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53be480d205454d79adf578b912a4be94715583c", "html_url": "https://github.com/rust-lang/rust/commit/53be480d205454d79adf578b912a4be94715583c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53be480d205454d79adf578b912a4be94715583c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "html_url": "https://github.com/rust-lang/rust/commit/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9"}], "stats": {"total": 143, "additions": 92, "deletions": 51}, "files": [{"sha": "918fc05fb251ea72984459eb80b38722a8d9afa3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -27,6 +27,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n import std::str;\n+import std::istr;\n import std::vec;\n import std::int;\n import std::io;\n@@ -189,16 +190,18 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         alt node {\n           pprust::node_item(s, item) {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(item.id, 10u));\n+            pprust::synth_comment(\n+                s, istr::to_estr(int::to_str(item.id, 10u)));\n           }\n           pprust::node_block(s, blk) {\n             pp::space(s.s);\n-            pprust::synth_comment(s,\n-                                  \"block \" + int::to_str(blk.node.id, 10u));\n+            pprust::synth_comment(\n+                s, istr::to_estr(~\"block \" + int::to_str(blk.node.id, 10u)));\n           }\n           pprust::node_expr(s, expr) {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(expr.id, 10u));\n+            pprust::synth_comment(\n+                s, istr::to_estr(int::to_str(expr.id, 10u)));\n             pprust::pclose(s);\n           }\n           _ { }"}, {"sha": "591e2270cd24df5c2e3227fac2e34ef8510661e9", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -1,5 +1,6 @@\n import std::vec;\n import std::str;\n+import std::istr;\n import std::str::rustrt::sbuf;\n \n import llvm::ModuleRef;\n@@ -976,7 +977,8 @@ fn type_to_str_inner(names: type_names, outer0: &[TypeRef], ty: TypeRef) ->\n \n \n       7 {\n-        ret \"i\" + std::int::str(llvm::LLVMGetIntTypeWidth(ty) as int);\n+        ret \"i\" + istr::to_estr(std::int::str(\n+            llvm::LLVMGetIntTypeWidth(ty) as int));\n       }\n \n \n@@ -1020,7 +1022,7 @@ fn type_to_str_inner(names: type_names, outer0: &[TypeRef], ty: TypeRef) ->\n             i += 1u;\n             if tout as int == ty as int {\n                 let n: uint = vec::len::<TypeRef>(outer0) - i;\n-                ret \"*\\\\\" + std::int::str(n as int);\n+                ret \"*\\\\\" + istr::to_estr(std::int::str(n as int));\n             }\n         }\n         ret \"*\" +"}, {"sha": "34a810adb3b2b209bc5372e62bd11780759440af", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -172,7 +172,10 @@ fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n         for t: ty::t in tps { enc_ty(w, cx, t); }\n         w.write_char(']');\n       }\n-      ty::ty_var(id) { w.write_char('X'); w.write_str(int::str(id)); }\n+      ty::ty_var(id) {\n+        w.write_char('X');\n+        w.write_str(istr::to_estr(int::str(id)));\n+      }\n       ty::ty_native(def) {\n         w.write_char('E');\n         w.write_str(cx.ds(def));"}, {"sha": "7c68d121602e2c815d0c7d4ab906c2954a7d0c5b", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -5,6 +5,7 @@ import std::map;\n import std::map::*;\n import std::option;\n import std::int;\n+import std::istr;\n import std::option::*;\n import syntax::ast;\n import syntax::ast_util;\n@@ -146,7 +147,10 @@ fn annotate_freevars(sess: &session::session, def_map: &resolve::def_map,\n \n fn get_freevar_info(tcx: &ty::ctxt, fid: ast::node_id) -> freevar_info {\n     alt tcx.freevars.find(fid) {\n-      none. { fail \"get_freevars: \" + int::str(fid) + \" has no freevars\"; }\n+      none. {\n+        fail \"get_freevars: \" + istr::to_estr(int::str(fid))\n+            + \" has no freevars\";\n+      }\n       some(d) { ret d; }\n     }\n }"}, {"sha": "614f371b9bbdf1f9f8e192293e81553920bc283f", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -63,7 +63,9 @@ import trans::type_of_fn_full;\n import trans::drop_ty;\n \n obj namegen(mutable i: int) {\n-    fn next(prefix: str) -> str { i += 1; ret prefix + int::str(i); }\n+    fn next(prefix: str) -> str {\n+        i += 1; ret prefix + istr::to_estr(int::str(i));\n+    }\n }\n \n type derived_tydesc_info = {lltydesc: ValueRef, escapes: bool};"}, {"sha": "e1c664528e9625084d8488c80a7b27c3568dfce9", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -32,12 +32,12 @@ fn collect_ids_block(b: &blk, rs: @mutable [node_id]) { *rs += [b.node.id]; }\n fn collect_ids_stmt(s: &@stmt, rs: @mutable [node_id]) {\n     alt s.node {\n       stmt_decl(_, id) {\n-        log \"node_id \" + int::str(id);\n+        log ~\"node_id \" + int::str(id);\n         log_stmt(*s);;\n         *rs += [id];\n       }\n       stmt_expr(_, id) {\n-        log \"node_id \" + int::str(id);\n+        log ~\"node_id \" + int::str(id);\n         log_stmt(*s);;\n         *rs += [id];\n       }\n@@ -62,7 +62,7 @@ fn node_ids_in_fn(f: &_fn, tps: &[ty_param], sp: &span, i: &fn_ident,\n \n fn init_vecs(ccx: &crate_ctxt, node_ids: &[node_id], len: uint) {\n     for i: node_id in node_ids {\n-        log int::str(i) + \" |-> \" + istr::to_estr(uint::str(len));\n+        log istr::to_estr(int::str(i) + ~\" |-> \" + uint::str(len));\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "49942eaef6bcf72c090d28973b04f132bfa7bf28", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -57,7 +57,7 @@ tag oper_type {\n \n /* logging funs */\n fn def_id_to_str(d: def_id) -> str {\n-    ret int::str(d.crate) + \",\" + int::str(d.node);\n+    ret istr::to_estr(int::str(d.crate) + ~\",\" + int::str(d.node));\n }\n \n fn comma_str(args: &[@constr_arg_use]) -> str {\n@@ -329,7 +329,8 @@ fn get_ts_ann(ccx: &crate_ctxt, i: node_id) -> option::t<ts_ann> {\n fn node_id_to_ts_ann(ccx: &crate_ctxt, id: node_id) -> ts_ann {\n     alt get_ts_ann(ccx, id) {\n       none. {\n-        log_err \"node_id_to_ts_ann: no ts_ann for node_id \" + int::str(id);\n+        log_err \"node_id_to_ts_ann: no ts_ann for node_id \"\n+            + istr::to_estr(int::str(id));\n         fail;\n       }\n       some(t) { ret t; }\n@@ -531,7 +532,8 @@ fn constraints_expr(cx: &ty::ctxt, e: @expr) -> [@ty::constr] {\n fn node_id_to_def_upvar_strict(cx: &fn_ctxt, id: node_id) -> def {\n     alt freevars::def_lookup(cx.ccx.tcx, cx.id, id) {\n       none. {\n-        log_err \"node_id_to_def: node_id \" + int::str(id) + \" has no def\";\n+        log_err \"node_id_to_def: node_id \"\n+            + istr::to_estr(int::str(id)) + \" has no def\";\n         fail;\n       }\n       some(d) { ret d; }\n@@ -540,7 +542,8 @@ fn node_id_to_def_upvar_strict(cx: &fn_ctxt, id: node_id) -> def {\n fn node_id_to_def_strict(cx: &ty::ctxt, id: node_id) -> def {\n     alt cx.def_map.find(id) {\n       none. {\n-        log_err \"node_id_to_def: node_id \" + int::str(id) + \" has no def\";\n+        log_err \"node_id_to_def: node_id \"\n+            + istr::to_estr(int::str(id)) + \" has no def\";\n         fail;\n       }\n       some(d) { ret d; }\n@@ -601,7 +604,8 @@ fn match_args(fcx: &fn_ctxt, occs: &@mutable [pred_args],\n fn def_id_for_constr(tcx: ty::ctxt, t: node_id) -> def_id {\n     alt tcx.def_map.find(t) {\n       none. {\n-        tcx.sess.bug(\"node_id_for_constr: bad node_id \" + int::str(t));\n+        tcx.sess.bug(\"node_id_for_constr: bad node_id \"\n+                     + istr::to_estr(int::str(t)));\n       }\n       some(def_fn(i, _)) { ret i; }\n       _ { tcx.sess.bug(\"node_id_for_constr: pred is not a function\"); }"}, {"sha": "1617dea99c08b86a0acbcdbc069bd6ae751d1458", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -1629,8 +1629,9 @@ fn node_id_to_ty_param_substs_opt_and_ty(cx: &ctxt, id: &ast::node_id) ->\n     alt smallintmap::find(*cx.node_types, id as uint) {\n       none. {\n         cx.sess.bug(\"node_id_to_ty_param_substs_opt_and_ty() called on \" +\n-                        \"an untyped node (\" + std::int::to_str(id, 10u) +\n-                        \")\");\n+                    \"an untyped node (\" +\n+                    istr::to_estr(std::int::to_str(id, 10u)) +\n+                    \")\");\n       }\n       some(tpot) { ret tpot; }\n     }"}, {"sha": "1985928442bf114e52235bad17c4bf3bbaaab7bd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -37,6 +37,7 @@ import middle::ty::unify::fix_err;\n import std::int;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::map;\n import std::map::hashmap;\n@@ -586,7 +587,10 @@ mod collect {\n           some(ast_map::node_native_item(native_item)) {\n             tpt = ty_of_native_item(cx, native_item, ast::native_abi_cdecl);\n           }\n-          _ { cx.tcx.sess.fatal(\"internal error \" + std::int::str(id.node)); }\n+          _ {\n+            cx.tcx.sess.fatal(\n+                \"internal error \" + istr::to_estr(std::int::str(id.node)));\n+          }\n         }\n         ret tpt;\n     }\n@@ -2152,8 +2156,9 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n                     this_obj_sty = some(structure_of(fcx, expr.span, tpt.ty));\n                   }\n                   none. {\n-                    tcx.sess.bug(\"didn't find \" + int::str(did.node) +\n-                                     \" in type cache\");\n+                    tcx.sess.bug(\"didn't find \" +\n+                                 istr::to_estr(int::str(did.node)) +\n+                                 \" in type cache\");\n                   }\n                 }\n               }"}, {"sha": "c70ea3234c480211b2152eecb0c08f226052d69c", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -7,6 +7,7 @@\n  */\n import std::vec;\n import std::str;\n+import std::istr;\n import std::option;\n import std::option::none;\n import std::option::some;\n@@ -258,7 +259,10 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n     }\n     fn log_conv(c: conv) {\n         alt c.param {\n-          some(p) { log \"param: \" + std::int::to_str(p, 10u); }\n+          some(p) {\n+            log \"param: \"\n+                + istr::to_estr(std::int::to_str(p, 10u));\n+          }\n           _ { log \"param: none\"; }\n         }\n         for f: flag in c.flags {\n@@ -271,17 +275,21 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n             }\n         }\n         alt c.width {\n-          count_is(i) { log \"width: count is \" + std::int::to_str(i, 10u); }\n+          count_is(i) { log \"width: count is \"\n+              + istr::to_estr(std::int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log \"width: count is param \" + std::int::to_str(i, 10u);\n+            log \"width: count is param \"\n+                + istr::to_estr(std::int::to_str(i, 10u));\n           }\n           count_is_next_param. { log \"width: count is next param\"; }\n           count_implied. { log \"width: count is implied\"; }\n         }\n         alt c.precision {\n-          count_is(i) { log \"prec: count is \" + std::int::to_str(i, 10u); }\n+          count_is(i) { log \"prec: count is \"\n+              + istr::to_estr(std::int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log \"prec: count is param \" + std::int::to_str(i, 10u);\n+            log \"prec: count is param \"\n+                + istr::to_estr(std::int::to_str(i, 10u));\n           }\n           count_is_next_param. { log \"prec: count is next param\"; }\n           count_implied. { log \"prec: count is implied\"; }"}, {"sha": "4fd5aa4453d12a005bb220557afeab88058d1b75", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -145,11 +145,11 @@ fn to_str(r: lexer::reader, t: token) -> str {\n \n       /* Literals */\n       LIT_INT(i) {\n-        ret int::to_str(i, 10u);\n+        ret istr::to_estr(int::to_str(i, 10u));\n       }\n       LIT_UINT(u) { ret istr::to_estr(uint::to_str(u, 10u)); }\n       LIT_MACH_INT(tm, i) {\n-        ret int::to_str(i, 10u) + \"_\" + ty_mach_to_str(tm);\n+        ret istr::to_estr(int::to_str(i, 10u)) + \"_\" + ty_mach_to_str(tm);\n       }\n       LIT_MACH_FLOAT(tm, s) {\n         ret interner::get::<str>(*r.get_interner(), s) + \"_\" +\n@@ -173,7 +173,7 @@ fn to_str(r: lexer::reader, t: token) -> str {\n       IDENT(s, _) {\n         ret interner::get::<str>(*r.get_interner(), s);\n       }\n-      IDX(i) { ret \"_\" + int::to_str(i, 10u); }\n+      IDX(i) { ret istr::to_estr(~\"_\" + int::to_str(i, 10u)); }\n       UNDERSCORE. { ret \"_\"; }\n       BRACEQUOTE(_) { ret \"<bracequote>\"; }\n       EOF. { ret \"<eof>\"; }"}, {"sha": "bf3942f1eab223e9fa5c6cad8589aba09f5f22b1", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -1498,11 +1498,11 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n              \"'\" + escape_str(str::unsafe_from_bytes([ch as u8]), '\\'') +\n                  \"'\");\n       }\n-      ast::lit_int(val) { word(s.s, int::str(val)); }\n+      ast::lit_int(val) { word(s.s, istr::to_estr(int::str(val))); }\n       ast::lit_uint(val) { word(s.s, istr::to_estr(uint::str(val)) + \"u\"); }\n       ast::lit_float(fstr) { word(s.s, fstr); }\n       ast::lit_mach_int(mach, val) {\n-        word(s.s, int::str(val as int));\n+        word(s.s, istr::to_estr(int::str(val as int)));\n         word(s.s, ast_util::ty_mach_to_str(mach));\n       }\n       ast::lit_mach_float(mach, val) {"}, {"sha": "610b1a54b62cc67c409df17ae8427697bc769476", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -1,5 +1,6 @@\n import std::vec;\n import std::str;\n+import std::istr;\n import std::int;\n import std::option;\n import std::option::none;\n@@ -35,7 +36,10 @@ fn mode_str_1(m: &ty::mode) -> str {\n }\n \n fn fn_ident_to_string(id: ast::node_id, i: &ast::fn_ident) -> str {\n-    ret alt i { none. { \"anon\" + int::str(id) } some(s) { s } };\n+    ret alt i {\n+      none. { istr::to_estr(~\"anon\" + int::str(id)) }\n+      some(s) { s }\n+    };\n }\n \n fn get_id_ident(cx: &ctxt, id: ast::def_id) -> str {\n@@ -139,7 +143,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n             \"obj {\\n\\t\" + str::connect(strs, \"\\n\\t\") + \"\\n}\"\n           }\n           ty_res(id, _, _) { get_id_ident(cx, id) }\n-          ty_var(v) { \"<T\" + int::str(v) + \">\" }\n+          ty_var(v) { istr::to_estr(~\"<T\" + int::str(v) + ~\">\") }\n           ty_param(id, _) {\n             \"'\" + str::unsafe_from_bytes([('a' as u8) + (id as u8)])\n           }"}, {"sha": "902d5295dc19feaa43bce1c03de3d731afda1540", "filename": "src/lib/int.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Flib%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Flib%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fint.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -41,13 +41,13 @@ iter range(lo: int, hi: int) -> int {\n     while lo_ < hi { put lo_; lo_ += 1; }\n }\n \n-fn to_str(n: int, radix: uint) -> str {\n+fn to_str(n: int, radix: uint) -> istr {\n     assert (0u < radix && radix <= 16u);\n     ret if n < 0 {\n-            \"-\" + istr::to_estr(uint::to_str(-n as uint, radix))\n-        } else { istr::to_estr(uint::to_str(n as uint, radix)) };\n+            ~\"-\" + uint::to_str(-n as uint, radix)\n+        } else { uint::to_str(n as uint, radix) };\n }\n-fn str(i: int) -> str { ret to_str(i, 10u); }\n+fn str(i: int) -> istr { ret to_str(i, 10u); }\n \n fn pow(base: int, exponent: uint) -> int {\n     ret if exponent == 0u {"}, {"sha": "95945425a1d2143661b032273bdc54f742075b23", "filename": "src/lib/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -337,7 +337,8 @@ obj new_writer(out: buf_writer) {\n \n         out.write(str::bytes(str::from_char(ch)));\n     }\n-    fn write_int(n: int) { out.write(str::bytes(int::to_str(n, 10u))); }\n+    fn write_int(n: int) { out.write(str::bytes(\n+        istr::to_estr(int::to_str(n, 10u)))); }\n     fn write_uint(n: uint) { out.write(str::bytes(\n         istr::to_estr(uint::to_str(n, 10u)))); }\n     fn write_bytes(bytes: &[u8]) { out.write(bytes); }"}, {"sha": "47263b6cf27b311fcb1d059fdf28a7d5ac659a00", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -7,6 +7,7 @@\n use std;\n import std::int;\n import std::str;\n+import std::istr;\n \n fn b1() -> str { ret \"# of beer on the wall, # of beer.\"; }\n \n@@ -29,7 +30,7 @@ fn sub(t: str, n: int) -> str {\n     alt n {\n       0 { ns = \"no more bottles\"; }\n       1 { ns = \"1 bottle\"; }\n-      _ { ns = int::to_str(n, 10u) + \" bottles\"; }\n+      _ { ns = istr::to_estr(int::to_str(n, 10u) + ~\" bottles\"); }\n     }\n     while i < str::byte_len(t) {\n         if t[i] == '#' as u8 { b += ns; } else { str::push_byte(b, t[i]); }"}, {"sha": "c221ae2d8460b4537571910b995674615fe0907b", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -7,6 +7,7 @@\n use std;\n import std::int;\n import std::str;\n+import std::istr;\n \n tag bottle { none; dual; single; multiple(int); }\n \n@@ -29,8 +30,8 @@ fn show(b: bottle) {\n                 \"1 bottle of beer on the wall.\";\n       }\n       multiple(n) {\n-        let nb: str = int::to_str(n, 10u);\n-        let mb: str = int::to_str(n - 1, 10u);\n+        let nb: str = istr::to_estr(int::to_str(n, 10u));\n+        let mb: str = istr::to_estr(int::to_str(n - 1, 10u));\n         log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n         log \"Take one down and pass it around, \" + mb +\n                 \" bottles of beer on the wall.\";"}, {"sha": "af6f50a2901b58069de819bbe22cccfe8963e8eb", "filename": "src/test/bench/99bob-simple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-simple.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -7,6 +7,7 @@\n use std;\n import std::int;\n import std::str;\n+import std::istr;\n \n fn b1() -> str { ret \"# of beer on the wall, # of beer.\"; }\n \n@@ -29,7 +30,7 @@ fn sub(t: str, n: int) -> str {\n     alt n {\n       0 { ns = \"no more bottles\"; }\n       1 { ns = \"1 bottle\"; }\n-      _ { ns = int::to_str(n, 10u) + \" bottles\"; }\n+      _ { ns = istr::to_estr(int::to_str(n, 10u) + ~\" bottles\"); }\n     }\n     while i < str::byte_len(t) {\n         if t[i] == '#' as u8 { b += ns; } else { str::push_byte(b, t[i]); }"}, {"sha": "a3dd8628d9400f14d287b8ad30b96294b73332ab", "filename": "src/test/bench/99bob-tail.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fbench%2F99bob-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-tail.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -5,11 +5,12 @@\n use std;\n import std::int;\n import std::str;\n+import std::istr;\n \n fn main() {\n     fn multiple(n: int) {\n-        let nb: str = int::to_str(n, 10u);\n-        let mb: str = int::to_str(n - 1, 10u);\n+        let nb: str = istr::to_estr(int::to_str(n, 10u));\n+        let mb: str = istr::to_estr(int::to_str(n - 1, 10u));\n         log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n         log \"Take one down and pass it around, \" + mb +\n                 \" bottles of beer on the wall.\";"}, {"sha": "185c9db4a2e53531bab42d82c7d8a22903893521", "filename": "src/test/stdtest/int.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fstdtest%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53be480d205454d79adf578b912a4be94715583c/src%2Ftest%2Fstdtest%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fint.rs?ref=53be480d205454d79adf578b912a4be94715583c", "patch": "@@ -1,15 +1,15 @@\n \n use std;\n import std::int;\n-import std::str::eq;\n+import std::istr::eq;\n \n #[test]\n fn test_to_str() {\n-    assert (eq(int::to_str(0, 10u), \"0\"));\n-    assert (eq(int::to_str(1, 10u), \"1\"));\n-    assert (eq(int::to_str(-1, 10u), \"-1\"));\n-    assert (eq(int::to_str(255, 16u), \"ff\"));\n-    assert (eq(int::to_str(100, 10u), \"100\"));\n+    assert (eq(int::to_str(0, 10u), ~\"0\"));\n+    assert (eq(int::to_str(1, 10u), ~\"1\"));\n+    assert (eq(int::to_str(-1, 10u), ~\"-1\"));\n+    assert (eq(int::to_str(255, 16u), ~\"ff\"));\n+    assert (eq(int::to_str(100, 10u), ~\"100\"));\n }\n \n #[test]"}]}