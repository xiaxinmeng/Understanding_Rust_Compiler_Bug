{"sha": "820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "node_id": "C_kwDOAAsO6NoAKDgyMGUzYThkNmFlYzUzZDhmNWY0NTFlNDNjZDFlZjg3YmQyOWRjMGE", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-25T02:13:05Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-25T02:13:05Z"}, "message": "Pass `tcx` directly", "tree": {"sha": "d9929e0402908250e28e5fdc625b314afea9386e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9929e0402908250e28e5fdc625b314afea9386e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "html_url": "https://github.com/rust-lang/rust/commit/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe4c16b294312b7aeb920e9a988a3eaca580d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe4c16b294312b7aeb920e9a988a3eaca580d3b", "html_url": "https://github.com/rust-lang/rust/commit/afe4c16b294312b7aeb920e9a988a3eaca580d3b"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "84510fe218cf5a4ba2171d28a55b9bfc29b35fcc", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "patch": "@@ -71,19 +71,13 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n }\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {\n-    type Implicit<'a> = TyCtxt<'a>;\n     type DepKind = DepKind;\n \n     #[inline]\n     fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R {\n         TyCtxt::with_stable_hashing_context(self, f)\n     }\n \n-    #[inline]\n-    fn with_context<R>(f: impl FnOnce(TyCtxt<'_>) -> R) -> R {\n-        ty::tls::with(|tcx| f(tcx))\n-    }\n-\n     #[inline]\n     fn dep_graph(&self) -> &DepGraph {\n         &self.dep_graph"}, {"sha": "40e7131987fabf44fc226b3d37d372f81e9cd376", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "patch": "@@ -23,15 +23,11 @@ use std::{fmt, panic};\n use self::graph::{print_markframe_trace, MarkFrame};\n \n pub trait DepContext: Copy {\n-    type Implicit<'a>: DepContext;\n     type DepKind: self::DepKind;\n \n     /// Create a hashing context for hashing new results.\n     fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R;\n \n-    /// Access the implicit context.\n-    fn with_context<R>(f: impl FnOnce(Self::Implicit<'_>) -> R) -> R;\n-\n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n "}, {"sha": "186417e862a23267badf54bf8c498c6e1db3d1cb", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=820e3a8d6aec53d8f5f451e43cd1ef87bd29dc0a", "patch": "@@ -641,7 +641,7 @@ pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     Tcx: DepContext,\n {\n     if !dep_graph_data.is_index_green(prev_index) {\n-        incremental_verify_ich_not_green::<Tcx>(prev_index)\n+        incremental_verify_ich_not_green(tcx, prev_index)\n     }\n \n     let new_hash = hash_result.map_or(Fingerprint::ZERO, |f| {\n@@ -651,31 +651,32 @@ pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     let old_hash = dep_graph_data.prev_fingerprint_of(prev_index);\n \n     if new_hash != old_hash {\n-        incremental_verify_ich_failed::<Tcx>(prev_index, result);\n+        incremental_verify_ich_failed(tcx, prev_index, result);\n     }\n }\n \n #[cold]\n #[inline(never)]\n-fn incremental_verify_ich_not_green<Tcx>(prev_index: SerializedDepNodeIndex)\n+fn incremental_verify_ich_not_green<Tcx>(tcx: Tcx, prev_index: SerializedDepNodeIndex)\n where\n     Tcx: DepContext,\n {\n-    Tcx::with_context(|tcx| {\n-        panic!(\n-            \"fingerprint for green query instance not loaded from cache: {:?}\",\n-            tcx.dep_graph().data().unwrap().prev_node_of(prev_index)\n-        )\n-    })\n+    panic!(\n+        \"fingerprint for green query instance not loaded from cache: {:?}\",\n+        tcx.dep_graph().data().unwrap().prev_node_of(prev_index)\n+    )\n }\n \n // Note that this is marked #[cold] and intentionally takes `dyn Debug` for `result`,\n // as we want to avoid generating a bunch of different implementations for LLVM to\n // chew on (and filling up the final binary, too).\n #[cold]\n #[inline(never)]\n-fn incremental_verify_ich_failed<Tcx>(prev_index: SerializedDepNodeIndex, result: &dyn Debug)\n-where\n+fn incremental_verify_ich_failed<Tcx>(\n+    tcx: Tcx,\n+    prev_index: SerializedDepNodeIndex,\n+    result: &dyn Debug,\n+) where\n     Tcx: DepContext,\n {\n     // When we emit an error message and panic, we try to debug-print the `DepNode`\n@@ -690,25 +691,23 @@ where\n \n     let old_in_panic = INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.replace(true));\n \n-    Tcx::with_context(|tcx| {\n-        if old_in_panic {\n-            tcx.sess().emit_err(crate::error::Reentrant);\n+    if old_in_panic {\n+        tcx.sess().emit_err(crate::error::Reentrant);\n+    } else {\n+        let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {\n+            format!(\"`cargo clean -p {crate_name}` or `cargo clean`\")\n         } else {\n-            let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {\n-                format!(\"`cargo clean -p {crate_name}` or `cargo clean`\")\n-            } else {\n-                \"`cargo clean`\".to_string()\n-            };\n+            \"`cargo clean`\".to_string()\n+        };\n \n-            let dep_node = tcx.dep_graph().data().unwrap().prev_node_of(prev_index);\n+        let dep_node = tcx.dep_graph().data().unwrap().prev_node_of(prev_index);\n \n-            let dep_node = tcx.sess().emit_err(crate::error::IncrementCompilation {\n-                run_cmd,\n-                dep_node: format!(\"{dep_node:?}\"),\n-            });\n-            panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n-        }\n-    });\n+        let dep_node = tcx.sess().emit_err(crate::error::IncrementCompilation {\n+            run_cmd,\n+            dep_node: format!(\"{dep_node:?}\"),\n+        });\n+        panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n+    }\n \n     INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));\n }"}]}