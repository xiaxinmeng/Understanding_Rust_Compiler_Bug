{"sha": "0a93a48ff50c62d4d830f63a913256fefacb742f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTNhNDhmZjUwYzYyZDRkODMwZjYzYTkxMzI1NmZlZmFjYjc0MmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-22T20:30:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-22T20:30:53Z"}, "message": "Extract trans_ivec::alloc_with_heap from trans_ivec::trans_ivec\n\nNeed this for building istrs", "tree": {"sha": "88387c7f45d025bbe0cae2e6d507dc40b3a2bad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88387c7f45d025bbe0cae2e6d507dc40b3a2bad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a93a48ff50c62d4d830f63a913256fefacb742f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a93a48ff50c62d4d830f63a913256fefacb742f", "html_url": "https://github.com/rust-lang/rust/commit/0a93a48ff50c62d4d830f63a913256fefacb742f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a93a48ff50c62d4d830f63a913256fefacb742f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309a7534d7ebf39f5a62bac36749d35272fe0a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/309a7534d7ebf39f5a62bac36749d35272fe0a3e", "html_url": "https://github.com/rust-lang/rust/commit/309a7534d7ebf39f5a62bac36749d35272fe0a3e"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "7bdc1241a0a01d1778ae8dfa5859469cf2525ee1", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a93a48ff50c62d4d830f63a913256fefacb742f/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a93a48ff50c62d4d830f63a913256fefacb742f/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=0a93a48ff50c62d4d830f63a913256fefacb742f", "patch": "@@ -1,3 +1,4 @@\n+import std::vec;\n import std::option::none;\n import syntax::ast;\n import lib::llvm::llvm::{ValueRef, TypeRef};\n@@ -13,9 +14,13 @@ import trans_common::*;\n export trans_ivec, get_len_and_data, duplicate_heap_part, trans_add,\n trans_append;\n \n-fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n-    result {\n-    let typ = node_id_type(bcx_ccx(bcx), id);\n+fn alloc_with_heap(bcx: @block_ctxt, typ: &ty::t, vecsz: uint) ->\n+    {bcx: @block_ctxt,\n+     unit_ty: ty::t,\n+     llunitsz: ValueRef,\n+     llptr: ValueRef,\n+     llfirsteltptr: ValueRef} {\n+\n     let unit_ty;\n     alt ty::struct(bcx_tcx(bcx), typ) {\n       ty::ty_vec(mt) { unit_ty = mt.ty; }\n@@ -31,12 +36,11 @@ fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n \n     add_clean_temp(bcx, llvecptr, typ);\n \n-    let lllen = bcx.build.Mul(C_uint(std::vec::len(args)), unit_sz);\n+    let lllen = bcx.build.Mul(C_uint(vecsz), unit_sz);\n     // Allocate the vector pieces and store length and allocated length.\n \n     let llfirsteltptr;\n-    if std::vec::len(args) > 0u &&\n-        std::vec::len(args) <= abi::ivec_default_length {\n+    if vecsz > 0u && vecsz <= abi::ivec_default_length {\n         // Interior case.\n \n         bcx.build.Store(lllen,\n@@ -61,7 +65,7 @@ fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n         let llstubptr = bcx.build.PointerCast(llvecptr, T_ptr(llstubty));\n         bcx.build.Store(C_int(0), bcx.build.InBoundsGEP(llstubptr, stub_z));\n         let llheapty = T_ivec_heap_part(llunitty);\n-        if std::vec::len(args) == 0u {\n+        if vecsz == 0u {\n             // Null heap pointer indicates a zero-length vector.\n \n             bcx.build.Store(llalen, bcx.build.InBoundsGEP(llstubptr, stub_a));\n@@ -86,8 +90,27 @@ fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n                                        C_int(0)]);\n         }\n     }\n-    // Store the individual elements.\n+    ret {\n+        bcx: bcx,\n+        unit_ty: unit_ty,\n+        llunitsz: unit_sz,\n+        llptr: llvecptr,\n+        llfirsteltptr: llfirsteltptr};\n+}\n+\n+fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr],\n+              id: ast::node_id) -> result {\n+\n+    let typ = node_id_type(bcx_ccx(bcx), id);\n+    let alloc_res = alloc_with_heap(bcx, typ, vec::len(args));\n+\n+    let bcx = alloc_res.bcx;\n+    let unit_ty = alloc_res.unit_ty;\n+    let llunitsz = alloc_res.llunitsz;\n+    let llvecptr = alloc_res.llptr;\n+    let llfirsteltptr = alloc_res.llfirsteltptr;\n \n+    // Store the individual elements.\n     let i = 0u;\n     for e: @ast::expr in args {\n         let lv = trans_lval(bcx, e);\n@@ -96,7 +119,7 @@ fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n         if ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) {\n             lleltptr =\n                 bcx.build.InBoundsGEP(llfirsteltptr,\n-                                      [bcx.build.Mul(C_uint(i), unit_sz)]);\n+                                      [bcx.build.Mul(C_uint(i), llunitsz)]);\n         } else {\n             lleltptr = bcx.build.InBoundsGEP(llfirsteltptr, [C_uint(i)]);\n         }"}]}