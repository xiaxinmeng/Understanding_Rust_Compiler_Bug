{"sha": "8e9003447c9ab248a18bd2c00b49cd8c04d72261", "node_id": "C_kwDOAAsO6NoAKDhlOTAwMzQ0N2M5YWIyNDhhMThiZDJjMDBiNDljZDhjMDRkNzIyNjE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:48:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:48:38Z"}, "message": "future proof structure", "tree": {"sha": "dabeeb308c17a039c923f1c2deacdd28d51c9ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dabeeb308c17a039c923f1c2deacdd28d51c9ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9003447c9ab248a18bd2c00b49cd8c04d72261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9003447c9ab248a18bd2c00b49cd8c04d72261", "html_url": "https://github.com/rust-lang/rust/commit/8e9003447c9ab248a18bd2c00b49cd8c04d72261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9003447c9ab248a18bd2c00b49cd8c04d72261/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ecda802f1f34e404082d01d33d0a9e85c035e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecda802f1f34e404082d01d33d0a9e85c035e48", "html_url": "https://github.com/rust-lang/rust/commit/5ecda802f1f34e404082d01d33d0a9e85c035e48"}], "stats": {"total": 278, "additions": 143, "deletions": 135}, "files": [{"sha": "76bd0299fb4b239f8e5bb4d82b844d39ab4c6f1c", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 3, "deletions": 135, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=8e9003447c9ab248a18bd2c00b49cd8c04d72261", "patch": "@@ -9,10 +9,12 @@\n //! write unit-tests (in fact, we used to do that), but that makes tests brittle\n //! and harder to understand.\n \n+mod mbe;\n+\n use std::{iter, ops::Range};\n \n use base_db::{fixture::WithFixture, SourceDatabase};\n-use expect_test::{expect, Expect};\n+use expect_test::Expect;\n use hir_expand::{db::AstDatabase, InFile, MacroFile};\n use stdx::format_to;\n use syntax::{\n@@ -113,137 +115,3 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n     }\n     res\n }\n-\n-#[test]\n-fn wrong_nesting_level() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    ($($i:ident);*) => ($i)\n-}\n-m!{a}\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    ($($i:ident);*) => ($i)\n-}\n-/* error: expected simple binding, found nested binding `i` */\n-\"#]],\n-    );\n-}\n-\n-#[test]\n-fn expansion_does_not_parse_as_expression() {\n-    check(\n-        r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = stmts!(); }\n-\"#,\n-        expect![[r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = /* error: could not convert tokens */; }\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn round_trips_compound_tokens() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    () => { type qual: ::T = qual::T; }\n-}\n-m!();\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    () => { type qual: ::T = qual::T; }\n-}\n-type qual: ::T = qual::T;\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn round_trips_literals() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    () => {\n-        let _ = 'c';\n-        let _ = 1000;\n-        let _ = 12E+99_f64;\n-        let _ = \"rust1\";\n-        let _ = -92;\n-    }\n-}\n-fn f() {\n-    m!()\n-}\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    () => {\n-        let _ = 'c';\n-        let _ = 1000;\n-        let _ = 12E+99_f64;\n-        let _ = \"rust1\";\n-        let _ = -92;\n-    }\n-}\n-fn f() {\n-    let_ = 'c';\n-    let_ = 1000;\n-    let_ = 12E+99_f64;\n-    let_ = \"rust1\";\n-    let_ = -92;\n-}\n-\"#]],\n-    );\n-}\n-\n-#[test]\n-fn broken_parenthesis_sequence() {\n-    check(\n-        r#\"\n-macro_rules! m1 { ($x:ident) => { ($x } }\n-macro_rules! m2 { ($x:ident) => {} }\n-\n-m1!();\n-m2!(x\n-\"#,\n-        expect![[r#\"\n-macro_rules! m1 { ($x:ident) => { ($x } }\n-macro_rules! m2 { ($x:ident) => {} }\n-\n-/* error: Failed to find macro definition */\n-/* error: Failed to lower macro args to token tree */\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn unary_minus_is_a_literal() {\n-    check(\n-        r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n-m!(92);\n-m!(-92);\n-m!(-9.2);\n-m!(--92);\n-\"#,\n-        expect![[r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n-literal!()\n-literal!()\n-literal!()\n-/* error: leftover tokens */not_a_literal!()\n-\"#]],\n-    )\n-}"}, {"sha": "ae044661f334d7c992cdccde45ebc1fd88704ac2", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=8e9003447c9ab248a18bd2c00b49cd8c04d72261", "patch": "@@ -0,0 +1,137 @@\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn wrong_nesting_level() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident);*) => ($i)\n+}\n+m!{a}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($i:ident);*) => ($i)\n+}\n+/* error: expected simple binding, found nested binding `i` */\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn expansion_does_not_parse_as_expression() {\n+    check(\n+        r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = stmts!(); }\n+\"#,\n+        expect![[r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = /* error: could not convert tokens */; }\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn round_trips_compound_tokens() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+m!();\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+type qual: ::T = qual::T;\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn round_trips_literals() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        let _ = 'c';\n+        let _ = 1000;\n+        let _ = 12E+99_f64;\n+        let _ = \"rust1\";\n+        let _ = -92;\n+    }\n+}\n+fn f() {\n+    m!()\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    () => {\n+        let _ = 'c';\n+        let _ = 1000;\n+        let _ = 12E+99_f64;\n+        let _ = \"rust1\";\n+        let _ = -92;\n+    }\n+}\n+fn f() {\n+    let_ = 'c';\n+    let_ = 1000;\n+    let_ = 12E+99_f64;\n+    let_ = \"rust1\";\n+    let_ = -92;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn broken_parenthesis_sequence() {\n+    check(\n+        r#\"\n+macro_rules! m1 { ($x:ident) => { ($x } }\n+macro_rules! m2 { ($x:ident) => {} }\n+\n+m1!();\n+m2!(x\n+\"#,\n+        expect![[r#\"\n+macro_rules! m1 { ($x:ident) => { ($x } }\n+macro_rules! m2 { ($x:ident) => {} }\n+\n+/* error: Failed to find macro definition */\n+/* error: Failed to lower macro args to token tree */\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn unary_minus_is_a_literal() {\n+    check(\n+        r#\"\n+macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n+m!(92);\n+m!(-92);\n+m!(-9.2);\n+m!(--92);\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n+literal!()\n+literal!()\n+literal!()\n+/* error: leftover tokens */not_a_literal!()\n+\"#]],\n+    )\n+}"}, {"sha": "bc407e4171bc7f58c533d8ce9166a8cdfff85d5a", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9003447c9ab248a18bd2c00b49cd8c04d72261/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=8e9003447c9ab248a18bd2c00b49cd8c04d72261", "patch": "@@ -2,6 +2,9 @@\n //! `macro_rules` macros. It uses `TokenTree` (from `tt` package) as the\n //! interface, although it contains some code to bridge `SyntaxNode`s and\n //! `TokenTree`s as well!\n+//!\n+//! The tes for this functionality live in another crate:\n+//! `hir_def::macro_expansion_tests::mbe`.\n \n mod parser;\n mod expander;"}]}