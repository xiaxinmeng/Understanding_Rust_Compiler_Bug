{"sha": "656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "node_id": "C_kwDOAAsO6NoAKDY1NmRiOThiZDk5Y2FmN2U1YzVlODFhZDExZWQ4OTIyZTI4YzQ2ZmI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-15T03:06:44Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-15T19:46:20Z"}, "message": "Tweak E0597\n\nCC #99430", "tree": {"sha": "b6f22583888b8780d2cf3775692e7ecf778a2bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6f22583888b8780d2cf3775692e7ecf778a2bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "html_url": "https://github.com/rust-lang/rust/commit/656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4d89dfb51535c1c43052ef848564bd2323c9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4d89dfb51535c1c43052ef848564bd2323c9ca", "html_url": "https://github.com/rust-lang/rust/commit/ae4d89dfb51535c1c43052ef848564bd2323c9ca"}], "stats": {"total": 1121, "additions": 772, "deletions": 349}, "files": [{"sha": "2bbb9618dbf09f27f74a09662e66c6fffd6dd031", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -37,7 +37,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n             desc,\n         );\n \n-        err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_desc));\n+        err.span_label(borrow_span, format!(\"{} is borrowed here\", borrow_desc));\n         err.span_label(span, format!(\"use of borrowed {}\", borrow_desc));\n         err\n     }\n@@ -250,8 +250,8 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n             desc,\n         );\n \n-        err.span_label(borrow_span, format!(\"borrow of {} occurs here\", desc));\n-        err.span_label(span, format!(\"assignment to borrowed {} occurs here\", desc));\n+        err.span_label(borrow_span, format!(\"{} is borrowed here\", desc));\n+        err.span_label(span, format!(\"{} is assigned to here but it was already borrowed\", desc));\n         err\n     }\n "}, {"sha": "0ab8aabd63bd0f6a73915340bd2a035a03416607", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1742,7 +1742,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &self.local_names,\n                 &mut err,\n                 \"\",\n-                None,\n+                Some(borrow_span),\n                 None,\n             );\n         }"}, {"sha": "e4f45c53aefe5f53271a81ec3b8e901301065691", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n //! Print diagnostics to explain why values are borrowed.\n \n use rustc_errors::{Applicability, Diagnostic};\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::Visitor;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n@@ -11,6 +13,7 @@ use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, DesugaringKind, Span};\n+use rustc_trait_selection::traits::error_reporting::FindExprBySpan;\n \n use crate::region_infer::{BlameConstraint, ExtraConstraintInfo};\n use crate::{\n@@ -63,6 +66,31 @@ impl<'tcx> BorrowExplanation<'tcx> {\n         borrow_span: Option<Span>,\n         multiple_borrow_span: Option<(Span, Span)>,\n     ) {\n+        if let Some(span) = borrow_span {\n+            let def_id = body.source.def_id();\n+            if let Some(node) = tcx.hir().get_if_local(def_id)\n+                && let Some(body_id) = node.body_id()\n+            {\n+                let body = tcx.hir().body(body_id);\n+                let mut expr_finder = FindExprBySpan::new(span);\n+                expr_finder.visit_expr(body.value);\n+                if let Some(mut expr) = expr_finder.result {\n+                    while let hir::ExprKind::AddrOf(_, _, inner) = &expr.kind {\n+                        expr = inner;\n+                    }\n+                    if let hir::ExprKind::Path(hir::QPath::Resolved(None, p)) = expr.kind\n+                        && let [hir::PathSegment { ident, args: None, .. }] = p.segments\n+                        && let hir::def::Res::Local(hir_id) = p.res\n+                        && let Some(hir::Node::Pat(pat)) = tcx.hir().find(hir_id)\n+                    {\n+                        err.span_label(\n+                            pat.span,\n+                            &format!(\"binding `{ident}` declared here\"),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span, path_span) => {\n                 let message = match later_use_kind {"}, {"sha": "ea58ad5ae3e34539a7ee5bf53f2ec95ffa7a8a3e", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n                 self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span), \"\");\n \n-                use_spans.args_span_label(err, format!(\"move out of {place_desc} occurs here\"));\n+                use_spans.args_span_label(err, format!(\"{place_desc} is moved here\"));\n             }\n         }\n     }"}, {"sha": "c3d097b5d7559b8a3df49ea3ee23efee5e24bc90", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2827,7 +2827,7 @@ pub struct FindExprBySpan<'hir> {\n }\n \n impl<'hir> FindExprBySpan<'hir> {\n-    fn new(span: Span) -> Self {\n+    pub fn new(span: Span) -> Self {\n         Self { span, result: None, ty_result: None }\n     }\n }"}, {"sha": "b5ecb3e1b56fb28147755ab50302952063669a0e", "filename": "tests/ui/asm/type-check-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasm%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasm%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Ftype-check-4.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `a` because it is borrowed\n   --> $DIR/type-check-4.rs:14:9\n    |\n LL |         let p = &a;\n-   |                 -- borrow of `a` occurs here\n+   |                 -- `a` is borrowed here\n LL |         asm!(\"{}\", out(reg) a);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `a` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ `a` is assigned to here but it was already borrowed\n LL |\n LL |         println!(\"{}\", p);\n    |                        - borrow later used here\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `a` because it was mutably borrowed\n   --> $DIR/type-check-4.rs:22:28\n    |\n LL |         let p = &mut a;\n-   |                 ------ borrow of `a` occurs here\n+   |                 ------ `a` is borrowed here\n LL |         asm!(\"{}\", in(reg) a);\n    |                            ^ use of borrowed `a`\n LL |"}, {"sha": "2fe3f2d4a02505149a1dbb347b9314c00500b908", "filename": "tests/ui/associated-types/associated-types-outlives.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/associated-types-outlives.rs:22:14\n    |\n+LL |                     F: for<'a> FnOnce(<T as Foo<'a>>::Bar)>(x: T, f: F) {\n+   |                                                             - binding `x` declared here\n+...\n LL |         's: loop { y = denormalise(&x); break }\n    |                                    -- borrow of `x` occurs here\n LL |         drop(x);"}, {"sha": "628ba1a4818936642e68726a80c6af74cab267b4", "filename": "tests/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,19 +4,19 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n    |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n-   |             --- borrow of `*x` occurs here\n+   |             --- `*x` is borrowed here\n LL |     *x += 1;\n-   |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+   |     ^^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |     y\n    |     - returning this value requires that `*x` is borrowed for `'1`\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:16:9\n    |\n LL |         let y = &*x;\n-   |                 --- borrow of `*x` occurs here\n+   |                 --- `*x` is borrowed here\n LL |         *x += 1;\n-   |         ^^^^^^^ assignment to borrowed `*x` occurs here\n+   |         ^^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |         y\n    |         - returning this value requires that `*x` is borrowed for `'1`\n LL |     })()\n@@ -28,19 +28,19 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n LL |     (async move || -> &i32 {\n    |                       - let's call the lifetime of this reference `'1`\n LL |         let y = &*x;\n-   |                 --- borrow of `*x` occurs here\n+   |                 --- `*x` is borrowed here\n LL |         *x += 1;\n-   |         ^^^^^^^ assignment to borrowed `*x` occurs here\n+   |         ^^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |         y\n    |         - returning this value requires that `*x` is borrowed for `'1`\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:32:9\n    |\n LL |         let y = &*x;\n-   |                 --- borrow of `*x` occurs here\n+   |                 --- `*x` is borrowed here\n LL |         *x += 1;\n-   |         ^^^^^^^ assignment to borrowed `*x` occurs here\n+   |         ^^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |         y\n    |         - returning this value requires that `*x` is borrowed for `'1`\n LL |     }"}, {"sha": "b69033a0eda0b836a84c154b599565cbb1b07ddf", "filename": "tests/ui/async-await/issue-75785-confusing-named-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,9 +4,9 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n LL | pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n    |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n-   |             --- borrow of `*x` occurs here\n+   |             --- `*x` is borrowed here\n LL |     *x += 1;\n-   |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+   |     ^^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |     (&32, y)\n    |     -------- returning this value requires that `*x` is borrowed for `'1`\n "}, {"sha": "a599ac1d92f831386d1bdb146f952d0e6388523d", "filename": "tests/ui/async-await/multiple-lifetimes/ret-ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `a` because it is borrowed\n   --> $DIR/ret-ref.rs:16:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n-   |                                           -- borrow of `a` occurs here\n+   |                                           -- `a` is borrowed here\n LL |     a += 1;\n-   |     ^^^^^^ assignment to borrowed `a` occurs here\n+   |     ^^^^^^ `a` is assigned to here but it was already borrowed\n LL |     b += 1;\n LL |     let p = future.await;\n    |             ------ borrow later used here\n@@ -13,21 +13,21 @@ error[E0506]: cannot assign to `b` because it is borrowed\n   --> $DIR/ret-ref.rs:17:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n-   |                                               -- borrow of `b` occurs here\n+   |                                               -- `b` is borrowed here\n LL |     a += 1;\n LL |     b += 1;\n-   |     ^^^^^^ assignment to borrowed `b` occurs here\n+   |     ^^^^^^ `b` is assigned to here but it was already borrowed\n LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `a` because it is borrowed\n   --> $DIR/ret-ref.rs:28:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n-   |                                           -- borrow of `a` occurs here\n+   |                                           -- `a` is borrowed here\n LL |     let p = future.await;\n LL |     a += 1;\n-   |     ^^^^^^ assignment to borrowed `a` occurs here\n+   |     ^^^^^^ `a` is assigned to here but it was already borrowed\n LL |     b += 1;\n LL |     drop(p);\n    |          - borrow later used here"}, {"sha": "bd2435a78bf222152d8a6653e574e2a69ce5e1db", "filename": "tests/ui/augmented-assignments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Faugmented-assignments.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -9,7 +9,7 @@ impl AddAssign for Int {\n }\n \n fn main() {\n-    let mut x = Int(1);\n+    let mut x = Int(1); //~ NOTE binding `x` declared here\n     x\n     //~^ NOTE borrow of `x` occurs here\n     +="}, {"sha": "d1096aea2794e3db0f8f9359ec674e388561ae8d", "filename": "tests/ui/augmented-assignments.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Faugmented-assignments.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/augmented-assignments.rs:16:5\n    |\n+LL |     let mut x = Int(1);\n+   |         ----- binding `x` declared here\n LL |     x\n    |     - borrow of `x` occurs here\n ..."}, {"sha": "8645169b98ac9d2a227e33dcb092468243afc54b", "filename": "tests/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -41,6 +41,8 @@ LL | fn move_then_borrow<T: Add<Output=()> + Clone + Copy>(x: T) {\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5\n    |\n+LL | fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {\n+   |                                     - binding `x` declared here\n LL |     let m = &x;\n    |             -- borrow of `x` occurs here\n ...\n@@ -53,6 +55,9 @@ LL |     use_mut(n); use_imm(m);\n error[E0505]: cannot move out of `y` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:23:5\n    |\n+LL | fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {\n+   |                                           ----- binding `y` declared here\n+LL |     let m = &x;\n LL |     let n = &mut y;\n    |             ------ borrow of `y` occurs here\n ..."}, {"sha": "c1d668f74efb94354e7b63c90bf9d503747d6331", "filename": "tests/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `y` because it was mutably borrowed\n   --> $DIR/borrowck-anon-fields-variant.rs:16:19\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n+   |              --------- `y.0` is borrowed here\n ...\n LL |     let b = match y {\n    |                   ^ use of borrowed `y.0`\n@@ -14,7 +14,7 @@ error[E0503]: cannot use `y` because it was mutably borrowed\n   --> $DIR/borrowck-anon-fields-variant.rs:34:19\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n+   |              --------- `y.0` is borrowed here\n ...\n LL |     let b = match y {\n    |                   ^ use of borrowed `y.0`"}, {"sha": "d35f2331a76f4ed06b2c3593a4f1bce997962e32", "filename": "tests/ui/borrowck/borrowck-assign-comp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,20 +2,20 @@ error[E0506]: cannot assign to `p.x` because it is borrowed\n   --> $DIR/borrowck-assign-comp.rs:10:5\n    |\n LL |     let q = &p;\n-   |             -- borrow of `p.x` occurs here\n+   |             -- `p.x` is borrowed here\n ...\n LL |     p.x = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n+   |     ^^^^^^^ `p.x` is assigned to here but it was already borrowed\n LL |     q.x;\n    |     --- borrow later used here\n \n error[E0506]: cannot assign to `p` because it is borrowed\n   --> $DIR/borrowck-assign-comp.rs:20:5\n    |\n LL |     let q = &p.y;\n-   |             ---- borrow of `p` occurs here\n+   |             ---- `p` is borrowed here\n LL |     p = Point {x: 5, y: 7};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ `p` is assigned to here but it was already borrowed\n LL |     p.x; // silence warning\n LL |     *q; // stretch loan\n    |     -- borrow later used here\n@@ -24,9 +24,9 @@ error[E0506]: cannot assign to `p.y` because it is borrowed\n   --> $DIR/borrowck-assign-comp.rs:31:5\n    |\n LL |     let q = &p.y;\n-   |             ---- borrow of `p.y` occurs here\n+   |             ---- `p.y` is borrowed here\n LL |     p.y = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n+   |     ^^^^^^^ `p.y` is assigned to here but it was already borrowed\n LL |     *q;\n    |     -- borrow later used here\n "}, {"sha": "8c0a8efcc1828548bfc810f2e36b5fe0a32be634", "filename": "tests/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n+   |                                   ------ `y` is borrowed here\n LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n ...\n@@ -13,9 +13,9 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n+   |                                   ------ `*y.pointer` is borrowed here\n LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+   |         ^^^^^^^^^^^^^^^ `*y.pointer` is assigned to here but it was already borrowed\n ...\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here"}, {"sha": "8a7870e0c44af17949deeaf46bbfd92bc66f59c8", "filename": "tests/ui/borrowck/borrowck-closures-mut-and-imm.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -49,9 +49,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let c2 = || x * 5;\n    |              -- - borrow occurs due to use in closure\n    |              |\n-   |              borrow of `x` occurs here\n+   |              `x` is borrowed here\n LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |\n LL |     drop(c2);\n    |          -- borrow later used here\n@@ -62,9 +62,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let c1 = || get(&x);\n    |              --      - borrow occurs due to use in closure\n    |              |\n-   |              borrow of `x` occurs here\n+   |              `x` is borrowed here\n LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n@@ -75,9 +75,9 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n LL |     let c1 = || get(&*x);\n    |              --      -- borrow occurs due to use in closure\n    |              |\n-   |              borrow of `*x` occurs here\n+   |              `*x` is borrowed here\n LL |     *x = 5;\n-   |     ^^^^^^ assignment to borrowed `*x` occurs here\n+   |     ^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |\n LL |     drop(c1);\n    |          -- borrow later used here\n@@ -88,9 +88,9 @@ error[E0506]: cannot assign to `*x.f` because it is borrowed\n LL |     let c1 = || get(&*x.f);\n    |              --      ---- borrow occurs due to use in closure\n    |              |\n-   |              borrow of `*x.f` occurs here\n+   |              `*x.f` is borrowed here\n LL |     *x.f = 5;\n-   |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n+   |     ^^^^^^^^ `*x.f` is assigned to here but it was already borrowed\n LL |\n LL |     drop(c1);\n    |          -- borrow later used here"}, {"sha": "cb29c9fdac3c66bd356a81d0d5076f35c520dab3", "filename": "tests/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -45,7 +45,7 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:37:9\n    |\n LL |         let x = f.x();\n-   |                 ----- borrow of `f` occurs here\n+   |                 ----- `f` is borrowed here\n LL |         f.x;\n    |         ^^^ use of borrowed `f`\n LL |         drop(x);\n@@ -55,7 +55,7 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:44:9\n    |\n LL |         let x = g.x();\n-   |                 ----- borrow of `g` occurs here\n+   |                 ----- `g` is borrowed here\n LL |         g.0;\n    |         ^^^ use of borrowed `g`\n LL |         drop(x);\n@@ -65,7 +65,7 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:51:9\n    |\n LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n+   |                 -------- `h.0` is borrowed here\n LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n LL |         drop(x);\n@@ -75,7 +75,7 @@ error[E0503]: cannot use `e.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:59:20\n    |\n LL |         let x = e.x();\n-   |                 ----- borrow of `e` occurs here\n+   |                 ----- `e` is borrowed here\n LL |         match e {\n LL |             Baz::X(value) => value\n    |                    ^^^^^ use of borrowed `e`\n@@ -87,7 +87,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:67:9\n    |\n LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n+   |                 -------- `u.a` is borrowed here\n LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n LL |         drop(x);\n@@ -97,7 +97,7 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:74:9\n    |\n LL |         let x = f.x();\n-   |                 ----- borrow of `*f` occurs here\n+   |                 ----- `*f` is borrowed here\n LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n LL |         drop(x);\n@@ -107,7 +107,7 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:81:9\n    |\n LL |         let x = g.x();\n-   |                 ----- borrow of `*g` occurs here\n+   |                 ----- `*g` is borrowed here\n LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n LL |         drop(x);\n@@ -117,7 +117,7 @@ error[E0503]: cannot use `h.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:88:9\n    |\n LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n+   |                 -------- `h.0` is borrowed here\n LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n LL |         drop(x);\n@@ -127,7 +127,7 @@ error[E0503]: cannot use `e.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:96:20\n    |\n LL |         let x = e.x();\n-   |                 ----- borrow of `*e` occurs here\n+   |                 ----- `*e` is borrowed here\n LL |         match *e {\n LL |             Baz::X(value) => value\n    |                    ^^^^^ use of borrowed `*e`\n@@ -139,7 +139,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:105:9\n    |\n LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n+   |                 -------- `u.a` is borrowed here\n LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n LL |         drop(x);\n@@ -149,7 +149,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:113:15\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n LL |         match v {\n LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n    |               ^ use of borrowed `v`\n@@ -161,7 +161,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:118:18\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n    |                  ^ use of borrowed `v`\n@@ -173,7 +173,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:123:25\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n    |                         ^ use of borrowed `v`\n@@ -185,7 +185,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:128:28\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n    |                            ^ use of borrowed `v`\n@@ -197,7 +197,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:139:15\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n LL |         match v {\n LL |             &[x @ ..] => println!(\"{:?}\", x),\n    |               ^ use of borrowed `v`\n@@ -209,7 +209,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:144:18\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[_, x @ ..] => println!(\"{:?}\", x),\n    |                  ^ use of borrowed `v`\n@@ -221,7 +221,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:149:15\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[x @ .., _] => println!(\"{:?}\", x),\n    |               ^ use of borrowed `v`\n@@ -233,7 +233,7 @@ error[E0503]: cannot use `v[..]` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:154:18\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n ...\n LL |             &[_, x @ .., _] => println!(\"{:?}\", x),\n    |                  ^ use of borrowed `v`\n@@ -245,7 +245,7 @@ error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:166:15\n    |\n LL |         let x = &mut e;\n-   |                 ------ borrow of `e` occurs here\n+   |                 ------ `e` is borrowed here\n LL |         match e {\n    |               ^ use of borrowed `e`\n ...\n@@ -304,7 +304,7 @@ error[E0503]: cannot use `*v` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:232:9\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n LL |         v[0].y;\n    |         ^^^^ use of borrowed `v`\n ...\n@@ -315,7 +315,7 @@ error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:232:9\n    |\n LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n+   |                 ------ `v` is borrowed here\n LL |         v[0].y;\n    |         ^^^^^^ use of borrowed `v`\n ..."}, {"sha": "1a20ec85fc00f07add55ee4ed182a74ddb9c3b54", "filename": "tests/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `_a` because it is borrowed\n   --> $DIR/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs:6:9\n    |\n LL |     let b = &mut _a;\n-   |             ------- borrow of `_a` occurs here\n+   |             ------- `_a` is borrowed here\n ...\n LL |         _a = 4;\n-   |         ^^^^^^ assignment to borrowed `_a` occurs here\n+   |         ^^^^^^ `_a` is assigned to here but it was already borrowed\n ...\n LL |     drop(b);\n    |          - borrow later used here"}, {"sha": "374c5ee3ed27b7a28b733c107dfe69db74920d10", "filename": "tests/ui/borrowck/borrowck-issue-14498.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -13,87 +13,87 @@ error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:25:5\n    |\n LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n+   |             -- `**y` is borrowed here\n LL |     let q = &***p;\n LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n+   |     ^^^^^^^ `**y` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:35:5\n    |\n LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n+   |             -- `**y` is borrowed here\n LL |     let q = &***p;\n LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n+   |     ^^^^^^^ `**y` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:45:5\n    |\n LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n+   |             -- `**y` is borrowed here\n LL |     let q = &***p;\n LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n+   |     ^^^^^^^ `**y` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:55:5\n    |\n LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n+   |             -- `**y` is borrowed here\n LL |     let q = &***p;\n LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n+   |     ^^^^^^^ `**y` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:65:5\n    |\n LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n+   |             ---- `**y.a` is borrowed here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n+   |     ^^^^^^^^^ `**y.a` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:75:5\n    |\n LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n+   |             ---- `**y.a` is borrowed here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n+   |     ^^^^^^^^^ `**y.a` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:85:5\n    |\n LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n+   |             ---- `**y.a` is borrowed here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n+   |     ^^^^^^^^^ `**y.a` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:95:5\n    |\n LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n+   |             ---- `**y.a` is borrowed here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n+   |     ^^^^^^^^^ `**y.a` is assigned to here but it was already borrowed\n LL |     drop(p);\n    |          - borrow later used here\n "}, {"sha": "6cdce7bee88975ccf15b12a800e1cd819fce16e7", "filename": "tests/ui/borrowck/borrowck-lend-flow-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-lend-flow-match.rs:12:13\n    |\n LL |         Some(ref r) => {\n-   |              ----- borrow of `x` occurs here\n+   |              ----- `x` is borrowed here\n LL |             x = Some(1);\n-   |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |             ^^^^^^^^^^^ `x` is assigned to here but it was already borrowed\n LL |             drop(r);\n    |                  - borrow later used here\n "}, {"sha": "6eabfff9054c4afab0e17080133c0cfb509a6f21", "filename": "tests/ui/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move-cc.rs:14:19\n    |\n+LL |     let v: Box<_> = Box::new(3);\n+   |         - binding `v` declared here\n LL |     let w = &v;\n    |             -- borrow of `v` occurs here\n LL |     thread::spawn(move|| {\n@@ -15,6 +17,8 @@ LL |     w.use_ref();\n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move-cc.rs:24:19\n    |\n+LL |     let v: Box<_> = Box::new(3);\n+   |         - binding `v` declared here\n LL |     let w = &v;\n    |             -- borrow of `v` occurs here\n LL |     thread::spawn(move|| {"}, {"sha": "38e06fa018786b829b17be72b093d1b8747bb400", "filename": "tests/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move.rs:11:10\n    |\n+LL |     let v = Box::new(3);\n+   |         - binding `v` declared here\n LL |     let w = &v;\n    |             -- borrow of `v` occurs here\n LL |     take(v);"}, {"sha": "311369a260d76e86ba0939dd8e4e8893ead0590c", "filename": "tests/ui/borrowck/borrowck-loan-of-static-data-issue-27616.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,12 +2,12 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n   --> $DIR/borrowck-loan-of-static-data-issue-27616.rs:16:5\n    |\n LL |     let alias: &'static mut String = s;\n-   |                -------------------   - borrow of `*s` occurs here\n+   |                -------------------   - `*s` is borrowed here\n    |                |\n    |                type annotation requires that `*s` is borrowed for `'static`\n ...\n LL |     *s = String::new();\n-   |     ^^ assignment to borrowed `*s` occurs here\n+   |     ^^ `*s` is assigned to here but it was already borrowed\n \n error: aborting due to previous error\n "}, {"sha": "f1640d3b7776f56fdff5759249439f30858c0628", "filename": "tests/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n   --> $DIR/borrowck-loan-rcvr-overloaded-op.rs:38:5\n    |\n LL |     let q = &mut p;\n-   |             ------ borrow of `p` occurs here\n+   |             ------ `p` is borrowed here\n LL |\n LL |     p + 3;\n    |     ^ use of borrowed `p`"}, {"sha": "e5c0ec960a4a705b2b6d8994b769b655ea6f26ac", "filename": "tests/ui/borrowck/borrowck-match-already-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `foo` because it was mutably borrowed\n   --> $DIR/borrowck-match-already-borrowed.rs:9:19\n    |\n LL |     let p = &mut foo;\n-   |             -------- borrow of `foo` occurs here\n+   |             -------- `foo` is borrowed here\n LL |     let _ = match foo {\n    |                   ^^^ use of borrowed `foo`\n ...\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `foo.0` because it was mutably borrowed\n   --> $DIR/borrowck-match-already-borrowed.rs:12:16\n    |\n LL |     let p = &mut foo;\n-   |             -------- borrow of `foo` occurs here\n+   |             -------- `foo` is borrowed here\n ...\n LL |         Foo::A(x) => x\n    |                ^ use of borrowed `foo`\n@@ -25,7 +25,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-match-already-borrowed.rs:22:9\n    |\n LL |     let r = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     let _ = match x {\n LL |         x => x + 1,\n    |         ^ use of borrowed `x`\n@@ -37,7 +37,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-match-already-borrowed.rs:23:9\n    |\n LL |     let r = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n ...\n LL |         y => y + 2,\n    |         ^ use of borrowed `x`"}, {"sha": "6eaa1fa3169321fdfeefcb49a50e2be5b1d010ee", "filename": "tests/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -10,7 +10,7 @@ LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             |                  |\n    |                             |                  variable moved due to use in closure\n    |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |                             move out of `bar` occurs here\n+   |                             `bar` is moved here\n \n error: aborting due to previous error\n "}, {"sha": "bd94f1a4299b808dc519713aca3357fe7b917199", "filename": "tests/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `*a` because it is borrowed\n   --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:12:13\n    |\n+LL |     let a: Box<Box<_>> = Box::new(Box::new(2));\n+   |         - binding `a` declared here\n LL |     let b = &a;\n    |             -- borrow of `a` occurs here\n LL |"}, {"sha": "341146bd18fd9496c7c0ca389c829d756ba432cd", "filename": "tests/ui/borrowck/borrowck-move-subcomponent.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `a.x` because it is borrowed\n   --> $DIR/borrowck-move-subcomponent.rs:15:14\n    |\n+LL |   let a : S = S { x : Box::new(1) };\n+   |       - binding `a` declared here\n LL |   let pb = &a;\n    |            -- borrow of `a` occurs here\n LL |   let S { x: ax } = a;"}, {"sha": "70abe7b346e1a75aaab94c1cdc960aff27b15787", "filename": "tests/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `x1` because it is borrowed\n   --> $DIR/borrowck-multiple-captures.rs:12:19\n    |\n+LL |     let x1: Box<_> = Box::new(1);\n+   |         -- binding `x1` declared here\n LL |     let p1 = &x1;\n    |              --- borrow of `x1` occurs here\n ...\n@@ -16,6 +18,8 @@ LL |     borrow(&*p1);\n error[E0505]: cannot move out of `x2` because it is borrowed\n   --> $DIR/borrowck-multiple-captures.rs:12:19\n    |\n+LL |     let x2: Box<_> = Box::new(2);\n+   |         -- binding `x2` declared here\n LL |     let p2 = &x2;\n    |              --- borrow of `x2` occurs here\n LL |     thread::spawn(move|| {\n@@ -77,6 +81,8 @@ LL |         drop(x);\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrowck-multiple-captures.rs:38:19\n    |\n+LL |     let x: Box<_> = Box::new(1);\n+   |         - binding `x` declared here\n LL |     let p = &x;\n    |             -- borrow of `x` occurs here\n LL |     thread::spawn(move|| {"}, {"sha": "7f42becd21c2a48195af9fc96865de4e77cd1ff9", "filename": "tests/ui/borrowck/borrowck-overloaded-index-and-overloaded-deref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `v` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-and-overloaded-deref.rs:31:5\n    |\n LL |     let i = &v[0].f;\n-   |              - borrow of `v` occurs here\n+   |              - `v` is borrowed here\n LL |     v = MyVec { x: MyPtr { x: Foo { f: 23 } } };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `v` occurs here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `v` is assigned to here but it was already borrowed\n LL |\n LL |     read(*i);\n    |          -- borrow later used here"}, {"sha": "fb7af50bcb5650c7ab7c4659cc401c26ab590333", "filename": "tests/ui/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -42,39 +42,39 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:71:5\n    |\n LL |     let p = &f.foo[&s];\n-   |              ----- borrow of `f.foo` occurs here\n+   |              ----- `f.foo` is borrowed here\n LL |     f.foo = g;\n-   |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n+   |     ^^^^^^^^^ `f.foo` is assigned to here but it was already borrowed\n LL |     p.use_ref();\n    |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:77:5\n    |\n LL |     let p = &f.foo[&s];\n-   |              ----- borrow of `*f` occurs here\n+   |              ----- `*f` is borrowed here\n LL |     *f = g;\n-   |     ^^^^^^ assignment to borrowed `*f` occurs here\n+   |     ^^^^^^ `*f` is assigned to here but it was already borrowed\n LL |     p.use_ref();\n    |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:83:5\n    |\n LL |     let p = &mut f.foo[&s];\n-   |                  ----- borrow of `f.foo` occurs here\n+   |                  ----- `f.foo` is borrowed here\n LL |     f.foo = g;\n-   |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n+   |     ^^^^^^^^^ `f.foo` is assigned to here but it was already borrowed\n LL |     p.use_mut();\n    |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:89:5\n    |\n LL |     let p = &mut f.foo[&s];\n-   |                  ----- borrow of `*f` occurs here\n+   |                  ----- `*f` is borrowed here\n LL |     *f = g;\n-   |     ^^^^^^ assignment to borrowed `*f` occurs here\n+   |     ^^^^^^ `*f` is assigned to here but it was already borrowed\n LL |     p.use_mut();\n    |     ----------- borrow later used here\n "}, {"sha": "7f8cc74a7157a695bfa7b45fe47776384e97b5ec", "filename": "tests/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `s` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-move-index.rs:50:22\n    |\n+LL |     let mut s = \"hello\".to_string();\n+   |         ----- binding `s` declared here\n LL |     let rs = &mut s;\n    |              ------ borrow of `s` occurs here\n LL |\n@@ -13,6 +15,8 @@ LL |     use_mut(rs);\n error[E0505]: cannot move out of `s` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-move-index.rs:53:7\n    |\n+LL |     let mut s = \"hello\".to_string();\n+   |         ----- binding `s` declared here\n LL |     let rs = &mut s;\n    |              ------ borrow of `s` occurs here\n ..."}, {"sha": "b86a8693881a96aca5e8b5db0f40c0a68b3c60e5", "filename": "tests/ui/borrowck/borrowck-pat-reassign-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-pat-reassign-binding.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-pat-reassign-binding.rs:10:11\n    |\n LL |       Some(ref i) => {\n-   |            ----- borrow of `x` occurs here\n+   |            ----- `x` is borrowed here\n LL |           // But on this branch, `i` is an outstanding borrow\n LL |           x = Some(*i+1);\n-   |           ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |           ^^^^^^^^^^^^^^ `x` is assigned to here but it was already borrowed\n LL |           drop(i);\n    |                - borrow later used here\n "}, {"sha": "a87a14e7cabd8fca08a63458e855f4772c952dd4", "filename": "tests/ui/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `u.c` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow-nested.rs:24:21\n    |\n LL |             let ra = &mut u.s.a;\n-   |                      ---------- borrow of `u.s.a` occurs here\n+   |                      ---------- `u.s.a` is borrowed here\n LL |             let b = u.c;\n    |                     ^^^ use of borrowed `u.s.a`\n LL |             ra.use_mut();"}, {"sha": "11a28f6744b701da2a32a8f80ed862c882133859", "filename": "tests/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -12,9 +12,9 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:28:13\n    |\n LL |             let ra = &u.a;\n-   |                      ---- borrow of `u.a` occurs here\n+   |                      ---- `u.a` is borrowed here\n LL |             u.a = 1;\n-   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n+   |             ^^^^^^^ `u.a` is assigned to here but it was already borrowed\n LL |             drop(ra);\n    |                  -- borrow later used here\n \n@@ -34,9 +34,9 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:49:13\n    |\n LL |             let ra = &u.a;\n-   |                      ---- borrow of `u.b` occurs here\n+   |                      ---- `u.b` is borrowed here\n LL |             u.b = 1;\n-   |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n+   |             ^^^^^^^ `u.b` is assigned to here but it was already borrowed\n LL |             drop(ra);\n    |                  -- borrow later used here\n \n@@ -54,7 +54,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:60:21\n    |\n LL |             let ra = &mut u.a;\n-   |                      -------- borrow of `u.a` occurs here\n+   |                      -------- `u.a` is borrowed here\n LL |             let a = u.a;\n    |                     ^^^ use of borrowed `u.a`\n LL |             drop(ra);\n@@ -74,9 +74,9 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:70:13\n    |\n LL |             let rma = &mut u.a;\n-   |                       -------- borrow of `u.a` occurs here\n+   |                       -------- `u.a` is borrowed here\n LL |             u.a = 1;\n-   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n+   |             ^^^^^^^ `u.a` is assigned to here but it was already borrowed\n LL |             drop(rma);\n    |                  --- borrow later used here\n \n@@ -96,7 +96,7 @@ error[E0503]: cannot use `u.b` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:81:21\n    |\n LL |             let ra = &mut u.a;\n-   |                      -------- borrow of `u.a` occurs here\n+   |                      -------- `u.a` is borrowed here\n LL |             let b = u.b;\n    |                     ^^^ use of borrowed `u.a`\n LL |\n@@ -119,9 +119,9 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:92:13\n    |\n LL |             let rma = &mut u.a;\n-   |                       -------- borrow of `u.b` occurs here\n+   |                       -------- `u.b` is borrowed here\n LL |             u.b = 1;\n-   |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n+   |             ^^^^^^^ `u.b` is assigned to here but it was already borrowed\n LL |             drop(rma);\n    |                  --- borrow later used here\n "}, {"sha": "4d300ae3c527b3c8610f6098c29298c7d624f444", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:11:10\n    |\n LL |     let p = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     drop(x);\n    |          ^ use of borrowed `x`\n LL |     *p = 2;\n@@ -12,7 +12,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:18:10\n    |\n LL |     let p = &mut x.a;\n-   |             -------- borrow of `x.a` occurs here\n+   |             -------- `x.a` is borrowed here\n LL |     drop(x);\n    |          ^ use of borrowed `x.a`\n LL |     *p = 3;\n@@ -22,7 +22,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:25:10\n    |\n LL |     let p = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     drop(x.a);\n    |          ^^^ use of borrowed `x`\n LL |     p.a = 3;\n@@ -32,7 +32,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:32:10\n    |\n LL |     let p = &mut x.a;\n-   |             -------- borrow of `x.a` occurs here\n+   |             -------- `x.a` is borrowed here\n LL |     drop(x.a);\n    |          ^^^ use of borrowed `x.a`\n LL |     *p = 3;\n@@ -42,7 +42,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:39:13\n    |\n LL |     let p = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x`\n LL |     drop(y);\n@@ -53,7 +53,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:47:13\n    |\n LL |     let p = &mut x.a;\n-   |             -------- borrow of `x.a` occurs here\n+   |             -------- `x.a` is borrowed here\n LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x.a`\n LL |     drop(y);\n@@ -64,7 +64,7 @@ error[E0503]: cannot use `*x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:55:10\n    |\n LL |     let p = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     drop(*x);\n    |          ^^ use of borrowed `x`\n LL |     **p = 2;\n@@ -74,7 +74,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:62:10\n    |\n LL |     let p = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x`\n LL |     p.a = 3;\n@@ -84,7 +84,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:69:10\n    |\n LL |     let p = &mut x.b;\n-   |             -------- borrow of `x.b` occurs here\n+   |             -------- `x.b` is borrowed here\n LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x.b`\n LL |     **p = 3;"}, {"sha": "494d8c351a152930852687740887b1342dd79cd8", "filename": "tests/ui/borrowck/borrowck-vec-pattern-move-tail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `a[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-move-tail.rs:8:5\n    |\n LL |         [1, 2, ref tail @ ..] => tail,\n-   |                -------- borrow of `a[_]` occurs here\n+   |                -------- `a[_]` is borrowed here\n ...\n LL |     a[2] = 0;\n-   |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here\n+   |     ^^^^^^^^ `a[_]` is assigned to here but it was already borrowed\n LL |     println!(\"t[0]: {}\", t[0]);\n    |                          ---- borrow later used here\n "}, {"sha": "1bda7a4971375491003540a23cfc68c4a02887f5", "filename": "tests/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -5,9 +5,9 @@ fn a() {\n     let mut vec = [Box::new(1), Box::new(2), Box::new(3)];\n     match vec {\n         [box ref _a, _, _] => {\n-        //~^ NOTE borrow of `vec[_]` occurs here\n+        //~^ NOTE `vec[_]` is borrowed here\n             vec[0] = Box::new(4); //~ ERROR cannot assign\n-            //~^ NOTE assignment to borrowed `vec[_]` occurs here\n+            //~^ NOTE `vec[_]` is assigned to here\n             _a.use_ref();\n             //~^ NOTE borrow later used here\n         }\n@@ -19,9 +19,9 @@ fn b() {\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [ref _b @ ..] => {\n-        //~^ borrow of `vec[_]` occurs here\n+        //~^ `vec[_]` is borrowed here\n             vec[0] = Box::new(4); //~ ERROR cannot assign\n-            //~^ NOTE assignment to borrowed `vec[_]` occurs here\n+            //~^ NOTE `vec[_]` is assigned to here\n             _b.use_ref();\n             //~^ NOTE borrow later used here\n         }"}, {"sha": "70b9e4f4433b34e8ae6926e2fd507c658bf92c15", "filename": "tests/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:9:13\n    |\n LL |         [box ref _a, _, _] => {\n-   |              ------ borrow of `vec[_]` occurs here\n+   |              ------ `vec[_]` is borrowed here\n LL |\n LL |             vec[0] = Box::new(4);\n-   |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n+   |             ^^^^^^ `vec[_]` is assigned to here but it was already borrowed\n LL |\n LL |             _a.use_ref();\n    |             ------------ borrow later used here\n@@ -14,10 +14,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b @ ..] => {\n-   |               ------ borrow of `vec[_]` occurs here\n+   |               ------ `vec[_]` is borrowed here\n LL |\n LL |             vec[0] = Box::new(4);\n-   |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n+   |             ^^^^^^ `vec[_]` is assigned to here but it was already borrowed\n LL |\n LL |             _b.use_ref();\n    |             ------------ borrow later used here"}, {"sha": "27dab53e48fd5c93fad79b6af16e57d474b2b7a2", "filename": "tests/ui/borrowck/issue-25793.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-25793.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -5,7 +5,7 @@ LL |         $this.width.unwrap()\n    |         ^^^^^^^^^^^ use of borrowed `*self`\n ...\n LL |         let r = &mut *self;\n-   |                 ---------- borrow of `*self` occurs here\n+   |                 ---------- `*self` is borrowed here\n LL |         r.get_size(width!(self))\n    |           -------- ------------ in this macro invocation\n    |           |"}, {"sha": "3f7715645e60c28f56c0a17f1003daef69310409", "filename": "tests/ui/borrowck/issue-52713-bug.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-52713-bug.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/issue-52713-bug.rs:12:5\n    |\n LL |     let y = &x;\n-   |             -- borrow of `x` occurs here\n+   |             -- `x` is borrowed here\n ...\n LL |     x += 1;\n-   |     ^^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^^ `x` is assigned to here but it was already borrowed\n LL |     println!(\"{}\", y);\n    |                    - borrow later used here\n "}, {"sha": "0870b4237690e2b8040ee74cbc132292023c4079", "filename": "tests/ui/borrowck/issue-58776-borrowck-scans-children.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,10 +4,10 @@ error[E0506]: cannot assign to `greeting` because it is borrowed\n LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure\n    |                |\n-   |                borrow of `greeting` occurs here\n+   |                `greeting` is borrowed here\n LL |\n LL |     greeting = \"DEALLOCATED\".to_string();\n-   |     ^^^^^^^^ assignment to borrowed `greeting` occurs here\n+   |     ^^^^^^^^ `greeting` is assigned to here but it was already borrowed\n ...\n LL |     println!(\"thread result: {:?}\", res);\n    |                                     --- borrow later used here"}, {"sha": "0d803b0427ace43bfbf752f704fa7bc85f5bdc59", "filename": "tests/ui/borrowck/issue-81365-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-1.rs:21:9\n    |\n LL |         let first = &self.target_field;\n-   |                      ---- borrow of `self.container_field` occurs here\n+   |                      ---- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "d0986e9f922e656ca3d21f32db01b9be30af287d", "filename": "tests/ui/borrowck/issue-81365-10.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-10.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-10.rs:21:9\n    |\n LL |         let first = &self.deref().target_field;\n-   |                      ------------ borrow of `self.container_field` occurs here\n+   |                      ------------ `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n "}, {"sha": "5f7e86f11dcd1daeb15ba92f150e9458b27bcbe6", "filename": "tests/ui/borrowck/issue-81365-11.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-11.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-11.rs:27:9\n    |\n LL |         let first = &mut self.target_field;\n-   |                          ---- borrow of `self.container_field` occurs here\n+   |                          ---- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n "}, {"sha": "d9aeaf15f2002679a8867f852e2035387f84b600", "filename": "tests/ui/borrowck/issue-81365-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container.container_field` because it is bo\n   --> $DIR/issue-81365-2.rs:25:9\n    |\n LL |         let first = &self.container.target_field;\n-   |                      -------------- borrow of `self.container.container_field` occurs here\n+   |                      -------------- `self.container.container_field` is borrowed here\n LL |         self.container.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "0c0d1994baff2a3359b782aeb8f24eb79098d536", "filename": "tests/ui/borrowck/issue-81365-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-3.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container.container_field` because it is bo\n   --> $DIR/issue-81365-3.rs:32:9\n    |\n LL |         let first = &self.target_field;\n-   |                      ---- borrow of `self.container.container_field` occurs here\n+   |                      ---- `self.container.container_field` is borrowed here\n LL |         self.container.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "98093daa94520ca577eff8b80250fe28d4cb8307", "filename": "tests/ui/borrowck/issue-81365-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-4.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.outer_field` because it is borrowed\n   --> $DIR/issue-81365-4.rs:33:9\n    |\n LL |         let first = &self.target_field;\n-   |                      ---- borrow of `self.outer_field` occurs here\n+   |                      ---- `self.outer_field` is borrowed here\n LL |         self.outer_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.outer_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ `self.outer_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "c00e48288ba075985af16bcef0309e9117362770", "filename": "tests/ui/borrowck/issue-81365-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-5.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-5.rs:28:9\n    |\n LL |         let first = self.get();\n-   |                     ---------- borrow of `self.container_field` occurs here\n+   |                     ---------- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "e61dc95ecc8fad2526d5145e04336c0170a9a33c", "filename": "tests/ui/borrowck/issue-81365-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-6.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-6.rs:18:9\n    |\n LL |         let first = &self[0];\n-   |                      ---- borrow of `self.container_field` occurs here\n+   |                      ---- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "0565127e3875be859af07a4c8697ce88fdb76062", "filename": "tests/ui/borrowck/issue-81365-7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-7.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `c.container_field` because it is borrowed\n   --> $DIR/issue-81365-7.rs:20:5\n    |\n LL |     let first = &c.target_field;\n-   |                  - borrow of `c.container_field` occurs here\n+   |                  - `c.container_field` is borrowed here\n LL |     c.container_field = true;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `c.container_field` occurs here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `c.container_field` is assigned to here but it was already borrowed\n LL |     first;\n    |     ----- borrow later used here\n    |"}, {"sha": "0ca732ff2ae434b6709cf120c39cdbc23a4f838b", "filename": "tests/ui/borrowck/issue-81365-8.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-8.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-8.rs:21:9\n    |\n LL |         let first = &(*self).target_field;\n-   |                      ------- borrow of `self.container_field` occurs here\n+   |                      ------- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n    |"}, {"sha": "4d305268a0b33d5841baecb7e28ebe8f67a35149", "filename": "tests/ui/borrowck/issue-81365-9.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-81365-9.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-9.rs:21:9\n    |\n LL |         let first = &Deref::deref(self).target_field;\n-   |                                   ---- borrow of `self.container_field` occurs here\n+   |                                   ---- `self.container_field` is borrowed here\n LL |         self.container_field = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self.container_field` is assigned to here but it was already borrowed\n LL |         first;\n    |         ----- borrow later used here\n "}, {"sha": "1356c80493cdb8b441d368913d1b7c3fe6b790a9", "filename": "tests/ui/borrowck/two-phase-allow-access-during-reservation.nll_target.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `i` because it was mutably borrowed\n   --> $DIR/two-phase-allow-access-during-reservation.rs:26:19\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n-   |                   ------ borrow of `i` occurs here\n+   |                   ------ `i` is borrowed here\n LL |\n LL |     /*2*/ let j = i;      // OK: `i` is only reserved here\n    |                   ^ use of borrowed `i`\n@@ -14,7 +14,7 @@ error[E0503]: cannot use `i` because it was mutably borrowed\n   --> $DIR/two-phase-allow-access-during-reservation.rs:31:19\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n-   |                   ------ borrow of `i` occurs here\n+   |                   ------ `i` is borrowed here\n ...\n LL |     /*4*/ let k = i;\n    |                   ^ use of borrowed `i`"}, {"sha": "e75094d4f1309eba7f17640e89c340de14195a6f", "filename": "tests/ui/borrowck/two-phase-surprise-no-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `self.cx` because it was mutably borrowed\n   --> $DIR/two-phase-surprise-no-conflict.rs:21:23\n    |\n LL |         let _mut_borrow = &mut *self;\n-   |                           ---------- borrow of `*self` occurs here\n+   |                           ---------- `*self` is borrowed here\n LL |         let _access = self.cx;\n    |                       ^^^^^^^ use of borrowed `*self`\n LL |"}, {"sha": "d405e465aaeea2e27f87ed94748748a127b5646d", "filename": "tests/ui/btreemap/btreemap_dropck.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbtreemap%2Fbtreemap_dropck.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `s` because it is borrowed\n   --> $DIR/btreemap_dropck.rs:15:10\n    |\n+LL |     let s = String::from(\"Hello World!\");\n+   |         - binding `s` declared here\n LL |     let _map = BTreeMap::from_iter([((), PrintOnDrop(&s))]);\n    |                                                      -- borrow of `s` occurs here\n LL |     drop(s);"}, {"sha": "c9d90d73dea318d661ddee493307401b6d07de8a", "filename": "tests/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -107,7 +107,9 @@ error[E0597]: `ap1` does not live long enough\n   --> $DIR/variadic-ffi-4.rs:28:11\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                                        - let's call the lifetime of this reference `'3`\n+   |                                                        -                ------- binding `ap1` declared here\n+   |                                                        |\n+   |                                                        let's call the lifetime of this reference `'3`\n LL |     ap0 = &mut ap1;\n    |     ------^^^^^^^^\n    |     |     |"}, {"sha": "9e5200ef34b54204a4b5fa37748cea128a01850a", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `arr` because it was mutably borrowed\n   --> $DIR/arrays.rs:14:5\n    |\n LL |     let mut c = || {\n-   |                 -- borrow of `arr` occurs here\n+   |                 -- `arr` is borrowed here\n LL |         arr[0] += 10;\n    |         --- borrow occurs due to use of `arr` in closure\n ...\n@@ -16,7 +16,7 @@ error[E0503]: cannot use `arr[_]` because it was mutably borrowed\n   --> $DIR/arrays.rs:14:5\n    |\n LL |     let mut c = || {\n-   |                 -- borrow of `arr` occurs here\n+   |                 -- `arr` is borrowed here\n LL |         arr[0] += 10;\n    |         --- borrow occurs due to use of `arr` in closure\n ...\n@@ -30,12 +30,12 @@ error[E0506]: cannot assign to `arr[_]` because it is borrowed\n   --> $DIR/arrays.rs:29:5\n    |\n LL |     let c = || {\n-   |             -- borrow of `arr[_]` occurs here\n+   |             -- `arr[_]` is borrowed here\n LL |         println!(\"{:#?}\", &arr[3..4]);\n    |                            --- borrow occurs due to use in closure\n ...\n LL |     arr[1] += 10;\n-   |     ^^^^^^^^^^^^ assignment to borrowed `arr[_]` occurs here\n+   |     ^^^^^^^^^^^^ `arr[_]` is assigned to here but it was already borrowed\n LL |\n LL |     c();\n    |     - borrow later used here\n@@ -44,12 +44,12 @@ error[E0506]: cannot assign to `arr[_]` because it is borrowed\n   --> $DIR/arrays.rs:43:5\n    |\n LL |     let c = || {\n-   |             -- borrow of `arr[_]` occurs here\n+   |             -- `arr[_]` is borrowed here\n LL |         println!(\"{}\", arr[3]);\n    |                        --- borrow occurs due to use in closure\n ...\n LL |     arr[1] += 10;\n-   |     ^^^^^^^^^^^^ assignment to borrowed `arr[_]` occurs here\n+   |     ^^^^^^^^^^^^ `arr[_]` is assigned to here but it was already borrowed\n LL |\n LL |     c();\n    |     - borrow later used here\n@@ -58,7 +58,7 @@ error[E0503]: cannot use `arr` because it was mutably borrowed\n   --> $DIR/arrays.rs:57:20\n    |\n LL |     let mut c = || {\n-   |                 -- borrow of `arr` occurs here\n+   |                 -- `arr` is borrowed here\n LL |         arr[1] += 10;\n    |         --- borrow occurs due to use of `arr` in closure\n ..."}, {"sha": "2e3259e64059615f8eedb4a9c988f0fbcdfa6922", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,12 +2,12 @@ error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n   --> $DIR/box.rs:21:5\n    |\n LL |     let mut c = || {\n-   |                 -- borrow of `e.0.0.m.x` occurs here\n+   |                 -- `e.0.0.m.x` is borrowed here\n LL |         e.0.0.m.x = format!(\"not-x\");\n    |         --------- borrow occurs due to use in closure\n ...\n LL |     e.0.0.m.x = format!(\"not-x\");\n-   |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here\n+   |     ^^^^^^^^^ `e.0.0.m.x` is assigned to here but it was already borrowed\n LL |\n LL |     c();\n    |     - borrow later used here\n@@ -32,12 +32,12 @@ error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n   --> $DIR/box.rs:55:5\n    |\n LL |     let c = || {\n-   |             -- borrow of `e.0.0.m.x` occurs here\n+   |             -- `e.0.0.m.x` is borrowed here\n LL |         println!(\"{}\", e.0.0.m.x);\n    |                        --------- borrow occurs due to use in closure\n ...\n LL |     e.0.0.m.x = format!(\"not-x\");\n-   |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here\n+   |     ^^^^^^^^^ `e.0.0.m.x` is assigned to here but it was already borrowed\n LL |\n LL |     c();\n    |     - borrow later used here"}, {"sha": "695337ea82cf9fadc2f22ae1fe2c99069c124646", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/union.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.rs?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -11,15 +11,15 @@ union A {\n fn main() {\n     let mut a = A { y: 1 };\n     let mut c = || {\n-    //~^ borrow of `a.y` occurs here\n+    //~^ `a.y` is borrowed here\n         let _ = unsafe { &a.y };\n         let _ = &mut a;\n         //~^ borrow occurs due to use in closure\n         let _ = unsafe { &mut a.y };\n     };\n     a.y = 1;\n     //~^ cannot assign to `a.y` because it is borrowed [E0506]\n-    //~| assignment to borrowed `a.y` occurs here\n+    //~| `a.y` is assigned to here\n     c();\n     //~^ borrow later used here\n }"}, {"sha": "17834e6123628a1f47df5152ebd8a7bc71b1831b", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/union.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Funion.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,13 +2,13 @@ error[E0506]: cannot assign to `a.y` because it is borrowed\n   --> $DIR/union.rs:20:5\n    |\n LL |     let mut c = || {\n-   |                 -- borrow of `a.y` occurs here\n+   |                 -- `a.y` is borrowed here\n ...\n LL |         let _ = &mut a;\n    |                      - borrow occurs due to use in closure\n ...\n LL |     a.y = 1;\n-   |     ^^^^^^^ assignment to borrowed `a.y` occurs here\n+   |     ^^^^^^^ `a.y` is assigned to here but it was already borrowed\n ...\n LL |     c();\n    |     - borrow later used here"}, {"sha": "d412b8b08b79a8a865d784560db0945c1b1c9d0f", "filename": "tests/ui/coercion/coerce-overloaded-autoderef-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -13,10 +13,10 @@ error[E0506]: cannot assign to `**x` because it is borrowed\n   --> $DIR/coerce-overloaded-autoderef-fail.rs:17:5\n    |\n LL |     let y = borrow(x);\n-   |                    - borrow of `**x` occurs here\n+   |                    - `**x` is borrowed here\n LL |     let z = borrow(x);\n LL |     **x += 1;\n-   |     ^^^^^^^^ assignment to borrowed `**x` occurs here\n+   |     ^^^^^^^^ `**x` is assigned to here but it was already borrowed\n LL |\n LL |     drop((y, z));\n    |           - borrow later used here"}, {"sha": "6e0349a4773cdd8ee77cd9d390ce0cfa8d731f83", "filename": "tests/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `y` does not live long enough\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`\n LL |         let y = 42;\n+   |             - binding `y` declared here\n LL |         &y\n    |         ^^ borrowed value does not live long enough\n LL |     };"}, {"sha": "23d57634e8fd2e19e55b63c40b3f43736056f342", "filename": "tests/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:46:23\n    |\n+LL |         let (mut dt, mut dr, c_shortest): (Dt<_>, Dr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         dt = Dt(\"dt\", &c_shortest);\n    |                       ^^^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL |     }\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:68:32\n    |\n+LL |         let (mut pt, mut pr, c_shortest): (Pt<_, _>, Pr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         pt = Pt(\"pt\", &c_long, &c_shortest);\n    |                                ^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "a5d5136b5c578bd530e51577c48bc4b95087461b", "filename": "tests/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:64:23\n    |\n+LL |         let (mut dt, mut dr, c_shortest): (Dt<_>, Dr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         dt = Dt(\"dt\", &c_shortest);\n    |                       ^^^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL |     }\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:86:32\n    |\n+LL |         let (mut pt, mut pr, c_shortest): (Pt<_, _>, Pr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         pt = Pt(\"pt\", &c_long, &c_shortest);\n    |                                ^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "dc3f8c05e7396445176b4efc58f7739aeb0c3f20", "filename": "tests/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:88:23\n    |\n+LL |         let (mut dt, mut dr, c_shortest): (Dt<_>, Dr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         dt = Dt(\"dt\", &c_shortest);\n    |                       ^^^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL |     }\n error[E0597]: `c_shortest` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:110:32\n    |\n+LL |         let (mut pt, mut pr, c_shortest): (Pt<_, _>, Pr<_>, Cell<_>);\n+   |                              ---------- binding `c_shortest` declared here\n+...\n LL |         pt = Pt(\"pt\", &c_long, &c_shortest);\n    |                                ^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "7d48e9fdcee3192c0a8266585cbe726cd8ab9cbb", "filename": "tests/ui/dropck/dropck-union.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdropck-union.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/dropck-union.rs:37:18\n    |\n+LL |     let v : Wrap<C> = Wrap::new(C(Cell::new(None)));\n+   |         - binding `v` declared here\n LL |     v.0.set(Some(&v));\n    |                  ^^ borrowed value does not live long enough\n LL | }"}, {"sha": "4d4f7b9df11799e4ede4246fd7602c93c98bfb6e", "filename": "tests/ui/dropck/dropck_trait_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:111:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                     -------- cast requires that `o2` is borrowed for `'static`\n+   |              -- binding `o2` declared here                          -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n@@ -13,7 +13,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:112:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                     -------- cast requires that `o3` is borrowed for `'static`\n+   |                  -- binding `o3` declared here                      -------- cast requires that `o3` is borrowed for `'static`\n LL |     o1.set0(&o2);\n LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -25,7 +25,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:113:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+   |              -- binding `o2` declared here                                    -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o2.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n@@ -37,7 +37,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:114:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o3` is borrowed for `'static`\n+   |                  -- binding `o3` declared here                                -------- cast requires that `o3` is borrowed for `'static`\n ...\n LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -49,7 +49,7 @@ error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:115:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o1` is borrowed for `'static`\n+   |          -- binding `o1` declared here                                                  -------- cast requires that `o1` is borrowed for `'static`\n ...\n LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n@@ -61,7 +61,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:116:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o2` is borrowed for `'static`\n+   |              -- binding `o2` declared here                                              -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough"}, {"sha": "1254250bcbd85cb91a8e43b53a5f47dcccc46c50", "filename": "tests/ui/dst/dst-bad-coerce3.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdst%2Fdst-bad-coerce3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fdst%2Fdst-bad-coerce3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce3.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -3,7 +3,9 @@ error[E0597]: `f1` does not live long enough\n    |\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n-...\n+LL |     // With a vec of ints.\n+LL |     let f1 = Fat { ptr: [1, 2, 3] };\n+   |         -- binding `f1` declared here\n LL |     let f2: &Fat<[isize; 3]> = &f1;\n    |                                ^^^ borrowed value does not live long enough\n LL |     let f3: &'a Fat<[isize]> = f2;\n@@ -18,6 +20,8 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n+LL |     let f1 = Fat { ptr: Foo };\n+   |         -- binding `f1` declared here\n LL |     let f2: &Fat<Foo> = &f1;\n    |                         ^^^ borrowed value does not live long enough\n LL |     let f3: &'a Fat<dyn Bar> = f2;\n@@ -32,6 +36,8 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n+LL |     let f1 = ([1, 2, 3],);\n+   |         -- binding `f1` declared here\n LL |     let f2: &([isize; 3],) = &f1;\n    |                              ^^^ borrowed value does not live long enough\n LL |     let f3: &'a ([isize],) = f2;\n@@ -46,6 +52,8 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n+LL |     let f1 = (Foo,);\n+   |         -- binding `f1` declared here\n LL |     let f2: &(Foo,) = &f1;\n    |                       ^^^ borrowed value does not live long enough\n LL |     let f3: &'a (dyn Bar,) = f2;"}, {"sha": "2f02e3b1a613818270858b301bd3e55b7f720c85", "filename": "tests/ui/error-codes/E0503.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0503.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0503.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0503.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `value` because it was mutably borrowed\n   --> $DIR/E0503.rs:4:16\n    |\n LL |     let _borrow = &mut value;\n-   |                   ---------- borrow of `value` occurs here\n+   |                   ---------- `value` is borrowed here\n LL |     let _sum = value + 1;\n    |                ^^^^^ use of borrowed `value`\n LL |     _borrow.use_mut();"}, {"sha": "20e16a5381061af846c2e6b9e8838a83e57f043e", "filename": "tests/ui/error-codes/E0504.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0504.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `fancy_num` because it is borrowed\n   --> $DIR/E0504.rs:9:13\n    |\n+LL |     let fancy_num = FancyNum { num: 5 };\n+   |         --------- binding `fancy_num` declared here\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n LL |"}, {"sha": "2ecb4a75c4382627f26865584ebfbd8af731fee7", "filename": "tests/ui/error-codes/E0505.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0505.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/E0505.rs:9:13\n    |\n+LL |     let x = Value{};\n+   |         - binding `x` declared here\n+LL |     {\n LL |         let _ref_to_val: &Value = &x;\n    |                                   -- borrow of `x` occurs here\n LL |         eat(x);"}, {"sha": "17ad7c611f824eef6a68d59e56ba40eebbd68317", "filename": "tests/ui/error-codes/E0506.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0506.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `fancy_num` because it is borrowed\n   --> $DIR/E0506.rs:8:5\n    |\n LL |     let fancy_ref = &fancy_num;\n-   |                     ---------- borrow of `fancy_num` occurs here\n+   |                     ---------- `fancy_num` is borrowed here\n LL |     fancy_num = FancyNum { num: 6 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `fancy_num` is assigned to here but it was already borrowed\n LL |\n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n    |                                                 ------------- borrow later used here"}, {"sha": "82e3481b65a593ba17f019d7f546c46ba58bebd0", "filename": "tests/ui/error-codes/E0597.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ferror-codes%2FE0597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0597.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/E0597.rs:8:16\n    |\n+LL |     let y = 0;\n+   |         - binding `y` declared here\n LL |     x.x = Some(&y);\n    |                ^^ borrowed value does not live long enough\n LL |"}, {"sha": "4df639232a332436b0d122f23980c199a8b5e5b4", "filename": "tests/ui/fn/implied-bounds-unnorm-associated-type-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/implied-bounds-unnorm-associated-type-4.rs:21:10\n    |\n+LL |     let x = String::from(\"Hello World!\");\n+   |         - binding `x` declared here\n LL |     let y = f(&x, ());\n    |               -- borrow of `x` occurs here\n LL |     drop(x);"}, {"sha": "d417f28839368978f54d413405094cac3147a068", "filename": "tests/ui/fn/implied-bounds-unnorm-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/implied-bounds-unnorm-associated-type.rs:20:10\n    |\n+LL |     let x = String::from(\"Hello World!\");\n+   |         - binding `x` declared here\n LL |     let y = f(&x, ());\n    |               -- borrow of `x` occurs here\n LL |     drop(x);"}, {"sha": "b93ee37987f272b96888c48506c2c8d2cc534a26", "filename": "tests/ui/generic-associated-types/issue-74684-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `a` does not live long enough\n LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n    |        -- lifetime `'a` defined here\n LL |     let a = [0; 1];\n+   |         - binding `a` declared here\n LL |     let _x = T::identity(&a);\n    |              ------------^^-\n    |              |           |"}, {"sha": "25af011e3fc410049cc0a39322f06044556a0431", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-identity-fn-borrows.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/hrtb-identity-fn-borrows.rs:14:5\n    |\n LL |     let y = f.call(&x);\n-   |                    -- borrow of `x` occurs here\n+   |                    -- `x` is borrowed here\n LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n ...\n LL |     drop(y);\n    |          - borrow later used here"}, {"sha": "b9b8d00ce308b7463efac35c5c51a5725380f309", "filename": "tests/ui/impl-trait/feature-self-return-type.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `bar` does not live long enough\n LL |         let x = {\n    |             - borrow later stored here\n LL |             let bar = 22;\n+   |                 --- binding `bar` declared here\n LL |             Foo::new(&bar).into()\n    |                      ^^^^ borrowed value does not live long enough\n LL |\n@@ -16,6 +17,7 @@ error[E0597]: `y` does not live long enough\n LL |         let x = {\n    |             - borrow later stored here\n LL |             let y = ();\n+   |                 - binding `y` declared here\n LL |             foo(&y)\n    |                 ^^ borrowed value does not live long enough\n LL |\n@@ -28,6 +30,7 @@ error[E0597]: `y` does not live long enough\n LL |         let x = {\n    |             - borrow later stored here\n LL |             let y = ();\n+   |                 - binding `y` declared here\n LL |             foo(&y)\n    |                 ^^ borrowed value does not live long enough\n LL |"}, {"sha": "307899297bc01664fa71c38d2f01b42e30130013", "filename": "tests/ui/implied-bounds/assoc-ty-wf-used-to-get-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/assoc-ty-wf-used-to-get-assoc-ty.rs:24:31\n    |\n+LL |     let x: u8 = 3;\n+   |         - binding `x` declared here\n LL |     let _: &'static u8 = test(&x, &&3);\n    |                          -----^^------\n    |                          |    |"}, {"sha": "443fcf89c4e11d1aa8c5f6c0ee2a02e4b41bcac3", "filename": "tests/ui/inline-const/const-expr-lifetime-err.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `y` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let y = ();\n+   |         - binding `y` declared here\n LL |     equate(InvariantRef::new(&y), const { InvariantRef::<'a>::NEW });\n    |            ------------------^^-\n    |            |                 |"}, {"sha": "db5d064379a76a40a52bd5420adf1bf9bd0e1191", "filename": "tests/ui/issues/issue-40288.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-40288.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-40288.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-40288.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `*refr` because it is borrowed\n   --> $DIR/issue-40288.rs:16:5\n    |\n LL |     save_ref(&*refr, &mut out);\n-   |              ------ borrow of `*refr` occurs here\n+   |              ------ `*refr` is borrowed here\n ...\n LL |     *refr = 3;\n-   |     ^^^^^^^^^ assignment to borrowed `*refr` occurs here\n+   |     ^^^^^^^^^ `*refr` is assigned to here but it was already borrowed\n ...\n LL |     println!(\"{:?}\", out[0]);\n    |                      ------ borrow later used here"}, {"sha": "474313398e2bc35092cb0b5d4f5f5c5fbb395d27", "filename": "tests/ui/issues/issue-45697-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-45697-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-45697-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-45697-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n+   |                                   ------ `y` is borrowed here\n LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n ...\n@@ -13,9 +13,9 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n+   |                                   ------ `*y.pointer` is borrowed here\n LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+   |         ^^^^^^^^^^^^^^^ `*y.pointer` is assigned to here but it was already borrowed\n ...\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here"}, {"sha": "7986fd5c9df2e0b85bf8ea00d2091ec5303ba173", "filename": "tests/ui/issues/issue-45697.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-45697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-45697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-45697.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n+   |                                   ------ `y` is borrowed here\n LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n ...\n@@ -13,9 +13,9 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n+   |                                   ------ `*y.pointer` is borrowed here\n LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+   |         ^^^^^^^^^^^^^^^ `*y.pointer` is assigned to here but it was already borrowed\n ...\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here"}, {"sha": "2ae6e709d5ad5c5235584fdfd4bb086bfb098834", "filename": "tests/ui/issues/issue-46471-1.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fissues%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-46471-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,11 +1,10 @@\n error[E0597]: `z` does not live long enough\n   --> $DIR/issue-46471-1.rs:4:9\n    |\n+LL |         let mut z = 0;\n+   |             ----- binding `z` declared here\n LL |         &mut z\n-   |         ^^^^^^\n-   |         |\n-   |         borrowed value does not live long enough\n-   |         borrow later used here\n+   |         ^^^^^^ borrowed value does not live long enough\n LL |     };\n    |     - `z` dropped here while still borrowed\n "}, {"sha": "3602de8dd9577079f2bb7b6f5e2e9c2dfd9ad769", "filename": "tests/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n    |\n+LL | fn inner(mut foo: &[u8]) {\n+   |          ------- binding `foo` declared here\n LL |     let refcell = RefCell::new(&mut foo);\n    |                                ^^^^^^^^ borrowed value does not live long enough\n LL |"}, {"sha": "5f2074edb12407bf0ab8b4b128cf48846a4f75f2", "filename": "tests/ui/mut/mut-pattern-internal-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -13,9 +13,9 @@ error[E0506]: cannot assign to `*foo` because it is borrowed\n   --> $DIR/mut-pattern-internal-mutability.rs:13:5\n    |\n LL |     let &mut ref x = foo;\n-   |              ----- borrow of `*foo` occurs here\n+   |              ----- `*foo` is borrowed here\n LL |     *foo += 1;\n-   |     ^^^^^^^^^ assignment to borrowed `*foo` occurs here\n+   |     ^^^^^^^^^ `*foo` is assigned to here but it was already borrowed\n LL |     drop(x);\n    |          - borrow later used here\n "}, {"sha": "1cca4077d825ac1bbc163ad71ac88944cb041f37", "filename": "tests/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `v` does not live long enough\n LL |     let x = gimme({\n    |             ----- borrow later used by call\n LL |         let v = (22,);\n+   |             - binding `v` declared here\n LL |         &v\n    |         ^^ borrowed value does not live long enough\n LL |"}, {"sha": "33e3eb797969e36f92e62f9615ebe111e503ea61", "filename": "tests/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/borrowed-match-issue-45045.rs:12:11\n    |\n LL |     let f = &mut e;\n-   |             ------ borrow of `e` occurs here\n+   |             ------ `e` is borrowed here\n LL |     let g = f;\n LL |     match e {\n    |           ^ use of borrowed `e`"}, {"sha": "84b7ecf2f7da82c3e3e8cc10d058b17c981742a2", "filename": "tests/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/capture-ref-in-struct.rs:18:16\n    |\n+LL |         let y = 22;\n+   |             - binding `y` declared here\n+...\n LL |             y: &y,\n    |                ^^ borrowed value does not live long enough\n ..."}, {"sha": "035dd5a561096cbaef671a20e200204ca6a0b1b0", "filename": "tests/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -38,7 +38,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/closure-access-spans.rs:23:13\n    |\n LL |     let r = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     move || x;\n    |             ^ use of borrowed `x`\n LL |     r.use_ref();\n@@ -47,6 +47,8 @@ LL |     r.use_ref();\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/closure-access-spans.rs:29:5\n    |\n+LL | fn closure_move_capture_conflict(mut x: String) {\n+   |                                  ----- binding `x` declared here\n LL |     let r = &x;\n    |             -- borrow of `x` occurs here\n LL |     || x;"}, {"sha": "cf0df5834cc0dd39e30115455d5395c38ccf8df0", "filename": "tests/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -40,9 +40,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let f = || x;\n    |             -- - borrow occurs due to use in closure\n    |             |\n-   |             borrow of `x` occurs here\n+   |             `x` is borrowed here\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     f.use_ref();\n    |     ----------- borrow later used here\n \n@@ -52,7 +52,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use of `x` in closure\n    |             |\n-   |             borrow of `x` occurs here\n+   |             `x` is borrowed here\n LL |     let y = x;\n    |             ^ use of borrowed `x`\n LL |     f.use_ref();\n@@ -100,9 +100,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use in closure\n    |             |\n-   |             borrow of `x` occurs here\n+   |             `x` is borrowed here\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     f.use_ref();\n    |     ----------- borrow later used here\n \n@@ -160,9 +160,9 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n LL |     let f = || *x = 0;\n    |             -- -- borrow occurs due to use in closure\n    |             |\n-   |             borrow of `*x` occurs here\n+   |             `*x` is borrowed here\n LL |     *x = 1;\n-   |     ^^^^^^ assignment to borrowed `*x` occurs here\n+   |     ^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |     f.use_ref();\n    |     ----------- borrow later used here\n "}, {"sha": "5a8462d4dc56e4e1279c9092a9831d5fafbd839f", "filename": "tests/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -21,6 +21,9 @@ LL | fn test() {\n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:27:25\n    |\n+LL |         let y = 22;\n+   |             - binding `y` declared here\n+LL |         let mut closure = expect_sig(|p, y| *p = y);\n LL |         closure(&mut p, &y);\n    |                         ^^ borrowed value does not live long enough\n LL |"}, {"sha": "721cd45ded98e2866c4e6a838ca67e80448f8c16", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -53,6 +53,8 @@ LL | fn case2() {\n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26\n    |\n+LL |       let a = 0;\n+   |           - binding `a` declared here\n LL |       let cell = Cell::new(&a);\n    |                            ^^ borrowed value does not live long enough\n ..."}, {"sha": "0e27e5f5f7c162adf7d46e8cbabf54af423edcdc", "filename": "tests/ui/nll/closure-use-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,29 +2,29 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-use-spans.rs:5:5\n    |\n LL |     let y = &x;\n-   |             -- borrow of `x` occurs here\n+   |             -- `x` is borrowed here\n LL |     x = 0;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     || *y;\n    |        -- borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-use-spans.rs:11:5\n    |\n LL |     let y = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     x = 0;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     || *y = 1;\n    |        -- borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-use-spans.rs:17:5\n    |\n LL |     let y = &x;\n-   |             -- borrow of `x` occurs here\n+   |             -- `x` is borrowed here\n LL |     x = 0;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     move || *y;\n    |             -- borrow later captured here by closure\n "}, {"sha": "862c925b468fd3a5e12da81bb73881dda35a6407", "filename": "tests/ui/nll/do-not-ignore-lifetime-bounds-in-copy-proj.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `s` does not live long enough\n   --> $DIR/do-not-ignore-lifetime-bounds-in-copy-proj.rs:9:18\n    |\n+LL |     let s = 2;\n+   |         - binding `s` declared here\n LL |     let a = (Foo(&s),);\n    |                  ^^ borrowed value does not live long enough\n LL |     drop(a.0);"}, {"sha": "ebaf6d1244d7d6c12cc02e3917e86e19196b8123", "filename": "tests/ui/nll/do-not-ignore-lifetime-bounds-in-copy.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `s` does not live long enough\n   --> $DIR/do-not-ignore-lifetime-bounds-in-copy.rs:8:17\n    |\n+LL |     let s = 2;\n+   |         - binding `s` declared here\n LL |     let a = Foo(&s);\n    |                 ^^ borrowed value does not live long enough\n LL |     drop(a);"}, {"sha": "289b246e663e1a705bf7a2f0fd8278f29fa2bb52", "filename": "tests/ui/nll/dont-print-desugared.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdont-print-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdont-print-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fdont-print-desugared.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -10,6 +10,7 @@ error[E0597]: `y` does not live long enough\n LL |     for ref mut d in v {\n    |                      - a temporary with access to the borrow is created here ...\n LL |         let y = ();\n+   |             - binding `y` declared here\n LL |         *d = D(&y);\n    |                ^^ borrowed value does not live long enough\n LL |     }"}, {"sha": "0ddb7adbb38223dffa6cdbbaa1df5b95024aeabd", "filename": "tests/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `v[_]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:18:9\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n-   |                                                                 ----- borrow of `v[_]` occurs here\n+   |                                                                 ----- `v[_]` is borrowed here\n ...\n LL |         v[0] += 1;\n-   |         ^^^^^^^^^ assignment to borrowed `v[_]` occurs here\n+   |         ^^^^^^^^^ `v[_]` is assigned to here but it was already borrowed\n ...\n LL | }\n    | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n@@ -14,10 +14,10 @@ error[E0506]: cannot assign to `v[_]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:21:5\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n-   |                                                                 ----- borrow of `v[_]` occurs here\n+   |                                                                 ----- `v[_]` is borrowed here\n ...\n LL |     v[0] += 1;\n-   |     ^^^^^^^^^ assignment to borrowed `v[_]` occurs here\n+   |     ^^^^^^^^^ `v[_]` is assigned to here but it was already borrowed\n LL | }\n    | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n "}, {"sha": "7edc3dcc5cde3e03653955c7a71d2f4942785630", "filename": "tests/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n   --> $DIR/guarantor-issue-46974.rs:7:5\n    |\n LL |     let t = &mut *s; // this borrow should last for the entire function\n-   |             ------- borrow of `*s` occurs here\n+   |             ------- `*s` is borrowed here\n LL |     let x = &t.0;\n LL |     *s = (2,);\n-   |     ^^^^^^^^^ assignment to borrowed `*s` occurs here\n+   |     ^^^^^^^^^ `*s` is assigned to here but it was already borrowed\n LL |     *x\n    |     -- borrow later used here\n "}, {"sha": "4a512560c87519160e3c4572e9b573bc3bcc062a", "filename": "tests/ui/nll/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |                   ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                   |\n-   |                   move out of `foo` occurs here\n+   |                   `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n@@ -14,7 +14,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |             if let Some(()) = { (|| { let bar = foo; bar.take() })(); None } => {},\n    |                                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                                  |\n-   |                                  move out of `foo` occurs here\n+   |                                  `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n "}, {"sha": "0b5d723172c76601c0948a0c5977412610d1ec2f", "filename": "tests/ui/nll/issue-27282-mutation-in-guard.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                  |\n-   |                  move out of `foo` occurs here\n+   |                  `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n@@ -14,7 +14,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                  |\n-   |                  move out of `foo` occurs here\n+   |                  `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n "}, {"sha": "204eda3d2679631ccb93b6505769f2c727b5ba73", "filename": "tests/ui/nll/issue-27868.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-27868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-27868.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,10 +4,10 @@ error[E0506]: cannot assign to `vecvec` because it is borrowed\n LL |       vecvec[0] += {\n    |       ------\n    |       |\n-   |  _____borrow of `vecvec` occurs here\n+   |  _____`vecvec` is borrowed here\n    | |\n LL | |         vecvec = vec![];\n-   | |         ^^^^^^ assignment to borrowed `vecvec` occurs here\n+   | |         ^^^^^^ `vecvec` is assigned to here but it was already borrowed\n LL | |\n LL | |         0\n LL | |     };"}, {"sha": "f337e23455070ba8ec0962364e6b424e473c9728", "filename": "tests/ui/nll/issue-46036.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-46036.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/issue-46036.rs:8:24\n    |\n+LL |     let a = 3;\n+   |         - binding `a` declared here\n LL |     let foo = Foo { x: &a };\n    |                        ^^\n    |                        |"}, {"sha": "e24606e0b53e866b0f4488d6e3aa65778e793d70", "filename": "tests/ui/nll/issue-48803.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-48803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-48803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-48803.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/issue-48803.rs:10:5\n    |\n LL |     let y = &x;\n-   |             -- borrow of `x` occurs here\n+   |             -- `x` is borrowed here\n ...\n LL |     x = \"modified\";\n-   |     ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^^^^^^^^^^ `x` is assigned to here but it was already borrowed\n LL |\n LL |     println!(\"{}\", w); // prints \"modified\"\n    |                    - borrow later used here"}, {"sha": "35d39bb6e908d7110db644eec628c44d10c10c07", "filename": "tests/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/issue-52534-2.rs:6:13\n    |\n+LL |         let x = 32;\n+   |             - binding `x` declared here\n LL |         y = &x\n    |             ^^ borrowed value does not live long enough\n LL |"}, {"sha": "338f64841321f70dc5fd23285805a02f0f5877c5", "filename": "tests/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `tmp0` does not live long enough\n   --> $DIR/issue-52663-trait-object.rs:12:20\n    |\n+LL |         let tmp0 = 3;\n+   |             ---- binding `tmp0` declared here\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough\n LL |         Box::new(tmp1) as Box<dyn Foo + '_>"}, {"sha": "4a32c777a86f1492b471aaaf736df2501cd9a381", "filename": "tests/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `_thing1` does not live long enough\n   --> $DIR/issue-54382-use-span-of-tail-of-block.rs:7:29\n    |\n+LL |         let mut _thing1 = D(Box::new(\"thing1\"));\n+   |             ----------- binding `_thing1` declared here\n+...\n LL |             D(\"other\").next(&_thing1)\n    |             ----------------^^^^^^^^-\n    |             |               |"}, {"sha": "f9e82cb003fc2be9e34722586dc22df8dfbe851c", "filename": "tests/ui/nll/issue-54556-stephaneyfx.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `stmt` does not live long enough\n   --> $DIR/issue-54556-stephaneyfx.rs:27:21\n    |\n+LL |     let stmt = Statement;\n+   |         ---- binding `stmt` declared here\n LL |     let rows = Rows(&stmt);\n    |                     ^^^^^ borrowed value does not live long enough\n LL |     rows.map(|row| row).next()"}, {"sha": "4eae9fdcde0d29c1ebff0a4937a714e3865bddca", "filename": "tests/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `_thing1` does not live long enough\n   --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:11\n    |\n+LL |         let mut _thing1 = D(Box::new(\"thing1\"));\n+   |             ----------- binding `_thing1` declared here\n+LL |         // D(\"other\").next(&_thing1).end()\n LL |         D(&_thing1).end()\n    |         --^^^^^^^^-\n    |         | |"}, {"sha": "a2a7a8486545cb0b0ab8f36764f49d870af666a5", "filename": "tests/ui/nll/issue-54556-used-vs-unused-tails.stderr", "status": "modified", "additions": 56, "deletions": 47, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,11 +2,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:10:55\n    |\n LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n-   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |              |\n-   |                                                     | |              `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |              |\n+   |                        |                            | |              `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -17,11 +18,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:13:55\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n-   |                                                     --^^^^-       -    - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |           |\n-   |                                                     | |           `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-       -    - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |           |\n+   |                        |                            | |           `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -32,11 +34,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n-   |                                                     --^^^^-       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |           |\n-   |                                                     | |           `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |           |\n+   |                        |                            | |           `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -47,11 +50,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:19:55\n    |\n LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n-   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |              |\n-   |                                                     | |              `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |              |\n+   |                        |                            | |              `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -62,11 +66,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:22:55\n    |\n LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n-   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |              |\n-   |                                                     | |              `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |              |\n+   |                        |                            | |              `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -77,11 +82,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:25:55\n    |\n LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n-   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |              |\n-   |                                                     | |              `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |              |\n+   |                        |                            | |              `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n    = note: the temporary is part of an expression at the end of a block;\n            consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n@@ -94,11 +100,12 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n    |\n LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n-   |                                                     --^^^^-       - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | |           |\n-   |                                                     | |           `_t1` dropped here while still borrowed\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-       - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | |           |\n+   |                        |                            | |           `_t1` dropped here while still borrowed\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n    = note: the temporary is part of an expression at the end of a block;\n            consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n@@ -111,12 +118,13 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:37:55\n    |\n LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n-   |                                                     --^^^^-          -\n-   |                                                     | |              |\n-   |                                                     | |              `_t1` dropped here while still borrowed\n-   |                                                     | |              ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-          -\n+   |                        |                            | |              |\n+   |                        |                            | |              `_t1` dropped here while still borrowed\n+   |                        |                            | |              ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |\n@@ -127,12 +135,13 @@ error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:40:55\n    |\n LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n-   |                                                     --^^^^-         -\n-   |                                                     | |             |\n-   |                                                     | |             `_t1` dropped here while still borrowed\n-   |                                                     | |             ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n-   |                                                     | borrowed value does not live long enough\n-   |                                                     a temporary with access to the borrow is created here ...\n+   |                        -------                      --^^^^-         -\n+   |                        |                            | |             |\n+   |                        |                            | |             `_t1` dropped here while still borrowed\n+   |                        |                            | |             ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                        |                            | borrowed value does not live long enough\n+   |                        |                            a temporary with access to the borrow is created here ...\n+   |                        binding `_t1` declared here\n    |\n    = note: the temporary is part of an expression at the end of a block;\n            consider forcing this temporary to be dropped sooner, before the block's local variables are dropped"}, {"sha": "adc419ae51562534b10ed164be2a58c833b4bd08", "filename": "tests/ui/nll/issue-54556-wrap-it-up.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/issue-54556-wrap-it-up.rs:27:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n-   |                          ------ borrow of `x` occurs here\n+   |                          ------ `x` is borrowed here\n ...\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL | }\n    | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n "}, {"sha": "ecb9ef0aef96e3773b54b54faf9fe553f402223b", "filename": "tests/ui/nll/issue-55511.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-55511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-55511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-55511.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/issue-55511.rs:13:28\n    |\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n LL |     let b = Some(Cell::new(&a));\n    |                            ^^ borrowed value does not live long enough\n ..."}, {"sha": "d5effd6f346d16bc543768676128a57ae3e33bb7", "filename": "tests/ui/nll/issue-57989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-57989.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -13,9 +13,9 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-57989.rs:5:5\n    |\n LL |     let g = &x;\n-   |             -- borrow of `*x` occurs here\n+   |             -- `*x` is borrowed here\n LL |     *x = 0;\n-   |     ^^^^^^ assignment to borrowed `*x` occurs here\n+   |     ^^^^^^ `*x` is assigned to here but it was already borrowed\n LL |\n LL |     g;\n    |     - borrow later used here"}, {"sha": "851e3628748f22af1610de992fc5dd0b5523c718", "filename": "tests/ui/nll/issue-68550.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-68550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-68550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-68550.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,9 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/issue-68550.rs:12:20\n    |\n LL | fn run<'a, A>(x: A)\n-   |        -- lifetime `'a` defined here\n+   |        --     - binding `x` declared here\n+   |        |\n+   |        lifetime `'a` defined here\n ...\n LL |     let _: &'a A = &x;\n    |            -----   ^^ borrowed value does not live long enough"}, {"sha": "1b41230d7ba39976eedf542397a86725c95db886", "filename": "tests/ui/nll/issue-69114-static-mut-ty.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `n` does not live long enough\n   --> $DIR/issue-69114-static-mut-ty.rs:19:15\n    |\n+LL |     let n = 42;\n+   |         - binding `n` declared here\n+LL |     unsafe {\n LL |         BAR = &n;\n    |         ------^^\n    |         |     |\n@@ -13,6 +16,9 @@ LL | }\n error[E0597]: `n` does not live long enough\n   --> $DIR/issue-69114-static-mut-ty.rs:27:22\n    |\n+LL |     let n = 42;\n+   |         - binding `n` declared here\n+LL |     unsafe {\n LL |         BAR_ELIDED = &n;\n    |         -------------^^\n    |         |            |"}, {"sha": "9215e850f7d8fa063cf11c5f9faf170d169cd374", "filename": "tests/ui/nll/issue-69114-static-ty.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-69114-static-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fissue-69114-static-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-69114-static-ty.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `n` does not live long enough\n   --> $DIR/issue-69114-static-ty.rs:7:9\n    |\n+LL |     let n = 42;\n+   |         - binding `n` declared here\n LL |     FOO(&n);\n    |     ----^^-\n    |     |   |"}, {"sha": "58e378ab02118d7455c6b62f0e811d782c0dd136", "filename": "tests/ui/nll/loan_ends_mid_block_pair.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `data.0` because it is borrowed\n   --> $DIR/loan_ends_mid_block_pair.rs:12:5\n    |\n LL |     let c = &mut data.0;\n-   |             ----------- borrow of `data.0` occurs here\n+   |             ----------- `data.0` is borrowed here\n LL |     capitalize(c);\n LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+   |     ^^^^^^^^^^^^ `data.0` is assigned to here but it was already borrowed\n ...\n LL |     capitalize(c);\n    |                - borrow later used here"}, {"sha": "a6b3328b5a294475ca720c90e10c330af78902d9", "filename": "tests/ui/nll/local-outlives-static-via-hrtb.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `local` does not live long enough\n   --> $DIR/local-outlives-static-via-hrtb.rs:24:28\n    |\n+LL |     let local = 0;\n+   |         ----- binding `local` declared here\n LL |     assert_static_via_hrtb(&local);\n    |     -----------------------^^^^^^-\n    |     |                      |\n@@ -19,6 +21,9 @@ LL | fn assert_static_via_hrtb<G>(_: G) where for<'a> G: Outlives<'a> {}\n error[E0597]: `local` does not live long enough\n   --> $DIR/local-outlives-static-via-hrtb.rs:25:45\n    |\n+LL |     let local = 0;\n+   |         ----- binding `local` declared here\n+LL |     assert_static_via_hrtb(&local);\n LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n    |     ----------------------------------------^^^^^^-\n    |     |                                       |"}, {"sha": "36f2cd0b85d1c62e355dfc5b84d5a844eaa57409", "filename": "tests/ui/nll/match-cfg-fake-edges2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `y.1` because it was mutably borrowed\n   --> $DIR/match-cfg-fake-edges2.rs:8:5\n    |\n LL |     let r = &mut y.1;\n-   |             -------- borrow of `y.1` occurs here\n+   |             -------- `y.1` is borrowed here\n ...\n LL |     match y {\n    |     ^^^^^^^ use of borrowed `y.1`"}, {"sha": "afd853c403ee38d83f40315da6a4915a4d075ef4", "filename": "tests/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |              |\n-   |              move out of `foo` occurs here\n+   |              `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n@@ -14,7 +14,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |              |\n-   |              move out of `foo` occurs here\n+   |              `foo` is moved here\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n "}, {"sha": "7bdcbcb9c6ef6a43f3876732ac7d7871f778f019", "filename": "tests/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -74,9 +74,9 @@ error[E0506]: cannot assign to `t` because it is borrowed\n   --> $DIR/match-guards-partially-borrow.rs:225:13\n    |\n LL |         s if {\n-   |         - borrow of `t` occurs here\n+   |         - `t` is borrowed here\n LL |             t = !t;\n-   |             ^^^^^^ assignment to borrowed `t` occurs here\n+   |             ^^^^^^ `t` is assigned to here but it was already borrowed\n LL |             false\n LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n@@ -85,9 +85,9 @@ error[E0506]: cannot assign to `t` because it is borrowed\n   --> $DIR/match-guards-partially-borrow.rs:235:13\n    |\n LL |         s if let Some(()) = {\n-   |         - borrow of `t` occurs here\n+   |         - `t` is borrowed here\n LL |             t = !t;\n-   |             ^^^^^^ assignment to borrowed `t` occurs here\n+   |             ^^^^^^ `t` is assigned to here but it was already borrowed\n LL |             None\n LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here"}, {"sha": "9273484565a198f72121c73a7022d8dc20781690", "filename": "tests/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/match-on-borrowed.rs:47:11\n    |\n LL |         E::V(ref mut x, _) => x,\n-   |              --------- borrow of `e.0` occurs here\n+   |              --------- `e.0` is borrowed here\n ...\n LL |     match e { // Don't know that E uses a tag for its discriminant\n    |           ^ use of borrowed `e.0`\n@@ -14,7 +14,7 @@ error[E0503]: cannot use `*f` because it was mutably borrowed\n   --> $DIR/match-on-borrowed.rs:61:11\n    |\n LL |         E::V(ref mut x, _) => x,\n-   |              --------- borrow of `f.0` occurs here\n+   |              --------- `f.0` is borrowed here\n ...\n LL |     match f { // Don't know that E uses a tag for its discriminant\n    |           ^ use of borrowed `f.0`\n@@ -26,7 +26,7 @@ error[E0503]: cannot use `t` because it was mutably borrowed\n   --> $DIR/match-on-borrowed.rs:81:5\n    |\n LL |     let x = &mut t;\n-   |             ------ borrow of `t` occurs here\n+   |             ------ `t` is borrowed here\n LL |     match t {\n    |     ^^^^^^^ use of borrowed `t`\n ..."}, {"sha": "55646b9dca9863a46914eea9483ccdff8735c2d1", "filename": "tests/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/maybe-initialized-drop-implicit-fragment-drop.rs:17:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n-   |                          ------ borrow of `x` occurs here\n+   |                          ------ `x` is borrowed here\n ...\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n LL | }\n    | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`"}, {"sha": "c89f94a7894f004c46d2d29dacf6778822d6923d", "filename": "tests/ui/nll/maybe-initialized-drop-with-fragment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/maybe-initialized-drop-with-fragment.rs:19:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n-   |                          ------ borrow of `x` occurs here\n+   |                          ------ `x` is borrowed here\n ...\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL | }\n    | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n "}, {"sha": "90db13bc5784949f41a745019d94f9e9da4aa155", "filename": "tests/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/maybe-initialized-drop-with-uninitialized-fragments.rs:20:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n-   |                          ------ borrow of `x` occurs here\n+   |                          ------ `x` is borrowed here\n ...\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL |     // FIXME ^ This currently errors and it should not.\n LL | }\n    | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`"}, {"sha": "15a53a09af8c2ef956babaa9983c9f6d7ffc201c", "filename": "tests/ui/nll/maybe-initialized-drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,9 +2,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/maybe-initialized-drop.rs:14:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n-   |                          ------ borrow of `x` occurs here\n+   |                          ------ `x` is borrowed here\n LL |     x = 1;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n+   |     ^^^^^ `x` is assigned to here but it was already borrowed\n LL | }\n    | - borrow might be used here, when `wrap` is dropped and runs the `Drop` code for type `Wrap`\n "}, {"sha": "789d202f73a7bf7d8ff4925243af969658953c0c", "filename": "tests/ui/nll/polonius/polonius-smoke-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -8,7 +8,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/polonius-smoke-test.rs:12:13\n    |\n LL |     let y = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     let z = x;\n    |             ^ use of borrowed `x`\n LL |     let w = y;"}, {"sha": "d111256b8454ff957d1e3aabaa8c798318ef1283", "filename": "tests/ui/nll/promoted-bounds.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fpromoted-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fpromoted-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fpromoted-bounds.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `l` does not live long enough\n LL |     let ptr = {\n    |         --- borrow later stored here\n LL |         let l = 3;\n+   |             - binding `l` declared here\n LL |         let b = &l;\n    |                 ^^ borrowed value does not live long enough\n ..."}, {"sha": "5672b9cd7e9cc5e96d68e049bafad66c0165953e", "filename": "tests/ui/nll/reference-carried-through-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Freference-carried-through-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Freference-carried-through-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Freference-carried-through-struct-field.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/reference-carried-through-struct-field.rs:6:5\n    |\n LL |     let wrapper = Wrap { w: &mut x };\n-   |                             ------ borrow of `x` occurs here\n+   |                             ------ `x` is borrowed here\n LL |     x += 1;\n    |     ^^^^^^ use of borrowed `x`\n LL |     *wrapper.w += 1;"}, {"sha": "ff6ea598ff46f49f86bdc014b2433ebeb13527ea", "filename": "tests/ui/nll/relate_tys/var-appears-twice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `b` does not live long enough\n   --> $DIR/var-appears-twice.rs:20:38\n    |\n+LL |     let b = 44;\n+   |         - binding `b` declared here\n+...\n LL |     let x: DoubleCell<_> = make_cell(&b);\n    |            -------------             ^^ borrowed value does not live long enough\n    |            |"}, {"sha": "9e94fd5a7826e3bdc753135a1f2889d056486a9c", "filename": "tests/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-enums.rs:25:48\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeEnum::SomeVariant::<&'static u32> { t: &c };\n    |                                                ^^\n    |                                                |\n@@ -15,6 +17,7 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeEnum::SomeVariant::<&'a u32> { t: &c };\n    |                                           ^^\n    |                                           |"}, {"sha": "cbb7f6a55a989ca60590a6d66fe33783964862d0", "filename": "tests/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-structs.rs:23:37\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeStruct::<&'static u32> { t: &c };\n    |                                     ^^\n    |                                     |\n@@ -15,6 +17,7 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeStruct::<&'a u32> { t: &c };\n    |                                ^^\n    |                                |"}, {"sha": "bca85a90d190890db4bd72bb7409a065ed3533f9", "filename": "tests/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:33:41\n    |\n+LL |       let c = 66;\n+   |           - binding `c` declared here\n LL | /     combine(\n LL | |         SomeEnum::SomeVariant(Cell::new(&c)),\n    | |                                         ^^ borrowed value does not live long enough\n@@ -15,7 +17,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n-...\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n+LL |     combine(\n LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n    |                               ----------^^-\n    |                               |         |"}, {"sha": "d2d85ec2b9b0f1fc124926f0b2122d2be1ebec3f", "filename": "tests/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-enums.rs:28:43\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeEnum::SomeVariant::<&'static u32>(&c);\n    |                                           ^^\n    |                                           |\n@@ -15,6 +17,7 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeEnum::SomeVariant::<&'a u32>(&c);\n    |                                      ^^\n    |                                      |"}, {"sha": "b7bc2a10b7040f434427ca2f6aa2fdffaa9495ee", "filename": "tests/ui/nll/user-annotations/adt-tuple-struct-calls.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct-calls.rs:27:7\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n+LL |     let f = SomeStruct::<&'static u32>;\n LL |     f(&c);\n    |     --^^-\n    |     | |\n@@ -14,7 +17,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n-...\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n+LL |     let f = SomeStruct::<&'a u32>;\n LL |     f(&c);\n    |     --^^-\n    |     | |"}, {"sha": "97d39da265fe3f810c1812498ebe09ce671c0633", "filename": "tests/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct.rs:23:32\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeStruct::<&'static u32>(&c);\n    |                                ^^\n    |                                |\n@@ -15,6 +17,7 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     SomeStruct::<&'a u32>(&c);\n    |                           ^^\n    |                           |"}, {"sha": "3b9363c41f20fb3741f7b5b12fc913648daacc90", "filename": "tests/ui/nll/user-annotations/cast_static_lifetime.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/cast_static_lifetime.rs:5:19\n    |\n+LL |     let x = 22_u32;\n+   |         - binding `x` declared here\n LL |     let y: &u32 = (&x) as &'static u32;\n    |                   ^^^^----------------\n    |                   |"}, {"sha": "f164255ef305fdb7b1fcc2fadbccdfa7adaa7209", "filename": "tests/ui/nll/user-annotations/constant-in-expr-inherent-2.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/constant-in-expr-inherent-2.rs:23:9\n    |\n+LL |     let x = ();\n+   |         - binding `x` declared here\n LL |     FUN(&x);\n    |     ----^^-\n    |     |   |\n@@ -13,6 +15,9 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/constant-in-expr-inherent-2.rs:24:23\n    |\n+LL |     let x = ();\n+   |         - binding `x` declared here\n+LL |     FUN(&x);\n LL |     A::ASSOCIATED_FUN(&x);\n    |     ------------------^^-\n    |     |                 |\n@@ -25,6 +30,9 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/constant-in-expr-inherent-2.rs:25:28\n    |\n+LL |     let x = ();\n+   |         - binding `x` declared here\n+...\n LL |     B::ALSO_ASSOCIATED_FUN(&x);\n    |     -----------------------^^-\n    |     |                      |\n@@ -37,6 +45,9 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/constant-in-expr-inherent-2.rs:26:31\n    |\n+LL |     let x = ();\n+   |         - binding `x` declared here\n+...\n LL |     <_>::TRAIT_ASSOCIATED_FUN(&x);\n    |     --------------------------^^-\n    |     |                         |"}, {"sha": "8b53e138d9bd0c05e36da6c21e813958641b7f07", "filename": "tests/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/fns.rs:23:29\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     some_fn::<&'static u32>(&c);\n    |     ------------------------^^-\n    |     |                       |\n@@ -15,6 +17,7 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     some_fn::<&'a u32>(&c);\n    |     -------------------^^-\n    |     |                  |"}, {"sha": "3803cbf776b675e8ef338b8807ee30ce9e6137d3", "filename": "tests/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/method-call.rs:36:34\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     a.method::<&'static u32>(b,  &c);\n    |     -----------------------------^^-\n    |     |                            |\n@@ -15,6 +17,8 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n ...\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     a.method::<&'a u32>(b,  &c);\n    |     ------------------------^^-\n    |     |                       |"}, {"sha": "c7c08c948abdb20b658857002346ab2a198ca338", "filename": "tests/ui/nll/user-annotations/method-ufcs-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-1.rs:30:7\n    |\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n+...\n LL |     x(&a, b, c);\n    |     --^^-------\n    |     | |\n@@ -14,6 +17,8 @@ error[E0597]: `a` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n ...\n LL |     <&'a u32 as Bazoom<_>>::method(&a, b, c);\n    |     -------------------------------^^-------"}, {"sha": "b7861a3bd069ff863cd62293f367aa6b7296042d", "filename": "tests/ui/nll/user-annotations/method-ufcs-2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-2.rs:30:7\n    |\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n+...\n LL |     x(&a, b, c);\n    |     --^^-------\n    |     | |\n@@ -14,7 +17,10 @@ error[E0597]: `b` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n-...\n+LL |     let a = 22;\n+LL |     let b = 44;\n+   |         - binding `b` declared here\n+LL |     let c = 66;\n LL |     <_ as Bazoom<&'a u32>>::method(a, &b, c);\n    |     ----------------------------------^^----\n    |     |                                 |"}, {"sha": "8cb995a03ce2ff00054e7c0a369ce4370bf6915e", "filename": "tests/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/method-ufcs-3.rs:36:53\n    |\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     <_ as Bazoom<_>>::method::<&'static u32>(&a, b, &c);\n    |     ------------------------------------------------^^-\n    |     |                                               |\n@@ -15,6 +17,8 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n ...\n+LL |     let c = 66;\n+   |         - binding `c` declared here\n LL |     <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c);\n    |     -------------------------------------------^^-\n    |     |                                          |"}, {"sha": "fb26b8d09e179bd8fa732edd24d1fd110627b781", "filename": "tests/ui/nll/user-annotations/method-ufcs-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = A::<'a>::new(&v, 22);\n    |             -------------^^-----\n    |             |            |"}, {"sha": "03b97447e1aa00bcf19da6e2c2c3dd8645607417", "filename": "tests/ui/nll/user-annotations/method-ufcs-inherent-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n    |             ------------------------^^-----\n    |             |                       |\n@@ -19,6 +20,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n    |             ----------------------------^^-\n    |             |                           |"}, {"sha": "69dd1d1aaae28694f8989172fc7f27766b9528cd", "filename": "tests/ui/nll/user-annotations/method-ufcs-inherent-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = <A<'a>>::new(&v, 22);\n    |             -------------^^-----\n    |             |            |"}, {"sha": "66d82bb49dc68cabba031451f44510105eaee1f3", "filename": "tests/ui/nll/user-annotations/method-ufcs-inherent-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n    |             ------------------------^^-----\n    |             |                       |\n@@ -19,6 +20,7 @@ error[E0597]: `v` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let v = 22;\n+   |         - binding `v` declared here\n LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n    |             ----------------------------^^-\n    |             |                           |"}, {"sha": "acc3a1800f4fd8d385faa62b705c6944b8443e2a", "filename": "tests/ui/nll/user-annotations/normalization.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/normalization.rs:10:31\n    |\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n LL |     let _: <() as Foo>::Out = &a;\n    |            ----------------   ^^ borrowed value does not live long enough\n    |            |\n@@ -12,6 +14,8 @@ LL | }\n error[E0597]: `a` does not live long enough\n   --> $DIR/normalization.rs:13:40\n    |\n+LL |     let a = 22;\n+   |         - binding `a` declared here\n LL |     let _: <&'static () as Foo>::Out = &a;\n    |            -------------------------   ^^ borrowed value does not live long enough\n    |            |"}, {"sha": "3e7969e117934bad31b598fdf10aba4897e05472", "filename": "tests/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_enum_variant.rs:7:33\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough\n LL |\n@@ -12,6 +14,8 @@ LL | }\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_enum_variant.rs:14:33\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough\n ..."}, {"sha": "89a1e9545e8af520b3f23213ca3ee88642ba79f6", "filename": "tests/ui/nll/user-annotations/pattern_substs_on_brace_struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_struct.rs:5:28\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough\n LL |\n@@ -12,6 +14,8 @@ LL | }\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_struct.rs:12:28\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough\n ..."}, {"sha": "8efeecc77098a93ae9b0d03fd6fd96fa4353a2d1", "filename": "tests/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_enum_variant.rs:7:24\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough\n LL |\n@@ -12,6 +14,8 @@ LL | }\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_enum_variant.rs:14:24\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough\n ..."}, {"sha": "d7f1dac88a618b82b268d97716ceed4101576431", "filename": "tests/ui/nll/user-annotations/pattern_substs_on_tuple_struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_struct.rs:5:19\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough\n LL |\n@@ -12,6 +14,8 @@ LL | }\n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_struct.rs:12:19\n    |\n+LL |     let y = 22;\n+   |         - binding `y` declared here\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough\n ..."}, {"sha": "8bb714f1d0cdce635e586e53223558eabd522b0b", "filename": "tests/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:6:9\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let y: &'static u32;\n    |            ------------ type annotation requires that `x` is borrowed for `'static`\n LL |     y = &x;\n@@ -11,6 +13,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:14:9\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let (y, z): (&'static u32, &'static u32);\n    |                 ---------------------------- type annotation requires that `x` is borrowed for `'static`\n LL |     y = &x;\n@@ -21,6 +25,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:20:13\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let y = &x;\n    |             ^^ borrowed value does not live long enough\n LL |     let ref z: &'static u32 = y;\n@@ -32,6 +38,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:39:9\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let Single { value: y }: Single<&'static u32>;\n    |                              -------------------- type annotation requires that `x` is borrowed for `'static`\n LL |     y = &x;\n@@ -42,6 +50,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:51:10\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let Single2 { value: mut _y }: Single2<StaticU32>;\n    |                                    ------------------ type annotation requires that `x` is borrowed for `'static`\n LL |     _y = &x;\n@@ -52,6 +62,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:56:27\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let y: &'static u32 = &x;\n    |            ------------   ^^ borrowed value does not live long enough\n    |            |\n@@ -62,6 +74,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:61:27\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let _: &'static u32 = &x;\n    |            ------------   ^^ borrowed value does not live long enough\n    |            |\n@@ -100,6 +114,8 @@ LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:75:40\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let (_, _): (&'static u32, u32) = (&x, 44);\n    |                 -------------------    ^^ borrowed value does not live long enough\n    |                 |\n@@ -110,6 +126,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:80:40\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let (y, _): (&'static u32, u32) = (&x, 44);\n    |                 -------------------    ^^ borrowed value does not live long enough\n    |                 |\n@@ -120,6 +138,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:85:69\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let Single { value: y }: Single<&'static u32> = Single { value: &x };\n    |                              --------------------                   ^^ borrowed value does not live long enough\n    |                              |\n@@ -130,6 +150,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:90:69\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let Single { value: _ }: Single<&'static u32> = Single { value: &x };\n    |                              --------------------                   ^^ borrowed value does not live long enough\n    |                              |\n@@ -140,6 +162,8 @@ LL | }\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:98:17\n    |\n+LL |     let x = 22;\n+   |         - binding `x` declared here\n LL |     let Double { value1: _, value2: _ }: Double<&'static u32> = Double {\n    |                                          -------------------- type annotation requires that `x` is borrowed for `'static`\n LL |         value1: &x,"}, {"sha": "132a00ba41581da4175c9f0c5565bd690ba7a3c0", "filename": "tests/ui/nll/user-annotations/promoted-annotation.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `x` does not live long enough\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     let x = 0;\n+   |         - binding `x` declared here\n LL |     let f = &drop::<&'a i32>;\n    |             ---------------- assignment requires that `x` is borrowed for `'a`\n LL |     f(&x);"}, {"sha": "766877f8835c414bb59c60c9cee536b8b285b12a", "filename": "tests/ui/nll/user-annotations/type_ascription_static_lifetime.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/type_ascription_static_lifetime.rs:6:33\n    |\n+LL |     let x = 22_u32;\n+   |         - binding `x` declared here\n LL |     let y: &u32 = type_ascribe!(&x, &'static u32);\n    |                   --------------^^---------------\n    |                   |             |"}, {"sha": "c7c7c074f7cd0f07ae76257f0066b53bfcdddd24", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `arr[..]` because it is borrowed\n   --> $DIR/borrowck-move-ref-pattern.rs:8:24\n    |\n+LL |     let mut arr = [U, U, U, U, U];\n+   |         ------- binding `arr` declared here\n LL |     let hold_all = &arr;\n    |                    ---- borrow of `arr` occurs here\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;"}, {"sha": "d76a83b02580904019ca09f8650f12311d251ed9", "filename": "tests/ui/regions/do-not-suggest-adding-bound-to-opaque-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fdo-not-suggest-adding-bound-to-opaque-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fdo-not-suggest-adding-bound-to-opaque-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fdo-not-suggest-adding-bound-to-opaque-type.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/do-not-suggest-adding-bound-to-opaque-type.rs:9:7\n    |\n+LL |     let x = ();\n+   |         - binding `x` declared here\n LL |     S(&x)\n    |     --^^-\n    |     | |"}, {"sha": "99060a9c7f59ffe125f44fb11e322e0997b041a6", "filename": "tests/ui/regions/regions-addr-of-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-addr-of-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-addr-of-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-addr-of-arg.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/regions-addr-of-arg.rs:5:30\n    |\n+LL | fn foo(a: isize) {\n+   |        - binding `a` declared here\n LL |     let _p: &'static isize = &a;\n    |             --------------   ^^ borrowed value does not live long enough\n    |             |"}, {"sha": "c83cfc1c987b6e28d0403f408cef06f744120d95", "filename": "tests/ui/regions/regions-free-region-ordering-caller1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -18,6 +18,8 @@ error[E0597]: `y` does not live long enough\n LL | fn call1<'a>(x: &'a usize) {\n    |          -- lifetime `'a` defined here\n ...\n+LL |     let y: usize = 3;\n+   |         - binding `y` declared here\n LL |     let z: &'a & usize = &(&y);\n    |            -----------    ^^^^ borrowed value does not live long enough\n    |            |"}, {"sha": "c8a33bbc52236e0c58d9f78c4fba760ea5d80ad1", "filename": "tests/ui/regions/regions-infer-proc-static-upvar.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/regions-infer-proc-static-upvar.rs:10:13\n    |\n+LL |       let x = 3;\n+   |           - binding `x` declared here\n LL |       let y = &x;\n    |               ^^ borrowed value does not live long enough\n LL | /     foo(move|| {"}, {"sha": "ee43f9fa5724d3d2278d889dcec7fb7890a6da3f", "filename": "tests/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -13,6 +13,8 @@ LL |         ay = z;\n error[E0597]: `y` does not live long enough\n   --> $DIR/regions-nested-fns.rs:5:18\n    |\n+LL |     let y = 3;\n+   |         - binding `y` declared here\n LL |     let mut ay = &y;\n    |                  ^^ borrowed value does not live long enough\n ..."}, {"sha": "18aec29ad0b74291ddfda7c480caed2725b3f592", "filename": "tests/ui/regions/regions-pattern-typing-issue-19552.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `line` does not live long enough\n   --> $DIR/regions-pattern-typing-issue-19552.rs:5:14\n    |\n+LL |     let line = String::new();\n+   |         ---- binding `line` declared here\n LL |     match [&*line] {\n    |              ^^^^ borrowed value does not live long enough\n LL |         [ word ] => { assert_static(word); }"}, {"sha": "0abe77a86977f4d65304e675652d290bee10de6b", "filename": "tests/ui/regions/regions-pattern-typing-issue-19997.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-pattern-typing-issue-19997.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `a1` because it is borrowed\n   --> $DIR/regions-pattern-typing-issue-19997.rs:7:13\n    |\n LL |     match (&a1,) {\n-   |            --- borrow of `a1` occurs here\n+   |            --- `a1` is borrowed here\n LL |         (&ref b0,) => {\n LL |             a1 = &f;\n-   |             ^^^^^^^ assignment to borrowed `a1` occurs here\n+   |             ^^^^^^^ `a1` is assigned to here but it was already borrowed\n LL |             drop(b0);\n    |                  -- borrow later used here\n "}, {"sha": "ad84ebe3a504c0e99ccdc6b2963f90cca0abe78c", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-non-exhaustive.rs:12:11\n    |\n LL |     let y = &mut x;\n-   |             ------ borrow of `x` occurs here\n+   |             ------ `x` is borrowed here\n LL |     match x {\n    |           ^ use of borrowed `x`\n ..."}, {"sha": "1c26eb8803d7f68088feac2dfa304537ebaa3a35", "filename": "tests/ui/rfcs/rfc-2528-type-changing-struct-update/lifetime-update.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `s` does not live long enough\n   --> $DIR/lifetime-update.rs:20:17\n    |\n+LL |     let s = String::from(\"hello\");\n+   |         - binding `s` declared here\n+...\n LL |         lt_str: &s,\n    |                 ^^ borrowed value does not live long enough\n ..."}, {"sha": "6faa4477d8c5d3476aa432a512984d448c6104bc", "filename": "tests/ui/self/issue-61882-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fself%2Fissue-61882-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fself%2Fissue-61882-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fissue-61882-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/issue-61882-2.rs:6:14\n    |\n+LL |         let x = 0;\n+   |             - binding `x` declared here\n LL |         Self(&x);\n    |              ^^\n    |              |"}, {"sha": "9711dad80785b6cbeec10aa0bb6a3cf69ced645f", "filename": "tests/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -47,6 +47,9 @@ LL |         foo(f);\n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16\n    |\n+LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n+   |         ----- binding `f` declared here\n+...\n LL |     f(Box::new(|a| {\n    |     -          ^^^ move out of `f` occurs here\n    |     |"}, {"sha": "23ebc8d598c672d1d05b13227e5e7587e3a24c27", "filename": "tests/ui/span/dropck_arr_cycle_checked.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `b2` does not live long enough\n   --> $DIR/dropck_arr_cycle_checked.rs:93:24\n    |\n+LL |     let (b1, b2, b3);\n+   |              -- binding `b2` declared here\n+...\n LL |     b1.a[0].v.set(Some(&b2));\n    |                        ^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL | }\n error[E0597]: `b3` does not live long enough\n   --> $DIR/dropck_arr_cycle_checked.rs:95:24\n    |\n+LL |     let (b1, b2, b3);\n+   |                  -- binding `b3` declared here\n+...\n LL |     b1.a[1].v.set(Some(&b3));\n    |                        ^^^ borrowed value does not live long enough\n ...\n@@ -29,6 +35,9 @@ LL | }\n error[E0597]: `b1` does not live long enough\n   --> $DIR/dropck_arr_cycle_checked.rs:99:24\n    |\n+LL |     let (b1, b2, b3);\n+   |          -- binding `b1` declared here\n+...\n LL |     b3.a[0].v.set(Some(&b1));\n    |                        ^^^ borrowed value does not live long enough\n ..."}, {"sha": "1e75e3b2fa12180792a912a7df9ae755234cd161", "filename": "tests/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `d2` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:36:19\n    |\n+LL |     let (d1, d2) = (D::new(format!(\"d1\")), D::new(format!(\"d2\")));\n+   |              -- binding `d2` declared here\n LL |     d1.p.set(Some(&d2));\n    |                   ^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +17,9 @@ LL | }\n error[E0597]: `d1` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:38:19\n    |\n+LL |     let (d1, d2) = (D::new(format!(\"d1\")), D::new(format!(\"d2\")));\n+   |          -- binding `d1` declared here\n+...\n LL |     d2.p.set(Some(&d1));\n    |                   ^^^ borrowed value does not live long enough\n LL |"}, {"sha": "24a2c9089f5b1f1a9265fe8a27b189097c9ecfeb", "filename": "tests/ui/span/dropck_misc_variants.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdropck_misc_variants.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `bomb` does not live long enough\n   --> $DIR/dropck_misc_variants.rs:23:36\n    |\n+LL |     let (_w, bomb);\n+   |              ---- binding `bomb` declared here\n+LL |     bomb = vec![\"\"];\n LL |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n    |                                    ^^^^^ borrowed value does not live long enough\n LL | }\n@@ -14,6 +17,9 @@ LL | }\n error[E0597]: `v` does not live long enough\n   --> $DIR/dropck_misc_variants.rs:31:27\n    |\n+LL |     let (_w,v);\n+   |             - binding `v` declared here\n+...\n LL |         let u = NoisyDrop(&v);\n    |                           ^^ borrowed value does not live long enough\n ..."}, {"sha": "5817439c0d8555aff362c515e90b9613f4acc167", "filename": "tests/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c2` does not live long enough\n   --> $DIR/dropck_vec_cycle_checked.rs:98:24\n    |\n+LL |     let (mut c1, mut c2, mut c3);\n+   |                  ------ binding `c2` declared here\n+...\n LL |     c1.v[0].v.set(Some(&c2));\n    |                        ^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL | }\n error[E0597]: `c3` does not live long enough\n   --> $DIR/dropck_vec_cycle_checked.rs:100:24\n    |\n+LL |     let (mut c1, mut c2, mut c3);\n+   |                          ------ binding `c3` declared here\n+...\n LL |     c1.v[1].v.set(Some(&c3));\n    |                        ^^^ borrowed value does not live long enough\n ...\n@@ -29,6 +35,9 @@ LL | }\n error[E0597]: `c1` does not live long enough\n   --> $DIR/dropck_vec_cycle_checked.rs:104:24\n    |\n+LL |     let (mut c1, mut c2, mut c3);\n+   |          ------ binding `c1` declared here\n+...\n LL |     c3.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough\n ..."}, {"sha": "c3b6d7580b4e020598e555b9fbe2f8de8d1da023", "filename": "tests/ui/span/issue-24805-dropck-child-has-items-via-parent.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:28:18\n    |\n+LL |     let (_d, d1);\n+   |              -- binding `d1` declared here\n+...\n LL |     _d = D_Child(&d1);\n    |                  ^^^ borrowed value does not live long enough\n ..."}, {"sha": "e52c57d9ab1f824ac0337cd8d614078776e0dc38", "filename": "tests/ui/span/issue-24805-dropck-trait-has-items.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:37:26\n    |\n+LL |     let (_d, d1);\n+   |              -- binding `d1` declared here\n+LL |     d1 = D_HasSelfMethod(1);\n LL |     _d = D_HasSelfMethod(&d1);\n    |                          ^^^ borrowed value does not live long enough\n LL | }\n@@ -14,6 +17,9 @@ LL | }\n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:43:33\n    |\n+LL |     let (_d, d1);\n+   |              -- binding `d1` declared here\n+LL |     d1 = D_HasMethodWithSelfArg(1);\n LL |     _d = D_HasMethodWithSelfArg(&d1);\n    |                                 ^^^ borrowed value does not live long enough\n LL | }\n@@ -27,6 +33,9 @@ LL | }\n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:49:20\n    |\n+LL |     let (_d, d1);\n+   |              -- binding `d1` declared here\n+LL |     d1 = D_HasType(1);\n LL |     _d = D_HasType(&d1);\n    |                    ^^^ borrowed value does not live long enough\n LL | }"}, {"sha": "83db4d509d49988b33fe3fe59d20dc7b9de4b231", "filename": "tests/ui/span/issue-24895-copy-clone-dropck.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24895-copy-clone-dropck.rs:27:14\n    |\n+LL |     let (d2, d1);\n+   |              -- binding `d1` declared here\n+LL |     d1 = D(34, \"d1\");\n LL |     d2 = D(S(&d1, \"inner\"), \"d2\");\n    |              ^^^ borrowed value does not live long enough\n LL | }"}, {"sha": "1e0276f0c3694b6376e97817a4c4ceb9dfb57e1b", "filename": "tests/ui/span/issue-25199.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-25199.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `container` does not live long enough\n   --> $DIR/issue-25199.rs:70:27\n    |\n+LL |     let container = Container::new();\n+   |         --------- binding `container` declared here\n LL |     let test = Test{test: &container};\n    |                           ^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "fea6e001238b59294353970fc4bcc88da054e0f2", "filename": "tests/ui/span/issue-26656.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-26656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-26656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-26656.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `ticking` does not live long enough\n   --> $DIR/issue-26656.rs:40:35\n    |\n+LL |     let (mut zook, ticking);\n+   |                    ------- binding `ticking` declared here\n+...\n LL |     zook.button = B::BigRedButton(&ticking);\n    |                                   ^^^^^^^^ borrowed value does not live long enough\n LL | }"}, {"sha": "28ee7acd90e8c5b3ca80c5044c15f784aabfe55b", "filename": "tests/ui/span/issue-29106.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-29106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-29106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-29106.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/issue-29106.rs:16:26\n    |\n+LL |         let (y, x);\n+   |                 - binding `x` declared here\n+LL |         x = \"alive\".to_string();\n LL |         y = Arc::new(Foo(&x));\n    |                          ^^ borrowed value does not live long enough\n LL |     }\n@@ -14,6 +17,9 @@ LL |     }\n error[E0597]: `x` does not live long enough\n   --> $DIR/issue-29106.rs:23:25\n    |\n+LL |         let (y, x);\n+   |                 - binding `x` declared here\n+LL |         x = \"alive\".to_string();\n LL |         y = Rc::new(Foo(&x));\n    |                         ^^ borrowed value does not live long enough\n LL |     }"}, {"sha": "6c330c1a094758b9de3345dbd87c6a294f1dca9b", "filename": "tests/ui/span/issue-36537.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-36537.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/issue-36537.rs:5:13\n    |\n+LL |         let a = 42;\n+   |             - binding `a` declared here\n LL |         p = &a;\n    |             ^^ borrowed value does not live long enough\n ..."}, {"sha": "e9b84de5059892d20ff3ddd498d6090271c9e998", "filename": "tests/ui/span/issue-40157.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-40157.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,11 +2,9 @@ error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-40157.rs:2:53\n    |\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n-   |                             ------------------------^^^^^^^^^^--\n-   |                             |                       |          |\n-   |                             |                       |          `foo` dropped here while still borrowed\n-   |                             |                       borrowed value does not live long enough\n-   |                             borrow later used here\n+   |                                                     ^^^^^^^^^^ - `foo` dropped here while still borrowed\n+   |                                                     |\n+   |                                                     borrowed value does not live long enough\n \n error: aborting due to previous error\n "}, {"sha": "94c450c7b1ececc99ca46eff2b6086bb4ae0d143", "filename": "tests/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-lifetime-param.rs:32:19\n    |\n+LL |     let (foo1, first_dropped);\n+   |                ------------- binding `first_dropped` declared here\n+...\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "e133f75d57bb7628e3c7d01090bc497849002105", "filename": "tests/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-passed-to-fn.rs:34:19\n    |\n+LL |     let (foo1, first_dropped);\n+   |                ------------- binding `first_dropped` declared here\n+...\n LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "9ab3cdd1343a1700dbf007fc2d1cf3fde58c5c4d", "filename": "tests/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-trait-bound.rs:34:19\n    |\n+LL |     let (foo1, first_dropped);\n+   |                ------------- binding `first_dropped` declared here\n+...\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "be56f9489c770391aa139eab90b13fb72f522fe6", "filename": "tests/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `b` does not live long enough\n   --> $DIR/mut-ptr-cant-outlive-ref.rs:8:15\n    |\n+LL |         let b = m.borrow();\n+   |             - binding `b` declared here\n LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }"}, {"sha": "d7084b00ba4027a78516321624e1d71bc2248b59", "filename": "tests/ui/span/range-2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Frange-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Frange-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Frange-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -3,7 +3,9 @@ error[E0597]: `a` does not live long enough\n    |\n LL |     let r = {\n    |         - borrow later stored here\n-...\n+LL |         let a = 42;\n+   |             - binding `a` declared here\n+LL |         let b = 42;\n LL |         &a..&b\n    |         ^^ borrowed value does not live long enough\n LL |     };\n@@ -14,7 +16,9 @@ error[E0597]: `b` does not live long enough\n    |\n LL |     let r = {\n    |         - borrow later stored here\n-...\n+LL |         let a = 42;\n+LL |         let b = 42;\n+   |             - binding `b` declared here\n LL |         &a..&b\n    |             ^^ borrowed value does not live long enough\n LL |     };"}, {"sha": "fb3fad6ae9050f4873d8293533ad35cbc18ed6be", "filename": "tests/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/regionck-unboxed-closure-lifetimes.rs:8:21\n    |\n+LL |         let c = 1;\n+   |             - binding `c` declared here\n LL |         let c_ref = &c;\n    |                     ^^ borrowed value does not live long enough\n ..."}, {"sha": "fed40a4fdd2a5984674f2d8ac889bf26cf439fe6", "filename": "tests/ui/span/regions-close-over-type-parameter-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `tmp0` does not live long enough\n   --> $DIR/regions-close-over-type-parameter-2.rs:23:20\n    |\n+LL |         let tmp0 = 3;\n+   |             ---- binding `tmp0` declared here\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough\n LL |         repeater3(tmp1)"}, {"sha": "e5c7d8b26ab00e31fc8c39b88d583e8c4a0b2b68", "filename": "tests/ui/span/regions-escape-loop-via-variable.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,9 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/regions-escape-loop-via-variable.rs:11:13\n    |\n LL |         let x = 1 + *p;\n-   |                     -- borrow later used here\n+   |             -       -- borrow later used here\n+   |             |\n+   |             binding `x` declared here\n LL |         p = &x;\n    |             ^^ borrowed value does not live long enough\n LL |     }"}, {"sha": "532ac3606c544e9fada531cd4277efb517207a92", "filename": "tests/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,7 +2,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/regions-escape-loop-via-vec.rs:5:11\n    |\n LL |     let mut _y = vec![&mut x];\n-   |                       ------ borrow of `x` occurs here\n+   |                       ------ `x` is borrowed here\n LL |     while x < 10 {\n    |           ^ use of borrowed `x`\n LL |         let mut z = x;\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/regions-escape-loop-via-vec.rs:6:21\n    |\n LL |     let mut _y = vec![&mut x];\n-   |                       ------ borrow of `x` occurs here\n+   |                       ------ `x` is borrowed here\n LL |     while x < 10 {\n LL |         let mut z = x;\n    |                     ^ use of borrowed `x`\n@@ -23,11 +23,10 @@ LL |         _y.push(&mut z);\n error[E0597]: `z` does not live long enough\n   --> $DIR/regions-escape-loop-via-vec.rs:7:17\n    |\n+LL |         let mut z = x;\n+   |             ----- binding `z` declared here\n LL |         _y.push(&mut z);\n-   |         --------^^^^^^-\n-   |         |       |\n-   |         |       borrowed value does not live long enough\n-   |         borrow later used here\n+   |                 ^^^^^^ borrowed value does not live long enough\n ...\n LL |     }\n    |     - `z` dropped here while still borrowed\n@@ -36,7 +35,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/regions-escape-loop-via-vec.rs:9:9\n    |\n LL |     let mut _y = vec![&mut x];\n-   |                       ------ borrow of `x` occurs here\n+   |                       ------ `x` is borrowed here\n ...\n LL |         _y.push(&mut z);\n    |         --------------- borrow later used here"}, {"sha": "bae0befcacaa7876877b6c77d1dbc7d3bc9a766c", "filename": "tests/ui/span/send-is-not-static-ensures-scoping.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |     let bad = {\n    |         --- borrow later stored here\n LL |         let x = 1;\n+   |             - binding `x` declared here\n LL |         let y = &x;\n    |                 ^^ borrowed value does not live long enough\n ..."}, {"sha": "b0267fa6f43b073ff832b88df3c52e889bf9abcb", "filename": "tests/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |     let lock = {\n    |         ---- borrow later stored here\n LL |         let x = 1;\n+   |             - binding `x` declared here\n LL |         Mutex::new(&x)\n    |                    ^^ borrowed value does not live long enough\n LL |     };\n@@ -15,6 +16,7 @@ error[E0597]: `x` does not live long enough\n LL |     let lock = {\n    |         ---- borrow later stored here\n LL |         let x = 1;\n+   |             - binding `x` declared here\n LL |         RwLock::new(&x)\n    |                     ^^ borrowed value does not live long enough\n LL |     };\n@@ -25,7 +27,9 @@ error[E0597]: `x` does not live long enough\n    |\n LL |     let (_tx, rx) = {\n    |          --- borrow later used here\n-...\n+LL |         let x = 1;\n+   |             - binding `x` declared here\n+LL |         let (tx, rx) = mpsc::channel();\n LL |         let _ = tx.send(&x);\n    |                         ^^ borrowed value does not live long enough\n LL |         (tx, rx)"}, {"sha": "28b1c5fe7152a950a55fc81f491831298d49e9b8", "filename": "tests/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -12,6 +12,8 @@ LL |         *lock.lock().unwrap() = &z;\n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:16:33\n    |\n+LL |         let z = 2;\n+   |             - binding `z` declared here\n LL |         *lock.lock().unwrap() = &z;\n    |                                 ^^ borrowed value does not live long enough\n LL |     }\n@@ -34,6 +36,8 @@ LL |         *lock.write().unwrap() = &z;\n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:30:34\n    |\n+LL |         let z = 2;\n+   |             - binding `z` declared here\n LL |         *lock.write().unwrap() = &z;\n    |                                  ^^ borrowed value does not live long enough\n LL |     }\n@@ -56,6 +60,8 @@ LL |         tx.send(&z).unwrap();\n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:46:17\n    |\n+LL |         let z = 2;\n+   |             - binding `z` declared here\n LL |         tx.send(&z).unwrap();\n    |                 ^^ borrowed value does not live long enough\n LL |     }"}, {"sha": "f2fefca414ec42813e2868baf2f08eb2df9a43dd", "filename": "tests/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `c2` does not live long enough\n   --> $DIR/vec-must-not-hide-type-from-dropck.rs:117:24\n    |\n+LL |     let (mut c1, mut c2);\n+   |                  ------ binding `c2` declared here\n+...\n LL |     c1.v[0].v.set(Some(&c2));\n    |                        ^^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL | }\n error[E0597]: `c1` does not live long enough\n   --> $DIR/vec-must-not-hide-type-from-dropck.rs:119:24\n    |\n+LL |     let (mut c1, mut c2);\n+   |          ------ binding `c1` declared here\n+...\n LL |     c2.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough\n LL |"}, {"sha": "73f27144af423fcf6b66e7889d49fd7954913195", "filename": "tests/ui/span/vec_refs_data_with_early_death.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/vec_refs_data_with_early_death.rs:17:12\n    |\n+LL |     let x: i8 = 3;\n+   |         - binding `x` declared here\n+...\n LL |     v.push(&x);\n    |            ^^ borrowed value does not live long enough\n ...\n@@ -15,6 +18,9 @@ LL | }\n error[E0597]: `y` does not live long enough\n   --> $DIR/vec_refs_data_with_early_death.rs:19:12\n    |\n+LL |     let y: i8 = 4;\n+   |         - binding `y` declared here\n+...\n LL |     v.push(&y);\n    |            ^^ borrowed value does not live long enough\n ..."}, {"sha": "64c2d0f1606652c4c9ca3b519b72e557e4aeac03", "filename": "tests/ui/span/wf-method-late-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `pointer` does not live long enough\n LL |     let dangling = {\n    |         -------- borrow later stored here\n LL |         let pointer = Box::new(42);\n+   |             ------- binding `pointer` declared here\n LL |         f2.xmute(&pointer)\n    |                  ^^^^^^^^ borrowed value does not live long enough\n LL |     };"}, {"sha": "e22411b13b776b968140a6716005dc1c2384d11e", "filename": "tests/ui/static/static-lifetime-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -9,6 +9,8 @@ LL | fn f<'a: 'static>(_: &'a i32) {}\n error[E0597]: `x` does not live long enough\n   --> $DIR/static-lifetime-bound.rs:5:7\n    |\n+LL |     let x = 0;\n+   |         - binding `x` declared here\n LL |     f(&x);\n    |     --^^-\n    |     | |"}, {"sha": "0f179438a1263bacb0dbed76f3d8df47ec93981d", "filename": "tests/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrow-for-loop-head.rs:4:18\n    |\n+LL |     let a = vec![1, 2, 3];\n+   |         - binding `a` declared here\n LL |     for i in &a {\n    |              -- borrow of `a` occurs here\n LL |         for j in a {"}, {"sha": "94acda73c4efe2bc4aacb938093afe7aa1c6c23f", "filename": "tests/ui/suggestions/option-content-move2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Foption-content-move2.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -7,7 +7,7 @@ LL |     func(|| {\n    |          -- captured by this `FnMut` closure\n LL |         // Shouldn't suggest `move ||.as_ref()` here\n LL |         move || {\n-   |         ^^^^^^^ move out of `var` occurs here\n+   |         ^^^^^^^ `var` is moved here\n LL |\n LL |             var = Some(NotCopyable);\n    |             ---"}, {"sha": "c7af71a421438b7ac9e595ef443df5f895563bee", "filename": "tests/ui/traits/associated_type_bound/check-trait-object-bounds-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `s` does not live long enough\n   --> $DIR/check-trait-object-bounds-3.rs:15:34\n    |\n+LL |         let s = String::from(\"abcdef\");\n+   |             - binding `s` declared here\n LL |         z = f::<dyn X<Y = &str>>(&s);\n    |             ---------------------^^-\n    |             |                    |"}, {"sha": "ae70202ab7ccd5d145640988c605c6ae9e51627e", "filename": "tests/ui/traits/coercion-generic-regions.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `person` does not live long enough\n   --> $DIR/coercion-generic-regions.rs:17:24\n    |\n+LL |     let person = \"Fred\".to_string();\n+   |         ------ binding `person` declared here\n LL |     let person: &str = &person;\n    |                        ^^^^^^^\n    |                        |"}, {"sha": "89360c44e78b45de94145848ed48cdebd67e0b38", "filename": "tests/ui/traits/vtable/issue-97381.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,9 @@\n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/issue-97381.rs:26:14\n    |\n+LL |     let v = [1, 2, 3]\n+   |         - binding `v` declared here\n+...\n LL |     let el = &v[0];\n    |               - borrow of `v` occurs here\n LL |"}, {"sha": "28941cb0a9e4033296ed05666e0a03684d30630b", "filename": "tests/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `my_string` does not live long enough\n LL |         let result: Result<(), &str> = try {\n    |             ------ borrow later stored here\n LL |             let my_string = String::from(\"\");\n+   |                 --------- binding `my_string` declared here\n LL |             let my_str: & str = & my_string;\n    |                                 ^^^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -14,10 +15,10 @@ error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-bad-lifetime.rs:29:13\n    |\n LL |         let k = &mut i;\n-   |                 ------ borrow of `i` occurs here\n+   |                 ------ `i` is borrowed here\n ...\n LL |             i = 10;\n-   |             ^^^^^^ assignment to borrowed `i` occurs here\n+   |             ^^^^^^ `i` is assigned to here but it was already borrowed\n LL |         };\n LL |         ::std::mem::drop(k);\n    |                          - borrow later used here\n@@ -38,10 +39,10 @@ error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-bad-lifetime.rs:32:9\n    |\n LL |         let k = &mut i;\n-   |                 ------ borrow of `i` occurs here\n+   |                 ------ `i` is borrowed here\n ...\n LL |         i = 40;\n-   |         ^^^^^^ assignment to borrowed `i` occurs here\n+   |         ^^^^^^ `i` is assigned to here but it was already borrowed\n LL |\n LL |         let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n    |                                         - borrow later used here"}, {"sha": "71c7e460c3992cc8a2018505a5adf992738dfab4", "filename": "tests/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -2,10 +2,10 @@ error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:17:9\n    |\n LL |             &i\n-   |             -- borrow of `i` occurs here\n+   |             -- `i` is borrowed here\n LL |         };\n LL |         i = 0;\n-   |         ^^^^^ assignment to borrowed `i` occurs here\n+   |         ^^^^^ `i` is assigned to here but it was already borrowed\n LL |         let _ = i;\n LL |         do_something_with(x);\n    |                           - borrow later used here\n@@ -32,10 +32,10 @@ error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9\n    |\n LL |             j = &i;\n-   |                 -- borrow of `i` occurs here\n+   |                 -- `i` is borrowed here\n LL |         };\n LL |         i = 0;\n-   |         ^^^^^ assignment to borrowed `i` occurs here\n+   |         ^^^^^ `i` is assigned to here but it was already borrowed\n LL |         let _ = i;\n LL |         do_something_with(j);\n    |                           - borrow later used here"}, {"sha": "98fe97c5c1814e5051bb02c8ae49a3f1e21253e1", "filename": "tests/ui/unboxed-closures/unboxed-closures-borrow-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n LL |     let f = || x += 1;\n    |             -- - borrow occurs due to use of `x` in closure\n    |             |\n-   |             borrow of `x` occurs here\n+   |             `x` is borrowed here\n LL |     let _y = x;\n    |              ^ use of borrowed `x`\n LL |     f;"}, {"sha": "23aa18d7156ac9509033767b276349fd76ef8981", "filename": "tests/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -16,14 +16,14 @@ error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:20:5\n    |\n LL |     let f = |x: u32| -> u32 {\n-   |             --------------- borrow of `factorial` occurs here\n+   |             --------------- `factorial` is borrowed here\n LL |         let g = factorial.as_ref().unwrap();\n    |                 --------- borrow occurs due to use in closure\n ...\n LL |     factorial = Some(Box::new(f));\n    |     ^^^^^^^^^\n    |     |\n-   |     assignment to borrowed `factorial` occurs here\n+   |     `factorial` is assigned to here but it was already borrowed\n    |     borrow later used here\n \n error[E0597]: `factorial` does not live long enough\n@@ -47,12 +47,12 @@ LL |     let mut factorial: Option<Box<dyn Fn(u32) -> u32 + 'static>> = None;\n    |                        ----------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n LL |\n LL |     let f = |x: u32| -> u32 {\n-   |             --------------- borrow of `factorial` occurs here\n+   |             --------------- `factorial` is borrowed here\n LL |         let g = factorial.as_ref().unwrap();\n    |                 --------- borrow occurs due to use in closure\n ...\n LL |     factorial = Some(Box::new(f));\n-   |     ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n+   |     ^^^^^^^^^ `factorial` is assigned to here but it was already borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e47785c465ac6a8614c1fe21eaabd9a9a1e64cc3", "filename": "tests/ui/unop-move-semantics.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funop-move-semantics.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -23,6 +23,8 @@ LL | fn move_then_borrow<T: Not<Output=T> + Clone + Copy>(x: T) {\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/unop-move-semantics.rs:15:6\n    |\n+LL | fn move_borrowed<T: Not<Output=T>>(x: T, mut y: T) {\n+   |                                    - binding `x` declared here\n LL |     let m = &x;\n    |             -- borrow of `x` occurs here\n ...\n@@ -35,6 +37,9 @@ LL |     use_mut(n); use_imm(m);\n error[E0505]: cannot move out of `y` because it is borrowed\n   --> $DIR/unop-move-semantics.rs:17:6\n    |\n+LL | fn move_borrowed<T: Not<Output=T>>(x: T, mut y: T) {\n+   |                                          ----- binding `y` declared here\n+LL |     let m = &x;\n LL |     let n = &mut y;\n    |             ------ borrow of `y` occurs here\n ..."}, {"sha": "258f67db5ce4b50a9185ac46ad3e9613ed2df121", "filename": "tests/ui/variance/variance-issue-20533.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fvariance%2Fvariance-issue-20533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656db98bd99caf7e5c5e81ad11ed8922e28c46fb/tests%2Fui%2Fvariance%2Fvariance-issue-20533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-issue-20533.stderr?ref=656db98bd99caf7e5c5e81ad11ed8922e28c46fb", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/variance-issue-20533.rs:28:14\n    |\n+LL |         let a = AffineU32(1);\n+   |             - binding `a` declared here\n LL |         let x = foo(&a);\n    |                     -- borrow of `a` occurs here\n LL |         drop(a);\n@@ -11,6 +13,8 @@ LL |         drop(x);\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/variance-issue-20533.rs:34:14\n    |\n+LL |         let a = AffineU32(1);\n+   |             - binding `a` declared here\n LL |         let x = bar(&a);\n    |                     -- borrow of `a` occurs here\n LL |         drop(a);\n@@ -21,6 +25,8 @@ LL |         drop(x);\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/variance-issue-20533.rs:40:14\n    |\n+LL |         let a = AffineU32(1);\n+   |             - binding `a` declared here\n LL |         let x = baz(&a);\n    |                     -- borrow of `a` occurs here\n LL |         drop(a);"}]}