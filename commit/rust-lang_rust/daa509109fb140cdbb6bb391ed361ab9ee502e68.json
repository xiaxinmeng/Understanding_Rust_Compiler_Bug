{"sha": "daa509109fb140cdbb6bb391ed361ab9ee502e68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTUwOTEwOWZiMTQwY2RiYjZiYjM5MWVkMzYxYWI5ZWU1MDJlNjg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-01-27T03:23:32Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-02-02T03:51:52Z"}, "message": "Update cell docs", "tree": {"sha": "84d0ca532488231a116d92b2662279ff441cd626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d0ca532488231a116d92b2662279ff441cd626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa509109fb140cdbb6bb391ed361ab9ee502e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa509109fb140cdbb6bb391ed361ab9ee502e68", "html_url": "https://github.com/rust-lang/rust/commit/daa509109fb140cdbb6bb391ed361ab9ee502e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa509109fb140cdbb6bb391ed361ab9ee502e68/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afac3ecacc92ccf7a3f693702c9582f930fb91f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/afac3ecacc92ccf7a3f693702c9582f930fb91f3", "html_url": "https://github.com/rust-lang/rust/commit/afac3ecacc92ccf7a3f693702c9582f930fb91f3"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "ab44342ebf02fda0daf228f3f1abc524c9106c54", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/daa509109fb140cdbb6bb391ed361ab9ee502e68/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa509109fb140cdbb6bb391ed361ab9ee502e68/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=daa509109fb140cdbb6bb391ed361ab9ee502e68", "patch": "@@ -15,10 +15,18 @@\n //! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast\n //! with typical Rust types that exhibit 'inherited mutability'.\n //!\n-//! Cell types come in two flavors: `Cell<T>` and `RefCell<T>`. `Cell<T>` provides `get` and `set`\n-//! methods that change the interior value with a single method call. `Cell<T>` though is only\n-//! compatible with types that implement `Copy`. For other types, one must use the `RefCell<T>`\n-//! type, acquiring a write lock before mutating.\n+//! Cell types come in two flavors: `Cell<T>` and `RefCell<T>`. `Cell<T>` implements interior\n+//! mutability by moving values in and out of the `Cell<T>`. To use references instead of values,\n+//! one must use the `RefCell<T>` type, acquiring a write lock before mutating. `Cell<T>` provides\n+//! methods to retrieve and change the current interior value:\n+//!\n+//!  - For types that implement `Copy`, the `get` method retrieves the current interior value.\n+//!  - For types that implement `Default`, the `take` method replaces the current interior value\n+//!    with `Default::default()` and returns the replaced value.\n+//!  - For all types, the `replace` method replaces the current interior value and returns the\n+//!    replaced value and the `into_inner` method consumes the `Cell<T>` and returns the interior\n+//!    value. Additionally, the `set` method replaces the interior value, dropping the replaced\n+//!    value.\n //!\n //! `RefCell<T>` uses Rust's lifetimes to implement 'dynamic borrowing', a process whereby one can\n //! claim temporary, exclusive, mutable access to the inner value. Borrows for `RefCell<T>`s are\n@@ -179,7 +187,7 @@ use marker::Unsize;\n use mem;\n use ops::{Deref, DerefMut, CoerceUnsized};\n \n-/// A mutable memory location that admits only `Copy` data.\n+/// A mutable memory location.\n ///\n /// See the [module-level documentation](index.html) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}