{"sha": "2bc9e9f32711047b06940c335eb5327281f8c555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzllOWYzMjcxMTA0N2IwNjk0MGMzMzVlYjUzMjcyODFmOGM1NTU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-13T19:33:15Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-13T19:33:15Z"}, "message": "Improve tests", "tree": {"sha": "335a8098d74998ef54a0f3afab9f5ae87d5e707a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335a8098d74998ef54a0f3afab9f5ae87d5e707a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc9e9f32711047b06940c335eb5327281f8c555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc9e9f32711047b06940c335eb5327281f8c555", "html_url": "https://github.com/rust-lang/rust/commit/2bc9e9f32711047b06940c335eb5327281f8c555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc9e9f32711047b06940c335eb5327281f8c555/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5069eeef5ba0260f2daed513a28b43ae45445bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5069eeef5ba0260f2daed513a28b43ae45445bd", "html_url": "https://github.com/rust-lang/rust/commit/c5069eeef5ba0260f2daed513a28b43ae45445bd"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "a1699d44940370bfb09042184559e7ed36f89c8b", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2bc9e9f32711047b06940c335eb5327281f8c555/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc9e9f32711047b06940c335eb5327281f8c555/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=2bc9e9f32711047b06940c335eb5327281f8c555", "patch": "@@ -120,54 +120,65 @@ fn contiguous_range_for_comment<'a>(\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use test_utils::extract_ranges;\n+\n+    fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n+        let (ranges, text) = extract_ranges(text);\n+        let file = File::parse(&text);\n+        let folds = folding_ranges(&file);\n+\n+        assert_eq!(folds.len(), ranges.len());\n+        for ((fold, range), fold_kind) in folds.into_iter().zip(ranges.into_iter()).zip(fold_kinds.into_iter()) {\n+            assert_eq!(fold.range.start(), range.start());\n+            assert_eq!(fold.range.end(), range.end());\n+            assert_eq!(&fold.kind, fold_kind);\n+        }\n+    }\n \n     #[test]\n     fn test_fold_comments() {\n         let text = r#\"\n-// Hello\n+<|>// Hello\n // this is a multiline\n // comment\n-//\n+//<|>\n \n // But this is not\n \n fn main() {\n-    // We should\n+    <|>// We should\n     // also\n     // fold\n-    // this one.\n+    // this one.<|>\n+    <|>//! But this one is different\n+    //! because it has another flavor<|>\n+    <|>/* As does this\n+    multiline comment */<|>\n }\"#;\n \n-        let file = File::parse(&text);\n-        let folds = folding_ranges(&file);\n-        assert_eq!(folds.len(), 2);\n-        assert_eq!(folds[0].range.start(), 1.into());\n-        assert_eq!(folds[0].range.end(), 46.into());\n-        assert_eq!(folds[0].kind, FoldKind::Comment);\n-\n-        assert_eq!(folds[1].range.start(), 84.into());\n-        assert_eq!(folds[1].range.end(), 137.into());\n-        assert_eq!(folds[1].kind, FoldKind::Comment);\n+        let fold_kinds = &[\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+        ];\n+        do_check(text, fold_kinds);\n     }\n \n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-use std::{\n+<|>use std::{\n     str,\n     vec,\n     io as iop\n-};\n+};<|>\n \n fn main() {\n }\"#;\n \n-        let file = File::parse(&text);\n-        let folds = folding_ranges(&file);\n-        assert_eq!(folds.len(), 1);\n-        assert_eq!(folds[0].range.start(), 1.into());\n-        assert_eq!(folds[0].range.end(), 46.into());\n-        assert_eq!(folds[0].kind, FoldKind::Imports);\n+        let folds = &[FoldKind::Imports];\n+        do_check(text, folds);\n     }\n \n "}, {"sha": "ee73153f02f216788b29d315bc052235a2c4829f", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2bc9e9f32711047b06940c335eb5327281f8c555/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc9e9f32711047b06940c335eb5327281f8c555/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=2bc9e9f32711047b06940c335eb5327281f8c555", "patch": "@@ -38,22 +38,44 @@ pub fn assert_eq_dbg(expected: &str, actual: &impl fmt::Debug) {\n }\n \n pub fn extract_offset(text: &str) -> (TextUnit, String) {\n-    let cursor = \"<|>\";\n-    let cursor_pos = match text.find(cursor) {\n+    match try_extract_offset(text) {\n         None => panic!(\"text should contain cursor marker\"),\n-        Some(pos) => pos,\n-    };\n+        Some(result) => result,\n+    }\n+}\n+\n+pub fn try_extract_offset(text: &str) -> Option<(TextUnit, String)> {\n+    let cursor = \"<|>\";\n+    let cursor_pos = text.find(cursor)?;\n     let mut new_text = String::with_capacity(text.len() - cursor.len());\n     new_text.push_str(&text[..cursor_pos]);\n     new_text.push_str(&text[cursor_pos + cursor.len()..]);\n     let cursor_pos = TextUnit::from(cursor_pos as u32);\n-    (cursor_pos, new_text)\n+    Some((cursor_pos, new_text))\n }\n \n pub fn extract_range(text: &str) -> (TextRange, String) {\n-    let (start, text) = extract_offset(text);\n-    let (end, text) = extract_offset(&text);\n-    (TextRange::from_to(start, end), text)\n+    match try_extract_range(text) {\n+        None => panic!(\"text should contain cursor marker\"),\n+        Some(result) => result,\n+    }\n+}\n+\n+pub fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n+    let (start, text) = try_extract_offset(text)?;\n+    let (end, text) = try_extract_offset(&text)?;\n+    Some((TextRange::from_to(start, end), text))\n+}\n+\n+pub fn extract_ranges(text: &str) -> (Vec<TextRange>, String) {\n+    let mut ranges = Vec::new();\n+    let mut text = String::from(text);\n+    while let Some((range, new_text)) = try_extract_range(&text) {\n+        text = new_text;\n+        ranges.push(range);\n+    }\n+\n+    (ranges, text)\n }\n \n pub fn add_cursor(text: &str, offset: TextUnit) -> String {"}]}