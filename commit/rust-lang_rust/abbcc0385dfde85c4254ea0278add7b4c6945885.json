{"sha": "abbcc0385dfde85c4254ea0278add7b4c6945885", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYmNjMDM4NWRmZGU4NWM0MjU0ZWEwMjc4YWRkN2I0YzY5NDU4ODU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-07T22:05:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-07T22:05:16Z"}, "message": "Poison ty_param values in trans; fix buggy parametric obj and box malloc paths. Add generic-box test.", "tree": {"sha": "f864ec462fb129d58582da422c470098af3d5c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f864ec462fb129d58582da422c470098af3d5c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abbcc0385dfde85c4254ea0278add7b4c6945885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abbcc0385dfde85c4254ea0278add7b4c6945885", "html_url": "https://github.com/rust-lang/rust/commit/abbcc0385dfde85c4254ea0278add7b4c6945885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abbcc0385dfde85c4254ea0278add7b4c6945885/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0624f9db4aeaa5681941750c3a1a17ca5fbb7e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0624f9db4aeaa5681941750c3a1a17ca5fbb7e72", "html_url": "https://github.com/rust-lang/rust/commit/0624f9db4aeaa5681941750c3a1a17ca5fbb7e72"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "aa9046749259cf393930cf98366d2cec9b947f8f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/abbcc0385dfde85c4254ea0278add7b4c6945885/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbcc0385dfde85c4254ea0278add7b4c6945885/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=abbcc0385dfde85c4254ea0278add7b4c6945885", "patch": "@@ -661,7 +661,7 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t, bool boxed) -> TypeRef {\n             fail;\n         }\n         case (ty.ty_param(_)) {\n-            llty = T_typaram_ptr(cx.tn);\n+            llty = T_i8();\n         }\n         case (ty.ty_type) { llty = T_ptr(T_tydesc(cx.tn)); }\n     }\n@@ -1216,17 +1216,14 @@ fn trans_raw_malloc(@block_ctxt cx, TypeRef llptr_ty, ValueRef llsize)\n     ret rslt;\n }\n \n-fn trans_malloc_without_cleanup(@block_ctxt cx, @ty.t t) -> result {\n-    auto llty = type_of(cx.fcx.ccx, t);\n-    auto llsize = llsize_of(llvm.LLVMGetElementType(llty));\n-    ret trans_raw_malloc(cx, llty, llsize);\n-}\n-\n-fn trans_malloc(@block_ctxt cx, @ty.t t) -> result {\n-    auto scope_cx = find_scope_cx(cx);\n-    auto rslt = trans_malloc_without_cleanup(cx, t);\n-    scope_cx.cleanups += clean(bind drop_ty(_, rslt.val, t));\n-    ret rslt;\n+fn trans_malloc_boxed(@block_ctxt cx, @ty.t t) -> result {\n+    // Synthesize a fake box type structurally so we have something\n+    // to measure the size of.\n+    auto boxed_body = plain_ty(ty.ty_tup(vec(plain_ty(ty.ty_int), t)));\n+    auto box_ptr = plain_ty(ty.ty_box(t));\n+    auto sz = size_of(cx, boxed_body);\n+    auto llty = type_of(cx.fcx.ccx, box_ptr);\n+    ret trans_raw_malloc(sz.bcx, llty, sz.val);\n }\n \n \n@@ -2256,7 +2253,11 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n         case (ast.box) {\n             auto e_ty = ty.expr_ty(e);\n             auto e_val = sub.val;\n-            sub = trans_malloc(sub.bcx, node_ann_type(sub.bcx.fcx.ccx, a));\n+            auto box_ty = node_ann_type(sub.bcx.fcx.ccx, a);\n+            sub = trans_malloc_boxed(sub.bcx, e_ty);\n+            find_scope_cx(cx).cleanups +=\n+                clean(bind drop_ty(_, sub.val, box_ty));\n+\n             auto box = sub.val;\n             auto rc = sub.bcx.build.GEP(box,\n                                         vec(C_int(0),\n@@ -4707,11 +4708,8 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n                                                    fields_ty)));\n         let @ty.t boxed_body_ty = plain_ty(ty.ty_box(body_ty));\n \n-        let TypeRef llboxed_body_ty = type_of(cx, boxed_body_ty);\n-\n         // Malloc a box for the body.\n-        auto box = trans_raw_malloc(bcx, llboxed_body_ty,\n-            llsize_of(llvm.LLVMGetElementType(llboxed_body_ty)));\n+        auto box = trans_malloc_boxed(bcx, body_ty);\n         bcx = box.bcx;\n         auto rc = GEP_tup_like(bcx, boxed_body_ty, box.val,\n                                vec(0, abi.box_rc_field_refcnt));"}, {"sha": "856f3aff8e6e069ed4bc4e37d89ef307042fceb3", "filename": "src/test/run-pass/generic-box.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abbcc0385dfde85c4254ea0278add7b4c6945885/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbcc0385dfde85c4254ea0278add7b4c6945885/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=abbcc0385dfde85c4254ea0278add7b4c6945885", "patch": "@@ -0,0 +1,8 @@\n+fn box[T](&tup(T,T,T) x) -> @tup(T,T,T) {\n+  ret @x;\n+}\n+\n+fn main() {\n+  let @tup(int,int,int) x = box[int](tup(1,2,3));\n+  check (x._1 == 2);\n+}\n\\ No newline at end of file"}]}