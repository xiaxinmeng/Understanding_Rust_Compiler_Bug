{"sha": "dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "node_id": "C_kwDOAAsO6NoAKGRjYzkwMjhjMGNlMzBjM2IzN2YzY2E5ZmFmNjM3YTlmM2NjZDViY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-09T06:38:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-09T06:38:22Z"}, "message": "Auto merge of #112450 - matthiaskrgr:rollup-fdbazkr, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #112323 (Don't mention already-set fields in struct constructor missing field error)\n - #112395 (Add Terminator::InlineAsm conversion from MIR to SMIR)\n - #112411 (add programmerjake to portable-simd cc list)\n - #112428 (Structurally resolve pointee in `check_pat_lit`)\n - #112444 (Don't debug-print `Interned` or `PrivateZst`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9a2d11bec79d77b0a976c003e37f0eff6ec6f498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2d11bec79d77b0a976c003e37f0eff6ec6f498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "html_url": "https://github.com/rust-lang/rust/commit/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c843d9fa322596c7d525c78fa89731ecf7afbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c843d9fa322596c7d525c78fa89731ecf7afbfe", "html_url": "https://github.com/rust-lang/rust/commit/9c843d9fa322596c7d525c78fa89731ecf7afbfe"}, {"sha": "009fc56471eec39a6de6476703b4fc407c4324e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/009fc56471eec39a6de6476703b4fc407c4324e5", "html_url": "https://github.com/rust-lang/rust/commit/009fc56471eec39a6de6476703b4fc407c4324e5"}], "stats": {"total": 121, "additions": 95, "deletions": 26}, "files": [{"sha": "e0f8c350c2a8693120640107f3393c0a432fc75d", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -1,5 +1,6 @@\n use crate::stable_hasher::{HashStable, StableHasher};\n use std::cmp::Ordering;\n+use std::fmt::{self, Debug};\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n use std::ptr;\n@@ -20,7 +21,6 @@ mod private {\n /// The `PrivateZst` field means you can pattern match with `Interned(v, _)`\n /// but you can only construct a `Interned` with `new_unchecked`, and not\n /// directly.\n-#[derive(Debug)]\n #[rustc_pass_by_value]\n pub struct Interned<'a, T>(pub &'a T, pub private::PrivateZst);\n \n@@ -108,5 +108,11 @@ where\n     }\n }\n \n+impl<T: Debug> Debug for Interned<'_, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "f03c7ca44ba5fb283510b902a0aed88572b60e7b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -2081,13 +2081,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             },\n             _ => {\n                 // prevent all specified fields from being suggested\n-                let skip_fields = skip_fields.iter().map(|x| x.ident.name);\n-                if let Some(field_name) = self.suggest_field_name(\n-                    variant,\n-                    field.ident.name,\n-                    skip_fields.collect(),\n-                    expr_span,\n-                ) {\n+                let skip_fields: Vec<_> = skip_fields.iter().map(|x| x.ident.name).collect();\n+                if let Some(field_name) =\n+                    self.suggest_field_name(variant, field.ident.name, &skip_fields, expr_span)\n+                {\n                     err.span_suggestion(\n                         field.ident.span,\n                         \"a field with a similar name exists\",\n@@ -2108,9 +2105,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     format!(\"`{ty}` does not have this field\"),\n                                 );\n                             }\n-                            let available_field_names =\n+                            let mut available_field_names =\n                                 self.available_field_names(variant, expr_span);\n-                            if !available_field_names.is_empty() {\n+                            available_field_names\n+                                .retain(|name| skip_fields.iter().all(|skip| name != skip));\n+                            if available_field_names.is_empty() {\n+                                err.note(\"all struct fields are already assigned\");\n+                            } else {\n                                 err.note(format!(\n                                     \"available fields are: {}\",\n                                     self.name_series_display(available_field_names)\n@@ -2130,7 +2131,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         variant: &'tcx ty::VariantDef,\n         field: Symbol,\n-        skip: Vec<Symbol>,\n+        skip: &[Symbol],\n         // The span where stability will be checked\n         span: Span,\n     ) -> Option<Symbol> {\n@@ -2582,7 +2583,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         access_span: Span,\n     ) {\n         if let Some(suggested_field_name) =\n-            self.suggest_field_name(def.non_enum_variant(), field.name, vec![], access_span)\n+            self.suggest_field_name(def.non_enum_variant(), field.name, &[], access_span)\n         {\n             err.span_suggestion(\n                 field.span,"}, {"sha": "2f9871a103a83f06290eade0155eafdebcb5877c", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -393,9 +393,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // They can denote both statically and dynamically-sized byte arrays.\n         let mut pat_ty = ty;\n         if let hir::ExprKind::Lit(Spanned { node: ast::LitKind::ByteStr(..), .. }) = lt.kind {\n-            let expected = self.structurally_resolved_type(span, expected);\n-            if let ty::Ref(_, inner_ty, _) = expected.kind()\n-                && matches!(inner_ty.kind(), ty::Slice(_))\n+            if let ty::Ref(_, inner_ty, _) = *self.structurally_resolved_type(span, expected).kind()\n+                && self.structurally_resolved_type(span, inner_ty).is_slice()\n             {\n                 let tcx = self.tcx;\n                 trace!(?lt.hir_id.local_id, \"polymorphic byte string lit\");"}, {"sha": "6d8d99cfb5f1f7713656fbc37a6a07eb7af08e30", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -287,6 +287,27 @@ fn rustc_generator_to_generator(\n     }\n }\n \n+fn rustc_inline_asm_operand_to_inline_asm_operand(\n+    operand: &rustc_middle::mir::InlineAsmOperand<'_>,\n+) -> stable_mir::mir::InlineAsmOperand {\n+    use rustc_middle::mir::InlineAsmOperand;\n+\n+    let (in_value, out_place) = match operand {\n+        InlineAsmOperand::In { value, .. } => (Some(rustc_op_to_op(value)), None),\n+        InlineAsmOperand::Out { place, .. } => {\n+            (None, place.map(|place| rustc_place_to_place(&place)))\n+        }\n+        InlineAsmOperand::InOut { in_value, out_place, .. } => {\n+            (Some(rustc_op_to_op(in_value)), out_place.map(|place| rustc_place_to_place(&place)))\n+        }\n+        InlineAsmOperand::Const { .. }\n+        | InlineAsmOperand::SymFn { .. }\n+        | InlineAsmOperand::SymStatic { .. } => (None, None),\n+    };\n+\n+    stable_mir::mir::InlineAsmOperand { in_value, out_place, raw_rpr: format!(\"{:?}\", operand) }\n+}\n+\n fn rustc_terminator_to_terminator(\n     terminator: &rustc_middle::mir::Terminator<'_>,\n ) -> stable_mir::mir::Terminator {\n@@ -330,7 +351,19 @@ fn rustc_terminator_to_terminator(\n             target: target.as_usize(),\n             unwind: rustc_unwind_to_unwind(unwind),\n         },\n-        InlineAsm { .. } => todo!(),\n+        InlineAsm { template, operands, options, line_spans, destination, unwind } => {\n+            Terminator::InlineAsm {\n+                template: format!(\"{:?}\", template),\n+                operands: operands\n+                    .iter()\n+                    .map(|operand| rustc_inline_asm_operand_to_inline_asm_operand(operand))\n+                    .collect(),\n+                options: format!(\"{:?}\", options),\n+                line_spans: format!(\"{:?}\", line_spans),\n+                destination: destination.map(|d| d.as_usize()),\n+                unwind: rustc_unwind_to_unwind(unwind),\n+            }\n+        }\n         Yield { .. } | GeneratorDrop | FalseEdge { .. } | FalseUnwind { .. } => unreachable!(),\n     }\n }"}, {"sha": "9df7b4945b70a34581f501e732405e17cc733da5", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -46,6 +46,23 @@ pub enum Terminator {\n         unwind: UnwindAction,\n     },\n     GeneratorDrop,\n+    InlineAsm {\n+        template: String,\n+        operands: Vec<InlineAsmOperand>,\n+        options: String,\n+        line_spans: String,\n+        destination: Option<usize>,\n+        unwind: UnwindAction,\n+    },\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct InlineAsmOperand {\n+    pub in_value: Option<Operand>,\n+    pub out_place: Option<Place>,\n+    // This field has a raw debug representation of MIR's InlineAsmOperand.\n+    // For now we care about place/operand + the rest in a debug format.\n+    pub raw_rpr: String,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "b49b15db64cee8501f8b5720568c79a02bde2049", "filename": "tests/ui/async-await/drop-track-bad-field-in-fru.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -3,6 +3,8 @@ error[E0559]: variant `Option<_>::None` has no field named `value`\n    |\n LL |     None { value: (), ..Default::default() }.await;\n    |            ^^^^^ `Option<_>::None` does not have this field\n+   |\n+   = note: all struct fields are already assigned\n \n error[E0277]: `Option<_>` is not a future\n   --> $DIR/drop-track-bad-field-in-fru.rs:7:46"}, {"sha": "c20bbce3f24a96004ed3e322714178aca857448d", "filename": "tests/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -10,7 +10,7 @@ error[E0560]: struct `Demo` has no field named `egregiously_nonexistent_field`\n LL |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Demo` does not have this field\n    |\n-   = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others\n+   = note: available fields are: `favorite_integer`, `innocently_misspellable`, `another_field`, `yet_another_field`, `always_more_fields`, `and_ever`\n \n error[E0609]: no field `inocently_mispellable` on type `Demo`\n   --> $DIR/issue-42599_available_fields_note.rs:32:41"}, {"sha": "bb5ce478ae1a773d83685e72c62a224af40e19ac", "filename": "tests/ui/error-codes/E0560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Ferror-codes%2FE0560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Ferror-codes%2FE0560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0560.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -4,7 +4,7 @@ error[E0560]: struct `Simba` has no field named `father`\n LL |     let s = Simba { mother: 1, father: 0 };\n    |                                ^^^^^^ `Simba` does not have this field\n    |\n-   = note: available fields are: `mother`\n+   = note: all struct fields are already assigned\n \n error: aborting due to previous error\n "}, {"sha": "a91e4b31f4bdf800a715252c17a7df41dc0bada6", "filename": "tests/ui/issues/issue-5439.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fissues%2Fissue-5439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fissues%2Fissue-5439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5439.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -4,7 +4,7 @@ error[E0560]: struct `Foo` has no field named `nonexistent`\n LL |         return Box::new(Foo { nonexistent: self, foo: i });\n    |                               ^^^^^^^^^^^ `Foo` does not have this field\n    |\n-   = note: available fields are: `foo`\n+   = note: all struct fields are already assigned\n \n error: aborting due to previous error\n "}, {"sha": "8c15cb9de9823a4129ce80570c51b14fbace1857", "filename": "tests/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -32,7 +32,7 @@ error[E0560]: struct `Foo` has no field named `b`\n LL |     let y = Foo { a: 10, b: 10isize };\n    |                          ^ `Foo` does not have this field\n    |\n-   = note: available fields are: `a`\n+   = note: all struct fields are already assigned\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:39:5"}, {"sha": "2b9ba85ddcb88773635aa62250885c926ca67da4", "filename": "tests/ui/structs/struct-field-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-field-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-field-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-field-cfg.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -10,7 +10,7 @@ error[E0560]: struct `Foo` has no field named `absent`\n LL |     let _ = Foo { present: (), #[cfg(all())] absent: () };\n    |                                              ^^^^^^ `Foo` does not have this field\n    |\n-   = note: available fields are: `present`\n+   = note: all struct fields are already assigned\n \n error[E0027]: pattern does not mention field `present`\n   --> $DIR/struct-field-cfg.rs:13:9"}, {"sha": "d89d45b39033a56d2469e03bc135f8e8bb79e856", "filename": "tests/ui/structs/struct-fields-shorthand.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-fields-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-fields-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-fields-shorthand.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -4,7 +4,7 @@ error[E0560]: struct `Foo` has no field named `z`\n LL |         x, y, z\n    |               ^ `Foo` does not have this field\n    |\n-   = note: available fields are: `x`, `y`\n+   = note: all struct fields are already assigned\n \n error: aborting due to previous error\n "}, {"sha": "9342607ebce2560013835038e343543f43e9ba53", "filename": "tests/ui/structs/struct-fields-too-many.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-fields-too-many.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Fstructs%2Fstruct-fields-too-many.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-fields-too-many.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -4,7 +4,7 @@ error[E0560]: struct `BuildData` has no field named `bar`\n LL |         bar: 0\n    |         ^^^ `BuildData` does not have this field\n    |\n-   = note: available fields are: `foo`\n+   = note: all struct fields are already assigned\n \n error: aborting due to previous error\n "}, {"sha": "4f848062595dac8ba7d49416ccbe4e020bf8cd99", "filename": "tests/ui/traits/new-solver/slice-match-byte-lit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Ftraits%2Fnew-solver%2Fslice-match-byte-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Ftraits%2Fnew-solver%2Fslice-match-byte-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fslice-match-byte-lit.rs?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn test(s: &[u8]) {\n+    match &s[0..3] {\n+        b\"uwu\" => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1157f0c2ae770bc0bebea3bd19c96f8252fec7b8", "filename": "tests/ui/union/union-fields-2.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -16,7 +16,7 @@ error[E0560]: union `U` has no field named `c`\n LL |     let u = U { a: 0, b: 1, c: 2 };\n    |                             ^ `U` does not have this field\n    |\n-   = note: available fields are: `a`, `b`\n+   = note: all struct fields are already assigned\n \n error[E0784]: union expressions should have exactly one field\n   --> $DIR/union-fields-2.rs:13:13"}, {"sha": "1157f0c2ae770bc0bebea3bd19c96f8252fec7b8", "filename": "tests/ui/union/union-fields-2.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/tests%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -16,7 +16,7 @@ error[E0560]: union `U` has no field named `c`\n LL |     let u = U { a: 0, b: 1, c: 2 };\n    |                             ^ `U` does not have this field\n    |\n-   = note: available fields are: `a`, `b`\n+   = note: all struct fields are already assigned\n \n error[E0784]: union expressions should have exactly one field\n   --> $DIR/union-fields-2.rs:13:13"}, {"sha": "0f0b31e9f38a1b3dd497d3cb66e6c1fb1b5a24af", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "patch": "@@ -378,7 +378,7 @@ Portable SIMD is developed in its own repository. If possible, consider \\\n making this change to [rust-lang/portable-simd](https://github.com/rust-lang/portable-simd) \\\n instead.\n \"\"\"\n-cc = [\"@calebzulawski\"]\n+cc = [\"@calebzulawski\", \"@programmerjake\"]\n \n [mentions.\"src/librustdoc/clean/types.rs\"]\n cc = [\"@camelid\"]"}]}