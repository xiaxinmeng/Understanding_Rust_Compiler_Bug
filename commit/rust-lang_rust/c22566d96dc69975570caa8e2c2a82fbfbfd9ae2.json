{"sha": "c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMjU2NmQ5NmRjNjk5NzU1NzBjYWE4ZTJjMmE4MmZiZmJmZDlhZTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-13T02:33:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-13T02:33:56Z"}, "message": "Rollup merge of #59132 - nikomatsakis:issue-53548-generator-bound, r=pnkfelix\n\nignore higher-ranked object bound conditions created by WF\n\nIn the `issue-53548` test added in this PR, the `Box<dyn Trait>` type is expanded to `Box<dyn Trait + 'static>`, but the generator \"witness\" that results is `for<'r> { Box<dyn Trait + 'r> }`. The WF code was encountering an ICE (when debug-assertions were enabled) and an unexpected compilation error (without debug-asserions) when trying to process this `'r` region bound. In particular, to be WF, the region bound must meet the requirements of the trait, and hence we got `for<'r> { 'r: 'static }`. This would ICE because the `Binder` constructor we were using was assering that no higher-ranked regions were involved (because the WF code is supposed to skip those). The error (if debug-asserions were disabled) came because we obviously cannot prove that `'r: 'static` for any region `'r`.  Pursuant with\nour \"lazy WF\" strategy for higher-ranked regions, the fix is not to require that `for<'r> { 'r: 'static }` holds (this is also analogous to what we would do for higher-ranked regions appearing within the trait in other positions).\n\nFixes #53548\n\nr? @pnkfelix", "tree": {"sha": "3d73482dc34963e598e499343d479020cebd6e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d73482dc34963e598e499343d479020cebd6e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJciGwUCRBK7hj4Ov3rIwAAdHIIAAuT3Cr+WmSnJSAGYVgnPUS8\nzJikgMZ7cPEo0KARImCBTo8Lv7TmRrm8ASvxWN4TR5h4rlX0aGoNd5/1ImhA6Z8U\ne3xYxMCg5/i3ChMsMy6TxruuwXZtrNkIjZQXOnu+csqhmmK/yutWHi5nKxtyObXu\ngaSb1l+CuGBHRpHyKZOiqnz323Ydj3dtK8/x+SaCgRzmdPsr6EB0vwjrlQBMNALS\nb5Oerytvj4umWYhoBXDTHWaAXGKFiAL4EYe/rP8Co0R2w0s+4XJZpPTp1sfOcAii\nyxp+7H7VEVMU8oegnzDBzbKAP62SVduiCL1eNXUq95sH3bq+FRPy53vTLTb0h7o=\n=Dmk1\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d73482dc34963e598e499343d479020cebd6e18\nparent 3623c1ac4edb92e2aabab14c0b36691e970703ea\nparent 261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552444436 +0100\ncommitter GitHub <noreply@github.com> 1552444436 +0100\n\nRollup merge of #59132 - nikomatsakis:issue-53548-generator-bound, r=pnkfelix\n\nignore higher-ranked object bound conditions created by WF\n\nIn the `issue-53548` test added in this PR, the `Box<dyn Trait>` type is expanded to `Box<dyn Trait + 'static>`, but the generator \"witness\" that results is `for<'r> { Box<dyn Trait + 'r> }`. The WF code was encountering an ICE (when debug-assertions were enabled) and an unexpected compilation error (without debug-asserions) when trying to process this `'r` region bound. In particular, to be WF, the region bound must meet the requirements of the trait, and hence we got `for<'r> { 'r: 'static }`. This would ICE because the `Binder` constructor we were using was assering that no higher-ranked regions were involved (because the WF code is supposed to skip those). The error (if debug-asserions were disabled) came because we obviously cannot prove that `'r: 'static` for any region `'r`.  Pursuant with\nour \"lazy WF\" strategy for higher-ranked regions, the fix is not to require that `for<'r> { 'r: 'static }` holds (this is also analogous to what we would do for higher-ranked regions appearing within the trait in other positions).\n\nFixes #53548\n\nr? @pnkfelix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "html_url": "https://github.com/rust-lang/rust/commit/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3623c1ac4edb92e2aabab14c0b36691e970703ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3623c1ac4edb92e2aabab14c0b36691e970703ea", "html_url": "https://github.com/rust-lang/rust/commit/3623c1ac4edb92e2aabab14c0b36691e970703ea"}, {"sha": "261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "html_url": "https://github.com/rust-lang/rust/commit/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "8c684c0775ee367cc4b9849410006eb9cbea5d59", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "patch": "@@ -275,6 +275,8 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                 self.selcx.infcx().resolve_type_vars_if_possible(&obligation.predicate);\n         }\n \n+        debug!(\"process_obligation: obligation = {:?}\", obligation);\n+\n         match obligation.predicate {\n             ty::Predicate::Trait(ref data) => {\n                 let trait_obligation = obligation.with(data.clone());"}, {"sha": "fa35416cdd4982fd50f11376e006635eb97d111e", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "patch": "@@ -482,8 +482,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         //\n         // Note: in fact we only permit builtin traits, not `Bar<'d>`, I\n         // am looking forward to the future here.\n-\n-        if !data.has_escaping_bound_vars() {\n+        if !data.has_escaping_bound_vars() && !region.has_escaping_bound_vars() {\n             let implicit_bounds =\n                 object_region_bounds(self.infcx.tcx, data);\n "}, {"sha": "df11800731c72bb3d1b661c0f54911767190bcb4", "filename": "src/test/ui/generator/issue-53548-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs?ref=c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "patch": "@@ -0,0 +1,20 @@\n+// A variant of #53548 that does not actually require generators,\n+// but which encountered the same ICE/error. See `issue-53548.rs`\n+// for details.\n+//\n+// compile-pass\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+trait Trait: 'static {}\n+\n+struct Store<C> {\n+    inner: Rc<RefCell<Option<C>>>,\n+}\n+\n+fn main() {\n+    let store = Store::<Box<for<'a> fn(&(dyn Trait + 'a))>> {\n+        inner: Default::default(),\n+    };\n+}"}, {"sha": "00fdb91faab760fd6ad19928f6ab1d3f5459daf3", "filename": "src/test/ui/generator/issue-53548.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22566d96dc69975570caa8e2c2a82fbfbfd9ae2/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs?ref=c22566d96dc69975570caa8e2c2a82fbfbfd9ae2", "patch": "@@ -0,0 +1,39 @@\n+// Regression test for #53548. The `Box<dyn Trait>` type below is\n+// expanded to `Box<dyn Trait + 'static>`, but the generator \"witness\"\n+// that results is `for<'r> { Box<dyn Trait + 'r> }`. The WF code was\n+// encountering an ICE (when debug-assertions were enabled) and an\n+// unexpected compilation error (without debug-asserions) when trying\n+// to process this `'r` region bound. In particular, to be WF, the\n+// region bound must meet the requirements of the trait, and hence we\n+// got `for<'r> { 'r: 'static }`. This would ICE because the `Binder`\n+// constructor we were using was assering that no higher-ranked\n+// regions were involved (because the WF code is supposed to skip\n+// those). The error (if debug-asserions were disabled) came because\n+// we obviously cannot prove that `'r: 'static` for any region `'r`.\n+// Pursuant with our \"lazy WF\" strategy for higher-ranked regions, the\n+// fix is not to require that `for<'r> { 'r: 'static }` holds (this is\n+// also analogous to what we would do for higher-ranked regions\n+// appearing within the trait in other positions).\n+//\n+// compile-pass\n+\n+#![feature(generators)]\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+trait Trait: 'static {}\n+\n+struct Store<C> {\n+    inner: Rc<RefCell<Option<C>>>,\n+}\n+\n+fn main() {\n+    Box::new(static move || {\n+        let store = Store::<Box<dyn Trait>> {\n+            inner: Default::default(),\n+        };\n+        yield ();\n+    });\n+}\n+"}]}