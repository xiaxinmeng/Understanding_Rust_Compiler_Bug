{"sha": "2b688a959def6d3441d3e4854fde557de0913e36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNjg4YTk1OWRlZjZkMzQ0MWQzZTQ4NTRmZGU1NTdkZTA5MTNlMzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-02T11:54:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:06:27Z"}, "message": "Don't use c_uint in cg_ssa", "tree": {"sha": "a15a112a23e578101557d5c5c373a87e9acdda92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15a112a23e578101557d5c5c373a87e9acdda92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b688a959def6d3441d3e4854fde557de0913e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b688a959def6d3441d3e4854fde557de0913e36", "html_url": "https://github.com/rust-lang/rust/commit/2b688a959def6d3441d3e4854fde557de0913e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b688a959def6d3441d3e4854fde557de0913e36/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002b4b39a16760f37107cf02d7a91ff316d3073", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002b4b39a16760f37107cf02d7a91ff316d3073", "html_url": "https://github.com/rust-lang/rust/commit/2002b4b39a16760f37107cf02d7a91ff316d3073"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "0060751d606414b3f8922c76731b8bce49b1dd57", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=2b688a959def6d3441d3e4854fde557de0913e36", "patch": "@@ -326,8 +326,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         get_fn(self, instance)\n     }\n \n-    fn get_param(&self, llfn: &'ll Value, index: c_uint) -> &'ll Value {\n-        llvm::get_param(llfn, index)\n+    fn get_param(&self, llfn: &'ll Value, index: usize) -> &'ll Value {\n+        llvm::get_param(llfn, index as c_uint)\n     }\n \n     fn eh_personality(&self) -> &'ll Value {"}, {"sha": "b0f53de17ea31755d82194c28695c0ba609772e5", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=2b688a959def6d3441d3e4854fde557de0913e36", "patch": "@@ -1,4 +1,3 @@\n-use libc::c_uint;\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{TyLayout, HasTyCtxt};\n use rustc::mir::{self, Mir};\n@@ -534,18 +533,18 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 }\n                 PassMode::Ignore(IgnoreMode::CVarArgs) => {}\n                 PassMode::Direct(_) => {\n-                    let llarg = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+                    let llarg = bx.get_param(bx.llfn(), llarg_idx);\n                     bx.set_value_name(llarg, &name);\n                     llarg_idx += 1;\n                     return local(\n                         OperandRef::from_immediate_or_packed_pair(bx, llarg, arg.layout));\n                 }\n                 PassMode::Pair(..) => {\n-                    let a = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+                    let a = bx.get_param(bx.llfn(), llarg_idx);\n                     bx.set_value_name(a, &(name.clone() + \".0\"));\n                     llarg_idx += 1;\n \n-                    let b = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+                    let b = bx.get_param(bx.llfn(), llarg_idx);\n                     bx.set_value_name(b, &(name + \".1\"));\n                     llarg_idx += 1;\n \n@@ -562,16 +561,16 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             // Don't copy an indirect argument to an alloca, the caller\n             // already put it in a temporary alloca and gave it up.\n             // FIXME: lifetimes\n-            let llarg = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+            let llarg = bx.get_param(bx.llfn(), llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n             PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer.\n-            let llarg = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+            let llarg = bx.get_param(bx.llfn(), llarg_idx);\n             llarg_idx += 1;\n-            let llextra = bx.get_param(bx.llfn(), llarg_idx as c_uint);\n+            let llextra = bx.get_param(bx.llfn(), llarg_idx);\n             llarg_idx += 1;\n             let indirect_operand = OperandValue::Pair(llarg, llextra);\n "}, {"sha": "b3d458f3a3be808dc239222e5fc050ad2bcb68d4", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b688a959def6d3441d3e4854fde557de0913e36/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=2b688a959def6d3441d3e4854fde557de0913e36", "patch": "@@ -1,5 +1,4 @@\n use super::BackendTypes;\n-use libc::c_uint;\n use rustc::mir::mono::Stats;\n use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n@@ -15,7 +14,7 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn check_overflow(&self) -> bool;\n     fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, Self::Value>>;\n     fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;\n-    fn get_param(&self, llfn: Self::Value, index: c_uint) -> Self::Value;\n+    fn get_param(&self, llfn: Self::Value, index: usize) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;"}]}