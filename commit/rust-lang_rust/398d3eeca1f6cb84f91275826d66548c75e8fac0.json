{"sha": "398d3eeca1f6cb84f91275826d66548c75e8fac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OGQzZWVjYTFmNmNiODRmOTEyNzU4MjZkNjY1NDhjNzVlOGZhYzA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-26T19:02:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-26T19:02:32Z"}, "message": "Rollup merge of #71421 - elichai:2020-04-boxed-slice, r=sfackler\n\nAdd a function to turn Box<T> into Box<[T]>\n\nHi,\nI think this is very useful, as currently it's not possible in safe rust to do this without re-allocating.\nan alternative implementation of the same function can be:\n```rust\npub fn into_boxed_slice<T>(boxed: Box<T>) -> Box<[T]> {\n    unsafe {\n        let slice = slice::from_raw_parts_mut(Box::into_raw(boxed), 1);\n        Box::from_raw(slice)\n    }\n}\n```\n\nThe only thing that makes me a little uncomfortable is this line :\n> The alignment of array types is greater or equal to the alignment of its element type\n\nfrom https://rust-lang.github.io/unsafe-code-guidelines/layout/arrays-and-slices.html\n\nBut then I see:\n> The alignment of &T, &mut T, *const T and *mut T are the same, and are at least the word size.\n> The alignment of &[T] is the word size.\n\nfrom https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#representation\n\nSo I do believe this is valid(FWIW it also passes in miri https://play.rust-lang.org/?gist=c002b99364ee6b29862aeb3565a91c19)", "tree": {"sha": "73b5d8aa93f4b3fc06ae7fd9b22b7fc02f3ac7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73b5d8aa93f4b3fc06ae7fd9b22b7fc02f3ac7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398d3eeca1f6cb84f91275826d66548c75e8fac0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepdrJCRBK7hj4Ov3rIwAAdHIIAG6+dd1PVBcYS075rtBItRyI\naPIk2xA96QcagV3xebQA/MM5tbwFQ2E86QD1jD8qsWfH0hfAWTgQ8gOgX7hTSIJe\nV7eqmjf/hIDr30vqXDwkWKG2eRQNWo6XN+MGQdJmhTyg42axATjSL4DgQW3PhtJc\nCo/5TOAH1qtNZEAdrIiy65LWj/ycpQ0WQCf80modlDrdTfuUYDwhkvIhFr+pHTAD\nDVhdN4WLqVeC/LwdcB+tiAb4cAVe0XzAgLEcAIGIhYPUzUHWdklr/M5vpoTKaAq1\nQs/ykNvRKYGHnLn5ZmUdc3xPMN2DPg8c89xuvFhBDnOl7hGDb3hzt04MTOQgh1M=\n=1xPk\n-----END PGP SIGNATURE-----\n", "payload": "tree 73b5d8aa93f4b3fc06ae7fd9b22b7fc02f3ac7d2\nparent 7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f\nparent 0228ca0c7d07f92d449209fa2eeda9eb72e68f63\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587927752 +0200\ncommitter GitHub <noreply@github.com> 1587927752 +0200\n\nRollup merge of #71421 - elichai:2020-04-boxed-slice, r=sfackler\n\nAdd a function to turn Box<T> into Box<[T]>\n\nHi,\nI think this is very useful, as currently it's not possible in safe rust to do this without re-allocating.\nan alternative implementation of the same function can be:\n```rust\npub fn into_boxed_slice<T>(boxed: Box<T>) -> Box<[T]> {\n    unsafe {\n        let slice = slice::from_raw_parts_mut(Box::into_raw(boxed), 1);\n        Box::from_raw(slice)\n    }\n}\n```\n\nThe only thing that makes me a little uncomfortable is this line :\n> The alignment of array types is greater or equal to the alignment of its element type\n\nfrom https://rust-lang.github.io/unsafe-code-guidelines/layout/arrays-and-slices.html\n\nBut then I see:\n> The alignment of &T, &mut T, *const T and *mut T are the same, and are at least the word size.\n> The alignment of &[T] is the word size.\n\nfrom https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#representation\n\nSo I do believe this is valid(FWIW it also passes in miri https://play.rust-lang.org/?gist=c002b99364ee6b29862aeb3565a91c19)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398d3eeca1f6cb84f91275826d66548c75e8fac0", "html_url": "https://github.com/rust-lang/rust/commit/398d3eeca1f6cb84f91275826d66548c75e8fac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398d3eeca1f6cb84f91275826d66548c75e8fac0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "html_url": "https://github.com/rust-lang/rust/commit/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f"}, {"sha": "0228ca0c7d07f92d449209fa2eeda9eb72e68f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0228ca0c7d07f92d449209fa2eeda9eb72e68f63", "html_url": "https://github.com/rust-lang/rust/commit/0228ca0c7d07f92d449209fa2eeda9eb72e68f63"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "b3a771a721d228d3c6debbfbc15bb8fe447b8339", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=398d3eeca1f6cb84f91275826d66548c75e8fac0", "patch": "@@ -239,6 +239,16 @@ impl<T> Box<T> {\n     pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n     }\n+\n+    /// Converts a `Box<T>` into a `Box<[T]>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    #[unstable(feature = \"box_into_boxed_slice\", issue = \"71582\")]\n+    pub fn into_boxed_slice(boxed: Box<T>) -> Box<[T]> {\n+        // *mut T and *mut [T; 1] have the same size and alignment\n+        unsafe { Box::from_raw(Box::into_raw(boxed) as *mut [T; 1] as *mut [T]) }\n+    }\n }\n \n impl<T> Box<[T]> {"}, {"sha": "5f8a3fd9d6a5491a96f02cb49184b1793e4d3df7", "filename": "src/test/ui/box-into-boxed-slice-fail.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs?ref=398d3eeca1f6cb84f91275826d66548c75e8fac0", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+#![feature(box_into_boxed_slice)]\n+\n+use std::boxed::Box;\n+use std::fmt::Debug;\n+fn main() {\n+    let boxed_slice = Box::new([1,2,3]) as Box<[u8]>;\n+    let _ = Box::into_boxed_slice(boxed_slice);\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    //~^^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    let boxed_trait: Box<dyn Debug> = Box::new(5u8);\n+    let _ = Box::into_boxed_slice(boxed_trait);\n+    //~^ ERROR the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n+    //~^^ ERROR the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n+}"}, {"sha": "dfc4999958a5725602cbf1693362e51dd5f36199", "filename": "src/test/ui/box-into-boxed-slice-fail.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr?ref=398d3eeca1f6cb84f91275826d66548c75e8fac0", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:8:35\n+   |\n+LL |     let _ = Box::into_boxed_slice(boxed_slice);\n+   |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:8:13\n+   |\n+LL |     let _ = Box::into_boxed_slice(boxed_slice);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: slice and array elements must have `Sized` type\n+\n+error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:12:35\n+   |\n+LL |     let _ = Box::into_boxed_slice(boxed_trait);\n+   |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n+\n+error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:12:13\n+   |\n+LL |     let _ = Box::into_boxed_slice(boxed_trait);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: slice and array elements must have `Sized` type\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "61b3d91525347ae01075cf817f27bdc6ed32a3d5", "filename": "src/test/ui/box-into-boxed-slice.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398d3eeca1f6cb84f91275826d66548c75e8fac0/src%2Ftest%2Fui%2Fbox-into-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice.rs?ref=398d3eeca1f6cb84f91275826d66548c75e8fac0", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+#![feature(box_into_boxed_slice)]\n+\n+use std::boxed::Box;\n+fn main() {\n+    assert_eq!(Box::into_boxed_slice(Box::new(5u8)), Box::new([5u8]) as Box<[u8]>);\n+    assert_eq!(Box::into_boxed_slice(Box::new([25u8])), Box::new([[25u8]]) as Box<[[u8; 1]]>);\n+    let a: Box<[Box<[u8; 1]>]> = Box::into_boxed_slice(Box::new(Box::new([5u8])));\n+    let b: Box<[Box<[u8; 1]>]> = Box::new([Box::new([5u8])]);\n+    assert_eq!(a, b);\n+}"}]}