{"sha": "475f20c73db54517255416b66db2edb304e85729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NWYyMGM3M2RiNTQ1MTcyNTU0MTZiNjZkYjJlZGIzMDRlODU3Mjk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:24:00Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:28:49Z"}, "message": "Add Const kind to rustdoc\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "76bf82fde51dccd6fd167ca81d699e34a7485b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76bf82fde51dccd6fd167ca81d699e34a7485b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/475f20c73db54517255416b66db2edb304e85729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/475f20c73db54517255416b66db2edb304e85729", "html_url": "https://github.com/rust-lang/rust/commit/475f20c73db54517255416b66db2edb304e85729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/475f20c73db54517255416b66db2edb304e85729/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "html_url": "https://github.com/rust-lang/rust/commit/9a5f7b1eae10482d5d314c14db25f5abd6533bbe"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "8796cfa01e0ea282a5c39b113c3f7e7ef1ff9091", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=475f20c73db54517255416b66db2edb304e85729", "patch": "@@ -773,6 +773,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n+                GenericParamDefKind::Const { .. } => {}\n             }\n         }\n "}, {"sha": "b08646ec0042170f5483281840ed791e61550959", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=475f20c73db54517255416b66db2edb304e85729", "patch": "@@ -1253,6 +1253,15 @@ impl Clean<Lifetime> for hir::GenericParam {\n     }\n }\n \n+impl Clean<Constant> for hir::ConstArg {\n+    fn clean(&self, cx: &DocContext) -> Constant {\n+        Constant {\n+            type_: cx.tcx.type_of(cx.tcx.hir().body_owner_def_id(self.value.body)).clean(cx),\n+            expr: print_const_expr(cx, self.value.body),\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<Lifetime> for ty::GenericParamDef {\n     fn clean(&self, _cx: &DocContext) -> Lifetime {\n         Lifetime(self.name.to_string())\n@@ -1418,6 +1427,10 @@ pub enum GenericParamDefKind {\n         default: Option<Type>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n+    Const {\n+        did: DefId,\n+        ty: Type,\n+    },\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n@@ -1430,7 +1443,10 @@ pub struct GenericParamDef {\n impl GenericParamDef {\n     pub fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n-            GenericParamDefKind::Lifetime => false,\n+            GenericParamDefKind::Lifetime |\n+            GenericParamDefKind::Const { .. } => {\n+                false\n+            }\n             GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n         }\n     }\n@@ -1494,6 +1510,12 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                     synthetic: synthetic,\n                 })\n             }\n+            hir::GenericParamKind::Const { ref ty } => {\n+                (self.name.ident().name.clean(cx), GenericParamDefKind::Const {\n+                    did: cx.tcx.hir().local_def_id(self.id),\n+                    ty: ty.clean(cx),\n+                })\n+            }\n         };\n \n         GenericParamDef {\n@@ -1533,6 +1555,7 @@ impl Clean<Generics> for hir::Generics {\n                     GenericParamDefKind::Type { did, ref bounds, .. } => {\n                         cx.impl_trait_bounds.borrow_mut().insert(did, bounds.clone());\n                     }\n+                    GenericParamDefKind::Const { .. } => unreachable!(),\n                 }\n                 param\n             })\n@@ -1566,6 +1589,7 @@ impl Clean<Generics> for hir::Generics {\n                                         break\n                                     }\n                                 }\n+                                GenericParamDefKind::Const { .. } => {}\n                             }\n                         }\n                     }\n@@ -2544,6 +2568,7 @@ impl Clean<Type> for hir::Ty {\n                     let provided_params = &path.segments.last().expect(\"segments were empty\");\n                     let mut ty_substs = FxHashMap::default();\n                     let mut lt_substs = FxHashMap::default();\n+                    let mut const_substs = FxHashMap::default();\n                     provided_params.with_generic_args(|generic_args| {\n                         let mut indices: GenericParamCount = Default::default();\n                         for param in generics.params.iter() {\n@@ -2595,10 +2620,32 @@ impl Clean<Type> for hir::Ty {\n                                     }\n                                     indices.types += 1;\n                                 }\n+                                hir::GenericParamKind::Const { .. } => {\n+                                    let const_param_def =\n+                                        Def::ConstParam(cx.tcx.hir().local_def_id(param.id));\n+                                    let mut j = 0;\n+                                    let const_ = generic_args.args.iter().find_map(|arg| {\n+                                        match arg {\n+                                            hir::GenericArg::Const(ct) => {\n+                                                if indices.consts == j {\n+                                                    return Some(ct);\n+                                                }\n+                                                j += 1;\n+                                                None\n+                                            }\n+                                            _ => None,\n+                                        }\n+                                    });\n+                                    if let Some(ct) = const_.cloned() {\n+                                        const_substs.insert(const_param_def, ct.clean(cx));\n+                                    }\n+                                    // FIXME(const_generics:defaults)\n+                                    indices.consts += 1;\n+                                }\n                             }\n                         }\n                     });\n-                    return cx.enter_alias(ty_substs, lt_substs, || ty.clean(cx));\n+                    return cx.enter_alias(ty_substs, lt_substs, const_substs, || ty.clean(cx));\n                 }\n                 resolve_type(cx, path.clean(cx), self.id)\n             }\n@@ -3190,6 +3237,9 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n                     GenericArg::Type(ty) => {\n                         types.push(ty.clean(cx));\n                     }\n+                    GenericArg::Const(..) => {\n+                        unimplemented!() // FIXME(const_generics)\n+                    }\n                 }\n             }\n             GenericArgs::AngleBracketed {"}, {"sha": "5df82c7cc9e9a443dd993637a9db7be141727d5b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=475f20c73db54517255416b66db2edb304e85729", "patch": "@@ -65,6 +65,8 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table `NodeId` of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n+    /// Table node id of const parameter definition -> substituted const\n+    pub ct_substs: RefCell<FxHashMap<Def, clean::Constant>>,\n     /// Table DefId of `impl Trait` in argument position -> bounds\n     pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::GenericBound>>>,\n     pub send_trait: Option<DefId>,\n@@ -85,14 +87,18 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn enter_alias<F, R>(&self,\n                              ty_substs: FxHashMap<Def, clean::Type>,\n                              lt_substs: FxHashMap<DefId, clean::Lifetime>,\n+                             ct_substs: FxHashMap<Def, clean::Constant>,\n                              f: F) -> R\n     where F: FnOnce() -> R {\n-        let (old_tys, old_lts) =\n-            (mem::replace(&mut *self.ty_substs.borrow_mut(), ty_substs),\n-             mem::replace(&mut *self.lt_substs.borrow_mut(), lt_substs));\n+        let (old_tys, old_lts, old_cts) = (\n+            mem::replace(&mut *self.ty_substs.borrow_mut(), ty_substs),\n+            mem::replace(&mut *self.lt_substs.borrow_mut(), lt_substs),\n+            mem::replace(&mut *self.ct_substs.borrow_mut(), ct_substs),\n+        );\n         let r = f();\n         *self.ty_substs.borrow_mut() = old_tys;\n         *self.lt_substs.borrow_mut() = old_lts;\n+        *self.ct_substs.borrow_mut() = old_cts;\n         r\n     }\n \n@@ -527,6 +533,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 renderinfo: RefCell::new(renderinfo),\n                 ty_substs: Default::default(),\n                 lt_substs: Default::default(),\n+                ct_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n                 send_trait: send_trait,\n                 fake_def_ids: Default::default(),"}, {"sha": "4fbbaf0f2e183604b3a1befe88949d19f968ee13", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=475f20c73db54517255416b66db2edb304e85729", "patch": "@@ -138,6 +138,16 @@ impl fmt::Display for clean::GenericParamDef {\n \n                 Ok(())\n             }\n+            clean::GenericParamDefKind::Const { ref ty, .. } => {\n+                f.write_str(\"const \")?;\n+                f.write_str(&self.name)?;\n+\n+                if f.alternate() {\n+                    write!(f, \": {:#}\", ty)\n+                } else {\n+                    write!(f, \":&nbsp;{}\", ty)\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "bf0757902fe0eb55a75eeae24e4825931c2a18b0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475f20c73db54517255416b66db2edb304e85729/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=475f20c73db54517255416b66db2edb304e85729", "patch": "@@ -1746,7 +1746,8 @@ impl<'a> Cache {\n         for param in &generics.params {\n             match param.kind {\n                 clean::GenericParamDefKind::Lifetime => {}\n-                clean::GenericParamDefKind::Type { did, .. } => {\n+                clean::GenericParamDefKind::Type { did, .. } |\n+                clean::GenericParamDefKind::Const { did, .. } => {\n                     self.typarams.insert(did, param.name.clone());\n                 }\n             }"}]}