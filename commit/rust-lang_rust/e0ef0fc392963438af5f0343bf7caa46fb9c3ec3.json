{"sha": "e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWYwZmMzOTI5NjM0MzhhZjVmMDM0M2JmN2NhYTQ2ZmI5YzNlYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T12:24:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T12:24:34Z"}, "message": "Auto merge of #78779 - LeSeulArtichaut:ty-visitor-return, r=oli-obk\n\nIntroduce `TypeVisitor::BreakTy`\n\nImplements MCP rust-lang/compiler-team#383.\nr? `@ghost`\ncc `@lcnr` `@oli-obk`\n\n~~Blocked on FCP in rust-lang/compiler-team#383.~~", "tree": {"sha": "09c055c1bb788117e9859f716726fb8d00314029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c055c1bb788117e9859f716726fb8d00314029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "html_url": "https://github.com/rust-lang/rust/commit/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcb3b39203a0d54269ca274601b8f73207fe10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcb3b39203a0d54269ca274601b8f73207fe10d", "html_url": "https://github.com/rust-lang/rust/commit/efcb3b39203a0d54269ca274601b8f73207fe10d"}, {"sha": "f6e6a15f076360e70b6dafa3414d62374c372ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e6a15f076360e70b6dafa3414d62374c372ad7", "html_url": "https://github.com/rust-lang/rust/commit/f6e6a15f076360e70b6dafa3414d62374c372ad7"}], "stats": {"total": 445, "additions": 232, "deletions": 213}, "files": [{"sha": "183fb314a00da7f21aeea36067125599004baf50", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n-            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:"}, {"sha": "5264854d8ebc814156172e02ab12ecc9ef70281c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n struct TraitObjectVisitor(Vec<DefId>);\n \n impl TypeVisitor<'_> for TraitObjectVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, RegionKind::ReStatic) => {\n                 if let Some(def_id) = preds.principal_def_id() {"}, {"sha": "6affe0e5463df2dfd7d5555bee5820e01ed4b030", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -1,5 +1,3 @@\n-//! See the Book for more information.\n-\n pub use self::freshen::TypeFreshener;\n pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n@@ -1334,9 +1332,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut r = resolve::UnresolvedTypeFinder::new(self);\n-        value.visit_with(&mut r);\n-        r.first_unresolved\n+        value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()\n     }\n \n     pub fn probe_const_var("}, {"sha": "0b2847658f71e15bc3f215129345354af1e0c3b8", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -741,15 +741,18 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.target_index.shift_in(1);\n         t.super_visit_with(self);\n         self.target_index.shift_out(1);\n \n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n \n         match r {"}, {"sha": "d72be0134fb4cd6d2fd757fc7146e0b08506e3a1", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -111,19 +111,17 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n /// involve some hashing and so forth).\n pub struct UnresolvedTypeFinder<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-\n-    /// Used to find the type parameter name and location for error reporting.\n-    pub first_unresolved: Option<(Ty<'tcx>, Option<Span>)>,\n }\n \n impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n-        UnresolvedTypeFinder { infcx, first_unresolved: None }\n+        UnresolvedTypeFinder { infcx }\n     }\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    type BreakTy = (Ty<'tcx>, Option<Span>);\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {\n             if let ty::Infer(infer_ty) = *t.kind() {\n@@ -144,8 +142,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n                 } else {\n                     None\n                 };\n-                self.first_unresolved = Some((t, ty_var_span));\n-                ControlFlow::BREAK\n+                ControlFlow::Break((t, ty_var_span))\n             } else {\n                 // Otherwise, visit its contents.\n                 t.super_visit_with(self)"}, {"sha": "c4a2ecee096eb1395a8d50fb206f3a5162156f42", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -69,7 +69,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)\n     }\n }"}, {"sha": "38c71e6e9258973a3b05ac33278f74ae13bb3c3d", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -1131,16 +1131,14 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n-            ty: Option<Ty<'tcx>>,\n         };\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+            type BreakTy = Ty<'tcx>;\n+\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match ty.kind() {\n-                    ty::Opaque(..) => {\n-                        self.ty = Some(ty);\n-                        ControlFlow::BREAK\n-                    }\n+                    ty::Opaque(..) => ControlFlow::Break(ty),\n                     // Consider opaque types within projections FFI-safe if they do not normalize\n                     // to more opaque types.\n                     ty::Projection(..) => {\n@@ -1159,9 +1157,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let mut visitor = ProhibitOpaqueTypes { cx: self.cx, ty: None };\n-        ty.visit_with(&mut visitor);\n-        if let Some(ty) = visitor.ty {\n+        if let Some(ty) = ty.visit_with(&mut ProhibitOpaqueTypes { cx: self.cx }).break_value() {\n             self.emit_ffi_unsafe_type_lint(ty, sp, \"opaque types have no C equivalent\", None);\n             true\n         } else {"}, {"sha": "082af087bf49fd720236862aa438776024495b49", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -35,7 +35,7 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             fn super_visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n                 &self,\n                 __folder: &mut __F\n-            ) -> ::std::ops::ControlFlow<()> {\n+            ) -> ::std::ops::ControlFlow<__F::BreakTy> {\n                 match *self { #body_visit }\n                 ::std::ops::ControlFlow::CONTINUE\n             }"}, {"sha": "cdc5940d9baedc878b8d576e5eded5134892706d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -51,6 +51,7 @@\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n+#![feature(associated_type_defaults)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "c0f2a76c19d6e93021fc68ce50469f1e8bdc743f", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -62,7 +62,7 @@ macro_rules! TrivialTypeFoldableImpls {\n                 fn super_visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n-                    -> ::std::ops::ControlFlow<()>\n+                    -> ::std::ops::ControlFlow<F::BreakTy>\n                 {\n                     ::std::ops::ControlFlow::CONTINUE\n                 }\n@@ -105,7 +105,7 @@ macro_rules! EnumTypeFoldableImpl {\n             fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<()> {\n+            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n                 EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }"}, {"sha": "9289d4708de1e07fd5c21e54f9d3ea036095c803", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -2464,7 +2464,10 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut Vs,\n+    ) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "da8e189ba9d403845734e13e496efcf9e8049f5a", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         Terminator { source_info: self.source_info, kind }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n@@ -144,7 +144,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n         self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -154,7 +154,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n         Place { local: self.local.fold_with(folder), projection: self.projection.fold_with(folder) }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.local.visit_with(visitor)?;\n         self.projection.visit_with(visitor)\n     }\n@@ -165,7 +165,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -211,7 +211,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n@@ -266,7 +266,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n             Operand::Constant(ref c) => c.visit_with(visitor),\n@@ -290,7 +290,10 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut Vs,\n+    ) -> ControlFlow<Vs::BreakTy> {\n         use crate::mir::ProjectionElem::*;\n \n         match self {\n@@ -305,7 +308,7 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Self {\n         self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -314,7 +317,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Self {\n         self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -323,7 +326,7 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Self {\n         self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -336,7 +339,7 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.fold_with(folder),\n         }\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "1883c89a15193d70e6b7f953c7fec9d4d5f14a71", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 64, "deletions": 46, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -49,8 +49,8 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_fold_with(folder)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()>;\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.super_visit_with(visitor)\n     }\n \n@@ -73,7 +73,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags }).is_break()\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -142,26 +142,13 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn still_further_specializable(&self) -> bool {\n         self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n     }\n-\n-    /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n-    fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> ControlFlow<()>) -> ControlFlow<()> {\n-        pub struct Visitor<F>(F);\n-\n-        impl<'tcx, F: FnMut(Ty<'tcx>) -> ControlFlow<()>> TypeVisitor<'tcx> for Visitor<F> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n-                self.0(ty)\n-            }\n-        }\n-\n-        self.visit_with(&mut Visitor(visit))\n-    }\n }\n \n impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Self {\n         self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -195,23 +182,25 @@ pub trait TypeFolder<'tcx>: Sized {\n }\n \n pub trait TypeVisitor<'tcx>: Sized {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    type BreakTy = !;\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n }\n@@ -329,14 +318,19 @@ impl<'tcx> TyCtxt<'tcx> {\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n-            fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+            type BreakTy = ();\n+\n+            fn visit_binder<T: TypeFoldable<'tcx>>(\n+                &mut self,\n+                t: &Binder<T>,\n+            ) -> ControlFlow<Self::BreakTy> {\n                 self.outer_index.shift_in(1);\n                 let result = t.as_ref().skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n \n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n                         ControlFlow::CONTINUE\n@@ -351,7 +345,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n             }\n \n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 // We're only interested in types involving regions\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n@@ -809,6 +803,9 @@ where\n     value.fold_with(&mut Shifter::new(tcx, amount))\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundEscapingVars;\n+\n /// An \"escaping var\" is a bound var whose binder is not part of `t`. A bound var can be a\n /// bound region or a bound type.\n ///\n@@ -840,93 +837,114 @@ struct HasEscapingVarsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    type BreakTy = FoundEscapingVars;\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the outer-exclusive-binder is *strictly greater* than\n         // `outer_index`, that means that `t` contains some content\n         // bound at `outer_index` or above (because\n         // `outer_exclusive_binder` is always 1 higher than the\n         // content in `t`). Therefore, `t` has some escaping vars.\n         if t.outer_exclusive_binder > self.outer_index {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the region is bound by `outer_index` or anything outside\n         // of outer index, then it escapes the binders we have\n         // visited.\n         if r.bound_at_or_above_binder(self.outer_index) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // we don't have a `visit_infer_const` callback, so we have to\n         // hook in here to catch this case (annoying...), but\n         // otherwise we do want to remember to visit the rest of the\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n         match ct.val {\n-            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => ControlFlow::BREAK,\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n+                ControlFlow::Break(FoundEscapingVars)\n+            }\n             _ => ct.super_visit_with(self),\n         }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if predicate.inner.outer_exclusive_binder > self.outer_index {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundFlags;\n+\n // FIXME: Optimize for checking for infer flags\n struct HasTypeFlagsVisitor {\n     flags: ty::TypeFlags,\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n+    type BreakTy = FoundFlags;\n+\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n             t,\n             t.flags(),\n             self.flags\n         );\n-        if t.flags().intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if t.flags().intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n-        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n-        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n             predicate, predicate.inner.flags, self.flags\n         );\n         if predicate.inner.flags.intersects(self.flags) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundFlags)\n         } else {\n             ControlFlow::CONTINUE\n         }\n@@ -960,14 +978,14 @@ impl LateBoundRegionsCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.current_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n@@ -980,7 +998,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n@@ -993,7 +1011,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {\n                 self.regions.insert(br);"}, {"sha": "6a67935cd98fe40468dcb43dd8959ae43f90d1d9", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -1849,7 +1849,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         ParamEnv::new(self.caller_bounds().fold_with(folder), self.reveal().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)\n     }"}, {"sha": "38f8e779f6a92e768fa6ed4c4fa28c81068b27c4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -1796,7 +1796,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     {\n         struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let ty::ReLateBound(_, ty::BrNamed(_, name)) = *r {\n                     self.0.insert(name);\n                 }"}, {"sha": "94e69a93a6b18a17519dfe36e2ddd1d5b2d1dc81", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -729,7 +729,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n         self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -739,7 +739,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n@@ -752,7 +752,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n         (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n@@ -779,7 +779,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n         Rc::new((*self).clone().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -790,7 +790,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n         Arc::new((*self).clone().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -800,7 +800,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n         self.map_id(|value| value.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -810,7 +810,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n         self.map_id(|t| t.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -820,7 +820,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n         self.map_id(|t| t.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -834,11 +834,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n         folder.fold_binder(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n }\n@@ -848,7 +848,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -858,7 +858,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -868,7 +868,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -894,7 +894,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n         match self.def {\n@@ -920,7 +920,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n         Self { instance: self.instance.fold_with(folder), promoted: self.promoted }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.instance.visit_with(visitor)\n     }\n }\n@@ -969,7 +969,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         folder.fold_ty(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n             ty::Array(typ, sz) => {\n@@ -1011,7 +1011,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self)\n     }\n }\n@@ -1025,11 +1025,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n         folder.fold_region(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n }\n@@ -1040,11 +1040,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         folder.tcx().reuse_or_mk_predicate(self, new)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ty::PredicateKind::super_visit_with(&self.inner.kind, visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n \n@@ -1062,7 +1062,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -1072,7 +1072,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n         self.map_id(|x| x.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -1092,12 +1092,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         folder.fold_const(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty.visit_with(visitor)?;\n         self.val.visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(self)\n     }\n }\n@@ -1117,7 +1117,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n@@ -1135,7 +1135,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }"}, {"sha": "5d1b976ae973d207807be4ce26ba53d167f7c05f", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -392,7 +392,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }"}, {"sha": "e49b1c9f64d44ef3f06480a59f5149fcff71af81", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -18,7 +18,9 @@ where\n     };\n \n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        type BreakTy = ();\n+\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !c.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }\n@@ -29,7 +31,7 @@ where\n             }\n         }\n \n-        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !ty.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }"}, {"sha": "0ce1c5a04893bcfa46156f0cfbf93456ab86d77a", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -318,7 +318,9 @@ struct HasUsedGenericParams<'a> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+    type BreakTy = ();\n+\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -336,7 +338,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;"}, {"sha": "cd60602b088f26d338440cf7a1f5d27c5df9cfd6", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -640,7 +640,7 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));\n             }"}, {"sha": "4a0d356d3377ba04eeb2ba8b13886c51ec547b52", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -4,6 +4,7 @@\n #![feature(or_patterns)]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n+#![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n \n use rustc_attr as attr;\n@@ -44,6 +45,8 @@ use std::{cmp, fmt, mem};\n /// manually. Second, it doesn't visit some type components like signatures of fn types, or traits\n /// in `impl Trait`, see individual comments in `DefIdVisitorSkeleton::visit_ty`.\n trait DefIdVisitor<'tcx> {\n+    type BreakTy = ();\n+\n     fn tcx(&self) -> TyCtxt<'tcx>;\n     fn shallow(&self) -> bool {\n         false\n@@ -56,7 +59,7 @@ trait DefIdVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()>;\n+    ) -> ControlFlow<Self::BreakTy>;\n \n     /// Not overridden, but used to actually visit types and traits.\n     fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {\n@@ -66,13 +69,16 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<()> {\n+    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicates(\n+        &mut self,\n+        predicates: ty::GenericPredicates<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -87,13 +93,13 @@ impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {\n         let TraitRef { def_id, substs } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n         if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {\n         match predicate.skip_binders() {\n             ty::PredicateAtom::Trait(ty::TraitPredicate { trait_ref }, _) => {\n                 self.visit_trait(trait_ref)\n@@ -119,7 +125,10 @@ where\n         }\n     }\n \n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicates(\n+        &mut self,\n+        predicates: ty::GenericPredicates<'tcx>,\n+    ) -> ControlFlow<V::BreakTy> {\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))\n     }\n@@ -129,7 +138,9 @@ impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    type BreakTy = V::BreakTy;\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n         // InternalSubsts are not visited here because they are visited below in `super_visit_with`.\n         match *ty.kind() {\n@@ -283,7 +294,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.min = VL::new_min(self, def_id);\n         ControlFlow::CONTINUE\n     }\n@@ -902,7 +913,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if let Some(def_id) = def_id.as_local() {\n             if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =\n                 (self.tcx().visibility(def_id.to_def_id()), self.access_level)\n@@ -1299,7 +1310,7 @@ impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {\n@@ -1799,7 +1810,7 @@ impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {"}, {"sha": "ca547bf88b588187d1fd0682517d4da214394d1f", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -692,12 +692,15 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         t.as_ref().skip_binder().visit_with(self);\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             // ignore bound regions, keep visiting\n             ty::ReLateBound(_, _) => ControlFlow::CONTINUE,\n@@ -708,7 +711,7 @@ where\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // We're only interested in types involving regions\n         if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n             return ControlFlow::CONTINUE;"}, {"sha": "fdb2361ba0360fa89c81176b5aea12af93ba3bf9", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -78,7 +78,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const(tcx, ct, |node| match node {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n@@ -574,19 +574,19 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n     // on `ErrorReported`.\n }\n \n-pub fn walk_abstract_const<'tcx, F>(\n+pub fn walk_abstract_const<'tcx, R, F>(\n     tcx: TyCtxt<'tcx>,\n     ct: AbstractConst<'tcx>,\n     mut f: F,\n-) -> ControlFlow<()>\n+) -> ControlFlow<R>\n where\n-    F: FnMut(Node<'tcx>) -> ControlFlow<()>,\n+    F: FnMut(Node<'tcx>) -> ControlFlow<R>,\n {\n-    fn recurse<'tcx>(\n+    fn recurse<'tcx, R>(\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n-        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<()>,\n-    ) -> ControlFlow<()> {\n+        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<R>,\n+    ) -> ControlFlow<R> {\n         let root = ct.root();\n         f(root)?;\n         match root {"}, {"sha": "d912a00d6b702c9a19f2416c3fbef7cfe55d1b8c", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -771,7 +771,9 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+        type BreakTy = ();\n+\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Param(_) => {\n                     if t == self.tcx.types.self_param {\n@@ -812,7 +814,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // First check if the type of this constant references `Self`.\n             self.visit_ty(ct.ty)?;\n \n@@ -844,7 +846,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::PredicateAtom::ConstEvaluatable(def, substs) = pred.skip_binders() {\n                 // FIXME(const_evaluatable_checked): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to"}, {"sha": "3d20a8d5cf336be07e4efca3b70ace80d7806f52", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -55,9 +55,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n     // FIXME: we should instead pass in an `infcx` from the outside.\n     tcx.infer_ctxt().enter(|infcx| {\n-        let mut search = Search { infcx, span, found: None, seen: FxHashSet::default() };\n-        ty.visit_with(&mut search);\n-        search.found\n+        ty.visit_with(&mut Search { infcx, span, seen: FxHashSet::default() }).break_value()\n     })\n }\n \n@@ -116,9 +114,6 @@ struct Search<'a, 'tcx> {\n \n     infcx: InferCtxt<'a, 'tcx>,\n \n-    /// Records first ADT that does not implement a structural-match trait.\n-    found: Option<NonStructuralMatchTy<'tcx>>,\n-\n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n@@ -135,38 +130,33 @@ impl Search<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    type BreakTy = NonStructuralMatchTy<'tcx>;\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"Search visiting ty: {:?}\", ty);\n \n         let (adt_def, substs) = match *ty.kind() {\n             ty::Adt(adt_def, substs) => (adt_def, substs),\n             ty::Param(_) => {\n-                self.found = Some(NonStructuralMatchTy::Param);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Param);\n             }\n             ty::Dynamic(..) => {\n-                self.found = Some(NonStructuralMatchTy::Dynamic);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Dynamic);\n             }\n             ty::Foreign(_) => {\n-                self.found = Some(NonStructuralMatchTy::Foreign);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Foreign);\n             }\n             ty::Opaque(..) => {\n-                self.found = Some(NonStructuralMatchTy::Opaque);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Opaque);\n             }\n             ty::Projection(..) => {\n-                self.found = Some(NonStructuralMatchTy::Projection);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Projection);\n             }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                self.found = Some(NonStructuralMatchTy::Generator);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Generator);\n             }\n             ty::Closure(..) => {\n-                self.found = Some(NonStructuralMatchTy::Closure);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n@@ -206,8 +196,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n                 // First check all contained types and then tell the caller to continue searching.\n-                ty.super_visit_with(self);\n-                return ControlFlow::CONTINUE;\n+                return ty.super_visit_with(self);\n             }\n             ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n@@ -227,8 +216,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         if !self.type_marked_structural(ty) {\n             debug!(\"Search found ty: {:?}\", ty);\n-            self.found = Some(NonStructuralMatchTy::Adt(&adt_def));\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(NonStructuralMatchTy::Adt(&adt_def));\n         }\n \n         // structural-match does not care about the\n@@ -244,20 +232,11 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         // even though we skip super_visit_with, we must recur on\n         // fields of ADT.\n         let tcx = self.tcx();\n-        for field_ty in adt_def.all_fields().map(|field| field.ty(tcx, substs)) {\n+        adt_def.all_fields().map(|field| field.ty(tcx, substs)).try_for_each(|field_ty| {\n             let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n-\n-            if ty.visit_with(self).is_break() {\n-                // found an ADT without structural-match; halt visiting!\n-                assert!(self.found.is_some());\n-                return ControlFlow::BREAK;\n-            }\n-        }\n-\n-        // Even though we do not want to recur on substs, we do\n-        // want our caller to continue its own search.\n-        ControlFlow::CONTINUE\n+            ty.visit_with(self)\n+        })\n     }\n }\n "}, {"sha": "9afb980f84d27416cf9b0463af479de954f68475", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -859,14 +859,14 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.binder_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.binder_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 match self.parameters.entry(bound_ty.var.as_u32()) {\n@@ -886,7 +886,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br {\n                 ty::BoundRegion::BrNamed(def_id, _name) => {\n@@ -1076,7 +1076,7 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n                 self.next_ty_placeholder = self.next_ty_placeholder.max(p.name.as_usize() + 1);\n@@ -1088,7 +1088,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n                 if let ty::BoundRegion::BrAnon(anon) = p.name {"}, {"sha": "1220c313932bf0c45bfaa7da06e62eb2645c2b64", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -446,24 +446,24 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n-        ty: Option<Ty<'tcx>>,\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+        type BreakTy = Option<Ty<'tcx>>;\n+\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t != self.opaque_identity_ty && t.super_visit_with(self).is_break() {\n-                self.ty = Some(t);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(Some(t));\n             }\n             ControlFlow::CONTINUE\n         }\n \n-        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n                 if *index < self.generics.parent_count as u32 {\n-                    return ControlFlow::BREAK;\n+                    return ControlFlow::Break(None);\n                 } else {\n                     return ControlFlow::CONTINUE;\n                 }\n@@ -472,7 +472,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             r.super_visit_with(self)\n         }\n \n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Unevaluated(..) = c.val {\n                 // FIXME(#72219) We currenctly don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n@@ -494,18 +494,17 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n             ),\n             generics: tcx.generics_of(def_id),\n-            ty: None,\n         };\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n-            .any(|(predicate, _)| predicate.visit_with(&mut visitor).is_break());\n+            .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n         debug!(\n             \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n             prohibit_opaque, visitor\n         );\n \n-        if prohibit_opaque {\n+        if let Some(ty) = prohibit_opaque.break_value() {\n             let is_async = match item.kind {\n                 ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n                     hir::OpaqueTyOrigin::AsyncFn => true,\n@@ -525,7 +524,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n \n             if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n                 if snippet == \"Self\" {\n-                    if let Some(ty) = visitor.ty {\n+                    if let Some(ty) = ty {\n                         err.span_suggestion(\n                             span,\n                             \"consider spelling out the type instead\",\n@@ -1455,7 +1454,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n             {\n                 struct VisitTypes(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n-                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {\n                                 self.0.push(def);"}, {"sha": "854bc70108f691f11f347e7f4443588963a146aa", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -983,7 +983,7 @@ fn suggest_constraining_param(\n struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Param(_) = ty.kind() {\n             self.0.push(ty);\n         }"}, {"sha": "5dffe5107b58123ddd29741ae6c8c8a072d497aa", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -800,18 +800,20 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 params: FxHashSet<u32>,\n             }\n             impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n-                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+                type BreakTy = ();\n+\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Param(param) = t.kind() {\n                         self.params.insert(param.index);\n                     }\n                     t.super_visit_with(self)\n                 }\n \n-                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<()> {\n+                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     ControlFlow::BREAK\n                 }\n \n-                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::ConstKind::Param(param) = c.val {\n                         self.params.insert(param.index);\n                     }"}, {"sha": "dee0e6c2ebbefa4102ec6c7aa43ed4d800e4281b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -2062,7 +2062,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n             }\n \n             impl<'a, 'tcx> TypeVisitor<'tcx> for TyAliasVisitor<'a, 'tcx> {\n-                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n                         self.preds.insert((\n                             ty::PredicateAtom::ConstEvaluatable(def, substs).to_predicate(self.tcx),"}, {"sha": "e389fd4d9f00f87afa58b0ef598587401d841ef8", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -57,7 +57,7 @@ struct ParameterCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Projection(..) | ty::Opaque(..) if !self.include_nonconstraining => {\n                 // projections are not injective\n@@ -72,14 +72,14 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::ReEarlyBound(data) = *r {\n             self.parameters.push(Parameter::from(data));\n         }\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match c.val {\n             ty::ConstKind::Unevaluated(..) if !self.include_nonconstraining => {\n                 // Constant expressions are not injective"}, {"sha": "602facbe062ac31ccfa4fa27d80def21317dd39a", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "patch": "@@ -563,7 +563,9 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n struct ContainsRegion;\n \n impl TypeVisitor<'_> for ContainsRegion {\n-    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<()> {\n+    type BreakTy = ();\n+\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}]}