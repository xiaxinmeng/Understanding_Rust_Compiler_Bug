{"sha": "f9c1acbc452e75123b0a481aa955d508972aa5f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzFhY2JjNDUyZTc1MTIzYjBhNDgxYWE5NTVkNTA4OTcyYWE1ZjE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-24T09:57:34Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-24T13:29:31Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/71215/", "tree": {"sha": "9015a5c6d07d4200ca25554a4556b2ebe3bd0f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9015a5c6d07d4200ca25554a4556b2ebe3bd0f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c1acbc452e75123b0a481aa955d508972aa5f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6i6cEACgkQLO/Nsn7Q\nvnkpfA/+PKyBPq/LBC7wAQ8eOLTV5WXeXNUVC2BFHtolLGCt/NXG24sDcZNju8dh\nJa3srmFMj7XX/zD8nM+VZhzaGjRA3jdfn17pPBnYaG4VXhPBjFIx+b6emoyBGJ0o\nQxdDZ5UCxeX29sWBnwp2FURmPVhRURy3ef44739uv5oJxRnZQznseQpBVp6Qcrtr\n4DPmJTYC9PQ82Vxeu+z7NZF7p/GGi5c7LvtReIabSg3JPkbepu1AMUn44KLX7+V9\nvRgHB89hCa/H7Xmy0JRJNcHDRvBrDsaWdMW4tueRLbbEC2EfABbL+fDV6tw+L56q\nCDjX91+ptduuX8AUu9XAteOLz29BeqszqkGET6UMEf51buzTPkCipNMrRIE/82IU\n8OXfffDtlT+cg2m2CFrWujmmmqu1P3N09tek/2IRMKqouWNXhbAPsh3K1vLl1Sy0\nW6LK4UVfh5ERTAfKnzWfuqTr+fD8qmrihwroNIRZMkFNKaPgo8wduGVwpDHToQyd\nteqe0OWJA58PDoceRa6kHm8K7mNTJVRMiUX6MYcvIGVVOXmDYLO6L/l5SFg98kXa\n8qT2y83ujiHZHLmomYeLBBU47sReqiPkyqqeBWXOwuzFsfKgMdh8cKoiUSAG2QXZ\nLRSFB+8bM8tQ9YteePWcV4YRDR5Nm3untHZjAiQhYIHF7heXx7E=\n=EEHx\n-----END PGP SIGNATURE-----", "payload": "tree 9015a5c6d07d4200ca25554a4556b2ebe3bd0f62\nparent 02c94352d4bbb055dce656da21d86aa1bf672562\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1587722254 +0200\ncommitter flip1995 <hello@philkrones.com> 1587734971 +0200\n\nrustup https://github.com/rust-lang/rust/pull/71215/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1acbc452e75123b0a481aa955d508972aa5f1", "html_url": "https://github.com/rust-lang/rust/commit/f9c1acbc452e75123b0a481aa955d508972aa5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1acbc452e75123b0a481aa955d508972aa5f1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c94352d4bbb055dce656da21d86aa1bf672562", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c94352d4bbb055dce656da21d86aa1bf672562", "html_url": "https://github.com/rust-lang/rust/commit/02c94352d4bbb055dce656da21d86aa1bf672562"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "3ba72e84fa827a7dace8698873b845b815fe1ae6", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n         hir_id: HirId,\n     ) {\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n-        if !cx.tcx.has_attr(def_id, sym!(test)) {\n+        if !cx.tcx.has_attr(def_id.to_def_id(), sym!(test)) {\n             self.check(cx, kind, decl, body, span);\n         }\n     }"}, {"sha": "3cbb8fa72f74f70f9cb9fcb6b8e25996a8d58814", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -160,16 +160,20 @@ fn check_hash_peq<'a, 'tcx>(\n                     };\n \n                     span_lint_and_then(\n-                        cx, DERIVE_HASH_XOR_EQ, span,\n+                        cx,\n+                        DERIVE_HASH_XOR_EQ,\n+                        span,\n                         mess,\n                         |diag| {\n-                        if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(impl_id) {\n-                            diag.span_note(\n-                                cx.tcx.hir().span(hir_id),\n-                                \"`PartialEq` implemented here\"\n-                            );\n+                            if let Some(local_def_id) = impl_id.as_local() {\n+                                let hir_id = cx.tcx.hir().as_local_hir_id(local_def_id);\n+                                diag.span_note(\n+                                    cx.tcx.hir().span(hir_id),\n+                                    \"`PartialEq` implemented here\"\n+                                );\n+                            }\n                         }\n-                    });\n+                    );\n                 }\n             });\n         }\n@@ -225,7 +229,7 @@ fn check_unsafe_derive_deserialize<'a, 'tcx>(\n     ty: Ty<'tcx>,\n ) {\n     fn item_from_def_id<'tcx>(cx: &LateContext<'_, 'tcx>, def_id: DefId) -> &'tcx Item<'tcx> {\n-        let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n+        let hir_id = cx.tcx.hir().as_local_hir_id(def_id.expect_local());\n         cx.tcx.hir().expect_item(hir_id)\n     }\n "}, {"sha": "8d1e91f9adbd61f5aa97e0f896832c099e3d63b0", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n-                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id))\n+                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));"}, {"sha": "6907e021a00b8261847c455ee842db4c4f59b231", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n+            ExprUseVisitor::new(&mut v, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables).consume_body(body);\n         });\n \n         for node in v.set {"}, {"sha": "621d56185a9dd4fac7ebb73a33f5a359d8959d49", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Exit {\n                     // If the next item up is a function we check if it is an entry point\n                     // and only then emit a linter warning\n                     let def_id = cx.tcx.hir().local_def_id(parent);\n-                    if !is_entrypoint_fn(cx, def_id) {\n+                    if !is_entrypoint_fn(cx, def_id.to_def_id()) {\n                         span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n                     }\n                 }"}, {"sha": "1d86ca9696f2bb778431b9dfdec0736a4df2f1d5", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -143,7 +143,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n     if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id(visited_trait.hir_id);\n-        fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n+        fill_trait_set(visited_trait_def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()"}, {"sha": "4301157e16440ccbea1f95732b57d81335514ca5", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -83,12 +83,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     ) {\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n \n-        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id) {\n+        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id.to_def_id()) {\n             return;\n         }\n \n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n-        if fn_has_unsatisfiable_preds(cx, def_id) {\n+        if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;\n         }\n \n@@ -118,8 +118,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id, &mir) {\n-            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id.to_def_id(), &mir) {\n+            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {"}, {"sha": "5300fd2215b391a7c2c40a52e30d34484893de12", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if cx.tcx.hir().as_local_hir_id(trait_def_id).is_some() && !cx.access_levels.is_exported(impl_item.hir_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "28650c88b4800b8516fde049c8d83510289ef7f7", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -135,7 +135,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::default();\n             cx.tcx.infer_ctxt().enter(|infcx| {\n-                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n+                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables)\n+                    .consume_body(body);\n             });\n             ctx\n         };"}, {"sha": "a599667b8d8a8a9f7214c0774f24b3658abe817d", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -136,8 +136,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                         let mut impls = HirIdSet::default();\n                                         cx.tcx.for_each_impl(default_trait_id, |d| {\n                                             if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n-                                                if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(ty_def.did) {\n-                                                    impls.insert(hir_id);\n+                                                if let Some(local_def_id) = ty_def.did.as_local() {\n+                                                    impls.insert(cx.tcx.hir().as_local_hir_id(local_def_id));\n                                                 }\n                                             }\n                                         });"}, {"sha": "7e8c61ba24a22a5c5aa0d812f75b080ec0b50830", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1acbc452e75123b0a481aa955d508972aa5f1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=f9c1acbc452e75123b0a481aa955d508972aa5f1", "patch": "@@ -378,7 +378,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         },\n         hir::ItemKind::Trait(..) => {\n             println!(\"trait decl\");\n-            if cx.tcx.trait_is_auto(did) {\n+            if cx.tcx.trait_is_auto(did.to_def_id()) {\n                 println!(\"trait is auto\");\n             } else {\n                 println!(\"trait is not auto\");"}]}