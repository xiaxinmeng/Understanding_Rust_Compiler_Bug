{"sha": "6689d2df08af58fb876126ad47bb279f3b789dfc", "node_id": "C_kwDOAAsO6NoAKDY2ODlkMmRmMDhhZjU4ZmI4NzYxMjZhZDQ3YmIyNzlmM2I3ODlkZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-25T21:15:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-25T21:15:00Z"}, "message": "Rollup merge of #105955 - Nilstrieb:no-trivial-opt-wrappers-we-have-field-accesses-for-that, r=cjgillot\n\nRemove wrapper functions for some unstable options\n\nThey are trivial and just forward to the option. Like most other options, we can just access it directly.", "tree": {"sha": "d5ad650fb98b52ea2ec6c2e4a3c12ccee8181a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ad650fb98b52ea2ec6c2e4a3c12ccee8181a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6689d2df08af58fb876126ad47bb279f3b789dfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjqL1UCRBK7hj4Ov3rIwAApXgIAESZJclbegdxxJrIrewNUPCm\nuIKQnVCmDq6lGIdnVppV8PZFvmvUeTGOsG6FPEjzkIkfs4YzRYBeXOgHnebIxzwC\n/KgvegpxrATce3xVQyBBHYyYmJy7U/6DUHMf3MyEnOj3vHq7QwZnpxYbbJq8smZq\nbtAVe7hDLlhtRljUbI/qlySAbA5I7/YyQABsyew6zGIpjc+gflRwu5DjC6G7P4UD\npRXwon468tvu/BULz63sIbC0ozXWfI9llZ0ZegCOuuQ/mdakF4yAbvxEM391hbnG\naK9l7Icwopw8uRAdnI/0bnewItV9hjp3qAEj/XGry0OGSsxqaXL2VmNIAtY5SKg=\n=oFoj\n-----END PGP SIGNATURE-----\n", "payload": "tree d5ad650fb98b52ea2ec6c2e4a3c12ccee8181a77\nparent 44065e4184de61d9d3b46ae53bcdbc5e8674ed6f\nparent fb79e44df6310ab449cee6ef82d7672b7e43d4e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672002900 +0100\ncommitter GitHub <noreply@github.com> 1672002900 +0100\n\nRollup merge of #105955 - Nilstrieb:no-trivial-opt-wrappers-we-have-field-accesses-for-that, r=cjgillot\n\nRemove wrapper functions for some unstable options\n\nThey are trivial and just forward to the option. Like most other options, we can just access it directly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6689d2df08af58fb876126ad47bb279f3b789dfc", "html_url": "https://github.com/rust-lang/rust/commit/6689d2df08af58fb876126ad47bb279f3b789dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6689d2df08af58fb876126ad47bb279f3b789dfc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44065e4184de61d9d3b46ae53bcdbc5e8674ed6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/44065e4184de61d9d3b46ae53bcdbc5e8674ed6f", "html_url": "https://github.com/rust-lang/rust/commit/44065e4184de61d9d3b46ae53bcdbc5e8674ed6f"}, {"sha": "fb79e44df6310ab449cee6ef82d7672b7e43d4e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb79e44df6310ab449cee6ef82d7672b7e43d4e8", "html_url": "https://github.com/rust-lang/rust/commit/fb79e44df6310ab449cee6ef82d7672b7e43d4e8"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "95baa95b02183601ff022eaac84e1f3b9622ae07", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -102,10 +102,10 @@ pub fn uwtable_attr(llcx: &llvm::Context) -> &Attribute {\n \n pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n     let mut fp = cx.sess().target.frame_pointer;\n+    let opts = &cx.sess().opts;\n     // \"mcount\" function relies on stack pointer.\n     // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>.\n-    if cx.sess().instrument_mcount() || matches!(cx.sess().opts.cg.force_frame_pointers, Some(true))\n-    {\n+    if opts.unstable_opts.instrument_mcount || matches!(opts.cg.force_frame_pointers, Some(true)) {\n         fp = FramePointer::Always;\n     }\n     let attr_value = match fp {\n@@ -119,7 +119,7 @@ pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attr\n /// Tell LLVM what instrument function to insert.\n #[inline]\n fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n-    if cx.sess().instrument_mcount() {\n+    if cx.sess().opts.unstable_opts.instrument_mcount {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n "}, {"sha": "e23c88b62c14b4bb92ff0be5078120a0e16ecc79", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -203,7 +203,7 @@ pub fn target_machine_factory(\n         sess.opts.unstable_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);\n     let emit_stack_size_section = sess.opts.unstable_opts.emit_stack_sizes;\n \n-    let asm_comments = sess.asm_comments();\n+    let asm_comments = sess.opts.unstable_opts.asm_comments;\n     let relax_elf_relocations =\n         sess.opts.unstable_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n "}, {"sha": "79b243f73d1a0598925e0ee69c1657c40c89e968", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -81,10 +81,10 @@ unsafe fn configure_llvm(sess: &Session) {\n         };\n         // Set the llvm \"program name\" to make usage and invalid argument messages more clear.\n         add(\"rustc -Cllvm-args=\\\"...\\\" with\", true);\n-        if sess.time_llvm_passes() {\n+        if sess.opts.unstable_opts.time_llvm_passes {\n             add(\"-time-passes\", false);\n         }\n-        if sess.print_llvm_passes() {\n+        if sess.opts.unstable_opts.print_llvm_passes {\n             add(\"-debug-pass=Structure\", false);\n         }\n         if sess.target.generate_arange_section"}, {"sha": "1a7de1a184a9c1b642c3d8bdbbe67f964323753c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -1899,7 +1899,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n         // FIXME: time_llvm_passes support - does this use a global context or\n         // something?\n-        if sess.codegen_units() == 1 && sess.time_llvm_passes() {\n+        if sess.codegen_units() == 1 && sess.opts.unstable_opts.time_llvm_passes {\n             self.backend.print_pass_timings()\n         }\n "}, {"sha": "8b34be3858006f763849e55cb4954dd5c764464a", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -681,7 +681,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n \n     let mut total_codegen_time = Duration::new(0, 0);\n-    let start_rss = tcx.sess.time_passes().then(|| get_resident_set_size());\n+    let start_rss = tcx.sess.opts.unstable_opts.time_passes.then(|| get_resident_set_size());\n \n     // The non-parallel compiler can only translate codegen units to LLVM IR\n     // on a single thread, leading to a staircase effect where the N LLVM\n@@ -781,7 +781,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n-    if tcx.sess.time_passes() {\n+    if tcx.sess.opts.unstable_opts.time_passes {\n         let end_rss = get_resident_set_size();\n \n         print_time_passes_entry("}, {"sha": "a2212a33adef217a70b2e6a00b12b2e591767850", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let computed_total_bytes: usize = stats.iter().map(|(_, size)| size).sum();\n         assert_eq!(total_bytes, computed_total_bytes);\n \n-        if tcx.sess.meta_stats() {\n+        if tcx.sess.opts.unstable_opts.meta_stats {\n             self.opaque.flush();\n \n             // Rewind and re-read all the metadata to count the zero bytes we wrote."}, {"sha": "ae01efebacc21e9f4ffc41ef8a25e6b07a93f871", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -1214,7 +1214,6 @@ options! {\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::asm_comments` instead of this field\")]\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n     assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1363,7 +1362,6 @@ options! {\n         `=except-unused-generics`\n         `=except-unused-functions`\n         `=off` (default)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_mcount` instead of this field\")]\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n@@ -1392,7 +1390,6 @@ options! {\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking \\\n         the same values as the target option of the same name\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::meta_stats` instead of this field\")]\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather metadata statistics (default: no)\"),\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n@@ -1469,7 +1466,6 @@ options! {\n         See #77382 and #74551.\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::print_llvm_passes` instead of this field\")]\n     print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"print the LLVM optimization passes being run (default: no)\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1583,10 +1579,8 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\")]\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\")]\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each LLVM pass (default: no)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]"}, {"sha": "4a3d29414d6e598f2b24efe90835e626f916b34a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6689d2df08af58fb876126ad47bb279f3b789dfc/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6689d2df08af58fb876126ad47bb279f3b789dfc", "patch": "@@ -976,34 +976,10 @@ impl Session {\n         self.opts.unstable_opts.verbose\n     }\n \n-    pub fn instrument_mcount(&self) -> bool {\n-        self.opts.unstable_opts.instrument_mcount\n-    }\n-\n-    pub fn time_passes(&self) -> bool {\n-        self.opts.unstable_opts.time_passes\n-    }\n-\n-    pub fn time_llvm_passes(&self) -> bool {\n-        self.opts.unstable_opts.time_llvm_passes\n-    }\n-\n-    pub fn meta_stats(&self) -> bool {\n-        self.opts.unstable_opts.meta_stats\n-    }\n-\n-    pub fn asm_comments(&self) -> bool {\n-        self.opts.unstable_opts.asm_comments\n-    }\n-\n     pub fn verify_llvm_ir(&self) -> bool {\n         self.opts.unstable_opts.verify_llvm_ir || option_env!(\"RUSTC_VERIFY_LLVM_IR\").is_some()\n     }\n \n-    pub fn print_llvm_passes(&self) -> bool {\n-        self.opts.unstable_opts.print_llvm_passes\n-    }\n-\n     pub fn binary_dep_depinfo(&self) -> bool {\n         self.opts.unstable_opts.binary_dep_depinfo\n     }"}]}