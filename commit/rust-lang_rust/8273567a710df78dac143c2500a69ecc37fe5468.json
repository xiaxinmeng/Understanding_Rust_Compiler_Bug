{"sha": "8273567a710df78dac143c2500a69ecc37fe5468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzM1NjdhNzEwZGY3OGRhYzE0M2MyNTAwYTY5ZWNjMzdmZTU0Njg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-16T17:53:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-16T17:53:59Z"}, "message": "Rollup merge of #87107 - oli-obk:tait_double, r=nikomatsakis\n\nLoop over all opaque types instead of looking at just the first one with the same DefId\n\nThis exposed a bug in VecMap and is needed for https://github.com/rust-lang/rust/pull/86410 anyway\n\nr? ``@spastorino``\n\ncc ``@nikomatsakis``", "tree": {"sha": "d928fec67f99f91ea63a25ffbde7ab2e1c63eee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d928fec67f99f91ea63a25ffbde7ab2e1c63eee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8273567a710df78dac143c2500a69ecc37fe5468", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8ce5CRBK7hj4Ov3rIwAA9CMIAFuUf91zf0RlTcsUeXsNLJ/L\nH63NkETBIKaOyVykZyIG06i41YH4ReQWckfo8KXncgI5szP3X5YeYMe/fQX+2pfR\natUI4rqJPsjq5U9YDCDrmDwgVmx1IV+45TYpNJizRfAr/C1AHc6zb7EaqOzsh2OE\nbzxSbLK1QsB6szjDMeGabgec7RX4OlGMUyqobsJakxYOtasCC+YkbWVvfRur/k2p\nU6RnVWKG25zVSfnQaDx9nYLb81caJ+CQBlynxhFnSqBJbTBPIGRKGmE694JakD6r\n2/dE3vG8+AVjuLJIt7GLiKta0viR69LBv8W2ShWC1kZkE0zwxxDd00w5qyHc3RY=\n=lgm1\n-----END PGP SIGNATURE-----\n", "payload": "tree d928fec67f99f91ea63a25ffbde7ab2e1c63eee7\nparent 2119976c492894b72287f08865c71d63cff8d471\nparent 587e8fd11267911599322878fb37c8d185738c9b\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626458039 +0200\ncommitter GitHub <noreply@github.com> 1626458039 +0200\n\nRollup merge of #87107 - oli-obk:tait_double, r=nikomatsakis\n\nLoop over all opaque types instead of looking at just the first one with the same DefId\n\nThis exposed a bug in VecMap and is needed for https://github.com/rust-lang/rust/pull/86410 anyway\n\nr? ``@spastorino``\n\ncc ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8273567a710df78dac143c2500a69ecc37fe5468", "html_url": "https://github.com/rust-lang/rust/commit/8273567a710df78dac143c2500a69ecc37fe5468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8273567a710df78dac143c2500a69ecc37fe5468/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2119976c492894b72287f08865c71d63cff8d471", "url": "https://api.github.com/repos/rust-lang/rust/commits/2119976c492894b72287f08865c71d63cff8d471", "html_url": "https://github.com/rust-lang/rust/commit/2119976c492894b72287f08865c71d63cff8d471"}, {"sha": "587e8fd11267911599322878fb37c8d185738c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/587e8fd11267911599322878fb37c8d185738c9b", "html_url": "https://github.com/rust-lang/rust/commit/587e8fd11267911599322878fb37c8d185738c9b"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "1786fa340cc8bb9831039ef8b839f997009c8ce8", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8273567a710df78dac143c2500a69ecc37fe5468/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8273567a710df78dac143c2500a69ecc37fe5468/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=8273567a710df78dac143c2500a69ecc37fe5468", "patch": "@@ -127,13 +127,15 @@ impl<K, V> IntoIterator for VecMap<K, V> {\n     }\n }\n \n-impl<K, V> Extend<(K, V)> for VecMap<K, V> {\n+impl<K: PartialEq, V> Extend<(K, V)> for VecMap<K, V> {\n     fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n-        self.0.extend(iter);\n+        for (k, v) in iter {\n+            self.insert(k, v);\n+        }\n     }\n \n-    fn extend_one(&mut self, item: (K, V)) {\n-        self.0.extend_one(item);\n+    fn extend_one(&mut self, (k, v): (K, V)) {\n+        self.insert(k, v);\n     }\n \n     fn extend_reserve(&mut self, additional: usize) {"}, {"sha": "7b0002914eca80d20d0df9cf6e94bfa4dbfe933f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8273567a710df78dac143c2500a69ecc37fe5468/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8273567a710df78dac143c2500a69ecc37fe5468/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8273567a710df78dac143c2500a69ecc37fe5468", "patch": "@@ -509,11 +509,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+#[instrument(skip(tcx), level = \"debug\")]\n fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n-    debug!(\"find_opaque_ty_constraints({:?})\", def_id);\n-\n     struct ConstraintLocator<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n@@ -522,13 +521,11 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     impl ConstraintLocator<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n         fn check(&mut self, def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n             if !self.tcx.has_typeck_results(def_id) {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`: no typeck results\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraint: no typeck results\");\n                 return;\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n@@ -540,21 +537,19 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .get_by(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraints in typeck results\");\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n-            if let Some((opaque_type_key, concrete_type)) =\n-                concrete_opaque_types.iter().find(|(key, _)| key.def_id == self.def_id)\n-            {\n-                debug!(\n-                    \"find_opaque_ty_constraints: found constraint for `{:?}` at `{:?}`: {:?}\",\n-                    self.def_id, def_id, concrete_type,\n-                );\n+            debug!(?concrete_opaque_types);\n+            for (opaque_type_key, concrete_type) in concrete_opaque_types {\n+                if opaque_type_key.def_id != self.def_id {\n+                    // Ignore constraints for other opaque types.\n+                    continue;\n+                }\n+\n+                debug!(?concrete_type, ?opaque_type_key.substs, \"found constraint\");\n \n                 // FIXME(oli-obk): trace the actual span from inference to improve errors.\n                 let span = self.tcx.def_span(def_id);\n@@ -603,7 +598,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n                 if let Some((prev_span, prev_ty)) = self.found {\n                     if *concrete_type != prev_ty {\n-                        debug!(\"find_opaque_ty_constraints: span={:?}\", span);\n+                        debug!(?span);\n                         // Found different concrete types for the opaque type.\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,\n@@ -619,11 +614,6 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 } else {\n                     self.found = Some((span, concrete_type));\n                 }\n-            } else {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n-                    self.def_id, def_id,\n-                );\n             }\n         }\n     }"}, {"sha": "0c37399df8dd21fa70195fd42074bfc09447cfcd", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8273567a710df78dac143c2500a69ecc37fe5468/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8273567a710df78dac143c2500a69ecc37fe5468/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs?ref=8273567a710df78dac143c2500a69ecc37fe5468", "patch": "@@ -12,6 +12,7 @@ trait Output<'a> {}\n impl<'a> Output<'a> for &'a str {}\n \n fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n     let out: OpaqueOutputImpl<'a> = arg;\n     arg\n }"}, {"sha": "233c996340d844fe57b47485af643d0308d3a703", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8273567a710df78dac143c2500a69ecc37fe5468/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8273567a710df78dac143c2500a69ecc37fe5468/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr?ref=8273567a710df78dac143c2500a69ecc37fe5468", "patch": "@@ -10,6 +10,18 @@ note: hidden type `&'<empty> str` captures lifetime smaller than the function bo\n LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n    |                             ^^^^^^^^^^^^^^^^^^^^\n \n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-85113.rs:14:1\n+   |\n+LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'<empty> str`, got `&'a str`\n+   |\n+note: previous use here\n+  --> $DIR/issue-85113.rs:14:1\n+   |\n+LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0477]: the type `&'<empty> str` does not fulfill the required lifetime\n   --> $DIR/issue-85113.rs:5:29\n    |\n@@ -42,7 +54,7 @@ LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n    = note: expected `Output<'a>`\n               found `Output<'_>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0477, E0495, E0700.\n For more information about an error, try `rustc --explain E0477`."}]}