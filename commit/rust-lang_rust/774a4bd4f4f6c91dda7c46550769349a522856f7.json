{"sha": "774a4bd4f4f6c91dda7c46550769349a522856f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NGE0YmQ0ZjRmNmM5MWRkYTdjNDY1NTA3NjkzNDlhNTIyODU2Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-29T04:30:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-29T04:30:56Z"}, "message": "Auto merge of #67614 - Mark-Simulacrum:global-callbacks, r=Zoxc\n\nSet callbacks globally\n\nThis sets the callbacks from syntax and rustc_errors just once, utilizing static (rather than thread-local) storage.", "tree": {"sha": "152158cf6ec1df1aa01646c3f700d40eed9d9db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152158cf6ec1df1aa01646c3f700d40eed9d9db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774a4bd4f4f6c91dda7c46550769349a522856f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774a4bd4f4f6c91dda7c46550769349a522856f7", "html_url": "https://github.com/rust-lang/rust/commit/774a4bd4f4f6c91dda7c46550769349a522856f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774a4bd4f4f6c91dda7c46550769349a522856f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00fc203b659767f5c42c3e258fe31f8ae4355abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/00fc203b659767f5c42c3e258fe31f8ae4355abc", "html_url": "https://github.com/rust-lang/rust/commit/00fc203b659767f5c42c3e258fe31f8ae4355abc"}, {"sha": "4dcc6270e891657906636f72dba57e4a4bac942d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcc6270e891657906636f72dba57e4a4bac942d", "html_url": "https://github.com/rust-lang/rust/commit/4dcc6270e891657906636f72dba57e4a4bac942d"}], "stats": {"total": 174, "additions": 99, "deletions": 75}, "files": [{"sha": "0fb294bb9da60128bc7454df90464345b7f6e5dc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -1610,13 +1610,11 @@ pub mod tls {\n \n     use crate::dep_graph::TaskDeps;\n     use crate::ty::query;\n-    use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+    use errors::Diagnostic;\n     use rustc_data_structures::sync::{self, Lock, Lrc};\n     use rustc_data_structures::thin_vec::ThinVec;\n     use rustc_data_structures::OnDrop;\n-    use std::fmt;\n     use std::mem;\n-    use syntax_pos;\n \n     #[cfg(not(parallel_compiler))]\n     use std::cell::Cell;\n@@ -1692,58 +1690,6 @@ pub mod tls {\n         TLV.with(|tlv| tlv.get())\n     }\n \n-    /// This is a callback from libsyntax as it cannot access the implicit state\n-    /// in librustc otherwise.\n-    fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        with_opt(|tcx| {\n-            if let Some(tcx) = tcx {\n-                write!(f, \"{}\", tcx.sess.source_map().span_to_string(span))\n-            } else {\n-                syntax_pos::default_span_debug(span, f)\n-            }\n-        })\n-    }\n-\n-    /// This is a callback from libsyntax as it cannot access the implicit state\n-    /// in librustc otherwise. It is used to when diagnostic messages are\n-    /// emitted and stores them in the current query, if there is one.\n-    fn track_diagnostic(diagnostic: &Diagnostic) {\n-        with_context_opt(|icx| {\n-            if let Some(icx) = icx {\n-                if let Some(ref diagnostics) = icx.diagnostics {\n-                    let mut diagnostics = diagnostics.lock();\n-                    diagnostics.extend(Some(diagnostic.clone()));\n-                }\n-            }\n-        })\n-    }\n-\n-    /// Sets up the callbacks from libsyntax on the current thread.\n-    pub fn with_thread_locals<F, R>(f: F) -> R\n-    where\n-        F: FnOnce() -> R,\n-    {\n-        syntax_pos::SPAN_DEBUG.with(|span_dbg| {\n-            let original_span_debug = span_dbg.get();\n-            span_dbg.set(span_debug);\n-\n-            let _on_drop = OnDrop(move || {\n-                span_dbg.set(original_span_debug);\n-            });\n-\n-            TRACK_DIAGNOSTICS.with(|current| {\n-                let original = current.get();\n-                current.set(track_diagnostic);\n-\n-                let _on_drop = OnDrop(move || {\n-                    current.set(original);\n-                });\n-\n-                f()\n-            })\n-        })\n-    }\n-\n     /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.\n     #[inline]\n     pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R"}, {"sha": "fbcbfae9f8f4fca470bec41afc9d303389421c16", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -435,13 +435,14 @@ pub unsafe fn handle_deadlock() {\n     let syntax_pos_globals =\n         syntax_pos::GLOBALS.with(|syntax_pos_globals| syntax_pos_globals as *const _);\n     let syntax_pos_globals = &*syntax_pos_globals;\n+    let syntax_globals = syntax::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n+    let syntax_globals = &*syntax_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n-            syntax_pos::GLOBALS.set(syntax_pos_globals, || {\n-                syntax_pos::GLOBALS.set(syntax_pos_globals, || {\n-                    tls::with_thread_locals(|| tls::with_global(|tcx| deadlock(tcx, &registry)))\n-                })\n-            })\n+            syntax::GLOBALS.set(syntax_globals, || {\n+                syntax_pos::GLOBALS\n+                    .set(syntax_pos_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n+            });\n         })\n     });\n }"}, {"sha": "eeb1b309257d4c90ace1860e468ca1a970b30001", "filename": "src/librustc_data_structures/atomic_ref.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_data_structures%2Fatomic_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_data_structures%2Fatomic_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fatomic_ref.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -0,0 +1,26 @@\n+use std::marker::PhantomData;\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+/// This is essentially an `AtomicPtr` but is guaranteed to always be valid\n+pub struct AtomicRef<T: 'static>(AtomicPtr<T>, PhantomData<&'static T>);\n+\n+impl<T: 'static> AtomicRef<T> {\n+    pub const fn new(initial: &'static T) -> AtomicRef<T> {\n+        AtomicRef(AtomicPtr::new(initial as *const T as *mut T), PhantomData)\n+    }\n+\n+    pub fn swap(&self, new: &'static T) -> &'static T {\n+        // We never allow storing anything but a `'static` reference so it's safe to\n+        // return it for the same.\n+        unsafe { &*self.0.swap(new as *const T as *mut T, Ordering::SeqCst) }\n+    }\n+}\n+\n+impl<T: 'static> std::ops::Deref for AtomicRef<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        // We never allow storing anything but a `'static` reference so it's safe to lend\n+        // it out for any amount of time.\n+        unsafe { &*self.0.load(Ordering::SeqCst) }\n+    }\n+}"}, {"sha": "25bb8f6afae62a3cd9dea89f098bc6d706cba426", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -89,10 +89,12 @@ pub mod thin_vec;\n pub mod tiny_list;\n pub mod transitive_relation;\n pub use ena::unify;\n+mod atomic_ref;\n pub mod fingerprint;\n pub mod profiling;\n pub mod vec_linked_list;\n pub mod work_queue;\n+pub use atomic_ref::AtomicRef;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "53a673714a90ae66861fcc45a7c480b0ef0e146f", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -17,11 +17,11 @@ use registry::Registry;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n+use rustc_data_structures::AtomicRef;\n use syntax_pos::source_map::SourceMap;\n use syntax_pos::{Loc, MultiSpan, Span};\n \n use std::borrow::Cow;\n-use std::cell::Cell;\n use std::panic;\n use std::path::Path;\n use std::{error, fmt};\n@@ -309,8 +309,8 @@ pub enum StashKey {\n \n fn default_track_diagnostic(_: &Diagnostic) {}\n \n-thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n-                Cell::new(default_track_diagnostic));\n+pub static TRACK_DIAGNOSTICS: AtomicRef<fn(&Diagnostic)> =\n+    AtomicRef::new(&(default_track_diagnostic as fn(&_)));\n \n #[derive(Copy, Clone, Default)]\n pub struct HandlerFlags {\n@@ -730,9 +730,7 @@ impl HandlerInner {\n             return;\n         }\n \n-        TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n-            track_diagnostics.get()(diagnostic);\n-        });\n+        (*TRACK_DIAGNOSTICS)(diagnostic);\n \n         if let Some(ref code) = diagnostic.code {\n             self.emitted_diagnostic_codes.insert(code.clone());"}, {"sha": "28e687a378646a2754385b30b5ce61361cddb797", "filename": "src/librustc_interface/callbacks.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -0,0 +1,48 @@\n+//! Throughout the compiler tree, there are several places which want to have\n+//! access to state or queries while being inside crates that are dependencies\n+//! of librustc. To facilitate this, we have the\n+//! `rustc_data_structures::AtomicRef` type, which allows us to setup a global\n+//! static which can then be set in this file at program startup.\n+//!\n+//! See `SPAN_DEBUG` for an example of how to set things up.\n+//!\n+//! The functions in this file should fall back to the default set in their\n+//! origin crate when the `TyCtxt` is not present in TLS.\n+\n+use rustc::ty::tls;\n+use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+use std::fmt;\n+use syntax_pos;\n+\n+/// This is a callback from libsyntax as it cannot access the implicit state\n+/// in librustc otherwise.\n+fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    tls::with_opt(|tcx| {\n+        if let Some(tcx) = tcx {\n+            write!(f, \"{}\", tcx.sess.source_map().span_to_string(span))\n+        } else {\n+            syntax_pos::default_span_debug(span, f)\n+        }\n+    })\n+}\n+\n+/// This is a callback from libsyntax as it cannot access the implicit state\n+/// in librustc otherwise. It is used to when diagnostic messages are\n+/// emitted and stores them in the current query, if there is one.\n+fn track_diagnostic(diagnostic: &Diagnostic) {\n+    tls::with_context_opt(|icx| {\n+        if let Some(icx) = icx {\n+            if let Some(ref diagnostics) = icx.diagnostics {\n+                let mut diagnostics = diagnostics.lock();\n+                diagnostics.extend(Some(diagnostic.clone()));\n+            }\n+        }\n+    })\n+}\n+\n+/// Sets up the callbacks in prior crates which we want to refer to the\n+/// TyCtxt in.\n+pub fn setup_callbacks() {\n+    syntax_pos::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+    TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n+}"}, {"sha": "e4e6849ab8e59859ff8bcd30478f8e9d987affae", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -11,6 +11,7 @@\n #[cfg(unix)]\n extern crate libc;\n \n+mod callbacks;\n pub mod interface;\n mod passes;\n mod proc_macro_decls;"}, {"sha": "ccc2dcabec2c58d10c7c5bbb5d84cb6744a76d0a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -145,13 +145,15 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n         cfg = cfg.stack_size(size);\n     }\n \n+    crate::callbacks::setup_callbacks();\n+\n     scoped_thread(cfg, || {\n         syntax::with_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));\n                 }\n-                ty::tls::with_thread_locals(|| f())\n+                f()\n             })\n         })\n     })\n@@ -167,6 +169,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     use rayon::{ThreadBuilder, ThreadPool, ThreadPoolBuilder};\n \n     let gcx_ptr = &Lock::new(0);\n+    crate::callbacks::setup_callbacks();\n \n     let mut config = ThreadPoolBuilder::new()\n         .thread_name(|_| \"rustc\".to_string())\n@@ -194,9 +197,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                             if let Some(stderr) = stderr {\n                                 io::set_panic(Some(box Sink(stderr.clone())));\n                             }\n-                            ty::tls::with_thread_locals(|| {\n-                                ty::tls::GCX_PTR.set(gcx_ptr, || thread.run())\n-                            })\n+                            ty::tls::GCX_PTR.set(gcx_ptr, || thread.run())\n                         })\n                     })\n                 };"}, {"sha": "a58c12f23508ac74f0744edf2021c57dd43a3570", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a4bd4f4f6c91dda7c46550769349a522856f7/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=774a4bd4f4f6c91dda7c46550769349a522856f7", "patch": "@@ -13,6 +13,7 @@\n #![feature(specialization)]\n #![feature(step_trait)]\n \n+use rustc_data_structures::AtomicRef;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n@@ -41,7 +42,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n \n use std::borrow::Cow;\n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n@@ -665,13 +666,13 @@ pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result\n \n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n+        (*SPAN_DEBUG)(*self, f)\n     }\n }\n \n impl fmt::Debug for SpanData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        SPAN_DEBUG.with(|span_debug| span_debug.get()(Span::new(self.lo, self.hi, self.ctxt), f))\n+        (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt), f)\n     }\n }\n \n@@ -1503,8 +1504,8 @@ pub struct FileLines {\n     pub lines: Vec<LineInfo>,\n }\n \n-thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n-                Cell::new(default_span_debug));\n+pub static SPAN_DEBUG: AtomicRef<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n+    AtomicRef::new(&(default_span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n \n #[derive(Debug)]\n pub struct MacroBacktrace {"}]}