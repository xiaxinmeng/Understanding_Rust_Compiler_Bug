{"sha": "9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjU5ZjlkODFiOGQ4YzkxZTJjNDcwZTgyODEzZDc1YTZiY2RjOWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-09T03:52:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-09T19:35:30Z"}, "message": "Add sha1 and int tests to stdtest. Issue #428", "tree": {"sha": "c6005506f63d8558f9419f2e4b8b645a919dc1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6005506f63d8558f9419f2e4b8b645a919dc1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "html_url": "https://github.com/rust-lang/rust/commit/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b00935f39c2dc30f67b96c73a61c1c5d896d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b00935f39c2dc30f67b96c73a61c1c5d896d14", "html_url": "https://github.com/rust-lang/rust/commit/45b00935f39c2dc30f67b96c73a61c1c5d896d14"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "d9432bc07229b17ea63c000bf2515497ce122c27", "filename": "src/test/stdtest/int.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fint.rs?ref=9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "patch": "@@ -0,0 +1,23 @@\n+import std::int;\n+import std::str::eq;\n+\n+#[test]\n+fn test_to_str() {\n+    assert (eq(int::to_str(0, 10u), \"0\"));\n+    assert (eq(int::to_str(1, 10u), \"1\"));\n+    assert (eq(int::to_str(-1, 10u), \"-1\"));\n+    assert (eq(int::to_str(255, 16u), \"ff\"));\n+    assert (eq(int::to_str(100, 10u), \"100\"));\n+}\n+\n+#[test]\n+fn test_pow() {\n+    assert (int::pow(0, 0u) == 1);\n+    assert (int::pow(0, 1u) == 0);\n+    assert (int::pow(0, 2u) == 0);\n+    assert (int::pow(-1, 0u) == 1);\n+    assert (int::pow(1, 0u) == 1);\n+    assert (int::pow(-3, 2u) == 9);\n+    assert (int::pow(-3, 3u) == -27);\n+    assert (int::pow(4, 9u) == 262144);\n+}"}, {"sha": "4244ac4960abcdbd247cd985fda2c7760c641ab7", "filename": "src/test/stdtest/sha1.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsha1.rs?ref=9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "patch": "@@ -0,0 +1,85 @@\n+import std::sha1;\n+import std::vec;\n+import std::str;\n+\n+#[test]\n+fn test() {\n+    type test = rec(str input, vec[u8] output);\n+\n+    fn a_million_letter_a() -> str {\n+        auto i = 0;\n+        auto rs = \"\";\n+        while (i < 100000) { rs += \"aaaaaaaaaa\"; i += 1; }\n+        ret rs;\n+    }\n+    // Test messages from FIPS 180-1\n+\n+    let vec[test] fips_180_1_tests =\n+        [rec(input=\"abc\",\n+             output=[0xA9u8, 0x99u8, 0x3Eu8, 0x36u8, 0x47u8, 0x06u8, 0x81u8,\n+                     0x6Au8, 0xBAu8, 0x3Eu8, 0x25u8, 0x71u8, 0x78u8, 0x50u8,\n+                     0xC2u8, 0x6Cu8, 0x9Cu8, 0xD0u8, 0xD8u8, 0x9Du8]),\n+         rec(input=\"abcdbcdecdefdefgefghfghighij\" +\n+                       \"hijkijkljklmklmnlmnomnopnopq\",\n+             output=[0x84u8, 0x98u8, 0x3Eu8, 0x44u8, 0x1Cu8, 0x3Bu8, 0xD2u8,\n+                     0x6Eu8, 0xBAu8, 0xAEu8, 0x4Au8, 0xA1u8, 0xF9u8, 0x51u8,\n+                     0x29u8, 0xE5u8, 0xE5u8, 0x46u8, 0x70u8, 0xF1u8]),\n+         rec(input=a_million_letter_a(),\n+             output=[0x34u8, 0xAAu8, 0x97u8, 0x3Cu8, 0xD4u8, 0xC4u8, 0xDAu8,\n+                     0xA4u8, 0xF6u8, 0x1Eu8, 0xEBu8, 0x2Bu8, 0xDBu8, 0xADu8,\n+                     0x27u8, 0x31u8, 0x65u8, 0x34u8, 0x01u8, 0x6Fu8])];\n+    // Examples from wikipedia\n+\n+    let vec[test] wikipedia_tests =\n+        [rec(input=\"The quick brown fox jumps over the lazy dog\",\n+             output=[0x2fu8, 0xd4u8, 0xe1u8, 0xc6u8, 0x7au8, 0x2du8, 0x28u8,\n+                     0xfcu8, 0xedu8, 0x84u8, 0x9eu8, 0xe1u8, 0xbbu8, 0x76u8,\n+                     0xe7u8, 0x39u8, 0x1bu8, 0x93u8, 0xebu8, 0x12u8]),\n+         rec(input=\"The quick brown fox jumps over the lazy cog\",\n+             output=[0xdeu8, 0x9fu8, 0x2cu8, 0x7fu8, 0xd2u8, 0x5eu8, 0x1bu8,\n+                     0x3au8, 0xfau8, 0xd3u8, 0xe8u8, 0x5au8, 0x0bu8, 0xd1u8,\n+                     0x7du8, 0x9bu8, 0x10u8, 0x0du8, 0xb4u8, 0xb3u8])];\n+    auto tests = fips_180_1_tests + wikipedia_tests;\n+    fn check_vec_eq(vec[u8] v0, vec[u8] v1) {\n+        assert (vec::len[u8](v0) == vec::len[u8](v1));\n+        auto len = vec::len[u8](v0);\n+        auto i = 0u;\n+        while (i < len) {\n+            auto a = v0.(i);\n+            auto b = v1.(i);\n+            assert (a == b);\n+            i += 1u;\n+        }\n+    }\n+    // Test that it works when accepting the message all at once\n+\n+    auto sh = sha1::mk_sha1();\n+    for (test t in tests) {\n+        sh.input_str(t.input);\n+        auto out = sh.result();\n+        check_vec_eq(t.output, out);\n+        sh.reset();\n+    }\n+\n+    // Test that it works when accepting the message in pieces\n+    for (test t in tests) {\n+        auto len = str::byte_len(t.input);\n+        auto left = len;\n+        while (left > 0u) {\n+            auto take = (left + 1u) / 2u;\n+            sh.input_str(str::substr(t.input, len - left, take));\n+            left = left - take;\n+        }\n+        auto out = sh.result();\n+        check_vec_eq(t.output, out);\n+        sh.reset();\n+    }\n+}\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "ab455001b617d5feab4696375eeb17c33260755c", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=9af59f9d81b8d8c91e2c470e82813d75a6bcdc9e", "patch": "@@ -1,5 +1,7 @@\n use std;\n \n+mod sha1;\n+mod int;\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}