{"sha": "7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "node_id": "C_kwDOAAsO6NoAKDdmYzc3ODA2ZDRmNjY4MTljZjlkN2ViZDUzYTMzMzg2ODZjMDhiN2Q", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T15:29:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T02:42:50Z"}, "message": "fix interpreter validity check on Box", "tree": {"sha": "b55790741997f2b71f21043bf4e8d73e26d40f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55790741997f2b71f21043bf4e8d73e26d40f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "html_url": "https://github.com/rust-lang/rust/commit/7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc77806d4f66819cf9d7ebd53a3338686c08b7d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04bfb4aea99436a62f6a98056e805eb9b0629cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04bfb4aea99436a62f6a98056e805eb9b0629cc", "html_url": "https://github.com/rust-lang/rust/commit/b04bfb4aea99436a62f6a98056e805eb9b0629cc"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "600d25548d4d815fb0a7a740bfaa2f9d765989b8", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7fc77806d4f66819cf9d7ebd53a3338686c08b7d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc77806d4f66819cf9d7ebd53a3338686c08b7d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "patch": "@@ -594,13 +594,35 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Adt(def, ..) if def.is_box() => {\n-                let unique = self.ecx.operand_field(value, 0)?;\n-                let nonnull = self.ecx.operand_field(&unique, 0)?;\n-                let ptr = self.ecx.operand_field(&nonnull, 0)?;\n-                self.check_safe_pointer(&ptr, \"box\")?;\n+                // Box is special, very special. We carefully assert all the assumptions we make\n+                // here; if this needs to be adjusted, remember to also adjust all the other\n+                // visitors -- in particular the Stacked Borrows retagging visitor in Miri.\n+                // Did I mention that this is a gross hack? Anyway...\n \n-                // Check other fields of Box\n-                self.walk_value(value)?;\n+                // `Box` has two fields: the pointer we care about, and the allocator.\n+                assert_eq!(value.layout.fields.count(), 2, \"`Box` must have exactly 2 fields\");\n+                let (unique_ptr, alloc) =\n+                    (self.ecx.operand_field(value, 0)?, self.ecx.operand_field(value, 1)?);\n+                // Unfortunately there is some type junk in the way here: `unique_ptr` is a `Unique`...\n+                // (which means another 2 fields, the second of which is a `PhantomData`)\n+                assert_eq!(unique_ptr.layout.fields.count(), 2);\n+                let (nonnull_ptr, phantom) = (\n+                    self.ecx.operand_field(&unique_ptr, 0)?,\n+                    self.ecx.operand_field(&unique_ptr, 1)?,\n+                );\n+                assert!(\n+                    phantom.layout.ty.ty_adt_def().is_some_and(|adt| adt.is_phantom_data()),\n+                    \"2nd field of `Unique` should be PhantomData but is {:?}\",\n+                    phantom.layout.ty,\n+                );\n+                // ... that contains a `NonNull`... (gladly, only a single field here)\n+                assert_eq!(nonnull_ptr.layout.fields.count(), 1);\n+                let raw_ptr = self.ecx.operand_field(&nonnull_ptr, 0)?; // the actual raw ptr\n+                // ... whose only field finally is a raw ptr we can dereference.\n+                self.check_safe_pointer(&raw_ptr, \"box\")?;\n+                // The second `Box` field is the allocator, which we recursively check for validity\n+                // like in regular structs.\n+                self.walk_value(&alloc)?;\n                 Ok(true)\n             }\n             ty::FnPtr(_sig) => {"}, {"sha": "2d42ae236ad9d99344b5f4a55ff7c0c85699f992", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fc77806d4f66819cf9d7ebd53a3338686c08b7d/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc77806d4f66819cf9d7ebd53a3338686c08b7d/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=7fc77806d4f66819cf9d7ebd53a3338686c08b7d", "patch": "@@ -21,6 +21,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(yeet_expr)]\n+#![feature(is_some_with)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}]}