{"sha": "5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlM2I0MWUwY2I3ZjhhY2VmODRhZmUzZTlkNDY0ZTY3ZTdiMmM4OTE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-02T18:03:17Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-03T13:02:21Z"}, "message": "rustc: remove `HirId` from `ArgSource::AsyncFn`\n\nThis commit removes the `HirId` from `ArgSource::AsyncFn`, relying on\nthe fact that only `simple_ident` is used in each of the locations that\npreviously took the original pattern from the `ArgSource::AsyncFn`.", "tree": {"sha": "d53bc8969b5923da6342663f99362aa2b25b64ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d53bc8969b5923da6342663f99362aa2b25b64ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlz1Gl0ACgkQAXYLT59T\n8VSEKg/8DK/bUBrbl5xoiqJDhmCR3JQRsoMOJ+et1oTmfVDH7b01MRJmBHdvrV7S\nQKv2PfOt7KpUK3zQfBmo/N3Wg8CWCHNz+/+KMwAwxKkyo4OoIVMJinEVwkY54ITx\nqV0Ayx2e30vW2BpVp3NtA0munS9o+gdTk7jhGCmgkv7eRME3o7y1mS4VarBAOZcT\nczghYayeqnEWYr0JLeeie9vCQ4BxFdEeatl0D8+WjGaH5ZODFa9Js4oWCZm27s0V\nVH9e20nMfSCDKqVMWsrfffRRt97KKRSWgKVOSkF1sREd+MAws2SP0vh/L1673ObV\nn8TeO28vi1Nolh+6nCglUuJs/GBXpjPitp/kDXWvEUYumJI22jXvfd2fG1S04cOu\nySz2cxFZoSVsHruKIp4SVOFTVfawlD9zWQ2eaYXYMKIGvvxwQXA5LXUl4l/vx1k8\njVQnMFUXbzdcxAVOXYbeddCmWHBZ4y1xZRiqSMv/FQx33nX6bChTrnIsL6tGpBPU\nO3ZxMGH/cVfILCPjljeX2BNYqxe37bEWc2ktTOF8HMArMlcusPXD8vUwR9SQY53F\nsnnP8b2kl3pR9LGK4ulY8Y33l+JN0xi8yuBHPxxZDcZs+dE8rGXSijku1Nfzk4OD\n++vws+fbB4Del7vH1eE26qCPJsDKyhJo6EfAiRuuYKnK1tbX+ig=\n=2o7o\n-----END PGP SIGNATURE-----", "payload": "tree d53bc8969b5923da6342663f99362aa2b25b64ba\nparent 1e5f496143aabf1d4d158d99b73afee7b00f0650\nauthor David Wood <david@davidtw.co> 1559498597 +0100\ncommitter David Wood <david@davidtw.co> 1559566941 +0100\n\nrustc: remove `HirId` from `ArgSource::AsyncFn`\n\nThis commit removes the `HirId` from `ArgSource::AsyncFn`, relying on\nthe fact that only `simple_ident` is used in each of the locations that\npreviously took the original pattern from the `ArgSource::AsyncFn`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "html_url": "https://github.com/rust-lang/rust/commit/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5f496143aabf1d4d158d99b73afee7b00f0650", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5f496143aabf1d4d158d99b73afee7b00f0650", "html_url": "https://github.com/rust-lang/rust/commit/1e5f496143aabf1d4d158d99b73afee7b00f0650"}], "stats": {"total": 101, "additions": 27, "deletions": 74}, "files": [{"sha": "d6d8b60f21f27ae0a69160619629abd00dad2fe2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -3092,7 +3092,7 @@ impl<'a> LoweringContext<'a> {\n                                                    new_argument_id, ident, None),\n                         span: desugared_span,\n                     }),\n-                    source: hir::ArgSource::AsyncFn(argument.pat.hir_id),\n+                    source: hir::ArgSource::AsyncFn,\n                 };\n \n                 let construct_stmt = |this: &mut LoweringContext<'_>, pat: P<hir::Pat>,"}, {"sha": "75799a1903174270912f5babb8616412a8f7710f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -699,19 +699,6 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Returns the `HirId` of this pattern, or, if this is an `async fn` desugaring, the `HirId`\n-    /// of the original pattern that the user wrote.\n-    pub fn original_pat_of_argument(&self, arg: &'hir Arg) -> &'hir Pat {\n-        match &arg.source {\n-            ArgSource::Normal => &*arg.pat,\n-            ArgSource::AsyncFn(hir_id) => match self.find_by_hir_id(*hir_id) {\n-                Some(Node::Pat(pat)) | Some(Node::Binding(pat)) => &pat,\n-                Some(Node::Local(local)) => &*local.pat,\n-                x => bug!(\"ArgSource::AsyncFn HirId not a pattern/binding/local: {:?}\", x),\n-            },\n-        }\n-    }\n-\n     pub fn is_const_scope(&self, hir_id: HirId) -> bool {\n         self.walk_parent_nodes(hir_id, |node| match *node {\n             Node::Item(Item { node: ItemKind::Const(_, _), .. }) => true,"}, {"sha": "eb338482eba9102f6ed25bdbfba3facdffc55e7f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -1937,8 +1937,8 @@ pub struct Arg {\n pub enum ArgSource {\n     /// Argument as specified by the user.\n     Normal,\n-    /// Generated argument from `async fn` lowering, `HirId` is the original pattern.\n-    AsyncFn(HirId),\n+    /// Generated argument from `async fn` lowering.\n+    AsyncFn,\n }\n \n /// Represents the header (not the body) of a function declaration."}, {"sha": "ecdcb4bbf114a44de9a37f4c530c3d4ef42748b8", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -86,14 +86,12 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let sub_is_ret_type =\n             self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n-        let arg_sup_pat = self.tcx().hir().original_pat_of_argument(anon_arg_sup);\n-        let span_label_var1 = match arg_sup_pat.simple_ident() {\n+        let span_label_var1 = match anon_arg_sup.pat.simple_ident() {\n             Some(simple_ident) => format!(\" from `{}`\", simple_ident),\n             None => String::new(),\n         };\n \n-        let arg_sub_pat = self.tcx().hir().original_pat_of_argument(anon_arg_sub);\n-        let span_label_var2 = match arg_sub_pat.simple_ident() {\n+        let span_label_var2 = match anon_arg_sub.pat.simple_ident() {\n             Some(simple_ident) => format!(\" into `{}`\", simple_ident),\n             None => String::new(),\n         };"}, {"sha": "0efc124e31fee10350238d7be32f935ef6639813", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -95,8 +95,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let arg_pat = self.tcx().hir().original_pat_of_argument(arg);\n-        let (error_var, span_label_var) = match arg_pat.simple_ident() {\n+        let (error_var, span_label_var) = match arg.pat.simple_ident() {\n             Some(simple_ident) => (\n                 format!(\"the type of `{}`\", simple_ident),\n                 format!(\"the type of `{}`\", simple_ident),"}, {"sha": "7c57c50595bc8db00ac47645db65b10a0a97c325", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -2414,10 +2414,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 have_bound_regions,\n             } = info;\n \n-            let help_name = if let Some(body) = parent {\n-                let arg = &self.tcx.hir().body(body).arguments[index];\n-                let original_pat = self.tcx.hir().original_pat_of_argument(arg);\n-                format!(\"`{}`\", self.tcx.hir().hir_to_pretty_string(original_pat.hir_id))\n+            let help_name = if let Some(ident) = parent.and_then(|body| {\n+                self.tcx.hir().body(body).arguments[index].pat.simple_ident()\n+            }) {\n+                format!(\"`{}`\", ident)\n             } else {\n                 format!(\"argument {}\", index + 1)\n             };"}, {"sha": "91106ebd77e070d63ac9c6d3ff8bc5b1c922edb4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -84,23 +84,11 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Body<'\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some(ArgInfo {\n-                        ty: liberated_closure_env_ty(tcx, id, body_id),\n-                        span: None,\n-                        pattern: None,\n-                        user_pattern: None,\n-                        self_kind: None,\n-                    })\n+                    Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n                 }\n                 ty::Generator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_type(id);\n-                    Some(ArgInfo {\n-                        ty: gen_ty,\n-                        span: None,\n-                        pattern: None,\n-                        user_pattern: None,\n-                        self_kind: None,\n-                    })\n+                    Some(ArgInfo(gen_ty, None, None, None))\n                 }\n                 _ => None,\n             };\n@@ -139,14 +127,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Body<'\n                             self_arg = None;\n                         }\n \n-                        let original_pat = tcx.hir().original_pat_of_argument(arg);\n-                        ArgInfo {\n-                            ty: fn_sig.inputs()[index],\n-                            span: opt_ty_info,\n-                            pattern: Some(&*arg.pat),\n-                            user_pattern: Some(&original_pat),\n-                            self_kind: self_arg,\n-                        }\n+                        ArgInfo(fn_sig.inputs()[index], opt_ty_info, Some(&*arg.pat), self_arg)\n                     });\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n@@ -634,13 +615,7 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n-struct ArgInfo<'gcx> {\n-    ty: Ty<'gcx>,\n-    span: Option<Span>,\n-    pattern: Option<&'gcx hir::Pat>,\n-    user_pattern: Option<&'gcx hir::Pat>,\n-    self_kind: Option<ImplicitSelfKind>,\n-}\n+struct ArgInfo<'gcx>(Ty<'gcx>, Option<Span>, Option<&'gcx hir::Pat>, Option<ImplicitSelfKind>);\n \n fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    fn_id: hir::HirId,\n@@ -901,18 +876,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      -> BlockAnd<()>\n     {\n         // Allocate locals for the function arguments\n-        for &ArgInfo { ty, span: _, pattern, user_pattern, self_kind: _ } in arguments.iter() {\n+        for &ArgInfo(ty, _, pattern, _) in arguments.iter() {\n             // If this is a simple binding pattern, give the local a name for\n             // debuginfo and so that error reporting knows that this is a user\n             // variable. For any other pattern the pattern introduces new\n             // variables which will be named instead.\n-            let (name, span) = if let Some(pat) = user_pattern {\n-                match pat.node {\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, _)\n-                    | hir::PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, _) =>\n-                        (Some(ident.name), pat.span),\n-                    _ => (None, pattern.map_or(self.fn_span, |pat| pat.span))\n-                }\n+            let (name, span) = if let Some(pat) = pattern {\n+                (pat.simple_ident().map(|ident| ident.name), pat.span)\n             } else {\n                 (None, self.fn_span)\n             };\n@@ -937,13 +907,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // Function arguments always get the first Local indices after the return place\n             let local = Local::new(index + 1);\n             let place = Place::Base(PlaceBase::Local(local));\n-            let &ArgInfo {\n-                ty,\n-                span: opt_ty_info,\n-                pattern,\n-                user_pattern: _,\n-                self_kind: ref self_binding\n-            } = arg_info;\n+            let &ArgInfo(ty, opt_ty_info, pattern, ref self_binding) = arg_info;\n \n             // Make sure we drop (parts of) the argument even when not matched on.\n             self.schedule_drop(\n@@ -958,7 +922,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 match *pattern.kind {\n                     // Don't introduce extra copies for simple bindings\n-                    PatternKind::Binding { mutability, var, mode: BindingMode::ByValue, .. } => {\n+                    PatternKind::Binding {\n+                        mutability,\n+                        var,\n+                        mode: BindingMode::ByValue,\n+                        subpattern: None,\n+                        ..\n+                    } => {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].is_user_variable =\n                             if let Some(kind) = self_binding {"}, {"sha": "0c00b3b20b5b3f36c8391580f64206e67b6960f7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -2018,9 +2018,8 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty], hir::BodyId) {\n \n         Arguments {\n             values: self.0.iter().enumerate().map(|(i, ty)| {\n-                let original_pat = cx.tcx.hir().original_pat_of_argument(&body.arguments[i]);\n                 Argument {\n-                    name: name_from_pat(original_pat),\n+                    name: name_from_pat(&body.arguments[i].pat),\n                     type_: ty.clean(cx),\n                 }\n             }).collect()"}, {"sha": "ef9e7e39df0bcf593918664cb827b08c55c35ec2", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "patch": "@@ -30,7 +30,7 @@ error[E0106]: missing lifetime specifier\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n    |                                   ^^ expected lifetime parameter\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_` or `y`\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n \n error: aborting due to 5 previous errors\n "}]}