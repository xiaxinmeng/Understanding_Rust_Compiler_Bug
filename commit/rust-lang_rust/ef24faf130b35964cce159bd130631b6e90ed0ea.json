{"sha": "ef24faf130b35964cce159bd130631b6e90ed0ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMjRmYWYxMzBiMzU5NjRjY2UxNTliZDEzMDYzMWI2ZTkwZWQwZWE=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-10T01:10:15Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-06-22T16:06:14Z"}, "message": "Refactor non_ascii_idents lints, exclude ascii pair for confusable_idents lint.", "tree": {"sha": "015264289c4dc7b622f28df320163468ca98b56d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015264289c4dc7b622f28df320163468ca98b56d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef24faf130b35964cce159bd130631b6e90ed0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef24faf130b35964cce159bd130631b6e90ed0ea", "html_url": "https://github.com/rust-lang/rust/commit/ef24faf130b35964cce159bd130631b6e90ed0ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef24faf130b35964cce159bd130631b6e90ed0ea/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "html_url": "https://github.com/rust-lang/rust/commit/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3"}], "stats": {"total": 288, "additions": 131, "deletions": 157}, "files": [{"sha": "90bd7ad4acf71f1e66b9afdd583e01a48b02a5c3", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 104, "deletions": 131, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -1,9 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::symbol::{Ident, SymbolStr};\n-use std::hash::{Hash, Hasher};\n-use std::ops::Deref;\n+use rustc_span::symbol::SymbolStr;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -19,158 +17,133 @@ declare_lint! {\n     crate_level_only\n }\n \n-// FIXME: Change this to warn.\n declare_lint! {\n     pub CONFUSABLE_IDENTS,\n-    Allow,\n+    Warn,\n     \"detects visually confusable pairs between identifiers\",\n     crate_level_only\n }\n \n declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);\n \n-enum CowBoxSymStr {\n-    Interned(SymbolStr),\n-    Owned(Box<str>),\n-}\n-\n-impl Deref for CowBoxSymStr {\n-    type Target = str;\n-\n-    fn deref(&self) -> &str {\n-        match self {\n-            CowBoxSymStr::Interned(interned) => interned,\n-            CowBoxSymStr::Owned(ref owned) => owned,\n-        }\n-    }\n-}\n-\n-impl Hash for CowBoxSymStr {\n-    #[inline]\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        Hash::hash(&**self, state)\n-    }\n-}\n-\n-impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n-    #[inline]\n-    fn eq(&self, other: &CowBoxSymStr) -> bool {\n-        PartialEq::eq(&**self, &**other)\n-    }\n-}\n-\n-impl Eq for CowBoxSymStr {}\n-\n-fn calc_skeleton(symbol_str: SymbolStr, buffer: &'_ mut String) -> CowBoxSymStr {\n-    use std::mem::swap;\n-    use unicode_security::confusable_detection::skeleton;\n-    buffer.clear();\n-    buffer.extend(skeleton(&symbol_str));\n-    if symbol_str == *buffer {\n-        CowBoxSymStr::Interned(symbol_str)\n-    } else {\n-        let mut owned = String::new();\n-        swap(buffer, &mut owned);\n-        CowBoxSymStr::Owned(owned.into_boxed_str())\n-    }\n-}\n-\n-fn is_in_ascii_confusable_closure(c: char) -> bool {\n-    // FIXME: move this table to `unicode_security` crate.\n-    // data here corresponds to Unicode 13.\n-    const ASCII_CONFUSABLE_CLOSURE: &[(u64, u64)] = &[(0x00, 0x7f), (0xba, 0xba), (0x2080, 0x2080)];\n-    let c = c as u64;\n-    for &(range_start, range_end) in ASCII_CONFUSABLE_CLOSURE {\n-        if c >= range_start && c <= range_end {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n-fn is_in_ascii_confusable_closure_relevant_list(c: char) -> bool {\n-    // FIXME: move this table to `unicode_security` crate.\n-    // data here corresponds to Unicode 13.\n-    const ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST: &[u64] = &[\n-        0x22, 0x25, 0x27, 0x2f, 0x30, 0x31, 0x49, 0x4f, 0x60, 0x6c, 0x6d, 0x6e, 0x72, 0x7c, 0xba,\n-        0x2080,\n-    ];\n-    let c = c as u64;\n-    for &item in ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST {\n-        if c == item {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n impl EarlyLintPass for NonAsciiIdents {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n         use rustc_session::lint::Level;\n-        if cx.builder.lint_level(CONFUSABLE_IDENTS).0 == Level::Allow {\n+        use rustc_span::Span;\n+        use unicode_security::GeneralSecurityProfile;\n+        use utils::CowBoxSymStr;\n+\n+        let check_non_ascii_idents = cx.builder.lint_level(NON_ASCII_IDENTS).0 != Level::Allow;\n+        let check_uncommon_codepoints =\n+            cx.builder.lint_level(UNCOMMON_CODEPOINTS).0 != Level::Allow;\n+        let check_confusable_idents = cx.builder.lint_level(CONFUSABLE_IDENTS).0 != Level::Allow;\n+\n+        if !check_non_ascii_idents && !check_uncommon_codepoints && !check_confusable_idents {\n             return;\n         }\n+\n+        let mut has_non_ascii_idents = false;\n         let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n-        let mut symbol_strs_and_spans = Vec::with_capacity(symbols.len());\n-        let mut in_fast_path = true;\n-        for (symbol, sp) in symbols.iter() {\n-            // fast path\n+        for (symbol, &sp) in symbols.iter() {\n             let symbol_str = symbol.as_str();\n-            if !symbol_str.chars().all(is_in_ascii_confusable_closure) {\n-                // fallback to slow path.\n-                symbol_strs_and_spans.clear();\n-                in_fast_path = false;\n-                break;\n+            if symbol_str.is_ascii() {\n+                continue;\n             }\n-            if symbol_str.chars().any(is_in_ascii_confusable_closure_relevant_list) {\n-                symbol_strs_and_spans.push((symbol_str, *sp));\n+            has_non_ascii_idents = true;\n+            cx.struct_span_lint(NON_ASCII_IDENTS, sp, |lint| {\n+                lint.build(\"identifier contains non-ASCII characters\").emit()\n+            });\n+            if check_uncommon_codepoints\n+                && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n+            {\n+                cx.struct_span_lint(UNCOMMON_CODEPOINTS, sp, |lint| {\n+                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit()\n+                })\n             }\n         }\n-        if !in_fast_path {\n-            // slow path\n-            for (symbol, sp) in symbols.iter() {\n+\n+        if has_non_ascii_idents && check_confusable_idents {\n+            let mut skeleton_map: FxHashMap<CowBoxSymStr, (SymbolStr, Span, bool)> =\n+                FxHashMap::with_capacity_and_hasher(symbols.len(), Default::default());\n+            let mut str_buf = String::new();\n+            for (symbol, &sp) in symbols.iter() {\n+                fn calc_skeleton(symbol_str: &SymbolStr, buffer: &mut String) -> CowBoxSymStr {\n+                    use std::mem::replace;\n+                    use unicode_security::confusable_detection::skeleton;\n+                    buffer.clear();\n+                    buffer.extend(skeleton(symbol_str));\n+                    if *symbol_str == *buffer {\n+                        CowBoxSymStr::Interned(symbol_str.clone())\n+                    } else {\n+                        let owned = replace(buffer, String::new());\n+                        CowBoxSymStr::Owned(owned.into_boxed_str())\n+                    }\n+                }\n                 let symbol_str = symbol.as_str();\n-                symbol_strs_and_spans.push((symbol_str, *sp));\n+                let is_ascii = symbol_str.is_ascii();\n+                let skeleton = calc_skeleton(&symbol_str, &mut str_buf);\n+                skeleton_map\n+                    .entry(skeleton)\n+                    .and_modify(|(existing_symbolstr, existing_span, existing_is_ascii)| {\n+                        if !*existing_is_ascii || !is_ascii {\n+                            cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n+                                lint.build(&format!(\n+                                    \"identifier pair considered confusable between `{}` and `{}`\",\n+                                    existing_symbolstr, symbol_str\n+                                ))\n+                                .span_label(\n+                                    *existing_span,\n+                                    \"this is where the previous identifier occurred\",\n+                                )\n+                                .emit();\n+                            });\n+                        }\n+                        if *existing_is_ascii && !is_ascii {\n+                            *existing_symbolstr = symbol_str.clone();\n+                            *existing_span = sp;\n+                            *existing_is_ascii = is_ascii;\n+                        }\n+                    })\n+                    .or_insert((symbol_str, sp, is_ascii));\n             }\n         }\n-        drop(symbols);\n-        symbol_strs_and_spans.sort_by_key(|x| x.0.clone());\n-        let mut skeleton_map =\n-            FxHashMap::with_capacity_and_hasher(symbol_strs_and_spans.len(), Default::default());\n-        let mut str_buf = String::new();\n-        for (symbol_str, sp) in symbol_strs_and_spans {\n-            let skeleton = calc_skeleton(symbol_str.clone(), &mut str_buf);\n-            skeleton_map\n-                .entry(skeleton)\n-                .and_modify(|(existing_symbolstr, existing_span)| {\n-                    cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n-                        lint.build(&format!(\n-                            \"identifier pair considered confusable between `{}` and `{}`\",\n-                            existing_symbolstr, symbol_str\n-                        ))\n-                        .span_label(\n-                            *existing_span,\n-                            \"this is where the previous identifier occurred\",\n-                        )\n-                        .emit();\n-                    });\n-                })\n-                .or_insert((symbol_str, sp));\n+    }\n+}\n+\n+mod utils {\n+    use rustc_span::symbol::SymbolStr;\n+    use std::hash::{Hash, Hasher};\n+    use std::ops::Deref;\n+\n+    pub(super) enum CowBoxSymStr {\n+        Interned(SymbolStr),\n+        Owned(Box<str>),\n+    }\n+\n+    impl Deref for CowBoxSymStr {\n+        type Target = str;\n+\n+        fn deref(&self) -> &str {\n+            match self {\n+                CowBoxSymStr::Interned(interned) => interned,\n+                CowBoxSymStr::Owned(ref owned) => owned,\n+            }\n         }\n     }\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n-        use unicode_security::GeneralSecurityProfile;\n-        let name_str = ident.name.as_str();\n-        if name_str.is_ascii() {\n-            return;\n+\n+    impl Hash for CowBoxSymStr {\n+        #[inline]\n+        fn hash<H: Hasher>(&self, state: &mut H) {\n+            Hash::hash(&**self, state)\n         }\n-        cx.struct_span_lint(NON_ASCII_IDENTS, ident.span, |lint| {\n-            lint.build(\"identifier contains non-ASCII characters\").emit()\n-        });\n-        if !name_str.chars().all(GeneralSecurityProfile::identifier_allowed) {\n-            cx.struct_span_lint(UNCOMMON_CODEPOINTS, ident.span, |lint| {\n-                lint.build(\"identifier contains uncommon Unicode codepoints\").emit()\n-            })\n+    }\n+\n+    impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n+        #[inline]\n+        fn eq(&self, other: &CowBoxSymStr) -> bool {\n+            PartialEq::eq(&**self, &**other)\n         }\n     }\n+\n+    impl Eq for CowBoxSymStr {}\n }"}, {"sha": "f4e5da4d54f46e9d6749568c21d02f0efb59e8cb", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -13,6 +13,7 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{MultiSpan, Span, Symbol};\n \n+use std::collections::BTreeMap;\n use std::path::PathBuf;\n use std::str;\n \n@@ -63,7 +64,7 @@ impl GatedSpans {\n #[derive(Default)]\n pub struct SymbolGallery {\n     /// All symbols occurred and their first occurrance span.\n-    pub symbols: Lock<FxHashMap<Symbol, Span>>,\n+    pub symbols: Lock<BTreeMap<Symbol, Span>>,\n }\n \n impl SymbolGallery {"}, {"sha": "e15ed2e70b896fa2b497e2c0cdef2ef34dd7889d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -2,8 +2,14 @@\n #![deny(confusable_idents)]\n #![allow(uncommon_codepoints, non_upper_case_globals)]\n \n-const \uff53: usize = 42; //~ ERROR identifier pair considered confusable\n+const \uff53: usize = 42;\n \n fn main() {\n-    let s = \"rust\";\n+    let s = \"rust\"; //~ ERROR identifier pair considered confusable\n+    not_affected();\n+}\n+\n+fn not_affected() {\n+    let s1 = 1;\n+    let sl = 'l';\n }"}, {"sha": "218f94f7b5829483beb10155f6a0fbc223693043", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -1,11 +1,11 @@\n-error: identifier pair considered confusable between `s` and `\uff53`\n-  --> $DIR/lint-confusable-idents.rs:5:7\n+error: identifier pair considered confusable between `\uff53` and `s`\n+  --> $DIR/lint-confusable-idents.rs:8:9\n    |\n LL | const \uff53: usize = 42;\n-   |       ^^\n+   |       -- this is where the previous identifier occurred\n ...\n LL |     let s = \"rust\";\n-   |         - this is where the previous identifier occurred\n+   |         ^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-confusable-idents.rs:2:9"}, {"sha": "20d00cf701a1569fe5f33ef0b0d0fdbcdc3900a1", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-non-ascii-idents.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -7,5 +7,7 @@ fn co\u00f6peration() {} //~ ERROR identifier contains non-ASCII characters\n \n fn main() {\n     let na\u00efvet\u00e9 = 2; //~ ERROR identifier contains non-ASCII characters\n-    println!(\"{}\", na\u00efvet\u00e9); //~ ERROR identifier contains non-ASCII characters\n+\n+    // using the same identifier the second time won't trigger the lint.\n+    println!(\"{}\", na\u00efvet\u00e9);\n }"}, {"sha": "048b6ff5d687f011dac0ac01991bf589e4821f70", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-non-ascii-idents.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -22,11 +22,5 @@ error: identifier contains non-ASCII characters\n LL |     let na\u00efvet\u00e9 = 2;\n    |         ^^^^^^^\n \n-error: identifier contains non-ASCII characters\n-  --> $DIR/lint-non-ascii-idents.rs:10:20\n-   |\n-LL |     println!(\"{}\", na\u00efvet\u00e9);\n-   |                    ^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "b5e251e047b5ad1f8ca37054603d4b1fb9577185", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-uncommon-codepoints.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -7,5 +7,7 @@ fn d\u0133kstra() {} //~ ERROR identifier contains uncommon Unicode codepoints\n \n fn main() {\n     let \u31fb\u31f2\u31f3 = \"rust\"; //~ ERROR identifier contains uncommon Unicode codepoints\n-    println!(\"{}\", \u31fb\u31f2\u31f3); //~ ERROR identifier contains uncommon Unicode codepoints\n+\n+    // using the same identifier the second time won't trigger the lint.\n+    println!(\"{}\", \u31fb\u31f2\u31f3);\n }"}, {"sha": "05ea3d5de7dbc9759ec0482fd006d8fbad544a7c", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-uncommon-codepoints.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -22,11 +22,5 @@ error: identifier contains uncommon Unicode codepoints\n LL |     let \u31fb\u31f2\u31f3 = \"rust\";\n    |         ^^^^^^\n \n-error: identifier contains uncommon Unicode codepoints\n-  --> $DIR/lint-uncommon-codepoints.rs:10:20\n-   |\n-LL |     println!(\"{}\", \u31fb\u31f2\u31f3);\n-   |                    ^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "5259dfe2e656c9f255920434c7706e45a00799ae", "filename": "src/test/ui/parser/issue-62524.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Fparser%2Fissue-62524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Fparser%2Fissue-62524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62524.rs?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -1,4 +1,6 @@\n // ignore-tidy-trailing-newlines\n // error-pattern: aborting due to 3 previous errors\n+#![allow(uncommon_codepoints)]\n+\n y![\n \u03e4,\n\\ No newline at end of file"}, {"sha": "d5e07622b11b99dce7867a65762ed90655b5d692", "filename": "src/test/ui/parser/issue-62524.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Fparser%2Fissue-62524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef24faf130b35964cce159bd130631b6e90ed0ea/src%2Ftest%2Fui%2Fparser%2Fissue-62524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62524.stderr?ref=ef24faf130b35964cce159bd130631b6e90ed0ea", "patch": "@@ -1,13 +1,13 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-62524.rs:4:3\n+  --> $DIR/issue-62524.rs:6:3\n    |\n LL | y![\n    |   - unclosed delimiter\n LL | \u03e4,\n    |   ^\n \n error: macros that expand to items must be delimited with braces or followed by a semicolon\n-  --> $DIR/issue-62524.rs:3:3\n+  --> $DIR/issue-62524.rs:5:3\n    |\n LL |   y![\n    |  ___^\n@@ -24,7 +24,7 @@ LL | \u03e4,;\n    |   ^\n \n error: cannot find macro `y` in this scope\n-  --> $DIR/issue-62524.rs:3:1\n+  --> $DIR/issue-62524.rs:5:1\n    |\n LL | y![\n    | ^"}]}