{"sha": "a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "node_id": "C_kwDOAAsO6NoAKGE2NGIyYTk1ZmYzMTU1ZmQ2ZGM4NTMxMmNiNGNlYWMyMzJkMjhkMDI", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-05-11T08:55:00Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-05-11T09:00:55Z"}, "message": "Move `#[used]` check for Mach-O to `rustc_typeck` from `rustc_codegen_llvm`", "tree": {"sha": "205b88cf57b9c5e9dc59ca52b205ba8bd0f314b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/205b88cf57b9c5e9dc59ca52b205ba8bd0f314b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmJ7e0cACgkQ4u/UMJ4R\nyKjQ6g//XqXQ8tpMDjfnsGJgtn414Zh+Ek9PLqmP00xzbgv628KOdpgM5gO/Z73p\nNViDpSuRadJMiiqJ0gcxzghsUWCaXBgh9AuuUCEcvEn7QR/KihRaro5pdPv2l4TM\nRv0L8OqAEEL2dmfzCHHCYibdjKLKIN317q7TIfKqh5HACS2jTBqVJ/50txp5fnEA\nKVDVOMXfQqSQJEe3I9KWppUxUreTbzdGVTIpQQZDAIfsVL1X6FARqbHnEY27m9I5\n/y8YXDr4vgcwncQdB0B0MPRz11j1lb3WxqBlvufCJpZgil4q0KUyGkqHNxGV2gy+\n01fR9Kr/oyaSfQCI+VQ4HKbAkenHCBqrtA7yWvwn6F2LOOdXPJQ9aNCHA/Ia4HB3\nXtYGB3hiuyRWu256IAZhQLHJm1llMz36cxVp/0DHzyMUuDntVzfBW5o0w5Vxw2WK\n57xszPdzmQspqzam8loWx2+4yO3lVQIyQewuX8RoocLJnRDB1+BX8Qrm/7wadt9e\nifhTIlayVHzSVd+s23d5zvIGlVqjTFF1NCqbC7nJlYCK0EH1zuEbG7rH+x0ZGDIC\nmVzP/Apy36oXGHenmreiBT98R+88vao7SeipgbI2NCs4p3pteAWMkeSJ2c8/pR4h\n+PYBg2Ead9yrJVo5MeTN5O16NmrhaWQA28sDwKfLounD4HCRs1I=\n=mkId\n-----END PGP SIGNATURE-----", "payload": "tree 205b88cf57b9c5e9dc59ca52b205ba8bd0f314b6\nparent da72295411491b2b64270f5b050955859e743fcd\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1652259300 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1652259655 -0700\n\nMove `#[used]` check for Mach-O to `rustc_typeck` from `rustc_codegen_llvm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "html_url": "https://github.com/rust-lang/rust/commit/a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64b2a95ff3155fd6dc85312cb4ceac232d28d02/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da72295411491b2b64270f5b050955859e743fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/da72295411491b2b64270f5b050955859e743fcd", "html_url": "https://github.com/rust-lang/rust/commit/da72295411491b2b64270f5b050955859e743fcd"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "ea5df91243876818cf370271a4c22cfaaecda0f2", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a64b2a95ff3155fd6dc85312cb4ceac232d28d02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64b2a95ff3155fd6dc85312cb4ceac232d28d02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "patch": "@@ -543,33 +543,13 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                 // in the handling of `.init_array` (the static constructor list) in versions of\n                 // the gold linker (prior to the one released with binutils 2.36).\n                 //\n-                // However, unconditional use of `llvm.compiler.used` caused a nontrivial amount of\n-                // ecosystem breakage, especially on Mach-O targets. To resolve this, we compile it\n-                // as llvm.compiler.used on ELF targets and llvm.used elsewhere, which should be\n-                // equivalent to how we compiled `#[used]` before LLVM 13, as `llvm.used` and\n-                // `llvm.compiler.used` were treated the same on ELF targets prior in earlier LLVM\n-                // versions (additionally, it seems to be how Clang handles `__attribute__((used))`,\n-                // perhaps for similar compatibility-motivated reasons).\n-                //\n-                // See https://github.com/rust-lang/rust/issues/47384#issuecomment-1019080146 and\n-                // following comments for some discussion of this.\n-                //\n-                // The final wrinkle is it's not really clear how to tell if we're going to output\n-                // ELF, so it's been approximated as \"not like wasm, osx, or windows\", which is\n-                // not exactly correct, but is pretty close and hopefully handles all the platforms\n-                // platforms where old versions of `ld.gold` are likely to show up.\n-                //\n-                // All this is subject to change in the future. Which is a good thing, because this\n-                // probably should be firmed up somehow!\n-                let seems_like_elf = !(self.tcx.sess.target.is_like_osx\n-                    || self.tcx.sess.target.is_like_windows\n-                    || self.tcx.sess.target.is_like_wasm);\n-\n-                if seems_like_elf {\n-                    self.add_compiler_used_global(g);\n-                } else {\n-                    self.add_used_global(g);\n-                }\n+                // That said, we only ever emit these when compiling for ELF targets, unless\n+                // `#[used(compiler)]` is explicitly requested. This is to avoid similar breakage\n+                // on other targets, in particular MachO targets have *their* static constructor\n+                // lists broken if `llvm.compiler.used` is emitted rather than llvm.used. However,\n+                // that check happens when assigning the `CodegenFnAttrFlags` in `rustc_typeck`,\n+                // so we don't need to take care of it here.\n+                self.add_compiler_used_global(g);\n             }\n             if attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {\n                 // `USED` and `USED_LINKER` can't be used together."}, {"sha": "e13c8322e33ef0832a7b81a888036ef167634c06", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a64b2a95ff3155fd6dc85312cb4ceac232d28d02/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64b2a95ff3155fd6dc85312cb4ceac232d28d02/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "patch": "@@ -2850,7 +2850,37 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         )\n                         .emit();\n                 }\n-                None => codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED,\n+                None => {\n+                    // Unfortunately, unconditionally using `llvm.used` causes\n+                    // issues in handling `.init_array` with the gold linker,\n+                    // but using `llvm.compiler.used` caused a nontrival amount\n+                    // of unintentional ecosystem breakage -- particularly on\n+                    // Mach-O targets.\n+                    //\n+                    // As a result, we emit `llvm.compiler.used` only on ELF\n+                    // targets. This is somewhat ad-hoc, but actually follows\n+                    // our pre-LLVM 13 behavior (prior to the ecosystem\n+                    // breakage), and seems to match `clang`'s behavior as well\n+                    // (both before and after LLVM 13), possibly because they\n+                    // have similar compatibility concerns to us. See\n+                    // https://github.com/rust-lang/rust/issues/47384#issuecomment-1019080146\n+                    // and following comments for some discussion of this, as\n+                    // well as the comments in `rustc_codegen_llvm` where these\n+                    // flags are handled.\n+                    //\n+                    // Anyway, to be clear: this is still up in the air\n+                    // somewhat, and is subject to change in the future (which\n+                    // is a good thing, because this would ideally be a bit\n+                    // more firmed up).\n+                    let is_like_elf = !(tcx.sess.target.is_like_osx\n+                        || tcx.sess.target.is_like_windows\n+                        || tcx.sess.target.is_like_wasm);\n+                    codegen_fn_attrs.flags = if is_like_elf {\n+                        CodegenFnAttrFlags::USED\n+                    } else {\n+                        CodegenFnAttrFlags::USED_LINKER\n+                    };\n+                }\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n             if !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. }) {"}]}