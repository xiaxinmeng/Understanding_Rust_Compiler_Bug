{"sha": "5b9941ca475a863f420ca55cd49712db54a94d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTk0MWNhNDc1YTg2M2Y0MjBjYTU1Y2Q0OTcxMmRiNTRhOTRkMWQ=", "commit": {"author": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-18T11:32:58Z"}, "committer": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-18T11:33:18Z"}, "message": "Add remote-test-client help text", "tree": {"sha": "30b4da944a656c98d5324856a6ab17b025f8aecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b4da944a656c98d5324856a6ab17b025f8aecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9941ca475a863f420ca55cd49712db54a94d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9941ca475a863f420ca55cd49712db54a94d1d", "html_url": "https://github.com/rust-lang/rust/commit/5b9941ca475a863f420ca55cd49712db54a94d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9941ca475a863f420ca55cd49712db54a94d1d/comments", "author": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bf05693c2c16e299f1adc279b54c37a8edef27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf05693c2c16e299f1adc279b54c37a8edef27", "html_url": "https://github.com/rust-lang/rust/commit/d4bf05693c2c16e299f1adc279b54c37a8edef27"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "3379d82eda829d4e4f188814d8a4dab6a4ed126a", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5b9941ca475a863f420ca55cd49712db54a94d1d/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9941ca475a863f420ca55cd49712db54a94d1d/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=5b9941ca475a863f420ca55cd49712db54a94d1d", "patch": "@@ -18,6 +18,7 @@ use std::thread;\n use std::time::Duration;\n \n const REMOTE_ADDR_ENV: &str = \"TEST_DEVICE_ADDR\";\n+const DEFAULT_ADDR: &str = \"127.0.0.1:12345\";\n \n macro_rules! t {\n     ($e:expr) => {\n@@ -30,8 +31,12 @@ macro_rules! t {\n \n fn main() {\n     let mut args = env::args().skip(1);\n+    let next = args.next();\n+    if next.is_none() {\n+        return help();\n+    }\n \n-    match &args.next().unwrap()[..] {\n+    match &next.unwrap()[..] {\n         \"spawn-emulator\" => spawn_emulator(\n             &args.next().unwrap(),\n             Path::new(&args.next().unwrap()),\n@@ -40,12 +45,16 @@ fn main() {\n         ),\n         \"push\" => push(Path::new(&args.next().unwrap())),\n         \"run\" => run(args.next().unwrap(), args.collect()),\n-        cmd => panic!(\"unknown command: {}\", cmd),\n+        \"help\" | \"-h\" | \"--help\" => help(),\n+        cmd => {\n+            println!(\"unknown command: {}\", cmd);\n+            help();\n+        }\n     }\n }\n \n fn spawn_emulator(target: &str, server: &Path, tmpdir: &Path, rootfs: Option<PathBuf>) {\n-    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(\"127.0.0.1:12345\".to_string());\n+    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(DEFAULT_ADDR.to_string());\n \n     if env::var(REMOTE_ADDR_ENV).is_ok() {\n         println!(\"Connecting to remote device {} ...\", device_address);\n@@ -172,7 +181,7 @@ fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path\n }\n \n fn push(path: &Path) {\n-    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(\"127.0.0.1:12345\".to_string());\n+    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(DEFAULT_ADDR.to_string());\n     let client = t!(TcpStream::connect(device_address));\n     let mut client = BufWriter::new(client);\n     t!(client.write_all(b\"push\"));\n@@ -189,7 +198,7 @@ fn push(path: &Path) {\n }\n \n fn run(files: String, args: Vec<String>) {\n-    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(\"127.0.0.1:12345\".to_string());\n+    let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(DEFAULT_ADDR.to_string());\n     let client = t!(TcpStream::connect(device_address));\n     let mut client = BufWriter::new(client);\n     t!(client.write_all(b\"run \"));\n@@ -284,3 +293,40 @@ fn send(path: &Path, dst: &mut dyn Write) {\n     t!(dst.write_all(&[(amt >> 24) as u8, (amt >> 16) as u8, (amt >> 8) as u8, (amt >> 0) as u8,]));\n     t!(io::copy(&mut file, dst));\n }\n+\n+fn help() {\n+    println!(\n+        \"\n+Usage: {0} <command> [<args>]\n+\n+Sub-commands:\n+    spawn-emulator <target> <server> <tmpdir> [rootfs]   See below\n+    push <path>                                          Copy <path> to emulator\n+    run <files> [args...]                                Run program on emulator\n+    help                                                 Display help message\n+\n+Spawning an emulator:\n+\n+For Android <target>s, adb will push the <server>, set up TCP forwarding and run\n+the <server>. Otherwise qemu emulates the target using a rootfs image created in\n+<tmpdir> and generated from <rootfs> plus the <server> executable.\n+If {1} is set in the environment, this step is skipped.\n+\n+Pushing a path to a running emulator:\n+\n+A running emulator or adb device is connected to at the IP address and port in\n+the {1} environment variable or {2} if this isn't\n+specified. The file at <path> is sent to this target.\n+\n+Executing commands on a running emulator:\n+\n+First the target emulator/adb session is connected to as for pushing files. Next\n+the colon separated list of <files> is pushed to the target. Finally, the first\n+file in <files> is executed in the emulator, preserving the current environment.\n+That command's status code is returned.\n+\",\n+        env::args().next().unwrap(),\n+        REMOTE_ADDR_ENV,\n+        DEFAULT_ADDR\n+    );\n+}"}]}