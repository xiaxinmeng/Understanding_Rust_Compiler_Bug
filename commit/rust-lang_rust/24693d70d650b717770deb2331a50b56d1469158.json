{"sha": "24693d70d650b717770deb2331a50b56d1469158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjkzZDcwZDY1MGI3MTc3NzBkZWIyMzMxYTUwYjU2ZDE0NjkxNTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T18:07:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T18:07:37Z"}, "message": "Adjust tracking issues for `MaybeUninit<T>` gates", "tree": {"sha": "ab8123683ff3ec394a1f30a924bbbbbd4a39bdd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8123683ff3ec394a1f30a924bbbbbd4a39bdd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24693d70d650b717770deb2331a50b56d1469158", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVE3pCRBK7hj4Ov3rIwAAdHIIAFnYU3J3r6JK+RJS6CbGWEli\nqMonq6ovKH9OmcYhBXYEjRZEVr76h29dr+iVT9JK4jeswWwvdOX9WcbsD93iHo09\n932Hsyz1JqvYF8zFRmQtmlxIj+8c1d3rHZDZhIxgfoc4eBQBOYpF4EDYt+B2MEWl\njYooOeiSt1Xc8xTAA+WJbC+C9jutRAtbRSiQprUFe6RnHwQN64xwuuWjrlzTSqYg\ng5TJU9gr7+I/sLT6vtb4B5rNCmEuGcMkwdWtowFuKHl1EcFDP5+yBjaRBsNbmwdm\nsRYN33x7Q012Smf04Y6D7GGumu76S66Lfz9P3J5I+BExtR6xYAlBkcudF7PHgYE=\n=JDIS\n-----END PGP SIGNATURE-----\n", "payload": "tree ab8123683ff3ec394a1f30a924bbbbbd4a39bdd4\nparent c43d03a19f326f4a323569328cc501e86eb6d22e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565806057 +0200\ncommitter GitHub <noreply@github.com> 1565806057 +0200\n\nAdjust tracking issues for `MaybeUninit<T>` gates"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24693d70d650b717770deb2331a50b56d1469158", "html_url": "https://github.com/rust-lang/rust/commit/24693d70d650b717770deb2331a50b56d1469158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24693d70d650b717770deb2331a50b56d1469158/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43d03a19f326f4a323569328cc501e86eb6d22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43d03a19f326f4a323569328cc501e86eb6d22e", "html_url": "https://github.com/rust-lang/rust/commit/c43d03a19f326f4a323569328cc501e86eb6d22e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c48fcfe99d2907ce3642c7ce31b9db96ec7ea1af", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24693d70d650b717770deb2331a50b56d1469158/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24693d70d650b717770deb2331a50b56d1469158/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=24693d70d650b717770deb2331a50b56d1469158", "patch": "@@ -312,7 +312,7 @@ impl<T> MaybeUninit<T> {\n     /// without dropping it, so be careful not to use this twice unless you want to\n     /// skip running the destructor. For your convenience, this also returns a mutable\n     /// reference to the (now safely initialized) contents of `self`.\n-    #[unstable(feature = \"maybe_uninit_extra\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub fn write(&mut self, val: T) -> &mut T {\n         unsafe {\n@@ -502,7 +502,7 @@ impl<T> MaybeUninit<T> {\n     /// // We now created two copies of the same vector, leading to a double-free when\n     /// // they both get dropped!\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_extra\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub unsafe fn read(&self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n@@ -516,7 +516,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n         &*self.value\n@@ -532,21 +532,21 @@ impl<T> MaybeUninit<T> {\n     // FIXME(#53491): We currently rely on the above being incorrect, i.e., we have references\n     // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n     // a final decision about the rules before stabilization.\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n         &mut *self.value\n     }\n \n     /// Gets a pointer to the first element of the array.\n-    #[unstable(feature = \"maybe_uninit_slice\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this as *const [MaybeUninit<T>] as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n-    #[unstable(feature = \"maybe_uninit_slice\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn first_ptr_mut(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this as *mut [MaybeUninit<T>] as *mut T"}]}