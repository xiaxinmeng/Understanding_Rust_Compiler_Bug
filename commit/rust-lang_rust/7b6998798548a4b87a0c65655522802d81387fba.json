{"sha": "7b6998798548a4b87a0c65655522802d81387fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjk5ODc5ODU0OGE0Yjg3YTBjNjU2NTU1MjI4MDJkODEzODdmYmE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-02-02T16:34:08Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-02-05T21:56:57Z"}, "message": "Add regression test for ICE that happened on incr comp\n\nAn ICE happened when certain code is compiled in incremental compilation\nmode and there are two `Ident`s that have the same `StableHash` value\nbut are considered different by `Eq` and `Hash`.\n\nThe `Ident` issue is now fixed.", "tree": {"sha": "9dcd674d82c5d20f0af1997e52c94da944754a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dcd674d82c5d20f0af1997e52c94da944754a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6998798548a4b87a0c65655522802d81387fba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmAdvykACgkQgTGiTgx5\n769ISA/9FDC+urGvxB+uujHXuYz/bGl4ukfx6hEV7F3Q7ZkFdFfpEbO5UWUnzL4x\nTZXRIzxd6QDWU6jC0l3gV5Mn6i6s53X6PHHrbKAyhEsHnzBUeiXWJR9LpBHERQG3\nJlh+fGi6TbMJieo3/3LjgmLeJD2H3v90SHf2jnoRqbPb00OQw3yxyDK9CqL3KwVu\nvJtehZD6J3BTRyLtIbCG9iNg+io2pn8xEobBOK6m7eI4VWPL4eFJvDlc8F0pMMTw\n+cNvLA8RmlV2Oo1HTLrhmCYvgaIDO9GILuy8ahHni072eCWYCIRSPH9+xPQLZZ5/\nVWf2PPdPZ/WjcP8zjtqMx5vD9A16gf0RSHGWQ7ZgJ44MXQshnIisGcZiV9n7htmI\nIWXf6sxBiTX9082SGOW3e9Sn1bYxeJ2sVtNWF6IxngMg9MQlZ4InKoLgY5tPv46Q\nmABI7sIcr07fp50oI50ziZhPc1LUzv+SD5Ji1RXZbg4ib1AXZMkFcJu/BYrtAHx7\nMiEti5uLxrFg/VFOP4O8tv8Cdso+1HMJ7vz9usV+mrQu++Go09wmaPgOV0+jjTlp\nXGDtVm8aeTSgzdsQlC8S1nWNUdUmNW+b+ykfagi1rD3F3bYC72wNsGAqjDrOKfRm\nbqQs19lBZbXnKKxhMCdLjoetrYurQq7uko0y2lwBfYrHRLaAthE=\n=mtes\n-----END PGP SIGNATURE-----", "payload": "tree 9dcd674d82c5d20f0af1997e52c94da944754a07\nparent 7aa602b84c93c0f2072e0e1638a1cddcd9637ca4\nauthor Santiago Pastorino <spastorino@gmail.com> 1612283648 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1612562217 -0300\n\nAdd regression test for ICE that happened on incr comp\n\nAn ICE happened when certain code is compiled in incremental compilation\nmode and there are two `Ident`s that have the same `StableHash` value\nbut are considered different by `Eq` and `Hash`.\n\nThe `Ident` issue is now fixed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6998798548a4b87a0c65655522802d81387fba", "html_url": "https://github.com/rust-lang/rust/commit/7b6998798548a4b87a0c65655522802d81387fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6998798548a4b87a0c65655522802d81387fba/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa602b84c93c0f2072e0e1638a1cddcd9637ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa602b84c93c0f2072e0e1638a1cddcd9637ca4", "html_url": "https://github.com/rust-lang/rust/commit/7aa602b84c93c0f2072e0e1638a1cddcd9637ca4"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "ad5c6aed97c2c3ce7fb57c7215a839fc33b49a32", "filename": "src/test/ui/associated-type-bounds/traits-assoc-type-macros.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7b6998798548a4b87a0c65655522802d81387fba/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6998798548a4b87a0c65655522802d81387fba/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs?ref=7b6998798548a4b87a0c65655522802d81387fba", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+// compile-flags:-Cincremental=tmp/traits-assoc-type-macros\n+\n+// This test case makes sure that we can compile with incremental compilation\n+// enabled when there are macros, traits, inheritance and associated types involved.\n+\n+trait Deserializer {\n+    type Error;\n+}\n+\n+trait Deserialize {\n+    fn deserialize<D>(_: D) -> D::Error\n+    where\n+        D: Deserializer;\n+}\n+\n+macro_rules! impl_deserialize {\n+    ($name:ident) => {\n+        impl Deserialize for $name {\n+            fn deserialize<D>(_: D) -> D::Error\n+            where\n+                D: Deserializer,\n+            {\n+                loop {}\n+            }\n+        }\n+    };\n+}\n+\n+macro_rules! formats {\n+    {\n+        $($name:ident,)*\n+    } => {\n+        $(\n+            pub struct $name;\n+\n+            impl_deserialize!($name);\n+        )*\n+    }\n+}\n+formats! { Foo, Bar, }\n+\n+fn main() {}"}]}