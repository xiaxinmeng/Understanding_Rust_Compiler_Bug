{"sha": "d39f6fc676267f8009c0aad6716c53b0828859ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOWY2ZmM2NzYyNjdmODAwOWMwYWFkNjcxNmM1M2IwODI4ODU5YWI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-16T21:44:27Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-16T21:50:47Z"}, "message": "Add support for terminal states (issue #2862)", "tree": {"sha": "1033d129843a2a5311eeaf7d6399310ddddc9836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1033d129843a2a5311eeaf7d6399310ddddc9836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39f6fc676267f8009c0aad6716c53b0828859ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39f6fc676267f8009c0aad6716c53b0828859ab", "html_url": "https://github.com/rust-lang/rust/commit/d39f6fc676267f8009c0aad6716c53b0828859ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39f6fc676267f8009c0aad6716c53b0828859ab/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46bf6e716c718750b0d63c72dd5075e1be9f3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46bf6e716c718750b0d63c72dd5075e1be9f3ae", "html_url": "https://github.com/rust-lang/rust/commit/c46bf6e716c718750b0d63c72dd5075e1be9f3ae"}], "stats": {"total": 162, "additions": 114, "deletions": 48}, "files": [{"sha": "3ea088b50e2dfb6019f192afea658822695af003", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=d39f6fc676267f8009c0aad6716c53b0828859ab", "patch": "@@ -160,6 +160,12 @@ impl ast_builder for ext_ctxt {\n           span: empty_span()}\n     }\n \n+    fn ty_nil() -> @ast::ty {\n+        @{id: self.next_id(),\n+          node: ast::ty_nil,\n+          span: empty_span()}\n+    }\n+\n     fn item_ty_poly(name: ident,\n                     ty: @ast::ty,\n                     +params: ~[ast::ty_param]) -> @ast::item {"}, {"sha": "39084def7e4b9a965fe59fe49ce753a53e1dae5f", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=d39f6fc676267f8009c0aad6716c53b0828859ab", "patch": "@@ -44,33 +44,45 @@ impl proto_parser for parser {\n         self.parse_unspanned_seq(\n             token::LBRACE, token::RBRACE,\n             {sep: some(token::COMMA), trailing_sep_allowed: true},\n-            |self| {\n-                let mname = self.parse_ident();\n+            |self| self.parse_message(state));\n+    }\n \n-                let args = if self.token == token::LPAREN {\n-                    self.parse_unspanned_seq(token::LPAREN,\n-                                             token::RPAREN,\n-                                             {sep: some(token::COMMA),\n-                                              trailing_sep_allowed: true},\n-                                             |p| p.parse_ty(false))\n-                }\n-                else { ~[] };\n+    fn parse_message(state: state) {\n+        let mname = self.parse_ident();\n \n-                self.expect(token::RARROW);\n+        let args = if self.token == token::LPAREN {\n+            self.parse_unspanned_seq(token::LPAREN,\n+                                     token::RPAREN,\n+                                     {sep: some(token::COMMA),\n+                                      trailing_sep_allowed: true},\n+                                     |p| p.parse_ty(false))\n+        }\n+        else { ~[] };\n \n-                let next = self.parse_ident();\n+        self.expect(token::RARROW);\n \n-                let ntys = if self.token == token::LT {\n-                    self.parse_unspanned_seq(token::LT,\n-                                             token::GT,\n-                                             {sep: some(token::COMMA),\n-                                              trailing_sep_allowed: true},\n-                                             |p| p.parse_ty(false))\n-                }\n-                else { ~[] };\n+        let next = alt copy self.token {\n+          token::IDENT(_, _) {\n+            let name = self.parse_ident();\n+            let ntys = if self.token == token::LT {\n+                self.parse_unspanned_seq(token::LT,\n+                                         token::GT,\n+                                         {sep: some(token::COMMA),\n+                                          trailing_sep_allowed: true},\n+                                         |p| p.parse_ty(false))\n+            }\n+            else { ~[] };\n+            some({state: name, tys: ntys})\n+          }\n+          token::NOT {\n+            // -> !\n+            self.bump();\n+            none\n+          }\n+          _ { self.fatal(~\"invalid next state\") }\n+        };\n \n-                state.add_message(mname, args, next, ntys);\n+        state.add_message(mname, args, next);\n \n-            });\n     }\n }"}, {"sha": "fa8fd67f0315651df9083bb880dfc7725a687924", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 71, "deletions": 22, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=d39f6fc676267f8009c0aad6716c53b0828859ab", "patch": "@@ -40,15 +40,17 @@ impl methods for direction {\n     }\n }\n \n+type next_state = option<{state: ident, tys: ~[@ast::ty]}>;\n+\n enum message {\n-    // name, data, current state, next state, next tys\n-    message(ident, ~[@ast::ty], state, ident, ~[@ast::ty])\n+    // name, data, current state, next state\n+    message(ident, ~[@ast::ty], state, next_state)\n }\n \n impl methods for message {\n     fn name() -> ident {\n         alt self {\n-          message(id, _, _, _, _) {\n+          message(id, _, _, _) {\n             id\n           }\n         }\n@@ -57,15 +59,17 @@ impl methods for message {\n     // Return the type parameters actually used by this message\n     fn get_params() -> ~[ast::ty_param] {\n         alt self {\n-          message(_, _, this, _, _) {\n+          message(_, _, this, _) {\n             this.ty_params\n           }\n         }\n     }\n \n     fn gen_send(cx: ext_ctxt) -> @ast::item {\n+        #debug(\"pipec: gen_send\");\n         alt self {\n-          message(id, tys, this, next, next_tys) {\n+          message(id, tys, this, some({state: next, tys: next_tys})) {\n+            #debug(\"pipec: next state exists\");\n             let next = this.proto.get_state(next);\n             assert next_tys.len() == next.ty_params.len();\n             let arg_names = tys.mapi(|i, _ty| @(~\"x_\" + i.to_str()));\n@@ -107,6 +111,45 @@ impl methods for message {\n                             self.get_params(),\n                             cx.expr_block(body))\n           }\n+\n+          message(id, tys, this, none) {\n+            #debug(\"pipec: no next state\");\n+            let arg_names = tys.mapi(|i, _ty| @(~\"x_\" + i.to_str()));\n+\n+            let args_ast = (arg_names, tys).map(\n+                |n, t| cx.arg_mode(n, t, ast::by_copy)\n+            );\n+\n+            let args_ast = vec::append(\n+                ~[cx.arg_mode(@~\"pipe\",\n+                              cx.ty_path(path(this.data_name())\n+                                        .add_tys(cx.ty_vars(this.ty_params))),\n+                              ast::by_copy)],\n+                args_ast);\n+\n+            let message_args = if arg_names.len() == 0 {\n+                ~\"\"\n+            }\n+            else {\n+                ~\"(\" + str::connect(arg_names.map(|x| *x), ~\", \") + ~\")\"\n+            };\n+\n+            let mut body = ~\"{ \";\n+            body += #fmt(\"let message = %s::%s%s;\\n\",\n+                         *this.proto.name,\n+                         *self.name(),\n+                         message_args);\n+            body += #fmt(\"pipes::send(pipe, message);\\n\");\n+            body += ~\" }\";\n+\n+            let body = cx.parse_expr(body);\n+\n+            cx.item_fn_poly(self.name(),\n+                            args_ast,\n+                            cx.ty_nil(),\n+                            self.get_params(),\n+                            cx.expr_block(body))\n+          }\n         }\n     }\n }\n@@ -122,9 +165,9 @@ enum state {\n }\n \n impl methods for state {\n-    fn add_message(name: ident, +data: ~[@ast::ty], next: ident,\n-                   +next_tys: ~[@ast::ty]) {\n-        self.messages.push(message(name, data, self, next, next_tys));\n+    fn add_message(name: ident, +data: ~[@ast::ty], next: next_state) {\n+        self.messages.push(message(name, data, self,\n+                                   next));\n     }\n \n     fn filename() -> ~str {\n@@ -140,6 +183,7 @@ impl methods for state {\n     }\n \n     fn to_type_decls(cx: ext_ctxt) -> ~[@ast::item] {\n+        #debug(\"pipec: to_type_decls\");\n         // This compiles into two different type declarations. Say the\n         // state is called ping. This will generate both `ping` and\n         // `ping_message`. The first contains data that the user cares\n@@ -151,22 +195,26 @@ impl methods for state {\n         let mut items_msg = ~[];\n \n         for self.messages.each |m| {\n-            let message(_, tys, this, next, next_tys) = m;\n-\n-            let name = m.name();\n-            let next = this.proto.get_state(next);\n-            let next_name = next.data_name();\n-\n-            let dir = alt this.dir {\n-              send { @~\"server\" }\n-              recv { @~\"client\" }\n+            let message(name, tys, this, next) = m;\n+\n+            let tys = alt next {\n+              some({state: next, tys: next_tys}) {\n+                let next = this.proto.get_state(next);\n+                let next_name = next.data_name();\n+\n+                let dir = alt this.dir {\n+                  send { @~\"server\" }\n+                  recv { @~\"client\" }\n+                };\n+\n+                vec::append_one(tys,\n+                                cx.ty_path((dir + next_name)\n+                                           .add_tys(next_tys)))\n+              }\n+              none { tys }\n             };\n \n-            let v = cx.variant(name,\n-                               vec::append_one(\n-                                   tys,\n-                                   cx.ty_path((dir + next_name)\n-                                              .add_tys(next_tys))));\n+            let v = cx.variant(name, tys);\n \n             vec::push(items_msg, v);\n         }\n@@ -175,6 +223,7 @@ impl methods for state {\n     }\n \n     fn to_endpoint_decls(cx: ext_ctxt, dir: direction) -> ~[@ast::item] {\n+        #debug(\"pipec: to_endpoint_decls\");\n         let dir = alt dir {\n           send { (*self).dir }\n           recv { (*self).dir.reverse() }"}, {"sha": "5aab6b634b8107408885d802a3f3fb691f21a975", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39f6fc676267f8009c0aad6716c53b0828859ab/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=d39f6fc676267f8009c0aad6716c53b0828859ab", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n // xfail-pretty\n // xfail-win32\n \n@@ -10,7 +9,7 @@ import pipes::{recv, select};\n \n proto! oneshot {\n     waiting:send {\n-        signal -> signaled\n+        signal -> !\n     }\n \n     signaled:send { }\n@@ -86,14 +85,14 @@ fn test_select2() {\n       either::right(*) { fail }\n     }\n \n-    stream::client::send(bc, \"abc\");\n+    stream::client::send(bc, ~\"abc\");\n \n     #error(\"done with first select2\");\n \n     let (ac, ap) = stream::init();\n     let (bc, bp) = stream::init();\n \n-    stream::client::send(bc, \"abc\");\n+    stream::client::send(bc, ~\"abc\");\n \n     alt pipes::select2(ap, bp) {\n       either::left(*) { fail }"}]}