{"sha": "f1e3d40456ad9d9b508439d828dac14c0670455b", "node_id": "C_kwDOAAsO6NoAKGYxZTNkNDA0NTZhZDlkOWI1MDg0MzlkODI4ZGFjMTRjMDY3MDQ1NWI", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-02-02T22:48:09Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2022-05-24T22:58:45Z"}, "message": "Make llvm-libunwind a per-target option", "tree": {"sha": "78b83b18dfe1b873a9f599a1674a5a3d3240b565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b83b18dfe1b873a9f599a1674a5a3d3240b565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e3d40456ad9d9b508439d828dac14c0670455b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e3d40456ad9d9b508439d828dac14c0670455b", "html_url": "https://github.com/rust-lang/rust/commit/f1e3d40456ad9d9b508439d828dac14c0670455b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e3d40456ad9d9b508439d828dac14c0670455b/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa70b89d19a52be0dea03022d807a3e615763727", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70b89d19a52be0dea03022d807a3e615763727", "html_url": "https://github.com/rust-lang/rust/commit/fa70b89d19a52be0dea03022d807a3e615763727"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "a810e8c0e12d6e02cb8b7b99b39eb587faf6f615", "filename": "config.toml.example", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1e3d40456ad9d9b508439d828dac14c0670455b/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f1e3d40456ad9d9b508439d828dac14c0670455b/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f1e3d40456ad9d9b508439d828dac14c0670455b", "patch": "@@ -605,16 +605,9 @@ changelog-seen = 2\n # development of NLL\n #test-compare-mode = false\n \n-# Use LLVM libunwind as the implementation for Rust's unwinder.\n-# Accepted values are 'in-tree' (formerly true), 'system' or 'no' (formerly false).\n-# This option only applies for Linux and Fuchsia targets.\n-# On Linux target, if crt-static is not enabled, 'no' means dynamic link to\n-# `libgcc_s.so`, 'in-tree' means static link to the in-tree build of llvm libunwind\n-# and 'system' means dynamic link to `libunwind.so`. If crt-static is enabled,\n-# the behavior is depend on the libc. On musl target, 'no' and 'in-tree' both\n-# means static link to the in-tree build of llvm libunwind, and 'system' means\n-# static link to `libunwind.a` provided by system. Due to the limitation of glibc,\n-# it must link to `libgcc_eh.a` to get a working output, and this option have no effect.\n+# Global default for llvm-libunwind for all targets. See the target-specific\n+# documentation for llvm-libunwind below. Note that the target-specific\n+# option will override this if set.\n #llvm-libunwind = 'no'\n \n # Enable Windows Control Flow Guard checks in the standard library.\n@@ -671,6 +664,18 @@ changelog-seen = 2\n # not, you can specify an explicit file name for it.\n #llvm-filecheck = \"/path/to/llvm-version/bin/FileCheck\"\n \n+# Use LLVM libunwind as the implementation for Rust's unwinder.\n+# Accepted values are 'in-tree' (formerly true), 'system' or 'no' (formerly false).\n+# This option only applies for Linux and Fuchsia targets.\n+# On Linux target, if crt-static is not enabled, 'no' means dynamic link to\n+# `libgcc_s.so`, 'in-tree' means static link to the in-tree build of llvm libunwind\n+# and 'system' means dynamic link to `libunwind.so`. If crt-static is enabled,\n+# the behavior is depend on the libc. On musl target, 'no' and 'in-tree' both\n+# means static link to the in-tree build of llvm libunwind, and 'system' means\n+# static link to `libunwind.a` provided by system. Due to the limitation of glibc,\n+# it must link to `libgcc_eh.a` to get a working output, and this option have no effect.\n+#llvm-libunwind = 'no' if Linux, 'in-tree' if Fuchsia\n+\n # If this target is for Android, this option will be required to specify where\n # the NDK for the target lives. This is used to find the C compiler to link and\n # build native code."}, {"sha": "0b430f64e1edc94ee2622f7b4a9b5b750ff76bff", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f1e3d40456ad9d9b508439d828dac14c0670455b", "patch": "@@ -176,7 +176,7 @@ fn copy_third_party_objects(\n \n     if target == \"x86_64-fortanix-unknown-sgx\"\n         || target.contains(\"pc-windows-gnullvm\")\n-        || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n+        || builder.config.llvm_libunwind(target) == LlvmLibunwind::InTree\n             && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n     {\n         let libunwind_path ="}, {"sha": "843d276cd7a88d201beaa91bfcc11755914ce5b3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f1e3d40456ad9d9b508439d828dac14c0670455b", "patch": "@@ -67,7 +67,6 @@ pub struct Config {\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n-    pub llvm_libunwind: LlvmLibunwind,\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n \n@@ -151,6 +150,7 @@ pub struct Config {\n     pub rust_profile_generate: Option<String>,\n     pub llvm_profile_use: Option<String>,\n     pub llvm_profile_generate: bool,\n+    pub llvm_libunwind_default: Option<LlvmLibunwind>,\n \n     pub build: TargetSelection,\n     pub hosts: Vec<TargetSelection>,\n@@ -342,6 +342,7 @@ pub struct Target {\n     pub llvm_config: Option<PathBuf>,\n     /// Some(path to FileCheck) if one was specified.\n     pub llvm_filecheck: Option<PathBuf>,\n+    pub llvm_libunwind: Option<LlvmLibunwind>,\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ar: Option<PathBuf>,\n@@ -680,6 +681,7 @@ define_config! {\n         linker: Option<String> = \"linker\",\n         llvm_config: Option<String> = \"llvm-config\",\n         llvm_filecheck: Option<String> = \"llvm-filecheck\",\n+        llvm_libunwind: Option<String> = \"llvm-libunwind\",\n         android_ndk: Option<String> = \"android-ndk\",\n         sanitizers: Option<bool> = \"sanitizers\",\n         profiler: Option<bool> = \"profiler\",\n@@ -1043,10 +1045,6 @@ impl Config {\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.jemalloc, rust.jemalloc);\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n-            config.llvm_libunwind = rust\n-                .llvm_libunwind\n-                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"))\n-                .unwrap_or_default();\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel);\n             config.description = rust.description;\n@@ -1069,6 +1067,9 @@ impl Config {\n             config.rust_thin_lto_import_instr_limit = rust.thin_lto_import_instr_limit;\n             set(&mut config.rust_remap_debuginfo, rust.remap_debuginfo);\n             set(&mut config.control_flow_guard, rust.control_flow_guard);\n+            config.llvm_libunwind_default = rust\n+                .llvm_libunwind\n+                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n \n             if let Some(ref backends) = rust.codegen_backends {\n                 config.rust_codegen_backends =\n@@ -1095,6 +1096,10 @@ impl Config {\n                 if let Some(ref s) = cfg.llvm_filecheck {\n                     target.llvm_filecheck = Some(config.src.join(s));\n                 }\n+                target.llvm_libunwind = cfg\n+                    .llvm_libunwind\n+                    .as_ref()\n+                    .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n                 if let Some(ref s) = cfg.android_ndk {\n                     target.ndk = Some(config.src.join(s));\n                 }\n@@ -1328,6 +1333,14 @@ impl Config {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n     }\n \n+    pub fn llvm_libunwind(&self, target: TargetSelection) -> LlvmLibunwind {\n+        self.target_config\n+            .get(&target)\n+            .and_then(|t| t.llvm_libunwind)\n+            .or(self.llvm_libunwind_default)\n+            .unwrap_or(LlvmLibunwind::No)\n+    }\n+\n     pub fn submodules(&self, rust_info: &GitInfo) -> bool {\n         self.submodules.unwrap_or(rust_info.is_git())\n     }"}, {"sha": "591f9a1ca50d3a36f083efc4c412fa5d76309881", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e3d40456ad9d9b508439d828dac14c0670455b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f1e3d40456ad9d9b508439d828dac14c0670455b", "patch": "@@ -720,7 +720,7 @@ impl Build {\n     fn std_features(&self, target: TargetSelection) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n-        match self.config.llvm_libunwind {\n+        match self.config.llvm_libunwind(target) {\n             LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),\n             LlvmLibunwind::System => features.push_str(\" system-llvm-libunwind\"),\n             LlvmLibunwind::No => {}"}]}