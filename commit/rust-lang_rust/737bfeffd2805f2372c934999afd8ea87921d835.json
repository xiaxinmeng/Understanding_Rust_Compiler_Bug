{"sha": "737bfeffd2805f2372c934999afd8ea87921d835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczN2JmZWZmZDI4MDVmMjM3MmM5MzQ5OTlhZmQ4ZWE4NzkyMWQ4MzU=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-08-23T18:21:58Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T22:19:48Z"}, "message": "Change to warn by default / fix typo", "tree": {"sha": "f5e75fcead421ff7d64ee575424263685623aadf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e75fcead421ff7d64ee575424263685623aadf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/737bfeffd2805f2372c934999afd8ea87921d835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/737bfeffd2805f2372c934999afd8ea87921d835", "html_url": "https://github.com/rust-lang/rust/commit/737bfeffd2805f2372c934999afd8ea87921d835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/737bfeffd2805f2372c934999afd8ea87921d835/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5643a0662af337c1096975400040c4442da439ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5643a0662af337c1096975400040c4442da439ca", "html_url": "https://github.com/rust-lang/rust/commit/5643a0662af337c1096975400040c4442da439ca"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "f1e44fbe2a25085e878b9180b453a1ff534112f6", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737bfeffd2805f2372c934999afd8ea87921d835/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737bfeffd2805f2372c934999afd8ea87921d835/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=737bfeffd2805f2372c934999afd8ea87921d835", "patch": "@@ -10,7 +10,7 @@ use rustc_span::{\n \n declare_lint! {\n     pub TEMPORARY_CSTRING_AS_PTR,\n-    Deny,\n+    Warn,\n     \"detects getting the inner pointer of a temporary `CString`\"\n }\n "}, {"sha": "a9ab0d1d83bc4befd8c405e25e47b398870df7e5", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737bfeffd2805f2372c934999afd8ea87921d835/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737bfeffd2805f2372c934999afd8ea87921d835/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=737bfeffd2805f2372c934999afd8ea87921d835", "patch": "@@ -1265,7 +1265,7 @@ impl CStr {\n     /// behavior when `ptr` is used inside the `unsafe` block:\n     ///\n     /// ```no_run\n-    /// # #![allow(unused_must_use)] #![allow(temporary_cstring_as_ptr)]\n+    /// # #![allow(unused_must_use, temporary_cstring_as_ptr)]\n     /// use std::ffi::CString;\n     ///\n     /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();"}, {"sha": "73a9d6677c757889fcb602e8567acff26154a804", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/737bfeffd2805f2372c934999afd8ea87921d835/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737bfeffd2805f2372c934999afd8ea87921d835/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=737bfeffd2805f2372c934999afd8ea87921d835", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+#![deny(temporary_cstring_as_ptr)]\n \n use std::ffi::CString;\n "}, {"sha": "ee06bfc2fadb37bc07f080da846152fb66617307", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/737bfeffd2805f2372c934999afd8ea87921d835/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737bfeffd2805f2372c934999afd8ea87921d835/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=737bfeffd2805f2372c934999afd8ea87921d835", "patch": "@@ -1,12 +1,16 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:48\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:48\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ---------------------------------- ^^^^^^ this pointer will be invalid\n    |             |\n    |             this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\n    |\n-   = note: `#[deny(temporary_cstring_as_ptr)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n+   |\n+LL | #![deny(temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\n \n error: aborting due to previous error"}]}