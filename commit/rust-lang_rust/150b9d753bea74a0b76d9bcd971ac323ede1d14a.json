{"sha": "150b9d753bea74a0b76d9bcd971ac323ede1d14a", "node_id": "C_kwDOAAsO6NoAKDE1MGI5ZDc1M2JlYTc0YTBiNzZkOWJjZDk3MWFjMzIzZWRlMWQxNGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-02T05:52:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-02T05:52:14Z"}, "message": "Rollup merge of #107488 - nnethercote:fix-PartialEq-syntax, r=RalfJung\n\nFix syntax in `-Zunpretty-expanded` output for derived `PartialEq`.\n\nIf you do `derive(PartialEq)` on a packed struct, the output shown by `-Zunpretty=expanded` includes expressions like this:\n```\n{ self.x } == { other.x }\n```\nThis is invalid syntax. This doesn't break compilation, because the AST nodes are constructed within the compiler. But it does mean anyone using `-Zunpretty=expanded` output as a guide for hand-written impls could get a nasty surprise.\n\nThis commit fixes things by instead using this form:\n```\n({ self.x }) == ({ other.x })\n```\n\nr? ``@RalfJung``", "tree": {"sha": "406d3a1464306b1d4ddab2b8f0a0bbd1faf6a7c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406d3a1464306b1d4ddab2b8f0a0bbd1faf6a7c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/150b9d753bea74a0b76d9bcd971ac323ede1d14a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj20+OCRBK7hj4Ov3rIwAA1t4IAJ4Z9BYUiyRxLkTt53Ieb7iG\nAJEWfHy3gZ0LQF9A7FaNBT7jPrX/4cXKE0lfnSqHlEyA4p3GUQakt2BjLr6Mpg1y\nydingHAROX35406qwRqn4Q0tjl2msZTg+apJdJbNGArdvAlQHa5fIzNNha6KGeno\n5fvmPyLiw6fKruVtlSRwHVRSGwv9G/68IgWB+kiS7qCT24UcDZgvqqI84IfXZVJ7\nGhJ0im+tQrAFo5LT/zCpnmr5K8LcR/8NLVmbv97m/8iiz36WOdJRPRXRE+dHH5dT\nRsp3M7dMKS57pm3HSpFYQ6Np0W1h8iAE+Ksdux7Fpjxjo57YApGsvKGG8nOg9b0=\n=tqMF\n-----END PGP SIGNATURE-----\n", "payload": "tree 406d3a1464306b1d4ddab2b8f0a0bbd1faf6a7c9\nparent f838fa87b233fe01ccc669dd3d996df35a4895bc\nparent 75e87d1f81290052a07fe85e3809d48a46613fb1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675317134 +0100\ncommitter GitHub <noreply@github.com> 1675317134 +0100\n\nRollup merge of #107488 - nnethercote:fix-PartialEq-syntax, r=RalfJung\n\nFix syntax in `-Zunpretty-expanded` output for derived `PartialEq`.\n\nIf you do `derive(PartialEq)` on a packed struct, the output shown by `-Zunpretty=expanded` includes expressions like this:\n```\n{ self.x } == { other.x }\n```\nThis is invalid syntax. This doesn't break compilation, because the AST nodes are constructed within the compiler. But it does mean anyone using `-Zunpretty=expanded` output as a guide for hand-written impls could get a nasty surprise.\n\nThis commit fixes things by instead using this form:\n```\n({ self.x }) == ({ other.x })\n```\n\nr? ``@RalfJung``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/150b9d753bea74a0b76d9bcd971ac323ede1d14a", "html_url": "https://github.com/rust-lang/rust/commit/150b9d753bea74a0b76d9bcd971ac323ede1d14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/150b9d753bea74a0b76d9bcd971ac323ede1d14a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f838fa87b233fe01ccc669dd3d996df35a4895bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f838fa87b233fe01ccc669dd3d996df35a4895bc", "html_url": "https://github.com/rust-lang/rust/commit/f838fa87b233fe01ccc669dd3d996df35a4895bc"}, {"sha": "75e87d1f81290052a07fe85e3809d48a46613fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e87d1f81290052a07fe85e3809d48a46613fb1", "html_url": "https://github.com/rust-lang/rust/commit/75e87d1f81290052a07fe85e3809d48a46613fb1"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "bad47db0de1d4e16103d6724d786eb479d480ab7", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/150b9d753bea74a0b76d9bcd971ac323ede1d14a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150b9d753bea74a0b76d9bcd971ac323ede1d14a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=150b9d753bea74a0b76d9bcd971ac323ede1d14a", "patch": "@@ -29,16 +29,30 @@ pub fn expand_deriving_partial_eq(\n                         cx.span_bug(field.span, \"not exactly 2 arguments in `derive(PartialEq)`\");\n                     };\n \n-                    // We received `&T` arguments. Convert them to `T` by\n-                    // stripping `&` or adding `*`. This isn't necessary for\n-                    // type checking, but it results in much better error\n-                    // messages if something goes wrong.\n+                    // We received arguments of type `&T`. Convert them to type `T` by stripping\n+                    // any leading `&` or adding `*`. This isn't necessary for type checking, but\n+                    // it results in better error messages if something goes wrong.\n+                    //\n+                    // Note: for arguments that look like `&{ x }`, which occur with packed\n+                    // structs, this would cause expressions like `{ self.x } == { other.x }`,\n+                    // which isn't valid Rust syntax. This wouldn't break compilation because these\n+                    // AST nodes are constructed within the compiler. But it would mean that code\n+                    // printed by `-Zunpretty=expanded` (or `cargo expand`) would have invalid\n+                    // syntax, which would be suboptimal. So we wrap these in parens, giving\n+                    // `({ self.x }) == ({ other.x })`, which is valid syntax.\n                     let convert = |expr: &P<Expr>| {\n                         if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) =\n                             &expr.kind\n                         {\n-                            inner.clone()\n+                            if let ExprKind::Block(..) = &inner.kind {\n+                                // `&{ x }` form: remove the `&`, add parens.\n+                                cx.expr_paren(field.span, inner.clone())\n+                            } else {\n+                                // `&x` form: remove the `&`.\n+                                inner.clone()\n+                            }\n                         } else {\n+                            // No leading `&`: add a leading `*`.\n                             cx.expr_deref(field.span, expr.clone())\n                         }\n                     };"}, {"sha": "6cd56852f9d686942633ce3b258358c310d56469", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/150b9d753bea74a0b76d9bcd971ac323ede1d14a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150b9d753bea74a0b76d9bcd971ac323ede1d14a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=150b9d753bea74a0b76d9bcd971ac323ede1d14a", "patch": "@@ -272,6 +272,10 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::AddrOf(ast::BorrowKind::Ref, ast::Mutability::Not, e))\n     }\n \n+    pub fn expr_paren(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n+        self.expr(sp, ast::ExprKind::Paren(e))\n+    }\n+\n     pub fn expr_call(\n         &self,\n         span: Span,"}, {"sha": "8e238a509d2fd5193ac460241b91a1a763e4688c", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/150b9d753bea74a0b76d9bcd971ac323ede1d14a/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/150b9d753bea74a0b76d9bcd971ac323ede1d14a/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=150b9d753bea74a0b76d9bcd971ac323ede1d14a", "patch": "@@ -209,7 +209,7 @@ impl ::core::marker::StructuralPartialEq for PackedPoint { }\n impl ::core::cmp::PartialEq for PackedPoint {\n     #[inline]\n     fn eq(&self, other: &PackedPoint) -> bool {\n-        { self.x } == { other.x } && { self.y } == { other.y }\n+        ({ self.x }) == ({ other.x }) && ({ self.y }) == ({ other.y })\n     }\n }\n #[automatically_derived]\n@@ -718,8 +718,8 @@ impl<T: ::core::cmp::PartialEq + ::core::marker::Copy + Trait,\n     ::core::marker::Copy {\n     #[inline]\n     fn eq(&self, other: &PackedGeneric<T, U>) -> bool {\n-        { self.0 } == { other.0 } && { self.1 } == { other.1 } &&\n-            { self.2 } == { other.2 }\n+        ({ self.0 }) == ({ other.0 }) && ({ self.1 }) == ({ other.1 }) &&\n+            ({ self.2 }) == ({ other.2 })\n     }\n }\n #[automatically_derived]"}]}