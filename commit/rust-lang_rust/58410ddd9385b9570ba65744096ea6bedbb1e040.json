{"sha": "58410ddd9385b9570ba65744096ea6bedbb1e040", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDEwZGRkOTM4NWI5NTcwYmE2NTc0NDA5NmVhNmJlZGJiMWUwNDA=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-13T05:22:30Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-14T02:03:25Z"}, "message": "Extract checkstyle output into a separate module.\n\nRename functions a bit now that they are specific to checkstyle output.", "tree": {"sha": "0fbe51b4b427de5cedd6026b79b6ddaf1f9e7f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fbe51b4b427de5cedd6026b79b6ddaf1f9e7f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58410ddd9385b9570ba65744096ea6bedbb1e040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58410ddd9385b9570ba65744096ea6bedbb1e040", "html_url": "https://github.com/rust-lang/rust/commit/58410ddd9385b9570ba65744096ea6bedbb1e040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58410ddd9385b9570ba65744096ea6bedbb1e040/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c968e1e38781001b2023ea6921287a16a3e7b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c968e1e38781001b2023ea6921287a16a3e7b02", "html_url": "https://github.com/rust-lang/rust/commit/3c968e1e38781001b2023ea6921287a16a3e7b02"}], "stats": {"total": 173, "additions": 94, "deletions": 79}, "files": [{"sha": "1eb74a99bbf84968997d28f31275f4c3fc5724b1", "filename": "src/checkstyle.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=58410ddd9385b9570ba65744096ea6bedbb1e040", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+use rustfmt_diff::{Mismatch, DiffLine};\n+use std::io::{self, Write, Read, stdout};\n+use WriteMode;\n+\n+\n+pub fn output_heading(mode: WriteMode) -> Result<(), io::Error> {\n+    let stdout = stdout();\n+    let mut stdout = stdout.lock();\n+    match mode {\n+        WriteMode::Checkstyle => {\n+            let mut xml_heading = String::new();\n+            xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n+            xml_heading.push_str(\"\\n\");\n+            xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n+            try!(write!(stdout, \"{}\", xml_heading));\n+            Ok(())\n+        }\n+        _ => Ok(()),\n+    }\n+}\n+\n+pub fn output_footing(mode: WriteMode) -> Result<(), io::Error> {\n+    let stdout = stdout();\n+    let mut stdout = stdout.lock();\n+    match mode {\n+        WriteMode::Checkstyle => {\n+            let mut xml_tail = String::new();\n+            xml_tail.push_str(\"</checkstyle>\");\n+            try!(write!(stdout, \"{}\", xml_tail));\n+            Ok(())\n+        }\n+        _ => Ok(()),\n+    }\n+}\n+\n+pub fn output_checkstyle_file<T>(mut writer: T,\n+                                 filename: &str,\n+                                 diff: Vec<Mismatch>)\n+                                 -> Result<(), io::Error>\n+    where T: Write\n+{\n+    try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n+    for mismatch in diff {\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Expected(ref str) => {\n+                    let message = xml_escape_str(&str);\n+                    try!(write!(writer,\n+                                \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be \\\n+                                 `{}`\\\" />\",\n+                                mismatch.line_number,\n+                                message));\n+                }\n+                _ => {\n+                    // Do nothing with context and expected.\n+                }\n+            }\n+        }\n+    }\n+    try!(write!(writer, \"</file>\"));\n+    Ok(())\n+}\n+\n+// Convert special characters into XML entities.\n+// This is needed for checkstyle output.\n+fn xml_escape_str(string: &str) -> String {\n+    let mut out = String::new();\n+    for c in string.chars() {\n+        match c {\n+            '<' => out.push_str(\"&lt;\"),\n+            '>' => out.push_str(\"&gt;\"),\n+            '\"' => out.push_str(\"&quot;\"),\n+            '\\'' => out.push_str(\"&apos;\"),\n+            '&' => out.push_str(\"&amp;\"),\n+            _ => out.push(c),\n+        }\n+    }\n+    out\n+}"}, {"sha": "92d4267f6e1f6aa85eba0bfe50852755d67baea4", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 79, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=58410ddd9385b9570ba65744096ea6bedbb1e040", "patch": "@@ -18,7 +18,8 @@ use std::fs::{self, File};\n use std::io::{self, Write, Read, stdout, BufWriter};\n \n use config::{NewlineStyle, Config, WriteMode};\n-use rustfmt_diff::{make_diff, print_diff, Mismatch, DiffLine};\n+use rustfmt_diff::{make_diff, print_diff, Mismatch};\n+use checkstyle::{output_heading, output_footing, output_checkstyle_file};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = HashMap<String, StringBuffer>;\n@@ -38,86 +39,11 @@ pub fn write_all_files(file_map: &FileMap,\n     for filename in file_map.keys() {\n         try!(write_file(&file_map[filename], filename, mode, config));\n     }\n-    output_trailing(mode).ok();\n+    output_footing(mode).ok();\n \n     Ok(())\n }\n \n-pub fn output_heading(mode: WriteMode) -> Result<(), io::Error> {\n-    let stdout = stdout();\n-    let mut stdout = stdout.lock();\n-    match mode {\n-        WriteMode::Checkstyle => {\n-            let mut xml_heading = String::new();\n-            xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n-            xml_heading.push_str(\"\\n\");\n-            xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n-            try!(write!(stdout, \"{}\", xml_heading));\n-            Ok(())\n-        }\n-        _ => Ok(()),\n-    }\n-}\n-\n-pub fn output_trailing(mode: WriteMode) -> Result<(), io::Error> {\n-    let stdout = stdout();\n-    let mut stdout = stdout.lock();\n-    match mode {\n-        WriteMode::Checkstyle => {\n-            let mut xml_tail = String::new();\n-            xml_tail.push_str(\"</checkstyle>\");\n-            try!(write!(stdout, \"{}\", xml_tail));\n-            Ok(())\n-        }\n-        _ => Ok(()),\n-    }\n-}\n-\n-pub fn output_checkstyle_file<T>(mut writer: T,\n-                                 filename: &str,\n-                                 diff: Vec<Mismatch>)\n-                                 -> Result<(), io::Error>\n-    where T: Write\n-{\n-    try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n-    for mismatch in diff {\n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Expected(ref str) => {\n-                    let message = xml_escape_str(&str);\n-                    // TODO XML encode str here.\n-                    try!(write!(writer,\n-                                \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be \\\n-                                 `{}`\\\" />\",\n-                                mismatch.line_number,\n-                                message));\n-                }\n-                _ => {\n-                    // Do nothing with context and expected.\n-                }\n-            }\n-        }\n-    }\n-    try!(write!(writer, \"</file>\"));\n-    Ok(())\n-}\n-\n-// Convert special characters into XML entities.\n-// This is needed for checkstyle output.\n-fn xml_escape_str(string: &str) -> String {\n-    let mut out = String::new();\n-    for c in string.chars() {\n-        match c {\n-            '<' => out.push_str(\"&lt;\"),\n-            '>' => out.push_str(\"&gt;\"),\n-            '\"' => out.push_str(\"&quot;\"),\n-            '\\'' => out.push_str(\"&apos;\"),\n-            '&' => out.push_str(\"&amp;\"),\n-            _ => out.push(c),\n-        }\n-    }\n-    out\n-}\n \n // Prints all newlines either as `\\n` or as `\\r\\n`.\n pub fn write_system_newlines<T>(writer: T,\n@@ -178,8 +104,8 @@ pub fn write_file(text: &StringBuffer,\n                    text: &StringBuffer,\n                    config: &Config)\n                    -> Result<Vec<Mismatch>, io::Error> {\n-        let ori_text, fmt_text = try!(source_and_formatted_text(text, filename, config));\n-        Ok(make_diff(&ori_text, &fmt_text, 3))\n+        let (ori, fmt) = try!(source_and_formatted_text(text, filename, config));\n+        Ok(make_diff(&ori, &fmt, 3))\n     }\n \n     match mode {"}, {"sha": "6d60c0f278df480f10e15a493677fdeae8c81ebf", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58410ddd9385b9570ba65744096ea6bedbb1e040/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=58410ddd9385b9570ba65744096ea6bedbb1e040", "patch": "@@ -45,6 +45,7 @@ mod utils;\n pub mod config;\n pub mod filemap;\n mod visitor;\n+mod checkstyle;\n mod items;\n mod missed_spans;\n mod lists;"}]}