{"sha": "15db6ec5714dffab7b36db44de9ece5e76301e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZGI2ZWM1NzE0ZGZmYWI3YjM2ZGI0NGRlOWVjZTVlNzYzMDFlMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T01:21:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T01:21:55Z"}, "message": "Auto merge of #28500 - alexcrichton:docker-travis, r=brson\n\nTravis CI has new infrastructure using the Google Compute Engine which has both\r\nfaster CPUs and more memory, and we've been encouraged to switch as it should\r\nhelp our build times! The only downside currently, however, is that IPv6 is\r\ndisabled, causing a number of standard library tests to fail.\r\n\r\nConsequently this commit tweaks our travis config in a few ways:\r\n\r\n* ccache is disabled as it's not working on GCE just yet\r\n* Docker is used to run tests inside which reportedly will get IPv6 working\r\n* A system LLVM installation is used instead of building LLVM itself. This is\r\n  primarily done to reduce build times, but we want automation for this sort of\r\n  behavior anyway and we can extend this in the future with building from source\r\n  as well if needed.\r\n* gcc-specific logic is removed as the docker image for Ubuntu gives us a\r\n  recent-enough gcc by default.", "tree": {"sha": "ac0cc52e908ae5dcd6677ed836d8048862633f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0cc52e908ae5dcd6677ed836d8048862633f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15db6ec5714dffab7b36db44de9ece5e76301e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15db6ec5714dffab7b36db44de9ece5e76301e04", "html_url": "https://github.com/rust-lang/rust/commit/15db6ec5714dffab7b36db44de9ece5e76301e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15db6ec5714dffab7b36db44de9ece5e76301e04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d5c083377645a115c4ac23a620d3581b9562b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d5c083377645a115c4ac23a620d3581b9562b6", "html_url": "https://github.com/rust-lang/rust/commit/65d5c083377645a115c4ac23a620d3581b9562b6"}, {"sha": "27dd6dd3dbe92debaac7d54c8405a3d3af1c4daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dd6dd3dbe92debaac7d54c8405a3d3af1c4daf", "html_url": "https://github.com/rust-lang/rust/commit/27dd6dd3dbe92debaac7d54c8405a3d3af1c4daf"}], "stats": {"total": 157, "additions": 80, "deletions": 77}, "files": [{"sha": "944709491c329054d4754a1939dbc13650480ebc", "filename": ".travis.yml", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -1,37 +1,22 @@\n-# ccache support is disabled unless your language is a C-derivative. However\n-# `language: C` unconditionally sets `CC=compiler`. If we just set it in our\n-# `env` it will be overwritten by the default (gcc 4.6).\n language: c\n-compiler: /usr/bin/gcc-4.7\n-cache: ccache\n-sudo: false\n+sudo: required\n+services:\n+  - docker\n \n-# The test suite is in general way too stressful for travis, especially in\n-# terms of time limit and reliability. In the past we've tried to scale things\n-# back to only build the stage1 compiler and run a subset of tests, but this\n-# didn't end up panning out very well.\n-#\n-# As a result, we're just using travis to run `make tidy` and *only* build\n-# stage1 but *not* test it for now (a strict subset of the bootstrap). This will\n-# catch \"obvious\" errors like style or not even compiling.\n-#\n-# We need gcc4.7 or higher to build LLVM, and travis (well, Ubuntu 12.04)\n-# currently ships with 4.6. Gotta download our own.\n-before_script:\n-  - ./configure --enable-ccache\n-script:\n-  - make tidy && make check -j4\n+# LLVM takes awhile to check out and otherwise we'll manage the submodules in\n+# our configure script, so disable auto submodule management.\n+git:\n+  submodules: false\n \n-env:\n-  - CXX=/usr/bin/g++-4.7\n-\n-addons:\n-  apt:\n-    sources:\n-    - ubuntu-toolchain-r-test\n-    packages:\n-    - gcc-4.7\n-    - g++-4.7\n+before_install:\n+  - docker build -t rust -f src/etc/Dockerfile src/etc\n+script:\n+  - docker run --privileged -tv `pwd`:/build rust\n+    sh -c \"\n+      ./configure --llvm-root=/usr/lib/llvm-3.7 &&\n+      make tidy &&\n+      make check -j4\n+    \"\n \n # Real testing happens on http://buildbot.rust-lang.org/\n #"}, {"sha": "69c5e151f181050b069a2699ec271fafba34898c", "filename": "src/etc/Dockerfile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -0,0 +1,12 @@\n+FROM ubuntu:latest\n+\n+RUN echo 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main' | \\\n+        sudo tee -a /etc/apt/sources.list\n+RUN echo 'deb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main' | \\\n+        sudo tee -a /etc/apt/sources.list\n+RUN apt-get update\n+RUN apt-get -y install curl make g++ python2.7 git zlib1g-dev libedit-dev\n+RUN apt-get -y --force-yes install llvm-3.7-tools\n+\n+RUN mkdir /build\n+WORKDIR /build"}, {"sha": "0d3d15401fd54b893ac8042e9c893dfb55f4d7d2", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -185,14 +185,13 @@ mod tests {\n         }\n     }\n \n-    // FIXME #11530 this fails on android because tests are run as root\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n     #[test]\n     fn bind_error() {\n-        let addr = SocketAddrV4::new(Ipv4Addr::new(0, 0, 0, 0), 1);\n-        match UdpSocket::bind(&addr) {\n+        match UdpSocket::bind(\"1.1.1.1:9999\") {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind(), ErrorKind::PermissionDenied),\n+            Err(e) => {\n+                assert_eq!(e.kind(), ErrorKind::AddrNotAvailable)\n+            }\n         }\n     }\n "}, {"sha": "0be751be9504e6b50599f5d8c0459e09112d326a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -625,17 +625,20 @@ mod tests {\n         drop(p.wait());\n     }\n \n+    #[cfg(unix)]\n     #[cfg(all(unix, not(target_os=\"android\")))]\n-    #[test]\n     fn signal_reported_right() {\n         use os::unix::process::ExitStatusExt;\n \n-        let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -9 $$\").spawn();\n-        assert!(p.is_ok());\n-        let mut p = p.unwrap();\n+        let mut p = Command::new(\"/bin/sh\")\n+                            .arg(\"-c\").arg(\"read a\")\n+                            .stdin(Stdio::piped())\n+                            .spawn().unwrap();\n+        p.kill().unwrap();\n         match p.wait().unwrap().signal() {\n             Some(9) => {},\n-            result => panic!(\"not terminated by signal 9 (instead, {:?})\", result),\n+            result => panic!(\"not terminated by signal 9 (instead, {:?})\",\n+                             result),\n         }\n     }\n "}, {"sha": "7f50e75f6fc6498e6630cb63cbf0e1a4fab8ebc3", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -450,6 +450,15 @@ mod tests {\n     use slice;\n     use sys::{self, c, cvt, pipe};\n \n+    macro_rules! t {\n+        ($e:expr) => {\n+            match $e {\n+                Ok(t) => t,\n+                Err(e) => panic!(\"received error for `{}`: {}\", stringify!($e), e),\n+            }\n+        }\n+    }\n+\n     #[cfg(not(target_os = \"android\"))]\n     extern {\n         #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaddset14\")]\n@@ -473,24 +482,26 @@ mod tests {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited.\n             let cmd = Command::new(OsStr::new(\"cat\"));\n-            let (stdin_read, stdin_write) = sys::pipe::anon_pipe().unwrap();\n-            let (stdout_read, stdout_write) = sys::pipe::anon_pipe().unwrap();\n+            let (stdin_read, stdin_write) = t!(sys::pipe::anon_pipe());\n+            let (stdout_read, stdout_write) = t!(sys::pipe::anon_pipe());\n \n             let mut set: c::sigset_t = mem::uninitialized();\n             let mut old_set: c::sigset_t = mem::uninitialized();\n-            cvt(c::sigemptyset(&mut set)).unwrap();\n-            cvt(sigaddset(&mut set, libc::SIGINT)).unwrap();\n-            cvt(c::pthread_sigmask(c::SIG_SETMASK, &set, &mut old_set)).unwrap();\n+            t!(cvt(c::sigemptyset(&mut set)));\n+            t!(cvt(sigaddset(&mut set, libc::SIGINT)));\n+            t!(cvt(c::pthread_sigmask(c::SIG_SETMASK, &set, &mut old_set)));\n \n-            let cat = Process::spawn(&cmd, Stdio::Raw(stdin_read.raw()),\n-                                           Stdio::Raw(stdout_write.raw()),\n-                                           Stdio::None).unwrap();\n+            let cat = t!(Process::spawn(&cmd, Stdio::Raw(stdin_read.raw()),\n+                                              Stdio::Raw(stdout_write.raw()),\n+                                              Stdio::None));\n             drop(stdin_read);\n             drop(stdout_write);\n \n-            cvt(c::pthread_sigmask(c::SIG_SETMASK, &old_set, ptr::null_mut())).unwrap();\n+            t!(cvt(c::pthread_sigmask(c::SIG_SETMASK, &old_set,\n+                                      ptr::null_mut())));\n \n-            cvt(libc::funcs::posix88::signal::kill(cat.id() as libc::pid_t, libc::SIGINT)).unwrap();\n+            t!(cvt(libc::funcs::posix88::signal::kill(cat.id() as libc::pid_t,\n+                                                      libc::SIGINT)));\n             // We need to wait until SIGINT is definitely delivered. The\n             // easiest way is to write something to cat, and try to read it\n             // back: if SIGINT is unmasked, it'll get delivered when cat is\n@@ -504,7 +515,7 @@ mod tests {\n                 assert!(ret == 0);\n             }\n \n-            cat.wait().unwrap();\n+            t!(cat.wait());\n         }\n     }\n }"}, {"sha": "62ad301a2407a7aca50c1d5120c63597d676d29f", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -1 +1 @@\n-Subproject commit 3c88bf78f97d2cd8130b16eecb0eeb84888cd494\n+Subproject commit 62ad301a2407a7aca50c1d5120c63597d676d29f"}, {"sha": "9ce34c40730ceea006409b26597d42aa342b844b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -951,10 +951,5 @@ LLVMRustBuildLandingPad(LLVMBuilderRef Builder,\n                         unsigned NumClauses,\n                         const char* Name,\n                         LLVMValueRef F) {\n-#if LLVM_VERSION_MINOR >= 7\n-    unwrap<Function>(F)->setPersonalityFn(unwrap<Constant>(PersFn));\n-    return LLVMBuildLandingPad(Builder, Ty, NumClauses, Name);\n-#else\n     return LLVMBuildLandingPad(Builder, Ty, PersFn, NumClauses, Name);\n-#endif\n }"}, {"sha": "d6b6d673ca5433f223b03430debd5f5cf885a2e9", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15db6ec5714dffab7b36db44de9ece5e76301e04/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=15db6ec5714dffab7b36db44de9ece5e76301e04", "patch": "@@ -30,26 +30,25 @@ macro_rules! t {\n     ($e:expr) => (match $e { Ok(e) => e, Err(e) => panic!(\"error: {}\", e) })\n }\n \n+#[test]\n fn test_destroy_once() {\n     let mut p = sleeper();\n-    match p.kill() {\n-        Ok(()) => {}\n-        Err(e) => panic!(\"error: {}\", e),\n-    }\n+    t!(p.kill());\n }\n \n #[cfg(unix)]\n pub fn sleeper() -> Child {\n-    Command::new(\"sleep\").arg(\"1000\").spawn().unwrap()\n+    t!(Command::new(\"sleep\").arg(\"1000\").spawn())\n }\n #[cfg(windows)]\n pub fn sleeper() -> Child {\n     // There's a `timeout` command on windows, but it doesn't like having\n     // its output piped, so instead just ping ourselves a few times with\n     // gaps in between so we're sure this process is alive for awhile\n-    Command::new(\"ping\").arg(\"127.0.0.1\").arg(\"-n\").arg(\"1000\").spawn().unwrap()\n+    t!(Command::new(\"ping\").arg(\"127.0.0.1\").arg(\"-n\").arg(\"1000\").spawn())\n }\n \n+#[test]\n fn test_destroy_twice() {\n     let mut p = sleeper();\n     t!(p.kill()); // this shouldn't crash...\n@@ -58,21 +57,20 @@ fn test_destroy_twice() {\n \n #[test]\n fn test_destroy_actually_kills() {\n-    #[cfg(all(unix,not(target_os=\"android\")))]\n-    static BLOCK_COMMAND: &'static str = \"cat\";\n-\n-    #[cfg(all(unix,target_os=\"android\"))]\n-    static BLOCK_COMMAND: &'static str = \"/system/bin/cat\";\n-\n-    #[cfg(windows)]\n-    static BLOCK_COMMAND: &'static str = \"cmd\";\n+    let cmd = if cfg!(windows) {\n+        \"cmd\"\n+    } else if cfg!(target_os = \"android\") {\n+        \"/system/bin/cat\"\n+    } else {\n+        \"cat\"\n+    };\n \n     // this process will stay alive indefinitely trying to read from stdin\n-    let mut p = Command::new(BLOCK_COMMAND)\n-                        .stdin(Stdio::piped())\n-                        .spawn().unwrap();\n+    let mut p = t!(Command::new(cmd)\n+                           .stdin(Stdio::piped())\n+                           .spawn());\n \n-    p.kill().unwrap();\n+    t!(p.kill());\n \n     // Don't let this test time out, this should be quick\n     let (tx, rx) = channel();\n@@ -82,7 +80,7 @@ fn test_destroy_actually_kills() {\n             process::exit(1);\n         }\n     });\n-    let code = p.wait().unwrap().code();\n+    let code = t!(p.wait()).code();\n     if cfg!(windows) {\n         assert!(code.is_some());\n     } else {"}]}