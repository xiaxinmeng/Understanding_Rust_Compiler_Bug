{"sha": "0e21a27075a8c508f00d1a4430497f17ce93d5c9", "node_id": "C_kwDOAAsO6NoAKDBlMjFhMjcwNzVhOGM1MDhmMDBkMWE0NDMwNDk3ZjE3Y2U5M2Q1Yzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T16:29:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T16:29:09Z"}, "message": "Auto merge of #98373 - joshtriplett:bootstrap-locking, r=jyn514\n\nMove locking from bootstrap.py to rust bootstrap, using fd-lock\n\nHelps with https://github.com/rust-lang/rust/issues/94829.", "tree": {"sha": "6cd6afb36ad6a1f985f98e0acd3e8ee77694b108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd6afb36ad6a1f985f98e0acd3e8ee77694b108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e21a27075a8c508f00d1a4430497f17ce93d5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e21a27075a8c508f00d1a4430497f17ce93d5c9", "html_url": "https://github.com/rust-lang/rust/commit/0e21a27075a8c508f00d1a4430497f17ce93d5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e21a27075a8c508f00d1a4430497f17ce93d5c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04bfb4aea99436a62f6a98056e805eb9b0629cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04bfb4aea99436a62f6a98056e805eb9b0629cc", "html_url": "https://github.com/rust-lang/rust/commit/b04bfb4aea99436a62f6a98056e805eb9b0629cc"}, {"sha": "5a30316fc14ab6952ce9f925478c498c804a7b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a30316fc14ab6952ce9f925478c498c804a7b71", "html_url": "https://github.com/rust-lang/rust/commit/5a30316fc14ab6952ce9f925478c498c804a7b71"}], "stats": {"total": 168, "additions": 123, "deletions": 45}, "files": [{"sha": "664ffa1ddd2071203f2d58d8cb3ea8896272e5e6", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -47,6 +47,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"cc\",\n  \"cmake\",\n+ \"fd-lock\",\n  \"filetime\",\n  \"getopts\",\n  \"hex\",\n@@ -201,6 +202,38 @@ version = \"1.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n \n+[[package]]\n+name = \"errno\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1\"\n+dependencies = [\n+ \"errno-dragonfly\",\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"errno-dragonfly\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"fd-lock\"\n+version = \"3.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e11dcc7e4d79a8c89b9ab4c6f5c30b1fc4a83c420792da3542fd31179ed5f517\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"rustix\",\n+ \"windows-sys\",\n+]\n+\n [[package]]\n name = \"filetime\"\n version = \"0.2.16\"\n@@ -284,6 +317,12 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"io-lifetimes\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24c3f4eff5495aee4c0399d7b6a0dc2b6e81be84242ffbfcf253ebacccc1d0cb\"\n+\n [[package]]\n name = \"itoa\"\n version = \"1.0.2\"\n@@ -302,6 +341,12 @@ version = \"0.2.126\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n \n+[[package]]\n+name = \"linux-raw-sys\"\n+version = \"0.0.46\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d4d2456c373231a208ad294c33dc5bff30051eafd954cd4caae83a712b12854d\"\n+\n [[package]]\n name = \"log\"\n version = \"0.4.17\"\n@@ -473,6 +518,20 @@ version = \"0.6.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n \n+[[package]]\n+name = \"rustix\"\n+version = \"0.35.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ef258c11e17f5c01979a10543a30a4e12faef6aab217a74266e747eefa3aed88\"\n+dependencies = [\n+ \"bitflags\",\n+ \"errno\",\n+ \"io-lifetimes\",\n+ \"libc\",\n+ \"linux-raw-sys\",\n+ \"windows-sys\",\n+]\n+\n [[package]]\n name = \"ryu\"\n version = \"1.0.10\"\n@@ -657,6 +716,49 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2\"\n+dependencies = [\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680\"\n+\n [[package]]\n name = \"xattr\"\n version = \"0.2.3\""}, {"sha": "84f6aaf99c134db7d7c6beeb5bc98b4fa19d2733", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -36,6 +36,7 @@ test = false\n \n [dependencies]\n cmake = \"0.1.38\"\n+fd-lock = \"3.0.6\"\n filetime = \"0.2\"\n num_cpus = \"1.0\"\n getopts = \"0.2.19\""}, {"sha": "9b4861ccd95f4965525ac5192d04acc5065927df", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -7,12 +7,28 @@\n \n use std::env;\n \n-use bootstrap::{Build, Config, Subcommand, VERSION};\n+use bootstrap::{t, Build, Config, Subcommand, VERSION};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     let config = Config::parse(&args);\n \n+    let mut build_lock;\n+    let _build_lock_guard;\n+    if cfg!(any(unix, windows)) {\n+        build_lock = fd_lock::RwLock::new(t!(std::fs::File::create(config.out.join(\"lock\"))));\n+        _build_lock_guard = match build_lock.try_write() {\n+            Ok(lock) => lock,\n+            err => {\n+                println!(\"warning: build directory locked, waiting for lock\");\n+                drop(err);\n+                t!(build_lock.write())\n+            }\n+        };\n+    } else {\n+        println!(\"warning: file locking not supported for target, not locking build directory\");\n+    }\n+\n     // check_version warnings are not printed during setup\n     let changelog_suggestion =\n         if matches!(config.cmd, Subcommand::Setup { .. }) { None } else { check_version(&config) };"}, {"sha": "3c2f1bdb142a7307896cb7e885d40a1d666f0c76", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -15,44 +15,6 @@\n \n from time import time, sleep\n \n-# Acquire a lock on the build directory to make sure that\n-# we don't cause a race condition while building\n-# Lock is created in `build_dir/lock.db`\n-def acquire_lock(build_dir):\n-    try:\n-        import sqlite3\n-\n-        path = os.path.join(build_dir, \"lock.db\")\n-        try:\n-            con = sqlite3.Connection(path, timeout=0)\n-            curs = con.cursor()\n-            curs.execute(\"BEGIN EXCLUSIVE\")\n-            # The lock is released when the cursor is dropped\n-            return curs\n-        # If the database is busy then lock has already been acquired\n-        # so we wait for the lock.\n-        # We retry every quarter second so that execution is passed back to python\n-        # so that it can handle signals\n-        except sqlite3.OperationalError:\n-            del con\n-            del curs\n-            print(\"Waiting for lock on build directory\")\n-            con = sqlite3.Connection(path, timeout=0.25)\n-            curs = con.cursor()\n-            while True:\n-                try:\n-                    curs.execute(\"BEGIN EXCLUSIVE\")\n-                    break\n-                except sqlite3.OperationalError:\n-                    pass\n-                sleep(0.25)\n-            return curs\n-    except ImportError:\n-        print(\"warning: sqlite3 not available in python, skipping build directory lock\")\n-        print(\"please file an issue on rust-lang/rust\")\n-        print(\"this is not a problem for non-concurrent x.py invocations\")\n-        return None\n-\n def support_xz():\n     try:\n         with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n@@ -928,11 +890,8 @@ def bootstrap(help_triggered):\n \n     build.build = args.build or build.build_triple()\n \n-    # Acquire the lock before doing any build actions\n-    # The lock is released when `lock` is dropped\n     if not os.path.exists(build.build_dir):\n         os.makedirs(build.build_dir)\n-    lock = acquire_lock(build.build_dir)\n \n     # Fetch/build the bootstrap\n     build.download_toolchain()"}, {"sha": "73bd588472df0f1ed5d78ea90ec2789f2dd34704", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -118,8 +118,7 @@ use once_cell::sync::OnceCell;\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{\n-    check_run, exe, libdir, mtime, output, run, run_suppressed, t, try_run, try_run_suppressed,\n-    CiEnv,\n+    check_run, exe, libdir, mtime, output, run, run_suppressed, try_run, try_run_suppressed, CiEnv,\n };\n \n mod builder;"}, {"sha": "6f4266a7f294e0febd5c18301282dd5bb3ebb01b", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e21a27075a8c508f00d1a4430497f17ce93d5c9/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=0e21a27075a8c508f00d1a4430497f17ce93d5c9", "patch": "@@ -22,6 +22,7 @@ use crate::config::{Config, TargetSelection};\n ///\n /// This is currently used judiciously throughout the build system rather than\n /// using a `Result` with `try!`, but this may change one day...\n+#[macro_export]\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -37,7 +38,7 @@ macro_rules! t {\n         }\n     };\n }\n-pub(crate) use t;\n+pub use t;\n \n /// Given an executable called `name`, return the filename for the\n /// executable for a particular target."}]}