{"sha": "df5c116250657daa98da84eebe1b44a495abf5c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNWMxMTYyNTA2NTdkYWE5OGRhODRlZWJlMWI0NGE0OTVhYmY1YzA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-25T13:55:46Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-25T13:55:46Z"}, "message": "Alpha rename `OwnIdxSet` to `IdxSetBuf`.", "tree": {"sha": "fed43a95b8ed402fa343acd8f2a7c5f4cebe13b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed43a95b8ed402fa343acd8f2a7c5f4cebe13b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5c116250657daa98da84eebe1b44a495abf5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5c116250657daa98da84eebe1b44a495abf5c0", "html_url": "https://github.com/rust-lang/rust/commit/df5c116250657daa98da84eebe1b44a495abf5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5c116250657daa98da84eebe1b44a495abf5c0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0e6adbb1453d7e0abe6d3f279b005036d4faa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0e6adbb1453d7e0abe6d3f279b005036d4faa3", "html_url": "https://github.com/rust-lang/rust/commit/ad0e6adbb1453d7e0abe6d3f279b005036d4faa3"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b46b6c368a05338ae0e7b0a47e94dbb663ebf94e", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df5c116250657daa98da84eebe1b44a495abf5c0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5c116250657daa98da84eebe1b44a495abf5c0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=df5c116250657daa98da84eebe1b44a495abf5c0", "patch": "@@ -21,7 +21,7 @@ use super::MirBorrowckCtxtPreDataflow;\n use super::MoveDataParamEnv;\n \n use bitslice::{bitwise, BitwiseOperator};\n-use indexed_set::{Idx, IdxSet, OwnIdxSet};\n+use indexed_set::{Idx, IdxSet, IdxSetBuf};\n \n pub use self::sanity_check::sanity_check_via_rustc_peek;\n pub use self::impls::{MaybeInitializedLvals, MaybeUninitializedLvals};\n@@ -57,7 +57,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n     where BD: BitDenotation + DataflowOperator\n {\n     fn propagate(&mut self) {\n-        let mut temp = OwnIdxSet::new_empty(self.flow_state.sets.bits_per_block);\n+        let mut temp = IdxSetBuf::new_empty(self.flow_state.sets.bits_per_block);\n         let mut propcx = PropagationContext {\n             builder: self,\n             changed: true,\n@@ -167,15 +167,15 @@ impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n /// Maps each block to a set of bits\n #[derive(Debug)]\n struct Bits<E:Idx> {\n-    bits: OwnIdxSet<E>,\n+    bits: IdxSetBuf<E>,\n }\n \n impl<E:Idx> Clone for Bits<E> {\n     fn clone(&self) -> Self { Bits { bits: self.bits.clone() } }\n }\n \n impl<E:Idx> Bits<E> {\n-    fn new(bits: OwnIdxSet<E>) -> Self {\n+    fn new(bits: IdxSetBuf<E>) -> Self {\n         Bits { bits: bits }\n     }\n }\n@@ -393,11 +393,11 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n         let num_blocks = mir.basic_blocks.len();\n         let num_overall = num_blocks * bits_per_block;\n \n-        let zeroes = Bits::new(OwnIdxSet::new_empty(num_overall));\n+        let zeroes = Bits::new(IdxSetBuf::new_empty(num_overall));\n         let on_entry = Bits::new(if D::bottom_value() {\n-            OwnIdxSet::new_filled(num_overall)\n+            IdxSetBuf::new_filled(num_overall)\n         } else {\n-            OwnIdxSet::new_empty(num_overall)\n+            IdxSetBuf::new_empty(num_overall)\n         });\n \n         DataflowAnalysis {"}, {"sha": "3fee1dbc0566011314ada3fd0f5e9fc80ea20f90", "filename": "src/librustc_borrowck/indexed_set.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df5c116250657daa98da84eebe1b44a495abf5c0/src%2Flibrustc_borrowck%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5c116250657daa98da84eebe1b44a495abf5c0/src%2Flibrustc_borrowck%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Findexed_set.rs?ref=df5c116250657daa98da84eebe1b44a495abf5c0", "patch": "@@ -30,21 +30,21 @@ pub trait Idx: 'static {\n ///\n /// In other words, `T` is the type used to index into the bitvector\n /// this type uses to represent the set of object it holds.\n-pub struct OwnIdxSet<T: Idx> {\n+pub struct IdxSetBuf<T: Idx> {\n     _pd: PhantomData<fn(&T)>,\n     bits: Vec<Word>,\n }\n \n-impl<T: Idx> Clone for OwnIdxSet<T> {\n+impl<T: Idx> Clone for IdxSetBuf<T> {\n     fn clone(&self) -> Self {\n-        OwnIdxSet { _pd: PhantomData, bits: self.bits.clone() }\n+        IdxSetBuf { _pd: PhantomData, bits: self.bits.clone() }\n     }\n }\n \n // pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n // around `&mut IdxSet<T>` or `&IdxSet<T>`.\n //\n-// WARNING: Mapping a `&OwnIdxSet<T>` to `&IdxSet<T>` (at least today)\n+// WARNING: Mapping a `&IdxSetBuf<T>` to `&IdxSet<T>` (at least today)\n // requires a transmute relying on representation guarantees that may\n // not hold in the future.\n \n@@ -58,19 +58,19 @@ pub struct IdxSet<T: Idx> {\n     bits: [Word],\n }\n \n-impl<T: Idx> fmt::Debug for OwnIdxSet<T> {\n+impl<T: Idx> fmt::Debug for IdxSetBuf<T> {\n     fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result { self.bits.fmt(w) }\n }\n \n impl<T: Idx> fmt::Debug for IdxSet<T> {\n     fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result { self.bits.fmt(w) }\n }\n \n-impl<T: Idx> OwnIdxSet<T> {\n+impl<T: Idx> IdxSetBuf<T> {\n     fn new(init: Word, universe_size: usize) -> Self {\n         let bits_per_word = mem::size_of::<Word>() * 8;\n         let num_words = (universe_size + (bits_per_word - 1)) / bits_per_word;\n-        OwnIdxSet {\n+        IdxSetBuf {\n             _pd: Default::default(),\n             bits: vec![init; num_words],\n         }\n@@ -97,22 +97,22 @@ impl<T: Idx> IdxSet<T> {\n     }\n }\n \n-impl<T: Idx> Deref for OwnIdxSet<T> {\n+impl<T: Idx> Deref for IdxSetBuf<T> {\n     type Target = IdxSet<T>;\n     fn deref(&self) -> &IdxSet<T> {\n         unsafe { IdxSet::from_slice(&self.bits[..]) }\n     }\n }\n \n-impl<T: Idx> DerefMut for OwnIdxSet<T> {\n+impl<T: Idx> DerefMut for IdxSetBuf<T> {\n     fn deref_mut(&mut self) -> &mut IdxSet<T> {\n         unsafe { IdxSet::from_slice_mut(&mut self.bits[..]) }\n     }\n }\n \n impl<T: Idx> IdxSet<T> {\n-    pub fn to_owned(&self) -> OwnIdxSet<T> {\n-        OwnIdxSet {\n+    pub fn to_owned(&self) -> IdxSetBuf<T> {\n+        IdxSetBuf {\n             _pd: Default::default(),\n             bits: self.bits.to_owned(),\n         }"}]}