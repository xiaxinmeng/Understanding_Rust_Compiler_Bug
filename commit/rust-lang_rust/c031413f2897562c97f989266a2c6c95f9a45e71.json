{"sha": "c031413f2897562c97f989266a2c6c95f9a45e71", "node_id": "C_kwDOAAsO6NoAKGMwMzE0MTNmMjg5NzU2MmM5N2Y5ODkyNjZhMmM2Yzk1ZjlhNDVlNzE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-14T04:42:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-14T04:42:50Z"}, "message": "Rollup merge of #96986 - kdashg:save-an-enum-vars, r=oli-obk\n\n[save-analysis] Reference the variant not enum at struct-literal cons\u2026\n\n\u2026truction.\n\nCloses #96985", "tree": {"sha": "424c2150eebae8e46e5db7eef4835a2190eb7201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424c2150eebae8e46e5db7eef4835a2190eb7201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c031413f2897562c97f989266a2c6c95f9a45e71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifzNKCRBK7hj4Ov3rIwAA6mAIADwRYgwi0MqCDRVF1i9iMzeS\nl7tkhp0X7XBSf2enwuTHgq7EFTpfXzCE7yfWXhPn7Tl7hineE71dai2hk6VLKTEv\nnED/rGTwCFH2ycqtD8zb1Yj7eooWF7SrOGpCHtywdZ7dLfzyAjs/Ft2yx8+kDQ65\nUdCRwuwfVNip9rKls0jxjx6tDyyhPfxvgYXxVZmx2yA1n2UXxedeGl0rKY+d6y4k\nz0q+rWw0Fyn6xGZ7ncXxu9s/VetrnMUg740fywdseZa3gRJxWE5Rl7P7/t6iPD+d\nUBC7GL8m90GQcgeQH9PjpB2ZCicgsMRLMgxVGxzSKJ35+jqgksFWd9nD8PZIFJA=\n=XMPG\n-----END PGP SIGNATURE-----\n", "payload": "tree 424c2150eebae8e46e5db7eef4835a2190eb7201\nparent 6c6958b5315961deb569505b97db34abd5d7f392\nparent 5fde765df08d5f9d22df1368a8dbc0ed99e52b04\nauthor Yuki Okushi <jtitor@2k36.org> 1652503370 +0900\ncommitter GitHub <noreply@github.com> 1652503370 +0900\n\nRollup merge of #96986 - kdashg:save-an-enum-vars, r=oli-obk\n\n[save-analysis] Reference the variant not enum at struct-literal cons\u2026\n\n\u2026truction.\n\nCloses #96985\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c031413f2897562c97f989266a2c6c95f9a45e71", "html_url": "https://github.com/rust-lang/rust/commit/c031413f2897562c97f989266a2c6c95f9a45e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c031413f2897562c97f989266a2c6c95f9a45e71/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c6958b5315961deb569505b97db34abd5d7f392", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6958b5315961deb569505b97db34abd5d7f392", "html_url": "https://github.com/rust-lang/rust/commit/6c6958b5315961deb569505b97db34abd5d7f392"}, {"sha": "5fde765df08d5f9d22df1368a8dbc0ed99e52b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fde765df08d5f9d22df1368a8dbc0ed99e52b04", "html_url": "https://github.com/rust-lang/rust/commit/5fde765df08d5f9d22df1368a8dbc0ed99e52b04"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "fe417f45e88d972d16e2ddfdb35ffabee5ae37a6", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c031413f2897562c97f989266a2c6c95f9a45e71/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c031413f2897562c97f989266a2c6c95f9a45e71/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c031413f2897562c97f989266a2c6c95f9a45e71", "patch": "@@ -780,13 +780,18 @@ impl<'tcx> DumpVisitor<'tcx> {\n         variant: &'tcx ty::VariantDef,\n         rest: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n-        if let Some(struct_lit_data) = self.save_ctxt.get_expr_data(ex) {\n+        if let Some(_ex_res_data) = self.save_ctxt.get_expr_data(ex) {\n             if let hir::QPath::Resolved(_, path) = path {\n                 self.write_sub_paths_truncated(path);\n             }\n-            down_cast_data!(struct_lit_data, RefData, ex.span);\n+            // For MyEnum::MyVariant, get_expr_data gives us MyEnum, not MyVariant.\n+            // For recording the span's ref id, we want MyVariant.\n             if !generated_code(ex.span) {\n-                self.dumper.dump_ref(struct_lit_data);\n+                let sub_span = path.last_segment_span();\n+                let span = self.save_ctxt.span_from_span(sub_span);\n+                let reff =\n+                    Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(variant.def_id) };\n+                self.dumper.dump_ref(reff);\n             }\n \n             for field in fields {"}]}