{"sha": "0ec94594dd15afba00635e0ae29d405a38ec1a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzk0NTk0ZGQxNWFmYmEwMDYzNWUwYWUyOWQ0MDVhMzhlYzFhMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T19:14:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T19:14:55Z"}, "message": "Auto merge of #72449 - ecstatic-morse:const-float-bitcast, r=RalfJung\n\nConst floating point bitcasts and classification\n\nMakes the `f32` and `f64` methods described in #72447 and #72505 unstably const.\n\nr? @RalfJung", "tree": {"sha": "14a2da7cd421c317f946c28fbb94f285f89474c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a2da7cd421c317f946c28fbb94f285f89474c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec94594dd15afba00635e0ae29d405a38ec1a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec94594dd15afba00635e0ae29d405a38ec1a21", "html_url": "https://github.com/rust-lang/rust/commit/0ec94594dd15afba00635e0ae29d405a38ec1a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec94594dd15afba00635e0ae29d405a38ec1a21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02a209eb946929801882d884b459f438d9650d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d02a209eb946929801882d884b459f438d9650d2", "html_url": "https://github.com/rust-lang/rust/commit/d02a209eb946929801882d884b459f438d9650d2"}, {"sha": "130766c466de6cfdaff12c3444451c7d8847ff76", "url": "https://api.github.com/repos/rust-lang/rust/commits/130766c466de6cfdaff12c3444451c7d8847ff76", "html_url": "https://github.com/rust-lang/rust/commit/130766c466de6cfdaff12c3444451c7d8847ff76"}], "stats": {"total": 272, "additions": 238, "deletions": 34}, "files": [{"sha": "99f8cc66638f3f7ff084fa4f3815a9491ba02f4d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0ec94594dd15afba00635e0ae29d405a38ec1a21", "patch": "@@ -73,6 +73,8 @@\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n+#![feature(const_float_classify)]\n+#![feature(const_float_bits_conv)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_int_pow)]"}, {"sha": "043f0b14f249f70ed671340d27d2999b7e336492", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=0ec94594dd15afba00635e0ae29d405a38ec1a21", "patch": "@@ -381,16 +381,18 @@ impl f32 {\n     /// assert!(!f.is_nan());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_nan(self) -> bool {\n+    pub const fn is_nan(self) -> bool {\n         self != self\n     }\n \n     // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]\n-    fn abs_private(self) -> f32 {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const fn abs_private(self) -> f32 {\n         f32::from_bits(self.to_bits() & 0x7fff_ffff)\n     }\n \n@@ -410,8 +412,9 @@ impl f32 {\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_infinite(self) -> bool {\n+    pub const fn is_infinite(self) -> bool {\n         self.abs_private() == Self::INFINITY\n     }\n \n@@ -430,8 +433,9 @@ impl f32 {\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_finite(self) -> bool {\n+    pub const fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n         self.abs_private() < Self::INFINITY\n@@ -457,9 +461,10 @@ impl f32 {\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_normal(self) -> bool {\n-        self.classify() == FpCategory::Normal\n+    pub const fn is_normal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Normal)\n     }\n \n     /// Returns the floating point category of the number. If only one property\n@@ -476,7 +481,8 @@ impl f32 {\n     /// assert_eq!(inf.classify(), FpCategory::Infinite);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn classify(self) -> FpCategory {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    pub const fn classify(self) -> FpCategory {\n         const EXP_MASK: u32 = 0x7f800000;\n         const MAN_MASK: u32 = 0x007fffff;\n \n@@ -501,8 +507,9 @@ impl f32 {\n     /// assert!(!g.is_sign_positive());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool {\n+    pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n@@ -517,8 +524,9 @@ impl f32 {\n     /// assert!(g.is_sign_negative());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool {\n+    pub const fn is_sign_negative(self) -> bool {\n         // IEEE754 says: isSignMinus(x) is true if and only if x has negative sign. isSignMinus\n         // applies to zeros and NaNs as well.\n         self.to_bits() & 0x8000_0000 != 0\n@@ -652,8 +660,9 @@ impl f32 {\n     ///\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_bits(self) -> u32 {\n+    pub const fn to_bits(self) -> u32 {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n@@ -695,8 +704,9 @@ impl f32 {\n     /// assert_eq!(v, 12.5);\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_bits(v: u32) -> Self {\n+    pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n@@ -712,8 +722,9 @@ impl f32 {\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_be_bytes(self) -> [u8; 4] {\n+    pub const fn to_be_bytes(self) -> [u8; 4] {\n         self.to_bits().to_be_bytes()\n     }\n \n@@ -727,8 +738,9 @@ impl f32 {\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_le_bytes(self) -> [u8; 4] {\n+    pub const fn to_le_bytes(self) -> [u8; 4] {\n         self.to_bits().to_le_bytes()\n     }\n \n@@ -755,8 +767,9 @@ impl f32 {\n     /// );\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_ne_bytes(self) -> [u8; 4] {\n+    pub const fn to_ne_bytes(self) -> [u8; 4] {\n         self.to_bits().to_ne_bytes()\n     }\n \n@@ -769,8 +782,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_be_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n     }\n \n@@ -783,8 +797,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_le_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n     }\n \n@@ -808,8 +823,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))\n     }\n "}, {"sha": "24624b88d59f698e46e890702e225d7c4d7cf5fd", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec94594dd15afba00635e0ae29d405a38ec1a21/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=0ec94594dd15afba00635e0ae29d405a38ec1a21", "patch": "@@ -380,16 +380,18 @@ impl f64 {\n     /// assert!(!f.is_nan());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_nan(self) -> bool {\n+    pub const fn is_nan(self) -> bool {\n         self != self\n     }\n \n     // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]\n-    fn abs_private(self) -> f64 {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const fn abs_private(self) -> f64 {\n         f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n     }\n \n@@ -409,8 +411,9 @@ impl f64 {\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_infinite(self) -> bool {\n+    pub const fn is_infinite(self) -> bool {\n         self.abs_private() == Self::INFINITY\n     }\n \n@@ -429,8 +432,9 @@ impl f64 {\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_finite(self) -> bool {\n+    pub const fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n         self.abs_private() < Self::INFINITY\n@@ -456,9 +460,10 @@ impl f64 {\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_normal(self) -> bool {\n-        self.classify() == FpCategory::Normal\n+    pub const fn is_normal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Normal)\n     }\n \n     /// Returns the floating point category of the number. If only one property\n@@ -475,7 +480,8 @@ impl f64 {\n     /// assert_eq!(inf.classify(), FpCategory::Infinite);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn classify(self) -> FpCategory {\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    pub const fn classify(self) -> FpCategory {\n         const EXP_MASK: u64 = 0x7ff0000000000000;\n         const MAN_MASK: u64 = 0x000fffffffffffff;\n \n@@ -500,8 +506,9 @@ impl f64 {\n     /// assert!(!g.is_sign_positive());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool {\n+    pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n@@ -524,8 +531,9 @@ impl f64 {\n     /// assert!(g.is_sign_negative());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool {\n+    pub const fn is_sign_negative(self) -> bool {\n         self.to_bits() & 0x8000_0000_0000_0000 != 0\n     }\n \n@@ -666,8 +674,9 @@ impl f64 {\n     ///\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_bits(self) -> u64 {\n+    pub const fn to_bits(self) -> u64 {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n@@ -709,8 +718,9 @@ impl f64 {\n     /// assert_eq!(v, 12.5);\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_bits(v: u64) -> Self {\n+    pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n@@ -726,8 +736,9 @@ impl f64 {\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_be_bytes(self) -> [u8; 8] {\n+    pub const fn to_be_bytes(self) -> [u8; 8] {\n         self.to_bits().to_be_bytes()\n     }\n \n@@ -741,8 +752,9 @@ impl f64 {\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_le_bytes(self) -> [u8; 8] {\n+    pub const fn to_le_bytes(self) -> [u8; 8] {\n         self.to_bits().to_le_bytes()\n     }\n \n@@ -769,8 +781,9 @@ impl f64 {\n     /// );\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_ne_bytes(self) -> [u8; 8] {\n+    pub const fn to_ne_bytes(self) -> [u8; 8] {\n         self.to_bits().to_ne_bytes()\n     }\n \n@@ -783,8 +796,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n     }\n \n@@ -797,8 +811,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_le_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n     }\n \n@@ -822,8 +837,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))\n     }\n "}, {"sha": "2dfc6de859783fb64dd36113504874a1c40eab18", "filename": "src/test/ui/consts/const-float-bits-conv.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/0ec94594dd15afba00635e0ae29d405a38ec1a21/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec94594dd15afba00635e0ae29d405a38ec1a21/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs?ref=0ec94594dd15afba00635e0ae29d405a38ec1a21", "patch": "@@ -0,0 +1,93 @@\n+// compile-flags: -Zmir-opt-level=0\n+// run-pass\n+\n+#![feature(const_panic)]\n+#![feature(const_float_bits_conv)]\n+#![feature(const_float_classify)]\n+\n+// Don't promote\n+const fn nop<T>(x: T) -> T { x }\n+\n+macro_rules! const_assert {\n+    ($a:expr) => {\n+        {\n+            const _: () = assert!($a);\n+            assert!(nop($a));\n+        }\n+    };\n+    ($a:expr, $b:expr) => {\n+        {\n+            const _: () = assert!($a == $b);\n+            assert_eq!(nop($a), nop($b));\n+        }\n+    };\n+}\n+\n+fn f32() {\n+    const_assert!((1f32).to_bits(), 0x3f800000);\n+    const_assert!(u32::from_be_bytes(1f32.to_be_bytes()), 0x3f800000);\n+    const_assert!((12.5f32).to_bits(), 0x41480000);\n+    const_assert!(u32::from_le_bytes(12.5f32.to_le_bytes()), 0x41480000);\n+    const_assert!((1337f32).to_bits(), 0x44a72000);\n+    const_assert!(u32::from_ne_bytes(1337f32.to_ne_bytes()), 0x44a72000);\n+    const_assert!((-14.25f32).to_bits(), 0xc1640000);\n+    const_assert!(f32::from_bits(0x3f800000), 1.0);\n+    const_assert!(f32::from_be_bytes(0x3f800000u32.to_be_bytes()), 1.0);\n+    const_assert!(f32::from_bits(0x41480000), 12.5);\n+    const_assert!(f32::from_le_bytes(0x41480000u32.to_le_bytes()), 12.5);\n+    const_assert!(f32::from_bits(0x44a72000), 1337.0);\n+    const_assert!(f32::from_ne_bytes(0x44a72000u32.to_ne_bytes()), 1337.0);\n+    const_assert!(f32::from_bits(0xc1640000), -14.25);\n+\n+    // Check that NaNs roundtrip their bits regardless of signalingness\n+    // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\n+    const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n+    const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n+\n+    const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+    const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+\n+    // LLVM does not guarantee that loads and stores of NaNs preserve their exact bit pattern.\n+    // In practice, this seems to only cause a problem on x86, since the most widely used calling\n+    // convention mandates that floating point values are returned on the x87 FPU stack. See #73328.\n+    if !cfg!(target_arch = \"x86\") {\n+        const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+        const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+    }\n+}\n+\n+fn f64() {\n+    const_assert!((1f64).to_bits(), 0x3ff0000000000000);\n+    const_assert!(u64::from_be_bytes(1f64.to_be_bytes()), 0x3ff0000000000000);\n+    const_assert!((12.5f64).to_bits(), 0x4029000000000000);\n+    const_assert!(u64::from_le_bytes(12.5f64.to_le_bytes()), 0x4029000000000000);\n+    const_assert!((1337f64).to_bits(), 0x4094e40000000000);\n+    const_assert!(u64::from_ne_bytes(1337f64.to_ne_bytes()), 0x4094e40000000000);\n+    const_assert!((-14.25f64).to_bits(), 0xc02c800000000000);\n+    const_assert!(f64::from_bits(0x3ff0000000000000), 1.0);\n+    const_assert!(f64::from_be_bytes(0x3ff0000000000000u64.to_be_bytes()), 1.0);\n+    const_assert!(f64::from_bits(0x4029000000000000), 12.5);\n+    const_assert!(f64::from_le_bytes(0x4029000000000000u64.to_le_bytes()), 12.5);\n+    const_assert!(f64::from_bits(0x4094e40000000000), 1337.0);\n+    const_assert!(f64::from_ne_bytes(0x4094e40000000000u64.to_ne_bytes()), 1337.0);\n+    const_assert!(f64::from_bits(0xc02c800000000000), -14.25);\n+\n+    // Check that NaNs roundtrip their bits regardless of signalingness\n+    // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\n+    const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n+    const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n+\n+    const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+    const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+\n+    // See comment above.\n+    if !cfg!(target_arch = \"x86\") {\n+        const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+        const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+    }\n+}\n+\n+fn main() {\n+    f32();\n+    f64();\n+}"}, {"sha": "36fec9976be372d9a9acd6f45b3cc63192f237a6", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0ec94594dd15afba00635e0ae29d405a38ec1a21/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec94594dd15afba00635e0ae29d405a38ec1a21/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=0ec94594dd15afba00635e0ae29d405a38ec1a21", "patch": "@@ -0,0 +1,77 @@\n+// compile-flags: -Zmir-opt-level=0\n+// run-pass\n+\n+#![feature(const_panic)]\n+#![feature(const_float_bits_conv)]\n+#![feature(const_float_classify)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+// Don't promote\n+const fn nop<T>(x: T) -> T { x }\n+\n+macro_rules! const_assert {\n+    ($a:expr, $b:expr) => {\n+        {\n+            const _: () = assert!($a == $b);\n+            assert_eq!(nop($a), nop($b));\n+        }\n+    };\n+}\n+\n+macro_rules! suite {\n+    ( $( $tt:tt )* ) => {\n+        fn f32() {\n+            suite_inner!(f32 $($tt)*);\n+        }\n+\n+        fn f64() {\n+            suite_inner!(f64 $($tt)*);\n+        }\n+    }\n+\n+}\n+\n+macro_rules! suite_inner {\n+    (\n+        $ty:ident [$( $fn:ident ),*]\n+        $val:expr => [$($out:ident),*]\n+\n+        $( $tail:tt )*\n+    ) => {\n+        $( const_assert!($ty::$fn($val), $out); )*\n+        suite_inner!($ty [$($fn),*] $($tail)*)\n+    };\n+\n+    ( $ty:ident [$( $fn:ident ),*]) => {};\n+}\n+\n+#[derive(Debug)]\n+struct NonDet;\n+\n+impl const PartialEq<NonDet> for bool {\n+    fn eq(&self, _: &NonDet) -> bool {\n+        true\n+    }\n+}\n+\n+// The result of the `is_sign` methods are not checked for correctness, since LLVM does not\n+// guarantee anything about the signedness of NaNs. See\n+// https://github.com/rust-lang/rust/issues/55131.\n+\n+suite! {\n+                   [is_nan, is_infinite, is_finite, is_normal, is_sign_positive, is_sign_negative]\n+     -0.0 / 0.0 => [  true,       false,     false,     false,           NonDet,           NonDet]\n+      0.0 / 0.0 => [  true,       false,     false,     false,           NonDet,           NonDet]\n+            1.0 => [ false,       false,      true,      true,             true,            false]\n+           -1.0 => [ false,       false,      true,      true,            false,             true]\n+            0.0 => [ false,       false,      true,     false,             true,            false]\n+           -0.0 => [ false,       false,      true,     false,            false,             true]\n+      1.0 / 0.0 => [ false,        true,     false,     false,             true,            false]\n+     -1.0 / 0.0 => [ false,        true,     false,     false,            false,             true]\n+}\n+\n+fn main() {\n+    f32();\n+    f64();\n+}"}]}