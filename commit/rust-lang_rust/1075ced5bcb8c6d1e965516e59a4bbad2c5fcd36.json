{"sha": "1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzVjZWQ1YmNiOGM2ZDFlOTY1NTE2ZTU5YTRiYmFkMmM1ZmNkMzY=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-23T04:08:05Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-25T01:25:29Z"}, "message": "Discriminate between external and optional tools", "tree": {"sha": "8ff3b4597187560678b552c5269ba8d1182570df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff3b4597187560678b552c5269ba8d1182570df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "html_url": "https://github.com/rust-lang/rust/commit/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e098985939a1ac5baef4314aee44efc9dbf1b820", "url": "https://api.github.com/repos/rust-lang/rust/commits/e098985939a1ac5baef4314aee44efc9dbf1b820", "html_url": "https://github.com/rust-lang/rust/commit/e098985939a1ac5baef4314aee44efc9dbf1b820"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "7192cae8956e40b5157ac0ea5a34414f99e6d296", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "patch": "@@ -296,7 +296,8 @@ fn main() {\n         cmd.arg(\"--color=always\");\n     }\n \n-    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() && env::var_os(\"RUSTC_EXT_TOOL\").is_none() {\n+    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() && env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none()\n+    {\n         cmd.arg(\"-Dwarnings\");\n         cmd.arg(\"-Dbare_trait_objects\");\n     }"}, {"sha": "7301c59b0fae1ae40bd519f9bebc3aac97728784", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1075ced5bcb8c6d1e965516e59a4bbad2c5fcd36", "patch": "@@ -82,7 +82,8 @@ struct ToolBuild {\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n-    is_ext_tool: bool,\n+    is_optional_tool: bool,\n+    is_external_tool: bool,\n     extra_features: Vec<String>,\n }\n \n@@ -102,7 +103,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n-        let is_ext_tool = self.is_ext_tool;\n+        let is_optional_tool = self.is_optional_tool;\n \n         match self.mode {\n             Mode::ToolRustc => {\n@@ -122,7 +123,7 @@ impl Step for ToolBuild {\n             target,\n             \"build\",\n             path,\n-            is_ext_tool,\n+            self.is_external_tool,\n         );\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n@@ -224,7 +225,7 @@ impl Step for ToolBuild {\n         });\n \n         if !is_expected {\n-            if !is_ext_tool {\n+            if !is_optional_tool {\n                 exit(1);\n             } else {\n                 return None;\n@@ -246,7 +247,7 @@ pub fn prepare_tool_cargo(\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n-    is_ext_tool: bool,\n+    is_external_tool: bool,\n ) -> Command {\n     let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n@@ -256,8 +257,8 @@ pub fn prepare_tool_cargo(\n     // stages and such and it's just easier if they're not dynamically linked.\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n-    if is_ext_tool {\n-        cargo.env(\"RUSTC_EXT_TOOL\", \"1\");\n+    if is_external_tool {\n+        cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n     }\n \n     if let Some(dir) = builder.openssl_install_dir(target) {\n@@ -287,7 +288,8 @@ pub fn prepare_tool_cargo(\n }\n \n macro_rules! tool {\n-    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr $(,llvm_tools = $llvm:expr)*;)+) => {\n+    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr\n+        $(,llvm_tools = $llvm:expr)* $(,external_tool = $external:expr)*;)+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n         pub enum Tool {\n             $(\n@@ -364,7 +366,8 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n-                    is_ext_tool: false,\n+                    is_optional_tool: false,\n+                    is_external_tool: false $(|| $external)*,\n                     extra_features: Vec::new(),\n                 }).expect(\"expected to build -- essential tool\")\n             }\n@@ -383,7 +386,8 @@ tool!(\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n+        external_tool = true;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n );\n \n@@ -414,7 +418,8 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::ToolStd,\n             path: \"src/tools/remote-test-server\",\n-            is_ext_tool: false,\n+            is_optional_tool: false,\n+            is_external_tool: false,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -541,7 +546,8 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::ToolRustc,\n             path: \"src/tools/cargo\",\n-            is_ext_tool: false,\n+            is_optional_tool: false,\n+            is_external_tool: true,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -590,7 +596,8 @@ macro_rules! tool_extended {\n                     mode: Mode::ToolRustc,\n                     path: $path,\n                     extra_features: $sel.extra_features,\n-                    is_ext_tool: true,\n+                    is_optional_tool: true,\n+                    is_external_tool: true,\n                 })\n             }\n         }"}]}