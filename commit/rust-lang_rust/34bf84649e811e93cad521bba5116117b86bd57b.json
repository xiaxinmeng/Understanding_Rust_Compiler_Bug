{"sha": "34bf84649e811e93cad521bba5116117b86bd57b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmY4NDY0OWU4MTFlOTNjYWQ1MjFiYmE1MTE2MTE3Yjg2YmQ1N2I=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-29T22:06:49Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-31T19:55:39Z"}, "message": "Remove deprecated modes from rope.rs", "tree": {"sha": "fcf1c6ef80c1ac41205520d0d2ad34b6e652bea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf1c6ef80c1ac41205520d0d2ad34b6e652bea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bf84649e811e93cad521bba5116117b86bd57b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bf84649e811e93cad521bba5116117b86bd57b", "html_url": "https://github.com/rust-lang/rust/commit/34bf84649e811e93cad521bba5116117b86bd57b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bf84649e811e93cad521bba5116117b86bd57b/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2667fda8705dc2f626d9910dfd663243111aef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2667fda8705dc2f626d9910dfd663243111aef7", "html_url": "https://github.com/rust-lang/rust/commit/e2667fda8705dc2f626d9910dfd663243111aef7"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "12676377defafc2d91a64bba1484d7af7452df26", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/34bf84649e811e93cad521bba5116117b86bd57b/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf84649e811e93cad521bba5116117b86bd57b/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=34bf84649e811e93cad521bba5116117b86bd57b", "patch": "@@ -23,6 +23,8 @@\n  * * access to a character by index is logarithmic (linear in strings);\n  */\n \n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n /// The type of ropes.\n type rope = node::root;\n@@ -436,7 +438,7 @@ mod iterator {\n               node::content(x) => return node::leaf_iterator::start(x)\n             }\n         }\n-        fn next(it: node::leaf_iterator::t) -> Option<node::leaf> {\n+        fn next(it: &node::leaf_iterator::t) -> Option<node::leaf> {\n             return node::leaf_iterator::next(it);\n         }\n     }\n@@ -447,7 +449,7 @@ mod iterator {\n               node::content(x) => return node::char_iterator::start(x)\n             }\n         }\n-        fn next(it: node::char_iterator::t) -> Option<char> {\n+        fn next(it: &node::char_iterator::t) -> Option<char> {\n             return node::char_iterator::next(it)\n         }\n     }\n@@ -751,7 +753,7 @@ mod node {\n      * * forest - The forest. This vector is progressively rewritten during\n      *            execution and should be discarded as meaningless afterwards.\n      */\n-    fn tree_from_forest_destructive(forest: ~[mut @node]) -> @node {\n+    fn tree_from_forest_destructive(forest: &[mut @node]) -> @node {\n         let mut i;\n         let mut len = vec::len(forest);\n         while len > 1u {\n@@ -800,7 +802,7 @@ mod node {\n         let mut offset = 0u;//Current position in the buffer\n         let it = leaf_iterator::start(node);\n         loop {\n-            match (leaf_iterator::next(it)) {\n+            match (leaf_iterator::next(&it)) {\n               option::None => break,\n               option::Some(x) => {\n                 //FIXME (#2744): Replace with memcpy or something similar\n@@ -861,7 +863,7 @@ mod node {\n         let mut forest = ~[mut];\n         let it = leaf_iterator::start(node);\n         loop {\n-            match (leaf_iterator::next(it)) {\n+            match (leaf_iterator::next(&it)) {\n               option::None    => break,\n               option::Some(x) => vec::push(forest, @leaf(x))\n             }\n@@ -1018,7 +1020,7 @@ mod node {\n         let itb = char_iterator::start(b);\n         let mut result = 0;\n         while result == 0 {\n-            match ((char_iterator::next(ita), char_iterator::next(itb))) {\n+            match ((char_iterator::next(&ita), char_iterator::next(&itb))) {\n               (option::None, option::None) => break,\n               (option::Some(chara), option::Some(charb)) => {\n                 result = char::cmp(chara, charb);\n@@ -1121,7 +1123,7 @@ mod node {\n             }\n         }\n \n-        fn next(it: t) -> Option<leaf> {\n+        fn next(it: &t) -> Option<leaf> {\n             if it.stackpos < 0 { return option::None; }\n             loop {\n                 let current = it.stack[it.stackpos];\n@@ -1162,7 +1164,7 @@ mod node {\n             }\n         }\n \n-        fn next(it: t) -> Option<char> {\n+        fn next(it: &t) -> Option<char> {\n             loop {\n                 match (get_current_or_next_leaf(it)) {\n                   option::None => return option::None,\n@@ -1177,36 +1179,36 @@ mod node {\n             };\n         }\n \n-        fn get_current_or_next_leaf(it: t) -> Option<leaf> {\n-            match (it.leaf) {\n-              option::Some(_) => return it.leaf,\n+        fn get_current_or_next_leaf(it: &t) -> Option<leaf> {\n+            match ((*it).leaf) {\n+              option::Some(_) => return (*it).leaf,\n               option::None => {\n-                let next = leaf_iterator::next(it.leaf_iterator);\n+                let next = leaf_iterator::next(&((*it).leaf_iterator));\n                 match (next) {\n                   option::None => return option::None,\n                   option::Some(_) => {\n-                    it.leaf          = next;\n-                    it.leaf_byte_pos = 0u;\n+                    (*it).leaf          = next;\n+                    (*it).leaf_byte_pos = 0u;\n                     return next;\n                   }\n                 }\n               }\n             }\n         }\n \n-        fn get_next_char_in_leaf(it: t) -> Option<char> {\n-            match copy it.leaf {\n+        fn get_next_char_in_leaf(it: &t) -> Option<char> {\n+            match copy (*it).leaf {\n               option::None => return option::None,\n               option::Some(aleaf) => {\n-                if it.leaf_byte_pos >= aleaf.byte_len {\n+                if (*it).leaf_byte_pos >= aleaf.byte_len {\n                     //We are actually past the end of the leaf\n-                    it.leaf = option::None;\n+                    (*it).leaf = option::None;\n                     return option::None\n                 } else {\n                     let {ch, next} =\n                         str::char_range_at(*aleaf.content,\n-                                     it.leaf_byte_pos + aleaf.byte_offset);\n-                    it.leaf_byte_pos = next - aleaf.byte_offset;\n+                                     (*it).leaf_byte_pos + aleaf.byte_offset);\n+                    (*it).leaf_byte_pos = next - aleaf.byte_offset;\n                     return option::Some(ch)\n                 }\n               }\n@@ -1274,7 +1276,7 @@ mod tests {\n         let rope_iter   = iterator::char::start(r);\n         let mut equal   = true;\n         while equal {\n-            match (node::char_iterator::next(rope_iter)) {\n+            match (node::char_iterator::next(&rope_iter)) {\n               option::None => {\n                 if string_iter < string_len {\n                     equal = false;\n@@ -1301,7 +1303,7 @@ mod tests {\n         let mut len = 0u;\n         let it  = iterator::char::start(r);\n         loop {\n-            match (node::char_iterator::next(it)) {\n+            match (node::char_iterator::next(&it)) {\n               option::None => break,\n               option::Some(_) => len += 1u\n             }"}, {"sha": "5d2a04c038870e79b25b34db1a0bd8d6aaf03e9f", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34bf84649e811e93cad521bba5116117b86bd57b/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf84649e811e93cad521bba5116117b86bd57b/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=34bf84649e811e93cad521bba5116117b86bd57b", "patch": "@@ -1,5 +1,8 @@\n //! Temporary files and directories\n \n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import core::option;\n import option::{None, Some};\n import rand;"}]}