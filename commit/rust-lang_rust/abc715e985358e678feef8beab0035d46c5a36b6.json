{"sha": "abc715e985358e678feef8beab0035d46c5a36b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzcxNWU5ODUzNThlNjc4ZmVlZjhiZWFiMDAzNWQ0NmM1YTM2YjY=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-16T09:27:25Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-16T09:27:25Z"}, "message": "run rustfmt on bootstrap/bin folder", "tree": {"sha": "72362b22a773e83b28bfe8dcd8bf95120013025c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72362b22a773e83b28bfe8dcd8bf95120013025c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc715e985358e678feef8beab0035d46c5a36b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYA0f9AAoJEAkcWPS/w2VxX6gP/0XOa2DI687qu1RJ4ibMBVeG\nupZgE/rCBbQC3mAmt1PZtSsGurK0BGs64ZowG8+x228CnUtrKywPYN79uFXqKEi/\nzlH+qZLtamnBYd5ypMk/E7mQGcZSgEv5m9K9OgtUI0Bv+PNT3IQZMtarAuwL7e6w\nQaS5T6y07AYLeijWEpYyeJls/h1yPRh2Y4/K8UZHytz6w8YchwiASnkRPa0rUdlN\ntyVVqOK9hOlxaXEmP8KsWGBLmd6rRbUb85svuqyyQgHr2gKVnn6FvLbMw/1n6xVg\nvEPRvTXaB4cvDAhnbr9C4YLUC/VORRXhMX3Lk4uoN5rPAjBeLEE8fXUNvXv3gSv3\nPmRk59V4jMCTBuCNiE3S1taZACuZbltW1aeoDYR+2siPxyth7+ZijKUZvPavEWGI\naSko9MkEM5DK/2+Bnogwpe7FR4r8bgdBL1+GWj9foiBBacb0LMULmhLvEcOQasGp\nvKh9zhfHxQRYjpjvq75QLG5uXGgSsrrF1DrE5F3Uw5APM6+7Nc4JdwB3CD6suROy\nEAekelX4sc0oqVNHKrnhrGpLcbabnu0xoGfq7zShGUbUC07dzUvvoeGkYH4DBYGF\nFA3gv38Hq5/6EG1H4OQvZKnuLnUIlrqEYyPUB3PjHOpIIYupHtxKXgYnUCfsGACn\n4p5rH2DdR0ADKKp0hEe1\n=9dxc\n-----END PGP SIGNATURE-----", "payload": "tree 72362b22a773e83b28bfe8dcd8bf95120013025c\nparent 6dc035ed911672c6a1f7afc9eed15fb08e574e5b\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476610045 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476610045 +0530\n\nrun rustfmt on bootstrap/bin folder\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc715e985358e678feef8beab0035d46c5a36b6", "html_url": "https://github.com/rust-lang/rust/commit/abc715e985358e678feef8beab0035d46c5a36b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc715e985358e678feef8beab0035d46c5a36b6/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "1e507868edbd40ae02a351c7c5d3b7f611759c72", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abc715e985358e678feef8beab0035d46c5a36b6/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc715e985358e678feef8beab0035d46c5a36b6/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=abc715e985358e678feef8beab0035d46c5a36b6", "patch": "@@ -36,8 +36,9 @@ fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n-    let target = args.windows(2).find(|w| &*w[0] == \"--target\")\n-                                .and_then(|w| w[1].to_str());\n+    let target = args.windows(2)\n+        .find(|w| &*w[0] == \"--target\")\n+        .and_then(|w| w[1].to_str());\n     let version = args.iter().find(|w| &**w == \"-vV\");\n \n     // Build scripts always use the snapshot compiler which is guaranteed to be\n@@ -64,9 +65,10 @@ fn main() {\n \n     let mut cmd = Command::new(rustc);\n     cmd.args(&args)\n-       .arg(\"--cfg\").arg(format!(\"stage{}\", stage))\n-       .env(bootstrap::util::dylib_path_var(),\n-            env::join_paths(&dylib_path).unwrap());\n+        .arg(\"--cfg\")\n+        .arg(format!(\"stage{}\", stage))\n+        .env(bootstrap::util::dylib_path_var(),\n+             env::join_paths(&dylib_path).unwrap());\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n@@ -101,9 +103,8 @@ fn main() {\n         // This... is a bit of a hack how we detect this. Ideally this\n         // information should be encoded in the crate I guess? Would likely\n         // require an RFC amendment to RFC 1513, however.\n-        let is_panic_abort = args.windows(2).any(|a| {\n-            &*a[0] == \"--crate-name\" && &*a[1] == \"panic_abort\"\n-        });\n+        let is_panic_abort = args.windows(2)\n+            .any(|a| &*a[0] == \"--crate-name\" && &*a[1] == \"panic_abort\");\n         if is_panic_abort {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n@@ -114,7 +115,7 @@ fn main() {\n             cmd.arg(\"-g\");\n         }\n         let debug_assertions = match env::var(\"RUSTC_DEBUG_ASSERTIONS\") {\n-            Ok(s) => if s == \"true\" {\"y\"} else {\"n\"},\n+            Ok(s) => if s == \"true\" { \"y\" } else { \"n\" },\n             Err(..) => \"n\",\n         };\n         cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));"}, {"sha": "67358e540dad0c1419745658bb0548d9934ec2d8", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc715e985358e678feef8beab0035d46c5a36b6/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc715e985358e678feef8beab0035d46c5a36b6/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=abc715e985358e678feef8beab0035d46c5a36b6", "patch": "@@ -29,10 +29,12 @@ fn main() {\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n-       .arg(\"--cfg\").arg(format!(\"stage{}\", stage))\n-       .arg(\"--cfg\").arg(\"dox\")\n-       .env(bootstrap::util::dylib_path_var(),\n-            env::join_paths(&dylib_path).unwrap());\n+        .arg(\"--cfg\")\n+        .arg(format!(\"stage{}\", stage))\n+        .arg(\"--cfg\")\n+        .arg(\"dox\")\n+        .env(bootstrap::util::dylib_path_var(),\n+             env::join_paths(&dylib_path).unwrap());\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}]}