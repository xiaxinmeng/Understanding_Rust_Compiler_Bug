{"sha": "3810657ae3712e7714e3eb16b4102af318bef3b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTA2NTdhZTM3MTJlNzcxNGUzZWIxNmI0MTAyYWYzMThiZWYzYjY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-05T20:33:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-05T20:33:13Z"}, "message": "Rollup merge of #54787 - varkor:unused-mut-in-desugaring, r=nikomatsakis\n\nOnly warn about unused `mut` in user-written code\n\nFixes https://github.com/rust-lang/rust/issues/54586.\n\nr? @pnkfelix\ncc @blitzerr", "tree": {"sha": "6be7e5aef17db76226962ff7b719044e5d9cf895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6be7e5aef17db76226962ff7b719044e5d9cf895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3810657ae3712e7714e3eb16b4102af318bef3b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbt8qKCRBK7hj4Ov3rIwAAdHIIAAsyGb4hjAbCBbTET5Gbkzoa\nWS4IPsC+u4FoeuziSZDkDeytm5SjHH+WuYu5S447e7nzW0uELGBpBXjAXv8i3E56\nXFWYDbyfZ7fgSV2GK/ItQQbCjYB+0TmqiUQjjsWUdtyKNrHq4g5mSDse5CUvDHFB\nVjhqZaGQSjxLYYDYKnnvdZ6W1RAeb1Ji8dLC+TbLBMy1XvXpZt+UpV/wJBFSq+g9\n5IoA0qdV5KP/EF0/hYI+Oc4FWewMq3dtBUVQ+mNQIPp69KCdc1A8jfgNFhs2pSUR\nbxWdRnQyemRvPozX2LYqQXKHJCHCPyfgKRjnrEKJO0n8wlha2KpX3BQJIen30Y4=\n=oTct\n-----END PGP SIGNATURE-----\n", "payload": "tree 6be7e5aef17db76226962ff7b719044e5d9cf895\nparent 9e8f522e80a76ccadeb1efc4a62851fd624ff742\nparent ea3d8f510dfe18870b8b0b2bb5bf007fe914c262\nauthor Pietro Albini <pietro@pietroalbini.org> 1538771593 +0200\ncommitter GitHub <noreply@github.com> 1538771593 +0200\n\nRollup merge of #54787 - varkor:unused-mut-in-desugaring, r=nikomatsakis\n\nOnly warn about unused `mut` in user-written code\n\nFixes https://github.com/rust-lang/rust/issues/54586.\n\nr? @pnkfelix\ncc @blitzerr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3810657ae3712e7714e3eb16b4102af318bef3b6", "html_url": "https://github.com/rust-lang/rust/commit/3810657ae3712e7714e3eb16b4102af318bef3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3810657ae3712e7714e3eb16b4102af318bef3b6/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8f522e80a76ccadeb1efc4a62851fd624ff742", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f522e80a76ccadeb1efc4a62851fd624ff742", "html_url": "https://github.com/rust-lang/rust/commit/9e8f522e80a76ccadeb1efc4a62851fd624ff742"}, {"sha": "ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "html_url": "https://github.com/rust-lang/rust/commit/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "7309358091056e32bc512e7536d5b0d05b6681fe", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -4132,16 +4132,16 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let head = self.lower_expr(head);\n                 let head_sp = head.span;\n+                let desugared_span = self.allow_internal_unstable(\n+                    CompilerDesugaringKind::ForLoop,\n+                    head_sp,\n+                );\n \n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n-                let next_sp = self.allow_internal_unstable(\n-                    CompilerDesugaringKind::ForLoop,\n-                    head_sp,\n-                );\n                 let next_pat = self.pat_ident_binding_mode(\n-                    next_sp,\n+                    desugared_span,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n                 );\n@@ -4170,8 +4170,11 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 // `mut iter`\n-                let iter_pat =\n-                    self.pat_ident_binding_mode(head_sp, iter, hir::BindingAnnotation::Mutable);\n+                let iter_pat = self.pat_ident_binding_mode(\n+                    desugared_span,\n+                    iter,\n+                    hir::BindingAnnotation::Mutable\n+                );\n \n                 // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n                 let match_expr = {\n@@ -4200,8 +4203,12 @@ impl<'a> LoweringContext<'a> {\n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n                 // `let mut __next`\n-                let next_let =\n-                    self.stmt_let_pat(head_sp, None, next_pat, hir::LocalSource::ForLoopDesugar);\n+                let next_let = self.stmt_let_pat(\n+                    desugared_span,\n+                    None,\n+                    next_pat,\n+                    hir::LocalSource::ForLoopDesugar,\n+                );\n \n                 // `let <pat> = __next`\n                 let pat = self.lower_pat(pat);"}, {"sha": "da2173fead3707d1e34a5e2b3cb0bf9dffbb1b59", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -46,7 +46,7 @@ use ty::subst::Subst;\n use ty::SubtypePredicate;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n@@ -68,18 +68,30 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }).collect();\n \n         for (index, error) in errors.iter().enumerate() {\n-            error_map.entry(error.obligation.cause.span).or_default().push(\n+            // We want to ignore desugarings here: spans are equivalent even\n+            // if one is the result of a desugaring and the other is not.\n+            let mut span = error.obligation.cause.span;\n+            if let Some(ExpnInfo {\n+                format: ExpnFormat::CompilerDesugaring(_),\n+                def_site: Some(def_span),\n+                ..\n+            }) = span.ctxt().outer().expn_info() {\n+                span = def_span;\n+            }\n+\n+            error_map.entry(span).or_default().push(\n                 ErrorDescriptor {\n                     predicate: error.obligation.predicate.clone(),\n                     index: Some(index)\n-                });\n+                }\n+            );\n \n             self.reported_trait_errors.borrow_mut()\n-                .entry(error.obligation.cause.span).or_default()\n+                .entry(span).or_default()\n                 .push(error.obligation.predicate.clone());\n         }\n \n-        // We do this in 2 passes because we want to display errors in order, tho\n+        // We do this in 2 passes because we want to display errors in order, though\n         // maybe it *is* better to sort errors by span or something.\n         let mut is_suppressed = vec![false; errors.len()];\n         for (_, error_set) in error_map.iter() {"}, {"sha": "b1f89ce33fcfa58339a4ac31e5ec8f4160face2c", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -76,10 +76,14 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n             }\n \n             let (hir_id, span) = ids[0];\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+            if span.compiler_desugaring_kind().is_some() {\n+                // If the `mut` arises as part of a desugaring, we should ignore it.\n+                continue;\n+            }\n \n             // Ok, every name wasn't used mutably, so issue a warning that this\n             // didn't need to be mutable.\n+            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n             tcx.struct_span_lint_hir(UNUSED_MUT,\n                                      hir_id,\n                                      span,"}, {"sha": "0943b36440aa67c7fc2f2f65c814d22f1c76e750", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -316,14 +316,18 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             }\n \n             let span = local_decl.source_info.span;\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+            if span.compiler_desugaring_kind().is_some() {\n+                // If the `mut` arises as part of a desugaring, we should ignore it.\n+                continue;\n+            }\n \n             let mut err = tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n                 vsi[local_decl.source_info.scope].lint_root,\n                 span,\n                 \"variable does not need to be mutable\",\n             );\n+            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n             err.span_suggestion_short_with_applicability(\n                 mut_span,\n                 \"remove this `mut`\","}, {"sha": "7ee45d7078739f04fbab8da8d53d8c061806a4fe", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -140,7 +140,8 @@ enum CallKind {\n fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n-        mutability, ty,\n+        mutability,\n+        ty,\n         user_ty: None,\n         name: None,\n         source_info,"}, {"sha": "419d580419f42270217c2f633ea4dbba70b9ee33", "filename": "src/test/ui/mut/no-mut-lint-for-desugared-mut.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810657ae3712e7714e3eb16b4102af318bef3b6/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs?ref=3810657ae3712e7714e3eb16b4102af318bef3b6", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+#![deny(unused_mut)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+    for _ in { return (); 0..3 } {} // ok\n+}"}]}