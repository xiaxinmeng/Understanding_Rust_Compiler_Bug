{"sha": "399ba6bb377ce02224b57c4d6e127e160fa76b34", "node_id": "C_kwDOAAsO6NoAKDM5OWJhNmJiMzc3Y2UwMjIyNGI1N2M0ZDZlMTI3ZTE2MGZhNzZiMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T20:30:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T20:30:23Z"}, "message": "Auto merge of #92314 - Kobzol:encoding-u16-leb128, r=michaelwoerister\n\nDo not use LEB128 for encoding u16 and i16\n\nAn experiment to try out the suggestion from https://github.com/rust-lang/rust/issues/68779.\n\nCloses: https://github.com/rust-lang/rust/issues/68779", "tree": {"sha": "31d32fd2a048776181dee61085e687980677149d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d32fd2a048776181dee61085e687980677149d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/399ba6bb377ce02224b57c4d6e127e160fa76b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/399ba6bb377ce02224b57c4d6e127e160fa76b34", "html_url": "https://github.com/rust-lang/rust/commit/399ba6bb377ce02224b57c4d6e127e160fa76b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/399ba6bb377ce02224b57c4d6e127e160fa76b34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "html_url": "https://github.com/rust-lang/rust/commit/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}, {"sha": "6c9ffe4aec905bef7ef77278e736851a660940e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9ffe4aec905bef7ef77278e736851a660940e1", "html_url": "https://github.com/rust-lang/rust/commit/6c9ffe4aec905bef7ef77278e736851a660940e1"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "f2ef14816813ffcc8f97f94bace4b99c149ae28b", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/399ba6bb377ce02224b57c4d6e127e160fa76b34/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399ba6bb377ce02224b57c4d6e127e160fa76b34/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=399ba6bb377ce02224b57c4d6e127e160fa76b34", "patch": "@@ -92,7 +92,8 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_u16(&mut self, v: u16) -> EncodeResult {\n-        write_leb128!(self, v, u16, write_u16_leb128)\n+        self.data.extend_from_slice(&v.to_le_bytes());\n+        Ok(())\n     }\n \n     #[inline]\n@@ -123,7 +124,8 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_i16(&mut self, v: i16) -> EncodeResult {\n-        write_leb128!(self, v, i16, write_i16_leb128)\n+        self.data.extend_from_slice(&v.to_le_bytes());\n+        Ok(())\n     }\n \n     #[inline]\n@@ -446,7 +448,7 @@ impl serialize::Encoder for FileEncoder {\n \n     #[inline]\n     fn emit_u16(&mut self, v: u16) -> FileEncodeResult {\n-        file_encoder_write_leb128!(self, v, u16, write_u16_leb128)\n+        self.write_all(&v.to_le_bytes())\n     }\n \n     #[inline]\n@@ -476,13 +478,12 @@ impl serialize::Encoder for FileEncoder {\n \n     #[inline]\n     fn emit_i16(&mut self, v: i16) -> FileEncodeResult {\n-        file_encoder_write_leb128!(self, v, i16, write_i16_leb128)\n+        self.write_all(&v.to_le_bytes())\n     }\n \n     #[inline]\n     fn emit_i8(&mut self, v: i8) -> FileEncodeResult {\n-        let as_u8: u8 = unsafe { std::mem::transmute(v) };\n-        self.emit_u8(as_u8)\n+        self.emit_u8(v as u8)\n     }\n \n     #[inline]\n@@ -591,7 +592,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n     #[inline]\n     fn read_u16(&mut self) -> Result<u16, Self::Error> {\n-        read_leb128!(self, read_u16_leb128)\n+        let bytes = [self.data[self.position], self.data[self.position + 1]];\n+        let value = u16::from_le_bytes(bytes);\n+        self.position += 2;\n+        Ok(value)\n     }\n \n     #[inline]\n@@ -623,7 +627,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n     #[inline]\n     fn read_i16(&mut self) -> Result<i16, Self::Error> {\n-        read_leb128!(self, read_i16_leb128)\n+        let bytes = [self.data[self.position], self.data[self.position + 1]];\n+        let value = i16::from_le_bytes(bytes);\n+        self.position += 2;\n+        Ok(value)\n     }\n \n     #[inline]"}]}