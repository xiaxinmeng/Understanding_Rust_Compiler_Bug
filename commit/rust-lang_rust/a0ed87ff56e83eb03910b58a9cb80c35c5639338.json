{"sha": "a0ed87ff56e83eb03910b58a9cb80c35c5639338", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZWQ4N2ZmNTZlODNlYjAzOTEwYjU4YTljYjgwYzM1YzU2MzkzMzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-21T00:29:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-21T00:29:15Z"}, "message": "Merge #8127\n\n8127: Add label completion r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9360702f2aaf0c4672a9ed74c51604a8353662a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9360702f2aaf0c4672a9ed74c51604a8353662a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ed87ff56e83eb03910b58a9cb80c35c5639338", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVpNbCRBK7hj4Ov3rIwAAdHIIAITwhfXQiGFOL1eOJEm+mD1f\nZZ/uNr8WLhcp3iXt9anjk64RF545cbhLjldxychg0ohCb6gpRzcOONqNPk5pB1u3\n6bJWTQtGAjimPgUribr0X+n83uBCHYomVLrUpzHEkyO5r2K7poqf37VZNdUnFSgj\nXhn6WSqArNsuWfpkQ9lfRBx3bFeL04LwN2lqP8GCBmdqMHp91JJaY8je0eAypyDy\nBjUX/Ml8oTQ0fh2AAJWSX60+/ULIGGiOSiBLDee9ruGwuWnj9CBKsNUPOa4xyjVr\nqcHfFo2hueNnE+MZKDFAE0TeDRDbDH+wnasZnWmeSmr0wiBR5HN6alYxW1IanRI=\n=dPj2\n-----END PGP SIGNATURE-----\n", "payload": "tree 9360702f2aaf0c4672a9ed74c51604a8353662a0\nparent 787bd3c5516d250245f6070308d689311b638fbe\nparent 64957acb5f359763395a54e314d1f5d5cfc6ccf3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616286555 +0000\ncommitter GitHub <noreply@github.com> 1616286555 +0000\n\nMerge #8127\n\n8127: Add label completion r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ed87ff56e83eb03910b58a9cb80c35c5639338", "html_url": "https://github.com/rust-lang/rust/commit/a0ed87ff56e83eb03910b58a9cb80c35c5639338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ed87ff56e83eb03910b58a9cb80c35c5639338/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787bd3c5516d250245f6070308d689311b638fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/787bd3c5516d250245f6070308d689311b638fbe", "html_url": "https://github.com/rust-lang/rust/commit/787bd3c5516d250245f6070308d689311b638fbe"}, {"sha": "64957acb5f359763395a54e314d1f5d5cfc6ccf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/64957acb5f359763395a54e314d1f5d5cfc6ccf3", "html_url": "https://github.com/rust-lang/rust/commit/64957acb5f359763395a54e314d1f5d5cfc6ccf3"}], "stats": {"total": 202, "additions": 184, "deletions": 18}, "files": [{"sha": "e34be7e42f1999af1830a6f78ef3b3fcfa1cf065", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -2199,6 +2199,7 @@ pub enum ScopeDef {\n     ImplSelfType(Impl),\n     AdtSelfType(Adt),\n     Local(Local),\n+    Label(Label),\n     Unknown,\n }\n "}, {"sha": "1198e3f0be5ffc1a4de8e88ebc4a73e90806640e", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -839,6 +839,10 @@ impl<'a> SemanticsScope<'a> {\n                     let parent = resolver.body_owner().unwrap();\n                     ScopeDef::Local(Local { parent, pat_id })\n                 }\n+                resolver::ScopeDef::Label(label_id) => {\n+                    let parent = resolver.body_owner().unwrap();\n+                    ScopeDef::Label(Label { parent, label_id })\n+                }\n             };\n             f(name, def)\n         })"}, {"sha": "bd7005ca6966dcb39be7bb2ac64ed8d9aef0b96e", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     body::Body,\n     db::DefDatabase,\n-    expr::{Expr, ExprId, Pat, PatId, Statement},\n+    expr::{Expr, ExprId, LabelId, Pat, PatId, Statement},\n     BlockId, DefWithBodyId,\n };\n \n@@ -40,6 +40,7 @@ impl ScopeEntry {\n pub struct ScopeData {\n     parent: Option<ScopeId>,\n     block: Option<BlockId>,\n+    label: Option<(LabelId, Name)>,\n     entries: Vec<ScopeEntry>,\n }\n \n@@ -67,6 +68,11 @@ impl ExprScopes {\n         self.scopes[scope].block\n     }\n \n+    /// If `scope` refers to a labeled expression scope, returns the corresponding `Label`.\n+    pub fn label(&self, scope: ScopeId) -> Option<(LabelId, Name)> {\n+        self.scopes[scope].label.clone()\n+    }\n+\n     pub fn scope_chain(&self, scope: Option<ScopeId>) -> impl Iterator<Item = ScopeId> + '_ {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n@@ -85,15 +91,34 @@ impl ExprScopes {\n     }\n \n     fn root_scope(&mut self) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: None, block: None, entries: vec![] })\n+        self.scopes.alloc(ScopeData { parent: None, block: None, label: None, entries: vec![] })\n     }\n \n     fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: Some(parent), block: None, entries: vec![] })\n+        self.scopes.alloc(ScopeData {\n+            parent: Some(parent),\n+            block: None,\n+            label: None,\n+            entries: vec![],\n+        })\n     }\n \n-    fn new_block_scope(&mut self, parent: ScopeId, block: BlockId) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: Some(parent), block: Some(block), entries: vec![] })\n+    fn new_labeled_scope(&mut self, parent: ScopeId, label: Option<(LabelId, Name)>) -> ScopeId {\n+        self.scopes.alloc(ScopeData { parent: Some(parent), block: None, label, entries: vec![] })\n+    }\n+\n+    fn new_block_scope(\n+        &mut self,\n+        parent: ScopeId,\n+        block: BlockId,\n+        label: Option<(LabelId, Name)>,\n+    ) -> ScopeId {\n+        self.scopes.alloc(ScopeData {\n+            parent: Some(parent),\n+            block: Some(block),\n+            label,\n+            entries: vec![],\n+        })\n     }\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n@@ -144,21 +169,33 @@ fn compute_block_scopes(\n }\n \n fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: ScopeId) {\n+    let make_label =\n+        |label: &Option<_>| label.map(|label| (label, body.labels[label].name.clone()));\n+\n     scopes.set_scope(expr, scope);\n     match &body[expr] {\n-        Expr::Block { statements, tail, id, .. } => {\n-            let scope = scopes.new_block_scope(scope, *id);\n+        Expr::Block { statements, tail, id, label } => {\n+            let scope = scopes.new_block_scope(scope, *id, make_label(label));\n             // Overwrite the old scope for the block expr, so that every block scope can be found\n             // via the block itself (important for blocks that only contain items, no expressions).\n             scopes.set_scope(expr, scope);\n-            compute_block_scopes(&statements, *tail, body, scopes, scope);\n+            compute_block_scopes(statements, *tail, body, scopes, scope);\n         }\n-        Expr::For { iterable, pat, body: body_expr, .. } => {\n+        Expr::For { iterable, pat, body: body_expr, label } => {\n             compute_expr_scopes(*iterable, body, scopes, scope);\n-            let scope = scopes.new_scope(scope);\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n             scopes.add_bindings(body, scope, *pat);\n             compute_expr_scopes(*body_expr, body, scopes, scope);\n         }\n+        Expr::While { condition, body: body_expr, label } => {\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n+            compute_expr_scopes(*condition, body, scopes, scope);\n+            compute_expr_scopes(*body_expr, body, scopes, scope);\n+        }\n+        Expr::Loop { body: body_expr, label } => {\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n+            compute_expr_scopes(*body_expr, body, scopes, scope);\n+        }\n         Expr::Lambda { args, body: body_expr, .. } => {\n             let scope = scopes.new_scope(scope);\n             scopes.add_params_bindings(body, scope, &args);"}, {"sha": "4a2d1c08752d3c0a1b7defaec31457132a8e49bf", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     body::scope::{ExprScopes, ScopeId},\n     builtin_type::BuiltinType,\n     db::DefDatabase,\n-    expr::{ExprId, PatId},\n+    expr::{ExprId, LabelId, PatId},\n     generics::GenericParams,\n     item_scope::{BuiltinShadowMode, BUILTIN_SCOPE},\n     nameres::DefMap,\n@@ -409,6 +409,7 @@ pub enum ScopeDef {\n     AdtSelfType(AdtId),\n     GenericParam(GenericParamId),\n     Local(PatId),\n+    Label(LabelId),\n }\n \n impl Scope {\n@@ -470,6 +471,9 @@ impl Scope {\n                 f(name![Self], ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(scope) => {\n+                if let Some((label, name)) = scope.expr_scopes.label(scope.scope_id) {\n+                    f(name.clone(), ScopeDef::Label(label))\n+                }\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n                     f(e.name().clone(), ScopeDef::Local(e.pat()));\n                 });"}, {"sha": "628c1fb9b6cb97dabd9dd8926fe43a591cc191cc", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -1,4 +1,4 @@\n-//! Completes lifetimes.\n+//! Completes lifetimes and labels.\n use hir::ScopeDef;\n \n use crate::{completions::Completions, context::CompletionContext};\n@@ -29,6 +29,18 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     }\n }\n \n+/// Completes labels.\n+pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.is_label_ref {\n+        return;\n+    }\n+    ctx.scope.process_all_names(&mut |name, res| {\n+        if let ScopeDef::Label(_) = res {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n+    });\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -178,4 +190,96 @@ fn foo<'footime, 'lifetime: 'a$0>() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn complete_label_in_loop() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        break '$0\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        continue '$0\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_block_nested() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: {\n+        'baap: {\n+            break '$0\n+        }\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'baap\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_loop_with_value() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        break '$0 i32;\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_while_cond() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'outer: while { 'inner: loop { break '$0 } } {}\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'inner\n+                lb 'outer\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_for_iterable() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'outer: for _ in [{ 'inner: loop { break '$0 } }] {}\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'inner\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "67e2d6f6c2944765c9e13afba5db23eed30fc005", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -53,6 +53,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n+    pub(super) is_label_ref: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding_or_const: bool,\n@@ -155,6 +156,7 @@ impl<'a> CompletionContext<'a> {\n             record_field_syntax: None,\n             impl_def: None,\n             active_parameter: ActiveParameter::at(db, position),\n+            is_label_ref: false,\n             is_param: false,\n             is_pat_binding_or_const: false,\n             is_irrefutable_pat_binding: false,\n@@ -468,12 +470,24 @@ impl<'a> CompletionContext<'a> {\n     ) {\n         self.lifetime_syntax =\n             find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n-        if lifetime.syntax().parent().map_or(false, |p| p.kind() != syntax::SyntaxKind::ERROR) {\n-            self.lifetime_allowed = true;\n-        }\n-        if let Some(_) = lifetime.syntax().parent().and_then(ast::LifetimeParam::cast) {\n-            self.lifetime_param_syntax =\n-                self.sema.find_node_at_offset_with_macros(original_file, offset);\n+        if let Some(parent) = lifetime.syntax().parent() {\n+            if parent.kind() == syntax::SyntaxKind::ERROR {\n+                return;\n+            }\n+\n+            match_ast! {\n+                match parent {\n+                    ast::LifetimeParam(_it) => {\n+                        self.lifetime_allowed = true;\n+                        self.lifetime_param_syntax =\n+                            self.sema.find_node_at_offset_with_macros(original_file, offset);\n+                    },\n+                    ast::BreakExpr(_it) => self.is_label_ref = true,\n+                    ast::ContinueExpr(_it) => self.is_label_ref = true,\n+                    ast::Label(_it) => (),\n+                    _ => self.lifetime_allowed = true,\n+                }\n+            }\n         }\n     }\n "}, {"sha": "995970fcab8cc5c8be15b966c776b4c7300390b5", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -131,6 +131,7 @@ pub fn completions(\n     completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::lifetime::complete_lifetime(&mut acc, &ctx);\n+    completions::lifetime::complete_label(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "23e00aa471a359c3a390b1a8393fa1d5570eedcc", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ed87ff56e83eb03910b58a9cb80c35c5639338/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=a0ed87ff56e83eb03910b58a9cb80c35c5639338", "patch": "@@ -219,6 +219,7 @@ impl<'a> Render<'a> {\n                 hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n             }),\n             ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n+            ScopeDef::Label(..) => CompletionItemKind::SymbolKind(SymbolKind::Label),\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n                 CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n             }"}]}