{"sha": "b6a976676c5a9caf5ac7e6305ad52ebc11ab135c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YTk3NjY3NmM1YTljYWY1YWM3ZTYzMDVhZDUyZWJjMTFhYjEzNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T07:42:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T07:42:55Z"}, "message": "Auto merge of #5096 - eddyb:mac-name, r=oli-obk\n\nDon't use ExpnKind::descr to get the name of a bang macro.\n\nThis is the same change as the first commit in rust-lang/rust#68407, but applied to clippy.\nThe new code should work both before and after the changes in rust-lang/rust#68407.\n\nchangelog: none", "tree": {"sha": "286155d70fdcf6bbfbdb6f63691e0497cee10dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/286155d70fdcf6bbfbdb6f63691e0497cee10dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c", "html_url": "https://github.com/rust-lang/rust/commit/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6f609f64bb7a458f65a287326f941f58e1c4e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6f609f64bb7a458f65a287326f941f58e1c4e9", "html_url": "https://github.com/rust-lang/rust/commit/fd6f609f64bb7a458f65a287326f941f58e1c4e9"}, {"sha": "0e52a0ed6d5aeb7e93d3b1cbf5d2ccb9a49ec4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e52a0ed6d5aeb7e93d3b1cbf5d2ccb9a49ec4c2", "html_url": "https://github.com/rust-lang/rust/commit/0e52a0ed6d5aeb7e93d3b1cbf5d2ccb9a49ec4c2"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d1849a7c3141a95760db34dc0d252453c191dc26", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a976676c5a9caf5ac7e6305ad52ebc11ab135c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b6a976676c5a9caf5ac7e6305ad52ebc11ab135c", "patch": "@@ -42,7 +42,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::*;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_span::hygiene::ExpnKind;\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -758,14 +758,15 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n         if span.from_expansion() {\n             let data = span.ctxt().outer_expn_data();\n-            let mac_name = data.kind.descr();\n             let new_span = data.call_site;\n \n-            if mac_name.as_str() == name {\n-                return Some(new_span);\n-            } else {\n-                span = new_span;\n+            if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n+                if mac_name.as_str() == name {\n+                    return Some(new_span);\n+                }\n             }\n+\n+            span = new_span;\n         } else {\n             return None;\n         }\n@@ -785,17 +786,16 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n     if span.from_expansion() {\n         let data = span.ctxt().outer_expn_data();\n-        let mac_name = data.kind.descr();\n         let new_span = data.call_site;\n \n-        if mac_name.as_str() == name {\n-            Some(new_span)\n-        } else {\n-            None\n+        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n+            if mac_name.as_str() == name {\n+                return Some(new_span);\n+            }\n         }\n-    } else {\n-        None\n     }\n+\n+    None\n }\n \n /// Convenience function to get the return type of a function."}]}