{"sha": "cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzdkOTQ0YmFhNGExZDVhZTBjMDlkNjg1MzdjZTIwZmU2YjQ3ZjQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-18T19:46:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-24T19:37:24Z"}, "message": "Add example and extra documentation", "tree": {"sha": "47b3f277ba86aa435350df7b15e0ebdb7db6f9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b3f277ba86aa435350df7b15e0ebdb7db6f9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3a2/QACgkQtAh+UQ6Y\nsWSZ1Q/8CwfFpv764Zo2DN7y2kG0r+gElhKOjZwQFGrAxgHXhwVyVtcEJW8AU2Wi\nUddUV7Psr2RgkRpnu2NiJtSitwsPFC33M64Kywk6RaQ9F6Ekeqfv2vRxyYCKw6BK\n5EvE88lt+3vUQvL6NgRZ+RIlOIBKstR1Bv7vuSU7sceMnqgx26n/PffWy9hXLcrH\nnDdWOOD/IGM21T1p2ieIjk6LIGdVaqN0kejhyOAUGfR6LGfqAvyfdr/EPoCXuHOm\n2yb7ezVQis7MDo2IDgf++DvyPeOMCSszvUbz+p2dsFfwiUVejWvCmr1LHtlDjDaO\nTREE9uTeLK2JngT/HkRdGc+pvNjSLSm/hCVhucBdIOhgWJXKPYvSFoYxAJ1XQfRg\nzkpidaPLezTNt5/B9D5H6WRmJtvMgYndVR/uIqpn1PXgJqtaDjIUavxCv9/Cc8v6\nUnkFwJPxw8x8lhTq2Io/r76TYwnJoBknNNJBcr8nnFVepsTgSuqwcESx0OEaSmDB\nPf33M/oHjXYYmd6E525yH6fQCyhEcdARiI7qStqOw3eQHkP6aB5aINb+si7IpkPb\n/IuNwan6OI/rbiDY+DSFfV8gV+yO5LcjpEgqJckkAW994Y+pL7PItBLZOPuNQbnU\nzt/T6P+sJVdPmmTaKLxvCjVt5NaMdArzPfN/YP+yCpuXjagUX1s=\n=N1L4\n-----END PGP SIGNATURE-----", "payload": "tree 47b3f277ba86aa435350df7b15e0ebdb7db6f9cd\nparent 542383f65b5419820e90f4374f93d2d1207f3f08\nauthor Aaron Hill <aa1ronham@gmail.com> 1574106376 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574624244 -0500\n\nAdd example and extra documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4", "html_url": "https://github.com/rust-lang/rust/commit/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542383f65b5419820e90f4374f93d2d1207f3f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/542383f65b5419820e90f4374f93d2d1207f3f08", "html_url": "https://github.com/rust-lang/rust/commit/542383f65b5419820e90f4374f93d2d1207f3f08"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "9182eb10545ca3763df0185f869f43fd20b6e0d9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cec7d944baa4a1d5ae0c09d68537ce20fe6b47f4", "patch": "@@ -879,6 +879,30 @@ fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {\n /// variables introduced by the projection of associated types. This ensures that\n /// any opaque types used in the signature continue to refer to generic parameters,\n /// allowing them to be considered for defining uses in the function body\n+///\n+/// For example, consider this code.\n+///\n+/// ```rust\n+/// trait MyTrait {\n+///     type MyItem;\n+///     fn use_it(self) -> Self::MyItem\n+/// }\n+/// impl<T, I> MyTrait for T where T: Iterator<Item = I> {\n+///     type MyItem = impl Iterator<Item = I>;\n+///     fn use_it(self) -> Self::MyItem {\n+///         self\n+///     }\n+/// }\n+/// ```\n+///\n+/// When we normalize the signature of `use_it` from the impl block,\n+/// we will normalize `Self::MyItem` to the opaque type `impl Iterator<Item = I>`\n+/// However, this projection result may contain inference variables, due\n+/// to the way that projection works. We didn't have any inference variables\n+/// in the signature to begin with - leaving them in will cause us to incorrectly\n+/// conclude that we don't have a defining use of `MyItem`. By mapping inference\n+/// variables back to the actual generic parameters, we will correctly see that\n+/// we have a defining use of `MyItem`\n fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: &T) -> T where T: TypeFoldable<'tcx> {\n     struct FixupFolder<'tcx> {\n         tcx: TyCtxt<'tcx>\n@@ -893,6 +917,14 @@ fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: &T) -> T where T: TypeFol\n             match ty.kind {\n                 ty::Opaque(def_id, substs) => {\n                     debug!(\"fixup_opaque_types: found type {:?}\", ty);\n+                    // Here, we replace any inference variables that occur within\n+                    // the substs of an opaque type. By definition, any type occuring\n+                    // in the substs has a corresponding generic parameter, which is what\n+                    // we replace it with.\n+                    // This replacement is only run on the function signature, so any\n+                    // inference variables that we come across must be the rust of projection\n+                    // (there's no other way for a user to get inference variables into\n+                    // a function signature).\n                     if ty.needs_infer() {\n                         let new_substs = InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n                             let old_param = substs[param.index as usize];"}]}