{"sha": "fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "node_id": "C_kwDOAAsO6NoAKGZlZGY3MGFjYjFlOGE1MWMzNmE5NzBiZjIwYWE0ZTZmZWJmODE1Zjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T19:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T19:29:45Z"}, "message": "Rollup merge of #94818 - yoshuawuyts:into-future-associated-type, r=joshtriplett\n\nRename `IntoFuture::Future` to `IntoFuture::IntoFuture`\n\nRef: https://github.com/rust-lang/rust/issues/67644#issuecomment-1051401459\n\nThis renames `IntoFuture::Future` to `IntoFuture::IntoFuture`. This adds the `Into*` prefix to the associated type, similar to the [`IntoIterator::IntoIter`](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html#associatedtype.IntoIter) associated type. It's my mistake we didn't do so in the first place. This fixes that and brings the two closer together. Thanks!\n\n### References\n__`IntoIterator` trait def__\n```rust\npub trait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Item = Self::Item>;\n    fn into_iter(self) -> Self::IntoIter;\n}\n```\n__`IntoFuture` trait def__\n```rust\npub trait IntoFuture {\n    type Output;\n    type IntoFuture: Future<Output = Self::Output>; // Prior to this PR: `type Future:`\n    fn into_future(self) -> Self::IntoFuture;\n}\n```\n\ncc/ `@eholk` `@rust-lang/wg-async`", "tree": {"sha": "dca024c85dac6655a620d931fd38ff7d58f54960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca024c85dac6655a620d931fd38ff7d58f54960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK6MpCRBK7hj4Ov3rIwAAI4sIACsEJvPxPV8S5cK3/IfYmWi/\nfjjPupcSs5kfRpsMaDpwSKhY33si+u8E/Ydjfy51UldeaRpcHxfbOHRwnaLmg0Yj\n9prJ8WWEEqZCYpChioneVmVnPBtf1nJ5Xguu1bVYLYq53yYFS5nYTXd//htuUU0m\nVw3QvWqzG9FAULXXb6+KW+N0TJl8/KZn6a2LatP46chqJnARAFtfTxR2sIfdzfd4\nRbCBWU6Zv0TOcouNXasAFVPQ/HJ5SMktzCofyqEhYSHazOt/D2MNGv6kj3h0mBAB\nivM8iAJpMyFLnSRcK+k0ht9jZT25wP718K65g8+FXnh2hbCLLomucHW2BU/uVr4=\n=CGtP\n-----END PGP SIGNATURE-----\n", "payload": "tree dca024c85dac6655a620d931fd38ff7d58f54960\nparent 86376e3aeae46f31ba14e82835ed27a063fb31e5\nparent 3f2cb6eba1ce2dfdc4db3743f29363396942ce28\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647026985 +0100\ncommitter GitHub <noreply@github.com> 1647026985 +0100\n\nRollup merge of #94818 - yoshuawuyts:into-future-associated-type, r=joshtriplett\n\nRename `IntoFuture::Future` to `IntoFuture::IntoFuture`\n\nRef: https://github.com/rust-lang/rust/issues/67644#issuecomment-1051401459\n\nThis renames `IntoFuture::Future` to `IntoFuture::IntoFuture`. This adds the `Into*` prefix to the associated type, similar to the [`IntoIterator::IntoIter`](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html#associatedtype.IntoIter) associated type. It's my mistake we didn't do so in the first place. This fixes that and brings the two closer together. Thanks!\n\n### References\n__`IntoIterator` trait def__\n```rust\npub trait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Item = Self::Item>;\n    fn into_iter(self) -> Self::IntoIter;\n}\n```\n__`IntoFuture` trait def__\n```rust\npub trait IntoFuture {\n    type Output;\n    type IntoFuture: Future<Output = Self::Output>; // Prior to this PR: `type Future:`\n    fn into_future(self) -> Self::IntoFuture;\n}\n```\n\ncc/ `@eholk` `@rust-lang/wg-async`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "html_url": "https://github.com/rust-lang/rust/commit/fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedf70acb1e8a51c36a970bf20aa4e6febf815f9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86376e3aeae46f31ba14e82835ed27a063fb31e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/86376e3aeae46f31ba14e82835ed27a063fb31e5", "html_url": "https://github.com/rust-lang/rust/commit/86376e3aeae46f31ba14e82835ed27a063fb31e5"}, {"sha": "3f2cb6eba1ce2dfdc4db3743f29363396942ce28", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2cb6eba1ce2dfdc4db3743f29363396942ce28", "html_url": "https://github.com/rust-lang/rust/commit/3f2cb6eba1ce2dfdc4db3743f29363396942ce28"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "8014dacdd98da6887b938cd1b377582b28f3e4a3", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fedf70acb1e8a51c36a970bf20aa4e6febf815f9/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedf70acb1e8a51c36a970bf20aa4e6febf815f9/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "patch": "@@ -9,20 +9,20 @@ pub trait IntoFuture {\n \n     /// Which kind of future are we turning this into?\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n-    type Future: Future<Output = Self::Output>;\n+    type IntoFuture: Future<Output = Self::Output>;\n \n     /// Creates a future from a value.\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n     #[lang = \"into_future\"]\n-    fn into_future(self) -> Self::Future;\n+    fn into_future(self) -> Self::IntoFuture;\n }\n \n #[unstable(feature = \"into_future\", issue = \"67644\")]\n impl<F: Future> IntoFuture for F {\n     type Output = F::Output;\n-    type Future = F;\n+    type IntoFuture = F;\n \n-    fn into_future(self) -> Self::Future {\n+    fn into_future(self) -> Self::IntoFuture {\n         self\n     }\n }"}, {"sha": "6e1b155e181eea8cc84ef2580991e7754f4f3427", "filename": "src/test/ui/async-await/await-into-future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedf70acb1e8a51c36a970bf20aa4e6febf815f9/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedf70acb1e8a51c36a970bf20aa4e6febf815f9/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs?ref=fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "patch": "@@ -10,9 +10,9 @@ struct AwaitMe;\n \n impl IntoFuture for AwaitMe {\n     type Output = i32;\n-    type Future = Pin<Box<dyn Future<Output = i32>>>;\n+    type IntoFuture = Pin<Box<dyn Future<Output = i32>>>;\n \n-    fn into_future(self) -> Self::Future {\n+    fn into_future(self) -> Self::IntoFuture {\n         Box::pin(me())\n     }\n }"}]}