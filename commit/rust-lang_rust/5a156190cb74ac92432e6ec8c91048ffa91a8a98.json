{"sha": "5a156190cb74ac92432e6ec8c91048ffa91a8a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTU2MTkwY2I3NGFjOTI0MzJlNmVjOGM5MTA0OGZmYTkxYThhOTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-27T14:53:57Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-28T18:08:29Z"}, "message": "Fix more bugs in the alignment calculation refs to DSTs.", "tree": {"sha": "42157bdd40880e82904317a23f219f4de27cac78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42157bdd40880e82904317a23f219f4de27cac78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a156190cb74ac92432e6ec8c91048ffa91a8a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a156190cb74ac92432e6ec8c91048ffa91a8a98", "html_url": "https://github.com/rust-lang/rust/commit/5a156190cb74ac92432e6ec8c91048ffa91a8a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a156190cb74ac92432e6ec8c91048ffa91a8a98/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea0dc4f6d3d9648f7f2a1d894a884563de2984b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea0dc4f6d3d9648f7f2a1d894a884563de2984b", "html_url": "https://github.com/rust-lang/rust/commit/cea0dc4f6d3d9648f7f2a1d894a884563de2984b"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "67e2e4cba4c34732e8f2bb81d4b0d78051081752", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a156190cb74ac92432e6ec8c91048ffa91a8a98/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a156190cb74ac92432e6ec8c91048ffa91a8a98/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=5a156190cb74ac92432e6ec8c91048ffa91a8a98", "patch": "@@ -437,34 +437,57 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, in\n             let field_ty = last_field.mt.ty;\n             let (unsized_size, unsized_align) = size_and_align_of_dst(bcx, field_ty, info);\n \n+            let dbloc = DebugLoc::None;\n+\n             // #27023 FIXME: We should be adding any necessary padding\n             // to `sized_size` (to accommodate the `unsized_align`\n             // required of the unsized field that follows) before\n             // summing it with `sized_size`.\n \n             // Return the sum of sizes and max of aligns.\n-            let mut size = Add(bcx, sized_size, unsized_size, DebugLoc::None);\n+            let mut size = Add(bcx, sized_size, unsized_size, dbloc);\n \n             // Issue #27023: If there is a drop flag, *now* we add 1\n             // to the size.  (We can do this without adding any\n             // padding because drop flags do not have any alignment\n             // constraints.)\n             if sizing_type.needs_drop_flag() {\n-                size = Add(bcx, size, C_uint(bcx.ccx(), 1_u64), DebugLoc::None);\n+                size = Add(bcx, size, C_uint(bcx.ccx(), 1_u64), dbloc);\n             }\n \n+            // Choose max of two known alignments (combined value must\n+            // be aligned according to more restrictive of the two).\n             let align = Select(bcx,\n                                ICmp(bcx,\n-                                    llvm::IntULT,\n+                                    llvm::IntUGT,\n                                     sized_align,\n                                     unsized_align,\n-                                    DebugLoc::None),\n+                                    dbloc),\n                                sized_align,\n                                unsized_align);\n \n-            // #27023 FIXME: We should be adding any necessary padding\n-            // to `size` (to make it a multiple of `align`) before\n-            // returning it.\n+            // Issue #27023: must add any necessary padding to `size`\n+            // (to make it a multiple of `align`) before returning it.\n+            //\n+            // Namely, the returned size should be, in C notation:\n+            //\n+            //   `size + ((size & (align-1)) ? align : 0)`\n+            //\n+            // Currently I am emulating the above via:\n+            //\n+            //   `size + ((size & (align-1)) * align-(size & (align-1)))`\n+            //\n+            // because I am not sure which is cheaper between a branch\n+            // or a multiply.\n+\n+            let mask = Sub(bcx, align, C_uint(bcx.ccx(), 1_u64), dbloc);\n+            let lowbits = And(bcx, size, mask, DebugLoc::None);\n+            let nonzero = ICmp(bcx, llvm::IntNE, lowbits, C_uint(bcx.ccx(), 0_u64), dbloc);\n+            let add_size = Mul(bcx,\n+                               ZExt(bcx, nonzero, Type::i64(bcx.ccx())),\n+                               Sub(bcx, align, lowbits, dbloc),\n+                               dbloc);\n+            let size = Add(bcx, size, add_size, dbloc);\n \n             (size, align)\n         }"}]}