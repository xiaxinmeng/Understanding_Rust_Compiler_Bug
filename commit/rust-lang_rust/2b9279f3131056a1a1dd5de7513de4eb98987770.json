{"sha": "2b9279f3131056a1a1dd5de7513de4eb98987770", "node_id": "C_kwDOAAsO6NoAKDJiOTI3OWYzMTMxMDU2YTFhMWRkNWRlNzUxM2RlNGViOTg5ODc3NzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-03T23:22:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T03:19:54Z"}, "message": "Diagnostic args are still args if they're documented", "tree": {"sha": "c02f865cc084f3226777b785183bb4d888869b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02f865cc084f3226777b785183bb4d888869b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b9279f3131056a1a1dd5de7513de4eb98987770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9279f3131056a1a1dd5de7513de4eb98987770", "html_url": "https://github.com/rust-lang/rust/commit/2b9279f3131056a1a1dd5de7513de4eb98987770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b9279f3131056a1a1dd5de7513de4eb98987770/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6b20bf5225c65aab30169c9a173719f5bdfc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6b20bf5225c65aab30169c9a173719f5bdfc04", "html_url": "https://github.com/rust-lang/rust/commit/ad6b20bf5225c65aab30169c9a173719f5bdfc04"}], "stats": {"total": 105, "additions": 97, "deletions": 8}, "files": [{"sha": "83b47f8acfbd6549e96e8a781fb41ce83758e1c2", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b9279f3131056a1a1dd5de7513de4eb98987770/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9279f3131056a1a1dd5de7513de4eb98987770/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=2b9279f3131056a1a1dd5de7513de4eb98987770", "patch": "@@ -4,17 +4,16 @@ use crate::diagnostics::error::{\n     invalid_attr, span_err, throw_invalid_attr, throw_span_err, DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, is_doc_comment, new_code_ident,\n-    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n-    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n+    build_field_mapping, build_suggestion_code, is_doc_comment, new_code_ident,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span,\n+    should_generate_set_arg, AllowMultipleAlternatives, FieldInfo, FieldInnerTy, FieldMap,\n+    HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n-use super::utils::{build_suggestion_code, AllowMultipleAlternatives};\n-\n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n pub(crate) struct SubdiagnosticDeriveBuilder {\n     diag: syn::Ident,\n@@ -212,7 +211,6 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     /// Generates the code for a field with no attributes.\n     fn generate_field_set_arg(&mut self, binding: &BindingInfo<'_>) -> TokenStream {\n         let ast = binding.ast();\n-        assert_eq!(ast.attrs.len(), 0, \"field with attribute used as diagnostic arg\");\n \n         let diag = &self.parent.diag;\n         let ident = ast.ident.as_ref().unwrap();\n@@ -580,7 +578,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n             .variant\n             .bindings()\n             .iter()\n-            .filter(|binding| binding.ast().attrs.is_empty())\n+            .filter(|binding| should_generate_set_arg(binding.ast()))\n             .map(|binding| self.generate_field_set_arg(binding))\n             .collect();\n "}, {"sha": "bc97e39bebd8a76819eeff1d1f5ded7ceb7201b9", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b9279f3131056a1a1dd5de7513de4eb98987770/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9279f3131056a1a1dd5de7513de4eb98987770/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=2b9279f3131056a1a1dd5de7513de4eb98987770", "patch": "@@ -851,7 +851,8 @@ impl quote::IdentFragment for SubdiagnosticKind {\n /// Returns `true` if `field` should generate a `set_arg` call rather than any other diagnostic\n /// call (like `span_label`).\n pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n-    field.attrs.is_empty()\n+    // Perhaps this should be an exhaustive list...\n+    field.attrs.iter().all(|attr| is_doc_comment(attr))\n }\n \n pub(super) fn is_doc_comment(attr: &Attribute) -> bool {"}, {"sha": "7e1f7b1c5c10d0cb1cec7a3c8e3910add7ac0701", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2b9279f3131056a1a1dd5de7513de4eb98987770/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9279f3131056a1a1dd5de7513de4eb98987770/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs?ref=2b9279f3131056a1a1dd5de7513de4eb98987770", "patch": "@@ -0,0 +1,47 @@\n+// check-fail\n+// Tests that a doc comment will not preclude a field from being considered a diagnostic argument\n+\n+// The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n+// changing the output of this test. Since Subdiagnostic is strictly internal to the compiler\n+// the test is just ignored on stable and beta:\n+// ignore-stage1\n+// ignore-beta\n+// ignore-stable\n+\n+#![feature(rustc_private)]\n+#![crate_type = \"lib\"]\n+\n+extern crate rustc_errors;\n+extern crate rustc_fluent_macro;\n+extern crate rustc_macros;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_errors::{Applicability, DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_fluent_macro::fluent_messages;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_span::Span;\n+\n+fluent_messages! { \"./example.ftl\" }\n+\n+struct NotIntoDiagnosticArg;\n+\n+#[derive(Diagnostic)]\n+//~^ ERROR the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+#[diag(no_crate_example)]\n+struct Test {\n+    #[primary_span]\n+    span: Span,\n+    /// A doc comment\n+    arg: NotIntoDiagnosticArg,\n+}\n+\n+#[derive(Subdiagnostic)]\n+//~^ ERROR the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+#[label(no_crate_example)]\n+struct SubTest {\n+    #[primary_span]\n+    span: Span,\n+    /// A doc comment\n+    arg: NotIntoDiagnosticArg,\n+}"}, {"sha": "27044748d0803103b97937939d3f570faf996095", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2b9279f3131056a1a1dd5de7513de4eb98987770/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b9279f3131056a1a1dd5de7513de4eb98987770/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr?ref=2b9279f3131056a1a1dd5de7513de4eb98987770", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+  --> $DIR/diagnostic-derive-doc-comment-field.rs:29:10\n+   |\n+LL | #[derive(Diagnostic)]\n+   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `NotIntoDiagnosticArg`\n+   |\n+   = help: the following other types implement trait `IntoDiagnosticArg`:\n+             &'a T\n+             &'a std::path::Path\n+             &'a str\n+             &rustc_target::spec::TargetTriple\n+             Box<(dyn std::error::Error + 'static)>\n+             CString\n+             CguReuse\n+             Cow<'a, str>\n+           and 42 others\n+note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:747:5\n+   = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+  --> $DIR/diagnostic-derive-doc-comment-field.rs:39:10\n+   |\n+LL | #[derive(Subdiagnostic)]\n+   |          ^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `NotIntoDiagnosticArg`\n+   |\n+   = help: the following other types implement trait `IntoDiagnosticArg`:\n+             &'a T\n+             &'a std::path::Path\n+             &'a str\n+             &rustc_target::spec::TargetTriple\n+             Box<(dyn std::error::Error + 'static)>\n+             CString\n+             CguReuse\n+             Cow<'a, str>\n+           and 42 others\n+note: required by a bound in `Diagnostic::set_arg`\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:964:5\n+   = note: this error originates in the derive macro `Subdiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}