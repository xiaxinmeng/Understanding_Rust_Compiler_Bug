{"sha": "df4457e20bb6017de97ff69af58a0a92a3a5b423", "node_id": "C_kwDOAAsO6NoAKGRmNDQ1N2UyMGJiNjAxN2RlOTdmZjY5YWY1OGEwYTkyYTNhNWI0MjM", "commit": {"author": {"name": "Austin Kiekintveld", "email": "akiekintveld@icloud.com", "date": "2022-05-01T23:46:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-01T23:46:19Z"}, "message": "Relax memory ordering used in SameMutexCheck\n\n`SameMutexCheck` only requires atomicity for `self.addr`, but does not need ordering of other memory accesses in either the success or failure case. Using `Relaxed`, the code still correctly handles the case when two threads race to store an address.", "tree": {"sha": "c96ea5bfa0ef09169cf9ebd46ccb7d6059dca267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96ea5bfa0ef09169cf9ebd46ccb7d6059dca267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4457e20bb6017de97ff69af58a0a92a3a5b423", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibxvLCRBK7hj4Ov3rIwAAf3sIADNbzTWSLGRGIqFZ5PoqERSz\np9vDyZAkY3bWQMqDInf5ShAGWKhlzj1uGJAh1vRgZfhh1ktvFU26aGrEXjCKkVys\nZNXxJULFqo9gMHTHJ4rHP1jJg+EYwBGofvvVsJCsOd6bv/4C0UDSk3vHtEnDhcyi\n3uFBMcx9xvhnG2M6TPYUPHAtI8/4/sV5Ej+0iEAqqCDnr8ktTI8AMLpFjd01k7K6\nsLyJKwGsT00yBVMENXvG7tZAAQq19xRIeVEd1RiaYgSzw5e6jnESYrvuGgreicZS\nEDveg5c1NcP30RnFP447emu14WvYVFIWsAxrx3mMI7OVbLBqg57hmUXJN9nztcw=\n=0nJG\n-----END PGP SIGNATURE-----\n", "payload": "tree c96ea5bfa0ef09169cf9ebd46ccb7d6059dca267\nparent 4dd8b420c027001e47b0d811a7e55e2fe1de1395\nauthor Austin Kiekintveld <akiekintveld@icloud.com> 1651448779 -0700\ncommitter GitHub <noreply@github.com> 1651448779 -0700\n\nRelax memory ordering used in SameMutexCheck\n\n`SameMutexCheck` only requires atomicity for `self.addr`, but does not need ordering of other memory accesses in either the success or failure case. Using `Relaxed`, the code still correctly handles the case when two threads race to store an address."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4457e20bb6017de97ff69af58a0a92a3a5b423", "html_url": "https://github.com/rust-lang/rust/commit/df4457e20bb6017de97ff69af58a0a92a3a5b423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4457e20bb6017de97ff69af58a0a92a3a5b423/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd8b420c027001e47b0d811a7e55e2fe1de1395", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd8b420c027001e47b0d811a7e55e2fe1de1395", "html_url": "https://github.com/rust-lang/rust/commit/4dd8b420c027001e47b0d811a7e55e2fe1de1395"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "69cad21b096081d35617642fc52a878c2ab13d90", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4457e20bb6017de97ff69af58a0a92a3a5b423/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4457e20bb6017de97ff69af58a0a92a3a5b423/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=df4457e20bb6017de97ff69af58a0a92a3a5b423", "patch": "@@ -24,7 +24,7 @@ impl SameMutexCheck {\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n         let addr = mutex.raw() as *const imp::Mutex as *const () as *mut _;\n-        match self.addr.compare_exchange(ptr::null_mut(), addr, Ordering::SeqCst, Ordering::SeqCst)\n+        match self.addr.compare_exchange(ptr::null_mut(), addr, Ordering::Relaxed, Ordering::Relaxed)\n         {\n             Ok(_) => {}               // Stored the address\n             Err(n) if n == addr => {} // Lost a race to store the same address"}]}