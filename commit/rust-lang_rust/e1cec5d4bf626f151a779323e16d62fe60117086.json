{"sha": "e1cec5d4bf626f151a779323e16d62fe60117086", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxY2VjNWQ0YmY2MjZmMTUxYTc3OTMyM2UxNmQ2MmZlNjAxMTcwODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-29T15:38:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-29T15:38:11Z"}, "message": "Auto merge of #40899 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #40720, #40786, #40841, #40866, #40897\n- Failed merges:", "tree": {"sha": "f941431a28867cefae446253be3bb3298517a7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f941431a28867cefae446253be3bb3298517a7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1cec5d4bf626f151a779323e16d62fe60117086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cec5d4bf626f151a779323e16d62fe60117086", "html_url": "https://github.com/rust-lang/rust/commit/e1cec5d4bf626f151a779323e16d62fe60117086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1cec5d4bf626f151a779323e16d62fe60117086/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf69238b82661f5fcb6488e31ef27977f5d2cb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf69238b82661f5fcb6488e31ef27977f5d2cb81", "html_url": "https://github.com/rust-lang/rust/commit/cf69238b82661f5fcb6488e31ef27977f5d2cb81"}, {"sha": "8df6cd365c9bca8729d56c176443411cc18beed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df6cd365c9bca8729d56c176443411cc18beed3", "html_url": "https://github.com/rust-lang/rust/commit/8df6cd365c9bca8729d56c176443411cc18beed3"}], "stats": {"total": 1624, "additions": 1368, "deletions": 256}, "files": [{"sha": "fe491d7f9018ef5fff1d0c2cd78a5d55744be79f", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -7,90 +7,207 @@\n - [abi_vectorcall](abi-vectorcall.md)\n - [abi_x86_interrupt](abi-x86-interrupt.md)\n - [advanced_slice_patterns](advanced-slice-patterns.md)\n+- [alloc](alloc.md)\n - [alloc_jemalloc](alloc-jemalloc.md)\n - [alloc_system](alloc-system.md)\n - [allocator](allocator.md)\n - [allow_internal_unstable](allow-internal-unstable.md)\n+- [as_unsafe_cell](as-unsafe-cell.md)\n+- [ascii_ctype](ascii-ctype.md)\n - [asm](asm.md)\n - [associated_consts](associated-consts.md)\n - [associated_type_defaults](associated-type-defaults.md)\n - [attr_literals](attr-literals.md)\n+- [binary_heap_extras](binary-heap-extras.md)\n+- [binary_heap_peek_mut_pop](binary-heap-peek-mut-pop.md)\n+- [borrow_state](borrow-state.md)\n+- [box_heap](box-heap.md)\n - [box_patterns](box-patterns.md)\n - [box_syntax](box-syntax.md)\n+- [c_void_variant](c-void-variant.md)\n+- [catch_expr](catch-expr.md)\n - [cfg_target_feature](cfg-target-feature.md)\n - [cfg_target_has_atomic](cfg-target-has-atomic.md)\n - [cfg_target_thread_local](cfg-target-thread-local.md)\n - [cfg_target_vendor](cfg-target-vendor.md)\n+- [char_escape_debug](char-escape-debug.md)\n+- [closure_to_fn_coercion](closure-to-fn-coercion.md)\n+- [coerce_unsized](coerce-unsized.md)\n+- [collection_placement](collection-placement.md)\n+- [collections](collections.md)\n+- [collections_range](collections-range.md)\n+- [command_envs](command-envs.md)\n - [compiler_builtins](compiler-builtins.md)\n+- [compiler_builtins_lib](compiler-builtins-lib.md)\n - [concat_idents](concat-idents.md)\n+- [concat_idents_macro](concat-idents-macro.md)\n - [conservative_impl_trait](conservative-impl-trait.md)\n - [const_fn](const-fn.md)\n - [const_indexing](const-indexing.md)\n+- [core_char_ext](core-char-ext.md)\n+- [core_float](core-float.md)\n+- [core_intrinsics](core-intrinsics.md)\n+- [core_panic](core-panic.md)\n+- [core_private_bignum](core-private-bignum.md)\n+- [core_private_diy_float](core-private-diy-float.md)\n+- [core_slice_ext](core-slice-ext.md)\n+- [core_str_ext](core-str-ext.md)\n - [custom_attribute](custom-attribute.md)\n - [custom_derive](custom-derive.md)\n+- [dec2flt](dec2flt.md)\n+- [decode_utf8](decode-utf8.md)\n - [default_type_parameter_fallback](default-type-parameter-fallback.md)\n+- [derive_clone_copy](derive-clone-copy.md)\n+- [derive_eq](derive-eq.md)\n+- [discriminant_value](discriminant-value.md)\n - [drop_types_in_const](drop-types-in-const.md)\n - [dropck_eyepatch](dropck-eyepatch.md)\n - [dropck_parametricity](dropck-parametricity.md)\n+- [enumset](enumset.md)\n+- [error_type_id](error-type-id.md)\n+- [exact_size_is_empty](exact-size-is-empty.md)\n - [exclusive_range_pattern](exclusive-range-pattern.md)\n-- [field_init_shorthand](field-init-shorthand.md)\n+- [fd](fd.md)\n+- [fd_read](fd-read.md)\n+- [fixed_size_array](fixed-size-array.md)\n+- [float_extras](float-extras.md)\n+- [flt2dec](flt2dec.md)\n+- [fmt_flags_align](fmt-flags-align.md)\n+- [fmt_internals](fmt-internals.md)\n+- [fn_traits](fn-traits.md)\n+- [fnbox](fnbox.md)\n - [fundamental](fundamental.md)\n+- [fused](fused.md)\n+- [future_atomic_orderings](future-atomic-orderings.md)\n - [generic_param_attrs](generic-param-attrs.md)\n+- [get_type_id](get-type-id.md)\n+- [heap_api](heap-api.md)\n+- [i128](i128.md)\n - [i128_type](i128-type.md)\n+- [inclusive_range](inclusive-range.md)\n - [inclusive_range_syntax](inclusive-range-syntax.md)\n+- [int_error_internals](int-error-internals.md)\n+- [integer_atomics](integer-atomics.md)\n+- [into_boxed_c_str](into-boxed-c-str.md)\n+- [into_boxed_os_str](into-boxed-os-str.md)\n+- [into_boxed_path](into-boxed-path.md)\n - [intrinsics](intrinsics.md)\n+- [io](io.md)\n+- [io_error_internals](io-error-internals.md)\n+- [ip](ip.md)\n+- [is_unique](is-unique.md)\n+- [iter_rfind](iter-rfind.md)\n - [lang_items](lang-items.md)\n+- [libstd_io_internals](libstd-io-internals.md)\n+- [libstd_sys_internals](libstd-sys-internals.md)\n+- [libstd_thread_internals](libstd-thread-internals.md)\n - [link_args](link-args.md)\n - [link_cfg](link-cfg.md)\n - [link_llvm_intrinsics](link-llvm-intrinsics.md)\n - [linkage](linkage.md)\n+- [linked_list_extras](linked-list-extras.md)\n - [log_syntax](log-syntax.md)\n+- [lookup_host](lookup-host.md)\n - [loop_break_value](loop-break-value.md)\n - [macro_reexport](macro-reexport.md)\n - [main](main.md)\n+- [map_entry_recover_keys](map-entry-recover-keys.md)\n+- [mpsc_select](mpsc-select.md)\n+- [n16](n16.md)\n - [naked_functions](naked-functions.md)\n - [needs_allocator](needs-allocator.md)\n - [needs_panic_runtime](needs-panic-runtime.md)\n - [never_type](never-type.md)\n+- [never_type_impls](never-type-impls.md)\n - [no_core](no-core.md)\n - [no_debug](no-debug.md)\n - [non_ascii_idents](non-ascii-idents.md)\n+- [nonzero](nonzero.md)\n - [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n - [on_unimplemented](on-unimplemented.md)\n+- [once_poison](once-poison.md)\n+- [oom](oom.md)\n - [optin_builtin_traits](optin-builtin-traits.md)\n+- [option_entry](option-entry.md)\n+- [osstring_shrink_to_fit](osstring-shrink-to-fit.md)\n+- [panic_abort](panic-abort.md)\n - [panic_runtime](panic-runtime.md)\n+- [panic_unwind](panic-unwind.md)\n+- [pattern](pattern.md)\n+- [peek](peek.md)\n+- [placement_in](placement-in.md)\n - [placement_in_syntax](placement-in-syntax.md)\n+- [placement_new_protocol](placement-new-protocol.md)\n - [platform_intrinsics](platform-intrinsics.md)\n - [plugin](plugin.md)\n - [plugin_registrar](plugin-registrar.md)\n - [prelude_import](prelude-import.md)\n+- [print](print.md)\n - [proc_macro](proc-macro.md)\n+- [proc_macro_internals](proc-macro-internals.md)\n+- [process_try_wait](process-try-wait.md)\n+- [pub_restricted](pub-restricted.md)\n+- [question_mark_carrier](question-mark-carrier.md)\n - [quote](quote.md)\n+- [rand](rand.md)\n+- [range_contains](range-contains.md)\n+- [raw](raw.md)\n+- [rc_would_unwrap](rc-would-unwrap.md)\n - [relaxed_adts](relaxed-adts.md)\n - [repr_simd](repr-simd.md)\n+- [retain_hash_collection](retain-hash-collection.md)\n+- [rt](rt.md)\n - [rustc_attrs](rustc-attrs.md)\n - [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n+- [rustc_private](rustc-private.md)\n+- [rustdoc](rustdoc.md)\n - [rvalue_static_promotion](rvalue-static-promotion.md)\n - [sanitizer_runtime](sanitizer-runtime.md)\n+- [sanitizer_runtime_lib](sanitizer-runtime-lib.md)\n+- [set_stdio](set-stdio.md)\n+- [shared](shared.md)\n - [simd](simd.md)\n - [simd_ffi](simd-ffi.md)\n+- [sip_hash_13](sip-hash-13.md)\n+- [slice_concat_ext](slice-concat-ext.md)\n+- [slice_get_slice](slice-get-slice.md)\n - [slice_patterns](slice-patterns.md)\n+- [sort_internals](sort-internals.md)\n - [sort_unstable](sort-unstable.md)\n - [specialization](specialization.md)\n - [staged_api](staged-api.md)\n - [start](start.md)\n - [static_nobundle](static-nobundle.md)\n-- [static_recursion](static-recursion.md)\n+- [step_by](step-by.md)\n+- [step_trait](step-trait.md)\n - [stmt_expr_attributes](stmt-expr-attributes.md)\n+- [str_escape](str-escape.md)\n+- [str_internals](str-internals.md)\n - [struct_field_attributes](struct-field-attributes.md)\n - [structural_match](structural-match.md)\n - [target_feature](target-feature.md)\n - [test](test.md)\n+- [thread_id](thread-id.md)\n - [thread_local](thread-local.md)\n+- [thread_local_internals](thread-local-internals.md)\n+- [thread_local_state](thread-local-state.md)\n - [trace_macros](trace-macros.md)\n+- [trusted_len](trusted-len.md)\n+- [try_from](try-from.md)\n - [type_ascription](type-ascription.md)\n - [unboxed_closures](unboxed-closures.md)\n+- [unicode](unicode.md)\n+- [unique](unique.md)\n+- [unsize](unsize.md)\n - [untagged_unions](untagged-unions.md)\n - [unwind_attributes](unwind-attributes.md)\n+- [update_panic_count](update-panic-count.md)\n - [use_extern_macros](use-extern-macros.md)\n+- [utf8_error_error_len](utf8-error-error-len.md)\n+- [vec_remove_item](vec-remove-item.md)\n+- [windows_c](windows-c.md)\n+- [windows_handle](windows-handle.md)\n+- [windows_net](windows-net.md)\n+- [windows_stdio](windows-stdio.md)\n - [windows_subsystem](windows-subsystem.md)\n+- [zero_one](zero-one.md)"}, {"sha": "47eeb0874fba1edf8a4e9b6b683de52a54181f09", "filename": "src/doc/unstable-book/src/alloc.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `alloc`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "79d7a7cad0b6e232c869ec59bf1ccc6a2eb11f7a", "filename": "src/doc/unstable-book/src/as-unsafe-cell.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fas-unsafe-cell.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `as_unsafe_cell`\n+\n+The tracking issue for this feature is: [#27708]\n+\n+[#27708]: https://github.com/rust-lang/rust/issues/27708\n+\n+------------------------"}, {"sha": "e253b4dcd9b5a1e6e456af8dcd0f235869d43b01", "filename": "src/doc/unstable-book/src/ascii-ctype.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fascii-ctype.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `ascii_ctype`\n+\n+The tracking issue for this feature is: [#39658]\n+\n+[#39658]: https://github.com/rust-lang/rust/issues/39658"}, {"sha": "aa535f3b67840cd51a80aec11c38d9648be17cbd", "filename": "src/doc/unstable-book/src/binary-heap-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-extras.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `binary_heap_extras`\n+\n+The tracking issue for this feature is: [#28147]\n+\n+[#28147]: https://github.com/rust-lang/rust/issues/28147\n+\n+------------------------"}, {"sha": "f3863ab2a2abb4f98d65648b503c8ac32f09d3bb", "filename": "src/doc/unstable-book/src/binary-heap-peek-mut-pop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbinary-heap-peek-mut-pop.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `binary_heap_peek_mut_pop`\n+\n+The tracking issue for this feature is: [#38863]\n+\n+[#38863]: https://github.com/rust-lang/rust/issues/38863\n+\n+------------------------"}, {"sha": "304b8dffe98679c9f6fea3e7d2558757c1797563", "filename": "src/doc/unstable-book/src/borrow-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fborrow-state.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `borrow_state`\n+\n+The tracking issue for this feature is: [#27733]\n+\n+[#27733]: https://github.com/rust-lang/rust/issues/27733\n+\n+------------------------"}, {"sha": "0f3f01ba0e164e0fddbf343c1d38687738cd0297", "filename": "src/doc/unstable-book/src/box-heap.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-heap.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `box_heap`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "a2fdc99363007b0ee90445d0045f59cc39f069d6", "filename": "src/doc/unstable-book/src/c-void-variant.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fc-void-variant.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `c_void_variant`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "44eb2a6dd4fdbda5f4ff346ddf8a36bbf7c85618", "filename": "src/doc/unstable-book/src/catch-expr.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcatch-expr.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `catch_expr`\n+\n+The tracking issue for this feature is: [#31436]\n+\n+[#31436]: https://github.com/rust-lang/rust/issues/31436\n+\n+------------------------"}, {"sha": "21aa486219e0de17b2a699c35cc8d34f84b52160", "filename": "src/doc/unstable-book/src/char-escape-debug.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fchar-escape-debug.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `char_escape_debug`\n+\n+The tracking issue for this feature is: [#35068]\n+\n+[#35068]: https://github.com/rust-lang/rust/issues/35068\n+\n+------------------------"}, {"sha": "4e3b735e24fb6de326475324f7ad416b619328f9", "filename": "src/doc/unstable-book/src/closure-to-fn-coercion.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fclosure-to-fn-coercion.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `closure_to_fn_coercion`\n+\n+The tracking issue for this feature is: [#39817]\n+\n+[#39817]: https://github.com/rust-lang/rust/issues/39817\n+\n+------------------------"}, {"sha": "078d3faf42a7b19f032cd3e855ed7a55bf87357a", "filename": "src/doc/unstable-book/src/coerce-unsized.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcoerce-unsized.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `coerce_unsized`\n+\n+The tracking issue for this feature is: [#27732]\n+\n+[#27732]: https://github.com/rust-lang/rust/issues/27732\n+\n+------------------------"}, {"sha": "268ca6ea590d52557083f82ede375cc2e42a69c1", "filename": "src/doc/unstable-book/src/collection-placement.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollection-placement.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `collection_placement`\n+\n+The tracking issue for this feature is: [#30172]\n+\n+[#30172]: https://github.com/rust-lang/rust/issues/30172\n+\n+------------------------"}, {"sha": "ea4f999ba0f9ac6ca1dd640b8a8a6a47cf9339d0", "filename": "src/doc/unstable-book/src/collections-range.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections-range.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `collections_range`\n+\n+The tracking issue for this feature is: [#30877]\n+\n+[#30877]: https://github.com/rust-lang/rust/issues/30877\n+\n+------------------------"}, {"sha": "5c937833c9e26a4489893b4680a58285f3833a37", "filename": "src/doc/unstable-book/src/collections.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcollections.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `collections`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0ab89e278cdf7bfba028ceb0ebd3152e53059f2f", "filename": "src/doc/unstable-book/src/command-envs.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcommand-envs.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `command_envs`\n+\n+The tracking issue for this feature is: [#38526]\n+\n+[#38526]: https://github.com/rust-lang/rust/issues/38526\n+\n+------------------------"}, {"sha": "8986b968ca6c4368b5c384ff011744dcc0f9b2ae", "filename": "src/doc/unstable-book/src/compiler-builtins-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `compiler_builtins_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ac2fdd4fceb6dafc9239b52d65484c3d83ce2ce5", "filename": "src/doc/unstable-book/src/concat-idents-macro.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents-macro.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `concat_idents_macro`\n+\n+The tracking issue for this feature is: [#29599]\n+\n+[#29599]: https://github.com/rust-lang/rust/issues/29599\n+\n+------------------------"}, {"sha": "d37d6b5c6d0bafd9b3025e2940bd9bd996e6be92", "filename": "src/doc/unstable-book/src/core-char-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-char-ext.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `core_char_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "194b2608dd02bfb5c89fe45b456bfab629115a0b", "filename": "src/doc/unstable-book/src/core-float.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-float.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `core_float`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "28ad3525ef7a6af41f573733feb5462db15bde97", "filename": "src/doc/unstable-book/src/core-intrinsics.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-intrinsics.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `core_intrinsics`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c197588404c9329512da4902c7b1fdbe7c5d7b63", "filename": "src/doc/unstable-book/src/core-panic.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-panic.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `core_panic`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "f85811c545e43de4ccbbaa22c6342c829894ccb3", "filename": "src/doc/unstable-book/src/core-private-bignum.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-bignum.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_bignum`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "8465921d673b1d464d8e728151b894aa53d6de45", "filename": "src/doc/unstable-book/src/core-private-diy-float.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-private-diy-float.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_diy_float`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c50d44ac0ce3e1cd44b212f03b38715a798fa12d", "filename": "src/doc/unstable-book/src/core-slice-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-slice-ext.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `core_slice_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "08c68f11c6eca6e41b0c1d45ea94dadcabf82355", "filename": "src/doc/unstable-book/src/core-str-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcore-str-ext.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `core_str_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "311ab4adcfd75a3560f49d380ae47a6230fb1b94", "filename": "src/doc/unstable-book/src/dec2flt.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdec2flt.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `dec2flt`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b96854ebcd461a27b405c0c77631f5259fb05b6a", "filename": "src/doc/unstable-book/src/decode-utf8.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdecode-utf8.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `decode_utf8`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "cc603911cbd29c8b349b210f9aa48a90cb1d0e0e", "filename": "src/doc/unstable-book/src/derive-clone-copy.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-clone-copy.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `derive_clone_copy`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "68a275f5419d41a17f860c9370532024ef0fa300", "filename": "src/doc/unstable-book/src/derive-eq.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fderive-eq.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `derive_eq`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "2f99f5ecab39f6cb11609680d6b723a360197a3d", "filename": "src/doc/unstable-book/src/discriminant-value.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdiscriminant-value.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `discriminant_value`\n+\n+The tracking issue for this feature is: [#24263]\n+\n+[#24263]: https://github.com/rust-lang/rust/issues/24263\n+\n+------------------------"}, {"sha": "24c8d8fa7dbb914ae7243fb81af9b67bb544791e", "filename": "src/doc/unstable-book/src/enumset.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fenumset.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `enumset`\n+\n+The tracking issue for this feature is: [#37966]\n+\n+[#37966]: https://github.com/rust-lang/rust/issues/37966\n+\n+------------------------"}, {"sha": "be7a3ffd4dc43ff20f939ba59806cca9117be0d6", "filename": "src/doc/unstable-book/src/error-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ferror-type-id.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `error_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "200ec38725176b0235ceec6d67c85aecfe46ba90", "filename": "src/doc/unstable-book/src/exact-size-is-empty.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fexact-size-is-empty.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `exact_size_is_empty`\n+\n+The tracking issue for this feature is: [#35428]\n+\n+[#35428]: https://github.com/rust-lang/rust/issues/35428\n+\n+------------------------"}, {"sha": "e78d4330abfc04da7467c26f7131869146cfef58", "filename": "src/doc/unstable-book/src/fd-read.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd-read.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `fd_read`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0414244285ba72de76a9f562569edfd6f6d9c6ce", "filename": "src/doc/unstable-book/src/fd.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffd.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `fd`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf69238b82661f5fcb6488e31ef27977f5d2cb81/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf69238b82661f5fcb6488e31ef27977f5d2cb81/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=cf69238b82661f5fcb6488e31ef27977f5d2cb81", "patch": "@@ -1,10 +0,0 @@\n-# `field_init_shorthand`\n-\n-The tracking issue for this feature is: [#37340]\n-\n-[#37340]: https://github.com/rust-lang/rust/issues/37340\n-\n-------------------------\n-\n-\n-"}, {"sha": "9e24e6a0850d1acc27b73c7d1ac55caeb5da5102", "filename": "src/doc/unstable-book/src/fixed-size-array.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffixed-size-array.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `fixed_size_array`\n+\n+The tracking issue for this feature is: [#27778]\n+\n+[#27778]: https://github.com/rust-lang/rust/issues/27778\n+\n+------------------------"}, {"sha": "ff2d20a545fe5d1dfc4f5daadf332e113411ce81", "filename": "src/doc/unstable-book/src/float-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffloat-extras.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `float_extras`\n+\n+The tracking issue for this feature is: [#27752]\n+\n+[#27752]: https://github.com/rust-lang/rust/issues/27752\n+\n+------------------------"}, {"sha": "15e62a3a7dad0bd115a51c3a309da0311f2fb9be", "filename": "src/doc/unstable-book/src/flt2dec.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fflt2dec.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `flt2dec`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "755263bd9a61fbf60589745d5101abb90f1cb72c", "filename": "src/doc/unstable-book/src/fmt-flags-align.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-flags-align.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `fmt_flags_align`\n+\n+The tracking issue for this feature is: [#27726]\n+\n+[#27726]: https://github.com/rust-lang/rust/issues/27726\n+\n+------------------------"}, {"sha": "7cbe3c89a644164c448bfbb4f450f042aeafce61", "filename": "src/doc/unstable-book/src/fmt-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffmt-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `fmt_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "3942cda553889a0374d38aafada58cd688e81fe0", "filename": "src/doc/unstable-book/src/fn-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffn-traits.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `fn_traits`\n+\n+The tracking issue for this feature is: [#29625]\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+------------------------"}, {"sha": "a9b74d4f00470a16aaa18a5d149782ffec60df45", "filename": "src/doc/unstable-book/src/fnbox.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffnbox.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `fnbox`\n+\n+The tracking issue for this feature is: [#28796]\n+\n+[#28796]: https://github.com/rust-lang/rust/issues/28796\n+\n+------------------------"}, {"sha": "460555bf1b0dbee4a6b1e501d65c294726eef506", "filename": "src/doc/unstable-book/src/fused.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffused.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `fused`\n+\n+The tracking issue for this feature is: [#35602]\n+\n+[#35602]: https://github.com/rust-lang/rust/issues/35602\n+\n+------------------------"}, {"sha": "40c2ef2db0551ec64fbe1b671bb6c5cb62582e74", "filename": "src/doc/unstable-book/src/future-atomic-orderings.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffuture-atomic-orderings.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `future_atomic_orderings`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "afdb030c406dd194ace707858584d537be1ce232", "filename": "src/doc/unstable-book/src/get-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fget-type-id.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `get_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "01404e49dbda369559530ea824e2a14d6e21aed8", "filename": "src/doc/unstable-book/src/heap-api.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fheap-api.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `heap_api`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "a1a7ce8e63f443d3cdcc11fe57726c6874e3e466", "filename": "src/doc/unstable-book/src/i128.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `i128`\n+\n+The tracking issue for this feature is: [#35118]\n+\n+[#35118]: https://github.com/rust-lang/rust/issues/35118\n+\n+------------------------"}, {"sha": "2e88e2047868d2a9029ae11d4c8b73fd4c2636c3", "filename": "src/doc/unstable-book/src/inclusive-range.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `inclusive_range`\n+\n+The tracking issue for this feature is: [#28237]\n+\n+[#28237]: https://github.com/rust-lang/rust/issues/28237\n+\n+------------------------"}, {"sha": "402e4fa5ef6d73fcf3f4f2ef0a610add95f9d018", "filename": "src/doc/unstable-book/src/int-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fint-error-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `int_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "50db9fd4ca45c6976b58981296bc305e381a02bd", "filename": "src/doc/unstable-book/src/integer-atomics.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finteger-atomics.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `integer_atomics`\n+\n+The tracking issue for this feature is: [#32976]\n+\n+[#32976]: https://github.com/rust-lang/rust/issues/32976\n+\n+------------------------"}, {"sha": "0d94b4fc560571a2c18701369ef6797f1b606ec3", "filename": "src/doc/unstable-book/src/into-boxed-c-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-c-str.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_c_str`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "7636e20b14d88fc4f52875ea6257ef8775c044f8", "filename": "src/doc/unstable-book/src/into-boxed-os-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-os-str.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_os_str`\n+\n+The tracking issue for this feature is: [#into_boxed_os_str]\n+\n+[#into_boxed_os_str]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "754c6042f07f6a2360050876e29a39a7c1cd925a", "filename": "src/doc/unstable-book/src/into-boxed-path.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finto-boxed-path.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_path`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "5bee18d33d61bcf21538e1f4c21bf36bf76facce", "filename": "src/doc/unstable-book/src/io-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fio-error-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `io_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ed6cae24e32de7267f1d8693f9900eb7707fa708", "filename": "src/doc/unstable-book/src/io.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fio.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `io`\n+\n+The tracking issue for this feature is: [#27802]\n+\n+[#27802]: https://github.com/rust-lang/rust/issues/27802\n+\n+------------------------"}, {"sha": "7e7d52adbdb0fd76bafbdc14703e0b8dc6323b89", "filename": "src/doc/unstable-book/src/ip.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fip.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `ip`\n+\n+The tracking issue for this feature is: [#27709]\n+\n+[#27709]: https://github.com/rust-lang/rust/issues/27709\n+\n+------------------------"}, {"sha": "6070006758b7ac86a29f3c01de14a22ad9d1080f", "filename": "src/doc/unstable-book/src/is-unique.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fis-unique.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `is_unique`\n+\n+The tracking issue for this feature is: [#28356]\n+\n+[#28356]: https://github.com/rust-lang/rust/issues/28356\n+\n+------------------------"}, {"sha": "444714490345b3b0a2938a65ec66a85d3b5431cc", "filename": "src/doc/unstable-book/src/iter-rfind.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fiter-rfind.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `iter_rfind`\n+\n+The tracking issue for this feature is: [#39480]\n+\n+[#39480]: https://github.com/rust-lang/rust/issues/39480\n+\n+------------------------"}, {"sha": "8bcc2769db71e3a32c84e67a58f19b191f10a3ff", "filename": "src/doc/unstable-book/src/libstd-io-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-io-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_io_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "1b53faa8a0071170aebf00bbba17de7525a18ddf", "filename": "src/doc/unstable-book/src/libstd-sys-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-sys-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_sys_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b682d12e7cdd1e9b2cf76b0823652c931da1dae8", "filename": "src/doc/unstable-book/src/libstd-thread-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibstd-thread-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_thread_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "be3b96aea70d8933ec5d0b2275dcd17aab91f1a1", "filename": "src/doc/unstable-book/src/linked-list-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flinked-list-extras.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `linked_list_extras`\n+\n+The tracking issue for this feature is: [#27794]\n+\n+[#27794]: https://github.com/rust-lang/rust/issues/27794\n+\n+------------------------"}, {"sha": "b60e7a010945a423269242cdf77f463c469ed3ce", "filename": "src/doc/unstable-book/src/lookup-host.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flookup-host.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `lookup_host`\n+\n+The tracking issue for this feature is: [#27705]\n+\n+[#27705]: https://github.com/rust-lang/rust/issues/27705\n+\n+------------------------"}, {"sha": "2d15aa0e90de8e18b4b6dfafe7ab1ae759e3ddf8", "filename": "src/doc/unstable-book/src/map-entry-recover-keys.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmap-entry-recover-keys.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `map_entry_recover_keys`\n+\n+The tracking issue for this feature is: [#34285]\n+\n+[#34285]: https://github.com/rust-lang/rust/issues/34285"}, {"sha": "1405b6c5cb245f48883efa2fa20de5feeac70426", "filename": "src/doc/unstable-book/src/mpsc-select.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmpsc-select.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `mpsc_select`\n+\n+The tracking issue for this feature is: [#27800]\n+\n+[#27800]: https://github.com/rust-lang/rust/issues/27800"}, {"sha": "e556adaa13ea738db2fdb9b30069fa8ac06583ea", "filename": "src/doc/unstable-book/src/n16.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fn16.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `n16`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4063cd0db01d60c0d7ac647b726df7f9bac37f12", "filename": "src/doc/unstable-book/src/never-type-impls.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type-impls.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `never_type_impls`\n+\n+The tracking issue for this feature is: [#35121]\n+\n+[#35121]: https://github.com/rust-lang/rust/issues/35121\n+\n+------------------------"}, {"sha": "f200f8e2786fa40c262299f14136c3357d5f2c20", "filename": "src/doc/unstable-book/src/nonzero.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnonzero.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `nonzero`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "3c16cafae5014ff95d4116fdbf22dd801c7e2b89", "filename": "src/doc/unstable-book/src/once-poison.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fonce-poison.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `once_poison`\n+\n+The tracking issue for this feature is: [#33577]\n+\n+[#33577]: https://github.com/rust-lang/rust/issues/33577\n+\n+------------------------"}, {"sha": "908caeb75c60166333fa3bbc9ff824d75093c2cd", "filename": "src/doc/unstable-book/src/oom.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foom.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `oom`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "edb4efc09e5877de1103df4954c08397d5e788e0", "filename": "src/doc/unstable-book/src/option-entry.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foption-entry.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `option_entry`\n+\n+The tracking issue for this feature is: [#39288]\n+\n+[#39288]: https://github.com/rust-lang/rust/issues/39288\n+\n+------------------------"}, {"sha": "21dc7d095c808c5845267a54b39d15379453ada0", "filename": "src/doc/unstable-book/src/osstring-shrink-to-fit.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fosstring-shrink-to-fit.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `osstring_shrink_to_fit`\n+\n+The tracking issue for this feature is: [#40421]\n+\n+[#40421]: https://github.com/rust-lang/rust/issues/40421\n+\n+------------------------"}, {"sha": "07a957626905ed4da2bf52197fe50bad96050aa2", "filename": "src/doc/unstable-book/src/panic-abort.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-abort.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `panic_abort`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------"}, {"sha": "840e492597b54c0f93a5587edae2f786cce4dba7", "filename": "src/doc/unstable-book/src/panic-unwind.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-unwind.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `panic_unwind`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------"}, {"sha": "e76ee6beb675b450d28acc8fdf32a6b4c4c542b0", "filename": "src/doc/unstable-book/src/pattern.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpattern.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `pattern`\n+\n+The tracking issue for this feature is: [#27721]\n+\n+[#27721]: https://github.com/rust-lang/rust/issues/27721\n+\n+------------------------"}, {"sha": "c42b4e995ec58179ca5b25e7efeb9258acf24a13", "filename": "src/doc/unstable-book/src/peek.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpeek.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `peek`\n+\n+The tracking issue for this feature is: [#38980]\n+\n+[#38980]: https://github.com/rust-lang/rust/issues/38980\n+\n+------------------------"}, {"sha": "6ff010b7e3855f4d195e0a9ce78142d1007750b9", "filename": "src/doc/unstable-book/src/placement-in.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `placement_in`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "d53225f0a352eaeb84f5232c30496a4ba7c037fb", "filename": "src/doc/unstable-book/src/placement-new-protocol.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-new-protocol.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `placement_new_protocol`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "dc25cb237e3b55b8fa195b9147a496e64312c79e", "filename": "src/doc/unstable-book/src/print.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprint.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `print`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ea087c0a4f7b0182f0a8c5182eda7121584db97b", "filename": "src/doc/unstable-book/src/proc-macro-internals.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `proc_macro_internals`\n+\n+The tracking issue for this feature is: [#27812]\n+\n+[#27812]: https://github.com/rust-lang/rust/issues/27812\n+\n+------------------------"}, {"sha": "3593b6423495aa9fb5ee7c459bf72f20e5c2c5d6", "filename": "src/doc/unstable-book/src/process-try-wait.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprocess-try-wait.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `process_try_wait`\n+\n+The tracking issue for this feature is: [#38903]\n+\n+[#38903]: https://github.com/rust-lang/rust/issues/38903\n+\n+------------------------"}, {"sha": "6b1e88b8603014a9c5bceb76c3d0088ce46098fd", "filename": "src/doc/unstable-book/src/pub-restricted.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `pub_restricted`\n+\n+The tracking issue for this feature is: [#32409]\n+\n+[#38356]: https://github.com/rust-lang/rust/issues/32409\n+\n+------------------------"}, {"sha": "56154acc02bbfab46fb4766fac29ed44b1e7b0ce", "filename": "src/doc/unstable-book/src/question-mark-carrier.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fquestion-mark-carrier.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `question_mark_carrier`\n+\n+The tracking issue for this feature is: [#31436]\n+\n+[#31436]: https://github.com/rust-lang/rust/issues/31436\n+\n+------------------------"}, {"sha": "d0229d94c20bfab71f398fad760c5d2a1d2ceb40", "filename": "src/doc/unstable-book/src/rand.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frand.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `rand`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ac4581faf2ae410089dcaad17552522398ba0fa9", "filename": "src/doc/unstable-book/src/range-contains.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frange-contains.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `range_contains`\n+\n+The tracking issue for this feature is: [#32311]\n+\n+[#32311]: https://github.com/rust-lang/rust/issues/32311\n+\n+------------------------"}, {"sha": "d7caf22813dc727fd690f7eca4e18c8e7c5c014a", "filename": "src/doc/unstable-book/src/raw.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fraw.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `raw`\n+\n+The tracking issue for this feature is: [#27751]\n+\n+[#27751]: https://github.com/rust-lang/rust/issues/27751\n+\n+------------------------"}, {"sha": "462387dfdcc4024034cfaef26b369010969fc095", "filename": "src/doc/unstable-book/src/rc-would-unwrap.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frc-would-unwrap.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `rc_would_unwrap`\n+\n+The tracking issue for this feature is: [#28356]\n+\n+[#28356]: https://github.com/rust-lang/rust/issues/28356"}, {"sha": "c9ba5acf02003a92ea3ebd017f3c35d0c521a329", "filename": "src/doc/unstable-book/src/retain-hash-collection.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fretain-hash-collection.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `retain_hash_collection`\n+\n+The tracking issue for this feature is: [#36648]\n+\n+[#36648]: https://github.com/rust-lang/rust/issues/36648\n+\n+------------------------"}, {"sha": "007acc207a6553cbf33efd2c6e5afefb5753943f", "filename": "src/doc/unstable-book/src/rt.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frt.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `rt`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "2453475efe59970f6c993c6fcb193c3d373e15b4", "filename": "src/doc/unstable-book/src/rustc-private.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-private.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `rustc_private`\n+\n+The tracking issue for this feature is: [#27812]\n+\n+[#27812]: https://github.com/rust-lang/rust/issues/27812\n+\n+------------------------"}, {"sha": "c7491ab034bffd9e7aaf0d6689a9fa1bd1817e7f", "filename": "src/doc/unstable-book/src/rustdoc.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `rustdoc`\n+\n+The tracking issue for this feature is: [#27812]\n+\n+[#27812]: https://github.com/rust-lang/rust/issues/27812\n+\n+------------------------"}, {"sha": "82ae67fc05ac3ce680f6bad3c4e8871252229690", "filename": "src/doc/unstable-book/src/sanitizer-runtime-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime-lib.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `sanitizer_runtime_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "7dbdcdaa1a2ff21816e4c7b8a255667b20458057", "filename": "src/doc/unstable-book/src/set-stdio.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fset-stdio.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `set_stdio`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b79d1212c62f0d9a2829bcf598a46f5eb5f943b2", "filename": "src/doc/unstable-book/src/shared.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fshared.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `shared`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "8f69c3ab2def7c31da3cb399c08ceda9dbc9f99b", "filename": "src/doc/unstable-book/src/sip-hash-13.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsip-hash-13.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `sip_hash_13`\n+\n+The tracking issue for this feature is: [#34767]\n+\n+[#34767]: https://github.com/rust-lang/rust/issues/34767\n+\n+------------------------"}, {"sha": "9ba2de5adc7268eb9752e3a2afd14d4ffd2d9e5e", "filename": "src/doc/unstable-book/src/slice-concat-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-concat-ext.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `slice_concat_ext`\n+\n+The tracking issue for this feature is: [#27747]\n+\n+[#27747]: https://github.com/rust-lang/rust/issues/27747\n+\n+------------------------"}, {"sha": "57e2c148e7963acc23c096538bc48974d3b6bd80", "filename": "src/doc/unstable-book/src/slice-get-slice.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-get-slice.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `slice_get_slice`\n+\n+The tracking issue for this feature is: [#35729]\n+\n+[#35729]: https://github.com/rust-lang/rust/issues/35729\n+\n+------------------------"}, {"sha": "6f2385e53008a3a586ef099538607c43da99ea62", "filename": "src/doc/unstable-book/src/sort-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `sort_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "d419ea41c6ffb264b330ec100b6ab386078f6c3e", "filename": "src/doc/unstable-book/src/static-recursion.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf69238b82661f5fcb6488e31ef27977f5d2cb81/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf69238b82661f5fcb6488e31ef27977f5d2cb81/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md?ref=cf69238b82661f5fcb6488e31ef27977f5d2cb81", "patch": "@@ -1,10 +0,0 @@\n-# `static_recursion`\n-\n-The tracking issue for this feature is: [#29719]\n-\n-[#29719]: https://github.com/rust-lang/rust/issues/29719\n-\n-------------------------\n-\n-\n-"}, {"sha": "b649496cdd80b7ef47e9c0f036482c3cd37bc710", "filename": "src/doc/unstable-book/src/step-by.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-by.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `step_by`\n+\n+The tracking issue for this feature is: [#27741]\n+\n+[#27741]: https://github.com/rust-lang/rust/issues/27741\n+\n+------------------------"}, {"sha": "e53ca13f7b6f5a6f653a7c631a8df29c0582b3a4", "filename": "src/doc/unstable-book/src/step-trait.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstep-trait.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `step_trait`\n+\n+The tracking issue for this feature is: [#27741]\n+\n+[#27741]: https://github.com/rust-lang/rust/issues/27741\n+\n+------------------------"}, {"sha": "61e31c89443261dd66b6bad58cb720f2b4824b2b", "filename": "src/doc/unstable-book/src/str-escape.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-escape.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `str_escape`\n+\n+The tracking issue for this feature is: [#27791]\n+\n+[#27791]: https://github.com/rust-lang/rust/issues/27791\n+\n+------------------------"}, {"sha": "af8ef056dbe275612e6c7cf24fb08c237a0ca632", "filename": "src/doc/unstable-book/src/str-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `str_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "af3ea991025f7958f72b6e884f6426bb74fc84c3", "filename": "src/doc/unstable-book/src/thread-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-id.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `thread_id`\n+\n+The tracking issue for this feature is: [#21507]\n+\n+[#21507]: https://github.com/rust-lang/rust/issues/21507\n+\n+------------------------"}, {"sha": "e1cdcc339d2294a4f23fbc914e51e60ce38551d6", "filename": "src/doc/unstable-book/src/thread-local-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-internals.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `thread_local_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "113c1e910dca349cf2be8b5df6bfe376d36bc3a6", "filename": "src/doc/unstable-book/src/thread-local-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local-state.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `thread_local_state`\n+\n+The tracking issue for this feature is: [#27716]\n+\n+[#27716]: https://github.com/rust-lang/rust/issues/27716\n+\n+------------------------"}, {"sha": "80213cf1fdbb99c31017fc92a7c91e70cdb995f5", "filename": "src/doc/unstable-book/src/trusted-len.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrusted-len.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `trusted_len`\n+\n+The tracking issue for this feature is: [#37572]\n+\n+[#37572]: https://github.com/rust-lang/rust/issues/37572\n+\n+------------------------"}, {"sha": "d763caff5aacbdbaadba6daa563c809430024e1b", "filename": "src/doc/unstable-book/src/try-from.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftry-from.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `try_from`\n+\n+The tracking issue for this feature is: [#33417]\n+\n+[#33417]: https://github.com/rust-lang/rust/issues/33417\n+\n+------------------------"}, {"sha": "9fecec2ac36d33a4548802622d5be3c227f0c469", "filename": "src/doc/unstable-book/src/unicode.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funicode.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `unicode`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "99a3490d106bb6c2bce9fdace851b8b835c65666", "filename": "src/doc/unstable-book/src/unique.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funique.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `unique`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "92807e2858ffdcabd6c288790c90f0521547fd16", "filename": "src/doc/unstable-book/src/unsize.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funsize.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `unsize`\n+\n+The tracking issue for this feature is: [#27732]\n+\n+[#27732]: https://github.com/rust-lang/rust/issues/27732\n+\n+------------------------"}, {"sha": "d315647ba104949ec39925737afca1ae297bdbd1", "filename": "src/doc/unstable-book/src/update-panic-count.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fupdate-panic-count.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `update_panic_count`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "1c14a5a9fa08b214752a9bb5b4cf4fd7a32693bc", "filename": "src/doc/unstable-book/src/utf8-error-error-len.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Futf8-error-error-len.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `utf8_error_error_len`\n+\n+The tracking issue for this feature is: [#40494]\n+\n+[#40494]: https://github.com/rust-lang/rust/issues/40494\n+\n+------------------------"}, {"sha": "2b8c9f046eefd92fa4a86ceb0fae62a6af8f6498", "filename": "src/doc/unstable-book/src/vec-remove-item.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fvec-remove-item.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `vec_remove_item`\n+\n+The tracking issue for this feature is: [#40062]\n+\n+[#40062]: https://github.com/rust-lang/rust/issues/40062\n+\n+------------------------"}, {"sha": "3f833eb3d093ed08f215b3fc4607b200ab8e6ab2", "filename": "src/doc/unstable-book/src/windows-c.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-c.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `windows_c`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "f47a8425045b9f25d51673ea21fbc7d60254bebc", "filename": "src/doc/unstable-book/src/windows-handle.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-handle.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `windows_handle`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "174960d4f0048ae244317de41bad401b04eb9f10", "filename": "src/doc/unstable-book/src/windows-net.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-net.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `windows_net`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4d361442386a2422fdbfb2b17e5621254058bbfe", "filename": "src/doc/unstable-book/src/windows-stdio.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-stdio.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,5 @@\n+# `windows_stdio`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4d1cf38c3c2ea6205823e9c8c461f734afe51a2d", "filename": "src/doc/unstable-book/src/zero-one.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fzero-one.md?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,7 @@\n+# `zero_one`\n+\n+The tracking issue for this feature is: [#27739]\n+\n+[#27739]: https://github.com/rust-lang/rust/issues/27739\n+\n+------------------------"}, {"sha": "b27c801cf89d5d26f3d74ba331a3b0e497e5ddc5", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -187,7 +187,7 @@ impl From<char> for u32 {\n /// with the character encoding that IANA calls ISO-8859-1.\n /// This encoding is compatible with ASCII.\n ///\n-/// Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hypen),\n+/// Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hyphen),\n /// which leaves some \"blanks\", byte values that are not assigned to any character.\n /// ISO-8859-1 (the IANA one) assigns them to the C0 and C1 control codes.\n ///"}, {"sha": "dc2398b22acec67e6dbd98f1c94a9698a266c4ef", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -322,6 +322,41 @@ impl Ordering {\n     }\n }\n \n+/// A helper struct for reverse ordering.\n+///\n+/// This struct is a helper to be used with functions like `Vec::sort_by_key` and\n+/// can be used to reverse order a part of a key.\n+///\n+/// Example usage:\n+///\n+/// ```\n+/// #![feature(reverse_cmp_key)]\n+/// use std::cmp::Reverse;\n+///\n+/// let mut v = vec![1, 2, 3, 4, 5, 6];\n+/// v.sort_by_key(|&num| (num > 3, Reverse(num)));\n+/// assert_eq!(v, vec![3, 2, 1, 6, 5, 4]);\n+/// ```\n+#[derive(PartialEq, Eq, Debug)]\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+pub struct Reverse<T>(pub T);\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: PartialOrd> PartialOrd for Reverse<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n+        other.0.partial_cmp(&self.0)\n+    }\n+}\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: Ord> Ord for Reverse<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Reverse<T>) -> Ordering {\n+        other.0.cmp(&self.0)\n+    }\n+}\n+\n /// Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):"}, {"sha": "f9b740235f49e46534af00fd689dfbf1299af9a3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -907,6 +907,13 @@ impl<'a> LoweringContext<'a> {\n                 FunctionRetTy::Default(span) => hir::DefaultReturn(span),\n             },\n             variadic: decl.variadic,\n+            has_implicit_self: decl.inputs.get(0).map_or(false, |arg| {\n+                match arg.ty.node {\n+                    TyKind::ImplicitSelf => true,\n+                    TyKind::Rptr(_, ref mt) => mt.ty.node == TyKind::ImplicitSelf,\n+                    _ => false\n+                }\n+            })\n         })\n     }\n "}, {"sha": "27fa7487270885968948620ca571e64f7d849762", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -1383,6 +1383,9 @@ pub struct FnDecl {\n     pub inputs: HirVec<P<Ty>>,\n     pub output: FunctionRetTy,\n     pub variadic: bool,\n+    /// True if this function has an `self`, `&self` or `&mut self` receiver\n+    /// (but not a `self: Xxx` one).\n+    pub has_implicit_self: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "3b52e85e08e329c798316505a993f1ca9c267ba8", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 61, "deletions": 79, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -194,76 +194,75 @@ pub struct cmt_<'tcx> {\n \n pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n+pub enum ImmutabilityBlame<'tcx> {\n+    ImmLocal(ast::NodeId),\n+    ClosureEnv(ast::NodeId),\n+    LocalDeref(ast::NodeId),\n+    AdtFieldDeref(&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n+}\n+\n impl<'tcx> cmt_<'tcx> {\n-    pub fn get_def(&self) -> Option<ast::NodeId> {\n-        match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(nid) = cmt.cat {\n-                    Some(nid)\n-                } else {\n-                    None\n-                }\n+    fn resolve_field(&self, field_name: FieldName) -> (&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n+    {\n+        let adt_def = self.ty.ty_adt_def().unwrap_or_else(|| {\n+            bug!(\"interior cmt {:?} is not an ADT\", self)\n+        });\n+        let variant_def = match self.cat {\n+            Categorization::Downcast(_, variant_did) => {\n+                adt_def.variant_with_id(variant_did)\n             }\n-            _ => None\n-        }\n+            _ => {\n+                assert!(adt_def.is_univariant());\n+                &adt_def.variants[0]\n+            }\n+        };\n+        let field_def = match field_name {\n+            NamedField(name) => variant_def.field_named(name),\n+            PositionalField(idx) => &variant_def.fields[idx]\n+        };\n+        (adt_def, field_def)\n     }\n \n-    pub fn get_field(&self, name: ast::Name) -> Option<DefId> {\n+    pub fn immutability_blame(&self) -> Option<ImmutabilityBlame<'tcx>> {\n         match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(_) = cmt.cat {\n-                    if let ty::TyAdt(def, _) = self.ty.sty {\n-                        if def.is_struct() {\n-                            return def.struct_variant().find_field_named(name).map(|x| x.did);\n+            Categorization::Deref(ref base_cmt, _, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(ref base_cmt, _, Implicit(ty::ImmBorrow, _)) => {\n+                // try to figure out where the immutable reference came from\n+                match base_cmt.cat {\n+                    Categorization::Local(node_id) =>\n+                        Some(ImmutabilityBlame::LocalDeref(node_id)),\n+                    Categorization::Interior(ref base_cmt, InteriorField(field_name)) => {\n+                        let (adt_def, field_def) = base_cmt.resolve_field(field_name);\n+                        Some(ImmutabilityBlame::AdtFieldDeref(adt_def, field_def))\n+                    }\n+                    Categorization::Upvar(Upvar { id, .. }) => {\n+                        if let NoteClosureEnv(..) = self.note {\n+                            Some(ImmutabilityBlame::ClosureEnv(id.closure_expr_id))\n+                        } else {\n+                            None\n                         }\n                     }\n-                    None\n-                } else {\n-                    cmt.get_field(name)\n+                    _ => None\n                 }\n             }\n-            _ => None\n-        }\n-    }\n-\n-    pub fn get_field_name(&self) -> Option<ast::Name> {\n-        match self.cat {\n-            Categorization::Interior(_, ref ik) => {\n-                if let InteriorKind::InteriorField(FieldName::NamedField(name)) = *ik {\n-                    Some(name)\n-                } else {\n-                    None\n-                }\n+            Categorization::Local(node_id) => {\n+                Some(ImmutabilityBlame::ImmLocal(node_id))\n             }\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                cmt.get_field_name()\n+            Categorization::Rvalue(..) |\n+            Categorization::Upvar(..) |\n+            Categorization::Deref(.., UnsafePtr(..)) => {\n+                // This should not be reachable up to inference limitations.\n+                None\n             }\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn get_arg_if_immutable(&self, map: &hir_map::Map) -> Option<ast::NodeId> {\n-        match self.cat {\n-            Categorization::Deref(ref cmt, ..) |\n-            Categorization::Interior(ref cmt, _) |\n-            Categorization::Downcast(ref cmt, _) => {\n-                if let Categorization::Local(nid) = cmt.cat {\n-                    if let ty::TyAdt(_, _) = self.ty.sty {\n-                        if let ty::TyRef(_, ty::TypeAndMut{mutbl: MutImmutable, ..}) = cmt.ty.sty {\n-                            return Some(nid);\n-                        }\n-                    }\n-                    None\n-                } else {\n-                    cmt.get_arg_if_immutable(map)\n-                }\n+            Categorization::Interior(ref base_cmt, _) |\n+            Categorization::Downcast(ref base_cmt, _) |\n+            Categorization::Deref(ref base_cmt, _, _) => {\n+                base_cmt.immutability_blame()\n+            }\n+            Categorization::StaticItem => {\n+                // Do we want to do something here?\n+                None\n             }\n-            _ => None\n         }\n     }\n }\n@@ -1282,9 +1281,6 @@ pub enum Aliasability {\n #[derive(Copy, Clone, Debug)]\n pub enum AliasableReason {\n     AliasableBorrowed,\n-    AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n-    AliasableOther,\n-    UnaliasableImmutable, // Created as needed upon seeing ImmutableUnique\n     AliasableStatic,\n     AliasableStaticMut,\n }\n@@ -1324,23 +1320,13 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Deref(ref b, _, Implicit(ty::MutBorrow, _)) |\n             Categorization::Deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n             Categorization::Deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n+            Categorization::Deref(ref b, _, Unique) |\n             Categorization::Downcast(ref b, _) |\n             Categorization::Interior(ref b, _) => {\n                 // Aliasability depends on base cmt\n                 b.freely_aliasable()\n             }\n \n-            Categorization::Deref(ref b, _, Unique) => {\n-                let sub = b.freely_aliasable();\n-                if b.mutbl.is_mutable() {\n-                    // Aliasability depends on base cmt alone\n-                    sub\n-                } else {\n-                    // Do not allow mutation through an immutable box.\n-                    ImmutableUnique(Box::new(sub))\n-                }\n-            }\n-\n             Categorization::Rvalue(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n@@ -1356,13 +1342,9 @@ impl<'tcx> cmt_<'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(ref base, _, BorrowedPtr(ty::ImmBorrow, _)) |\n-            Categorization::Deref(ref base, _, Implicit(ty::ImmBorrow, _)) => {\n-                match base.cat {\n-                    Categorization::Upvar(Upvar{ id, .. }) =>\n-                        FreelyAliasable(AliasableClosure(id.closure_expr_id)),\n-                    _ => FreelyAliasable(AliasableBorrowed)\n-                }\n+            Categorization::Deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n+                FreelyAliasable(AliasableBorrowed)\n             }\n         }\n     }"}, {"sha": "cedb9e1cd1cfffc6c1b0df1b98cc60dcd6ec0982", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -188,14 +188,6 @@ fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             // user knows what they're doing in these cases.\n             Ok(())\n         }\n-        (mc::Aliasability::ImmutableUnique(_), ty::MutBorrow) => {\n-            bccx.report_aliasability_violation(\n-                        borrow_span,\n-                        loan_cause,\n-                        mc::AliasableReason::UnaliasableImmutable,\n-                        cmt);\n-            Err(())\n-        }\n         (mc::Aliasability::FreelyAliasable(alias_cause), ty::UniqueImmBorrow) |\n         (mc::Aliasability::FreelyAliasable(alias_cause), ty::MutBorrow) => {\n             bccx.report_aliasability_violation(\n@@ -510,4 +502,3 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         self.move_error_collector.report_potential_errors(self.bccx);\n     }\n }\n-"}, {"sha": "0915c57b588eb1a7c2c33b091682fd4fce4790e7", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 137, "deletions": 111, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -34,6 +34,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n+use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n@@ -659,12 +660,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_err_with_code(s, msg, code);\n     }\n \n-    pub fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n+    fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n-        let mut immutable_field = None;\n-        let mut local_def = None;\n \n-        let msg = &match err.code {\n+        let msg = match err.code {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n@@ -700,27 +699,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     BorrowViolation(euv::AutoUnsafe) |\n                     BorrowViolation(euv::ForLoop) |\n                     BorrowViolation(euv::MatchDiscriminant) => {\n-                        // Check for this field's definition to see if it is an immutable reference\n-                        // and suggest making it mutable if that is the case.\n-                        immutable_field = err.cmt.get_field_name()\n-                            .and_then(|name| err.cmt.get_field(name))\n-                            .and_then(|did| self.tcx.hir.as_local_node_id(did))\n-                            .and_then(|nid| {\n-                                if let hir_map::Node::NodeField(ref field) = self.tcx.hir.get(nid) {\n-                                    return self.suggest_mut_for_immutable(&field.ty)\n-                                        .map(|msg| (self.tcx.hir.span(nid), msg));\n-                                }\n-                                None\n-                            });\n-                        local_def = err.cmt.get_def()\n-                            .and_then(|nid| {\n-                                if !self.tcx.hir.is_argument(nid) {\n-                                    Some(self.tcx.hir.span(nid))\n-                                } else {\n-                                    None\n-                                }\n-                            });\n-\n                         format!(\"cannot borrow {} as mutable\", descr)\n                     }\n                     BorrowViolation(euv::ClosureInvocation) => {\n@@ -746,16 +724,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let mut db = self.struct_span_err(span, msg);\n-        if let Some((span, msg)) = immutable_field {\n-            db.span_label(span, &msg);\n-        }\n-        if let Some(let_span) = local_def {\n-            if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n-                db.span_label(let_span, &format!(\"consider changing this to `mut {}`\", snippet));\n-            }\n-        }\n-        db\n+        self.struct_span_err(span, &msg)\n     }\n \n     pub fn report_aliasability_violation(&self,\n@@ -788,55 +757,49 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let mut err = match cause {\n-            mc::AliasableOther => {\n-                struct_span_err!(\n-                    self.tcx.sess, span, E0385,\n-                    \"{} in an aliasable location\", prefix)\n-            }\n-            mc::AliasableReason::UnaliasableImmutable => {\n-                struct_span_err!(\n-                    self.tcx.sess, span, E0386,\n-                    \"{} in an immutable container\", prefix)\n+        match cause {\n+            mc::AliasableStatic |\n+            mc::AliasableStaticMut => {\n+                // This path cannot occur. It happens when we have an\n+                // `&mut` or assignment to a static. But in the case\n+                // of `static X`, we get a mutability violation first,\n+                // and never get here. In the case of `static mut X`,\n+                // that is unsafe and hence the aliasability error is\n+                // ignored.\n+                span_bug!(span, \"aliasability violation for static `{}`\", prefix)\n             }\n-            mc::AliasableClosure(id) => {\n+            mc::AliasableBorrowed => {}\n+        };\n+        let blame = cmt.immutability_blame();\n+        let mut err = match blame {\n+            Some(ImmutabilityBlame::ClosureEnv(id)) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess, span, E0387,\n                     \"{} in a captured outer variable in an `Fn` closure\", prefix);\n-                if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n+\n+                // FIXME: the distinction between these 2 messages looks wrong.\n+                let help = if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n                     // The aliasability violation with closure captures can\n                     // happen for nested closures, so we know the enclosing\n                     // closure incorrectly accepts an `Fn` while it needs to\n                     // be `FnMut`.\n-                    span_help!(&mut err, self.tcx.hir.span(id),\n-                           \"consider changing this to accept closures that implement `FnMut`\");\n+                    \"consider changing this to accept closures that implement `FnMut`\"\n+\n                 } else {\n-                    span_help!(&mut err, self.tcx.hir.span(id),\n-                           \"consider changing this closure to take self by mutable reference\");\n-                }\n+                    \"consider changing this closure to take self by mutable reference\"\n+                };\n+                err.span_help(self.tcx.hir.span(id), help);\n                 err\n             }\n-            mc::AliasableStatic |\n-            mc::AliasableStaticMut => {\n-                // This path cannot occur. It happens when we have an\n-                // `&mut` or assignment to a static. But in the case\n-                // of `static X`, we get a mutability violation first,\n-                // and never get here. In the case of `static mut X`,\n-                // that is unsafe and hence the aliasability error is\n-                // ignored.\n-                span_bug!(span, \"aliasability violation for static `{}`\", prefix)\n-            }\n-            mc::AliasableBorrowed => {\n-                let mut e = struct_span_err!(\n+            _ =>  {\n+                let mut err = struct_span_err!(\n                     self.tcx.sess, span, E0389,\n                     \"{} in a `&` reference\", prefix);\n-                e.span_label(span, &\"assignment into an immutable reference\");\n-                if let Some(nid) = cmt.get_arg_if_immutable(&self.tcx.hir) {\n-                    self.immutable_argument_should_be_mut(nid, &mut e);\n-                }\n-                e\n+                err.span_label(span, &\"assignment into an immutable reference\");\n+                err\n             }\n         };\n+        self.note_immutability_blame(&mut err, blame);\n \n         if is_closure {\n             err.help(\"closures behind references must be called via `&mut`\");\n@@ -845,49 +808,124 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n-    fn suggest_mut_for_immutable(&self, pty: &hir::Ty) -> Option<String> {\n+    fn suggest_mut_for_immutable(&self, pty: &hir::Ty, is_implicit_self: bool) -> Option<String> {\n         // Check wether the argument is an immutable reference\n+        debug!(\"suggest_mut_for_immutable({:?}, {:?})\", pty, is_implicit_self);\n         if let hir::TyRptr(lifetime, hir::MutTy {\n             mutbl: hir::Mutability::MutImmutable,\n             ref ty\n         }) = pty.node {\n             // Account for existing lifetimes when generating the message\n-            if !lifetime.is_elided() {\n-                if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(ty.span) {\n-                    if let Ok(lifetime_snippet) = self.tcx.sess.codemap()\n-                        .span_to_snippet(lifetime.span) {\n-                            return Some(format!(\"use `&{} mut {}` here to make mutable\",\n-                                                lifetime_snippet,\n-                                                snippet));\n-                    }\n-                }\n-            } else if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(pty.span) {\n-                if snippet.starts_with(\"&\") {\n-                    return Some(format!(\"use `{}` here to make mutable\",\n-                                        snippet.replace(\"&\", \"&mut \")));\n-                }\n+            let pointee_snippet = match self.tcx.sess.codemap().span_to_snippet(ty.span) {\n+                Ok(snippet) => snippet,\n+                _ => return None\n+            };\n+\n+            let lifetime_snippet = if !lifetime.is_elided() {\n+                format!(\"{} \", match self.tcx.sess.codemap().span_to_snippet(lifetime.span) {\n+                    Ok(lifetime_snippet) => lifetime_snippet,\n+                    _ => return None\n+                })\n             } else {\n-                bug!(\"couldn't find a snippet for span: {:?}\", pty.span);\n-            }\n+                String::new()\n+            };\n+            Some(format!(\"use `&{}mut {}` here to make mutable\",\n+                         lifetime_snippet,\n+                         if is_implicit_self { \"self\" } else { &*pointee_snippet }))\n+        } else {\n+            None\n         }\n-        None\n     }\n \n-    fn immutable_argument_should_be_mut(&self, nid: ast::NodeId, db: &mut DiagnosticBuilder) {\n-        let parent = self.tcx.hir.get_parent_node(nid);\n+    fn local_binding_mode(&self, node_id: ast::NodeId) -> hir::BindingMode {\n+        let pat = match self.tcx.hir.get(node_id) {\n+            hir_map::Node::NodeLocal(pat) => pat,\n+            node => bug!(\"bad node for local: {:?}\", node)\n+        };\n+\n+        match pat.node {\n+            hir::PatKind::Binding(mode, ..) => mode,\n+            _ => bug!(\"local is not a binding: {:?}\", pat)\n+        }\n+    }\n+\n+    fn local_ty(&self, node_id: ast::NodeId) -> (Option<&hir::Ty>, bool) {\n+        let parent = self.tcx.hir.get_parent_node(node_id);\n         let parent_node = self.tcx.hir.get(parent);\n \n         // The parent node is like a fn\n         if let Some(fn_like) = FnLikeNode::from_node(parent_node) {\n             // `nid`'s parent's `Body`\n             let fn_body = self.tcx.hir.body(fn_like.body());\n-            // Get the position of `nid` in the arguments list\n-            let arg_pos = fn_body.arguments.iter().position(|arg| arg.pat.id == nid);\n+            // Get the position of `node_id` in the arguments list\n+            let arg_pos = fn_body.arguments.iter().position(|arg| arg.pat.id == node_id);\n             if let Some(i) = arg_pos {\n                 // The argument's `Ty`\n-                let arg_ty = &fn_like.decl().inputs[i];\n-                if let Some(msg) = self.suggest_mut_for_immutable(&arg_ty) {\n-                    db.span_label(arg_ty.span, &msg);\n+                (Some(&fn_like.decl().inputs[i]),\n+                 i == 0 && fn_like.decl().has_implicit_self)\n+            } else {\n+                (None, false)\n+            }\n+        } else {\n+            (None, false)\n+        }\n+    }\n+\n+    fn note_immutability_blame(&self,\n+                               db: &mut DiagnosticBuilder,\n+                               blame: Option<ImmutabilityBlame>) {\n+        match blame {\n+            None => {}\n+            Some(ImmutabilityBlame::ClosureEnv(_)) => {}\n+            Some(ImmutabilityBlame::ImmLocal(node_id)) => {\n+                let let_span = self.tcx.hir.span(node_id);\n+                if let hir::BindingMode::BindByValue(..) = self.local_binding_mode(node_id) {\n+                    if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n+                        let (_, is_implicit_self) = self.local_ty(node_id);\n+                        if is_implicit_self && snippet != \"self\" {\n+                            // avoid suggesting `mut &self`.\n+                            return\n+                        }\n+                        db.span_label(\n+                            let_span,\n+                            &format!(\"consider changing this to `mut {}`\", snippet)\n+                        );\n+                    }\n+                }\n+            }\n+            Some(ImmutabilityBlame::LocalDeref(node_id)) => {\n+                let let_span = self.tcx.hir.span(node_id);\n+                match self.local_binding_mode(node_id) {\n+                    hir::BindingMode::BindByRef(..) => {\n+                        let snippet = self.tcx.sess.codemap().span_to_snippet(let_span);\n+                        if let Ok(snippet) = snippet {\n+                            db.span_label(\n+                                let_span,\n+                                &format!(\"consider changing this to `{}`\",\n+                                         snippet.replace(\"ref \", \"ref mut \"))\n+                            );\n+                        }\n+                    }\n+                    hir::BindingMode::BindByValue(..) => {\n+                        if let (Some(local_ty), is_implicit_self) = self.local_ty(node_id) {\n+                            if let Some(msg) =\n+                                 self.suggest_mut_for_immutable(local_ty, is_implicit_self) {\n+                                db.span_label(local_ty.span, &msg);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            Some(ImmutabilityBlame::AdtFieldDeref(_, field)) => {\n+                let node_id = match self.tcx.hir.as_local_node_id(field.did) {\n+                    Some(node_id) => node_id,\n+                    None => return\n+                };\n+\n+                if let hir_map::Node::NodeField(ref field) = self.tcx.hir.get(node_id) {\n+                    if let Some(msg) = self.suggest_mut_for_immutable(&field.ty, false) {\n+                        db.span_label(field.ty.span, &msg);\n+                    }\n                 }\n             }\n         }\n@@ -941,10 +979,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) {\n+    fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) {\n         let error_span = err.span.clone();\n         match err.code {\n-            err_mutbl => self.note_and_explain_mutbl_error(db, &err, &error_span),\n+            err_mutbl => {\n+                self.note_and_explain_mutbl_error(db, &err, &error_span);\n+                self.note_immutability_blame(db, err.cmt.immutability_blame());\n+            }\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let (value_kind, value_msg) = match err.cmt.cat {\n                     mc::Categorization::Rvalue(..) =>\n@@ -1096,28 +1137,13 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n             _ => {\n                 if let Categorization::Deref(..) = err.cmt.cat {\n                     db.span_label(*error_span, &\"cannot borrow as mutable\");\n-                    if let Some(local_id) = err.cmt.get_arg_if_immutable(&self.tcx.hir) {\n-                        self.immutable_argument_should_be_mut(local_id, db);\n-                    } else if let Categorization::Deref(ref inner_cmt, ..) = err.cmt.cat {\n-                        if let Categorization::Local(local_id) = inner_cmt.cat {\n-                            self.immutable_argument_should_be_mut(local_id, db);\n-                        }\n-                    }\n                 } else if let Categorization::Local(local_id) = err.cmt.cat {\n                     let span = self.tcx.hir.span(local_id);\n                     if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n                         if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n                             db.span_label(*error_span, &format!(\"cannot reborrow mutably\"));\n                             db.span_label(*error_span, &format!(\"try removing `&mut` here\"));\n                         } else {\n-                            if snippet.starts_with(\"ref \") {\n-                                db.span_label(span, &format!(\"use `{}` here to make mutable\",\n-                                                             snippet.replace(\"ref \", \"ref mut \")));\n-                            } else if snippet != \"self\" {\n-                                db.span_label(span,\n-                                              &format!(\"use `mut {}` here to make mutable\",\n-                                                       snippet));\n-                            }\n                             db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n                         }\n                     } else {"}, {"sha": "bfd342a9f213465a9e52b7630bce4e85672cd8e0", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -198,7 +198,7 @@ fn main() {\n ```\n \"##,\n \n-E0386: r##\"\n+/*E0386: r##\"\n This error occurs when an attempt is made to mutate the target of a mutable\n reference stored inside an immutable container.\n \n@@ -228,7 +228,7 @@ let x: i64 = 1;\n let y: Box<Cell<_>> = Box::new(Cell::new(x));\n y.set(2);\n ```\n-\"##,\n+\"##,*/\n \n E0387: r##\"\n This error occurs when an attempt is made to mutate or mutably reference data\n@@ -1117,6 +1117,6 @@ fn main() {\n }\n \n register_diagnostics! {\n-    E0385, // {} in an aliasable location\n+//    E0385, // {} in an aliasable location\n     E0524, // two closures require unique access to `..` at the same time\n }"}, {"sha": "d9edf5d1254896c492fb5f9cc2009a77d528e76f", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -72,9 +72,11 @@ use thread::{self, Thread};\n \n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n-/// functionality. This type can only be constructed with the `ONCE_INIT`\n+/// functionality. This type can only be constructed with the [`ONCE_INIT`]\n /// value.\n ///\n+/// [`ONCE_INIT`]: constant.ONCE_INIT.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -101,15 +103,28 @@ unsafe impl Sync for Once {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for Once {}\n \n-/// State yielded to the `call_once_force` method which can be used to query\n-/// whether the `Once` was previously poisoned or not.\n+/// State yielded to the [`call_once_force`] method which can be used to query\n+/// whether the [`Once`] was previously poisoned or not.\n+///\n+/// [`call_once_force`]: struct.Once.html#method.call_once_force\n+/// [`Once`]: struct.Once.html\n #[unstable(feature = \"once_poison\", issue = \"33577\")]\n #[derive(Debug)]\n pub struct OnceState {\n     poisoned: bool,\n }\n \n-/// Initialization value for static `Once` values.\n+/// Initialization value for static [`Once`] values.\n+///\n+/// [`Once`]: struct.Once.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::{Once, ONCE_INIT};\n+///\n+/// static START: Once = ONCE_INIT;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ONCE_INIT: Once = Once::new();\n \n@@ -212,15 +227,19 @@ impl Once {\n         self.call_inner(false, &mut |_| f.take().unwrap()());\n     }\n \n-    /// Performs the same function as `call_once` except ignores poisoning.\n+    /// Performs the same function as [`call_once`] except ignores poisoning.\n+    ///\n+    /// [`call_once`]: struct.Once.html#method.call_once\n     ///\n     /// If this `Once` has been poisoned (some initialization panicked) then\n     /// this function will continue to attempt to call initialization functions\n     /// until one of them doesn't panic.\n     ///\n-    /// The closure `f` is yielded a structure which can be used to query the\n+    /// The closure `f` is yielded a [`OnceState`] structure which can be used to query the\n     /// state of this `Once` (whether initialization has previously panicked or\n     /// not).\n+    ///\n+    /// [`OnceState`]: struct.OnceState.html\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n@@ -366,10 +385,12 @@ impl Drop for Finish {\n }\n \n impl OnceState {\n-    /// Returns whether the associated `Once` has been poisoned.\n+    /// Returns whether the associated [`Once`] has been poisoned.\n     ///\n-    /// Once an initalization routine for a `Once` has panicked it will forever\n+    /// Once an initalization routine for a [`Once`] has panicked it will forever\n     /// indicate to future forced initialization routines that it is poisoned.\n+    ///\n+    /// [`Once`]: struct.Once.html\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn poisoned(&self) -> bool {\n         self.poisoned"}, {"sha": "736aa465aa7327a2db646b2f502c98c2db1d8983", "filename": "src/test/compile-fail/augmented-assignments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     x;  //~ value moved here\n \n     let y = Int(2);\n-    //~^use `mut y` here to make mutable\n+    //~^ consider changing this to `mut y`\n     y   //~ error: cannot borrow immutable local variable `y` as mutable\n         //~| cannot borrow\n     +="}, {"sha": "8b7ccedd6974fe1be00649de25d8220e7ba7c581", "filename": "src/test/compile-fail/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -23,7 +23,7 @@ fn indirect_write_to_imm_box() {\n     let mut x: isize = 1;\n     let y: Box<_> = box &mut x;\n     let p = &y;\n-    ***p = 2; //~ ERROR cannot assign to data in an immutable container\n+    ***p = 2; //~ ERROR cannot assign to data in a `&` reference\n     drop(p);\n }\n \n@@ -43,7 +43,6 @@ fn borrow_in_var_from_var_via_imm_box() {\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n-    //~^         ERROR cannot assign to data in an immutable container\n     drop(p);\n     drop(q);\n }\n@@ -64,7 +63,6 @@ fn borrow_in_var_from_field_via_imm_box() {\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n-    //~^         ERROR cannot assign to data in an immutable container\n     drop(p);\n     drop(q);\n }\n@@ -85,7 +83,6 @@ fn borrow_in_field_from_var_via_imm_box() {\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n-    //~^           ERROR cannot assign to data in an immutable container\n     drop(p);\n     drop(q);\n }\n@@ -106,7 +103,6 @@ fn borrow_in_field_from_field_via_imm_box() {\n     let p = &y.a;\n     let q = &***p;\n     **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n-    //~^           ERROR cannot assign to data in an immutable container\n     drop(p);\n     drop(q);\n }"}, {"sha": "499e7e54947b70ed50962dd104ba66b71d6458a6", "filename": "src/test/compile-fail/issue-33819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     match op {\n         Some(ref v) => { let a = &mut v; },\n         //~^ ERROR:cannot borrow immutable\n-        //~| use `ref mut v` here to make mutable\n+        //~| cannot borrow mutably\n         None => {},\n     }\n }"}, {"sha": "0015c8e5c00a1212731754a71b73af892d25d0e2", "filename": "src/test/compile-fail/mut-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -17,15 +17,15 @@ impl S {\n }\n \n fn func(arg: S) {\n-    //~^ here to make mutable\n+    //~^ consider changing this to `mut arg`\n     arg.mutate();\n     //~^ ERROR cannot borrow immutable argument\n     //~| cannot borrow mutably\n }\n \n fn main() {\n     let local = S;\n-    //~^ here to make mutable\n+    //~^ consider changing this to `mut local`\n     local.mutate();\n     //~^ ERROR cannot borrow immutable local variable\n     //~| cannot borrow mutably"}, {"sha": "7bb69caa1024af4c060687c83e5bc9ba41a59a5e", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -2,7 +2,7 @@ error: cannot borrow immutable local variable `x` as mutable\n    --> $DIR/huge_multispan_highlight.rs:100:18\n     |\n 12  |     let x = \"foo\";\n-    |         - use `mut x` here to make mutable\n+    |         - consider changing this to `mut x`\n ...\n 100 |     let y = &mut x;\n     |                  ^ cannot borrow mutably"}, {"sha": "60fa06d314ff7bcf7da74a8c2f8a7fa53f1750d7", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -10,6 +10,8 @@ error: cannot borrow immutable argument `self` as mutable\n error: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:23:15\n    |\n+22 |     fn bar(self: &mut Self) {\n+   |            ---- consider changing this to `mut self`\n 23 |         (&mut self).bar();\n    |               ^^^^ cannot borrow mutably\n "}, {"sha": "9ec8728fd32c17ff6c5e826ebbb3354f48b9f50b", "filename": "src/test/ui/did_you_mean/issue-35937.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    pub v: Vec<String>\n+}\n+\n+fn main() {\n+    let f = Foo { v: Vec::new() };\n+    f.v.push(\"cat\".to_string());\n+}\n+\n+\n+struct S {\n+    x: i32,\n+}\n+fn foo() {\n+    let s = S { x: 42 };\n+    s.x += 1;\n+}\n+\n+fn bar(s: S) {\n+    s.x += 1;\n+}"}, {"sha": "bea3d1291433db20d39470c6b61ecb951edad56d", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,26 @@\n+error: cannot borrow immutable field `f.v` as mutable\n+  --> $DIR/issue-35937.rs:17:5\n+   |\n+16 |     let f = Foo { v: Vec::new() };\n+   |         - consider changing this to `mut f`\n+17 |     f.v.push(\"cat\".to_string());\n+   |     ^^^ cannot mutably borrow immutable field\n+\n+error: cannot assign to immutable field `s.x`\n+  --> $DIR/issue-35937.rs:26:5\n+   |\n+25 |     let s = S { x: 42 };\n+   |         - consider changing this to `mut s`\n+26 |     s.x += 1;\n+   |     ^^^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot assign to immutable field `s.x`\n+  --> $DIR/issue-35937.rs:30:5\n+   |\n+29 | fn bar(s: S) {\n+   |        - consider changing this to `mut s`\n+30 |     s.x += 1;\n+   |     ^^^^^^^^ cannot mutably borrow immutable field\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "855feaf7d2d5e6931e58b0081234dfb866e4a70a", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -2,7 +2,7 @@ error: cannot borrow immutable borrowed content `*self.s` as mutable\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n 12 |     s: &'a String\n-   |     ------------- use `&'a mut String` here to make mutable\n+   |        ---------- use `&'a mut String` here to make mutable\n ...\n 17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable"}, {"sha": "d970d078df8d96c395d088d5a32b442df964ee88", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -2,10 +2,8 @@ error: cannot borrow immutable borrowed content `*self.s` as mutable\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n 12 |     s: &'a String\n-   |     ------------- use `&'a mut String` here to make mutable\n+   |        ---------- use `&'a mut String` here to make mutable\n ...\n-16 |     fn f(&self) {\n-   |          ----- use `&mut self` here to make mutable\n 17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n "}, {"sha": "6331fc5771fcbb218694944e4034efe72e3cdad3", "filename": "src/test/ui/did_you_mean/issue-39544.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -8,15 +8,46 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum X {\n+pub enum X {\n     Y\n }\n \n-struct Z {\n+pub struct Z {\n     x: X\n }\n \n fn main() {\n     let z = Z { x: X::Y };\n     let _ = &mut z.x;\n }\n+\n+impl Z {\n+    fn foo<'z>(&'z self) {\n+        let _ = &mut self.x;\n+    }\n+\n+    fn foo1(&self, other: &Z) {\n+        let _ = &mut self.x;\n+        let _ = &mut other.x;\n+    }\n+\n+    fn foo2<'a>(&'a self, other: &Z) {\n+        let _ = &mut self.x;\n+        let _ = &mut other.x;\n+    }\n+\n+    fn foo3<'a>(self: &'a Self, other: &Z) {\n+        let _ = &mut self.x;\n+        let _ = &mut other.x;\n+    }\n+\n+    fn foo4(other: &Z) {\n+        let _ = &mut other.x;\n+    }\n+\n+}\n+\n+pub fn with_arg(z: Z, w: &Z) {\n+    let _ = &mut z.x;\n+    let _ = &mut w.x;\n+}"}, {"sha": "e1e229a8b05725acb48415d4dc01a566cc60fab4", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -6,5 +6,89 @@ error: cannot borrow immutable field `z.x` as mutable\n 21 |     let _ = &mut z.x;\n    |                  ^^^ cannot mutably borrow immutable field\n \n-error: aborting due to previous error\n+error: cannot borrow immutable field `self.x` as mutable\n+  --> $DIR/issue-39544.rs:26:22\n+   |\n+25 |     fn foo<'z>(&'z self) {\n+   |                -------- use `&'z mut self` here to make mutable\n+26 |         let _ = &mut self.x;\n+   |                      ^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `self.x` as mutable\n+  --> $DIR/issue-39544.rs:30:22\n+   |\n+29 |     fn foo1(&self, other: &Z) {\n+   |             ----- use `&mut self` here to make mutable\n+30 |         let _ = &mut self.x;\n+   |                      ^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `other.x` as mutable\n+  --> $DIR/issue-39544.rs:31:22\n+   |\n+29 |     fn foo1(&self, other: &Z) {\n+   |                           -- use `&mut Z` here to make mutable\n+30 |         let _ = &mut self.x;\n+31 |         let _ = &mut other.x;\n+   |                      ^^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `self.x` as mutable\n+  --> $DIR/issue-39544.rs:35:22\n+   |\n+34 |     fn foo2<'a>(&'a self, other: &Z) {\n+   |                 -------- use `&'a mut self` here to make mutable\n+35 |         let _ = &mut self.x;\n+   |                      ^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `other.x` as mutable\n+  --> $DIR/issue-39544.rs:36:22\n+   |\n+34 |     fn foo2<'a>(&'a self, other: &Z) {\n+   |                                  -- use `&mut Z` here to make mutable\n+35 |         let _ = &mut self.x;\n+36 |         let _ = &mut other.x;\n+   |                      ^^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `self.x` as mutable\n+  --> $DIR/issue-39544.rs:40:22\n+   |\n+39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+   |                       -------- use `&'a mut Self` here to make mutable\n+40 |         let _ = &mut self.x;\n+   |                      ^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `other.x` as mutable\n+  --> $DIR/issue-39544.rs:41:22\n+   |\n+39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+   |                                        -- use `&mut Z` here to make mutable\n+40 |         let _ = &mut self.x;\n+41 |         let _ = &mut other.x;\n+   |                      ^^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `other.x` as mutable\n+  --> $DIR/issue-39544.rs:45:22\n+   |\n+44 |     fn foo4(other: &Z) {\n+   |                    -- use `&mut Z` here to make mutable\n+45 |         let _ = &mut other.x;\n+   |                      ^^^^^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `z.x` as mutable\n+  --> $DIR/issue-39544.rs:51:18\n+   |\n+50 | pub fn with_arg(z: Z, w: &Z) {\n+   |                 - consider changing this to `mut z`\n+51 |     let _ = &mut z.x;\n+   |                  ^^^ cannot mutably borrow immutable field\n+\n+error: cannot borrow immutable field `w.x` as mutable\n+  --> $DIR/issue-39544.rs:52:18\n+   |\n+50 | pub fn with_arg(z: Z, w: &Z) {\n+   |                          -- use `&mut Z` here to make mutable\n+51 |     let _ = &mut z.x;\n+52 |     let _ = &mut w.x;\n+   |                  ^^^ cannot mutably borrow immutable field\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "f4ae3257279823d57d71a391832d48188ec0e4cd", "filename": "src/test/ui/did_you_mean/issue-40823.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut buf = &[1, 2, 3, 4];\n+    buf.iter_mut();\n+}"}, {"sha": "8e77ebd9b6da3c1920166533f804014793c63703", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -0,0 +1,8 @@\n+error: cannot borrow immutable borrowed content `*buf` as mutable\n+  --> $DIR/issue-40823.rs:13:5\n+   |\n+13 |     buf.iter_mut();\n+   |     ^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+"}, {"sha": "edf1635a6b84fe7f1b0f187bf865cc4fccc9e787", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -2,7 +2,7 @@ error: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n    |\n 62 | fn deref_mut_field1(x: Own<Point>) {\n-   |                     - use `mut x` here to make mutable\n+   |                     - consider changing this to `mut x`\n 63 |     let __isize = &mut x.y; //~ ERROR cannot borrow\n    |                        ^ cannot borrow mutably\n \n@@ -28,7 +28,7 @@ error: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n 97 | fn assign_field1<'a>(x: Own<Point>) {\n-   |                      - use `mut x` here to make mutable\n+   |                      - consider changing this to `mut x`\n 98 |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ cannot borrow mutably\n \n@@ -54,7 +54,7 @@ error: cannot borrow immutable argument `x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n     |\n 118 | fn deref_mut_method1(x: Own<Point>) {\n-    |                      - use `mut x` here to make mutable\n+    |                      - consider changing this to `mut x`\n 119 |     x.set(0, 0); //~ ERROR cannot borrow\n     |     ^ cannot borrow mutably\n \n@@ -70,7 +70,7 @@ error: cannot borrow immutable argument `x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n     |\n 138 | fn assign_method1<'a>(x: Own<Point>) {\n-    |                       - use `mut x` here to make mutable\n+    |                       - consider changing this to `mut x`\n 139 |     *x.y_mut() = 3; //~ ERROR cannot borrow\n     |      ^ cannot borrow mutably\n "}, {"sha": "2ec01168721798684e360cd3a54fca6aa53868dc", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -2,7 +2,7 @@ error: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n    |\n 38 | fn deref_mut1(x: Own<isize>) {\n-   |               - use `mut x` here to make mutable\n+   |               - consider changing this to `mut x`\n 39 |     let __isize = &mut *x; //~ ERROR cannot borrow\n    |                         ^ cannot borrow mutably\n \n@@ -18,7 +18,7 @@ error: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n    |\n 58 | fn assign1<'a>(x: Own<isize>) {\n-   |                - use `mut x` here to make mutable\n+   |                - consider changing this to `mut x`\n 59 |     *x = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow mutably\n "}, {"sha": "0abdbdc3a21b58f1560763529439ac66aeb5ca35", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1cec5d4bf626f151a779323e16d62fe60117086/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=e1cec5d4bf626f151a779323e16d62fe60117086", "patch": "@@ -10,6 +10,9 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n error: cannot borrow immutable `Box` content `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:29:5\n    |\n+27 | fn owned_receiver(x: Box<Foo>) {\n+   |                   - consider changing this to `mut x`\n+28 |     x.borrowed();\n 29 |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n "}]}