{"sha": "1821414b7bb496545ef147644cf5691db433ab5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjE0MTRiN2JiNDk2NTQ1ZWYxNDc2NDRjZjU2OTFkYjQzM2FiNWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-06T08:41:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-06T08:41:48Z"}, "message": "clarify", "tree": {"sha": "cd623710dcddd922278b656137ddb2d97c16392b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd623710dcddd922278b656137ddb2d97c16392b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1821414b7bb496545ef147644cf5691db433ab5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1821414b7bb496545ef147644cf5691db433ab5d", "html_url": "https://github.com/rust-lang/rust/commit/1821414b7bb496545ef147644cf5691db433ab5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1821414b7bb496545ef147644cf5691db433ab5d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9eb4ac4cb5ecc5a16a1ed781a88af4c65bfc2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9eb4ac4cb5ecc5a16a1ed781a88af4c65bfc2f", "html_url": "https://github.com/rust-lang/rust/commit/1b9eb4ac4cb5ecc5a16a1ed781a88af4c65bfc2f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ff063759cba627a8d717899e9b35d7b6a347294e", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1821414b7bb496545ef147644cf5691db433ab5d/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1821414b7bb496545ef147644cf5691db433ab5d/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=1821414b7bb496545ef147644cf5691db433ab5d", "patch": "@@ -51,7 +51,7 @@ use crate::mem::ManuallyDrop;\n ///\n /// On top of that, remember that most types have additional invariants beyond merely\n /// being considered initialized at the type level. For example, a `1`-initialized [`Vec<T>`]\n-/// is considered initialized (under the current implementation, this does not constitute\n+/// is considered initialized (under the current implementation; this does not constitute\n /// a stable guarantee) because the only requirement the compiler knows about it\n /// is that the data pointer must be non-null. Creating such a `Vec<T>` does not cause\n /// *immediate* undefined behavior, but will cause undefined behavior with most\n@@ -405,7 +405,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// On top of that, remember that most types have additional invariants beyond merely\n     /// being considered initialized at the type level. For example, a `1`-initialized [`Vec<T>`]\n-    /// is considered initialized (under the current implementation, this does not constitute\n+    /// is considered initialized (under the current implementation; this does not constitute\n     /// a stable guarantee) because the only requirement the compiler knows about it\n     /// is that the data pointer must be non-null. Creating such a `Vec<T>` does not cause\n     /// *immediate* undefined behavior, but will cause undefined behavior with most"}]}