{"sha": "448575aa4aed72a935f7681ba33419c8d08c1492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ODU3NWFhNGFlZDcyYTkzNWY3NjgxYmEzMzQxOWM4ZDA4YzE0OTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T16:54:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:01:05Z"}, "message": "Simplify", "tree": {"sha": "d7ac47cd16af1d402ab824788c4e2246a2372830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ac47cd16af1d402ab824788c4e2246a2372830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448575aa4aed72a935f7681ba33419c8d08c1492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448575aa4aed72a935f7681ba33419c8d08c1492", "html_url": "https://github.com/rust-lang/rust/commit/448575aa4aed72a935f7681ba33419c8d08c1492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448575aa4aed72a935f7681ba33419c8d08c1492/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263401bf751c66fadd4e9a46cce29dd724cc0985", "url": "https://api.github.com/repos/rust-lang/rust/commits/263401bf751c66fadd4e9a46cce29dd724cc0985", "html_url": "https://github.com/rust-lang/rust/commit/263401bf751c66fadd4e9a46cce29dd724cc0985"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "5438b865074347527486394545631196564f7722", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/448575aa4aed72a935f7681ba33419c8d08c1492/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448575aa4aed72a935f7681ba33419c8d08c1492/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=448575aa4aed72a935f7681ba33419c8d08c1492", "patch": "@@ -23,7 +23,7 @@ impl ast::BinExpr {\n     pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n         let op_node: SyntaxElement = self.op_details()?.0.into();\n         let to_insert: Option<SyntaxElement> = Some(tokens::op(op).into());\n-        let replace_range = RangeInclusive::new(op_node.clone(), op_node);\n+        let replace_range = op_node.clone()..=op_node;\n         Some(replace_children(self, replace_range, to_insert.into_iter()))\n     }\n }\n@@ -43,7 +43,7 @@ impl ast::FnDef {\n             return insert_children(self, InsertPosition::Last, to_insert.into_iter());\n         };\n         to_insert.push(body.syntax().clone().into());\n-        let replace_range = RangeInclusive::new(old_body_or_semi.clone(), old_body_or_semi);\n+        let replace_range = old_body_or_semi.clone()..=old_body_or_semi;\n         replace_children(self, replace_range, to_insert.into_iter())\n     }\n }\n@@ -109,9 +109,7 @@ impl ast::ItemList {\n         let to_insert = iter::once(ws.ws().into());\n         match existing_ws {\n             None => insert_children(self, InsertPosition::After(l_curly), to_insert),\n-            Some(ws) => {\n-                replace_children(self, RangeInclusive::new(ws.clone().into(), ws.into()), to_insert)\n-            }\n+            Some(ws) => replace_children(self, ws.clone().into()..=ws.into(), to_insert),\n         }\n     }\n }\n@@ -207,7 +205,7 @@ impl ast::TypeParam {\n             Some(it) => it.syntax().clone().into(),\n             None => colon.clone().into(),\n         };\n-        replace_children(self, RangeInclusive::new(colon.into(), end), iter::empty())\n+        replace_children(self, colon.into()..=end, iter::empty())\n     }\n }\n \n@@ -224,7 +222,7 @@ fn strip_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n             Some(el) if el.kind() == WHITESPACE => el.clone(),\n             Some(_) | None => start.clone(),\n         };\n-        node = algo::replace_children(&node, RangeInclusive::new(start, end), &mut iter::empty());\n+        node = algo::replace_children(&node, start..=end, &mut iter::empty());\n     }\n     node\n }"}]}