{"sha": "3318e3d8edd4336021f4314a25618e77061f2684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMThlM2Q4ZWRkNDMzNjAyMWY0MzE0YTI1NjE4ZTc3MDYxZjI2ODQ=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-10T21:08:03Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-10T21:08:03Z"}, "message": "progress", "tree": {"sha": "2c92ce91c335c023d2fcc4442e5586d49a3f5883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c92ce91c335c023d2fcc4442e5586d49a3f5883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3318e3d8edd4336021f4314a25618e77061f2684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3318e3d8edd4336021f4314a25618e77061f2684", "html_url": "https://github.com/rust-lang/rust/commit/3318e3d8edd4336021f4314a25618e77061f2684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3318e3d8edd4336021f4314a25618e77061f2684/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c047317f39df2b0f55da10f276b88826f54d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c047317f39df2b0f55da10f276b88826f54d3b", "html_url": "https://github.com/rust-lang/rust/commit/39c047317f39df2b0f55da10f276b88826f54d3b"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "753a01416aab6813d6dd595f6c1ee5fbde4189a4", "filename": "conversions.md", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3318e3d8edd4336021f4314a25618e77061f2684/conversions.md", "raw_url": "https://github.com/rust-lang/rust/raw/3318e3d8edd4336021f4314a25618e77061f2684/conversions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/conversions.md?ref=3318e3d8edd4336021f4314a25618e77061f2684", "patch": "@@ -54,15 +54,27 @@ actually think about it is probably the general *Deref Coercion*: `&T` coerces t\n \n Casts are a superset of coercions: every coercion can be explicitly invoked via a cast,\n but some changes require a cast. These \"true casts\" are generally regarded as dangerous or\n-problematic actions. The set of true casts is actually quite small, and once again revolves\n-largely around pointers. However it also introduces the primary mechanism to convert between\n-numeric types.\n+problematic actions. True casts revolves around raw pointers and the primitive numeric\n+types. Here's an exhaustive list of all the true casts:\n \n * rawptr -> rawptr (e.g. `*mut T as *const T` or `*mut T as *mut U`)\n * rawptr <-> usize (e.g. `*mut T as usize` or `usize as *mut T`)\n-* primitive -> primitive (e.g. `u32 as u8` or `u8 as u32`)\n-* c-like enum -> integer/bool (e.g. `DaysOfWeek as u8`)\n+* number -> number (e.g. `u32 as i8` or `i16 as f64`)\n+* c-like enum -> integer/bool (e.g. `DaysOfWeek as u32`)\n * `u8` -> `char`\n+* something about arrays?\n+\n+For number -> number casts, there are quite a few cases to consider:\n+\n+* unsigned to bigger unsigned will zero-extend losslessly\n+* unsigned to smaller unsigned will truncate via wrapping\n+* signed to unsigned will  ... TODO rest of this list\n+\n+The casts involving rawptrs also allow us to completely bypass type-safety\n+by re-interpretting a pointer of T to a pointer of U for arbitrary types, as\n+well as interpret integers as addresses. However it is impossible to actually\n+*capitalize* on this violation in Safe Rust, because derefencing a raw ptr is\n+`unsafe`.\n \n \n ## Conversion Traits"}]}