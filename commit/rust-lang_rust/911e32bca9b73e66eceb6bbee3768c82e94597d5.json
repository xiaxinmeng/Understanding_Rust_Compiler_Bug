{"sha": "911e32bca9b73e66eceb6bbee3768c82e94597d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWUzMmJjYTliNzNlNjZlY2ViNmJiZWUzNzY4YzgyZTk0NTk3ZDU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T19:53:42Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T20:13:08Z"}, "message": "Complete names from prelude", "tree": {"sha": "489b3497b2762dcabf60d2674031585431e16959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489b3497b2762dcabf60d2674031585431e16959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911e32bca9b73e66eceb6bbee3768c82e94597d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911e32bca9b73e66eceb6bbee3768c82e94597d5", "html_url": "https://github.com/rust-lang/rust/commit/911e32bca9b73e66eceb6bbee3768c82e94597d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911e32bca9b73e66eceb6bbee3768c82e94597d5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c595a6a6f7624092432d28ffd7e0ffd189cbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c595a6a6f7624092432d28ffd7e0ffd189cbda", "html_url": "https://github.com/rust-lang/rust/commit/92c595a6a6f7624092432d28ffd7e0ffd189cbda"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "e35b4b129cad72f8da77d80b4a1c52c7f9ac685f", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=911e32bca9b73e66eceb6bbee3768c82e94597d5", "patch": "@@ -40,7 +40,7 @@ pub struct ItemMap {\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n     /// a dependency (`std` or `core`).\n-    prelude: Option<Module>,\n+    pub(crate) prelude: Option<Module>,\n     pub(crate) extern_prelude: FxHashMap<Name, ModuleDef>,\n     per_module: ArenaMap<ModuleId, ModuleScope>,\n }"}, {"sha": "91a531801b724c0ea4111f78cd16d3b956038505", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=911e32bca9b73e66eceb6bbee3768c82e94597d5", "patch": "@@ -82,10 +82,10 @@ impl Resolver {\n         }\n     }\n \n-    pub fn all_names(&self) -> FxHashMap<Name, PerNs<Resolution>> {\n+    pub fn all_names(&self, db: &impl HirDatabase) -> FxHashMap<Name, PerNs<Resolution>> {\n         let mut names = FxHashMap::default();\n         for scope in self.scopes.iter().rev() {\n-            scope.collect_names(&mut |name, res| {\n+            scope.collect_names(db, &mut |name, res| {\n                 let current: &mut PerNs<Resolution> = names.entry(name).or_default();\n                 if current.types.is_none() {\n                     current.types = res.types;\n@@ -174,7 +174,7 @@ impl Scope {\n         }\n     }\n \n-    fn collect_names(&self, f: &mut dyn FnMut(Name, PerNs<Resolution>)) {\n+    fn collect_names(&self, db: &impl HirDatabase, f: &mut dyn FnMut(Name, PerNs<Resolution>)) {\n         match self {\n             Scope::ModuleScope(m) => {\n                 // TODO: should we provide `self` here?\n@@ -190,6 +190,12 @@ impl Scope {\n                 m.item_map.extern_prelude.iter().for_each(|(name, def)| {\n                     f(name.clone(), PerNs::types(Resolution::Def(*def)));\n                 });\n+                if let Some(prelude) = m.item_map.prelude {\n+                    let prelude_item_map = db.item_map(prelude.krate);\n+                    prelude_item_map[prelude.module_id].entries().for_each(|(name, res)| {\n+                        f(name.clone(), res.def.map(Resolution::Def));\n+                    });\n+                }\n             }\n             Scope::GenericParams(gp) => {\n                 for param in &gp.params {"}, {"sha": "eeaf26d939ba87689e9777a1133928fa47bce49a", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=911e32bca9b73e66eceb6bbee3768c82e94597d5", "patch": "@@ -4,7 +4,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    let names = ctx.resolver.all_names();\n+    let names = ctx.resolver.all_names(ctx.db);\n \n     names.into_iter().for_each(|(name, res)| {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n@@ -165,4 +165,23 @@ mod tests {\n     fn completes_self_in_methods() {\n         check_reference_completion(\"self_in_methods\", r\"impl S { fn foo(&self) { <|> } }\")\n     }\n+\n+    #[test]\n+    fn completes_prelude() {\n+        check_reference_completion(\n+            \"completes_prelude\",\n+            \"\n+            //- /main.rs\n+            fn foo() { let x: <|> }\n+\n+            //- /std/lib.rs\n+            #[prelude_import]\n+            use prelude::*;\n+\n+            mod prelude {\n+                struct Option;\n+            }\n+            \",\n+        );\n+    }\n }"}, {"sha": "2b5a1a8ea072f920cb7553492b38d946346e75e6", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__completes_prelude.snap", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_prelude.snap", "raw_url": "https://github.com/rust-lang/rust/raw/911e32bca9b73e66eceb6bbee3768c82e94597d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_prelude.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_prelude.snap?ref=911e32bca9b73e66eceb6bbee3768c82e94597d5", "patch": "@@ -0,0 +1,54 @@\n+---\n+created: \"2019-02-13T19:52:43.734834624Z\"\n+creator: insta@0.6.2\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+expression: kind_completions\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Option\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [18; 18),\n+        text_edit: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: Some(\n+            \"fn foo()\"\n+        ),\n+        documentation: None,\n+        lookup: None,\n+        insert_text: Some(\n+            \"foo()$0\"\n+        ),\n+        insert_text_format: Snippet,\n+        source_range: [18; 18),\n+        text_edit: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"std\",\n+        kind: Some(\n+            Module\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [18; 18),\n+        text_edit: None\n+    }\n+]"}]}