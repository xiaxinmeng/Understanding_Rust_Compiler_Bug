{"sha": "b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDRiNDNiMTBmYTY0ZjJmMDllN2UyNjVhMmJiN2M2MjQ1MzVjOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-31T23:52:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-31T23:52:46Z"}, "message": "Auto merge of #74994 - JohnTitor:rollup-eknaekv, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #74644 (Remove `linked_list_extras` methods.)\n - #74968 (Run all tests if have no specified tests)\n - #74982 (1.45.2 release notes)\n - #74984 (Miri: fix ICE when unwinding past topmost stack frame)\n - #74986 (fix part of comparison that would always evaluate to \"true\", probably an oversight)\n - #74991 (Fix Const-Generic Cycle ICE #74199)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "26942eb99a26384da18915d2efee52b3eea548a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26942eb99a26384da18915d2efee52b3eea548a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "html_url": "https://github.com/rust-lang/rust/commit/b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e87bacd37539b7e7cd75152dffd225047fa983a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87bacd37539b7e7cd75152dffd225047fa983a", "html_url": "https://github.com/rust-lang/rust/commit/6e87bacd37539b7e7cd75152dffd225047fa983a"}, {"sha": "3ad6feda56d4033a498e20c2d385147fe411678f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad6feda56d4033a498e20c2d385147fe411678f", "html_url": "https://github.com/rust-lang/rust/commit/3ad6feda56d4033a498e20c2d385147fe411678f"}], "stats": {"total": 273, "additions": 207, "deletions": 66}, "files": [{"sha": "4859532f7a1f72505b5bf15fe1fba88e8c4b80d6", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -1,3 +1,12 @@\n+Version 1.45.2 (2020-08-03)\n+==========================\n+\n+* [Fix bindings in tuple struct patterns][74954]\n+* [Fix track_caller integration with trait objects][74784]\n+\n+[74954]: https://github.com/rust-lang/rust/issues/74954\n+[74784]: https://github.com/rust-lang/rust/issues/74784\n+\n Version 1.45.1 (2020-07-30)\n ==========================\n "}, {"sha": "02a746f0e24880893ff89f1983bada892057ae41", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -1110,32 +1110,17 @@ impl<T> IterMut<'_, T> {\n     /// Inserts the given element just after the element most recently returned by `.next()`.\n     /// The inserted element does not appear in the iteration.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(linked_list_extras)]\n-    ///\n-    /// use std::collections::LinkedList;\n-    ///\n-    /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n-    ///\n-    /// {\n-    ///     let mut it = list.iter_mut();\n-    ///     assert_eq!(it.next().unwrap(), &1);\n-    ///     // insert `2` after `1`\n-    ///     it.insert_next(2);\n-    /// }\n-    /// {\n-    ///     let vec: Vec<_> = list.into_iter().collect();\n-    ///     assert_eq!(vec, [1, 2, 3, 4]);\n-    /// }\n-    /// ```\n+    /// This method will be removed soon.\n     #[inline]\n     #[unstable(\n         feature = \"linked_list_extras\",\n         reason = \"this is probably better handled by a cursor type -- we'll see\",\n         issue = \"27794\"\n     )]\n+    #[rustc_deprecated(\n+        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n+        since = \"1.47.0\"\n+    )]\n     pub fn insert_next(&mut self, element: T) {\n         match self.head {\n             // `push_back` is okay with aliasing `element` references\n@@ -1163,27 +1148,17 @@ impl<T> IterMut<'_, T> {\n \n     /// Provides a reference to the next element, without changing the iterator.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(linked_list_extras)]\n-    ///\n-    /// use std::collections::LinkedList;\n-    ///\n-    /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();\n-    ///\n-    /// let mut it = list.iter_mut();\n-    /// assert_eq!(it.next().unwrap(), &1);\n-    /// assert_eq!(it.peek_next().unwrap(), &2);\n-    /// // We just peeked at 2, so it was not consumed from the iterator.\n-    /// assert_eq!(it.next().unwrap(), &2);\n-    /// ```\n+    /// This method will be removed soon.\n     #[inline]\n     #[unstable(\n         feature = \"linked_list_extras\",\n         reason = \"this is probably better handled by a cursor type -- we'll see\",\n         issue = \"27794\"\n     )]\n+    #[rustc_deprecated(\n+        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n+        since = \"1.47.0\"\n+    )]\n     pub fn peek_next(&mut self) -> Option<&mut T> {\n         if self.len == 0 {\n             None"}, {"sha": "ad643a7bdf1941ad15e2c65dca218cf8e0f80a9f", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -153,33 +153,6 @@ fn test_clone_from() {\n     }\n }\n \n-#[test]\n-fn test_insert_prev() {\n-    let mut m = list_from(&[0, 2, 4, 6, 8]);\n-    let len = m.len();\n-    {\n-        let mut it = m.iter_mut();\n-        it.insert_next(-2);\n-        loop {\n-            match it.next() {\n-                None => break,\n-                Some(elt) => {\n-                    it.insert_next(*elt + 1);\n-                    match it.peek_next() {\n-                        Some(x) => assert_eq!(*x, *elt + 2),\n-                        None => assert_eq!(8, *elt),\n-                    }\n-                }\n-            }\n-        }\n-        it.insert_next(0);\n-        it.insert_next(1);\n-    }\n-    check_links(&m);\n-    assert_eq!(m.len(), 3 + len * 2);\n-    assert_eq!(m.into_iter().collect::<Vec<_>>(), [-2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]);\n-}\n-\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_send() {"}, {"sha": "218552a45972d860f022ce2d86b8421b40a646bc", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -193,10 +193,12 @@ def interact(proc, queue):\n \n def main():\n     global MAILBOX\n-    tests = [os.path.splitext(f)[0] for f in glob('*.rs')\n-                                    if not f.startswith('_')]\n+    all_tests = [os.path.splitext(f)[0] for f in glob('*.rs') if not f.startswith('_')]\n     args = sys.argv[1:]\n-    tests = [test for test in tests if test in args]\n+    if args:\n+        tests = [test for test in all_tests if test in args]\n+    else\n+        tests = all_tests\n     if not tests:\n         print(\"Error: No tests to run\")\n         sys.exit(1)"}, {"sha": "e32c8fbee6852275c9d7215faddd5200ca0c81a7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -2209,7 +2209,7 @@ impl ClashingExternDeclarations {\n                 }\n                 (Slice(a_ty), Slice(b_ty)) => Self::structurally_same_type(cx, a_ty, b_ty, ckind),\n                 (RawPtr(a_tymut), RawPtr(b_tymut)) => {\n-                    a_tymut.mutbl == a_tymut.mutbl\n+                    a_tymut.mutbl == b_tymut.mutbl\n                         && Self::structurally_same_type(cx, &a_tymut.ty, &b_tymut.ty, ckind)\n                 }\n                 (Ref(_a_region, a_ty, a_mut), Ref(_b_region, b_ty, b_mut)) => {"}, {"sha": "65736710fce1bb1d26ea14275a46ba170ec5c4ea", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -718,6 +718,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         );\n \n+        if unwinding && self.frame_idx() == 0 {\n+            throw_ub_format!(\"unwinding past the topmost frame of the stack\");\n+        }\n+\n         ::log_settings::settings().indentation -= 1;\n         let frame =\n             self.stack_mut().pop().expect(\"tried to pop a stack frame, but there were none\");"}, {"sha": "b810c9824ce66eb5379362cbd49857f29b7037ca", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -161,6 +161,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_sig(current_item, tcx.fn_sig(def_id), self.covariant);\n             }\n \n+            ty::Error(_) => {}\n             _ => {\n                 span_bug!(\n                     tcx.def_span(def_id),"}, {"sha": "12ea850c8f686f79a3c39950df8f10e19874f9b6", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: [u8; {\n+//~^ ERROR cycle detected\n+//~| ERROR cycle detected\n+    struct Foo<const N: usize>;\n+\n+    impl<const N: usize> Foo<N> {\n+        fn value() -> usize {\n+            N\n+        }\n+    }\n+\n+    Foo::<17>::value()\n+}]>;\n+\n+fn main() {}"}, {"sha": "da0e8032404fc53c4c70d28e49821f30b65c9593", "filename": "src/test/ui/const-generics/nested-type.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b544b43b10fa64f2f09e7e265a2bb7c624535c8e/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr?ref=b544b43b10fa64f2f09e7e265a2bb7c624535c8e", "patch": "@@ -0,0 +1,159 @@\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}]}