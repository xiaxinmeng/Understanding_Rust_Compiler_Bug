{"sha": "32f6e7a38ebc635493f83054f7826140798a1c6c", "node_id": "C_kwDOAAsO6NoAKDMyZjZlN2EzOGViYzYzNTQ5M2Y4MzA1NGY3ODI2MTQwNzk4YTFjNmM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-16T03:47:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-16T03:49:12Z"}, "message": "Remove `EnumTypeTraversalImpl`.\n\nI suspect this macro was around before `TypeFoldable`/`TypeVisitable`\nwere derivable. But now it's only used for two types, `Result` and\n`Option`. Removing the macro and implementing the traits for those types\nby hand makes the code much simpler.", "tree": {"sha": "d9b5bbf506682460f1c997c0d1315492cfd2a238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b5bbf506682460f1c997c0d1315492cfd2a238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f6e7a38ebc635493f83054f7826140798a1c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f6e7a38ebc635493f83054f7826140798a1c6c", "html_url": "https://github.com/rust-lang/rust/commit/32f6e7a38ebc635493f83054f7826140798a1c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f6e7a38ebc635493f83054f7826140798a1c6c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d558796beb400cceb2a2b8950f35aa518a58a586", "url": "https://api.github.com/repos/rust-lang/rust/commits/d558796beb400cceb2a2b8950f35aa518a58a586", "html_url": "https://github.com/rust-lang/rust/commit/d558796beb400cceb2a2b8950f35aa518a58a586"}], "stats": {"total": 199, "additions": 34, "deletions": 165}, "files": [{"sha": "8c3cb22832299947df31222eff25ba1fe49302cd", "filename": "compiler/rustc_type_ir/src/macros.rs", "status": "modified", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/32f6e7a38ebc635493f83054f7826140798a1c6c/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f6e7a38ebc635493f83054f7826140798a1c6c/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs?ref=32f6e7a38ebc635493f83054f7826140798a1c6c", "patch": "@@ -33,144 +33,3 @@ macro_rules! TrivialTypeTraversalImpls {\n         )+\n     };\n }\n-\n-macro_rules! EnumTypeTraversalImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn try_fold_with<V: $crate::fold::FallibleTypeFolder<$tcx>>(\n-                self,\n-                folder: &mut V,\n-            ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::visit::TypeVisitable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn visit_with<V: $crate::visit::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr) input() output($($output:tt)*)) => {\n-        Ok(match $this {\n-            $($output)*\n-        })\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $variant (\n-                            $($crate::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n-                        )\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $variant {\n-                            $($variant_arg: $crate::fold::TypeFoldable::fold_with(\n-                                $variant_arg, $folder\n-                            )?),* }\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant => { $variant }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr) input() output($($output:tt)*)) => {\n-        match $this {\n-            $($output)*\n-        }\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $($crate::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $($crate::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n-                    $($output)*\n-                )\n-        )\n-    };\n-}"}, {"sha": "c90c86b7690deb6e02f98bf78ef617c44fbd705f", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/32f6e7a38ebc635493f83054f7826140798a1c6c/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f6e7a38ebc635493f83054f7826140798a1c6c/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=32f6e7a38ebc635493f83054f7826140798a1c6c", "patch": "@@ -70,30 +70,40 @@ impl<I: Interner, A: TypeVisitable<I>, B: TypeVisitable<I>, C: TypeVisitable<I>>\n     }\n }\n \n-EnumTypeTraversalImpl! {\n-    impl<I, T> TypeFoldable<I> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where I: Interner, T: TypeFoldable<I>\n-}\n-EnumTypeTraversalImpl! {\n-    impl<I, T> TypeVisitable<I> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where I: Interner, T: TypeVisitable<I>\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<I, T, E> TypeFoldable<I> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where I: Interner, T: TypeFoldable<I>, E: TypeFoldable<I>,\n-}\n-EnumTypeTraversalImpl! {\n-    impl<I, T, E> TypeVisitable<I> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>,\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Option<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(match self {\n+            Some(v) => Some(v.try_fold_with(folder)?),\n+            None => None,\n+        })\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Option<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match self {\n+            Some(v) => v.visit_with(visitor),\n+            None => ControlFlow::Continue(()),\n+        }\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>, E: TypeFoldable<I>> TypeFoldable<I> for Result<T, E> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(match self {\n+            Ok(v) => Ok(v.try_fold_with(folder)?),\n+            Err(e) => Err(e.try_fold_with(folder)?),\n+        })\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>> TypeVisitable<I> for Result<T, E> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match self {\n+            Ok(v) => v.visit_with(visitor),\n+            Err(e) => e.visit_with(visitor),\n+        }\n+    }\n }\n \n impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Rc<T> {"}]}