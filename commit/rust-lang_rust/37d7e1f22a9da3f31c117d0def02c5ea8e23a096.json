{"sha": "37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDdlMWYyMmE5ZGEzZjMxYzExN2QwZGVmMDJjNWVhOGUyM2EwOTY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-27T09:28:14Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-07-04T10:53:12Z"}, "message": "rename hir::map::local_def_id_from_hir_id to local_def_id", "tree": {"sha": "9bfda9d90a2a0e9e1f86f8ae0ee70fb22cd50d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bfda9d90a2a0e9e1f86f8ae0ee70fb22cd50d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "html_url": "https://github.com/rust-lang/rust/commit/37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "html_url": "https://github.com/rust-lang/rust/commit/4f7ba515c2bfacde6f09e860c3cc9f37bb742481"}], "stats": {"total": 504, "additions": 252, "deletions": 252}, "files": [{"sha": "316ca6424731ce40deda23438bfc2743f58b271a", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -95,7 +95,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks any attribute.\n     fn check_attributes(&self, item: &hir::Item, target: Target) {\n         if target == Target::Fn || target == Target::Const {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.hir_id));\n         } else if let Some(a) = item.attrs.iter().find(|a| a.check_name(sym::target_feature)) {\n             self.tcx.sess.struct_span_err(a.span, \"attribute should be applied to a function\")\n                 .span_label(item.span, \"not a function\")"}, {"sha": "889659382d060ac5c02b33845389eeae6c4d2412", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                                                        hir_id: HirId,\n                                                        walk: F) {\n         assert!(self.owner_def_index.is_none());\n-        let owner_def_index = self.hir_map.local_def_id_from_hir_id(hir_id).index;\n+        let owner_def_index = self.hir_map.local_def_id(hir_id).index;\n         self.owner_def_index = Some(owner_def_index);\n         walk(self);\n "}, {"sha": "c9c40d0e5dbc029d81c91735467b89191c85bf13", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -240,9 +240,9 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[inline]\n-    pub fn local_def_id_from_hir_id(&self, hir_id: HirId) -> DefId {\n-        self.opt_local_def_id_from_hir_id(hir_id).unwrap_or_else(|| {\n-            bug!(\"local_def_id_from_hir_id: no entry for `{:?}`, which has a map of `{:?}`\",\n+    pub fn local_def_id(&self, hir_id: HirId) -> DefId {\n+        self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n+            bug!(\"local_def_id: no entry for `{:?}`, which has a map of `{:?}`\",\n                  hir_id, self.find_entry(hir_id))\n         })\n     }\n@@ -427,7 +427,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body_owner_def_id(&self, id: BodyId) -> DefId {\n-        self.local_def_id_from_hir_id(self.body_owner(id))\n+        self.local_def_id(self.body_owner(id))\n     }\n \n     /// Given a `HirId`, returns the `BodyId` associated with it,\n@@ -763,7 +763,7 @@ impl<'hir> Map<'hir> {\n     /// Returns the `DefId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n     pub fn get_module_parent(&self, id: HirId) -> DefId {\n-        self.local_def_id_from_hir_id(self.get_module_parent_node(id))\n+        self.local_def_id(self.get_module_parent_node(id))\n     }\n \n     /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no\n@@ -839,7 +839,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_parent_did(&self, id: HirId) -> DefId {\n-        self.local_def_id_from_hir_id(self.get_parent_item(id))\n+        self.local_def_id(self.get_parent_item(id))\n     }\n \n     pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {\n@@ -1245,7 +1245,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         // the user-friendly path, otherwise fall back to stringifying DefPath.\n         crate::ty::tls::with_opt(|tcx| {\n             if let Some(tcx) = tcx {\n-                let def_id = map.local_def_id_from_hir_id(id);\n+                let def_id = map.local_def_id(id);\n                 tcx.def_path_str(def_id)\n             } else if let Some(path) = map.def_path_from_hir_id(id) {\n                 path.data.into_iter().map(|elem| {"}, {"sha": "cc532cb064ebe3139953ae91eb6b643bfe5b8b2c", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -83,7 +83,7 @@ impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if let hir::ExprKind::Closure(..) = expr.node {\n-            let closure_def_id = self.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+            let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             if let Some(upvars) = self.tcx.upvars(closure_def_id) {\n                 // Every capture of a closure expression is a local in scope,\n                 // that is moved/copied/borrowed into the closure value, and"}, {"sha": "c127e667ce9e95f73b4da61bb19b658de2569273", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -951,8 +951,8 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                         let parent_def_id = self.parent_def_id;\n                         let def_scope_default = || {\n                             let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n-                            parent_def_id\n-                                == tcx.hir().local_def_id_from_hir_id(opaque_parent_hir_id)\n+                            parent_def_id == tcx.hir()\n+                                                .local_def_id(opaque_parent_hir_id)\n                         };\n                         let (in_definition_scope, origin) = match tcx.hir().find(opaque_hir_id) {\n                             Some(Node::Item(item)) => match item.node {"}, {"sha": "6bd00b1d02e8db7f180e04bfdd914ad1d4f35f50", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -926,7 +926,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {\n     {\n         let old_param_env = self.context.param_env;\n         self.context.param_env = self.context.tcx.param_env(\n-            self.context.tcx.hir().local_def_id_from_hir_id(id)\n+            self.context.tcx.hir().local_def_id(id)\n         );\n         f(self);\n         self.context.param_env = old_param_env;"}, {"sha": "4c27318c3e19bd62be99587cbc05855b07c86d07", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             Node::Item(item) => {\n                 match item.node {\n                     hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                         let def = self.tcx.adt_def(def_id);\n                         self.repr_has_repr_c = def.repr.c();\n \n@@ -325,7 +325,7 @@ fn has_allow_dead_code_or_lang_attr(\n         return true;\n     }\n \n-    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = tcx.hir().local_def_id(id);\n     let cg_attrs = tcx.codegen_fn_attrs(def_id);\n \n     // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n@@ -494,7 +494,7 @@ impl DeadVisitor<'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n-        let field_type = self.tcx.type_of(self.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n+        let field_type = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n         !field.is_positional()\n             && !self.symbol_is_live(field.hir_id)\n             && !field_type.is_phantom_data()\n@@ -525,7 +525,7 @@ impl DeadVisitor<'tcx> {\n         // This is done to handle the case where, for example, the static\n         // method of a private type is used, but the type itself is never\n         // called directly.\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = self.tcx.hir().local_def_id(id);\n         let inherent_impls = self.tcx.inherent_impls(def_id);\n         for &impl_did in inherent_impls.iter() {\n             for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {"}, {"sha": "cba4d0f1598c4436335da9dcd0c54c1251f0764b", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -32,7 +32,7 @@ struct EntryContext<'a, 'tcx> {\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n-        let def_id = self.map.local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.map.local_def_id(item.hir_id);\n         let def_key = self.map.def_key(def_id);\n         let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n         find_item(item, self, at_root);\n@@ -142,11 +142,11 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n \n fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n     if let Some((hir_id, _)) = visitor.start_fn {\n-        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Start))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Start))\n     } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n-        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Main))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else if let Some((hir_id, _)) = visitor.main_fn {\n-        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Main))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else {\n         // No main function\n         let mut err = struct_err!(tcx.sess, E0601,"}, {"sha": "77094604edacf63cb7e51c728ff6f6325cdfbe92", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -930,7 +930,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     fn walk_captures(&mut self, closure_expr: &hir::Expr, fn_decl_span: Span) {\n         debug!(\"walk_captures({:?})\", closure_expr);\n \n-        let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_expr.hir_id);\n+        let closure_def_id = self.tcx().hir().local_def_id(closure_expr.hir_id);\n         if let Some(upvars) = self.tcx().upvars(closure_def_id) {\n             for (&var_id, upvar) in upvars.iter() {\n                 let upvar_id = ty::UpvarId {"}, {"sha": "7c15f2ef94d1b4e259d106583e83392482239f5c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -118,7 +118,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n             match self.item_refs.get(&*value.as_str()).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                    let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                     self.collect_item(item_index, def_id);\n                 },\n                 // Known lang item with attribute on incorrect target."}, {"sha": "c4d60b676b2798131acbbe63fa4b58f1f52ab885", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -363,7 +363,7 @@ fn visit_fn<'tcx>(\n     debug!(\"visit_fn\");\n \n     // swap in a new set of IR maps for this function body:\n-    let def_id = ir.tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = ir.tcx.hir().local_def_id(id);\n     let mut fn_maps = IrMaps::new(ir.tcx, def_id);\n \n     // Don't run unused pass for #[derive()]\n@@ -494,7 +494,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr) {\n         // in better error messages than just pointing at the closure\n         // construction site.\n         let mut call_caps = Vec::new();\n-        let closure_def_id = ir.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+        let closure_def_id = ir.tcx.hir().local_def_id(expr.hir_id);\n         if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n             let parent_upvars = ir.tcx.upvars(ir.body_owner);\n             call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {"}, {"sha": "b9a95219d3146be6525e8e0866d1cf8acf69ffa6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -35,7 +35,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     match item.node {\n         hir::ItemKind::Impl(..) |\n         hir::ItemKind::Fn(..) => {\n-            let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+            let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n             generics.requires_monomorphization(tcx)\n         }\n         _ => false,\n@@ -48,7 +48,7 @@ fn method_might_be_inlined(\n     impl_src: DefId,\n ) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n-    let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(impl_item.hir_id));\n+    let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.hir_id));\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true\n     }\n@@ -222,7 +222,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 } else {\n                     false\n                 };\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n                 let is_extern = codegen_attrs.contains_extern_indicator();\n                 let std_internal = codegen_attrs.flags.contains(\n@@ -243,7 +243,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::Item(item) => {\n                 match item.node {\n                     hir::ItemKind::Fn(.., body) => {\n-                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                         if item_might_be_inlined(self.tcx,\n                                                  &item,\n                                                  self.tcx.codegen_fn_attrs(def_id)) {\n@@ -345,7 +345,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n         if codegen_attrs.contains_extern_indicator() ||\n             codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL) {"}, {"sha": "26ac1275bb992045a920ab3346a9df27c4ddb81b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -675,7 +675,7 @@ impl<'tcx> ScopeTree {\n                     &format!(\"free_scope: {:?} not recognized by the \\\n                               region scope tree for {:?} / {:?}\",\n                              param_owner,\n-                             self.root_parent.map(|id| tcx.hir().local_def_id_from_hir_id(id)),\n+                             self.root_parent.map(|id| tcx.hir().local_def_id(id)),\n                              self.root_body.map(|hir_id| DefId::local(hir_id.owner))));\n             }\n "}, {"sha": "0839a2b435ae81920db2748bcd2a7f8ccd921be1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -83,15 +83,15 @@ impl Region {\n     fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam) -> (ParamName, Region) {\n         let i = *index;\n         *index += 1;\n-        let def_id = hir_map.local_def_id_from_hir_id(param.hir_id);\n+        let def_id = hir_map.local_def_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n         (param.name.modern(), Region::EarlyBound(i, def_id, origin))\n     }\n \n     fn late(hir_map: &Map<'_>, param: &GenericParam) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n-        let def_id = hir_map.local_def_id_from_hir_id(param.hir_id);\n+        let def_id = hir_map.local_def_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\n             \"Region::late: param={:?} depth={:?} def_id={:?} origin={:?}\",\n@@ -1326,7 +1326,7 @@ fn object_lifetime_defaults_for_item(\n \n                 add_bounds(&mut set, &param.bounds);\n \n-                let param_def_id = tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                let param_def_id = tcx.hir().local_def_id(param.hir_id);\n                 for predicate in &generics.where_clause.predicates {\n                     // Look for `type: ...` where clauses.\n                     let data = match *predicate {\n@@ -1370,7 +1370,7 @@ fn object_lifetime_defaults_for_item(\n                                 .enumerate()\n                                 .find(|&(_, (_, lt_name, _))| lt_name == name)\n                                 .map_or(Set1::Many, |(i, (id, _, origin))| {\n-                                    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+                                    let def_id = tcx.hir().local_def_id(id);\n                                     Set1::One(Region::EarlyBound(i as u32, def_id, origin))\n                                 })\n                         }\n@@ -1835,7 +1835,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         node: hir::ImplItemKind::Method(..),\n                         ..\n                     }) => {\n-                        let scope = self.tcx.hir().local_def_id_from_hir_id(fn_id);\n+                        let scope = self.tcx.hir().local_def_id(fn_id);\n                         def = Region::Free(scope, def.id().unwrap());\n                     }\n                     _ => {}"}, {"sha": "7757336cf9c366a02c77c78241a4315a26169a77", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n-        let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(\n+        let impl_def_id = self.tcx.hir().local_def_id(\n             self.tcx.hir().get_parent_item(ii.hir_id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n             self.check_missing_stability(ii.hir_id, ii.span, \"item\");\n@@ -598,7 +598,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n-                let parent_def_id = self.hir().local_def_id_from_hir_id(\n+                let parent_def_id = self.hir().local_def_id(\n                     self.hir().get_parent_item(id));\n                 let skip = self.lookup_deprecation_entry(parent_def_id)\n                                .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n@@ -766,7 +766,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                 // compiler-generated `extern crate` items have a dummy span.\n                 if item.span.is_dummy() { return }\n \n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 let cnum = match self.tcx.extern_mod_stmt_cnum(def_id) {\n                     Some(cnum) => cnum,\n                     None => return,\n@@ -796,7 +796,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // There's no good place to insert stability check for non-Copy unions,\n             // so semi-randomly perform it here in stability.rs\n             hir::ItemKind::Union(..) if !self.tcx.features().untagged_unions => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 let adt_def = self.tcx.adt_def(def_id);\n                 let ty = self.tcx.type_of(def_id);\n "}, {"sha": "a061e6f48f4c0bc554751c55d0ed77778d5febd6", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 tcx.symbol_name(Instance::mono(tcx, def_id))\n             }\n             MonoItem::GlobalAsm(hir_id) => {\n-                let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+                let def_id = tcx.hir().local_def_id(hir_id);\n                 SymbolName {\n                     name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n                 }"}, {"sha": "4453624fa4502334a58a9d8e118ed70dd3fa6f28", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> DefIdForest {\n     /// crate.\n     #[inline]\n     pub fn full(tcx: TyCtxt<'tcx>) -> DefIdForest {\n-        let crate_id = tcx.hir().local_def_id_from_hir_id(CRATE_HIR_ID);\n+        let crate_id = tcx.hir().local_def_id(CRATE_HIR_ID);\n         DefIdForest::from_id(crate_id)\n     }\n "}, {"sha": "7f60f747600340656d89c2a5b2eb38716a27b26c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -2816,7 +2816,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                            parent_vis: &hir::Visibility,\n                                            trait_item_ref: &hir::TraitItemRef)\n                                            -> AssocItem {\n-        let def_id = self.hir().local_def_id_from_hir_id(trait_item_ref.id.hir_id);\n+        let def_id = self.hir().local_def_id(trait_item_ref.id.hir_id);\n         let (kind, has_self) = match trait_item_ref.kind {\n             hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n             hir::AssocItemKind::Method { has_self } => {\n@@ -2842,7 +2842,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                           parent_def_id: DefId,\n                                           impl_item_ref: &hir::ImplItemRef)\n                                           -> AssocItem {\n-        let def_id = self.hir().local_def_id_from_hir_id(impl_item_ref.id.hir_id);\n+        let def_id = self.hir().local_def_id(impl_item_ref.id.hir_id);\n         let (kind, has_self) = match impl_item_ref.kind {\n             hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n             hir::AssocItemKind::Method { has_self } => {\n@@ -3114,7 +3114,7 @@ impl Iterator for AssocItemsIterator<'_> {\n fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n-    let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n+    let parent_def_id = tcx.hir().local_def_id(parent_id);\n     let parent_item = tcx.hir().expect_item(parent_id);\n     match parent_item.node {\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n@@ -3178,14 +3178,14 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n             tcx.arena.alloc_from_iter(\n                 trait_item_refs.iter()\n                                .map(|trait_item_ref| trait_item_ref.id)\n-                               .map(|id| tcx.hir().local_def_id_from_hir_id(id.hir_id))\n+                               .map(|id| tcx.hir().local_def_id(id.hir_id))\n             )\n         }\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n             tcx.arena.alloc_from_iter(\n                 impl_item_refs.iter()\n                               .map(|impl_item_ref| impl_item_ref.id)\n-                              .map(|id| tcx.hir().local_def_id_from_hir_id(id.hir_id))\n+                              .map(|id| tcx.hir().local_def_id(id.hir_id))\n             )\n         }\n         hir::ItemKind::TraitAlias(..) => &[],"}, {"sha": "2bb9c258f8b67b14fb2af647de32ebd61513d30d", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -186,7 +186,7 @@ pub(super) fn trait_impls_of_provider(\n         }\n \n         for &hir_id in tcx.hir().trait_impls(trait_id) {\n-            add_impl(tcx.hir().local_def_id_from_hir_id(hir_id));\n+            add_impl(tcx.hir().local_def_id(hir_id));\n         }\n     }\n "}, {"sha": "34db080ef66332e6607d53d774bdb5008a549e55", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -198,7 +198,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     cfg: &cfg::CFG,\n ) -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'tcx>) {\n     let owner_id = tcx.hir().body_owner(body_id);\n-    let owner_def_id = tcx.hir().local_def_id_from_hir_id(owner_id);\n+    let owner_def_id = tcx.hir().local_def_id(owner_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_scope_tree = tcx.region_scope_tree(owner_def_id);\n     let body = tcx.hir().body(body_id);"}, {"sha": "c5553fa93cf67c2c5ce650c486533ceb04b6782c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -84,7 +84,7 @@ fn reachable_non_generics_provider(\n             // let it through if it's included statically.\n             match tcx.hir().get(hir_id) {\n                 Node::ForeignItem(..) => {\n-                    let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+                    let def_id = tcx.hir().local_def_id(hir_id);\n                     if tcx.is_statically_included_foreign_item(def_id) {\n                         Some(def_id)\n                     } else {\n@@ -104,7 +104,7 @@ fn reachable_non_generics_provider(\n                     node: hir::ImplItemKind::Method(..),\n                     ..\n                 }) => {\n-                    let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+                    let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     if !generics.requires_monomorphization(tcx) &&\n                         // Functions marked with #[inline] are only ever codegened"}, {"sha": "f562744dbe753a3a53bba338551b608c9ef47b85", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -33,7 +33,7 @@ impl SymbolNamesTest<'tcx> {\n     fn process_attrs(&mut self,\n                      hir_id: hir::HirId) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = tcx.hir().local_def_id(hir_id);\n         for attr in tcx.get_attrs(def_id).iter() {\n             if attr.check_name(SYMBOL_NAME) {\n                 // for now, can only use on monomorphic names"}, {"sha": "a8f1b001cec8d9a55b3c2e50ab0ba2e7dd4f0018", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -471,7 +471,7 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n     }\n \n     fn node_path(&self, id: hir::HirId) -> Option<String> {\n-        Some(self.tcx.def_path_str(self.tcx.hir().local_def_id_from_hir_id(id)))\n+        Some(self.tcx.def_path_str(self.tcx.hir().local_def_id(id)))\n     }\n }\n "}, {"sha": "ba893f5f9369161374f9609c7b6ba1da677103bb", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -111,7 +111,7 @@ impl IfThisChanged<'tcx> {\n     }\n \n     fn process_attrs(&mut self, hir_id: hir::HirId, attrs: &[ast::Attribute]) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = self.tcx.hir().local_def_id(hir_id);\n         let def_path_hash = self.tcx.def_path_hash(def_id);\n         for attr in attrs {\n             if attr.check_name(ATTR_IF_THIS_CHANGED) {"}, {"sha": "c23bb6b47f49080b925903cce1425e87c6891f92", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -500,7 +500,7 @@ impl DirtyCleanVisitor<'tcx> {\n     }\n \n     fn check_item(&mut self, item_id: hir::HirId, item_span: Span) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item_id);\n+        let def_id = self.tcx.hir().local_def_id(item_id);\n         for attr in self.tcx.get_attrs(def_id).iter() {\n             let assertion = match self.assertion_maybe(item_id, attr) {\n                 Some(a) => a,"}, {"sha": "56180bcad06d33d4a11073f00864e020f198cb13", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -16,7 +16,7 @@ fn proc_macro_decls_static(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     let mut finder = Finder { decls: None };\n     tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n-    finder.decls.map(|id| tcx.hir().local_def_id_from_hir_id(id))\n+    finder.decls.map(|id| tcx.hir().local_def_id(id))\n }\n \n struct Finder {"}, {"sha": "267b09bae35e427604ce0ae16f2d1ca737685ff9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |\n             hir::ItemKind::Union(..) => {\n-                let def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+                let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n                 self.check_heap_type(cx, it.span, cx.tcx.type_of(def_id))\n             }\n             _ => ()\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n             hir::ItemKind::Struct(ref struct_def, _) |\n             hir::ItemKind::Union(ref struct_def, _) => {\n                 for struct_field in struct_def.fields() {\n-                    let def_id = cx.tcx.hir().local_def_id_from_hir_id(struct_field.hir_id);\n+                    let def_id = cx.tcx.hir().local_def_id(struct_field.hir_id);\n                     self.check_heap_type(cx, struct_field.span,\n                                          cx.tcx.type_of(def_id));\n                 }\n@@ -500,21 +500,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemKind::Union(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemKind::Enum(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             _ => return,\n@@ -792,7 +792,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n             _ => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n         let prfn = match cx.tcx.extern_mod_stmt_cnum(def_id) {\n             Some(cnum) => cx.tcx.plugin_registrar_fn(cnum),\n             None => {\n@@ -973,7 +973,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n         if let hir::ItemKind::Union(ref vdata, _) = item.node {\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(\n-                    ctx.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n+                    ctx.tcx.hir().local_def_id(field.hir_id));\n                 if field_ty.needs_drop(ctx.tcx, ctx.param_env) {\n                     ctx.span_lint(UNIONS_WITH_DROP_FIELDS,\n                                   field.span,\n@@ -1216,7 +1216,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n         use rustc::ty::Predicate::*;\n \n         if cx.tcx.features().trivial_bounds {\n-            let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n             for &(predicate, span) in &predicates.predicates {\n                 let predicate_kind_name = match predicate {\n@@ -1541,7 +1541,7 @@ impl ExplicitOutlivesRequirements {\n         ty_generics: &'tcx ty::Generics,\n     ) -> Vec<ty::Region<'tcx>> {\n         let index = ty_generics.param_def_id_to_index[\n-            &tcx.hir().local_def_id_from_hir_id(param.hir_id)];\n+            &tcx.hir().local_def_id(param.hir_id)];\n \n         match param.kind {\n             hir::GenericParamKind::Lifetime { .. } => {\n@@ -1659,7 +1659,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n         use rustc::middle::resolve_lifetime::Region;\n \n         let infer_static = cx.tcx.features().infer_static_outlives_requirements;\n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if let hir::ItemKind::Struct(_, ref hir_generics)\n             | hir::ItemKind::Enum(_, ref hir_generics)\n             | hir::ItemKind::Union(_, ref hir_generics) = item.node"}, {"sha": "84f068ab50a22c5f792420c65b5a7195aca2861c", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -20,7 +20,7 @@ pub enum MethodLateContext {\n }\n \n pub fn method_context(cx: &LateContext<'_, '_>, id: hir::HirId) -> MethodLateContext {\n-    let def_id = cx.tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = cx.tcx.hir().local_def_id(id);\n     let item = cx.tcx.associated_item(def_id);\n     match item.container {\n         ty::TraitContainer(..) => MethodLateContext::TraitAutoImpl,"}, {"sha": "fdfc6f68590a4b308abf99a4a2bbdb1257f2a5b5", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -888,7 +888,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl) {\n-        let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = self.cx.tcx.hir().local_def_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n         let inputs = if sig.c_variadic {\n@@ -912,7 +912,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n-        let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n         self.check_type_for_ffi_and_report_errors(span, ty);\n     }\n@@ -941,7 +941,7 @@ declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.node {\n-            let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let item_def_id = cx.tcx.hir().local_def_id(it.hir_id);\n             let t = cx.tcx.type_of(item_def_id);\n             let ty = cx.tcx.erase_regions(&t);\n             let layout = match cx.layout_of(ty) {"}, {"sha": "c7f57be642618c1ef9be5c2ec908bc4803a1c398", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -667,7 +667,7 @@ impl EncodeContext<'tcx> {\n         (id, md, attrs, vis): (hir::HirId, &hir::Mod, &[ast::Attribute], &hir::Visibility),\n     ) -> Entry<'tcx> {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = tcx.hir().local_def_id(id);\n         debug!(\"EncodeContext::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n@@ -683,7 +683,7 @@ impl EncodeContext<'tcx> {\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: self.encode_attributes(attrs),\n             children: self.lazy_seq(md.item_ids.iter().map(|item_id| {\n-                tcx.hir().local_def_id_from_hir_id(item_id.id).index\n+                tcx.hir().local_def_id(item_id.id).index\n             })),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n@@ -1105,7 +1105,7 @@ impl EncodeContext<'tcx> {\n                 // for methods, write all the stuff get_trait_method\n                 // needs to know\n                 let ctor = struct_def.ctor_hir_id()\n-                    .map(|ctor_hir_id| tcx.hir().local_def_id_from_hir_id(ctor_hir_id).index);\n+                    .map(|ctor_hir_id| tcx.hir().local_def_id(ctor_hir_id).index);\n \n                 let repr_options = get_repr_options(tcx, def_id);\n \n@@ -1194,7 +1194,7 @@ impl EncodeContext<'tcx> {\n                 hir::ItemKind::ForeignMod(ref fm) => {\n                     self.lazy_seq(fm.items\n                         .iter()\n-                        .map(|foreign_item| tcx.hir().local_def_id_from_hir_id(\n+                        .map(|foreign_item| tcx.hir().local_def_id(\n                             foreign_item.hir_id).index))\n                 }\n                 hir::ItemKind::Enum(..) => {\n@@ -1313,7 +1313,7 @@ impl EncodeContext<'tcx> {\n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef) -> Entry<'tcx> {\n         use syntax::print::pprust;\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(macro_def.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(&MacroDef {\n                 body: pprust::tts_to_string(&macro_def.body.trees().collect::<Vec<_>>()),\n@@ -1656,7 +1656,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n     }\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         intravisit::walk_item(self, item);\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         match item.node {\n             hir::ItemKind::ExternCrate(_) |\n             hir::ItemKind::Use(..) => {} // ignore these\n@@ -1666,7 +1666,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n     }\n     fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n         intravisit::walk_foreign_item(self, ni);\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(ni.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(ni.hir_id);\n         self.record(def_id,\n                           EncodeContext::encode_info_for_foreign_item,\n                           (def_id, ni));\n@@ -1678,7 +1678,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         intravisit::walk_variant(self, v, g, id);\n \n         if let Some(ref discr) = v.node.disr_expr {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(discr.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(discr.hir_id);\n             self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n         }\n     }\n@@ -1691,7 +1691,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         self.encode_info_for_ty(ty);\n     }\n     fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(macro_def.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         self.record(def_id, EncodeContext::encode_info_for_macro_def, macro_def);\n     }\n }\n@@ -1710,7 +1710,7 @@ impl EncodeContext<'tcx> {\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n         for param in &generics.params {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(param.hir_id);\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => continue,\n                 GenericParamKind::Type { ref default, .. } => {\n@@ -1730,7 +1730,7 @@ impl EncodeContext<'tcx> {\n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {\n         match ty.node {\n             hir::TyKind::Array(_, ref length) => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(length.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(length.hir_id);\n                 self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n             }\n             _ => {}\n@@ -1740,7 +1740,7 @@ impl EncodeContext<'tcx> {\n     fn encode_info_for_expr(&mut self, expr: &hir::Expr) {\n         match expr.node {\n             hir::ExprKind::Closure(..) => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n                 self.record(def_id, EncodeContext::encode_info_for_closure, def_id);\n             }\n             _ => {}\n@@ -1752,7 +1752,7 @@ impl EncodeContext<'tcx> {\n     /// so it's easier to do that here then to wait until we would encounter\n     /// normally in the visitor walk.\n     fn encode_addl_info_for_item(&mut self, item: &hir::Item) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         match item.node {\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n@@ -1788,7 +1788,7 @@ impl EncodeContext<'tcx> {\n \n                 // If the struct has a constructor, encode it.\n                 if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id_from_hir_id(ctor_hir_id);\n+                    let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n                     self.record(ctor_def_id,\n                                 EncodeContext::encode_struct_ctor,\n                                 (def_id, ctor_def_id));\n@@ -1823,7 +1823,7 @@ struct ImplVisitor<'tcx> {\n impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemKind::Impl(..) = item.node {\n-            let impl_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let impl_id = self.tcx.hir().local_def_id(item.hir_id);\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_id) {\n                 self.impls\n                     .entry(trait_ref.def_id)"}, {"sha": "b2e40282d93323a04654b04ec5ed1bb249ca382b", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -25,11 +25,11 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n         };\n \n         let foreign_items = fm.items.iter()\n-            .map(|it| self.tcx.hir().local_def_id_from_hir_id(it.hir_id))\n+            .map(|it| self.tcx.hir().local_def_id(it.hir_id))\n             .collect();\n         self.modules.push(ForeignModule {\n             foreign_items,\n-            def_id: self.tcx.hir().local_def_id_from_hir_id(it.hir_id),\n+            def_id: self.tcx.hir().local_def_id(it.hir_id),\n         });\n     }\n "}, {"sha": "5da5384f8aaa792a8ada31b192c73e815aeebe48", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -56,7 +56,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 name: None,\n                 kind: cstore::NativeUnknown,\n                 cfg: None,\n-                foreign_module: Some(self.tcx.hir().local_def_id_from_hir_id(it.hir_id)),\n+                foreign_module: Some(self.tcx.hir().local_def_id(it.hir_id)),\n                 wasm_import_module: None,\n             };\n             let mut kind_specified = false;"}, {"sha": "3e090aed5227006bcd8cdc7bdabd73a71f282834", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -768,7 +768,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n                 local_id: *late_bound,\n             };\n             let name = tcx.hir().name(hir_id).as_interned_str();\n-            let region_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+            let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,\n                 bound_region: ty::BoundRegion::BrNamed(region_def_id, name),"}, {"sha": "21444ebe0ca5e88a40b4cb1acae92fa5ba2cfb12", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -69,7 +69,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n             let fn_sig = cx.tables().liberated_fn_sigs()[id].clone();\n-            let fn_def_id = tcx.hir().local_def_id_from_hir_id(id);\n+            let fn_def_id = tcx.hir().local_def_id(id);\n \n             let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n@@ -534,7 +534,7 @@ where\n     let span = tcx_hir.span(fn_id);\n \n     let hir_tables = hir.tables();\n-    let fn_def_id = tcx_hir.local_def_id_from_hir_id(fn_id);\n+    let fn_def_id = tcx_hir.local_def_id(fn_id);\n \n     // Gather the upvars of a closure, if any.\n     let mut upvar_mutbls = vec![];"}, {"sha": "e7663ddaa9879e1726c6fb5329b70c680b0dd7d0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -542,7 +542,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n-            let def_id = cx.tcx.hir().local_def_id_from_hir_id(count.hir_id);\n+            let def_id = cx.tcx.hir().local_def_id(count.hir_id);\n             let substs = InternalSubsts::identity_for_item(cx.tcx.global_tcx(), def_id);\n             let instance = ty::Instance::resolve(\n                 cx.tcx.global_tcx(),\n@@ -910,9 +910,9 @@ fn convert_path_expr<'a, 'tcx>(\n         Res::Def(DefKind::ConstParam, def_id) => {\n             let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n             let item_id = cx.tcx.hir().get_parent_node(hir_id);\n-            let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(item_id);\n+            let item_def_id = cx.tcx.hir().local_def_id(item_id);\n             let generics = cx.tcx.generics_of(item_def_id);\n-            let local_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+            let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n             let name = cx.tcx.hir().name(hir_id).as_interned_str();\n             let val = ConstValue::Param(ty::ParamConst::new(index, name));\n@@ -1191,7 +1191,7 @@ fn capture_upvar<'tcx>(\n ) -> ExprRef<'tcx> {\n     let upvar_id = ty::UpvarId {\n         var_path: ty::UpvarPath { hir_id: var_hir_id },\n-        closure_expr_id: cx.tcx.hir().local_def_id_from_hir_id(closure_expr.hir_id).to_local(),\n+        closure_expr_id: cx.tcx.hir().local_def_id(closure_expr.hir_id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);"}, {"sha": "3d9349df5bedb3d490b4307394018180cc05be91", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -54,7 +54,7 @@ pub struct Cx<'a, 'tcx> {\n impl<'a, 'tcx> Cx<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, src_id: hir::HirId) -> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;\n-        let src_def_id = tcx.hir().local_def_id_from_hir_id(src_id);\n+        let src_def_id = tcx.hir().local_def_id(src_id);\n         let tables = tcx.typeck_tables_of(src_def_id);\n         let body_owner_kind = tcx.hir().body_owner_kind(src_id);\n "}, {"sha": "da8fdb5082a8c21d15f43c9e9368248983a67caa", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -989,7 +989,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n             hir::ItemKind::Union(_, ref generics) => {\n                 if generics.params.is_empty() {\n                     if self.mode == MonoItemCollectionMode::Eager {\n-                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                         debug!(\"RootCollector: ADT drop-glue for {}\",\n                                def_id_to_string(self.tcx, def_id));\n \n@@ -1001,11 +1001,11 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n             hir::ItemKind::GlobalAsm(..) => {\n                 debug!(\"RootCollector: ItemKind::GlobalAsm({})\",\n                        def_id_to_string(self.tcx,\n-                                        self.tcx.hir().local_def_id_from_hir_id(item.hir_id)));\n+                                        self.tcx.hir().local_def_id(item.hir_id)));\n                 self.output.push(MonoItem::GlobalAsm(item.hir_id));\n             }\n             hir::ItemKind::Static(..) => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 debug!(\"RootCollector: ItemKind::Static({})\",\n                        def_id_to_string(self.tcx, def_id));\n                 self.output.push(MonoItem::Static(def_id));\n@@ -1015,7 +1015,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                 // actually used somewhere. Just declaring them is insufficient.\n \n                 // but even just declaring them must collect the items they refer to\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n                 let instance = Instance::mono(self.tcx, def_id);\n                 let cid = GlobalId {\n@@ -1029,7 +1029,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                 }\n             }\n             hir::ItemKind::Fn(..) => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 self.push_if_root(def_id);\n             }\n         }\n@@ -1043,7 +1043,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.node {\n             hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n-                let def_id = self.tcx.hir().local_def_id_from_hir_id(ii.hir_id);\n+                let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }\n             _ => { /* Nothing to do here */ }\n@@ -1136,7 +1136,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n                 }\n             }\n \n-            let impl_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let impl_def_id = tcx.hir().local_def_id(item.hir_id);\n \n             debug!(\"create_mono_items_for_default_impls(item={})\",\n                    def_id_to_string(tcx, impl_def_id));"}, {"sha": "e63426281bf21fea294ffd71ecac399254a366a5", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -55,7 +55,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n                 tcx.symbol_name(Instance::mono(tcx, def_id))\n             }\n             MonoItem::GlobalAsm(hir_id) => {\n-                let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+                let def_id = tcx.hir().local_def_id(hir_id);\n                 ty::SymbolName {\n                     name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n                 }"}, {"sha": "ad9db4e0aa8d84f59507cd2a11d805e0805d1350", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -314,7 +314,7 @@ fn mono_item_visibility(\n             };\n         }\n         MonoItem::GlobalAsm(hir_id) => {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(*hir_id);\n+            let def_id = tcx.hir().local_def_id(*hir_id);\n             return if tcx.is_reachable_non_generic(def_id) {\n                 *can_be_internalized = false;\n                 default_visibility(tcx, def_id, false)\n@@ -698,7 +698,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n             Some(def_id)\n         }\n         MonoItem::Static(def_id) => Some(def_id),\n-        MonoItem::GlobalAsm(hir_id) => Some(tcx.hir().local_def_id_from_hir_id(hir_id)),\n+        MonoItem::GlobalAsm(hir_id) => Some(tcx.hir().local_def_id(hir_id)),\n     }\n }\n "}, {"sha": "15e2dc3261d98ecbb9223ac7ea301a7a97264524", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -78,7 +78,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n                               _: hir::HirId,\n                               _: Span) {\n             if let hir::VariantData::Tuple(_, hir_id) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id_from_hir_id(hir_id));\n+                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n             }\n             intravisit::walk_struct_def(self, v)\n         }"}, {"sha": "95cb8de70675d12c604572560870fe51fb006c9f", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -29,7 +29,7 @@ struct VarianceTest<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         if let ItemKind::Ty(..) = item.node {\n             for attr in self.tcx.get_attrs(item_def_id).iter() {"}, {"sha": "daa64478bca8303ee20112c574db6b2ed4925aa2", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     fn check_nested_body(&mut self, body_id: hir::BodyId) -> Promotability {\n         let item_id = self.tcx.hir().body_owner(body_id);\n-        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n         let outer_in_fn = self.in_fn;\n         let outer_tables = self.tables;\n@@ -451,7 +451,7 @@ fn check_expr_kind<'a, 'tcx>(\n             let nested_body_promotable = v.check_nested_body(body_id);\n             // Paths in constant contexts cannot refer to local variables,\n             // as there are none, and thus closures can't have upvars there.\n-            let closure_def_id = v.tcx.hir().local_def_id_from_hir_id(e.hir_id);\n+            let closure_def_id = v.tcx.hir().local_def_id(e.hir_id);\n             if !v.tcx.upvars(closure_def_id).map_or(true, |v| v.is_empty()) {\n                 NotPromotable\n             } else {"}, {"sha": "f1bf1111cf700d0ea3b43725721b4e0f3abe9a92", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -44,7 +44,7 @@ fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n         0 => None,\n         1 => {\n             let (hir_id, _) = finder.registrars.pop().unwrap();\n-            Some(tcx.hir().local_def_id_from_hir_id(hir_id))\n+            Some(tcx.hir().local_def_id(hir_id))\n         },\n         _ => {\n             let diagnostic = tcx.sess.diagnostic();"}, {"sha": "b68e10a647df1a31d0b9746c84b0a77714ae43e8", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -250,13 +250,13 @@ fn def_id_visibility<'tcx>(\n                     let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n                     match tcx.hir().get(parent_hir_id) {\n                         Node::Variant(..) => {\n-                            let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n+                            let parent_did = tcx.hir().local_def_id(parent_hir_id);\n                             let (mut ctor_vis, mut span, mut descr) = def_id_visibility(\n                                 tcx, parent_did,\n                             );\n \n                             let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n-                            let ctor_did = tcx.hir().local_def_id_from_hir_id(\n+                            let ctor_did = tcx.hir().local_def_id(\n                                 vdata.ctor_hir_id().unwrap());\n                             let variant = adt_def.variant_with_ctor_id(ctor_did);\n \n@@ -333,7 +333,7 @@ fn item_tables<'a, 'tcx>(\n     hir_id: hir::HirId,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n ) -> &'a ty::TypeckTables<'tcx> {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+    let def_id = tcx.hir().local_def_id(hir_id);\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n@@ -394,7 +394,7 @@ trait VisibilityLike: Sized {\n         access_levels: &AccessLevels,\n     ) -> Self {\n         let mut find = FindMin { tcx, access_levels, min: Self::MAX };\n-        let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = tcx.hir().local_def_id(hir_id);\n         find.visit(tcx.type_of(def_id));\n         if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {\n             find.visit_trait(trait_ref);\n@@ -475,7 +475,7 @@ impl EmbargoVisitor<'tcx> {\n     ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n         ReachEverythingInTheInterfaceVisitor {\n             access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),\n-            item_def_id: self.tcx.hir().local_def_id_from_hir_id(item_id),\n+            item_def_id: self.tcx.hir().local_def_id(item_id),\n             ev: self,\n         }\n     }\n@@ -506,7 +506,7 @@ impl EmbargoVisitor<'tcx> {\n                 if let hir::ItemKind::Mod(m) = &item.node {\n                     for item_id in m.item_ids.as_ref() {\n                         let item = self.tcx.hir().expect_item(item_id.id);\n-                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item_id.id);\n+                        let def_id = self.tcx.hir().local_def_id(item_id.id);\n                         if !self.tcx.hygienic_eq(segment.ident, item.ident, def_id) { continue; }\n                         if let hir::ItemKind::Use(..) = item.node {\n                             self.update(item.hir_id, Some(AccessLevel::Exported));\n@@ -726,7 +726,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(id);\n+            let def_id = self.tcx.hir().local_def_id(id);\n             if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n                     if export.vis == ty::Visibility::Public {\n@@ -751,7 +751,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n         let module_did = ty::DefIdTree::parent(\n             self.tcx,\n-            self.tcx.hir().local_def_id_from_hir_id(md.hir_id)\n+            self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n         let mut module_id = self.tcx.hir().as_local_hir_id(module_did).unwrap();\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n@@ -772,7 +772,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             for id in &module.item_ids {\n                 self.update(id.id, level);\n             }\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(module_id);\n+            let def_id = self.tcx.hir().local_def_id(module_id);\n             if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n                     if let Some(hir_id) = self.tcx.hir().as_local_hir_id(export.res.def_id()) {\n@@ -1163,7 +1163,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     // Check types in item interfaces.\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let orig_current_item = mem::replace(&mut self.current_item,\n-            self.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+            self.tcx.hir().local_def_id(item.hir_id));\n         let orig_in_body = mem::replace(&mut self.in_body, false);\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, item.hir_id, self.empty_tables));\n@@ -1689,7 +1689,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         SearchInterfaceForPrivateItemsVisitor {\n             tcx: self.tcx,\n             item_id,\n-            item_def_id: self.tcx.hir().local_def_id_from_hir_id(item_id),\n+            item_def_id: self.tcx.hir().local_def_id(item_id),\n             span: self.tcx.hir().span(item_id),\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,"}, {"sha": "c81b1dc8974b0bf16e1b75f2646cd47f9a19cbc9", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -628,7 +628,7 @@ struct ClauseDumper<'tcx> {\n \n impl ClauseDumper<'tcx> {\n     fn process_attrs(&mut self, hir_id: hir::HirId, attrs: &[ast::Attribute]) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = self.tcx.hir().local_def_id(hir_id);\n         for attr in attrs {\n             let mut clauses = None;\n "}, {"sha": "7154b7958b932ddbe6d9797c9202b5af1a77422a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -1999,7 +1999,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                 let item_id = tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n+                let item_def_id = tcx.hir().local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 tcx.mk_ty_param(index, tcx.hir().name(hir_id).as_interned_str())\n@@ -2091,7 +2091,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n             hir::TyKind::Def(item_id, ref lifetimes) => {\n-                let did = tcx.hir().local_def_id_from_hir_id(item_id.id);\n+                let did = tcx.hir().local_def_id(item_id.id);\n                 self.impl_trait_ty_to_ty(did, lifetimes)\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n@@ -2173,7 +2173,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         debug!(\"ast_const_to_const(id={:?}, ast_const={:?})\", ast_const.hir_id, ast_const);\n \n         let tcx = self.tcx();\n-        let def_id = tcx.hir().local_def_id_from_hir_id(ast_const.hir_id);\n+        let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n \n         let mut const_ = ty::Const {\n             val: ConstValue::Unevaluated(\n@@ -2189,9 +2189,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // parent item and construct a `ParamConst`.\n             let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n             let item_id = tcx.hir().get_parent_node(hir_id);\n-            let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n+            let item_def_id = tcx.hir().local_def_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n-            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id_from_hir_id(hir_id)];\n+            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n             let name = tcx.hir().name(hir_id).as_interned_str();\n             const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n         }"}, {"sha": "d2f2f89cf0b1c7dce33459727c574eb1da9f2259", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             opt_kind, expected_sig\n         );\n \n-        let expr_def_id = self.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+        let expr_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n \n         let ClosureSignatures {\n             bound_sig,"}, {"sha": "603726dfe238c9e967a945cae9df82e5002f86bd", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let count_def_id = tcx.hir().local_def_id_from_hir_id(count.hir_id);\n+        let count_def_id = tcx.hir().local_def_id(count.hir_id);\n         let count = if self.const_param_def_id(count).is_some() {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {"}, {"sha": "2f4f1d8f7346bceaf918ae781fb6a862104da07c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -22,7 +22,7 @@ fn equate_intrinsic_type<'tcx>(\n     inputs: Vec<Ty<'tcx>>,\n     output: Ty<'tcx>,\n ) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+    let def_id = tcx.hir().local_def_id(it.hir_id);\n \n     match it.node {\n         hir::ForeignItemKind::Fn(..) => {}"}, {"sha": "a7e4f8e5c6289948bb556d212d5ded5492d3a60b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )?;\n \n         for import_id in &pick.import_ids {\n-            let import_def_id = self.tcx.hir().local_def_id_from_hir_id(*import_id);\n+            let import_def_id = self.tcx.hir().local_def_id(*import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);\n@@ -434,7 +434,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        self_ty, expr_id, ProbeScope::TraitsInScope)?;\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n         for import_id in pick.import_ids {\n-            let import_def_id = tcx.hir().local_def_id_from_hir_id(import_id);\n+            let import_def_id = tcx.hir().local_def_id(import_id);\n             debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);"}, {"sha": "8dcfa184d7dad5aff8adc53a04756ee7e26bb8b6", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -797,7 +797,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n             match i.node {\n                 hir::ItemKind::Trait(..) |\n                 hir::ItemKind::TraitAlias(..) => {\n-                    let def_id = self.map.local_def_id_from_hir_id(i.hir_id);\n+                    let def_id = self.map.local_def_id(i.hir_id);\n                     self.traits.push(def_id);\n                 }\n                 _ => ()"}, {"sha": "efe9079e19e4bb3268c3251a8bd0833cb4bf2c8d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -1085,7 +1085,7 @@ fn check_fn<'a, 'tcx>(\n         fcx.yield_ty = Some(yield_ty);\n     }\n \n-    let outer_def_id = fcx.tcx.closure_base_def_id(fcx.tcx.hir().local_def_id_from_hir_id(fn_id));\n+    let outer_def_id = fcx.tcx.closure_base_def_id(fcx.tcx.hir().local_def_id(fn_id));\n     let outer_hir_id = fcx.tcx.hir().as_local_hir_id(outer_def_id).unwrap();\n     GatherLocalsVisitor { fcx: &fcx, parent_id: outer_hir_id, }.visit_body(body);\n \n@@ -1183,7 +1183,7 @@ fn check_fn<'a, 'tcx>(\n \n     // Check that a function marked as `#[panic_handler]` has signature `fn(&PanicInfo) -> !`\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n-        if panic_impl_did == fcx.tcx.hir().local_def_id_from_hir_id(fn_id) {\n+        if panic_impl_did == fcx.tcx.hir().local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n                 // at this point we don't care if there are duplicate handlers or if the handler has\n                 // the wrong signature as this value we'll be used when writing metadata and that\n@@ -1241,7 +1241,7 @@ fn check_fn<'a, 'tcx>(\n \n     // Check that a function marked as `#[alloc_error_handler]` has signature `fn(Layout) -> !`\n     if let Some(alloc_error_handler_did) = fcx.tcx.lang_items().oom() {\n-        if alloc_error_handler_did == fcx.tcx.hir().local_def_id_from_hir_id(fn_id) {\n+        if alloc_error_handler_did == fcx.tcx.hir().local_def_id(fn_id) {\n             if let Some(alloc_layout_did) = fcx.tcx.lang_items().alloc_layout() {\n                 if declared_ret_ty.sty != ty::Never {\n                     fcx.tcx.sess.span_err(\n@@ -1292,7 +1292,7 @@ fn check_fn<'a, 'tcx>(\n }\n \n fn check_struct(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = tcx.hir().local_def_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n@@ -1306,7 +1306,7 @@ fn check_struct(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n }\n \n fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = tcx.hir().local_def_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n@@ -1334,26 +1334,26 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n         it.hir_id,\n-        tcx.def_path_str(tcx.hir().local_def_id_from_hir_id(it.hir_id))\n+        tcx.def_path_str(tcx.hir().local_def_id(it.hir_id))\n     );\n     let _indenter = indenter();\n     match it.node {\n         // Consts can play a role in type-checking, so they are included here.\n         hir::ItemKind::Static(..) => {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = tcx.hir().local_def_id(it.hir_id);\n             tcx.typeck_tables_of(def_id);\n             maybe_check_static_with_link_section(tcx, def_id, it.span);\n         }\n         hir::ItemKind::Const(..) => {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id_from_hir_id(it.hir_id));\n+            tcx.typeck_tables_of(tcx.hir().local_def_id(it.hir_id));\n         }\n         hir::ItemKind::Enum(ref enum_definition, _) => {\n             check_enum(tcx, it.span, &enum_definition.variants, it.hir_id);\n         }\n         hir::ItemKind::Fn(..) => {} // entirely within check_item_body\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n             debug!(\"ItemKind::Impl {} with id {}\", it.ident, it.hir_id);\n-            let impl_def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let impl_def_id = tcx.hir().local_def_id(it.hir_id);\n             if let Some(impl_trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n                 check_impl_items_against_trait(\n                     tcx,\n@@ -1367,7 +1367,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n             }\n         }\n         hir::ItemKind::Trait(..) => {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = tcx.hir().local_def_id(it.hir_id);\n             check_on_unimplemented(tcx, def_id, it);\n         }\n         hir::ItemKind::Struct(..) => {\n@@ -1377,13 +1377,13 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n             check_union(tcx, it.hir_id, it.span);\n         }\n         hir::ItemKind::Existential(..) => {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = tcx.hir().local_def_id(it.hir_id);\n \n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             check_opaque(tcx, def_id, substs, it.span);\n         }\n         hir::ItemKind::Ty(..) => {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = tcx.hir().local_def_id(it.hir_id);\n             let pty_ty = tcx.type_of(def_id);\n             let generics = tcx.generics_of(def_id);\n             check_bounds_are_used(tcx, &generics, pty_ty);\n@@ -1401,7 +1401,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n                 }\n             } else {\n                 for item in &m.items {\n-                    let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+                    let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n                     if generics.params.len() - generics.own_counts().lifetimes != 0 {\n                         let mut err = struct_span_err!(\n                             tcx.sess,\n@@ -1468,7 +1468,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n }\n \n fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item) {\n-    let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+    let item_def_id = tcx.hir().local_def_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n@@ -1551,7 +1551,7 @@ fn check_impl_items_against_trait<'tcx>(\n     // and compatible with trait signature\n     for impl_item in impl_items() {\n         let ty_impl_item = tcx.associated_item(\n-            tcx.hir().local_def_id_from_hir_id(impl_item.hir_id));\n+            tcx.hir().local_def_id(impl_item.hir_id));\n         let ty_trait_item = tcx.associated_items(impl_trait_ref.def_id)\n             .find(|ac| Namespace::from(&impl_item.node) == Namespace::from(ac.kind) &&\n                        tcx.hygienic_eq(ty_impl_item.ident, ac.ident, impl_trait_ref.def_id))\n@@ -1909,7 +1909,7 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n \n #[allow(trivial_numeric_casts)]\n pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], id: hir::HirId) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = tcx.hir().local_def_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n@@ -1937,7 +1937,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n \n     for v in vs {\n         if let Some(ref e) = v.node.disr_expr {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id_from_hir_id(e.hir_id));\n+            tcx.typeck_tables_of(tcx.hir().local_def_id(e.hir_id));\n         }\n     }\n \n@@ -2006,7 +2006,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let item_id = tcx.hir().ty_param_owner(hir_id);\n-        let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n+        let item_def_id = tcx.hir().local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n         let index = generics.param_def_id_to_index[&def_id];\n         tcx.arena.alloc(ty::GenericPredicates {\n@@ -2453,7 +2453,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         value: &T,\n         value_span: Span,\n     ) -> T {\n-        let parent_def_id = self.tcx.hir().local_def_id_from_hir_id(parent_id);\n+        let parent_def_id = self.tcx.hir().local_def_id(parent_id);\n         debug!(\"instantiate_opaque_types_from_value(parent_def_id={:?}, value={:?})\",\n                parent_def_id,\n                value);"}, {"sha": "c66d746d6e0293e78898a181fae714df9bcdd1e9", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// types from which we should derive implied bounds, if any.\n     pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: &[Ty<'tcx>]) {\n         debug!(\"regionck_item(item.id={:?}, wf_tys={:?})\", item_id, wf_tys);\n-        let subject = self.tcx.hir().local_def_id_from_hir_id(item_id);\n+        let subject = self.tcx.hir().local_def_id(item_id);\n         let mut rcx = RegionCtxt::new(\n             self,\n             RepeatingScope(item_id),"}, {"sha": "155cabb27a92f0f1a94b873ffa1edae6aad90f5a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This may change if abstract return types of some sort are\n         // implemented.\n         let tcx = self.tcx;\n-        let closure_def_id = tcx.hir().local_def_id_from_hir_id(closure_id);\n+        let closure_def_id = tcx.hir().local_def_id(closure_id);\n \n         tcx.upvars(closure_def_id).iter().flat_map(|upvars| {\n             upvars"}, {"sha": "a41f4ec91a426e49e73237929cd9c6adada2443c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -95,7 +95,7 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n         // won't be allowed unless there's an *explicit* implementation of `Send`\n         // for `T`\n         hir::ItemKind::Impl(_, polarity, defaultness, _, ref trait_ref, ref self_ty, _) => {\n-            let is_auto = tcx.impl_trait_ref(tcx.hir().local_def_id_from_hir_id(item.hir_id))\n+            let is_auto = tcx.impl_trait_ref(tcx.hir().local_def_id(item.hir_id))\n                                 .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n             if let (hir::Defaultness::Default { .. }, true) = (defaultness, is_auto) {\n                 tcx.sess.span_err(item.span, \"impls of auto traits cannot be default\");\n@@ -188,7 +188,7 @@ fn check_associated_item(\n \n     let code = ObligationCauseCode::MiscObligation;\n     for_id(tcx, item_id, span).with_fcx(|fcx, tcx| {\n-        let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id_from_hir_id(item_id));\n+        let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id(item_id));\n \n         let (mut implied_bounds, self_ty) = match item.container {\n             ty::TraitContainer(_) => (vec![], fcx.tcx.mk_self_type()),\n@@ -232,7 +232,7 @@ fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) -> CheckWfFcxBuilder<'tcx\n }\n \n fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = tcx.hir().local_def_id(id);\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n         id,\n@@ -252,7 +252,7 @@ fn check_type_defn<'tcx, F>(\n {\n     for_item(tcx, item).with_fcx(|fcx, fcx_tcx| {\n         let variants = lookup_fields(fcx);\n-        let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n         let packed = fcx.tcx.adt_def(def_id).repr.packed();\n \n         for variant in &variants {\n@@ -320,7 +320,7 @@ fn check_type_defn<'tcx, F>(\n fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n-    let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+    let trait_def_id = tcx.hir().local_def_id(item.hir_id);\n \n     let trait_def = tcx.trait_def(trait_def_id);\n     if trait_def.is_marker {\n@@ -342,7 +342,7 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n \n fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n         let sig = fcx.normalize_associated_types_in(item.span, &sig);\n         let mut implied_bounds = vec![];\n@@ -361,7 +361,7 @@ fn check_item_type(\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx, gcx| {\n-        let ty = gcx.type_of(gcx.hir().local_def_id_from_hir_id(item_id));\n+        let ty = gcx.type_of(gcx.hir().local_def_id(item_id));\n         let item_ty = fcx.normalize_associated_types_in(ty_span, &ty);\n \n         let mut forbid_unsized = true;\n@@ -394,7 +394,7 @@ fn check_impl<'tcx>(\n     debug!(\"check_impl: {:?}\", item);\n \n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let item_def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let item_def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n \n         match *ast_trait_ref {\n             Some(ref ast_trait_ref) => {\n@@ -943,7 +943,7 @@ fn check_variances_for_type_defn<'tcx>(\n     item: &hir::Item,\n     hir_generics: &hir::Generics,\n ) {\n-    let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+    let item_def_id = tcx.hir().local_def_id(item.hir_id);\n     let ty = tcx.type_of(item_def_id);\n     if tcx.has_error_field(ty) {\n         return;\n@@ -1026,7 +1026,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n-    let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);\n+    let def_id = fcx.tcx.hir().local_def_id(id);\n     let predicates = fcx.tcx.predicates_of(def_id).predicates\n         .iter()\n         .map(|(p, _)| *p)\n@@ -1069,19 +1069,19 @@ impl CheckTypeWellFormedVisitor<'tcx> {\n impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     fn visit_item(&self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(i.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(i.hir_id);\n         self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n     fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(trait_item.hir_id);\n         self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n     fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(impl_item.hir_id);\n         self.tcx.ensure().check_impl_item_well_formed(def_id);\n     }\n }\n@@ -1101,7 +1101,7 @@ struct AdtField<'tcx> {\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn non_enum_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n         let fields = struct_def.fields().iter().map(|field| {\n-            let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n+            let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n             let field_ty = self.normalize_associated_types_in(field.span,\n                                                               &field_ty);\n             let field_ty = self.resolve_vars_if_possible(&field_ty);"}, {"sha": "a2632b20c2ecbca944f6bebedabb3f95d76c759f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -34,7 +34,7 @@ use syntax_pos::Span;\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body) -> &'tcx ty::TypeckTables<'tcx> {\n         let item_id = self.tcx.hir().body_owner(body.id());\n-        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n         // This attribute causes us to dump some writeback information\n         // in the form of errors, which is uSymbolfor unit tests."}, {"sha": "ffc66ec16de139ed68602ea89f1d63bc7fd6fd9e", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -52,7 +52,7 @@ struct CheckVisitor<'tcx> {\n \n impl CheckVisitor<'tcx> {\n     fn check_import(&self, id: hir::HirId, span: Span) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = self.tcx.hir().local_def_id(id);\n         if !self.tcx.maybe_unused_trait_import(def_id) {\n             return;\n         }\n@@ -219,7 +219,7 @@ struct ExternCrateToLint {\n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemKind::ExternCrate(orig_name) = item.node {\n-            let extern_crate_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let extern_crate_def_id = self.tcx.hir().local_def_id(item.hir_id);\n             self.crates_to_lint.push(\n                 ExternCrateToLint {\n                     def_id: extern_crate_def_id,"}, {"sha": "a95b9a03dcf77d90b449f4fbabb9553084c918cc", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> Checker<'tcx> {\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n-                let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(impl_id);\n+                let impl_def_id = self.tcx.hir().local_def_id(impl_id);\n                 f(self.tcx, impl_def_id);\n             }\n         }"}, {"sha": "fb79a85ea25bf9ffb5c4afd88f5760d3a870ba58", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -54,7 +54,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n             _ => return\n         };\n \n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         let self_ty = self.tcx.type_of(def_id);\n         let lang_items = self.tcx.lang_items();\n         match self_ty.sty {\n@@ -257,7 +257,7 @@ impl InherentCollect<'tcx> {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits.\n-            let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let impl_def_id = self.tcx.hir().local_def_id(item.hir_id);\n             let vec = self.impls_map.inherent_impls.entry(def_id).or_default();\n             vec.push(impl_def_id);\n         } else {"}, {"sha": "04b59a63e1d8ae788b7628c0639180f816dbff10", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -89,7 +89,7 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n             hir::ItemKind::Struct(..) |\n             hir::ItemKind::Trait(..) |\n             hir::ItemKind::Union(..) => {\n-                let type_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let type_def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 self.check_for_overlapping_inherent_impls(type_def_id);\n             }\n             _ => {}"}, {"sha": "1d0e433f07b3a90acc768c97df76f0f03fe4f3be", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -19,7 +19,7 @@ mod orphan;\n mod unsafety;\n \n fn check_impl(tcx: TyCtxt<'_>, hir_id: HirId) {\n-    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+    let impl_def_id = tcx.hir().local_def_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n     // base type.\n@@ -151,8 +151,8 @@ pub fn check_coherence(tcx: TyCtxt<'_>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap(tcx: TyCtxt<'_>, hir_id: HirId) {\n-    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+    let impl_def_id = tcx.hir().local_def_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;\n "}, {"sha": "299e18337bd309aa1d110353429f097d1b3f4b0e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -22,7 +22,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     /// to prevent inundating the user with a bunch of similar error\n     /// reports.\n     fn visit_item(&mut self, item: &hir::Item) {\n-        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         // \"Trait\" impl\n         if let hir::ItemKind::Impl(.., Some(_), _, _) = item.node {\n             debug!(\"coherence2::orphan check: trait impl {}\","}, {"sha": "07fbfddd96e434e248fd323b3f56d5df41069cb7", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -21,7 +21,7 @@ impl UnsafetyChecker<'tcx> {\n                                 unsafety: hir::Unsafety,\n                                 polarity: hir::ImplPolarity)\n     {\n-        let local_did = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let local_did = self.tcx.hir().local_def_id(item.hir_id);\n         if let Some(trait_ref) = self.tcx.impl_trait_ref(local_did) {\n             let trait_def = self.tcx.trait_def(trait_ref.def_id);\n             let unsafe_attr = impl_generics.and_then(|generics| {"}, {"sha": "09de228dd578034e87f409562b300a359aa07bb1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -124,12 +124,12 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Type {\n                     default: Some(_), ..\n                 } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { .. } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.type_of(def_id);\n                 }\n             }\n@@ -139,7 +139,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if let hir::ExprKind::Closure(..) = expr.node {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.generics_of(def_id);\n             self.tcx.type_of(def_id);\n         }\n@@ -265,7 +265,7 @@ fn type_param_predicates(\n \n     let param_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let param_owner = tcx.hir().ty_param_owner(param_id);\n-    let param_owner_def_id = tcx.hir().local_def_id_from_hir_id(param_owner);\n+    let param_owner_def_id = tcx.hir().local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.param_def_id_to_index[&def_id];\n     let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id).as_interned_str());\n@@ -385,7 +385,7 @@ fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.res {\n             Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n-                def_id == tcx.hir().local_def_id_from_hir_id(param_id)\n+                def_id == tcx.hir().local_def_id(param_id)\n             }\n             _ => false,\n         }\n@@ -397,7 +397,7 @@ fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n-    let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n+    let def_id = tcx.hir().local_def_id(item_id);\n     match it.node {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n@@ -406,7 +406,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod(ref foreign_mod) => {\n             for item in &foreign_mod.items {\n-                let def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = tcx.hir().local_def_id(item.hir_id);\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);\n@@ -444,7 +444,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n             tcx.predicates_of(def_id);\n \n             for f in struct_def.fields() {\n-                let def_id = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n+                let def_id = tcx.hir().local_def_id(f.hir_id);\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);\n@@ -478,7 +478,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n \n fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n-    let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n+    let def_id = tcx.hir().local_def_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n \n     match trait_item.node {\n@@ -498,7 +498,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n }\n \n fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n+    let def_id = tcx.hir().local_def_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n@@ -508,7 +508,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n }\n \n fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n-    let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n+    let def_id = tcx.hir().local_def_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n@@ -525,7 +525,7 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n         prev_discr = Some(\n             if let Some(ref e) = variant.node.disr_expr {\n-                let expr_did = tcx.hir().local_def_id_from_hir_id(e.hir_id);\n+                let expr_did = tcx.hir().local_def_id(e.hir_id);\n                 def.eval_explicit_discr(tcx, expr_did)\n             } else if let Some(discr) = repr_type.disr_incr(tcx, prev_discr) {\n                 Some(discr)\n@@ -548,7 +548,7 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n         );\n \n         for f in variant.node.data.fields() {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n+            let def_id = tcx.hir().local_def_id(f.hir_id);\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);\n@@ -578,7 +578,7 @@ fn convert_variant(\n         .fields()\n         .iter()\n         .map(|f| {\n-            let fid = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n+            let fid = tcx.hir().local_def_id(f.hir_id);\n             let dup_span = seen_fields.get(&f.ident.modern()).cloned();\n             if let Some(prev_span) = dup_span {\n                 struct_span_err!(\n@@ -635,13 +635,13 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n             let variants = def.variants\n                 .iter()\n                 .map(|v| {\n-                    let variant_did = Some(tcx.hir().local_def_id_from_hir_id(v.node.id));\n+                    let variant_did = Some(tcx.hir().local_def_id(v.node.id));\n                     let ctor_did = v.node.data.ctor_hir_id()\n-                        .map(|hir_id| tcx.hir().local_def_id_from_hir_id(hir_id));\n+                        .map(|hir_id| tcx.hir().local_def_id(hir_id));\n \n                     let discr = if let Some(ref e) = v.node.disr_expr {\n                         distance_from_explicit = 0;\n-                        ty::VariantDiscr::Explicit(tcx.hir().local_def_id_from_hir_id(e.hir_id))\n+                        ty::VariantDiscr::Explicit(tcx.hir().local_def_id(e.hir_id))\n                     } else {\n                         ty::VariantDiscr::Relative(distance_from_explicit)\n                     };\n@@ -657,7 +657,7 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n         ItemKind::Struct(ref def, _) => {\n             let variant_did = None;\n             let ctor_did = def.ctor_hir_id()\n-                .map(|hir_id| tcx.hir().local_def_id_from_hir_id(hir_id));\n+                .map(|hir_id| tcx.hir().local_def_id(hir_id));\n \n             let variants = std::iter::once(convert_variant(\n                 tcx, variant_did, ctor_did, item.ident, ty::VariantDiscr::Relative(0), def,\n@@ -669,7 +669,7 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n         ItemKind::Union(ref def, _) => {\n             let variant_did = None;\n             let ctor_did = def.ctor_hir_id()\n-                .map(|hir_id| tcx.hir().local_def_id_from_hir_id(hir_id));\n+                .map(|hir_id| tcx.hir().local_def_id(hir_id));\n \n             let variants = std::iter::once(convert_variant(\n                 tcx, variant_did, ctor_did, item.ident, ty::VariantDiscr::Relative(0), def,\n@@ -889,7 +889,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n         Node::ImplItem(_) | Node::TraitItem(_) | Node::Variant(_) |\n         Node::Ctor(..) | Node::Field(_) => {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n-            Some(tcx.hir().local_def_id_from_hir_id(parent_id))\n+            Some(tcx.hir().local_def_id(parent_id))\n         }\n         Node::Expr(&hir::Expr {\n             node: hir::ExprKind::Closure(..),\n@@ -937,7 +937,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                     opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: kw::SelfUpper.as_interned_str(),\n-                        def_id: tcx.hir().local_def_id_from_hir_id(param_id),\n+                        def_id: tcx.hir().local_def_id(param_id),\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n@@ -983,7 +983,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             .map(|(i, param)| ty::GenericParamDef {\n                 name: param.name.ident().as_interned_str(),\n                 index: own_start + i as u32,\n-                def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n+                def_id: tcx.hir().local_def_id(param.hir_id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Lifetime,\n             }),\n@@ -1050,7 +1050,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                 let param_def = ty::GenericParamDef {\n                     index: type_start + i as u32,\n                     name: param.name.ident().as_interned_str(),\n-                    def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n+                    def_id: tcx.hir().local_def_id(param.hir_id),\n                     pure_wrt_drop: param.pure_wrt_drop,\n                     kind,\n                 };\n@@ -1623,23 +1623,23 @@ fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n         fn visit_item(&mut self, it: &'tcx Item) {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The existential type itself or its children are not within its reveal scope.\n             if def_id != self.def_id {\n                 self.check(def_id);\n                 intravisit::walk_item(self, it);\n             }\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem) {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The existential type itself or its children are not within its reveal scope.\n             if def_id != self.def_id {\n                 self.check(def_id);\n                 intravisit::walk_impl_item(self, it);\n             }\n         }\n         fn visit_trait_item(&mut self, it: &'tcx TraitItem) {\n-            let def_id = self.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             self.check(def_id);\n             intravisit::walk_trait_item(self, it);\n         }\n@@ -1720,7 +1720,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id));\n             let inputs = data.fields()\n                 .iter()\n-                .map(|f| tcx.type_of(tcx.hir().local_def_id_from_hir_id(f.hir_id)));\n+                .map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n             ty::Binder::bind(tcx.mk_fn_sig(\n                 inputs,\n                 ty,\n@@ -2036,7 +2036,7 @@ fn explicit_predicates_of(\n     let mut index = parent_count + has_own_self as u32;\n     for param in early_bound_lifetimes_from_generics(tcx, ast_generics) {\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n-            def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n+            def_id: tcx.hir().local_def_id(param.hir_id),\n             index,\n             name: param.name.ident().as_interned_str(),\n         }));\n@@ -2154,7 +2154,7 @@ fn explicit_predicates_of(\n             };\n \n             let assoc_ty =\n-                tcx.mk_projection(tcx.hir().local_def_id_from_hir_id(trait_item.hir_id),\n+                tcx.mk_projection(tcx.hir().local_def_id(trait_item.hir_id),\n                     self_trait_ref.substs);\n \n             let bounds = AstConv::compute_bounds("}, {"sha": "029a8f9c41f68f4de6b79f1c8781c83bba5d0dc4", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -79,7 +79,7 @@ struct ImplWfCheck<'tcx> {\n impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         if let hir::ItemKind::Impl(.., ref impl_item_refs) = item.node {\n-            let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let impl_def_id = self.tcx.hir().local_def_id(item.hir_id);\n             enforce_impl_params_are_constrained(self.tcx,\n                                                 impl_def_id,\n                                                 impl_item_refs);\n@@ -109,7 +109,7 @@ fn enforce_impl_params_are_constrained(\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()\n-        .map(|item_ref| tcx.hir().local_def_id_from_hir_id(item_ref.id.hir_id))\n+        .map(|item_ref| tcx.hir().local_def_id(item_ref.id.hir_id))\n         .filter(|&def_id| {\n             let item = tcx.associated_item(def_id);\n             item.kind == ty::AssocKind::Type && item.defaultness.has_value()"}, {"sha": "01383da38cd91ac233d4b4c7c73e5211a1db5283", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -370,7 +370,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n     let env_node_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n-    let env_def_id = tcx.hir().local_def_id_from_hir_id(env_node_id);\n+    let env_def_id = tcx.hir().local_def_id(env_node_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n \n     astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)\n@@ -384,7 +384,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n     let env_hir_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n-    let env_def_id = tcx.hir().local_def_id_from_hir_id(env_hir_id);\n+    let env_def_id = tcx.hir().local_def_id(env_hir_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n     let mut bounds = Bounds::default();\n     let (principal, _) = AstConv::instantiate_poly_trait_ref_inner("}, {"sha": "6b288347ad00683875b77773b81034fc701451a5", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -52,7 +52,7 @@ pub struct InferVisitor<'cx, 'tcx> {\n \n impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        let item_did = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let item_did = self.tcx.hir().local_def_id(item.hir_id);\n \n         debug!(\"InferVisitor::visit_item(item={:?})\", item_did);\n "}, {"sha": "3ae646b3ac7ceb12976969bceaed44c37633ed58", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -15,7 +15,7 @@ struct OutlivesTest<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_outlives\"\n         // attribute and report an error with various results if found."}, {"sha": "b75a0912657fac462901603a181f2b5807e1fccd", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn visit_node_helper(&mut self, id: hir::HirId) {\n         let tcx = self.terms_cx.tcx;\n-        let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = tcx.hir().local_def_id(id);\n         self.build_constraints_for_item(def_id);\n     }\n "}, {"sha": "51fb5465d1e5922a842c9f0448a454d87cde0b8f", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n \n         let solutions = &self.solutions;\n         self.terms_cx.inferred_starts.iter().map(|(&id, &InferredIndex(start))| {\n-            let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+            let def_id = tcx.hir().local_def_id(id);\n             let generics = tcx.generics_of(def_id);\n             let count = generics.count();\n "}, {"sha": "7af7c79bb3c0d7f300f0403ab4b28b980a39fc2c", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -103,7 +103,7 @@ fn lang_items(tcx: TyCtxt<'_>) -> Vec<(hir::HirId, Vec<ty::Variance>)> {\n impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n     fn add_inferreds_for_item(&mut self, id: hir::HirId) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id_from_hir_id(id);\n+        let def_id = tcx.hir().local_def_id(id);\n         let count = tcx.generics_of(def_id).count();\n \n         if count == 0 {"}, {"sha": "9f6266b316f3a69dc43b8b3581286b206f72e090", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -13,7 +13,7 @@ struct VarianceTest<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_variance\"\n         // attribute and report an error with various results if found."}, {"sha": "b6d749e1a40690eb0c85a2e3e36bdde75dbad6b3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -281,14 +281,14 @@ impl Clean<ExternalCrate> for CrateNum {\n                     hir::ItemKind::Mod(_) => {\n                         as_primitive(Res::Def(\n                             DefKind::Mod,\n-                            cx.tcx.hir().local_def_id_from_hir_id(id.id),\n+                            cx.tcx.hir().local_def_id(id.id),\n                         ))\n                     }\n                     hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                     if item.vis.node.is_pub() => {\n                         as_primitive(path.res).map(|(_, prim, attrs)| {\n                             // Pretend the primitive is local.\n-                            (cx.tcx.hir().local_def_id_from_hir_id(id.id), prim, attrs)\n+                            (cx.tcx.hir().local_def_id(id.id), prim, attrs)\n                         })\n                     }\n                     _ => None\n@@ -325,13 +325,13 @@ impl Clean<ExternalCrate> for CrateNum {\n                     hir::ItemKind::Mod(_) => {\n                         as_keyword(Res::Def(\n                             DefKind::Mod,\n-                            cx.tcx.hir().local_def_id_from_hir_id(id.id),\n+                            cx.tcx.hir().local_def_id(id.id),\n                         ))\n                     }\n                     hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                     if item.vis.node.is_pub() => {\n                         as_keyword(path.res).map(|(_, prim, attrs)| {\n-                            (cx.tcx.hir().local_def_id_from_hir_id(id.id), prim, attrs)\n+                            (cx.tcx.hir().local_def_id(id.id), prim, attrs)\n                         })\n                     }\n                     _ => None\n@@ -1588,15 +1588,15 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n             }\n             hir::GenericParamKind::Type { ref default, synthetic } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Type {\n-                    did: cx.tcx.hir().local_def_id_from_hir_id(self.hir_id),\n+                    did: cx.tcx.hir().local_def_id(self.hir_id),\n                     bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),\n                     synthetic: synthetic,\n                 })\n             }\n             hir::GenericParamKind::Const { ref ty } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Const {\n-                    did: cx.tcx.hir().local_def_id_from_hir_id(self.hir_id),\n+                    did: cx.tcx.hir().local_def_id(self.hir_id),\n                     ty: ty.clean(cx),\n                 })\n             }\n@@ -1926,7 +1926,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             (self.generics.clean(cx), (self.decl, self.body).clean(cx))\n         });\n \n-        let did = cx.tcx.hir().local_def_id_from_hir_id(self.id);\n+        let did = cx.tcx.hir().local_def_id(self.id);\n         let constness = if cx.tcx.is_min_const_fn(did) {\n             hir::Constness::Const\n         } else {\n@@ -2136,7 +2136,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: attrs,\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -2166,7 +2166,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs,\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -2229,7 +2229,7 @@ impl Clean<Item> for hir::TraitItem {\n                 AssocTypeItem(bounds.clean(cx), default.clean(cx))\n             }\n         };\n-        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -2262,7 +2262,7 @@ impl Clean<Item> for hir::ImplItem {\n                 generics: Generics::default(),\n             }, true),\n         };\n-        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             source: self.span.clean(cx),\n@@ -2757,7 +2757,7 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n-                let def_id = cx.tcx.hir().local_def_id_from_hir_id(length.hir_id);\n+                let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n                 let cid = GlobalId {\n@@ -2829,15 +2829,15 @@ impl Clean<Type> for hir::Ty {\n                                     if let Some(lt) = lifetime.cloned() {\n                                         if !lt.is_elided() {\n                                             let lt_def_id =\n-                                                cx.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                                                cx.tcx.hir().local_def_id(param.hir_id);\n                                             lt_substs.insert(lt_def_id, lt.clean(cx));\n                                         }\n                                     }\n                                     indices.lifetimes += 1;\n                                 }\n                                 hir::GenericParamKind::Type { ref default, .. } => {\n                                     let ty_param_def_id =\n-                                        cx.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                                        cx.tcx.hir().local_def_id(param.hir_id);\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n@@ -2861,7 +2861,7 @@ impl Clean<Type> for hir::Ty {\n                                 }\n                                 hir::GenericParamKind::Const { .. } => {\n                                     let const_param_def_id =\n-                                        cx.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+                                        cx.tcx.hir().local_def_id(param.hir_id);\n                                     let mut j = 0;\n                                     let const_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n@@ -3159,7 +3159,7 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n \n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n \n         Item {\n             name: Some(self.ident.name).clean(cx),\n@@ -3240,7 +3240,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3260,7 +3260,7 @@ impl Clean<Item> for doctree::Union<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3307,7 +3307,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3334,7 +3334,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             visibility: None,\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n             }),\n@@ -3635,7 +3635,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3659,7 +3659,7 @@ impl Clean<Item> for doctree::Existential<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3710,7 +3710,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3735,7 +3735,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3822,7 +3822,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -4053,7 +4053,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -4269,7 +4269,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             visibility: Some(Public),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: ProcMacroItem(ProcMacro {\n                 kind: self.kind,\n                 helpers: self.helpers.clean(cx),"}, {"sha": "c391baabee06beea47fa93edee55fc929da285f4", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -363,7 +363,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             // to the map from defid -> hirid\n             let access_levels = AccessLevels {\n                 map: access_levels.map.iter()\n-                                    .map(|(&k, &v)| (tcx.hir().local_def_id_from_hir_id(k), v))\n+                                    .map(|(&k, &v)| (tcx.hir().local_def_id(k), v))\n                                     .collect()\n             };\n "}, {"sha": "a2a6b1efe820c21ec3f0fd5a8ee7575ab46ea947", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -118,7 +118,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     for &trait_did in cx.all_traits.iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n-            let impl_did = cx.tcx.hir().local_def_id_from_hir_id(impl_node);\n+            let impl_did = cx.tcx.hir().local_def_id(impl_node);\n             inline::build_impl(cx, impl_did, &mut new_items);\n         }\n     }"}, {"sha": "3561233bff1d3c659d4f4ea30df2ed83196ce31b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7e1f22a9da3f31c117d0def02c5ea8e23a096/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=37d7e1f22a9da3f31c117d0def02c5ea8e23a096", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let ident = renamed.unwrap_or(item.ident);\n \n         if item.vis.node.is_pub() {\n-            let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let def_id = self.cx.tcx.hir().local_def_id(item.hir_id);\n             self.store_path(def_id);\n         }\n \n@@ -389,7 +389,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             _ if self.inlining && !item.vis.node.is_pub() => {}\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::ExternCrate(orig_name) => {\n-                let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                let def_id = self.cx.tcx.hir().local_def_id(item.hir_id);\n                 om.extern_crates.push(ExternCrate {\n                     cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id)\n                                 .unwrap_or(LOCAL_CRATE),\n@@ -618,7 +618,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         Macro {\n \n-            def_id: self.cx.tcx.hir().local_def_id_from_hir_id(def.hir_id),\n+            def_id: self.cx.tcx.hir().local_def_id(def.hir_id),\n             attrs: &def.attrs,\n             name: renamed.unwrap_or(def.name),\n             whence: def.span,"}]}