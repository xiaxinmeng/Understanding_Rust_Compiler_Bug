{"sha": "3f70236965d3c6f03c12f890532f0683248fac2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzAyMzY5NjVkM2M2ZjAzYzEyZjg5MDUzMmYwNjgzMjQ4ZmFjMmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-28T15:30:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-28T15:30:19Z"}, "message": "Merge #2927\n\n2927: Publicize debug printing of CrateDefMap r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0634949f8e070b4d6c58c49c40a98894db84674c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0634949f8e070b4d6c58c49c40a98894db84674c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f70236965d3c6f03c12f890532f0683248fac2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMFOLCRBK7hj4Ov3rIwAAdHIIAFMfBVdcda7NCxOLa+uB0VDw\n0bIXjDwjVx99qAx6tQ83KS9XWyOXtoG8RNwmG8+7Kwv++v9y25gNvlld2sxq5d/t\nZCUOsAoypULkEjBv9U/Le2STIziHzrkrbLuRfd+2DCTQQe2/TaEYGsX9ujhTjWLb\nG24SfvbDdjnYunapKCJaLSDbunwEc9MmviCxnGkkjTGrn/tbXVxaKPpy6GP6aK1F\n/upVL4TGGvbVIRiS/xxwaZ68tBxOEGeXGUqFnneF1XTIwafaQwDEhkA8PP96oXKn\nutSZeo5I8pGjSeU9b2247pmQ5XEWm8m7quws9BdzIznIZaarw5LR8FqyPltgsQM=\n=t1HE\n-----END PGP SIGNATURE-----\n", "payload": "tree 0634949f8e070b4d6c58c49c40a98894db84674c\nparent 2ddfc4ed5b4f867de0424e62da3d869dad18026b\nparent 4b9e5d5dd9e4e477fdff9051056fd2be4bf4b538\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580225419 +0000\ncommitter GitHub <noreply@github.com> 1580225419 +0000\n\nMerge #2927\n\n2927: Publicize debug printing of CrateDefMap r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f70236965d3c6f03c12f890532f0683248fac2f", "html_url": "https://github.com/rust-lang/rust/commit/3f70236965d3c6f03c12f890532f0683248fac2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f70236965d3c6f03c12f890532f0683248fac2f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddfc4ed5b4f867de0424e62da3d869dad18026b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddfc4ed5b4f867de0424e62da3d869dad18026b", "html_url": "https://github.com/rust-lang/rust/commit/2ddfc4ed5b4f867de0424e62da3d869dad18026b"}, {"sha": "4b9e5d5dd9e4e477fdff9051056fd2be4bf4b538", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9e5d5dd9e4e477fdff9051056fd2be4bf4b538", "html_url": "https://github.com/rust-lang/rust/commit/4b9e5d5dd9e4e477fdff9051056fd2be4bf4b538"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "852304dd0c6f197dcd57d57620702fb23f760578", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3f70236965d3c6f03c12f890532f0683248fac2f/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f70236965d3c6f03c12f890532f0683248fac2f/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=3f70236965d3c6f03c12f890532f0683248fac2f", "patch": "@@ -229,6 +229,46 @@ impl CrateDefMap {\n             self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path, shadow);\n         (res.resolved_def, res.segment_index)\n     }\n+\n+    // FIXME: this can use some more human-readable format (ideally, an IR\n+    // even), as this should be a great debugging aid.\n+    pub fn dump(&self) -> String {\n+        let mut buf = String::new();\n+        go(&mut buf, self, \"\\ncrate\", self.root);\n+        return buf.trim().to_string();\n+\n+        fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: LocalModuleId) {\n+            *buf += path;\n+            *buf += \"\\n\";\n+\n+            let mut entries: Vec<_> = map.modules[module].scope.resolutions().collect();\n+            entries.sort_by_key(|(name, _)| name.clone());\n+\n+            for (name, def) in entries {\n+                *buf += &format!(\"{}:\", name);\n+\n+                if def.types.is_some() {\n+                    *buf += \" t\";\n+                }\n+                if def.values.is_some() {\n+                    *buf += \" v\";\n+                }\n+                if def.macros.is_some() {\n+                    *buf += \" m\";\n+                }\n+                if def.is_none() {\n+                    *buf += \" _\";\n+                }\n+\n+                *buf += \"\\n\";\n+            }\n+\n+            for (name, child) in map.modules[module].children.iter() {\n+                let path = path.to_string() + &format!(\"::{}\", name);\n+                go(buf, map, &path, *child);\n+            }\n+        }\n+    }\n }\n \n impl ModuleData {"}, {"sha": "82f0f835c8038b6a6bedae0fb34e8882370eba50", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3f70236965d3c6f03c12f890532f0683248fac2f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f70236965d3c6f03c12f890532f0683248fac2f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=3f70236965d3c6f03c12f890532f0683248fac2f", "patch": "@@ -10,11 +10,10 @@ use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, SourceDatabase};\n use test_utils::covers;\n \n-use crate::{db::DefDatabase, nameres::*, test_db::TestDB, LocalModuleId};\n+use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n \n fn def_map(fixture: &str) -> String {\n-    let dm = compute_crate_def_map(fixture);\n-    render_crate_def_map(&dm)\n+    compute_crate_def_map(fixture).dump()\n }\n \n fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n@@ -23,44 +22,6 @@ fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n     db.crate_def_map(krate)\n }\n \n-fn render_crate_def_map(map: &CrateDefMap) -> String {\n-    let mut buf = String::new();\n-    go(&mut buf, map, \"\\ncrate\", map.root);\n-    return buf.trim().to_string();\n-\n-    fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: LocalModuleId) {\n-        *buf += path;\n-        *buf += \"\\n\";\n-\n-        let mut entries: Vec<_> = map.modules[module].scope.resolutions().collect();\n-        entries.sort_by_key(|(name, _)| name.clone());\n-\n-        for (name, def) in entries {\n-            *buf += &format!(\"{}:\", name);\n-\n-            if def.types.is_some() {\n-                *buf += \" t\";\n-            }\n-            if def.values.is_some() {\n-                *buf += \" v\";\n-            }\n-            if def.macros.is_some() {\n-                *buf += \" m\";\n-            }\n-            if def.is_none() {\n-                *buf += \" _\";\n-            }\n-\n-            *buf += \"\\n\";\n-        }\n-\n-        for (name, child) in map.modules[module].children.iter() {\n-            let path = path.to_string() + &format!(\"::{}\", name);\n-            go(buf, map, &path, *child);\n-        }\n-    }\n-}\n-\n #[test]\n fn crate_def_map_smoke_test() {\n     let map = def_map("}]}