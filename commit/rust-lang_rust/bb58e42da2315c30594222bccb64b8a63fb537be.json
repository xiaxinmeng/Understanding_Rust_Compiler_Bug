{"sha": "bb58e42da2315c30594222bccb64b8a63fb537be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNThlNDJkYTIzMTVjMzA1OTQyMjJiY2NiNjRiOGE2M2ZiNTM3YmU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-24T01:16:43Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T11:37:25Z"}, "message": "Tell the user about stacked borrow debugging flags", "tree": {"sha": "d94c21f63f482b1450f8461ec307e721d6803a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94c21f63f482b1450f8461ec307e721d6803a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb58e42da2315c30594222bccb64b8a63fb537be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb58e42da2315c30594222bccb64b8a63fb537be", "html_url": "https://github.com/rust-lang/rust/commit/bb58e42da2315c30594222bccb64b8a63fb537be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb58e42da2315c30594222bccb64b8a63fb537be/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d6efdf32f346c45f58897b2f7fff38a476cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d6efdf32f346c45f58897b2f7fff38a476cfbe", "html_url": "https://github.com/rust-lang/rust/commit/96d6efdf32f346c45f58897b2f7fff38a476cfbe"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "77295e8dd53648cc248bad797a016284cd56dc73", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bb58e42da2315c30594222bccb64b8a63fb537be/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58e42da2315c30594222bccb64b8a63fb537be/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=bb58e42da2315c30594222bccb64b8a63fb537be", "patch": "@@ -4,6 +4,7 @@\n use std::cell::RefCell;\n use std::collections::{HashMap, HashSet};\n use std::fmt;\n+use std::fmt::Write;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n \n@@ -278,10 +279,13 @@ impl<'tcx> Stack {\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {\n-                    throw_ub!(UbExperimental(format!(\n-                        \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n-                        tag, item\n-                    )));\n+                    return Err(err_ub_experimental(\n+                        tag,\n+                        format!(\n+                            \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n+                            tag, item\n+                        ),\n+                    ));\n                 } else {\n                     throw_ub!(UbExperimental(format!(\n                         \"deallocating while item is protected: {:?}\",\n@@ -300,10 +304,10 @@ impl<'tcx> Stack {\n \n         // Step 1: Find granting item.\n         let granting_idx = self.find_granting(access, tag).ok_or_else(|| {\n-            err_ub!(UbExperimental(format!(\n-                \"no item granting {} to tag {:?} found in borrow stack\",\n-                access, tag,\n-            )))\n+            err_ub_experimental(\n+                tag,\n+                format!(\"no item granting {} to tag {:?} found in borrow stack.\", access, tag),\n+            )\n         })?;\n \n         // Step 2: Remove incompatible items above them.  Make sure we do not remove protected\n@@ -344,10 +348,11 @@ impl<'tcx> Stack {\n     fn dealloc(&mut self, tag: Tag, global: &GlobalState) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n         self.find_granting(AccessKind::Write, tag).ok_or_else(|| {\n-            err_ub!(UbExperimental(format!(\n+            err_ub_experimental(\n+                tag,format!(\n                 \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n                 tag,\n-            )))\n+            ))\n         })?;\n \n         // Step 2: Remove all items.  Also checks for protectors.\n@@ -369,9 +374,14 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx = self.find_granting(access, derived_from)\n-            .ok_or_else(|| err_ub!(UbExperimental(format!(\n-                \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\", new.perm, derived_from,\n-            ))))?;\n+            .ok_or_else(||\n+            err_ub_experimental(\n+                derived_from,\n+                format!(\n+                    \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\",\n+                    new.perm, derived_from,\n+                ),\n+            ))?;\n \n         // Compute where to put the new item.\n         // Either way, we ensure that we insert the new item in a way such that between\n@@ -638,3 +648,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n }\n+\n+fn err_ub_experimental(tag: Tag, mut msg: String) -> InterpErrorInfo<'static> {\n+    if let Tag::Tagged(id) = tag {\n+        // FIXME: do not add this message when the flag is already set\n+        write!(msg, \" Rerun with `-Zmiri-track-pointer-tag={}` for more information\", id).unwrap();\n+    }\n+    err_ub!(UbExperimental(msg)).into()\n+}"}]}