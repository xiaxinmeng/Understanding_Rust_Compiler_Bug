{"sha": "4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmM2FiNDk4NmVjOTZkOWM5M2YzNGRjNTNkMGE0YTEyNzkyODg0NTE=", "commit": {"author": {"name": "Colin Wallace", "email": "colin@mooooo.ooo", "date": "2018-07-24T05:00:51Z"}, "committer": {"name": "Colin Wallace", "email": "colin@mooooo.ooo", "date": "2018-07-24T05:00:51Z"}, "message": "libstd: Prefer `Option::map`/etc over `match` where applicable", "tree": {"sha": "84562f083ddc0648dd85547308e6ece0ff56bed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84562f083ddc0648dd85547308e6ece0ff56bed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "html_url": "https://github.com/rust-lang/rust/commit/4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/comments", "author": {"login": "Wallacoloo", "id": 1210751, "node_id": "MDQ6VXNlcjEyMTA3NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1210751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wallacoloo", "html_url": "https://github.com/Wallacoloo", "followers_url": "https://api.github.com/users/Wallacoloo/followers", "following_url": "https://api.github.com/users/Wallacoloo/following{/other_user}", "gists_url": "https://api.github.com/users/Wallacoloo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wallacoloo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wallacoloo/subscriptions", "organizations_url": "https://api.github.com/users/Wallacoloo/orgs", "repos_url": "https://api.github.com/users/Wallacoloo/repos", "events_url": "https://api.github.com/users/Wallacoloo/events{/privacy}", "received_events_url": "https://api.github.com/users/Wallacoloo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Wallacoloo", "id": 1210751, "node_id": "MDQ6VXNlcjEyMTA3NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1210751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wallacoloo", "html_url": "https://github.com/Wallacoloo", "followers_url": "https://api.github.com/users/Wallacoloo/followers", "following_url": "https://api.github.com/users/Wallacoloo/following{/other_user}", "gists_url": "https://api.github.com/users/Wallacoloo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wallacoloo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wallacoloo/subscriptions", "organizations_url": "https://api.github.com/users/Wallacoloo/orgs", "repos_url": "https://api.github.com/users/Wallacoloo/repos", "events_url": "https://api.github.com/users/Wallacoloo/events{/privacy}", "received_events_url": "https://api.github.com/users/Wallacoloo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dbbd81f7ed83943b870407ef44aecf6664e7679", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbbd81f7ed83943b870407ef44aecf6664e7679", "html_url": "https://github.com/rust-lang/rust/commit/8dbbd81f7ed83943b870407ef44aecf6664e7679"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "008c5da171ffc663e68a1afe06701b71b40b3f23", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "patch": "@@ -53,10 +53,7 @@ impl<'a> Parser<'a> {\n         F: FnOnce(&mut Parser) -> Option<T>,\n     {\n         self.read_atomically(move |p| {\n-            match cb(p) {\n-                Some(x) => if p.is_eof() {Some(x)} else {None},\n-                None => None,\n-            }\n+            cb(p).filter(|_| p.is_eof())\n         })\n     }\n "}, {"sha": "688a7e99f10edf0b7cb57fc136122d2e2a016c50", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "patch": "@@ -1065,10 +1065,7 @@ impl<'a> Iterator for Ancestors<'a> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let next = self.next;\n-        self.next = match next {\n-            Some(path) => path.parent(),\n-            None => None,\n-        };\n+        self.next = next.and_then(Path::parent);\n         next\n     }\n }"}, {"sha": "2db47bd59475e5feb57b96d1a3ddbfa74b59071b", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3ab4986ec96d9c93f34dc53d0a4a1279288451/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=4f3ab4986ec96d9c93f34dc53d0a4a1279288451", "patch": "@@ -156,16 +156,15 @@ pub fn log_enabled() -> Option<PrintFormat> {\n         _ => return Some(PrintFormat::Full),\n     }\n \n-    let val = match env::var_os(\"RUST_BACKTRACE\") {\n-        Some(x) => if &x == \"0\" {\n+    let val = env::var_os(\"RUST_BACKTRACE\").and_then(|x|\n+        if &x == \"0\" {\n             None\n         } else if &x == \"full\" {\n             Some(PrintFormat::Full)\n         } else {\n             Some(PrintFormat::Short)\n-        },\n-        None => None,\n-    };\n+        }\n+    );\n     ENABLED.store(match val {\n         Some(v) => v as isize,\n         None => 1,"}]}