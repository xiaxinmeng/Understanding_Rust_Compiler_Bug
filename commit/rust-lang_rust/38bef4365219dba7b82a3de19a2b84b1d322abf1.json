{"sha": "38bef4365219dba7b82a3de19a2b84b1d322abf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmVmNDM2NTIxOWRiYTdiODJhM2RlMTlhMmI4NGIxZDMyMmFiZjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-16T21:34:18Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-30T21:26:35Z"}, "message": "privacy: Cleanup check_field", "tree": {"sha": "6936c248dd1d57a362d667235ccf01039ee88a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6936c248dd1d57a362d667235ccf01039ee88a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bef4365219dba7b82a3de19a2b84b1d322abf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bef4365219dba7b82a3de19a2b84b1d322abf1", "html_url": "https://github.com/rust-lang/rust/commit/38bef4365219dba7b82a3de19a2b84b1d322abf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bef4365219dba7b82a3de19a2b84b1d322abf1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b048deb732b31d6768876074f7bc9d0e036645", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b048deb732b31d6768876074f7bc9d0e036645", "html_url": "https://github.com/rust-lang/rust/commit/48b048deb732b31d6768876074f7bc9d0e036645"}], "stats": {"total": 81, "additions": 26, "deletions": 55}, "files": [{"sha": "d4b309fb039c1a256087fc57c81d6f27ef30dc1c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/38bef4365219dba7b82a3de19a2b84b1d322abf1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bef4365219dba7b82a3de19a2b84b1d322abf1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=38bef4365219dba7b82a3de19a2b84b1d322abf1", "patch": "@@ -27,8 +27,6 @@\n extern crate rustc;\n extern crate rustc_front;\n \n-use self::FieldName::*;\n-\n use std::cmp;\n use std::mem::replace;\n \n@@ -384,11 +382,6 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     in_foreign: bool,\n }\n \n-enum FieldName {\n-    UnnamedField(usize), // index\n-    NamedField(ast::Name),\n-}\n-\n impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     fn item_is_visible(&self, did: DefId) -> bool {\n         let visibility = match self.tcx.map.as_local_node_id(did) {\n@@ -407,30 +400,12 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     }\n \n     // Checks that a field is in scope.\n-    fn check_field(&mut self,\n-                   span: Span,\n-                   def: ty::AdtDef<'tcx>,\n-                   v: ty::VariantDef<'tcx>,\n-                   name: FieldName) {\n-        let field = match name {\n-            NamedField(f_name) => v.field_named(f_name),\n-            UnnamedField(idx) => &v.fields[idx]\n-        };\n-        if field.vis == hir::Public || self.private_accessible(def.did) {\n-            return;\n+    fn check_field(&mut self, span: Span, def: ty::AdtDef<'tcx>, field: ty::FieldDef<'tcx>) {\n+        if def.adt_kind() == ty::AdtKind::Struct &&\n+                field.vis != hir::Public && !self.private_accessible(def.did) {\n+            span_err!(self.tcx.sess, span, E0451, \"field `{}` of struct `{}` is private\",\n+                      field.name, self.tcx.item_path_str(def.did));\n         }\n-\n-        let struct_desc = match def.adt_kind() {\n-            ty::AdtKind::Struct =>\n-                format!(\"struct `{}`\", self.tcx.item_path_str(def.did)),\n-            // struct variant fields have inherited visibility\n-            ty::AdtKind::Enum => return\n-        };\n-        let msg = match name {\n-            NamedField(name) => format!(\"field `{}` of {} is private\", name, struct_desc),\n-            UnnamedField(idx) => format!(\"field #{} of {} is private\", idx, struct_desc),\n-        };\n-        span_err!(self.tcx.sess, span, E0451, \"{}\", msg);\n     }\n \n     // Checks that a method is in scope.\n@@ -476,7 +451,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 // Rather than computing the set of unmentioned fields\n                 // (i.e. `all_fields - fields`), just check them all.\n                 for field in &variant.fields {\n-                    self.check_field(expr.span, adt, variant, NamedField(field.name));\n+                    self.check_field(expr.span, adt, field);\n                 }\n             }\n             hir::ExprPath(..) => {\n@@ -518,8 +493,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 let def = self.tcx.def_map.borrow().get(&pattern.id).unwrap().full_def();\n                 let variant = adt.variant_of_def(def);\n                 for field in fields {\n-                    self.check_field(pattern.span, adt, variant,\n-                                     NamedField(field.node.name));\n+                    self.check_field(pattern.span, adt, variant.field_named(field.node.name));\n                 }\n             }\n \n@@ -532,10 +506,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                             if let PatKind::Wild = field.node {\n                                 continue\n                             }\n-                            self.check_field(field.span,\n-                                             def,\n-                                             def.struct_variant(),\n-                                             UnnamedField(i));\n+                            self.check_field(field.span, def, &def.struct_variant().fields[i]);\n                         }\n                     }\n                     ty::TyEnum(..) => {"}, {"sha": "9d6ae187cd381f0aa2f9d9c5257d6b0d93772475", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/38bef4365219dba7b82a3de19a2b84b1d322abf1/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bef4365219dba7b82a3de19a2b84b1d322abf1/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=38bef4365219dba7b82a3de19a2b84b1d322abf1", "patch": "@@ -63,25 +63,25 @@ fn this_crate() {\n     let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field #0 of struct `a::A` is private\n+    let a::A(()) = a; //~ ERROR: field `0` of struct `a::A` is private\n     let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field #0 of struct `a::A` is private\n+    match a { a::A(()) => {} } //~ ERROR: field `0` of struct `a::A` is private\n     match a { a::A(_) => {} }\n \n     let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field #0 of struct `a::B` is private\n+    let a::B(_b) = b; //~ ERROR: field `0` of struct `a::B` is private\n     match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field #0 of struct `a::B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #0 of struct `a::B` is private\n+    match b { a::B(_b) => {} } //~ ERROR: field `0` of struct `a::B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field `0` of struct `a::B` is private\n \n     let a::C(_, _) = c;\n     let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n-    let a::C(_a, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n+    let a::C(_, _b) = c; //~ ERROR: field `1` of struct `a::C` is private\n+    let a::C(_a, _b) = c; //~ ERROR: field `1` of struct `a::C` is private\n     match c { a::C(_, _) => {} }\n     match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR: field `1` of struct `a::C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR: field `1` of struct `a::C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #0 of struct `other::A` is private\n+    let other::A(()) = a; //~ ERROR: field `0` of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #0 of struct `other::A` is private\n+    //~^ ERROR: field `0` of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #0 of struct `other::B` is private\n+    let other::B(_b) = b; //~ ERROR: field `0` of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #0 of struct `other::B` is private\n+    //~^ ERROR: field `0` of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #0 of struct `other::B` is private\n+    //~^ ERROR: field `0` of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field `1` of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field `1` of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #1 of struct `other::C` is private\n+    //~^ ERROR: field `1` of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #1 of struct `other::C` is private\n+    //~^ ERROR: field `1` of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}]}