{"sha": "bb1d925dab36372c6bd1fb5671bb68ce938ff009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMWQ5MjVkYWIzNjM3MmM2YmQxZmI1NjcxYmI2OGNlOTM4ZmYwMDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-28T15:43:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-28T15:43:11Z"}, "message": "Merge #8212\n\n8212: Basic support macro 2.0 r=jonas-schievink a=edwin0cheng\n\nTurn out it is quite straight forward :)\r\n\r\nr @jonas-schievink \r\n\r\n![m2](https://user-images.githubusercontent.com/11014119/112712565-6eb99380-8f0b-11eb-88de-5d7f974dfe6d.png)\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "ad32fbab8caf6563961b1366c726d8323fb303f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad32fbab8caf6563961b1366c726d8323fb303f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1d925dab36372c6bd1fb5671bb68ce938ff009", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYKQPCRBK7hj4Ov3rIwAAdHIIADjUi70h3WWwSxr0bHeDlcLT\ndq+Ra/rKN/l+GPTUlQfTr2ez33YuJb0cw2oBfRImG4DU9ZoTnN4SJHNQFOgwcUuS\nvUPsoWqlmd+1XXewSTQJA+rsy0qhF4FRqRXdKn78BoyjQrgP/SKzDzIMUJc1ocw1\nlv+ZXogePtfJI9IfUHikKb3IiJuMEQPMXze2BuHyPhXohECkP55Xw1Ba7yEO/YmB\nT4ehtxw5WBf2fEJkRvQnibWQkhBV8VX4Gr5hyJlTZ20QDeNtpiWuM/bRGA5nZppx\ndk93FOvQrP3bkPSUTWXWsQVQ/NXbKJh6Br/yzgCmJprQzMKRCkUC2/dZGrHT4ng=\n=T5un\n-----END PGP SIGNATURE-----\n", "payload": "tree ad32fbab8caf6563961b1366c726d8323fb303f5\nparent ce6bb5ccca48b177f6cd12b42b4c52f3e1b44e0c\nparent 772987911851d6480ec8c905c0cac1e2f881152c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616946191 +0000\ncommitter GitHub <noreply@github.com> 1616946191 +0000\n\nMerge #8212\n\n8212: Basic support macro 2.0 r=jonas-schievink a=edwin0cheng\n\nTurn out it is quite straight forward :)\r\n\r\nr @jonas-schievink \r\n\r\n![m2](https://user-images.githubusercontent.com/11014119/112712565-6eb99380-8f0b-11eb-88de-5d7f974dfe6d.png)\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1d925dab36372c6bd1fb5671bb68ce938ff009", "html_url": "https://github.com/rust-lang/rust/commit/bb1d925dab36372c6bd1fb5671bb68ce938ff009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1d925dab36372c6bd1fb5671bb68ce938ff009/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6bb5ccca48b177f6cd12b42b4c52f3e1b44e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6bb5ccca48b177f6cd12b42b4c52f3e1b44e0c", "html_url": "https://github.com/rust-lang/rust/commit/ce6bb5ccca48b177f6cd12b42b4c52f3e1b44e0c"}, {"sha": "772987911851d6480ec8c905c0cac1e2f881152c", "url": "https://api.github.com/repos/rust-lang/rust/commits/772987911851d6480ec8c905c0cac1e2f881152c", "html_url": "https://github.com/rust-lang/rust/commit/772987911851d6480ec8c905c0cac1e2f881152c"}], "stats": {"total": 383, "additions": 287, "deletions": 96}, "files": [{"sha": "d3caeef4ee754c4e6097a3db9c7b0140dc27c711", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -768,7 +768,7 @@ to_def_impls![\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n     (crate::ConstParam, ast::ConstParam, const_param_to_def),\n-    (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n+    (crate::MacroDef, ast::Macro, macro_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),"}, {"sha": "9a5a2255fa8412a46313bd14ba418dd307ebe5ed", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -191,10 +191,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     // FIXME: use DynMap as well?\n-    pub(super) fn macro_rules_to_def(\n-        &mut self,\n-        src: InFile<ast::MacroRules>,\n-    ) -> Option<MacroDefId> {\n+    pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = AstId::new(src.file_id, file_ast_id.upcast());\n         let kind = MacroDefKind::Declarative(ast_id);"}, {"sha": "d58135ec98ced336c294c660776506f38d721946", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 63, "deletions": 39, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -25,8 +25,8 @@ use crate::{\n     derive_macro_as_call_id,\n     item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n-        self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, MacroRules, Mod, ModItem, ModKind,\n-        StructDefKind,\n+        self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, MacroDef, MacroRules, Mod, ModItem,\n+        ModKind, StructDefKind,\n     },\n     macro_call_as_call_id,\n     nameres::{\n@@ -395,7 +395,7 @@ impl DefCollector<'_> {\n     /// macro_rules! foo { () => {} }\n     /// use foo as bar;\n     /// ```\n-    fn define_macro(\n+    fn define_macro_rules(\n         &mut self,\n         module_id: LocalModuleId,\n         name: Name,\n@@ -430,6 +430,21 @@ impl DefCollector<'_> {\n         self.def_map.modules[module_id].scope.define_legacy_macro(name, mac);\n     }\n \n+    /// Define a macro 2.0 macro\n+    ///\n+    /// The scoped of macro 2.0 macro is equal to normal function\n+    fn define_macro_def(\n+        &mut self,\n+        module_id: LocalModuleId,\n+        name: Name,\n+        macro_: MacroDefId,\n+        vis: &RawVisibility,\n+    ) {\n+        let vis =\n+            self.def_map.resolve_visibility(self.db, module_id, vis).unwrap_or(Visibility::Public);\n+        self.update(module_id, &[(Some(name), PerNs::macros(macro_, vis))], vis, ImportType::Named);\n+    }\n+\n     /// Define a proc macro\n     ///\n     /// A proc macro is similar to normal macro scope, but it would not visible in legacy textual scoped.\n@@ -1067,40 +1082,7 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac]),\n                 ModItem::MacroRules(id) => self.collect_macro_rules(id),\n-                ModItem::MacroDef(id) => {\n-                    let mac = &self.item_tree[id];\n-                    let ast_id = InFile::new(self.file_id, mac.ast_id.upcast());\n-\n-                    // \"Macro 2.0\" is not currently supported by rust-analyzer, but libcore uses it\n-                    // to define builtin macros, so we support at least that part.\n-                    let attrs = self.item_tree.attrs(\n-                        self.def_collector.db,\n-                        krate,\n-                        ModItem::from(id).into(),\n-                    );\n-                    if attrs.by_key(\"rustc_builtin_macro\").exists() {\n-                        let krate = self.def_collector.def_map.krate;\n-                        let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n-                            .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n-                        if let Some(macro_id) = macro_id {\n-                            let vis = self\n-                                .def_collector\n-                                .def_map\n-                                .resolve_visibility(\n-                                    self.def_collector.db,\n-                                    self.module_id,\n-                                    &self.item_tree[mac.visibility],\n-                                )\n-                                .unwrap_or(Visibility::Public);\n-                            self.def_collector.update(\n-                                self.module_id,\n-                                &[(Some(mac.name.clone()), PerNs::macros(macro_id, vis))],\n-                                vis,\n-                                ImportType::Named,\n-                            );\n-                        }\n-                    }\n-                }\n+                ModItem::MacroDef(id) => self.collect_macro_def(id),\n                 ModItem::Impl(imp) => {\n                     let module = self.def_collector.def_map.module_id(self.module_id);\n                     let impl_id =\n@@ -1420,7 +1402,7 @@ impl ModCollector<'_, '_> {\n         if attrs.by_key(\"rustc_builtin_macro\").exists() {\n             let krate = self.def_collector.def_map.krate;\n             if let Some(macro_id) = find_builtin_macro(&mac.name, krate, ast_id) {\n-                self.def_collector.define_macro(\n+                self.def_collector.define_macro_rules(\n                     self.module_id,\n                     mac.name.clone(),\n                     macro_id,\n@@ -1436,7 +1418,49 @@ impl ModCollector<'_, '_> {\n             kind: MacroDefKind::Declarative(ast_id),\n             local_inner: is_local_inner,\n         };\n-        self.def_collector.define_macro(self.module_id, mac.name.clone(), macro_id, is_export);\n+        self.def_collector.define_macro_rules(\n+            self.module_id,\n+            mac.name.clone(),\n+            macro_id,\n+            is_export,\n+        );\n+    }\n+\n+    fn collect_macro_def(&mut self, id: FileItemTreeId<MacroDef>) {\n+        let krate = self.def_collector.def_map.krate;\n+        let mac = &self.item_tree[id];\n+        let ast_id = InFile::new(self.file_id, mac.ast_id.upcast());\n+\n+        // Case 1: bulitin macros\n+        let attrs = self.item_tree.attrs(self.def_collector.db, krate, ModItem::from(id).into());\n+        if attrs.by_key(\"rustc_builtin_macro\").exists() {\n+            let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n+                .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n+\n+            if let Some(macro_id) = macro_id {\n+                self.def_collector.define_macro_def(\n+                    self.module_id,\n+                    mac.name.clone(),\n+                    macro_id,\n+                    &self.item_tree[mac.visibility],\n+                );\n+            }\n+            return;\n+        }\n+\n+        // Case 2: normal `macro`\n+        let macro_id = MacroDefId {\n+            krate: self.def_collector.def_map.krate,\n+            kind: MacroDefKind::Declarative(ast_id),\n+            local_inner: false,\n+        };\n+\n+        self.def_collector.define_macro_def(\n+            self.module_id,\n+            mac.name.clone(),\n+            macro_id,\n+            &self.item_tree[mac.visibility],\n+        );\n     }\n \n     fn collect_macro_call(&mut self, mac: &MacroCall) {"}, {"sha": "c37f915ab4db7e88570220ff8ff195af114f67d1", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -837,3 +837,21 @@ fn collects_derive_helpers() {\n         _ => unreachable!(),\n     }\n }\n+\n+#[test]\n+fn resolve_macro_def() {\n+    check(\n+        r#\"\n+//- /lib.rs\n+pub macro structs($($i:ident),*) {\n+    $(struct $i { field: u32 } )*\n+}\n+structs!(Foo);\n+\"#,\n+        expect![[r#\"\n+            crate\n+            Foo: t\n+            structs: m\n+        \"#]],\n+    );\n+}"}, {"sha": "c0ab70b607ce2b96d19ab4ca2db452e321f41377", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n-use mbe::{ExpandError, ExpandResult, MacroRules};\n+use mbe::{ExpandError, ExpandResult, MacroDef, MacroRules};\n use parser::FragmentKind;\n use syntax::{\n     algo::diff,\n@@ -28,6 +28,7 @@ const TOKEN_LIMIT: usize = 524288;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     MacroRules(mbe::MacroRules),\n+    MacroDef(mbe::MacroDef),\n     Builtin(BuiltinFnLikeExpander),\n     BuiltinDerive(BuiltinDeriveExpander),\n     ProcMacro(ProcMacroExpander),\n@@ -42,6 +43,7 @@ impl TokenExpander {\n     ) -> mbe::ExpandResult<tt::Subtree> {\n         match self {\n             TokenExpander::MacroRules(it) => it.expand(tt),\n+            TokenExpander::MacroDef(it) => it.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n@@ -57,6 +59,7 @@ impl TokenExpander {\n     pub fn map_id_down(&self, id: tt::TokenId) -> tt::TokenId {\n         match self {\n             TokenExpander::MacroRules(it) => it.map_id_down(id),\n+            TokenExpander::MacroDef(it) => it.map_id_down(id),\n             TokenExpander::Builtin(..) => id,\n             TokenExpander::BuiltinDerive(..) => id,\n             TokenExpander::ProcMacro(..) => id,\n@@ -66,6 +69,7 @@ impl TokenExpander {\n     pub fn map_id_up(&self, id: tt::TokenId) -> (tt::TokenId, mbe::Origin) {\n         match self {\n             TokenExpander::MacroRules(it) => it.map_id_up(id),\n+            TokenExpander::MacroDef(it) => it.map_id_up(id),\n             TokenExpander::Builtin(..) => (id, mbe::Origin::Call),\n             TokenExpander::BuiltinDerive(..) => (id, mbe::Origin::Call),\n             TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n@@ -136,26 +140,40 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n \n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n-        MacroDefKind::Declarative(ast_id) => {\n-            let macro_rules = match ast_id.to_node(db) {\n-                syntax::ast::Macro::MacroRules(mac) => mac,\n-                syntax::ast::Macro::MacroDef(_) => return None,\n-            };\n-            let arg = macro_rules.token_tree()?;\n-            let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-                log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n-                None\n-            })?;\n-            let rules = match MacroRules::parse(&tt) {\n-                Ok(it) => it,\n-                Err(err) => {\n-                    let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n-                    log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n-                    return None;\n-                }\n-            };\n-            Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n-        }\n+        MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n+            syntax::ast::Macro::MacroRules(macro_rules) => {\n+                let arg = macro_rules.token_tree()?;\n+                let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n+                    log::warn!(\"fail on macro_rules to token tree: {:#?}\", arg);\n+                    None\n+                })?;\n+                let rules = match MacroRules::parse(&tt) {\n+                    Ok(it) => it,\n+                    Err(err) => {\n+                        let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n+                        log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n+                        return None;\n+                    }\n+                };\n+                Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n+            }\n+            syntax::ast::Macro::MacroDef(macro_def) => {\n+                let arg = macro_def.body()?;\n+                let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n+                    log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n+                    None\n+                })?;\n+                let rules = match MacroDef::parse(&tt) {\n+                    Ok(it) => it,\n+                    Err(err) => {\n+                        let name = macro_def.name().map(|n| n.to_string()).unwrap_or_default();\n+                        log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n+                        return None;\n+                    }\n+                };\n+                Some(Arc::new((TokenExpander::MacroDef(rules), tmap)))\n+            }\n+        },\n         MacroDefKind::BuiltIn(expander, _) => {\n             Some(Arc::new((TokenExpander::Builtin(expander), mbe::TokenMap::default())))\n         }"}, {"sha": "779725629a0003a47377ca709a292103229b743b", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -148,7 +148,7 @@ fn make_hygiene_info(\n     let def_offset = loc.def.ast_id().left().and_then(|id| {\n         let def_tt = match id.to_node(db) {\n             ast::Macro::MacroRules(mac) => mac.token_tree()?.syntax().text_range().start(),\n-            ast::Macro::MacroDef(_) => return None,\n+            ast::Macro::MacroDef(mac) => mac.body()?.syntax().text_range().start(),\n         };\n         Some(InFile::new(id.file_id, def_tt))\n     });"}, {"sha": "3e332ee47ea1c54fd4913f6e38154182c8b3ddc4", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -151,7 +151,7 @@ impl HirFileId {\n                 let def = loc.def.ast_id().left().and_then(|id| {\n                     let def_tt = match id.to_node(db) {\n                         ast::Macro::MacroRules(mac) => mac.token_tree()?,\n-                        ast::Macro::MacroDef(_) => return None,\n+                        ast::Macro::MacroDef(mac) => mac.body()?,\n                     };\n                     Some(InFile::new(id.file_id, def_tt))\n                 });"}, {"sha": "3eb01dbd0fa3b3be4868f78126aab9aeb40565b1", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -135,7 +135,88 @@ fn infer_path_qualified_macros_expanded() {\n }\n \n #[test]\n-fn expr_macro_expanded_in_various_places() {\n+fn expr_macro_def_expanded_in_various_places() {\n+    check_infer(\n+        r#\"\n+        macro spam() {\n+            1isize\n+        }\n+\n+        fn spam() {\n+            spam!();\n+            (spam!());\n+            spam!().spam(spam!());\n+            for _ in spam!() {}\n+            || spam!();\n+            while spam!() {}\n+            break spam!();\n+            return spam!();\n+            match spam!() {\n+                _ if spam!() => spam!(),\n+            }\n+            spam!()(spam!());\n+            Spam { spam: spam!() };\n+            spam!()[spam!()];\n+            await spam!();\n+            spam!() as usize;\n+            &spam!();\n+            -spam!();\n+            spam!()..spam!();\n+            spam!() + spam!();\n+        }\n+        \"#,\n+        expect![[r#\"\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n+            39..442 '{     ...!(); }': ()\n+            73..94 'spam!(...am!())': {unknown}\n+            100..119 'for _ ...!() {}': ()\n+            104..105 '_': {unknown}\n+            117..119 '{}': ()\n+            124..134 '|| spam!()': || -> isize\n+            140..156 'while ...!() {}': ()\n+            154..156 '{}': ()\n+            161..174 'break spam!()': !\n+            180..194 'return spam!()': !\n+            200..254 'match ...     }': isize\n+            224..225 '_': isize\n+            259..275 'spam!(...am!())': {unknown}\n+            281..303 'Spam {...m!() }': {unknown}\n+            309..325 'spam!(...am!()]': {unknown}\n+            350..366 'spam!(... usize': usize\n+            372..380 '&spam!()': &isize\n+            386..394 '-spam!()': isize\n+            400..416 'spam!(...pam!()': {unknown}\n+            422..439 'spam!(...pam!()': isize\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn expr_macro_rules_expanded_in_various_places() {\n     check_infer(\n         r#\"\n         macro_rules! spam {"}, {"sha": "9301cdeffee4712277b15a24e9340e44c4478098", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -161,7 +161,7 @@ pub(crate) fn doc_owner_to_def(\n             ast::Variant(it) => sema.to_def(&it)?.into(),\n             ast::Trait(it) => sema.to_def(&it)?.into(),\n             ast::Impl(it) => return sema.to_def(&it).map(Definition::SelfType),\n-            ast::MacroRules(it) => return sema.to_def(&it).map(Definition::Macro),\n+            ast::Macro(it) => return sema.to_def(&it).map(Definition::Macro),\n             ast::TupleField(it) => return sema.to_def(&it).map(Definition::Field),\n             ast::RecordField(it) => return sema.to_def(&it).map(Definition::Field),\n             _ => return None,"}, {"sha": "2c898eae859f38139f673f0ef1162c482882598d", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -172,7 +172,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 };\n                 Some(node)\n             },\n-            ast::MacroRules(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n+            ast::Macro(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n             _ => None,\n         }\n     }"}, {"sha": "3c951c507397705961b88cf7e73197b79e125cba", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -1234,6 +1234,37 @@ fn f() { fo$0o!(); }\n         )\n     }\n \n+    #[test]\n+    fn test_hover_macro2_invocation() {\n+        check(\n+            r#\"\n+/// foo bar\n+///\n+/// foo bar baz\n+macro foo() {}\n+\n+fn f() { fo$0o!(); }\n+\"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                macro foo\n+                ```\n+\n+                ---\n+\n+                foo bar\n+\n+                foo bar baz\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn test_hover_tuple_field() {\n         check("}, {"sha": "05fa8fc1344d3e3601bba05f7ed195cd3126ff29", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -66,6 +66,7 @@ fn find_ancestors(item: SyntaxElement, direction: Direction, range: TextRange) -\n         SyntaxKind::STATIC,\n         SyntaxKind::CONST,\n         SyntaxKind::MACRO_RULES,\n+        SyntaxKind::MACRO_DEF,\n     ];\n \n     let ancestor = once(root.clone())"}, {"sha": "67a10766b27be81c0cec66f82e63255c8d6050dd", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -5,7 +5,7 @@ mod injector;\n \n mod highlight;\n mod format;\n-mod macro_rules;\n+mod macro_;\n mod inject;\n \n mod html;\n@@ -24,8 +24,8 @@ use syntax::{\n \n use crate::{\n     syntax_highlighting::{\n-        format::highlight_format_string, highlights::Highlights,\n-        macro_rules::MacroRulesHighlighter, tags::Highlight,\n+        format::highlight_format_string, highlights::Highlights, macro_::MacroHighlighter,\n+        tags::Highlight,\n     },\n     FileId, HlMod, HlTag,\n };\n@@ -93,8 +93,8 @@ fn traverse(\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n-    let mut current_macro_rules: Option<ast::MacroRules> = None;\n-    let mut macro_rules_highlighter = MacroRulesHighlighter::default();\n+    let mut current_macro: Option<ast::Macro> = None;\n+    let mut macro_highlighter = MacroHighlighter::default();\n     let mut inside_attribute = false;\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n@@ -129,16 +129,16 @@ fn traverse(\n             _ => (),\n         }\n \n-        match event.clone().map(|it| it.into_node().and_then(ast::MacroRules::cast)) {\n+        match event.clone().map(|it| it.into_node().and_then(ast::Macro::cast)) {\n             WalkEvent::Enter(Some(mac)) => {\n-                macro_rules_highlighter.init();\n-                current_macro_rules = Some(mac);\n+                macro_highlighter.init();\n+                current_macro = Some(mac);\n                 continue;\n             }\n             WalkEvent::Leave(Some(mac)) => {\n-                assert_eq!(current_macro_rules, Some(mac));\n-                current_macro_rules = None;\n-                macro_rules_highlighter = MacroRulesHighlighter::default();\n+                assert_eq!(current_macro, Some(mac));\n+                current_macro = None;\n+                macro_highlighter = MacroHighlighter::default();\n             }\n             _ => (),\n         }\n@@ -164,9 +164,9 @@ fn traverse(\n \n         let range = element.text_range();\n \n-        if current_macro_rules.is_some() {\n+        if current_macro.is_some() {\n             if let Some(tok) = element.as_token() {\n-                macro_rules_highlighter.advance(tok);\n+                macro_highlighter.advance(tok);\n             }\n         }\n \n@@ -200,7 +200,7 @@ fn traverse(\n             }\n         }\n \n-        if let Some(_) = macro_rules_highlighter.highlight(element_to_highlight.clone()) {\n+        if let Some(_) = macro_highlighter.highlight(element_to_highlight.clone()) {\n             continue;\n         }\n "}, {"sha": "963c3fb594175df299be5b50cc8ce845581c85ca", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -109,8 +109,7 @@ fn doc_attributes<'node>(\n             ast::Impl(it)        => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::SelfType(def))),\n             ast::RecordField(it) => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Field(def))),\n             ast::TupleField(it)  => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Field(def))),\n-            ast::MacroRules(it)  => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Macro(def))),\n-            // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Macro(it)       => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Macro(def))),\n             // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             _ => return None\n         }"}, {"sha": "8197042942ed207b15182b7c6f874ec5ce62cdb4", "filename": "crates/ide/src/syntax_highlighting/macro_.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -4,18 +4,18 @@ use syntax::{SyntaxElement, SyntaxKind, SyntaxToken, TextRange, T};\n use crate::{HlRange, HlTag};\n \n #[derive(Default)]\n-pub(super) struct MacroRulesHighlighter {\n+pub(super) struct MacroHighlighter {\n     state: Option<MacroMatcherParseState>,\n }\n \n-impl MacroRulesHighlighter {\n+impl MacroHighlighter {\n     pub(super) fn init(&mut self) {\n         self.state = Some(MacroMatcherParseState::default());\n     }\n \n     pub(super) fn advance(&mut self, token: &SyntaxToken) {\n         if let Some(state) = self.state.as_mut() {\n-            update_macro_rules_state(state, token);\n+            update_macro_state(state, token);\n         }\n     }\n \n@@ -74,9 +74,9 @@ impl RuleState {\n     }\n }\n \n-fn update_macro_rules_state(state: &mut MacroMatcherParseState, tok: &SyntaxToken) {\n+fn update_macro_state(state: &mut MacroMatcherParseState, tok: &SyntaxToken) {\n     if !state.in_invoc_body {\n-        if tok.kind() == T!['{'] {\n+        if tok.kind() == T!['{'] || tok.kind() == T!['('] {\n             state.in_invoc_body = true;\n         }\n         return;", "previous_filename": "crates/ide/src/syntax_highlighting/macro_rules.rs"}, {"sha": "1eaa7b75bce8575eb6851388e63ea5dcdec808e9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -41,7 +41,7 @@\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment\">// Needed for function consuming vs normal</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"brace\">{</span>\n@@ -158,6 +158,16 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">with_args</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"punctuation\">$</span>i\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">without_args</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>i\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "369ae0972b4d141eb1a0b34998f1c87cfb401645", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -129,6 +129,16 @@ macro_rules! keyword_frag {\n     ($type:ty) => ($type)\n }\n \n+macro with_args($i:ident) {\n+    $i\n+}\n+\n+macro without_args {\n+    ($i:ident) => {\n+        $i\n+    }\n+}\n+\n // comment\n fn main() {\n     println!(\"Hello, {}!\", 92);"}, {"sha": "0d9808d2439aa35f859defd784533f40a9877413", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -227,7 +227,7 @@ impl NameClass {\n                     let def: hir::TypeAlias = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n                 },\n-                ast::MacroRules(it) => {\n+                ast::Macro(it) => {\n                     let def = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::Macro(def)))\n                 },"}, {"sha": "da427d6868897b3aaa6c14adf36cf10e8932f301", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -438,7 +438,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::TypeAlias(it) => decl(it),\n             ast::Const(it) => decl(it),\n             ast::Static(it) => decl(it),\n-            ast::MacroRules(it) => decl(it),\n+            ast::Macro(it) => decl(it),\n             ast::Union(it) => decl(it),\n             _ => None,\n         }\n@@ -458,6 +458,7 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n             CONST => FileSymbolKind::Const,\n             STATIC => FileSymbolKind::Static,\n             MACRO_RULES => FileSymbolKind::Macro,\n+            MACRO_DEF => FileSymbolKind::Macro,\n             UNION => FileSymbolKind::Union,\n             kind => unreachable!(\"{:?}\", kind),\n         },"}, {"sha": "ae98dbd268951076f425017c6603b0b74512407b", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -40,6 +40,7 @@ fn text_of_first_token(node: &SyntaxNode) -> TokenText {\n     TokenText(first_token)\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone)]\n pub enum Macro {\n     MacroRules(ast::MacroRules),\n     MacroDef(ast::MacroDef),"}, {"sha": "1934204eabb27d8a710021245d647a30cd8a867d", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1d925dab36372c6bd1fb5671bb68ce938ff009/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=bb1d925dab36372c6bd1fb5671bb68ce938ff009", "patch": "@@ -147,8 +147,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | MACRO_RULES | CONST | TYPE_ALIAS | STRUCT | UNION | ENUM | VARIANT | FN\n-        | TRAIT | MODULE | RECORD_FIELD | STATIC | USE => {\n+        MACRO_CALL | MACRO_RULES | MACRO_DEF | CONST | TYPE_ALIAS | STRUCT | UNION | ENUM\n+        | VARIANT | FN | TRAIT | MODULE | RECORD_FIELD | STATIC | USE => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}]}