{"sha": "cdfff9db35d037c51dfd5c2bac2174f651294adb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZmZmOWRiMzVkMDM3YzUxZGZkNWMyYmFjMjE3NGY2NTEyOTRhZGI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-01-06T05:56:30Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:09:07Z"}, "message": "rustc: implement arithmetic overflow checking\n\nAdds overflow checking to integer addition, multiplication, and subtraction\nwhen `-Z force-overflow-checks` is true, or if `--cfg ndebug` is not passed to\nthe compiler. On overflow, it panics with `arithmetic operation overflowed`.\nAlso adds `overflowing_add`, `overflowing_sub`, and `overflowing_mul`\nintrinsics for doing unchecked arithmetic.\n\n[breaking-change]", "tree": {"sha": "92ffb0978f93db6b8a74531b1f3abef2ab599e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ffb0978f93db6b8a74531b1f3abef2ab599e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfff9db35d037c51dfd5c2bac2174f651294adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfff9db35d037c51dfd5c2bac2174f651294adb", "html_url": "https://github.com/rust-lang/rust/commit/cdfff9db35d037c51dfd5c2bac2174f651294adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfff9db35d037c51dfd5c2bac2174f651294adb/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ccc7af1eb9091de7f24edf9eacb3da119d5b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ccc7af1eb9091de7f24edf9eacb3da119d5b27", "html_url": "https://github.com/rust-lang/rust/commit/00ccc7af1eb9091de7f24edf9eacb3da119d5b27"}], "stats": {"total": 210, "additions": 203, "deletions": 7}, "files": [{"sha": "ed129136091250bec2ed7fcca252c3f66d9851be", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -546,3 +546,14 @@ extern \"rust-intrinsic\" {\n     /// Performs checked `u64` multiplication.\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n+\n+// SNAP 880fb89\n+#[cfg(not(stage0))]\n+extern \"rust-intrinsic\" {\n+    /// Returns (a + b) mod 2^N, where N is the width of N in bits.\n+    pub fn overflowing_add<T>(a: T, b: T) -> T;\n+    /// Returns (a - b) mod 2^N, where N is the width of N in bits.\n+    pub fn overflowing_sub<T>(a: T, b: T) -> T;\n+    /// Returns (a * b) mod 2^N, where N is the width of N in bits.\n+    pub fn overflowing_mul<T>(a: T, b: T) -> T;\n+}"}, {"sha": "53c1f4e4a4089ec4f3d2220df976b354aaf7e42d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -259,7 +259,6 @@ pub enum CrateType {\n     CrateTypeStaticlib,\n }\n \n-\n #[derive(Clone)]\n pub enum Passes {\n     SomePasses(Vec<String>),\n@@ -585,6 +584,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"Adds unstable command line options to rustc interface\"),\n     print_enum_sizes: bool = (false, parse_bool,\n           \"Print the size of enums and their variants\"),\n+    force_overflow_checks: Option<bool> = (None, parse_opt_bool,\n+          \"Force overflow checks on or off\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "149dad476545ecad565b9c1f8530f2608dc827ad", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -3102,6 +3102,12 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n     let ty::CrateAnalysis { ty_cx: tcx, export_map, reachable, name, .. } = analysis;\n     let krate = tcx.map.krate();\n \n+    let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n+        v\n+    } else {\n+        !attr::contains_name(&krate.config, \"ndebug\")\n+    };\n+\n     // Before we touch LLVM, make sure that multithreading is enabled.\n     unsafe {\n         use std::sync::{Once, ONCE_INIT};\n@@ -3129,7 +3135,8 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n                                              export_map,\n                                              Sha256::new(),\n                                              link_meta.clone(),\n-                                             reachable);\n+                                             reachable,\n+                                             check_overflow);\n \n     {\n         let ccx = shared_ccx.get_ccx(0);"}, {"sha": "9777398bddcc324fad4b0a840afe6970cb0e0278", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -69,6 +69,7 @@ pub struct SharedCrateContext<'tcx> {\n     symbol_hasher: RefCell<Sha256>,\n     tcx: ty::ctxt<'tcx>,\n     stats: Stats,\n+    check_overflow: bool,\n \n     available_monomorphizations: RefCell<FnvHashSet<String>>,\n     available_drop_glues: RefCell<FnvHashMap<Ty<'tcx>, String>>,\n@@ -245,7 +246,8 @@ impl<'tcx> SharedCrateContext<'tcx> {\n                export_map: ExportMap,\n                symbol_hasher: Sha256,\n                link_meta: LinkMeta,\n-               reachable: NodeSet)\n+               reachable: NodeSet,\n+               check_overflow: bool)\n                -> SharedCrateContext<'tcx> {\n         let (metadata_llcx, metadata_llmod) = unsafe {\n             create_context_and_module(&tcx.sess, \"metadata\")\n@@ -274,6 +276,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n                 llvm_insns: RefCell::new(FnvHashMap()),\n                 fn_stats: RefCell::new(Vec::new()),\n             },\n+            check_overflow: check_overflow,\n             available_monomorphizations: RefCell::new(FnvHashSet()),\n             available_drop_glues: RefCell::new(FnvHashMap()),\n         };\n@@ -743,6 +746,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n             &format!(\"the type `{}` is too big for the current architecture\",\n                     obj.repr(self.tcx())))\n     }\n+\n+    pub fn check_overflow(&self) -> bool {\n+        self.shared.check_overflow\n+    }\n }\n \n fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef> {"}, {"sha": "60455119d58720963a4253e1eea762161cd09b55", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 121, "deletions": 4, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -82,6 +82,7 @@ use trans::machine::{llsize_of, llsize_of_alloc};\n use trans::type_::Type;\n \n use syntax::{ast, ast_util, codemap};\n+use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::parse::token;\n use std::iter::repeat;\n@@ -1709,8 +1710,8 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     };\n     let is_float = ty::type_is_fp(intype);\n     let is_signed = ty::type_is_signed(intype);\n-\n     let rhs = base::cast_shift_expr_rhs(bcx, op, lhs, rhs);\n+    let info = expr_info(binop_expr);\n \n     let binop_debug_loc = binop_expr.debug_loc();\n \n@@ -1720,21 +1721,30 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         if is_float {\n             FAdd(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n-            Add(bcx, lhs, rhs, binop_debug_loc)\n+            let (newbcx, res) = with_overflow_check(\n+                bcx, OverflowOp::Add, info, lhs_t, lhs, rhs, binop_debug_loc);\n+            bcx = newbcx;\n+            res\n         }\n       }\n       ast::BiSub => {\n         if is_float {\n             FSub(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n-            Sub(bcx, lhs, rhs, binop_debug_loc)\n+            let (newbcx, res) = with_overflow_check(\n+                bcx, OverflowOp::Sub, info, lhs_t, lhs, rhs, binop_debug_loc);\n+            bcx = newbcx;\n+            res\n         }\n       }\n       ast::BiMul => {\n         if is_float {\n             FMul(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n-            Mul(bcx, lhs, rhs, binop_debug_loc)\n+            let (newbcx, res) = with_overflow_check(\n+                bcx, OverflowOp::Mul, info, lhs_t, lhs, rhs, binop_debug_loc);\n+            bcx = newbcx;\n+            res\n         }\n       }\n       ast::BiDiv => {\n@@ -2314,3 +2324,110 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         DatumBlock { bcx: bcx, datum: datum }\n     }\n }\n+\n+enum OverflowOp {\n+    Add,\n+    Sub,\n+    Mul,\n+}\n+\n+impl OverflowOp {\n+    fn to_intrinsic_name(&self, tcx: &ty::ctxt, ty: Ty) -> &'static str {\n+        use syntax::ast::IntTy::*;\n+        use syntax::ast::UintTy::*;\n+        use middle::ty::{ty_int, ty_uint};\n+\n+        let new_sty = match ty.sty {\n+            ty_int(TyIs(_)) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"32\" => ty_int(TyI32),\n+                \"64\" => ty_int(TyI64),\n+                _ => panic!(\"unsupported target word size\")\n+            },\n+            ty_uint(TyUs(_)) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"32\" => ty_uint(TyU32),\n+                \"64\" => ty_uint(TyU64),\n+                _ => panic!(\"unsupported target word size\")\n+            },\n+            ref t @ ty_uint(_) | ref t @ ty_int(_) => t.clone(),\n+            _ => panic!(\"tried to get overflow intrinsic for non-int type\")\n+        };\n+\n+        match *self {\n+            OverflowOp::Add => match new_sty {\n+                ty_int(TyI8) => \"llvm.sadd.with.overflow.i8\",\n+                ty_int(TyI16) => \"llvm.sadd.with.overflow.i16\",\n+                ty_int(TyI32) => \"llvm.sadd.with.overflow.i32\",\n+                ty_int(TyI64) => \"llvm.sadd.with.overflow.i64\",\n+\n+                ty_uint(TyU8) => \"llvm.uadd.with.overflow.i8\",\n+                ty_uint(TyU16) => \"llvm.uadd.with.overflow.i16\",\n+                ty_uint(TyU32) => \"llvm.uadd.with.overflow.i32\",\n+                ty_uint(TyU64) => \"llvm.uadd.with.overflow.i64\",\n+\n+                _ => unreachable!(),\n+            },\n+            OverflowOp::Sub => match new_sty {\n+                ty_int(TyI8) => \"llvm.ssub.with.overflow.i8\",\n+                ty_int(TyI16) => \"llvm.ssub.with.overflow.i16\",\n+                ty_int(TyI32) => \"llvm.ssub.with.overflow.i32\",\n+                ty_int(TyI64) => \"llvm.ssub.with.overflow.i64\",\n+\n+                ty_uint(TyU8) => \"llvm.usub.with.overflow.i8\",\n+                ty_uint(TyU16) => \"llvm.usub.with.overflow.i16\",\n+                ty_uint(TyU32) => \"llvm.usub.with.overflow.i32\",\n+                ty_uint(TyU64) => \"llvm.usub.with.overflow.i64\",\n+\n+                _ => unreachable!(),\n+            },\n+            OverflowOp::Mul => match new_sty {\n+                ty_int(TyI8) => \"llvm.smul.with.overflow.i8\",\n+                ty_int(TyI16) => \"llvm.smul.with.overflow.i16\",\n+                ty_int(TyI32) => \"llvm.smul.with.overflow.i32\",\n+                ty_int(TyI64) => \"llvm.smul.with.overflow.i64\",\n+\n+                ty_uint(TyU8) => \"llvm.umul.with.overflow.i8\",\n+                ty_uint(TyU16) => \"llvm.umul.with.overflow.i16\",\n+                ty_uint(TyU32) => \"llvm.umul.with.overflow.i32\",\n+                ty_uint(TyU64) => \"llvm.umul.with.overflow.i64\",\n+\n+                _ => unreachable!(),\n+            },\n+        }\n+    }\n+}\n+\n+\n+fn with_overflow_check<'a, 'b>(bcx: Block<'a, 'b>, oop: OverflowOp, info: NodeIdAndSpan,\n+                               lhs_t: Ty, lhs: ValueRef, rhs: ValueRef, binop_debug_loc: DebugLoc)\n+                               -> (Block<'a, 'b>, ValueRef) {\n+    if bcx.unreachable.get() { return (bcx, _Undef(lhs)); }\n+    if bcx.ccx().check_overflow() {\n+        let name = oop.to_intrinsic_name(bcx.tcx(), lhs_t);\n+        let llfn = bcx.ccx().get_intrinsic(&name);\n+\n+        let val = Call(bcx, llfn, &[lhs, rhs], None, binop_debug_loc);\n+        let result = ExtractValue(bcx, val, 0); // iN operation result\n+        let overflow = ExtractValue(bcx, val, 1); // i1 \"did it overflow?\"\n+\n+        let cond = ICmp(bcx, llvm::IntEQ, overflow, C_integral(Type::i1(bcx.ccx()), 1, false),\n+                        binop_debug_loc);\n+\n+        let expect = bcx.ccx().get_intrinsic(&\"llvm.expect.i1\");\n+        Call(bcx, expect, &[cond, C_integral(Type::i1(bcx.ccx()), 0, false)],\n+             None, binop_debug_loc);\n+\n+        let bcx =\n+            base::with_cond(bcx, cond, |bcx|\n+                controlflow::trans_fail(bcx, info,\n+                    InternedString::new(\"arithmetic operation overflowed\")));\n+\n+        (bcx, result)\n+    } else {\n+        let res = match oop {\n+            OverflowOp::Add => Add(bcx, lhs, rhs, binop_debug_loc),\n+            OverflowOp::Sub => Sub(bcx, lhs, rhs, binop_debug_loc),\n+            OverflowOp::Mul => Mul(bcx, lhs, rhs, binop_debug_loc),\n+        };\n+        (bcx, res)\n+    }\n+}"}, {"sha": "916492195c2583fdc6105f15167f90be33a8ac10", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -660,6 +660,11 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                     llargs[0],\n                                     llargs[1],\n                                     call_debug_location),\n+\n+        (_, \"overflowing_add\") => Add(bcx, llargs[0], llargs[1], call_debug_location),\n+        (_, \"overflowing_sub\") => Sub(bcx, llargs[0], llargs[1], call_debug_location),\n+        (_, \"overflowing_mul\") => Mul(bcx, llargs[0], llargs[1], call_debug_location),\n+\n         (_, \"return_address\") => {\n             if !fcx.caller_expects_out_pointer {\n                 tcx.sess.span_err(call_info.span,"}, {"sha": "273aadc383c6934bf8e87923a700f4499f1b7deb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -5491,6 +5491,9 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                 (0, vec!(tcx.types.u64, tcx.types.u64),\n                 ty::mk_tup(tcx, vec!(tcx.types.u64, tcx.types.bool))),\n \n+            \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n+                (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n+\n             \"return_address\" => (0, vec![], ty::mk_imm_ptr(tcx, tcx.types.u8)),\n \n             \"assume\" => (0, vec![tcx.types.bool], ty::mk_nil(tcx)),"}, {"sha": "c3e41110d20da2065799bee1a7058d70e7d95848", "filename": "src/test/run-fail/overflowing-add.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'arithmatic operation overflowed'\n+\n+fn main() {\n+    let x = 200u8 + 200u8 + 200u8;\n+}"}, {"sha": "bf7a9d0758651ee9524e4e6bb87b54dc0994ca5f", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'arithmatic operation overflowed'\n+\n+fn main() {\n+    let x = 200u8 + 4u8;\n+}"}, {"sha": "961b36d322cdbf8dfca8dfb33f9e0124de859482", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff9db35d037c51dfd5c2bac2174f651294adb/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=cdfff9db35d037c51dfd5c2bac2174f651294adb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'arithmatic operation overflowed'\n+\n+fn main() {\n+    let x = 42u8 - 43u8;\n+}"}]}