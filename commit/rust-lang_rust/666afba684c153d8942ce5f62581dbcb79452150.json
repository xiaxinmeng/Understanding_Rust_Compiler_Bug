{"sha": "666afba684c153d8942ce5f62581dbcb79452150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NmFmYmE2ODRjMTUzZDg5NDJjZTVmNjI1ODFkYmNiNzk0NTIxNTA=", "commit": {"author": {"name": "Olivier FAURE", "email": "couteaubleu@gmail.com", "date": "2020-10-24T20:02:52Z"}, "committer": {"name": "Olivier FAURE", "email": "couteaubleu@gmail.com", "date": "2020-10-25T11:20:25Z"}, "message": "Update description for error E0308\n\nAs per #76462", "tree": {"sha": "d7f24e260e930f9fd65dea634e7cfd9226da71af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f24e260e930f9fd65dea634e7cfd9226da71af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666afba684c153d8942ce5f62581dbcb79452150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666afba684c153d8942ce5f62581dbcb79452150", "html_url": "https://github.com/rust-lang/rust/commit/666afba684c153d8942ce5f62581dbcb79452150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666afba684c153d8942ce5f62581dbcb79452150/comments", "author": {"login": "PoignardAzur", "id": 8573618, "node_id": "MDQ6VXNlcjg1NzM2MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/8573618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PoignardAzur", "html_url": "https://github.com/PoignardAzur", "followers_url": "https://api.github.com/users/PoignardAzur/followers", "following_url": "https://api.github.com/users/PoignardAzur/following{/other_user}", "gists_url": "https://api.github.com/users/PoignardAzur/gists{/gist_id}", "starred_url": "https://api.github.com/users/PoignardAzur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PoignardAzur/subscriptions", "organizations_url": "https://api.github.com/users/PoignardAzur/orgs", "repos_url": "https://api.github.com/users/PoignardAzur/repos", "events_url": "https://api.github.com/users/PoignardAzur/events{/privacy}", "received_events_url": "https://api.github.com/users/PoignardAzur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PoignardAzur", "id": 8573618, "node_id": "MDQ6VXNlcjg1NzM2MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/8573618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PoignardAzur", "html_url": "https://github.com/PoignardAzur", "followers_url": "https://api.github.com/users/PoignardAzur/followers", "following_url": "https://api.github.com/users/PoignardAzur/following{/other_user}", "gists_url": "https://api.github.com/users/PoignardAzur/gists{/gist_id}", "starred_url": "https://api.github.com/users/PoignardAzur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PoignardAzur/subscriptions", "organizations_url": "https://api.github.com/users/PoignardAzur/orgs", "repos_url": "https://api.github.com/users/PoignardAzur/repos", "events_url": "https://api.github.com/users/PoignardAzur/events{/privacy}", "received_events_url": "https://api.github.com/users/PoignardAzur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdaeb393a16951f6fdef087193fef576e36aba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaeb393a16951f6fdef087193fef576e36aba6", "html_url": "https://github.com/rust-lang/rust/commit/9fdaeb393a16951f6fdef087193fef576e36aba6"}], "stats": {"total": 320, "additions": 200, "deletions": 120}, "files": [{"sha": "decee6309955a2aa7f43553ea857604993c190c1", "filename": "compiler/rustc_error_codes/src/error_codes/E0308.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/666afba684c153d8942ce5f62581dbcb79452150/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md", "raw_url": "https://github.com/rust-lang/rust/raw/666afba684c153d8942ce5f62581dbcb79452150/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0308.md?ref=666afba684c153d8942ce5f62581dbcb79452150", "patch": "@@ -1,18 +1,26 @@\n Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \"I am not a number!\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\"Not a number\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \"Not a bool\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \"Not a float\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration."}, {"sha": "da8849a82844f33c0521cef0be5cc66cb91595a3", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 80, "deletions": 48, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=666afba684c153d8942ce5f62581dbcb79452150", "patch": "@@ -1,81 +1,113 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "811206f9aa076a26189a3564099caa850fa63985", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 80, "deletions": 48, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=666afba684c153d8942ce5f62581dbcb79452150", "patch": "@@ -1,81 +1,113 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "93c246cb3f501273fd04fbbe743f21ad6e41a955", "filename": "src/test/ui/terminal-width/flag-json.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/666afba684c153d8942ce5f62581dbcb79452150/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr?ref=666afba684c153d8942ce5f62581dbcb79452150", "patch": "@@ -1,21 +1,29 @@\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-Erroneous code example:\n+Erroneous code examples:\n \n ```compile_fail,E0308\n-let x: i32 = \\\"I am not a number!\\\";\n-//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n-//      |             |\n-//      |    initializing expression;\n-//      |    compiler infers type `&str`\n-//      |\n-//    type `i32` assigned to variable `x`\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+plus_one(\\\"Not a number\\\");\n+//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n+\n+if \\\"Not a bool\\\" {\n+// ^^^^^^^^^^^^ expected `bool`, found `&str`\n+}\n+\n+let x: f32 = \\\"Not a float\\\";\n+//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n+//     |\n+//     expected due to this\n ```\n \n-This error occurs when the compiler is unable to infer the concrete type of a\n-variable. It can occur in several cases, the most common being a mismatch\n-between two types: the type the author explicitly assigned, and the type the\n-compiler inferred.\n+This error occurs when an expression was used in a place where the compiler\n+expected an expression of a different type. It can occur in several cases, the\n+most common being when calling a function and passing an argument which has a\n+different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":244,\"byte_end\":246,\"line_start\":7,\"line_end\":7,\"column_start\":17,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":17,\"highlight_end\":19}],\"label\":\"expected `()`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":239,\"byte_end\":241,\"line_start\":7,\"line_end\":7,\"column_start\":12,\"column_end\":14,\"is_primary\":false,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":12,\"highlight_end\":14}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"error[E0308]: mismatched types\n   --> $DIR/flag-json.rs:7:17\n    |"}]}