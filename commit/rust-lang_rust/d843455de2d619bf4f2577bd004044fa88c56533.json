{"sha": "d843455de2d619bf4f2577bd004044fa88c56533", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDM0NTVkZTJkNjE5YmY0ZjI1NzdiZDAwNDA0NGZhODhjNTY1MzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-15T21:57:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T21:57:48Z"}, "message": "Merge #2269\n\n2269: Prepare SourceAnalyzer for macros r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c0fb90f2bfa0cec5eb62e80bfe5cf7c009a3fc18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fb90f2bfa0cec5eb62e80bfe5cf7c009a3fc18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d843455de2d619bf4f2577bd004044fa88c56533", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzx9cCRBK7hj4Ov3rIwAAdHIIAGPyIRDanRjSJiNJWxAFqhTQ\n4tn/E8IWi1MesvxUP3/0XBsoCPFEz0vyAib/h3NbvUMoUOeVmAZH5gKOPxuWmx6L\nxz1SQOX0ZS/Kfzm4CxtkjJXS0TctH/ixtjswhhg5US76MJCLyE30hVo2v90heXA+\nMKt0tTWVqX+Y/bsumlZU7xPuuFkMl+MePLkA0tDvU/Q6CDRhxM74un1CUtsT6dKm\nN8R2XZtdU0cFokVqpwcBIb1ZlTulUp6BkOZ0BsKhlL0VtR8UmYP5yp3QNj0CIuLC\nxs8QL3K+sX8HKwctz8Cy9mJtQRYU+DY3yitR2T/XmGH57Ge//jyE2jpVCCFfZAg=\n=9f19\n-----END PGP SIGNATURE-----\n", "payload": "tree c0fb90f2bfa0cec5eb62e80bfe5cf7c009a3fc18\nparent 920848940ae7b79b1655ac48a9e2c1694b9e06c8\nparent 0404e647e69f758ac84c742b06dddefb01cc4ad6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573855068 +0000\ncommitter GitHub <noreply@github.com> 1573855068 +0000\n\nMerge #2269\n\n2269: Prepare SourceAnalyzer for macros r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d843455de2d619bf4f2577bd004044fa88c56533", "html_url": "https://github.com/rust-lang/rust/commit/d843455de2d619bf4f2577bd004044fa88c56533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d843455de2d619bf4f2577bd004044fa88c56533/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920848940ae7b79b1655ac48a9e2c1694b9e06c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/920848940ae7b79b1655ac48a9e2c1694b9e06c8", "html_url": "https://github.com/rust-lang/rust/commit/920848940ae7b79b1655ac48a9e2c1694b9e06c8"}, {"sha": "0404e647e69f758ac84c742b06dddefb01cc4ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0404e647e69f758ac84c742b06dddefb01cc4ad6", "html_url": "https://github.com/rust-lang/rust/commit/0404e647e69f758ac84c742b06dddefb01cc4ad6"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "540ddd0b5de89b122b41aeef8bc1086d745ea265", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d843455de2d619bf4f2577bd004044fa88c56533/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d843455de2d619bf4f2577bd004044fa88c56533/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d843455de2d619bf4f2577bd004044fa88c56533", "patch": "@@ -91,7 +91,7 @@ fn def_with_body_from_child_node(\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n     // FIXME: this doesn't handle macros at all\n-    file_id: FileId,\n+    file_id: HirFileId,\n     resolver: Resolver,\n     body_owner: Option<DefWithBody>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n@@ -141,13 +141,16 @@ impl SourceAnalyzer {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let def_with_body = def_with_body_from_child_node(db, Source::new(file_id.into(), node));\n+        let node_source = Source::new(file_id.into(), node);\n+        let def_with_body = def_with_body_from_child_node(db, node_source);\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n             let scopes = def.expr_scopes(db);\n             let scope = match offset {\n-                None => scope_for(&scopes, &source_map, file_id.into(), &node),\n-                Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),\n+                None => scope_for(&scopes, &source_map, node_source),\n+                Some(offset) => {\n+                    scope_for_offset(&scopes, &source_map, Source::new(file_id.into(), offset))\n+                }\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n@@ -156,7 +159,7 @@ impl SourceAnalyzer {\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n-                file_id,\n+                file_id: file_id.into(),\n             }\n         } else {\n             SourceAnalyzer {\n@@ -168,18 +171,18 @@ impl SourceAnalyzer {\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n-                file_id,\n+                file_id: file_id.into(),\n             }\n         }\n     }\n \n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n-        let src = Source { file_id: self.file_id.into(), ast: expr };\n+        let src = Source { file_id: self.file_id, ast: expr };\n         self.body_source_map.as_ref()?.node_expr(src)\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n-        let src = Source { file_id: self.file_id.into(), ast: pat };\n+        let src = Source { file_id: self.file_id, ast: pat };\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n@@ -287,7 +290,7 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax())?;\n+        let scope = scope_for(scopes, source_map, Source::new(self.file_id, name_ref.syntax()))?;\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n         Some(ScopeEntryWithSyntax {\n             name: entry.name().clone(),\n@@ -408,28 +411,27 @@ impl SourceAnalyzer {\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    file_id: HirFileId,\n-    node: &SyntaxNode,\n+    node: Source<&SyntaxNode>,\n ) -> Option<ScopeId> {\n-    node.ancestors()\n+    node.ast\n+        .ancestors()\n         .filter_map(ast::Expr::cast)\n-        .filter_map(|it| source_map.node_expr(Source { file_id, ast: &it }))\n+        .filter_map(|it| source_map.node_expr(Source::new(node.file_id, &it)))\n         .find_map(|it| scopes.scope_for(it))\n }\n \n fn scope_for_offset(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    file_id: HirFileId,\n-    offset: TextUnit,\n+    offset: Source<TextUnit>,\n ) -> Option<ScopeId> {\n     scopes\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n             let source = source_map.expr_syntax(*id)?;\n             // FIXME: correctly handle macro expansion\n-            if source.file_id != file_id {\n+            if source.file_id != offset.file_id {\n                 return None;\n             }\n             let syntax_node_ptr =\n@@ -438,9 +440,14 @@ fn scope_for_offset(\n         })\n         // find containing scope\n         .min_by_key(|(ptr, _scope)| {\n-            (!(ptr.range().start() <= offset && offset <= ptr.range().end()), ptr.range().len())\n+            (\n+                !(ptr.range().start() <= offset.ast && offset.ast <= ptr.range().end()),\n+                ptr.range().len(),\n+            )\n+        })\n+        .map(|(ptr, scope)| {\n+            adjust(scopes, source_map, ptr, offset.file_id, offset.ast).unwrap_or(*scope)\n         })\n-        .map(|(ptr, scope)| adjust(scopes, source_map, ptr, file_id, offset).unwrap_or(*scope))\n }\n \n // XXX: during completion, cursor might be outside of any particular"}, {"sha": "26531cb05e0e92ac2adfed1171914ca699671d5c", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d843455de2d619bf4f2577bd004044fa88c56533/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d843455de2d619bf4f2577bd004044fa88c56533/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=d843455de2d619bf4f2577bd004044fa88c56533", "patch": "@@ -223,9 +223,12 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n+/// FIXME: https://github.com/matklad/with ?\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n+    // FIXME: this stores all kind of things, not only `ast`.\n+    // There should be a better name...\n     pub ast: T,\n }\n \n@@ -234,11 +237,16 @@ impl<T> Source<T> {\n         Source { file_id, ast }\n     }\n \n+    // Similarly, naming here is stupid...\n+    pub fn with_ast<U>(&self, ast: U) -> Source<U> {\n+        Source::new(self.file_id, ast)\n+    }\n+\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source { file_id: self.file_id, ast: f(self.ast) }\n+        Source::new(self.file_id, f(self.ast))\n     }\n     pub fn as_ref(&self) -> Source<&T> {\n-        Source { file_id: self.file_id, ast: &self.ast }\n+        self.with_ast(&self.ast)\n     }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")"}]}