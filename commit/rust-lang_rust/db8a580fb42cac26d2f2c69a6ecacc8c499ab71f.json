{"sha": "db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOGE1ODBmYjQyY2FjMjZkMmYyYzY5YTZlY2FjYzhjNDk5YWI3MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-12T02:21:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-12T02:21:49Z"}, "message": "auto merge of #12027 : vadimcn/rust/compiler-rt, r=alexcrichton\n\nThis is an attempt to remove some more of Rust's dependencies on libgcc and replace it with LLVM's compiler-rt lib.  I've added compiler-rt as a submodule and changed libstd to link with it.  \r\nAs far as I could verify, after this change, the only symbols still imported by std from libgcc are the stack unwinding functions.   Other crates, however, still picked up symbols from libgcc, not from libstd, as I had hoped.  So linking definitely requires some work. \r\n\r\nI've only tested this on windows, 32-bit linux and android and fully expect it to fail on other platforms. Patches are welcome.", "tree": {"sha": "27e8b1b7929a4ed3af520c076a77904b44174345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e8b1b7929a4ed3af520c076a77904b44174345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "html_url": "https://github.com/rust-lang/rust/commit/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a908eafd49236e9b887031e3474fc5148b4e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a908eafd49236e9b887031e3474fc5148b4e82", "html_url": "https://github.com/rust-lang/rust/commit/a4a908eafd49236e9b887031e3474fc5148b4e82"}, {"sha": "b7651325eb3863c9869b7c684b1a4d9401544091", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7651325eb3863c9869b7c684b1a4d9401544091", "html_url": "https://github.com/rust-lang/rust/commit/b7651325eb3863c9869b7c684b1a4d9401544091"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "597086229b8dfc920881afcf09f925d8e7ea7ff9", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -9,3 +9,6 @@\n [submodule \"src/gyp\"]\n \tpath = src/gyp\n \turl = https://github.com/rust-lang/gyp.git\n+[submodule \"src/compiler-rt\"]\n+\tpath = src/compiler-rt\n+\turl = https://github.com/rust-lang/compiler-rt.git"}, {"sha": "1130ab53d5d246f0cd4f747e1fd4aa94a568eafc", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -355,7 +355,8 @@ endif\n # Prerequisites for using the stageN compiler to build target artifacts\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n \n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target"}, {"sha": "002db59ad387942fd6c08c4b6b837088aff46761", "filename": "mk/clean.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -54,6 +54,7 @@ clean-generic-$(2)-$(1):\n \t         $(1)/rt \\\n \t\t $(1)/test \\\n \t\t $(1)/stage* \\\n+\t\t -type f \\(           \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n@@ -62,6 +63,7 @@ clean-generic-$(2)-$(1):\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n+         \\)                   \\\n          | xargs rm -f\n \t$(Q)find $(1)\\\n          -name '*.dSYM'       \\\n@@ -96,6 +98,7 @@ clean$(1)_T_$(2)_H_$(3):\t\t\t\t\t\t       \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate))  \\\n \t    $$(foreach tool,$$(TOOLS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n+\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n "}, {"sha": "d7365a827b7a2e4a5beadbc000b939b16e4da54c", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -55,7 +55,7 @@ HOST_CRATES := syntax rustc rustdoc fourcc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n-DEPS_std := native:rustrt\n+DEPS_std := native:rustrt native:compiler-rt\n DEPS_extra := std term sync serialize getopts collections\n DEPS_green := std\n DEPS_rustuv := std native:uv native:uv_support"}, {"sha": "156a545e1adfb4ac86a84fdefbd1e7a954d753a7", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -96,6 +96,7 @@ install-target-$(1)-host-$(2):\t\t\t\t\t\t\\\n \t\t$$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate)));\\\n \t\t$$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n \t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n+\t$$(Q)$$(call INSTALL_LIB,libcompiler-rt.a)\n \n endef\n \n@@ -110,6 +111,7 @@ install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n \t    $$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n \t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n+\t$$(Q)$$(call INSTALL_LIB,libcompiler-rt.a)\n endef\n \n $(foreach target,$(CFG_TARGET), \\"}, {"sha": "ebb1f83398ecbec825ba701cc056f904058ed3d6", "filename": "mk/rt.mk", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -217,6 +217,37 @@ $$(LIBUV_DIR_$(1))/Release/libuv.a: $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) \\\n \n endif\n \n+################################################################################\n+# compiler-rt\n+################################################################################\n+\n+ifdef CFG_ENABLE_FAST_MAKE\n+COMPRT_DEPS := $(S)/.gitmodules\n+else\n+COMPRT_DEPS := $(wildcard \\\n+              $(S)src/compiler-rt/* \\\n+              $(S)src/compiler-rt/*/* \\\n+              $(S)src/compiler-rt/*/*/* \\\n+              $(S)src/compiler-rt/*/*/*/*)\n+endif\n+\n+COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n+COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n+COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n+\n+$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS)\n+\t@$$(call E, make: compiler-rt)\n+\t$$(Q)$$(MAKE) -C \"$(S)src/compiler-rt\" \\\n+\t\tProjSrcRoot=\"$(S)src/compiler-rt\" \\\n+\t\tProjObjRoot=\"$$(abspath $$(COMPRT_BUILD_DIR_$(1)))\" \\\n+\t\tCC=\"$$(CC_$(1))\" \\\n+\t\tAR=\"$$(AR_$(1))\" \\\n+\t\tRANLIB=\"$$(AR_$(1)) s\" \\\n+\t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1))\" \\\n+\t\tTargetTriple=$(1) \\\n+\t\ttriple-runtime\n+\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/runtime/libcompiler_rt.a $$(COMPRT_LIB_$(1))\n+\n endef\n \n # Instantiate template for all stages/targets"}, {"sha": "03569cb8b67c82c9f472f8f5456cada1631a10af", "filename": "mk/target.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -138,6 +138,12 @@ $$(TBIN$(1)_T_$(2)_H_$(3))/:\n $$(TLIB$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n+$$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a: \\\n+\t    $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),compiler-rt) \\\n+\t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t    $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),morestack) \\\n \t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)"}, {"sha": "c2b298dbb9c20f60ae80599f80ff93454683c286", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -262,6 +262,7 @@ tidy:\n \t\t| grep '^$(S)src/gyp' -v \\\n \t\t| grep '^$(S)src/etc' -v \\\n \t\t| grep '^$(S)src/doc' -v \\\n+\t\t| grep '^$(S)src/compiler-rt' -v \\\n \t\t| xargs $(CFG_PYTHON) $(S)src/etc/check-binaries.py\n \n endif"}, {"sha": "d4606f1818dd8dfeaa3e509cd1cbac4482c3513e", "filename": "src/compiler-rt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -0,0 +1 @@\n+Subproject commit d4606f1818dd8dfeaa3e509cd1cbac4482c3513e"}, {"sha": "72ae70565a750cf62c01e89ec8eb85563bbdbc79", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8a580fb42cac26d2f2c69a6ecacc8c499ab71f/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=db8a580fb42cac26d2f2c69a6ecacc8c499ab71f", "patch": "@@ -1005,6 +1005,7 @@ fn link_rlib(sess: Session,\n fn link_staticlib(sess: Session, obj_filename: &Path, out_filename: &Path) {\n     let mut a = link_rlib(sess, None, obj_filename, out_filename);\n     a.add_native_library(\"morestack\").unwrap();\n+    a.add_native_library(\"compiler-rt\").unwrap();\n \n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n     for &(cnum, ref path) in crates.iter() {\n@@ -1132,6 +1133,19 @@ fn link_args(sess: Session,\n         args.push(~\"-shared-libgcc\");\n     }\n \n+    if sess.targ_cfg.os == abi::OsAndroid {\n+        // Many of the symbols defined in compiler-rt are also defined in libgcc.\n+        // Android linker doesn't like that by default.\n+        args.push(~\"-Wl,--allow-multiple-definition\");\n+    }\n+\n+    // Stack growth requires statically linking a __morestack function\n+    args.push(~\"-lmorestack\");\n+    // compiler-rt contains implementations of low-level LLVM helpers\n+    // It should go before platform and user libraries, so it has first dibs\n+    // at resolving symbols that also appear in libgcc.\n+    args.push(~\"-lcompiler-rt\");\n+\n     add_local_native_libraries(&mut args, sess);\n     add_upstream_rust_crates(&mut args, sess, dylib, tmpdir);\n     add_upstream_native_libraries(&mut args, sess);\n@@ -1159,9 +1173,6 @@ fn link_args(sess: Session,\n                        ~\"-L/usr/local/lib/gcc44\"]);\n     }\n \n-    // Stack growth requires statically linking a __morestack function\n-    args.push(~\"-lmorestack\");\n-\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths"}]}