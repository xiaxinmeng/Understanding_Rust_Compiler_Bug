{"sha": "1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTZiMzE2OThhY2QxY2E4ZmUyNWExYjY5OWJlZjRhOWE2ZmViMWQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T14:21:55Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T14:21:55Z"}, "message": "Do not add imports before inner attributes", "tree": {"sha": "4f248f05afd6e1bdbfbc66d6e7d111708cacab45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f248f05afd6e1bdbfbc66d6e7d111708cacab45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "html_url": "https://github.com/rust-lang/rust/commit/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759100fb0dcb41518f2a593dae5de5bbedd07776", "url": "https://api.github.com/repos/rust-lang/rust/commits/759100fb0dcb41518f2a593dae5de5bbedd07776", "html_url": "https://github.com/rust-lang/rust/commit/759100fb0dcb41518f2a593dae5de5bbedd07776"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "4b5e37c115b849d1253dbeb266ccf9eef1752343", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "patch": "@@ -431,7 +431,13 @@ fn best_action_for_target(\n                 .find(|n| n.text_range().start() < anchor.text_range().start())\n                 .or_else(|| Some(anchor));\n \n-            ImportAction::add_new_use(anchor, false)\n+            let add_after_anchor = anchor\n+                .clone()\n+                .and_then(ast::Attr::cast)\n+                .as_ref()\n+                .map(ast::Attr::is_inner_attribute)\n+                .unwrap_or(false);\n+            ImportAction::add_new_use(anchor, add_after_anchor)\n         }\n     }\n }\n@@ -958,6 +964,28 @@ mod foo {\n \n         Debug<|>\n     }\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn inserts_imports_after_inner_attributes() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            \"\n+#![allow(dead_code)]\n+\n+fn main() {\n+    std::fmt::Debug<|>\n+}\n+    \",\n+            \"\n+#![allow(dead_code)]\n+use std::fmt::Debug;\n+\n+fn main() {\n+    Debug<|>\n }\n     \",\n         );"}, {"sha": "a297ae110ec328b30fd207d9dad4c60438dd0a81", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1596b31698acd1ca8fe25a1b699bef4a9a6feb1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=1596b31698acd1ca8fe25a1b699bef4a9a6feb1d", "patch": "@@ -71,6 +71,15 @@ impl ast::Attr {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_inner_attribute(&self) -> bool {\n+        let first_token = self.syntax().first_token();\n+        let first_token_kind = first_token.as_ref().map(SyntaxToken::kind);\n+        let second_token_kind =\n+            first_token.and_then(|token| token.next_token()).as_ref().map(SyntaxToken::kind);\n+        return first_token_kind == Some(SyntaxKind::POUND)\n+            && second_token_kind == Some(SyntaxKind::EXCL);\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}]}