{"sha": "fea51f391ed91c487dda81d50389474b768441c7", "node_id": "C_kwDOAAsO6NoAKGZlYTUxZjM5MWVkOTFjNDg3ZGRhODFkNTAzODk0NzRiNzY4NDQxYzc", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-30T01:31:02Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-07-06T19:24:53Z"}, "message": "Fix warnings", "tree": {"sha": "80eacd538e9e1b58d2bf318b553cf8aa95d6c77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80eacd538e9e1b58d2bf318b553cf8aa95d6c77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea51f391ed91c487dda81d50389474b768441c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea51f391ed91c487dda81d50389474b768441c7", "html_url": "https://github.com/rust-lang/rust/commit/fea51f391ed91c487dda81d50389474b768441c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea51f391ed91c487dda81d50389474b768441c7/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19a5ea868968ddf1ad65fee1e7a85191388aa69", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19a5ea868968ddf1ad65fee1e7a85191388aa69", "html_url": "https://github.com/rust-lang/rust/commit/d19a5ea868968ddf1ad65fee1e7a85191388aa69"}], "stats": {"total": 44, "additions": 9, "deletions": 35}, "files": [{"sha": "c9ba0ecb877a0be0da96c6704131132b56631aeb", "filename": "src/attributes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fea51f391ed91c487dda81d50389474b768441c7/src%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea51f391ed91c487dda81d50389474b768441c7/src%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattributes.rs?ref=fea51f391ed91c487dda81d50389474b768441c7", "patch": "@@ -1,4 +1,6 @@\n-use gccjit::{FnAttribute, Function};\n+#[cfg_attr(not(feature=\"master\"), allow(unused_imports))]\n+use gccjit::FnAttribute;\n+use gccjit::Function;\n use rustc_attr::InstructionSetAttr;\n use rustc_codegen_ssa::target_features::tied_target_features;\n use rustc_data_structures::fx::FxHashMap;\n@@ -72,6 +74,7 @@ fn to_gcc_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {\n /// attributes.\n pub fn from_fn_attrs<'gcc, 'tcx>(\n     cx: &CodegenCx<'gcc, 'tcx>,\n+    #[cfg_attr(not(feature=\"master\"), allow(unused_variables))]\n     func: Function<'gcc>,\n     instance: ty::Instance<'tcx>,\n ) {\n@@ -109,6 +112,7 @@ pub fn from_fn_attrs<'gcc, 'tcx>(\n     function_features.extend(&mut global_features);\n     let target_features = function_features.join(\",\");\n     if !target_features.is_empty() {\n+        #[cfg(feature=\"master\")]\n         func.add_attribute(FnAttribute::Target, &target_features);\n     }\n }"}, {"sha": "9d81a01e7a61bcb98e49195c5defdfd09a726b72", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fea51f391ed91c487dda81d50389474b768441c7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea51f391ed91c487dda81d50389474b768441c7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=fea51f391ed91c487dda81d50389474b768441c7", "patch": "@@ -100,20 +100,6 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         context.add_command_line_option(\"-mvpclmulqdq\");\n         context.add_command_line_option(\"-mavx\");\n \n-        if env::var(\"CG_GCCJIT_ENABLE_AVX512\").as_deref() == Ok(\"1\") {\n-            context.add_command_line_option(\"-mavx512f\");\n-            context.add_command_line_option(\"-mavx512vpopcntdq\");\n-            context.add_command_line_option(\"-mavx512vl\");\n-            context.add_command_line_option(\"-mavx512vnni\");\n-            context.add_command_line_option(\"-mavx512bw\");\n-            context.add_command_line_option(\"-mavx512bitalg\");\n-            context.add_command_line_option(\"-mavx512bf16\");\n-            context.add_command_line_option(\"-mavx512vbmi2\");\n-            context.add_command_line_option(\"-mavx512vbmi\");\n-            context.add_command_line_option(\"-mavx512ifma\");\n-            context.add_command_line_option(\"-mavx512cd\");\n-        }\n-\n         for arg in &tcx.sess.opts.cg.llvm_args {\n             context.add_command_line_option(arg);\n         }"}, {"sha": "f00c1b30109743f22214d712dfd160cfacf49754", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea51f391ed91c487dda81d50389474b768441c7/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea51f391ed91c487dda81d50389474b768441c7/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=fea51f391ed91c487dda81d50389474b768441c7", "patch": "@@ -287,9 +287,9 @@ pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc\n pub fn adjust_intrinsic_return_value<'a, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc, 'tcx>, mut return_value: RValue<'gcc>, func_name: &str, args: &[RValue<'gcc>], args_adjusted: bool) -> RValue<'gcc> {\n     match func_name {\n         \"__builtin_ia32_vfmaddss3_round\" | \"__builtin_ia32_vfmaddsd3_round\" => {\n-            let zero = builder.context.new_rvalue_zero(builder.int_type);\n             #[cfg(feature=\"master\")]\n             {\n+                let zero = builder.context.new_rvalue_zero(builder.int_type);\n                 return_value = builder.context.new_vector_access(None, return_value, zero).to_rvalue();\n             }\n         },"}, {"sha": "9c2a1401a1544b9e7641109ad4628ff187220032", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea51f391ed91c487dda81d50389474b768441c7/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea51f391ed91c487dda81d50389474b768441c7/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=fea51f391ed91c487dda81d50389474b768441c7", "patch": "@@ -1,4 +1,6 @@\n-use gccjit::{BinaryOp, RValue, Type, ToRValue, ComparisonOp, UnaryOp};\n+#[cfg_attr(not(feature=\"master\"), allow(unused_imports))]\n+use gccjit::{ToRValue, ComparisonOp, UnaryOp};\n+use gccjit::{BinaryOp, RValue, Type};\n use rustc_codegen_ssa::base::compare_simd_types;\n use rustc_codegen_ssa::common::{TypeKind, span_invalid_monomorphization_error};\n use rustc_codegen_ssa::mir::operand::OperandRef;"}, {"sha": "cb1d848eb670e35530d222091ef63ae31de3ec00", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fea51f391ed91c487dda81d50389474b768441c7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea51f391ed91c487dda81d50389474b768441c7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fea51f391ed91c487dda81d50389474b768441c7", "patch": "@@ -190,24 +190,6 @@ pub struct GccContext {\n     context: Context<'static>,\n }\n \n-impl GccContext {\n-    fn new<'tcx>(tcx: TyCtxt<'tcx>) -> Self {\n-        let context = create_context(tcx);\n-        Self {\n-            context,\n-        }\n-    }\n-}\n-\n-fn create_context<'gcc, 'tcx>(tcx: TyCtxt<'tcx>) -> Context<'gcc> {\n-    let context = Context::default();\n-    if tcx.sess.target.is_builtin {\n-        //let features = global_gcc_features(sess, false);\n-        println!(\"Features: {:?}\", tcx.sess.opts.cg.target_feature);\n-    }\n-    context\n-}\n-\n unsafe impl Send for GccContext {}\n // FIXME(antoyo): that shouldn't be Sync. Parallel compilation is currently disabled with \"-Zno-parallel-llvm\". Try to disable it here.\n unsafe impl Sync for GccContext {}"}]}