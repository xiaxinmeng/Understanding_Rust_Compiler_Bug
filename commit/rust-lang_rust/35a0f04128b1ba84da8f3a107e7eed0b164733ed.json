{"sha": "35a0f04128b1ba84da8f3a107e7eed0b164733ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTBmMDQxMjhiMWJhODRkYThmM2ExMDdlN2VlZDBiMTY0NzMzZWQ=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-06T11:04:56Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-06T11:04:56Z"}, "message": "Added extract path attribute for current module\n\n#1211", "tree": {"sha": "78f7b70553476cc68f7aa0a15fda1dce4c2c8f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f7b70553476cc68f7aa0a15fda1dce4c2c8f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a0f04128b1ba84da8f3a107e7eed0b164733ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0f04128b1ba84da8f3a107e7eed0b164733ed", "html_url": "https://github.com/rust-lang/rust/commit/35a0f04128b1ba84da8f3a107e7eed0b164733ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a0f04128b1ba84da8f3a107e7eed0b164733ed/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219e0e8c8d6672feaab2f19b7c3280d5967360e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/219e0e8c8d6672feaab2f19b7c3280d5967360e4", "html_url": "https://github.com/rust-lang/rust/commit/219e0e8c8d6672feaab2f19b7c3280d5967360e4"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "cf9ff0636f335f5ae8bb5358253faabf672ce1ab", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=35a0f04128b1ba84da8f3a107e7eed0b164733ed", "patch": "@@ -76,7 +76,7 @@ pub use self::{\n     raw::ImportId,\n };\n \n-/// Contans all top-level defs from a macro-expanded crate\n+/// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateDefMap {\n     krate: Crate,"}, {"sha": "951468a98a80d3035a5130d95358d2545921f263", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=35a0f04128b1ba84da8f3a107e7eed0b164733ed", "patch": "@@ -508,8 +508,8 @@ where\n                 }\n                 .collect(&*items);\n             }\n-            // out of line module, resovle, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id } => {\n+            // out of line module, resolve, parse and recurse\n+            raw::ModuleData::Declaration { name, ast_id, .. } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 let is_root = self.def_collector.def_map.modules[self.module_id].parent.is_none();\n                 match resolve_submodule(self.def_collector.db, self.file_id, name, is_root) {"}, {"sha": "46b2bef5b579d75bbab9954499613af7c1064b68", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=35a0f04128b1ba84da8f3a107e7eed0b164733ed", "patch": "@@ -3,7 +3,7 @@ use std::{ops::Index, sync::Arc};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr, SourceFile, TreeArc,\n+    AstNode, AstPtr, SmolStr, SourceFile, TreeArc,\n };\n use test_utils::tested_by;\n \n@@ -130,7 +130,7 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n+    Declaration { name: Name, ast_id: FileAstId<ast::Module>, attr_path: Option<SmolStr> },\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n@@ -255,9 +255,12 @@ impl RawItemsCollector {\n             Some(it) => it.as_name(),\n             None => return,\n         };\n+\n+        let attr_path = extract_mod_path_attribute(module);\n         let ast_id = self.source_ast_id_map.ast_id(module);\n         if module.has_semi() {\n-            let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n+            let item =\n+                self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id, attr_path });\n             self.push_item(current_module, RawItem::Module(item));\n             return;\n         }\n@@ -339,3 +342,16 @@ impl RawItemsCollector {\n         .push(item)\n     }\n }\n+\n+fn extract_mod_path_attribute(module: &ast::Module) -> Option<SmolStr> {\n+    module.attrs().into_iter().find_map(|attr| {\n+        attr.as_key_value().and_then(|(name, value)| {\n+            let is_path = name == \"path\";\n+            if is_path {\n+                Some(value)\n+            } else {\n+                None\n+            }\n+        })\n+    })\n+}"}, {"sha": "6d44fef33e8e88d960e5d6ddf3f0ad131cb5b3a7", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0f04128b1ba84da8f3a107e7eed0b164733ed/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=35a0f04128b1ba84da8f3a107e7eed0b164733ed", "patch": "@@ -52,7 +52,7 @@ pub fn set_filter(f: Filter) {\n /// It supports nested profiling scopes in case when this function invoked multiple times at the execution stack. In this case the profiling information will be nested at the output.\n /// Profiling information is being printed in the stderr.\n ///\n-/// #Example\n+/// # Example\n /// ```\n /// use ra_prof::{profile, set_filter, Filter};\n ///"}]}