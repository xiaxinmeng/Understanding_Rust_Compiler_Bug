{"sha": "6d4840e9292e1b5ac217c232a2baded010c7703c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDg0MGU5MjkyZTFiNWFjMjE3YzIzMmEyYmFkZWQwMTBjNzcwM2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-09-16T10:31:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-16T10:31:36Z"}, "message": "Merge pull request #342 from RalfJung/mir-validate\n\nvalidation: check that int, float etc. are not undef", "tree": {"sha": "e5b6e774d8ce3e365c82b3b7751ee07b1481980a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b6e774d8ce3e365c82b3b7751ee07b1481980a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4840e9292e1b5ac217c232a2baded010c7703c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4840e9292e1b5ac217c232a2baded010c7703c", "html_url": "https://github.com/rust-lang/rust/commit/6d4840e9292e1b5ac217c232a2baded010c7703c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4840e9292e1b5ac217c232a2baded010c7703c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "html_url": "https://github.com/rust-lang/rust/commit/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2"}, {"sha": "bc240ff606586bae4e1496ec3954c2f3a2b27c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc240ff606586bae4e1496ec3954c2f3a2b27c76", "html_url": "https://github.com/rust-lang/rust/commit/bc240ff606586bae4e1496ec3954c2f3a2b27c76"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "8fb63b3cb2ca4c79763d80ac603f1d7328fcb5f7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1483,6 +1483,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Value::ByRef { .. } => bug!(\"follow_by_ref_value can't result in `ByRef`\"),\n \n             Value::ByVal(primval) => {\n+                // TODO: Do we really want insta-UB here?\n                 self.ensure_valid_value(primval, ty)?;\n                 Ok(primval)\n             }\n@@ -1817,6 +1818,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let val = match val {\n                     PrimVal::Bytes(0) => false,\n                     PrimVal::Bytes(1) => true,\n+                    // TODO: This seems a little overeager, should reading at bool type already be UB?\n                     _ => return err!(InvalidBool),\n                 };\n                 PrimVal::from_bool(val)"}, {"sha": "9be9341ee239b9477045b1ec461bcaa7974ef644", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -492,12 +492,22 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let res = do catch {\n             match query.ty.sty {\n                 TyInt(_) | TyUint(_) | TyRawPtr(_) => {\n-                    // TODO: Make sure these are not undef.\n-                    // We could do a bounds-check and other sanity checks on the lvalue, but it would be a bug in miri for this to ever fail.\n+                    if mode.acquiring() {\n+                        // Make sure we can read this.\n+                        let val = self.read_lvalue(query.lval.1)?;\n+                        self.follow_by_ref_value(val, query.ty)?;\n+                        // FIXME: It would be great to rule out Undef here, but that doesn't actually work.\n+                        // Passing around undef data is a thing that e.g. Vec::extend_with does.\n+                    }\n                     Ok(())\n                 }\n-                TyBool | TyFloat(_) | TyChar | TyStr => {\n-                    // TODO: Check if these are valid bool/float/codepoint/UTF-8, respectively (and in particular, not undef).\n+                TyBool | TyFloat(_) | TyChar => {\n+                    if mode.acquiring() {\n+                        let val = self.read_lvalue(query.lval.1)?;\n+                        let val = self.value_to_primval(ValTy { value: val, ty: query.ty })?;\n+                        val.to_bytes()?;\n+                        // TODO: Check if these are valid bool/float/codepoint/UTF-8\n+                    }\n                     Ok(())\n                 }\n                 TyNever => err!(ValidationFailure(format!(\"The empty type is never valid.\"))),\n@@ -542,6 +552,10 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 }\n \n                 // Compound types\n+                TyStr => {\n+                    // TODO: Validate strings\n+                    Ok(())\n+                }\n                 TySlice(elem_ty) => {\n                     let len = match query.lval.1 {\n                         Lvalue::Ptr { extra: LvalueExtra::Length(len), .. } => len,"}, {"sha": "99404b7d5f3f54e52f01b264a6cadb4008e6abfd", "filename": "tests/compile-fail-fullmir/undefined_byte_read.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,3 +1,6 @@\n+// This should fail even without validation\n+// compile-flags: -Zmir-emit-validate=0\n+\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };"}, {"sha": "c30c9b439a46b495c1b91c6ccc8043abd137fbc6", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { unreachable!() } else { unreachable!() } //~ ERROR: invalid boolean value read\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR: invalid boolean value read\n+    if b { unreachable!() } else { unreachable!() }\n }"}, {"sha": "4fee6e692bada0913b093aeb2892fac4f610d8ea", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    match unsafe { std::mem::transmute::<i32, char>(-1) } {\n-        'a' => {}, //~ERROR tried to interpret an invalid 32-bit value as a char: 4294967295\n+    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ERROR tried to interpret an invalid 32-bit value as a char: 4294967295\n+        'a' => {},\n         'b' => {},\n         _ => {},\n     }"}, {"sha": "cc927f879504a271a8897f7fc68195f3b6c56004", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,3 +1,6 @@\n+// This should fail even without validation\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![allow(dead_code, unused_variables)]\n \n #[repr(packed)]"}, {"sha": "7d5d95a1dc6da32b97b90f14a4a164a235a3b163", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,3 +1,5 @@\n+// This should fail even without validation\n+// compile-flags: -Zmir-emit-validate=0\n #![feature(i128_type)]\n \n fn main() {"}, {"sha": "b889b1ea5317b8b1e3cff83e8707593047ef0d49", "filename": "tests/compile-fail/validation_undef.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Fvalidation_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Fcompile-fail%2Fvalidation_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_undef.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -0,0 +1,14 @@\n+#![allow(unused_variables)]\n+// error-pattern: attempted to read undefined bytes\n+\n+mod safe {\n+    use std::mem;\n+\n+    pub(crate) fn make_float() -> f32 {\n+        unsafe { mem::uninitialized() }\n+    }\n+}\n+\n+fn main() {\n+    let _x = safe::make_float();\n+}"}, {"sha": "2c18c2d3687a5f9b879154f2a3b8d297a0871bb4", "filename": "tests/run-pass/move-undef-primval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Frun-pass%2Fmove-undef-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4840e9292e1b5ac217c232a2baded010c7703c/tests%2Frun-pass%2Fmove-undef-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-undef-primval.rs?ref=6d4840e9292e1b5ac217c232a2baded010c7703c", "patch": "@@ -1,3 +1,6 @@\n+// Moving around undef is not allowed by validation\n+// compile-flags: -Zmir-emit-validate=0\n+\n struct Foo {\n     _inner: i32,\n }"}]}