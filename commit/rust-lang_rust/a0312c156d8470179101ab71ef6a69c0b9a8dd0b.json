{"sha": "a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMzEyYzE1NmQ4NDcwMTc5MTAxYWI3MWVmNmE2OWMwYjlhOGRkMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T14:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T14:39:11Z"}, "message": "Auto merge of #66815 - mark-i-m:simplify-borrow_check-errors, r=Dylan-DPC\n\nReorganize borrow check diagnostic code\n\nCurrently borrow checker diagnostics are split across many different modules in different places in the `librustc_mir` crate. This moves them all to a `diagnostics` module. This also reduces the nesting of the modules a bit (sooo much nesting).\n\nI am also thinking of moving stuff out of the `nll` module since we only have one borrow checker now (:tada:), and maybe it even makes sense to split out all of this stuff to a `librustc_borrow_check`, but those are for the future. Feel free to ping me here or on zulip and let me know what you think...\n\ncc @nikomatsakis @matthewjasper @eddyb", "tree": {"sha": "f158ebe5ba14f33df89df007bba04a11a8da100c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f158ebe5ba14f33df89df007bba04a11a8da100c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "html_url": "https://github.com/rust-lang/rust/commit/a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "html_url": "https://github.com/rust-lang/rust/commit/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe"}, {"sha": "b998e8306423ea3746afcc92e3482a72cce75f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b998e8306423ea3746afcc92e3482a72cce75f2b", "html_url": "https://github.com/rust-lang/rust/commit/b998e8306423ea3746afcc92e3482a72cce75f2b"}], "stats": {"total": 240, "additions": 130, "deletions": 110}, "files": [{"sha": "d14957b9017daf487428a5dfba0938d8ec76e74c", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "renamed", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -14,18 +14,22 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n use syntax::source_map::DesugaringKind;\n \n-use super::nll::explain_borrow::BorrowExplanation;\n-use super::nll::region_infer::{RegionName, RegionNameSource};\n-use super::prefixes::IsPrefixOf;\n-use super::WriteKind;\n-use super::borrow_set::BorrowData;\n-use super::MirBorrowckCtxt;\n-use super::{InitializationRequiringAction, PrefixSet};\n-use super::error_reporting::{IncludingDowncast, UseSpans};\n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MovePathIndex, MoveOutIndex};\n use crate::util::borrowck_errors;\n \n+use crate::borrow_check::{\n+    prefixes::IsPrefixOf,\n+    WriteKind,\n+    borrow_set::BorrowData,\n+    MirBorrowckCtxt, InitializationRequiringAction, PrefixSet\n+};\n+\n+use super::{\n+    IncludingDowncast, UseSpans, RegionName, RegionNameSource,\n+    explain_borrow::BorrowExplanation,\n+};\n+\n #[derive(Debug)]\n struct MoveSite {\n     /// Index of the \"move out\" that we found. The `MoveData` can\n@@ -46,7 +50,7 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(super) fn report_use_of_moved_or_uninitialized(\n+    pub(in crate::borrow_check) fn report_use_of_moved_or_uninitialized(\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n@@ -269,7 +273,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    pub(super) fn report_move_out_while_borrowed(\n+    pub(in crate::borrow_check) fn report_move_out_while_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -326,7 +330,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    pub(super) fn report_use_while_mutably_borrowed(\n+    pub(in crate::borrow_check) fn report_use_while_mutably_borrowed(\n         &mut self,\n         location: Location,\n         (place, _span): (&Place<'tcx>, Span),\n@@ -368,7 +372,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(super) fn report_conflicting_borrow(\n+    pub(in crate::borrow_check) fn report_conflicting_borrow(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -614,7 +618,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///\n     /// >  cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n     /// >  mutable (via `a.u.s.b`) [E0502]\n-    pub(super) fn describe_place_for_conflicting_borrow(\n+    pub(in crate::borrow_check) fn describe_place_for_conflicting_borrow(\n         &self,\n         first_borrowed_place: &Place<'tcx>,\n         second_borrowed_place: &Place<'tcx>,\n@@ -722,7 +726,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// short a lifetime. (But sometimes it is more useful to report\n     /// it as a more direct conflict between the execution of a\n     /// `Drop::drop` with an aliasing borrow.)\n-    pub(super) fn report_borrowed_value_does_not_live_long_enough(\n+    pub(in crate::borrow_check) fn report_borrowed_value_does_not_live_long_enough(\n         &mut self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n@@ -1478,7 +1482,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         result\n     }\n \n-    pub(super) fn report_illegal_mutation_of_borrowed(\n+    pub(in crate::borrow_check) fn report_illegal_mutation_of_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -1537,7 +1541,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// assigned; `err_place` is a place providing a reason why\n     /// `place` is not mutable (e.g., the non-`mut` local `x` in an\n     /// assignment to `x.f`).\n-    pub(super) fn report_illegal_reassignment(\n+    pub(in crate::borrow_check) fn report_illegal_reassignment(\n         &mut self,\n         _location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -2080,7 +2084,7 @@ enum AnnotatedBorrowFnSignature<'tcx> {\n impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n     /// Annotate the provided diagnostic with information about borrow from the fn signature that\n     /// helps explain.\n-    pub(super) fn emit(\n+    pub(in crate::borrow_check) fn emit(\n         &self,\n         cx: &mut MirBorrowckCtxt<'_, 'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,", "previous_filename": "src/librustc_mir/borrow_check/conflict_errors.rs"}, {"sha": "67c3c36e73ec7a47551f2eb0f56ea3d1f1df9f0b", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -1,8 +1,7 @@\n use std::collections::VecDeque;\n \n use crate::borrow_check::borrow_set::BorrowData;\n-use crate::borrow_check::error_reporting::UseSpans;\n-use crate::borrow_check::nll::region_infer::{Cause, RegionName};\n+use crate::borrow_check::nll::region_infer::Cause;\n use crate::borrow_check::nll::ConstraintDescription;\n use crate::borrow_check::{MirBorrowckCtxt, WriteKind};\n use rustc::mir::{\n@@ -17,7 +16,7 @@ use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n-mod find_use;\n+use super::{UseSpans, find_use, RegionName};\n \n #[derive(Debug)]\n pub(in crate::borrow_check) enum BorrowExplanation {", "previous_filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs"}, {"sha": "7ab069260f9402cb27476f21185d2d443f17694e", "filename": "src/librustc_mir/borrow_check/diagnostics/find_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "previous_filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs"}, {"sha": "1a76265fbdcf068831841fa3c518e848aa4099da", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "renamed", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -1,3 +1,5 @@\n+//! Borrow checker diagnostics.\n+\n use rustc::hir;\n use rustc::hir::def::Namespace;\n use rustc::hir::def_id::DefId;\n@@ -17,6 +19,22 @@ use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n+mod find_use;\n+mod var_name;\n+mod region_name;\n+mod outlives_suggestion;\n+\n+mod conflict_errors;\n+mod move_errors;\n+mod mutability_errors;\n+mod region_errors;\n+mod explain_borrow;\n+\n+crate use mutability_errors::AccessKind;\n+crate use region_name::{RegionName, RegionNameSource, RegionErrorNamingCtx};\n+crate use region_errors::{ErrorReportingCtx, ErrorConstraintInfo};\n+crate use outlives_suggestion::OutlivesSuggestionBuilder;\n+\n pub(super) struct IncludingDowncast(pub(super) bool);\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {", "previous_filename": "src/librustc_mir/borrow_check/error_reporting.rs"}, {"sha": "938836db9ae4b95b6554c1cc60453c0d15a522f9", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -5,7 +5,7 @@ use syntax_pos::Span;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::prefixes::PrefixSet;\n-use crate::borrow_check::error_reporting::UseSpans;\n+use crate::borrow_check::diagnostics::UseSpans;\n use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind,\n     LookupResult, MoveError, MovePathIndex,", "previous_filename": "src/librustc_mir/borrow_check/move_errors.rs"}, {"sha": "6449ae349abf2393be9e1c8b88c782bb1ff4348b", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -8,18 +8,18 @@ use syntax_pos::Span;\n use syntax_pos::symbol::kw;\n \n use crate::borrow_check::MirBorrowckCtxt;\n-use crate::borrow_check::error_reporting::BorrowedContentSource;\n+use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::util::collect_writes::FindAssignments;\n use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub(super) enum AccessKind {\n+pub(crate) enum AccessKind {\n     MutableBorrow,\n     Mutate,\n }\n \n impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n-    pub(super) fn report_mutability_error(\n+    pub(crate) fn report_mutability_error(\n         &mut self,\n         access_place: &Place<'tcx>,\n         span: Span,", "previous_filename": "src/librustc_mir/borrow_check/mutability_errors.rs"}, {"sha": "7aecadae98b553816fa37acea5dd42e1abc99caa", "filename": "src/librustc_mir/borrow_check/diagnostics/outlives_suggestion.rs", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -13,12 +13,10 @@ use syntax_pos::symbol::Symbol;\n \n use smallvec::SmallVec;\n \n-use crate::borrow_check::nll::region_infer::{\n-    error_reporting::{\n-        region_name::{RegionName, RegionNameSource},\n-        ErrorConstraintInfo, ErrorReportingCtx, RegionErrorNamingCtx,\n-    },\n-    RegionInferenceContext,\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+\n+use super::{\n+    RegionName, RegionNameSource, ErrorConstraintInfo, ErrorReportingCtx, RegionErrorNamingCtx,\n };\n \n /// The different things we could suggest.", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs"}, {"sha": "66f0330fe9b6c5714dc4617e1446e8a59d259b9e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "renamed", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -19,14 +19,7 @@ use syntax::symbol::kw;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n-use self::outlives_suggestion::OutlivesSuggestionBuilder;\n-\n-pub mod outlives_suggestion;\n-\n-mod region_name;\n-mod var_name;\n-\n-crate use self::region_name::{RegionName, RegionNameSource, RegionErrorNamingCtx};\n+use super::{OutlivesSuggestionBuilder, RegionName, RegionNameSource, RegionErrorNamingCtx};\n \n impl ConstraintDescription for ConstraintCategory {\n     fn description(&self) -> &'static str {\n@@ -61,36 +54,36 @@ enum Trace {\n /// Various pieces of state used when reporting borrow checker errors.\n pub struct ErrorReportingCtx<'a, 'b, 'tcx> {\n     /// The region inference context used for borrow chekcing this MIR body.\n-    region_infcx: &'b RegionInferenceContext<'tcx>,\n+    pub(super) region_infcx: &'b RegionInferenceContext<'tcx>,\n \n     /// The inference context used for type checking.\n-    infcx: &'b InferCtxt<'a, 'tcx>,\n+    pub(super) infcx: &'b InferCtxt<'a, 'tcx>,\n \n     /// The MIR def we are reporting errors on.\n-    mir_def_id: DefId,\n+    pub(super) mir_def_id: DefId,\n \n     /// The MIR body we are reporting errors on (for convenience).\n-    body: &'b Body<'tcx>,\n+    pub(super) body: &'b Body<'tcx>,\n \n     /// User variable names for MIR locals (where applicable).\n-    local_names: &'b IndexVec<Local, Option<Symbol>>,\n+    pub(super) local_names: &'b IndexVec<Local, Option<Symbol>>,\n \n     /// Any upvars for the MIR body we have kept track of during borrow checking.\n-    upvars: &'b [Upvar],\n+    pub(super) upvars: &'b [Upvar],\n }\n \n /// Information about the various region constraints involved in a borrow checker error.\n #[derive(Clone, Debug)]\n pub struct ErrorConstraintInfo {\n     // fr: outlived_fr\n-    fr: RegionVid,\n-    fr_is_local: bool,\n-    outlived_fr: RegionVid,\n-    outlived_fr_is_local: bool,\n+    pub(super) fr: RegionVid,\n+    pub(super) fr_is_local: bool,\n+    pub(super) outlived_fr: RegionVid,\n+    pub(super) outlived_fr_is_local: bool,\n \n     // Category and span for best blame constraint\n-    category: ConstraintCategory,\n-    span: Span,\n+    pub(super) category: ConstraintCategory,\n+    pub(super) span: Span,\n }\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n@@ -368,7 +361,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     ///\n     /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n-    pub(super) fn report_error<'a>(\n+    pub(in crate::borrow_check) fn report_error<'a>(\n         &'a self,\n         body: &Body<'tcx>,\n         local_names: &IndexVec<Local, Option<Symbol>>,", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs"}, {"sha": "e2e75962aecef1ce5daf667f8294135bba0c6cc2", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -1,12 +1,5 @@\n use std::fmt::{self, Display};\n \n-use crate::borrow_check::nll::region_infer::{\n-    RegionInferenceContext,\n-    error_reporting::ErrorReportingCtx,\n-};\n-use crate::borrow_check::nll::universal_regions::DefiningTy;\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::Upvar;\n use rustc::hir;\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n@@ -21,6 +14,15 @@ use syntax::symbol::kw;\n use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::{Span, symbol::Symbol, DUMMY_SP};\n \n+use crate::borrow_check::{\n+    nll::region_infer::RegionInferenceContext,\n+    nll::universal_regions::DefiningTy,\n+    nll::ToRegionVid,\n+    Upvar,\n+};\n+\n+use super::region_errors::ErrorReportingCtx;\n+\n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n #[derive(Debug, Clone)]", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs"}, {"sha": "1ac44c4fdb10115db4cda7fde070c5d4c144bc30", "filename": "src/librustc_mir/borrow_check/diagnostics/var_name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs"}, {"sha": "a1932b551c144cff7965e23fcd5ca789db8c912f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -46,17 +46,14 @@ use self::flows::Flows;\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n use self::MutateMode::{JustWrite, WriteAndRead};\n-use self::mutability_errors::AccessKind;\n+use self::diagnostics::AccessKind;\n \n use self::path_utils::*;\n \n crate mod borrow_set;\n-mod error_reporting;\n+mod diagnostics;\n mod flows;\n mod location;\n-mod conflict_errors;\n-mod move_errors;\n-mod mutability_errors;\n mod path_utils;\n crate mod place_ext;\n crate mod places_conflict;"}, {"sha": "b9363200cdf2855dc60ab6c6801895642f8d7ecd", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -32,17 +32,17 @@ use crate::util as mir_util;\n use crate::util::pretty;\n \n mod constraint_generation;\n-pub mod explain_borrow;\n mod facts;\n mod invalidation;\n-crate mod region_infer;\n mod renumber;\n-crate mod type_check;\n-mod universal_regions;\n \n-mod constraints;\n mod member_constraints;\n \n+crate mod constraints;\n+crate mod universal_regions;\n+crate mod type_check;\n+crate mod region_infer;\n+\n use self::facts::AllFacts;\n use self::region_infer::RegionInferenceContext;\n use self::universal_regions::UniversalRegions;"}, {"sha": "85031d6210a4d2202bbc4dab2c2d66affd5753f6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 51, "deletions": 42, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0312c156d8470179101ab71ef6a69c0b9a8dd0b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "patch": "@@ -1,21 +1,5 @@\n use std::rc::Rc;\n \n-use crate::borrow_check::nll::{\n-    constraints::{\n-        graph::NormalConstraintGraph,\n-        ConstraintSccIndex,\n-        OutlivesConstraint,\n-        OutlivesConstraintSet,\n-    },\n-    member_constraints::{MemberConstraintSet, NllMemberConstraintIndex},\n-    region_infer::values::{\n-        PlaceholderIndices, RegionElement, ToElementIndex\n-    },\n-    region_infer::error_reporting::outlives_suggestion::OutlivesSuggestionBuilder,\n-    type_check::{free_region_relations::UniversalRegionRelations, Locations},\n-};\n-use crate::borrow_check::Upvar;\n-\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::opaque_types;\n@@ -38,13 +22,31 @@ use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n-crate use self::error_reporting::{RegionName, RegionNameSource, RegionErrorNamingCtx};\n+use crate::borrow_check::{\n+    nll::{\n+        constraints::{\n+            graph::NormalConstraintGraph,\n+            ConstraintSccIndex,\n+            OutlivesConstraint,\n+            OutlivesConstraintSet,\n+        },\n+        member_constraints::{MemberConstraintSet, NllMemberConstraintIndex},\n+        region_infer::values::{\n+            PlaceholderIndices, RegionElement, ToElementIndex\n+        },\n+        type_check::{free_region_relations::UniversalRegionRelations, Locations},\n+    },\n+    diagnostics::{\n+        OutlivesSuggestionBuilder, RegionErrorNamingCtx,\n+    },\n+    Upvar,\n+};\n+\n use self::values::{LivenessValues, RegionValueElements, RegionValues};\n use super::universal_regions::UniversalRegions;\n use super::ToRegionVid;\n \n mod dump_mir;\n-mod error_reporting;\n mod graphviz;\n \n pub mod values;\n@@ -54,48 +56,51 @@ pub struct RegionInferenceContext<'tcx> {\n     /// variables are identified by their index (`RegionVid`). The\n     /// definition contains information about where the region came\n     /// from as well as its final inferred value.\n-    definitions: IndexVec<RegionVid, RegionDefinition<'tcx>>,\n+    pub(in crate::borrow_check) definitions: IndexVec<RegionVid, RegionDefinition<'tcx>>,\n \n     /// The liveness constraints added to each region. For most\n     /// regions, these start out empty and steadily grow, though for\n     /// each universally quantified region R they start out containing\n     /// the entire CFG and `end(R)`.\n-    liveness_constraints: LivenessValues<RegionVid>,\n+    pub(in crate::borrow_check) liveness_constraints: LivenessValues<RegionVid>,\n \n     /// The outlives constraints computed by the type-check.\n-    constraints: Rc<OutlivesConstraintSet>,\n+    pub(in crate::borrow_check) constraints: Rc<OutlivesConstraintSet>,\n \n     /// The constraint-set, but in graph form, making it easy to traverse\n     /// the constraints adjacent to a particular region. Used to construct\n     /// the SCC (see `constraint_sccs`) and for error reporting.\n-    constraint_graph: Rc<NormalConstraintGraph>,\n+    pub(in crate::borrow_check) constraint_graph: Rc<NormalConstraintGraph>,\n \n     /// The SCC computed from `constraints` and the constraint\n     /// graph. We have an edge from SCC A to SCC B if `A: B`. Used to\n     /// compute the values of each region.\n-    constraint_sccs: Rc<Sccs<RegionVid, ConstraintSccIndex>>,\n+    pub(in crate::borrow_check) constraint_sccs: Rc<Sccs<RegionVid, ConstraintSccIndex>>,\n \n     /// Reverse of the SCC constraint graph -- i.e., an edge `A -> B`\n     /// exists if `B: A`. Computed lazilly.\n-    rev_constraint_graph: Option<Rc<VecGraph<ConstraintSccIndex>>>,\n+    pub(in crate::borrow_check) rev_constraint_graph:\n+        Option<Rc<VecGraph<ConstraintSccIndex>>>,\n \n     /// The \"R0 member of [R1..Rn]\" constraints, indexed by SCC.\n-    member_constraints: Rc<MemberConstraintSet<'tcx, ConstraintSccIndex>>,\n+    pub(in crate::borrow_check) member_constraints:\n+        Rc<MemberConstraintSet<'tcx, ConstraintSccIndex>>,\n \n     /// Records the member constraints that we applied to each scc.\n     /// This is useful for error reporting. Once constraint\n     /// propagation is done, this vector is sorted according to\n     /// `member_region_scc`.\n-    member_constraints_applied: Vec<AppliedMemberConstraint>,\n+    pub(in crate::borrow_check) member_constraints_applied: Vec<AppliedMemberConstraint>,\n \n     /// Map closure bounds to a `Span` that should be used for error reporting.\n-    closure_bounds_mapping:\n+    pub(in crate::borrow_check) closure_bounds_mapping:\n         FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n \n     /// Contains the minimum universe of any variable within the same\n     /// SCC. We will ensure that no SCC contains values that are not\n     /// visible from this index.\n-    scc_universes: IndexVec<ConstraintSccIndex, ty::UniverseIndex>,\n+    pub(in crate::borrow_check) scc_universes:\n+        IndexVec<ConstraintSccIndex, ty::UniverseIndex>,\n \n     /// Contains a \"representative\" from each SCC. This will be the\n     /// minimal RegionVid belonging to that universe. It is used as a\n@@ -104,23 +109,25 @@ pub struct RegionInferenceContext<'tcx> {\n     /// of its SCC and be sure that -- if they have the same repr --\n     /// they *must* be equal (though not having the same repr does not\n     /// mean they are unequal).\n-    scc_representatives: IndexVec<ConstraintSccIndex, ty::RegionVid>,\n+    pub(in crate::borrow_check) scc_representatives:\n+        IndexVec<ConstraintSccIndex, ty::RegionVid>,\n \n     /// The final inferred values of the region variables; we compute\n     /// one value per SCC. To get the value for any given *region*,\n     /// you first find which scc it is a part of.\n-    scc_values: RegionValues<ConstraintSccIndex>,\n+    pub(in crate::borrow_check) scc_values: RegionValues<ConstraintSccIndex>,\n \n     /// Type constraints that we check after solving.\n-    type_tests: Vec<TypeTest<'tcx>>,\n+    pub(in crate::borrow_check) type_tests: Vec<TypeTest<'tcx>>,\n \n     /// Information about the universally quantified regions in scope\n     /// on this function.\n-    universal_regions: Rc<UniversalRegions<'tcx>>,\n+    pub (in crate::borrow_check) universal_regions: Rc<UniversalRegions<'tcx>>,\n \n     /// Information about how the universally quantified regions in\n     /// scope on this function relate to one another.\n-    universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    pub(in crate::borrow_check) universal_region_relations:\n+        Rc<UniversalRegionRelations<'tcx>>,\n }\n \n /// Each time that `apply_member_constraint` is successful, it appends\n@@ -132,38 +139,38 @@ pub struct RegionInferenceContext<'tcx> {\n /// with `'R: 'O` where `'R` is the pick-region and `'O` is the\n /// minimal viable option.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]\n-struct AppliedMemberConstraint {\n+pub(crate) struct AppliedMemberConstraint {\n     /// The SCC that was affected. (The \"member region\".)\n     ///\n     /// The vector if `AppliedMemberConstraint` elements is kept sorted\n     /// by this field.\n-    member_region_scc: ConstraintSccIndex,\n+    pub(in crate::borrow_check) member_region_scc: ConstraintSccIndex,\n \n     /// The \"best option\" that `apply_member_constraint` found -- this was\n     /// added as an \"ad-hoc\" lower-bound to `member_region_scc`.\n-    min_choice: ty::RegionVid,\n+    pub(in crate::borrow_check) min_choice: ty::RegionVid,\n \n     /// The \"member constraint index\" -- we can find out details about\n     /// the constraint from\n     /// `set.member_constraints[member_constraint_index]`.\n-    member_constraint_index: NllMemberConstraintIndex,\n+    pub(in crate::borrow_check) member_constraint_index: NllMemberConstraintIndex,\n }\n \n-struct RegionDefinition<'tcx> {\n+pub(crate) struct RegionDefinition<'tcx> {\n     /// What kind of variable is this -- a free region? existential\n     /// variable? etc. (See the `NLLRegionVariableOrigin` for more\n     /// info.)\n-    origin: NLLRegionVariableOrigin,\n+    pub(in crate::borrow_check) origin: NLLRegionVariableOrigin,\n \n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n     /// forall-quantifiers like `for<'a> { 'a = 'b }`, we would create\n     /// the variable for `'a` in a fresh universe that extends ROOT.\n-    universe: ty::UniverseIndex,\n+    pub(in crate::borrow_check) universe: ty::UniverseIndex,\n \n     /// If this is 'static or an early-bound region, then this is\n     /// `Some(X)` where `X` is the name of the region.\n-    external_name: Option<ty::Region<'tcx>>,\n+    pub(in crate::borrow_check) external_name: Option<ty::Region<'tcx>>,\n }\n \n /// N.B., the variants in `Cause` are intentionally ordered. Lower\n@@ -455,7 +462,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Once region solving has completed, this function will return\n     /// the member constraints that were applied to the value of a given\n     /// region `r`. See `AppliedMemberConstraint`.\n-    fn applied_member_constraints(&self, r: impl ToRegionVid) -> &[AppliedMemberConstraint] {\n+    pub(in crate::borrow_check) fn applied_member_constraints(\n+        &self, r: impl ToRegionVid\n+    ) -> &[AppliedMemberConstraint] {\n         let scc = self.constraint_sccs.scc(r.to_region_vid());\n         binary_search_util::binary_search_slice(\n             &self.member_constraints_applied,"}]}