{"sha": "2f7c583bc12c0bddb28e43ea79b593a014811b09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmN2M1ODNiYzEyYzBiZGRiMjhlNDNlYTc5YjU5M2EwMTQ4MTFiMDk=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-25T18:20:43Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-25T18:21:25Z"}, "message": "Cleaning up task and comm exports, updating all the test cases.", "tree": {"sha": "dff43b4686d290723f689b6605449fabf19b3622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff43b4686d290723f689b6605449fabf19b3622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7c583bc12c0bddb28e43ea79b593a014811b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7c583bc12c0bddb28e43ea79b593a014811b09", "html_url": "https://github.com/rust-lang/rust/commit/2f7c583bc12c0bddb28e43ea79b593a014811b09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7c583bc12c0bddb28e43ea79b593a014811b09/comments", "author": null, "committer": null, "parents": [{"sha": "b31815f8a0b98445d2a82888a290b9543ad4400f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31815f8a0b98445d2a82888a290b9543ad4400f", "html_url": "https://github.com/rust-lang/rust/commit/b31815f8a0b98445d2a82888a290b9543ad4400f"}], "stats": {"total": 1064, "additions": 542, "deletions": 522}, "files": [{"sha": "0f0119cdd7c4c01db2e7fe37fe7907cbec846d24", "filename": "src/lib/aio.rs", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,11 +2,10 @@ import task;\n import vec;\n \n import comm;\n-import comm::_chan;\n-import comm::_port;\n-import comm::mk_port;\n+import comm::chan;\n+import comm::port;\n import comm::send;\n-\n+import comm::recv;\n import net;\n \n native \"rust\" mod rustrt {\n@@ -15,11 +14,11 @@ native \"rust\" mod rustrt {\n     fn aio_init();\n     fn aio_run();\n     fn aio_stop();\n-    fn aio_connect(host: *u8, port: int, connected: &_chan<socket>);\n-    fn aio_serve(host: *u8, port: int, acceptChan: &_chan<socket>) -> server;\n-    fn aio_writedata(s: socket, buf: *u8, size: uint, status: &_chan<bool>);\n-    fn aio_read(s: socket, reader: &_chan<[u8]>);\n-    fn aio_close_server(s: server, status: &_chan<bool>);\n+    fn aio_connect(host: *u8, port: int, connected: &chan<socket>);\n+    fn aio_serve(host: *u8, port: int, acceptChan: &chan<socket>) -> server;\n+    fn aio_writedata(s: socket, buf: *u8, size: uint, status: &chan<bool>);\n+    fn aio_read(s: socket, reader: &chan<[u8]>);\n+    fn aio_close_server(s: server, status: &chan<bool>);\n     fn aio_close_socket(s: socket);\n     fn aio_is_null_client(s: socket) -> bool;\n }\n@@ -32,42 +31,42 @@ tag pending_connection { remote(net::ip_addr, int); incoming(server); }\n \n tag socket_event { connected(client); closed; received([u8]); }\n \n-tag server_event { pending(_chan<_chan<socket_event>>); }\n+tag server_event { pending(chan<chan<socket_event>>); }\n \n tag request {\n     quit;\n-    connect(pending_connection, _chan<socket_event>);\n-    serve(net::ip_addr, int, _chan<server_event>, _chan<server>);\n-    write(client, [u8], _chan<bool>);\n-    close_server(server, _chan<bool>);\n+    connect(pending_connection, chan<socket_event>);\n+    serve(net::ip_addr, int, chan<server_event>, chan<server>);\n+    write(client, [u8], chan<bool>);\n+    close_server(server, chan<bool>);\n     close_client(client);\n }\n \n-type ctx = _chan<request>;\n+type ctx = chan<request>;\n \n fn ip_to_sbuf(ip: net::ip_addr) -> *u8 {\n     vec::to_ptr(str::bytes(net::format_addr(ip)))\n }\n \n-fn connect_task(ip: net::ip_addr, portnum: int, evt: _chan<socket_event>) {\n-    let connecter: _port<client> = mk_port();\n-    rustrt::aio_connect(ip_to_sbuf(ip), portnum, connecter.mk_chan());\n-    let client = connecter.recv();\n+fn connect_task(ip: net::ip_addr, portnum: int, evt: chan<socket_event>) {\n+    let connecter = port();\n+    rustrt::aio_connect(ip_to_sbuf(ip), portnum, chan(connecter));\n+    let client = recv(connecter);\n     new_client(client, evt);\n }\n \n-fn new_client(client: client, evt: _chan<socket_event>) {\n+fn new_client(client: client, evt: chan<socket_event>) {\n     // Start the read before notifying about the connect.  This avoids a race\n     // condition where the receiver can close the socket before we start\n     // reading.\n-    let reader: _port<[u8]> = mk_port();\n-    rustrt::aio_read(client, reader.mk_chan());\n+    let reader: port<[u8]> = port();\n+    rustrt::aio_read(client, chan(reader));\n \n     send(evt, connected(client));\n \n     while true {\n         log \"waiting for bytes\";\n-        let data: [u8] = reader.recv();\n+        let data: [u8] = recv(reader);\n         log \"got some bytes\";\n         log vec::len::<u8>(data);\n         if vec::len::<u8>(data) == 0u {\n@@ -83,42 +82,42 @@ fn new_client(client: client, evt: _chan<socket_event>) {\n     log \"close message sent\";\n }\n \n-fn accept_task(client: client, events: _chan<server_event>) {\n+fn accept_task(client: client, events: chan<server_event>) {\n     log \"accept task was spawned\";\n-    let p: _port<_chan<socket_event>> = mk_port();\n-    send(events, pending(p.mk_chan()));\n-    let evt = p.recv();\n+    let p = port();\n+    send(events, pending(chan(p)));\n+    let evt = recv(p);\n     new_client(client, evt);\n     log \"done accepting\";\n }\n \n-fn server_task(ip: net::ip_addr, portnum: int, events: _chan<server_event>,\n-               server: _chan<server>) {\n-    let accepter: _port<client> = mk_port();\n+fn server_task(ip: net::ip_addr, portnum: int, events: chan<server_event>,\n+               server: chan<server>) {\n+    let accepter = port();\n     send(server,\n-         rustrt::aio_serve(ip_to_sbuf(ip), portnum, accepter.mk_chan()));\n+         rustrt::aio_serve(ip_to_sbuf(ip), portnum, chan(accepter)));\n \n     let client: client;\n     while true {\n         log \"preparing to accept a client\";\n-        client = accepter.recv();\n+        client = recv(accepter);\n         if rustrt::aio_is_null_client(client) {\n             log \"client was actually null, returning\";\n             ret;\n-        } else { task::_spawn(bind accept_task(client, events)); }\n+        } else { task::spawn(bind accept_task(client, events)); }\n     }\n }\n \n-fn request_task(c: _chan<ctx>) {\n+fn request_task(c: chan<ctx>) {\n     // Create a port to accept IO requests on\n-    let p: _port<request> = mk_port();\n+    let p = port();\n     // Hand of its channel to our spawner\n-    send(c, p.mk_chan());\n+    send(c, chan(p));\n     log \"uv run task spawned\";\n     // Spin for requests\n     let req: request;\n     while true {\n-        req = p.recv();\n+        req = recv(p);\n         alt req {\n           quit. {\n             log \"got quit message\";\n@@ -127,10 +126,10 @@ fn request_task(c: _chan<ctx>) {\n             ret;\n           }\n           connect(remote(ip, portnum), client) {\n-            task::_spawn(bind connect_task(ip, portnum, client));\n+            task::spawn(bind connect_task(ip, portnum, client));\n           }\n           serve(ip, portnum, events, server) {\n-            task::_spawn(bind server_task(ip, portnum, events, server));\n+            task::spawn(bind server_task(ip, portnum, events, server));\n           }\n           write(socket, v, status) {\n             rustrt::aio_writedata(socket, vec::to_ptr::<u8>(v),\n@@ -148,27 +147,27 @@ fn request_task(c: _chan<ctx>) {\n     }\n }\n \n-fn iotask(c: _chan<ctx>) {\n+fn iotask(c: chan<ctx>) {\n     log \"io task spawned\";\n     // Initialize before accepting requests\n     rustrt::aio_init();\n \n     log \"io task init\";\n     // Spawn our request task\n-    let reqtask = task::_spawn(bind request_task(c));\n+    let reqtask = task::spawn_joinable(bind request_task(c));\n \n     log \"uv run task init\";\n     // Enter IO loop. This never returns until aio_stop is called.\n     rustrt::aio_run();\n     log \"waiting for request task to finish\";\n \n-    task::join_id(reqtask);\n+    task::join(reqtask);\n }\n \n fn new() -> ctx {\n-    let p: _port<ctx> = mk_port();\n-    task::_spawn(bind iotask(p.mk_chan()));\n-    ret p.recv();\n+    let p: port<ctx> = port();\n+    task::spawn(bind iotask(chan(p)));\n+    ret recv(p);\n }\n \n // Local Variables:"}, {"sha": "b5d1d3c7e935d7801da9aad9a888a6c8db99cd6e", "filename": "src/lib/comm.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,12 +2,7 @@ import sys;\n import ptr;\n import unsafe;\n import task;\n-import task::task_id;\n \n-export _chan;\n-export _port;\n-export chan_handle;\n-export mk_port;\n export send;\n export recv;\n export chan;\n@@ -17,7 +12,8 @@ native \"rust\" mod rustrt {\n     type void;\n     type rust_port;\n \n-    fn chan_id_send<~T>(target_task: task_id, target_port: port_id, data: -T);\n+    fn chan_id_send<~T>(target_task: task::task,\n+                        target_port: port_id, data: -T);\n \n     fn new_port(unit_sz: uint) -> *rust_port;\n     fn del_port(po: *rust_port);\n@@ -31,10 +27,9 @@ native \"rust-intrinsic\" mod rusti {\n \n type port_id = int;\n \n-type chan_handle<~T> = {task: task_id, port: port_id};\n-\n-tag chan<~T> { chan_t(chan_handle<T>); }\n-type _chan<~T> = chan<T>;\n+// It's critical that this only have one variant, so it has a record\n+// layout, and will work in the rust_task structure in task.rs.\n+tag chan<~T> { chan_t(task::task, port_id); }\n \n resource port_ptr(po: *rustrt::rust_port) {\n     rustrt::drop_port(po);\n@@ -43,17 +38,9 @@ resource port_ptr(po: *rustrt::rust_port) {\n \n tag port<~T> { port_t(@port_ptr); }\n \n-obj port_obj<~T>(raw_port: port<T>) {\n-    fn mk_chan() -> chan<T> { chan(raw_port) }\n-\n-    fn recv() -> T { recv(raw_port) }\n-}\n-type _port<~T> = port_obj<T>;\n-\n-fn mk_port<~T>() -> _port<T> { ret port_obj::<T>(port::<T>()); }\n-\n fn send<~T>(ch: &chan<T>, data: -T) {\n-    rustrt::chan_id_send(ch.task, ch.port, data);\n+    let chan_t(t, p) = ch;\n+    rustrt::chan_id_send(t, p, data);\n }\n \n fn port<~T>() -> port<T> {\n@@ -63,5 +50,5 @@ fn port<~T>() -> port<T> {\n fn recv<~T>(p: &port<T>) -> T { ret rusti::recv(***p) }\n \n fn chan<~T>(p: &port<T>) -> chan<T> {\n-    chan_t({task: task::get_task_id(), port: rustrt::get_port_id(***p)})\n+    chan_t(task::get_task_id(), rustrt::get_port_id(***p))\n }"}, {"sha": "9040210b826769907d42b343adff2833db06d31d", "filename": "src/lib/sio.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Fsio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Fsio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsio.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,78 +1,78 @@\n-import comm::_port;\n-import comm::_chan;\n-import comm::mk_port;\n+import comm::port;\n+import comm::chan;\n import comm::send;\n+import comm::recv;\n \n import str;\n import net;\n \n type ctx = aio::ctx;\n-type client = {ctx: ctx, client: aio::client, evt: _port<aio::socket_event>};\n-type server = {ctx: ctx, server: aio::server, evt: _port<aio::server_event>};\n+type client = {ctx: ctx, client: aio::client, evt: port<aio::socket_event>};\n+type server = {ctx: ctx, server: aio::server, evt: port<aio::server_event>};\n \n fn new() -> ctx { ret aio::new(); }\n \n fn destroy(ctx: ctx) { send(ctx, aio::quit); }\n \n-fn make_socket(ctx: ctx, p: _port<aio::socket_event>) -> client {\n-    let evt: aio::socket_event = p.recv();\n+fn make_socket(ctx: ctx, p: port<aio::socket_event>) -> client {\n+    let evt: aio::socket_event = recv(p);\n     alt evt {\n       aio::connected(client) { ret {ctx: ctx, client: client, evt: p}; }\n       _ { fail \"Could not connect to client\"; }\n     }\n }\n \n fn connect_to(ctx: ctx, ip: net::ip_addr, portnum: int) -> client {\n-    let p: _port<aio::socket_event> = mk_port();\n-    send(ctx, aio::connect(aio::remote(ip, portnum), p.mk_chan()));\n+    let p: port<aio::socket_event> = port();\n+    send(ctx, aio::connect(aio::remote(ip, portnum), chan(p)));\n     ret make_socket(ctx, p);\n }\n \n fn read(c: client) -> [u8] {\n-    alt c.evt.recv() {\n+    alt recv(c.evt) {\n       aio::closed. { ret []; }\n       aio::received(buf) { ret buf; }\n     }\n }\n \n fn create_server(ctx: ctx, ip: net::ip_addr, portnum: int) -> server {\n-    let evt: _port<aio::server_event> = mk_port();\n-    let p: _port<aio::server> = mk_port();\n-    send(ctx, aio::serve(ip, portnum, evt.mk_chan(), p.mk_chan()));\n-    let srv: aio::server = p.recv();\n+    let evt: port<aio::server_event> = port();\n+    let p: port<aio::server> = port();\n+    send(ctx, aio::serve(ip, portnum, chan(evt), chan(p)));\n+    let srv: aio::server = recv(p);\n     ret {ctx: ctx, server: srv, evt: evt};\n }\n \n fn accept_from(server: server) -> client {\n-    let evt: aio::server_event = server.evt.recv();\n+    let evt: aio::server_event = recv(server.evt);\n     alt evt {\n       aio::pending(callback) {\n-        let p: _port<aio::socket_event> = mk_port();\n-        send(callback, p.mk_chan());\n+        let p = port();\n+        send(callback, chan(p));\n         ret make_socket(server.ctx, p);\n       }\n     }\n }\n \n fn write_data(c: client, data: [u8]) -> bool {\n-    let p: _port<bool> = mk_port();\n-    send(c.ctx, aio::write(c.client, data, p.mk_chan()));\n-    ret p.recv();\n+    let p = port();\n+    send(c.ctx, aio::write(c.client, data, chan(p)));\n+    ret recv(p);\n }\n \n fn close_server(server: server) {\n     // TODO: make this unit once we learn to send those from native code\n-    let p: _port<bool> = mk_port();\n-    send(server.ctx, aio::close_server(server.server, p.mk_chan()));\n+    let p = port();\n+    send(server.ctx, aio::close_server(server.server, chan(p)));\n     log \"Waiting for close\";\n-    p.recv();\n+    recv(p);\n     log \"Got close\";\n }\n \n fn close_client(client: client) {\n     send(client.ctx, aio::close_client(client.client));\n     let evt: aio::socket_event;\n-    do  { evt = client.evt.recv(); alt evt { aio::closed. { ret; } _ { } } }\n+    do  { evt = recv(client.evt); alt evt { aio::closed. { ret; } _ { } } }\n         while true\n }\n "}, {"sha": "71032bbcd645fdc1bd36d1953b4cc347a3468c7c", "filename": "src/lib/task.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,6 +5,24 @@ import option::none;\n import option = option::t;\n import ptr;\n \n+export task;\n+export joinable_task;\n+export sleep;\n+export yield;\n+export task_notification;\n+export join;\n+export unsupervise;\n+export pin;\n+export unpin;\n+export set_min_stack;\n+export spawn;\n+export spawn_notify;\n+export spawn_joinable;\n+export task_result;\n+export tr_success;\n+export tr_failure;\n+export get_task_id;\n+\n native \"rust\" mod rustrt {\n     fn task_sleep(time_in_us: uint);\n     fn task_yield();\n@@ -29,8 +47,8 @@ native \"rust\" mod rustrt {\n \n type rust_task =\n     {id: task,\n-     mutable notify_enabled: u8,\n-     mutable notify_chan: comm::chan_handle<task_notification>,\n+     mutable notify_enabled: u32,\n+     mutable notify_chan: comm::chan<task_notification>,\n      ctx: task_context,\n      stack_ptr: *u8};\n \n@@ -40,6 +58,7 @@ resource rust_task_ptr(task: *rust_task) { rustrt::drop_task(task); }\n \n type task = int;\n type task_id = task;\n+type joinable_task = (task_id, comm::port<task_notification>);\n \n fn get_task_id() -> task_id { rustrt::get_task_id() }\n \n@@ -79,15 +98,13 @@ fn unpin() { rustrt::unpin_task(); }\n \n fn set_min_stack(stack_size: uint) { rustrt::set_min_stack(stack_size); }\n \n-fn _spawn(thunk: -fn()) -> task { spawn(thunk) }\n-\n fn spawn(thunk: -fn()) -> task { spawn_inner(thunk, none) }\n \n fn spawn_notify(thunk: -fn(), notify: comm::chan<task_notification>) -> task {\n     spawn_inner(thunk, some(notify))\n }\n \n-fn spawn_joinable(thunk: -fn()) -> (task_id, comm::port<task_notification>) {\n+fn spawn_joinable(thunk: -fn()) -> joinable_task {\n     let p = comm::port::<task_notification>();\n     let id = spawn_notify(thunk, comm::chan::<task_notification>(p));\n     ret (id, p);\n@@ -105,7 +122,7 @@ fn spawn_inner(thunk: -fn(), notify: option<comm::chan<task_notification>>) ->\n     // set up the task pointer\n     let task_ptr = rust_task_ptr(rustrt::get_task_pointer(id));\n     let regs = ptr::addr_of((**task_ptr).ctx.regs);\n-    (*regs).edx = cast(*task_ptr);;\n+    (*regs).edx = cast(*task_ptr);\n     (*regs).esp = cast((**task_ptr).stack_ptr);\n \n     assert (ptr::null() != (**task_ptr).stack_ptr);\n@@ -116,8 +133,8 @@ fn spawn_inner(thunk: -fn(), notify: option<comm::chan<task_notification>>) ->\n     // set up notifications if they are enabled.\n     alt notify {\n       some(c) {\n-        (**task_ptr).notify_enabled = 1u8;;\n-        (**task_ptr).notify_chan = *c;\n+        (**task_ptr).notify_enabled = 1u32;;\n+        (**task_ptr).notify_chan = c;\n       }\n       none { }\n     };"}, {"sha": "e0d27cd1d5264ce945acaf67ad12dbbbad9cc13d", "filename": "src/lib/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -4,7 +4,7 @@\n // while providing a base that other test frameworks may build off of.\n \n import generic_os::getenv;\n-import task::task_id;\n+import task::task;\n \n export test_name;\n export test_fn;\n@@ -88,7 +88,7 @@ fn parse_opts(args: &[str]) : vec::is_not_empty(args) -> opt_res {\n \n tag test_result { tr_ok; tr_failed; tr_ignored; }\n \n-type joinable = (task_id, comm::port<task::task_notification>);\n+type joinable = (task, comm::port<task::task_notification>);\n \n // To get isolation and concurrency tests have to be run in their own tasks.\n // In cases where test functions and closures it is not ok to just dump them"}, {"sha": "c042f074aa26b5d843fa2d34432e87f3d6295f7d", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -64,7 +64,7 @@ void rust_chan::disassociate() {\n     port->chans.swap_delete(this);\n \n     // Delete reference to the port.\n-     port = NULL;\n+    port = NULL;\n \n     this->deref();\n }"}, {"sha": "42013ca1f5c1396d51dd53dc2802a3768e05a058", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -26,7 +26,8 @@ struct frame_glue_fns {\n // library. This struct must agree with the std::task::rust_task record.\n struct rust_task_user {\n     rust_task_id id;\n-    uint8_t notify_enabled;\n+    uint32_t notify_enabled;   // this is way more bits than necessary, but it\n+                               // simplifies the alignment.\n     chan_handle notify_chan;\n     context ctx;\n     uintptr_t rust_sp;         // Saved sp when not running."}, {"sha": "1531a3f61b299ba95a294d732cb7a845609260e1", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -21,30 +21,30 @@ import std::getopts;\n import std::task;\n import std::u64;\n import std::comm;\n-import std::comm::_port;\n-import std::comm::mk_port;\n-import std::comm::_chan;\n+import std::comm::port;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::recv;\n \n fn fib(n: int) -> int {\n-    fn pfib(c: _chan<int>, n: int) {\n+    fn pfib(c: chan<int>, n: int) {\n         if n == 0 {\n             send(c, 0);\n         } else if n <= 2 {\n             send(c, 1);\n         } else {\n-            let p = mk_port::<int>();\n+            let p = port();\n \n-            let t1 = task::_spawn(bind pfib(p.mk_chan(), n - 1));\n-            let t2 = task::_spawn(bind pfib(p.mk_chan(), n - 2));\n+            let t1 = task::spawn(bind pfib(chan(p), n - 1));\n+            let t2 = task::spawn(bind pfib(chan(p), n - 2));\n \n-            send(c, p.recv() + p.recv());\n+            send(c, recv(p) + recv(p));\n         }\n     }\n \n-    let p = mk_port();\n-    let t = task::_spawn(bind pfib(p.mk_chan(), n));\n-    ret p.recv();\n+    let p = port();\n+    let t = task::spawn(bind pfib(chan(p), n));\n+    ret recv(p);\n }\n \n type config = {stress: bool};\n@@ -74,9 +74,9 @@ fn stress_task(id: int) {\n fn stress(num_tasks: int) {\n     let tasks = [];\n     for each i: int in range(0, num_tasks) {\n-        tasks += [task::_spawn(bind stress_task(i))];\n+        tasks += [task::spawn_joinable(bind stress_task(i))];\n     }\n-    for t in tasks { task::join_id(t); }\n+    for t in tasks { task::join(t); }\n }\n \n fn main(argv: [str]) {\n@@ -97,7 +97,6 @@ fn main(argv: [str]) {\n \n             let out = io::stdout();\n \n-\n             for each n: int in range(1, max + 1) {\n                 for each i: int in range(0, num_trials) {\n                     let start = time::precise_time_ns();"}, {"sha": "9de5a71f9f41f100795ed35478d0971e00657753", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -22,11 +22,11 @@ import std::time;\n import std::u64;\n \n import std::task;\n-import std::task::task_id;\n+import std::task::joinable_task;\n import std::comm;\n-import std::comm::_chan;\n-import std::comm::_port;\n-import std::comm::mk_port;\n+import std::comm::chan;\n+import std::comm::port;\n+import std::comm::recv;\n import std::comm::send;\n \n fn map(filename: str, emit: map_reduce::putter) {\n@@ -61,37 +61,38 @@ mod map_reduce {\n     type reducer = fn(str, getter);\n \n     tag ctrl_proto {\n-        find_reducer([u8], _chan<_chan<reduce_proto>>);\n+        find_reducer([u8], chan<chan<reduce_proto>>);\n         mapper_done;\n     }\n \n     tag reduce_proto { emit_val(int); done; ref; release; }\n \n-    fn start_mappers(ctrl: _chan<ctrl_proto>, inputs: &[str]) -> [task_id] {\n+    fn start_mappers(ctrl: chan<ctrl_proto>, inputs: &[str])\n+        -> [joinable_task] {\n         let tasks = [];\n         for i: str in inputs {\n-            tasks += [task::spawn(bind map_task(ctrl, i))];\n+            tasks += [task::spawn_joinable(bind map_task(ctrl, i))];\n         }\n         ret tasks;\n     }\n \n-    fn map_task(ctrl: _chan<ctrl_proto>, input: str) {\n+    fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n         // log_err \"map_task \" + input;\n         let intermediates = map::new_str_hash();\n \n-        fn emit(im: &map::hashmap<str, _chan<reduce_proto>>,\n-                ctrl: _chan<ctrl_proto>, key: str, val: int) {\n+        fn emit(im: &map::hashmap<str, chan<reduce_proto>>,\n+                ctrl: chan<ctrl_proto>, key: str, val: int) {\n             let c;\n             alt im.find(key) {\n               some(_c) {\n \n                 c = _c\n               }\n               none. {\n-                let p = mk_port::<_chan<reduce_proto>>();\n+                let p = port();\n                 let keyi = str::bytes(key);\n-                send(ctrl, find_reducer(keyi, p.mk_chan()));\n-                c = p.recv();\n+                send(ctrl, find_reducer(keyi, chan(p)));\n+                c = recv(p);\n                 im.insert(key, c);\n                 send(c, ref);\n               }\n@@ -101,26 +102,26 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        for each kv: @{key: str, val: _chan<reduce_proto>} in\n+        for each kv: @{key: str, val: chan<reduce_proto>} in\n                  intermediates.items() {\n             send(kv.val, release);\n         }\n \n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task(key: str, out: _chan<_chan<reduce_proto>>) {\n-        let p = mk_port();\n+    fn reduce_task(key: str, out: chan<chan<reduce_proto>>) {\n+        let p = port();\n \n-        send(out, p.mk_chan());\n+        send(out, chan(p));\n \n         let ref_count = 0;\n         let is_done = false;\n \n-        fn get(p: &_port<reduce_proto>, ref_count: &mutable int,\n+        fn get(p: &port<reduce_proto>, ref_count: &mutable int,\n                is_done: &mutable bool) -> option<int> {\n             while !is_done || ref_count > 0 {\n-                alt p.recv() {\n+                alt recv(p) {\n                   emit_val(v) {\n                     // log_err #fmt(\"received %d\", v);\n                     ret some(v);\n@@ -140,21 +141,21 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port::<ctrl_proto>();\n+        let ctrl = port::<ctrl_proto>();\n \n         // This task becomes the master control task. It task::_spawns\n         // to do the rest.\n \n-        let reducers: map::hashmap<str, _chan<reduce_proto>>;\n+        let reducers: map::hashmap<str, chan<reduce_proto>>;\n \n         reducers = map::new_str_hash();\n \n-        let tasks = start_mappers(ctrl.mk_chan(), inputs);\n+        let tasks = start_mappers(chan(ctrl), inputs);\n \n         let num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {\n-            alt ctrl.recv() {\n+            alt recv(ctrl) {\n               mapper_done. {\n                 // log_err \"received mapper terminated.\";\n                 num_mappers -= 1;\n@@ -170,9 +171,10 @@ mod map_reduce {\n                   }\n                   none. {\n                     // log_err \"creating new reducer for \" + k;\n-                    let p = mk_port();\n-                    tasks += [task::spawn(bind reduce_task(k, p.mk_chan()))];\n-                    c = p.recv();\n+                    let p = port();\n+                    tasks +=\n+                        [task::spawn_joinable(bind reduce_task(k, chan(p)))];\n+                    c = recv(p);\n                     reducers.insert(k, c);\n                   }\n                 }\n@@ -181,12 +183,12 @@ mod map_reduce {\n             }\n         }\n \n-        for each kv: @{key: str, val: _chan<reduce_proto>} in reducers.items()\n+        for each kv: @{key: str, val: chan<reduce_proto>} in reducers.items()\n                  {\n             send(kv.val, done);\n         }\n \n-        for t in tasks { task::join_id(t); }\n+        for t in tasks { task::join(t); }\n     }\n }\n "}, {"sha": "9d112e7ada172c08b1cd966d9823058d05fbe3a5", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,4 +5,4 @@ import std::task;\n \n fn f(x: int) -> int { ret x; }\n \n-fn main() { task::_spawn(bind f(10)); }\n+fn main() { task::spawn(bind f(10)); }"}, {"sha": "778ade3ce64eaa42cfe46901f33110eb54d4b81d", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,13 +5,12 @@ import std::fs;\n import std::str;\n import std::vec;\n import std::task;\n-import std::task::task_id;\n \n import std::comm;\n-import std::comm::_port;\n-import std::comm::_chan;\n+import std::comm::port;\n+import std::comm::chan;\n import std::comm::send;\n-import std::comm::mk_port;\n+import std::comm::recv;\n \n import common::cx;\n import common::config;\n@@ -125,7 +124,7 @@ type tests_and_conv_fn =\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt[\"making tests from %s\", cx.config.src_base];\n-    let configport = mk_port::<[u8]>();\n+    let configport = port::<[u8]>();\n     let tests = [];\n     for file: str in fs::list_dir(cx.config.src_base) {\n         log #fmt[\"inspecting file %s\", file];\n@@ -156,10 +155,10 @@ fn is_test(config: &config, testfile: &str) -> bool {\n     ret valid;\n }\n \n-fn make_test(cx: &cx, testfile: &str, configport: &_port<[u8]>) ->\n+fn make_test(cx: &cx, testfile: &str, configport: &port<[u8]>) ->\n    test::test_desc {\n     {name: make_test_name(cx.config, testfile),\n-     fn: make_test_closure(testfile, configport.mk_chan()),\n+     fn: make_test_closure(testfile, chan(configport)),\n      ignore: header::is_test_ignored(cx.config, testfile)}\n }\n \n@@ -186,12 +185,12 @@ up. Then we'll spawn that data into another task and return the task.\n Really convoluted. Need to think up of a better definition for tests.\n */\n \n-fn make_test_closure(testfile: &str, configchan: _chan<[u8]>) ->\n+fn make_test_closure(testfile: &str, configchan: chan<[u8]>) ->\n    test::test_fn {\n     bind send_config(testfile, configchan)\n }\n \n-fn send_config(testfile: str, configchan: _chan<[u8]>) {\n+fn send_config(testfile: str, configchan: chan<[u8]>) {\n     send(configchan, str::bytes(testfile));\n }\n \n@@ -205,10 +204,10 @@ break up the config record and pass everything individually to the spawned\n function.\n */\n \n-fn closure_to_task(cx: cx, configport: _port<[u8]>, testfn: &fn()) ->\n+fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: &fn()) ->\n    test::joinable {\n     testfn();\n-    let testfile = configport.recv();\n+    let testfile = recv(configport);\n     let testthunk =\n         bind run_test_task(cx.config.compile_lib_path, cx.config.run_lib_path,\n                            cx.config.rustc_path, cx.config.src_base,"}, {"sha": "03fbb9cb1a460418e2b5436174ab12640599c559", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -6,7 +6,6 @@\n \n import std::option;\n import std::task;\n-import std::task::task_id;\n import std::generic_os::setenv;\n import std::generic_os::getenv;\n import std::vec;\n@@ -28,7 +27,8 @@ export reqchan;\n \n type reqchan = chan<request>;\n \n-type handle = {task: option::t<task_id>, chan: reqchan};\n+type handle = {task: option::t<(task::task, port<task::task_notification>)>,\n+    chan: reqchan};\n \n tag request { exec([u8], [u8], [[u8]], chan<response>); stop; }\n \n@@ -37,20 +37,20 @@ type response = {pid: int, infd: int, outfd: int, errfd: int};\n fn mk() -> handle {\n     let setupport = port();\n     let task =\n-        task::spawn(bind fn (setupchan: chan<chan<request>>) {\n-                             let reqport = port();\n-                             let reqchan = chan(reqport);\n-                             send(setupchan, reqchan);\n-                             worker(reqport);\n-                         }(chan(setupport)));\n+        task::spawn_joinable(bind fn (setupchan: chan<chan<request>>) {\n+            let reqport = port();\n+            let reqchan = chan(reqport);\n+            send(setupchan, reqchan);\n+            worker(reqport);\n+        }(chan(setupport)));\n     ret {task: option::some(task), chan: recv(setupport)};\n }\n \n fn from_chan(ch: &reqchan) -> handle { {task: option::none, chan: ch} }\n \n fn close(handle: &handle) {\n     send(handle.chan, stop);\n-    task::join_id(option::get(handle.task));\n+    task::join(option::get(handle.task));\n }\n \n fn run(handle: &handle, lib_path: &str, prog: &str, args: &[str],"}, {"sha": "033a3bc9ec2e14e63e086ee561b297f4788b2f69", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,13 +5,14 @@\n \n use std;\n import std::task;\n-import std::comm::mk_port;\n+import std::comm::port;\n+import std::comm::recv;\n \n fn child() { assert (1 == 2); }\n \n fn main() {\n-    let p = mk_port::<int>();\n+    let p = port::<int>();\n     let f = child;\n-    task::_spawn(f);\n-    let x = p.recv();\n+    task::spawn(f);\n+    let x = recv(p);\n }"}, {"sha": "65b15b56d72767fd1717e04706f77542483db0ff", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,16 +1,17 @@\n // error-pattern:meep\n use std;\n-import std::comm::_chan;\n-import std::comm::mk_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n+import std::comm::recv;\n \n-fn echo<~T>(c: &_chan<T>, oc: &_chan<_chan<T>>) {\n+fn echo<~T>(c: &chan<T>, oc: &chan<chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n-    let p = mk_port::<T>();\n-    send(oc, p.mk_chan());\n+    let p = port::<T>();\n+    send(oc, chan(p));\n \n-    let x = p.recv();\n+    let x = recv(p);\n     send(c, x);\n }\n "}, {"sha": "73dd54e8207b34b41962d5ad9238e8d2d00348bb", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,24 +1,25 @@\n // -*- rust -*-\n \n use std;\n-import std::comm::_chan;\n-import std::comm::mk_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n+import std::comm::recv;\n import std::task;\n \n-fn a(c: _chan<int>) { send(c, 10); }\n+fn a(c: chan<int>) { send(c, 10); }\n \n fn main() {\n-    let p = mk_port();\n-    task::_spawn(bind a(p.mk_chan()));\n-    task::_spawn(bind b(p.mk_chan()));\n+    let p = port();\n+    task::spawn(bind a(chan(p)));\n+    task::spawn(bind b(chan(p)));\n     let n: int = 0;\n-    n = p.recv();\n-    n = p.recv();\n+    n = recv(p);\n+    n = recv(p);\n     //    log \"Finished.\";\n }\n \n-fn b(c: _chan<int>) {\n+fn b(c: chan<int>) {\n     //    log \"task b0\";\n     //    log \"task b1\";\n     //    log \"task b2\";"}, {"sha": "9033d8de3f8d15eff83cfa44fca9a796a477acd1", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,22 +3,23 @@\n use std;\n import std::comm;\n import std::comm::send;\n-import std::comm::_chan;\n+import std::comm::chan;\n+import std::comm::recv;\n import std::task;\n \n-fn a(c: _chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n+fn a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n \n fn main() {\n-    let p = comm::mk_port();\n-    task::_spawn(bind a(p.mk_chan()));\n-    task::_spawn(bind b(p.mk_chan()));\n+    let p = comm::port();\n+    task::spawn(bind a(chan(p)));\n+    task::spawn(bind b(chan(p)));\n     let n: int = 0;\n-    n = p.recv();\n-    n = p.recv();\n+    n = recv(p);\n+    n = recv(p);\n     log \"Finished.\";\n }\n \n-fn b(c: _chan<int>) {\n+fn b(c: chan<int>) {\n     log \"task b0\";\n     log \"task b1\";\n     log \"task b2\";"}, {"sha": "6a9ebc262da7428db7abf9cf34a9f94cd86a6a29", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,10 +3,11 @@\n use std;\n import std::comm;\n import std::comm::send;\n-import std::comm::_chan;\n+import std::comm::chan;\n+import std::comm::recv;\n import std::task;\n \n-fn a(c: _chan<int>) {\n+fn a(c: chan<int>) {\n     if true {\n         log \"task a\";\n         log \"task a\";\n@@ -24,19 +25,19 @@ fn g(x: int, y: str) -> int { log x; log y; let z: int = k(1); ret z; }\n fn main() {\n     let n: int = 2 + 3 * 7;\n     let s: str = \"hello there\";\n-    let p = comm::mk_port();\n-    task::_spawn(bind a(p.mk_chan()));\n-    task::_spawn(bind b(p.mk_chan()));\n+    let p = comm::port();\n+    task::spawn(bind a(chan(p)));\n+    task::spawn(bind b(chan(p)));\n     let x: int = 10;\n     x = g(n, s);\n     log x;\n-    n = p.recv();\n-    n = p.recv();\n+    n = recv(p);\n+    n = recv(p);\n     // FIXME: use signal-channel for this.\n     log \"children finished, root finishing\";\n }\n \n-fn b(c: _chan<int>) {\n+fn b(c: chan<int>) {\n     if true {\n         log \"task b\";\n         log \"task b\";"}, {"sha": "d64c2dd1fabf041b638218efeb9df5bc9ddee25c", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -61,17 +61,20 @@ fn test_box() {\n }\n \n fn test_port() {\n-    let p1 = comm::mk_port::<int>();\n-    let p2 = comm::mk_port::<int>();\n+    // FIXME: Re-enable this once we can compare resources.\n+    /*\n+    let p1 = comm::port::<int>();\n+    let p2 = comm::port::<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n+    */\n }\n \n fn test_chan() {\n-    let p: comm::_port<int> = comm::mk_port();\n-    let ch1 = p.mk_chan();\n-    let ch2 = p.mk_chan();\n+    let p: comm::port<int> = comm::port();\n+    let ch1 = comm::chan(p);\n+    let ch2 = comm::chan(p);\n \n     assert (ch1 == ch1);\n     // Chans are equal because they are just task:port addresses."}, {"sha": "3ab723b3d6be4c36f1ac7893e226e8e0772d0e92", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,36 +2,37 @@\n \n use std;\n import std::task;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n import std::comm;\n-import std::comm::mk_port;\n+import std::comm::port;\n+import std::comm::recv;\n \n-tag request { quit; close(_chan<bool>); }\n+tag request { quit; close(chan<bool>); }\n \n-type ctx = _chan<request>;\n+type ctx = chan<request>;\n \n-fn request_task(c: _chan<ctx>) {\n-    let p = mk_port();\n-    send(c, p.mk_chan());\n+fn request_task(c: chan<ctx>) {\n+    let p = port();\n+    send(c, chan(p));\n     let req: request;\n-    req = p.recv();\n+    req = recv(p);\n     // Need to drop req before receiving it again\n-    req = p.recv();\n+    req = recv(p);\n }\n \n fn new() -> ctx {\n-    let p = mk_port();\n-    let t = task::_spawn(bind request_task(p.mk_chan()));\n+    let p = port();\n+    let t = task::spawn(bind request_task(chan(p)));\n     let cx: ctx;\n-    cx = p.recv();\n+    cx = recv(p);\n     ret cx;\n }\n \n fn main() {\n     let cx = new();\n \n-    let p = mk_port::<bool>();\n-    send(cx, close(p.mk_chan()));\n+    let p = port::<bool>();\n+    send(cx, close(chan(p)));\n     send(cx, quit);\n }"}, {"sha": "12aec5b8ad8af1d36e6e9e8362e1044b08ffb9c6", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,4 +5,4 @@ import std::task;\n \n fn child2(s: str) { }\n \n-fn main() { let x = task::_spawn(bind child2(\"hi\")); }\n+fn main() { let x = task::spawn(bind child2(\"hi\")); }"}, {"sha": "fbefc8990312273b13b4c71a759d635c7c472cb8", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,20 +2,21 @@\n \n use std;\n import std::comm;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::recv;\n import std::task;\n \n fn main() {\n-    let p = comm::mk_port();\n-    let t = task::_spawn(bind child(p.mk_chan()));\n-    let y = p.recv();\n+    let p = comm::port();\n+    let t = task::spawn(bind child(chan(p)));\n+    let y = recv(p);\n     log_err \"received\";\n     log_err y;\n     assert (y == 10);\n }\n \n-fn child(c: _chan<int>) {\n+fn child(c: chan<int>) {\n     log_err \"sending\";\n     send(c, 10);\n     log_err \"value sent\""}, {"sha": "72ae74c04cedb85cc13eafb38d3011b962b7aa48", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,16 +1,18 @@\n // -*- rust -*-\n \n use std;\n-import std::comm::mk_port;\n+import std::comm::port;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::recv;\n \n fn main() {\n-    let po = mk_port();\n-    let ch = po.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n     send(ch, 10);\n-    let i = po.recv();\n+    let i = recv(po);\n     assert (i == 10);\n     send(ch, 11);\n-    let j = po.recv();\n+    let j = recv(po);\n     assert (j == 11);\n }"}, {"sha": "ac26798247a00d8ff3cce69824ccabcd5b2bb53c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -13,10 +13,10 @@ import std::str;\n import std::vec;\n import std::map;\n import std::task;\n-import std::comm::_chan;\n-import std::comm::_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n-import std::comm::mk_port;\n+import std::comm::recv;\n import std::comm;\n \n fn map(filename: str, emit: map_reduce::putter) { emit(filename, \"1\"); }\n@@ -30,27 +30,27 @@ mod map_reduce {\n \n     type mapper = fn(str, putter);\n \n-    tag ctrl_proto { find_reducer([u8], _chan<int>); mapper_done; }\n+    tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n \n-    fn start_mappers(ctrl: _chan<ctrl_proto>, inputs: &[str]) {\n-        for i: str in inputs { task::_spawn(bind map_task(ctrl, i)); }\n+    fn start_mappers(ctrl: chan<ctrl_proto>, inputs: &[str]) {\n+        for i: str in inputs { task::spawn(bind map_task(ctrl, i)); }\n     }\n \n-    fn map_task(ctrl: _chan<ctrl_proto>, input: str) {\n+    fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n \n         let intermediates = map::new_str_hash();\n \n-        fn emit(im: &map::hashmap<str, int>, ctrl: _chan<ctrl_proto>,\n+        fn emit(im: &map::hashmap<str, int>, ctrl: chan<ctrl_proto>,\n                 key: str, val: str) {\n             let c;\n             alt im.find(key) {\n               some(_c) { c = _c }\n               none. {\n-                let p = mk_port();\n+                let p = port();\n                 log_err \"sending find_reducer\";\n-                send(ctrl, find_reducer(str::bytes(key), p.mk_chan()));\n+                send(ctrl, find_reducer(str::bytes(key), chan(p)));\n                 log_err \"receiving\";\n-                c = p.recv();\n+                c = recv(p);\n                 log_err c;\n                 im.insert(key, c);\n               }\n@@ -62,7 +62,7 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port::<ctrl_proto>();\n+        let ctrl = port();\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n@@ -71,12 +71,12 @@ mod map_reduce {\n \n         reducers = map::new_str_hash();\n \n-        start_mappers(ctrl.mk_chan(), inputs);\n+        start_mappers(chan(ctrl), inputs);\n \n         let num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {\n-            alt ctrl.recv() {\n+            alt recv(ctrl) {\n               mapper_done. { num_mappers -= 1; }\n               find_reducer(k, cc) {\n                 let c;"}, {"sha": "8285b5e1f3b4a6e1b4cae238cb40cf329ea4505b", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -11,4 +11,4 @@ native \"rust\" mod rustrt {\n \n fn yield_wrap() { rustrt::task_yield(); }\n \n-fn main() { let f = yield_wrap; task::_spawn(f); }\n+fn main() { let f = yield_wrap; task::spawn(f); }"}, {"sha": "ba4e04bfe7af2f69f387c37618080b9e0e5024e9", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -8,28 +8,30 @@\n use std;\n \n import std::task;\n-import std::task::join_id;\n+import std::task::join;\n import std::comm;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::port;\n+import std::comm::recv;\n \n-fn grandchild(c: _chan<int>) { send(c, 42); }\n+fn grandchild(c: chan<int>) { send(c, 42); }\n \n-fn child(c: _chan<int>) {\n-    let _grandchild = task::_spawn(bind grandchild(c));\n-    join_id(_grandchild);\n+fn child(c: chan<int>) {\n+    let _grandchild = task::spawn_joinable(bind grandchild(c));\n+    join(_grandchild);\n }\n \n fn main() {\n-    let p = comm::mk_port();\n+    let p = comm::port();\n \n-    let _child = task::_spawn(bind child(p.mk_chan()));\n+    let _child = task::spawn_joinable(bind child(chan(p)));\n \n-    let x: int = p.recv();\n+    let x: int = recv(p);\n \n     log x;\n \n     assert (x == 42);\n \n-    join_id(_child);\n+    join(_child);\n }"}, {"sha": "65cdfd899a8f360effe0cb2f6b35a773e4c213a2", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,25 +2,25 @@ use std;\n import std::vec;\n import std::task;\n import std::comm;\n-import std::comm::_chan;\n-import std::comm::_port;\n-import std::comm::mk_port;\n+import std::comm::chan;\n+import std::comm::port;\n+import std::comm::recv;\n import std::comm::send;\n \n tag msg { closed; received([u8]); }\n \n-fn producer(c: _chan<[u8]>) {\n+fn producer(c: chan<[u8]>) {\n     send(c, [1u8, 2u8, 3u8, 4u8]);\n     let empty: [u8] = [];\n     send(c, empty);\n }\n \n-fn packager(cb: _chan<_chan<[u8]>>, msg: _chan<msg>) {\n-    let p: _port<[u8]> = mk_port();\n-    send(cb, p.mk_chan());\n+fn packager(cb: chan<chan<[u8]>>, msg: chan<msg>) {\n+    let p: port<[u8]> = port();\n+    send(cb, chan(p));\n     while true {\n         log \"waiting for bytes\";\n-        let data = p.recv();\n+        let data = recv(p);\n         log \"got bytes\";\n         if vec::len(data) == 0u { log \"got empty bytes, quitting\"; break; }\n         log \"sending non-empty buffer of length\";\n@@ -34,16 +34,16 @@ fn packager(cb: _chan<_chan<[u8]>>, msg: _chan<msg>) {\n }\n \n fn main() {\n-    let p: _port<msg> = mk_port();\n-    let recv_reader: _port<_chan<[u8]>> = mk_port();\n+    let p: port<msg> = port();\n+    let recv_reader: port<chan<[u8]>> = port();\n     let pack =\n-        task::_spawn(bind packager(recv_reader.mk_chan(), p.mk_chan()));\n+        task::spawn(bind packager(chan(recv_reader), chan(p)));\n \n-    let source_chan: _chan<[u8]> = recv_reader.recv();\n-    let prod = task::_spawn(bind producer(source_chan));\n+    let source_chan: chan<[u8]> = recv(recv_reader);\n+    let prod = task::spawn(bind producer(source_chan));\n \n     while true {\n-        let msg = p.recv();\n+        let msg = recv(p);\n         alt msg {\n           closed. { log \"Got close message\"; break; }\n           received(data) {"}, {"sha": "dc91cd8306c0974c7f7583d358aec3a2ac2e9f59", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,20 +2,20 @@ use std;\n \n import std::task;\n import std::comm;\n-import std::comm::_chan;\n-import std::comm::_port;\n-import std::comm::mk_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n+import std::comm::recv;\n \n-fn producer(c: _chan<[u8]>) {\n+fn producer(c: chan<[u8]>) {\n     send(c,\n          [1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);\n }\n \n fn main() {\n-    let p: _port<[u8]> = mk_port();\n-    let prod = task::_spawn(bind producer(p.mk_chan()));\n+    let p: port<[u8]> = port();\n+    let prod = task::spawn(bind producer(chan(p)));\n \n-    let data: [u8] = p.recv();\n+    let data: [u8] = recv(p);\n }"}, {"sha": "3c276a08d7088fdbe482a51e66dcc2c969be3ac6", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -6,10 +6,10 @@ import std::task::*;\n \n fn main() {\n     let f = child;\n-    let other = _spawn(f);\n+    let other = spawn_joinable(f);\n     log_err \"1\";\n     yield();\n-    join_id(other);\n+    join(other);\n     log_err \"3\";\n }\n "}, {"sha": "b5cd9dabdac746662f513bf81593b9dc5163dee1", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,20 +5,20 @@ import std::task;\n import std::comm::*;\n \n fn main() {\n-    let p = mk_port();\n+    let p = port();\n     let y: int;\n \n-    task::_spawn(bind child(p.mk_chan()));\n-    y = p.recv();\n+    task::spawn(bind child(chan(p)));\n+    y = recv(p);\n     log \"received 1\";\n     log y;\n     assert (y == 10);\n \n-    task::_spawn(bind child(p.mk_chan()));\n-    y = p.recv();\n+    task::spawn(bind child(chan(p)));\n+    y = recv(p);\n     log \"received 2\";\n     log y;\n     assert (y == 10);\n }\n \n-fn child(c: _chan<int>) { send(c, 10); }\n+fn child(c: chan<int>) { send(c, 10); }"}, {"sha": "e7e6e16bc29160d0e0e76446f5eb9f88de6e4d38", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -4,21 +4,21 @@ use std;\n import std::task;\n import std::comm;\n \n-fn sub(parent: comm::_chan<int>, id: int) {\n+fn sub(parent: comm::chan<int>, id: int) {\n     if id == 0 {\n         comm::send(parent, 0);\n     } else {\n-        let p = comm::mk_port();\n-        let child = task::_spawn(bind sub(p.mk_chan(), id - 1));\n-        let y = p.recv();\n+        let p = comm::port();\n+        let child = task::spawn(bind sub(comm::chan(p), id - 1));\n+        let y = comm::recv(p);\n         comm::send(parent, y + 1);\n     }\n }\n \n fn main() {\n-    let p = comm::mk_port();\n-    let child = task::_spawn(bind sub(p.mk_chan(), 200));\n-    let y = p.recv();\n+    let p = comm::port();\n+    let child = task::spawn(bind sub(comm::chan(p), 200));\n+    let y = comm::recv(p);\n     log \"transmission complete\";\n     log y;\n     assert (y == 200);"}, {"sha": "8b5dd2121f0d7fcdb7098f77367a02f43d18dc4d", "filename": "src/test/run-pass/obj-docs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-docs.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,9 +1,9 @@\n // Sanity-check the code examples that appear in the object system\n // documentation.\n use std;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n-import std::comm::mk_port;\n+import std::comm::port;\n \n fn main() {\n \n@@ -40,16 +40,16 @@ fn main() {\n         fn take(y: int) { *x += y; }\n     }\n \n-    obj sender(c: _chan<int>) {\n+    obj sender(c: chan<int>) {\n         fn take(z: int) { send(c, z); }\n     }\n \n     fn give_ints(t: taker) { t.take(1); t.take(2); t.take(3); }\n \n-    let p = mk_port::<int>();\n+    let p = port();\n \n     let t1: taker = adder(@mutable 0);\n-    let t2: taker = sender(p.mk_chan());\n+    let t2: taker = sender(chan(p));\n \n     give_ints(t1);\n     give_ints(t2);"}, {"sha": "a2706d3ba26146c1ea45adc99484b379c0c56a39", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -6,8 +6,10 @@ use std;\n import std::option;\n import std::uint;\n import std::comm;\n-import std::comm::mk_port;\n+import std::comm::port;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::recv;\n \n // A 12-byte unit to send over the channel\n type record = {val1: u32, val2: u32, val3: u32};\n@@ -18,8 +20,8 @@ type record = {val1: u32, val2: u32, val3: u32};\n // power of two so needs to be rounded up. Don't trigger any\n // assertions.\n fn test_init() {\n-    let myport = mk_port::<record>();\n-    let mychan = myport.mk_chan();\n+    let myport = port();\n+    let mychan = chan(myport);\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n     send(mychan, val);\n }\n@@ -28,8 +30,8 @@ fn test_init() {\n // Dump lots of items into the channel so it has to grow.\n // Don't trigger any assertions.\n fn test_grow() {\n-    let myport: comm::_port<record> = comm::mk_port();\n-    let mychan = myport.mk_chan();\n+    let myport = port();\n+    let mychan = chan(myport);\n     for each i: uint in uint::range(0u, 100u) {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n@@ -39,31 +41,31 @@ fn test_grow() {\n \n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n-    let myport = comm::mk_port::<i8>();\n-    let mychan = myport.mk_chan();\n+    let myport = port();\n+    let mychan = chan(myport);\n     send(mychan, 0i8);\n-    let x = myport.recv();\n+    let x = recv(myport);\n }\n \n fn test_shrink2() {\n-    let myport = mk_port::<record>();\n-    let mychan = myport.mk_chan();\n+    let myport = port();\n+    let mychan = chan(myport);\n     for each i: uint in uint::range(0u, 100u) {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n     }\n-    for each i: uint in uint::range(0u, 100u) { let x = myport.recv(); }\n+    for each i: uint in uint::range(0u, 100u) { let x = recv(myport); }\n }\n \n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n-    let myport = mk_port::<record>();\n-    let mychan = myport.mk_chan();\n+    let myport = port();\n+    let mychan = chan(myport);\n     for each i: uint in uint::range(0u, 100u) {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n         send(mychan, val);\n-        let x = myport.recv();\n+        let x = recv(myport);\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n@@ -74,16 +76,16 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = mk_port::<record>();\n-    let mychan = myport.mk_chan();\n+    let myport = port::<record>();\n+    let mychan = chan(myport);\n     for each j: uint in uint::range(0u, 10u) {\n         for each i: uint in uint::range(0u, 10u) {\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n             send(mychan, val);\n         }\n         for each i: uint in uint::range(0u, 10u) {\n-            let x = myport.recv();\n+            let x = recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);"}, {"sha": "fdaa6703c1735877f7f5024d94788e5114bb49fd", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -7,9 +7,9 @@ import std::task;\n fn x(s: str, n: int) { log s; log n; }\n \n fn main() {\n-    task::_spawn(bind x(\"hello from first spawned fn\", 65));\n-    task::_spawn(bind x(\"hello from second spawned fn\", 66));\n-    task::_spawn(bind x(\"hello from third spawned fn\", 67));\n+    task::spawn(bind x(\"hello from first spawned fn\", 65));\n+    task::spawn(bind x(\"hello from second spawned fn\", 66));\n+    task::spawn(bind x(\"hello from third spawned fn\", 67));\n     let i: int = 30;\n     while i > 0 { i = i - 1; log \"parent sleeping\"; yield(); }\n }"}, {"sha": "e5775550c44e506892781eceea9dacfdded38c01", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,8 +1,12 @@\n use std;\n-import std::task::join_id;\n-import std::task::_spawn;\n+import std::task::join;\n+import std::task::spawn_joinable;\n+\n+fn main() {\n+    let x = spawn_joinable(bind m::child(10));\n+    join(x);\n+}\n \n-fn main() { let x = _spawn(bind m::child(10)); join_id(x); }\n mod m {\n     fn child(i: int) { log i; }\n }"}, {"sha": "72de8120cd1a198b0e65d1394d9458d7184162fc", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -10,11 +10,11 @@ import std::str;\n import std::comm;\n import std::task;\n \n-type ctx = comm::_chan<int>;\n+type ctx = comm::chan<int>;\n \n fn iotask(cx: ctx, ip: str) { assert (str::eq(ip, \"localhost\")); }\n \n fn main() {\n-    let p = comm::mk_port::<int>();\n-    task::_spawn(bind iotask(p.mk_chan(), \"localhost\"));\n+    let p = comm::port::<int>();\n+    task::spawn(bind iotask(comm::chan(p), \"localhost\"));\n }"}, {"sha": "9086b7d0e37e118110bc737317a4a87b483a473e", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -4,7 +4,10 @@ use std;\n \n import std::task;\n \n-fn main() { let t = task::_spawn(bind child(10)); task::join_id(t); }\n+fn main() {\n+    let t = task::spawn_joinable(bind child(10));\n+    task::join(t);\n+}\n \n fn child(i: int) { log_err i; assert (i == 10); }\n "}, {"sha": "b6713cfaf312896989067ceba49bd78fc10379ff", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,9 +1,9 @@\n // -*- rust -*-\n \n use std;\n-import std::task::_spawn;\n+import std::task::spawn;\n \n-fn main() { _spawn(bind child(10, 20, 30, 40, 50, 60, 70, 80, 90)); }\n+fn main() { spawn(bind child(10, 20, 30, 40, 50, 60, 70, 80, 90)); }\n \n fn child(i1: int, i2: int, i3: int, i4: int, i5: int, i6: int, i7: int,\n          i8: int, i9: int) {"}, {"sha": "12ddbd644dbf9852ff4859746b36f82929813739", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,15 +1,15 @@\n use std;\n \n-import std::task::spawn;\n-import std::task::join_id;\n+import std::task::spawn_joinable;\n+import std::task::join;\n \n fn main() { test00(); }\n \n fn start() { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let f = start;\n-    let t = spawn(f);\n-    join_id(t);\n+    let t = spawn_joinable(f);\n+    join(t);\n     log \"Completing.\";\n }"}, {"sha": "2a46121b9746b2b14c223e95bbd7718ad01c04ef", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,13 +3,13 @@ use std;\n import std::comm;\n import std::task;\n \n-fn start(c: comm::_chan<comm::_chan<int>>) {\n-    let p: comm::_port<int> = comm::mk_port();\n-    comm::send(c, p.mk_chan());\n+fn start(c: comm::chan<comm::chan<int>>) {\n+    let p: comm::port<int> = comm::port();\n+    comm::send(c, comm::chan(p));\n }\n \n fn main() {\n-    let p = comm::mk_port::<comm::_chan<int>>();\n-    let child = task::_spawn(bind start(p.mk_chan()));\n-    let c = p.recv();\n+    let p = comm::port();\n+    let child = task::spawn(bind start(comm::chan(p)));\n+    let c = comm::recv(p);\n }"}, {"sha": "ab3697d10571732c4e99778075ace8a5a604d22b", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -7,13 +7,13 @@ fn start(task_number: int) { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let i: int = 0;\n-    let t = task::_spawn(bind start(i));\n+    let t = task::spawn_joinable(bind start(i));\n \n     // Sleep long enough for the task to finish.\n     task::sleep(10000u);\n \n     // Try joining tasks that have already finished.\n-    task::join_id(t);\n+    task::join(t);\n \n     log \"Joined task.\";\n }"}, {"sha": "c5b5c75e98e9699042b38db3163ad721eac7e89a", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,15 +3,15 @@ import std::task;\n import std::comm;\n import std::comm::send;\n \n-fn start(c: comm::_chan<int>, start: int, number_of_messages: int) {\n+fn start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }\n }\n \n fn main() {\n     log \"Check that we don't deadlock.\";\n-    let p: comm::_port<int> = comm::mk_port();\n-    let a = task::_spawn(bind start(p.mk_chan(), 0, 10));\n-    task::join_id(a);\n+    let p = comm::port();\n+    let a = task::spawn_joinable(bind start(comm::chan(p), 0, 10));\n+    task::join(a);\n     log \"Joined task\";\n }"}, {"sha": "2b89d8fde383d99e3a400a0888eacb92423e8b33", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -9,11 +9,11 @@ fn start(c: comm::chan<int>, n: int) {\n }\n \n fn main() {\n-    let p = comm::mk_port();\n+    let p = comm::port();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    let child = task::spawn(bind start(p.mk_chan(), 10));\n-    let c = p.recv();\n+    let child = task::spawn(bind start(comm::chan(p), 10));\n+    let c = comm::recv(p);\n }"}, {"sha": "e6e253ef9bb571f67a69632eeb8fb36ebfe8102c", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,30 +3,31 @@\n use std;\n import std::comm;\n import std::comm::send;\n-import std::comm::mk_port;\n+import std::comm::port;\n+import std::comm::recv;\n+import std::comm::chan;\n \n // Tests of ports and channels on various types\n fn test_rec() {\n     type r = {val0: int, val1: u8, val2: char};\n \n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = comm::port();\n+    let ch = chan(po);\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n     send(ch, r0);\n     let r1: r;\n-    r1 = po.recv();\n+    r1 = recv(po);\n     assert (r1.val0 == 0);\n     assert (r1.val1 == 1u8);\n     assert (r1.val2 == '2');\n }\n \n fn test_vec() {\n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n     let v0: [int] = [0, 1, 2];\n     send(ch, v0);\n-    let v1: [int];\n-    v1 = po.recv();\n+    let v1 = recv(po);\n     assert (v1[0] == 0);\n     assert (v1[1] == 1);\n     assert (v1[2] == 2);\n@@ -50,33 +51,33 @@ fn test_str() {\n \n fn test_tag() {\n     tag t { tag1; tag2(int); tag3(int, u8, char); }\n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n     send(ch, tag1);\n     send(ch, tag2(10));\n     send(ch, tag3(10, 11u8, 'A'));\n     // FIXME: Do port semantics really guarantee these happen in order?\n     let t1: t;\n-    t1 = po.recv();\n+    t1 = recv(po);\n     assert (t1 == tag1);\n-    t1 = po.recv();\n+    t1 = recv(po);\n     assert (t1 == tag2(10));\n-    t1 = po.recv();\n+    t1 = recv(po);\n     assert (t1 == tag3(10, 11u8, 'A'));\n }\n \n fn test_chan() {\n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n-    let po0 = comm::mk_port();\n-    let ch0 = po0.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n+    let po0 = port();\n+    let ch0 = chan(po0);\n     send(ch, ch0);\n-    let ch1 = po.recv();\n+    let ch1 = recv(po);\n     // Does the transmitted channel still work?\n \n     send(ch1, 10);\n     let i: int;\n-    i = po0.recv();\n+    i = recv(po0);\n     assert (i == 10);\n }\n "}, {"sha": "ef4458a23312d11f90f3cd5ee8a68fe89c31b8fd", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,14 +2,14 @@\n \n use std;\n import std::task;\n-import std::task::task_id;\n import std::comm;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n+import std::comm::recv;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn test00_start(ch: _chan<int>, message: int, count: int) {\n+fn test00_start(ch: chan<int>, message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count {\n@@ -26,31 +26,32 @@ fn test00() {\n \n     log \"Creating tasks\";\n \n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = comm::port();\n+    let ch = chan(po);\n \n     let i: int = 0;\n \n     // Create and spawn tasks...\n     let tasks = [];\n     while i < number_of_tasks {\n-        tasks += [task::_spawn(bind test00_start(ch, i, number_of_messages))];\n+        let thunk = bind test00_start(ch, i, number_of_messages);\n+        tasks += [task::spawn_joinable(thunk)];\n         i = i + 1;\n     }\n \n     // Read from spawned tasks...\n     let sum = 0;\n-    for t: task_id in tasks {\n+    for t in tasks {\n         i = 0;\n         while i < number_of_messages {\n-            let value = po.recv();\n+            let value = recv(po);\n             sum += value;\n             i = i + 1;\n         }\n     }\n \n     // Join spawned tasks...\n-    for t: task_id in tasks { task::join_id(t); }\n+    for t in tasks { task::join(t); }\n \n     log \"Completed: Final number is: \";\n     log_err sum;"}, {"sha": "a0b0195aadcedafd5bab22724ee1a91726f99e25", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -7,38 +7,38 @@ fn main() { test00(); }\n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n-    let c = p.mk_chan();\n+    let p = comm::port();\n+    let c = comm::chan(p);\n     send(c, 1);\n     send(c, 2);\n     send(c, 3);\n     send(c, 4);\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n     send(c, 5);\n     send(c, 6);\n     send(c, 7);\n     send(c, 8);\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n-    r = p.recv();\n+    r = comm::recv(p);\n     sum += r;\n     log r;\n     assert (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);"}, {"sha": "ae966834d2b018a270799ada2d09e4a7bbb2e8db", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -6,12 +6,12 @@ fn main() { test00(); }\n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n-    let c = p.mk_chan();\n+    let p = comm::port();\n+    let c = comm::chan(p);\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n     i = 0;\n-    while i < number_of_messages { r = p.recv(); sum += r; i += 1; }\n+    while i < number_of_messages { sum += comm::recv(p); i += 1; }\n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "d01a81a365841e7f8dc8a52b5ffa738929deeda4", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,17 +1,19 @@\n use std;\n import std::comm;\n import std::comm::send;\n+import comm::chan;\n+import comm::recv;\n \n fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n-    let c0 = p.mk_chan();\n-    let c1 = p.mk_chan();\n-    let c2 = p.mk_chan();\n-    let c3 = p.mk_chan();\n+    let p = comm::port();\n+    let c0 = chan(p);\n+    let c1 = chan(p);\n+    let c2 = chan(p);\n+    let c3 = chan(p);\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n     while i < number_of_messages {\n@@ -23,13 +25,13 @@ fn test00() {\n     }\n     i = 0;\n     while i < number_of_messages {\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n         i += 1;\n     }"}, {"sha": "8209eb4f92e790e875254577549f55d41ac15cd5", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,50 +1,57 @@\n use std;\n import std::task;\n import std::comm;\n+import comm::chan;\n+import comm::recv;\n+import comm::port;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::_chan<int>, start: int, number_of_messages: int) {\n+fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n+    let p = port();\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 0,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(chan(p),\n+                                               number_of_messages * 0,\n+                                               number_of_messages));\n     let t1 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 1,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(chan(p),\n+                                               number_of_messages * 1,\n+                                               number_of_messages));\n     let t2 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 2,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(chan(p),\n+                                               number_of_messages * 2,\n+                                               number_of_messages));\n     let t3 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 3,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(chan(p),\n+                                               number_of_messages * 3,\n+                                               number_of_messages));\n \n     let i: int = 0;\n     while i < number_of_messages {\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = recv(p);\n         sum += r;\n         i += 1;\n     }\n \n-    task::join_id(t0);\n-    task::join_id(t1);\n-    task::join_id(t2);\n-    task::join_id(t3);\n+    task::join(t0);\n+    task::join(t1);\n+    task::join(t2);\n+    task::join(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n }"}, {"sha": "b61fbe574877aeaeb398ba51db964c70f9fea3c2", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -4,47 +4,51 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::_chan<int>, start: int, number_of_messages: int) {\n+fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n+    let p = comm::port();\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 0,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(comm::chan(p),\n+                                               number_of_messages * 0,\n+                                               number_of_messages));\n     let t1 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 1,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(comm::chan(p),\n+                                               number_of_messages * 1,\n+                                               number_of_messages));\n     let t2 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 2,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(comm::chan(p),\n+                                               number_of_messages * 2,\n+                                               number_of_messages));\n     let t3 =\n-        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 3,\n-                                       number_of_messages));\n+        task::spawn_joinable(bind test00_start(comm::chan(p),\n+                                               number_of_messages * 3,\n+                                               number_of_messages));\n \n     let i: int = 0;\n     while i < number_of_messages {\n-        r = p.recv();\n+        r = comm::recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = comm::recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = comm::recv(p);\n         sum += r;\n-        r = p.recv();\n+        r = comm::recv(p);\n         sum += r;\n         i += 1;\n     }\n \n-    task::join_id(t0);\n-    task::join_id(t1);\n-    task::join_id(t2);\n-    task::join_id(t3);\n+    task::join(t0);\n+    task::join(t1);\n+    task::join(t2);\n+    task::join(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n }"}, {"sha": "658deaa487f64ab05a03387da405adf49c7aa684", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -4,23 +4,24 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::_chan<int>, number_of_messages: int) {\n+fn test00_start(c: comm::chan<int>, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p = comm::mk_port();\n+    let p = comm::port();\n     let number_of_messages: int = 10;\n \n-    let t0 = task::_spawn(bind test00_start(p.mk_chan(), number_of_messages));\n+    let thunk = bind test00_start(comm::chan(p), number_of_messages);\n+    let t0 = task::spawn_joinable(thunk);\n \n     let i: int = 0;\n-    while i < number_of_messages { r = p.recv(); sum += r; log r; i += 1; }\n+    while i < number_of_messages { sum += comm::recv(p); log r; i += 1; }\n \n-    task::join_id(t0);\n+    task::join(t0);\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "0ee6779847d3bec64e30a37eb093918e171b0c56", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -7,9 +7,9 @@ import std::comm;\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test.\n fn main() {\n-    let po: comm::_port<()> = comm::mk_port();\n-    let ch: comm::_chan<()> = po.mk_chan();\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n     comm::send(ch, ());\n-    let n: () = po.recv();\n+    let n: () = comm::recv(po);\n     assert (n == ());\n }"}, {"sha": "6e88557829e808348c5b80309ef520df04877b5c", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,11 +1,12 @@\n use std;\n \n import std::task;\n-import std::task::task_id;\n+import std::task::task;\n import std::comm;\n-import std::comm::_chan;\n-import std::comm::_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n+import std::comm::recv;\n \n fn main() {\n     test00();\n@@ -17,7 +18,7 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(ch: _chan<int>, message: int, count: int) {\n+fn test00_start(ch: chan<int>, message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count {\n@@ -33,23 +34,24 @@ fn test00() {\n     let number_of_messages: int = 4;\n     log \"Creating tasks\";\n \n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n \n     let i: int = 0;\n \n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn(bind test00_start(ch, i, number_of_messages))];\n+        let thunk = bind test00_start(ch, i, number_of_messages);\n+        tasks += [task::spawn_joinable(thunk)];\n     }\n     let sum: int = 0;\n-    for t: task_id in tasks {\n+    for t in tasks {\n         i = 0;\n-        while i < number_of_messages { sum += po.recv(); i = i + 1; }\n+        while i < number_of_messages { sum += recv(po); i = i + 1; }\n     }\n \n-    for t: task_id in tasks { task::join_id(t); }\n+    for t in tasks { task::join(t); }\n \n     log \"Completed: Final number is: \";\n     assert (sum ==\n@@ -59,19 +61,19 @@ fn test00() {\n }\n \n fn test01() {\n-    let p = comm::mk_port();\n+    let p = port();\n     log \"Reading from a port that is never written to.\";\n-    let value: int = p.recv();\n+    let value: int = recv(p);\n     log value;\n }\n \n fn test02() {\n-    let p = comm::mk_port();\n-    let c = p.mk_chan();\n+    let p = port();\n+    let c = chan(p);\n     log \"Writing to a local task channel.\";\n     send(c, 42);\n     log \"Reading from a local task port.\";\n-    let value: int = p.recv();\n+    let value: int = recv(p);\n     log value;\n }\n \n@@ -101,7 +103,7 @@ fn test04() {\n     log \"Finishing up.\";\n }\n \n-fn test05_start(ch: _chan<int>) {\n+fn test05_start(ch: chan<int>) {\n     send(ch, 10);\n     send(ch, 20);\n     send(ch, 30);\n@@ -110,13 +112,13 @@ fn test05_start(ch: _chan<int>) {\n }\n \n fn test05() {\n-    let po = comm::mk_port();\n-    let ch = po.mk_chan();\n+    let po = comm::port();\n+    let ch = chan(po);\n     task::spawn(bind test05_start(ch));\n     let value: int;\n-    value = po.recv();\n-    value = po.recv();\n-    value = po.recv();\n+    value = recv(po);\n+    value = recv(po);\n+    value = recv(po);\n     log value;\n }\n \n@@ -136,11 +138,11 @@ fn test06() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn(bind test06_start(i))];\n+        tasks += [task::spawn_joinable(bind test06_start(i))];\n     }\n \n \n-    for t: task_id in tasks { task::join_id(t); }\n+    for t in tasks { task::join(t); }\n }\n \n "}, {"sha": "0e9116b65d3c44681dc1b808245b195247cf1d25", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -2,9 +2,15 @@\n    A test case for issue #577, which also exposes #588\n */\n \n+// FIXME: This won't work until we can compare resources\n+// xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n+// xfail-stage3\n+\n use std;\n import std::task;\n-import std::task::join_id;\n+import std::task::join;\n import std::comm;\n \n fn child() { }\n@@ -15,8 +21,8 @@ fn main() {\n     let t2;\n \n     let c1 = child, c2 = child;\n-    t1 = task::_spawn(c1);\n-    t2 = task::_spawn(c2);\n+    t1 = task::spawn_joinable(c1);\n+    t2 = task::spawn_joinable(c2);\n \n     assert (t1 == t1);\n     assert (t1 != t2);\n@@ -25,22 +31,19 @@ fn main() {\n     let p1;\n     let p2;\n \n-    p1 = comm::mk_port::<int>();\n-    p2 = comm::mk_port::<int>();\n+    p1 = comm::port::<int>();\n+    p2 = comm::port::<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n \n     // channels\n-    let c1;\n-    let c2;\n-\n-    c1 = p1.mk_chan();\n-    c2 = p2.mk_chan();\n+    let c1 = comm::chan(p1);\n+    let c2 = comm::chan(p2);\n \n     assert (c1 == c1);\n     assert (c1 != c2);\n \n-    join_id(t1);\n-    join_id(t2);\n+    join(t1);\n+    join(t2);\n }"}, {"sha": "1d40010d296f47a827423d8d9f244ede571076a9", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,6 +1,6 @@\n use std;\n import std::task;\n-fn main() { task::_spawn(bind child(\"Hello\")); }\n+fn main() { task::spawn(bind child(\"Hello\")); }\n \n fn child(s: str) {\n "}, {"sha": "caa81e9ef62992f752bed2eb0ccac3364717c8f6", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,7 +5,7 @@ import std::task;\n \n fn main() {\n     let i = 10;\n-    while i > 0 { task::_spawn(bind child(i)); i = i - 1; }\n+    while i > 0 { task::spawn(bind child(i)); i = i - 1; }\n     log \"main thread exiting\";\n }\n "}, {"sha": "5713c06e746aec8d3a478661a3efef65db1dd40e", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -1,15 +1,14 @@\n use std;\n-import std::comm::mk_port;\n-import std::comm::send;\n+import std::comm::*;\n \n /*\n   This is about the simplest program that can successfully send a\n   message.\n  */\n fn main() {\n-    let po = mk_port::<int>();\n-    let ch = po.mk_chan();\n+    let po = port();\n+    let ch = chan(po);\n     send(ch, 42);\n-    let r = po.recv();\n+    let r = recv(po);\n     log_err r;\n }"}, {"sha": "975f576d8bab02313e26297324aebfede0dec65f", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,13 +5,13 @@ import std::task::*;\n \n fn main() {\n     let f = child;\n-    let other = task::spawn(f);\n+    let other = task::spawn_joinable(f);\n     log_err \"1\";\n     yield();\n     log_err \"2\";\n     yield();\n     log_err \"3\";\n-    join_id(other);\n+    join(other);\n }\n \n fn child() { log_err \"4\"; yield(); log_err \"5\"; yield(); log_err \"6\"; }"}, {"sha": "4354d1b6f0e640f41218c20b84c4db650b166df9", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -5,10 +5,10 @@ import std::task::*;\n \n fn main() {\n     let c = child;\n-    let other = task::spawn(c);\n+    let other = task::spawn_joinable(c);\n     log_err \"1\";\n     yield();\n-    join_id(other);\n+    join(other);\n }\n \n fn child() { log_err \"2\"; }"}, {"sha": "1fafd1a03759a59a8f8daa81f0cbaa858051e811", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -3,19 +3,8 @@ import std::comm;\n \n #[test]\n fn create_port_and_chan() {\n-    let p = comm::mk_port::<int>();\n-    p.mk_chan();\n-}\n-\n-#[test]\n-fn send_recv() {\n-    let p = comm::mk_port::<int>();\n-    let c = p.mk_chan();\n-\n-    comm::send(c, 42);\n-    let v = p.recv();\n-    log_err v;\n-    assert (42 == v);\n+    let p = comm::port::<int>();\n+    comm::chan(p);\n }\n \n #[test]"}, {"sha": "c9fb71f87945ee7ea7a25343273d10fcfe9bd380", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7c583bc12c0bddb28e43ea79b593a014811b09/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=2f7c583bc12c0bddb28e43ea79b593a014811b09", "patch": "@@ -9,46 +9,30 @@ fn test_sleep() { task::sleep(1000000u); }\n fn test_unsupervise() {\n     fn f() { task::unsupervise(); fail; }\n     let foo = f;\n-    task::_spawn(foo);\n-}\n-\n-#[test]\n-#[ignore]\n-fn test_join() {\n-    fn winner() { }\n-\n-    let wintask = task::_spawn(bind winner());\n-\n-    assert (task::join_id(wintask) == task::tr_success);\n-\n-    fn failer() { task::unsupervise(); fail; }\n-\n-    let failtask = task::_spawn(bind failer());\n-\n-    assert (task::join_id(failtask) == task::tr_failure);\n+    task::spawn(foo);\n }\n \n #[test]\n fn test_lib_spawn() {\n     fn foo() { log_err \"Hello, World!\"; }\n     let f = foo;\n-    task::_spawn(f);\n+    task::spawn(f);\n }\n \n #[test]\n fn test_lib_spawn2() {\n     fn foo(x: int) { assert (x == 42); }\n-    task::_spawn(bind foo(42));\n+    task::spawn(bind foo(42));\n }\n \n #[test]\n fn test_join_chan() {\n     fn winner() { }\n \n-    let p = comm::mk_port::<task::task_notification>();\n+    let p = comm::port();\n     let f = winner;\n-    task::spawn_notify(f, p.mk_chan());\n-    let s = p.recv();\n+    task::spawn_notify(f, comm::chan(p));\n+    let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n     alt s {\n@@ -61,10 +45,10 @@ fn test_join_chan() {\n fn test_join_chan_fail() {\n     fn failer() { task::unsupervise(); fail }\n \n-    let p = comm::mk_port::<task::task_notification>();\n+    let p = comm::port();\n     let f = failer;\n-    task::spawn_notify(f, p.mk_chan());\n-    let s = p.recv();\n+    task::spawn_notify(f, comm::chan(p));\n+    let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n     alt s {"}]}