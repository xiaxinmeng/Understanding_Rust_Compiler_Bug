{"sha": "183a31be859c36e94df9cc881a0356f1d559ddbf", "node_id": "C_kwDOAAsO6NoAKDE4M2EzMWJlODU5YzM2ZTk0ZGY5Y2M4ODFhMDM1NmYxZDU1OWRkYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T05:07:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T05:07:01Z"}, "message": "Rollup merge of #112084 - ozkanonur:improvements, r=clubby789\n\nenhancements on  build_helper utilization and rustdoc-gui-test\n\nThis change provides codebase improvements, resolves `FIXME` in `rustdoc-gui-test` and makes `rustdoc-gui` test able to find local `node_modules` directory outside of the source root.", "tree": {"sha": "bb17c6000eacc4118f641c2dc10e77c9dfcb5651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb17c6000eacc4118f641c2dc10e77c9dfcb5651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183a31be859c36e94df9cc881a0356f1d559ddbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdtX1CRBK7hj4Ov3rIwAAu9IIAKm1U1UNlfypIA6iq2Bmc7YB\n0CfmR7nrLCOCx9Ob9YxujB+yucJIYa6ycr5UJGFFlrm1vuCKCyOLXyQX68/C9NKE\nurzpKkxZaYiMEnn6EpNV0rAnsxYVlxDfjf8BDrlvrj6+KpX3326UycsiDmQjPm+W\n187mGLZsTXfIvnFPlNvdTVa83knkNEjCZjJOhkdgu+OPgN1qGFUXAxE1Jo5ujcik\nVGJOOtRolnq+MWTdE392+NFi5zD52MkVChLal4tddAJLbBLlpDeipGBkT2CdE3ZB\nnSc1uf24o5zC17/mkEy86C4i9HwtPGdhzGXryZz2RbvaAtHzotWMNuv8t7s63dQ=\n=TKc+\n-----END PGP SIGNATURE-----\n", "payload": "tree bb17c6000eacc4118f641c2dc10e77c9dfcb5651\nparent f5894517ec8a32d48192e8aa800436231a8e215a\nparent c64db2cfa7d0e4a9331d280044715c49bbea6e2d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685509621 +0200\ncommitter GitHub <noreply@github.com> 1685509621 +0200\n\nRollup merge of #112084 - ozkanonur:improvements, r=clubby789\n\nenhancements on  build_helper utilization and rustdoc-gui-test\n\nThis change provides codebase improvements, resolves `FIXME` in `rustdoc-gui-test` and makes `rustdoc-gui` test able to find local `node_modules` directory outside of the source root.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183a31be859c36e94df9cc881a0356f1d559ddbf", "html_url": "https://github.com/rust-lang/rust/commit/183a31be859c36e94df9cc881a0356f1d559ddbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183a31be859c36e94df9cc881a0356f1d559ddbf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5894517ec8a32d48192e8aa800436231a8e215a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5894517ec8a32d48192e8aa800436231a8e215a", "html_url": "https://github.com/rust-lang/rust/commit/f5894517ec8a32d48192e8aa800436231a8e215a"}, {"sha": "c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64db2cfa7d0e4a9331d280044715c49bbea6e2d", "html_url": "https://github.com/rust-lang/rust/commit/c64db2cfa7d0e4a9331d280044715c49bbea6e2d"}], "stats": {"total": 174, "additions": 92, "deletions": 82}, "files": [{"sha": "e7aa317ad7501f2f08904c14d469a5cf909bd5f2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -4289,6 +4289,7 @@ dependencies = [\n name = \"rustdoc-gui-test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"build_helper\",\n  \"compiletest\",\n  \"getopts\",\n  \"walkdir\","}, {"sha": "43c859b00631e5ffdf36aeab37c9a0fb1ba359f9", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -381,7 +381,7 @@ impl StepDescription {\n             eprintln!(\n                 \"note: if you are adding a new Step to bootstrap itself, make sure you register it with `describe!`\"\n             );\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n     }\n }\n@@ -1355,7 +1355,7 @@ impl<'a> Builder<'a> {\n                         \"error: `x.py clippy` requires a host `rustc` toolchain with the `clippy` component\"\n                     );\n                     eprintln!(\"help: try `rustup component add clippy`\");\n-                    crate::detail_exit(1);\n+                    crate::detail_exit_macro!(1);\n                 });\n                 if !t!(std::str::from_utf8(&output.stdout)).contains(\"nightly\") {\n                     rustflags.arg(\"--cfg=bootstrap\");"}, {"sha": "1c66c00eda726f7e5ed3b92d5460f715cdab6f44", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -1686,7 +1686,7 @@ pub fn run_cargo(\n     });\n \n     if !ok {\n-        crate::detail_exit(1);\n+        crate::detail_exit_macro!(1);\n     }\n \n     // Ok now we need to actually find all the files listed in `toplevel`. We've"}, {"sha": "45ad1547eb77159e103d1c6dad1d80b20e3f05f7", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -23,6 +23,7 @@ use crate::channel::{self, GitInfo};\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags, Warnings};\n use crate::util::{exe, output, t};\n+use build_helper::detail_exit_macro;\n use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n use serde_derive::Deserialize;\n@@ -579,7 +580,7 @@ macro_rules! define_config {\n                                         panic!(\"overriding existing option\")\n                                     } else {\n                                         eprintln!(\"overriding existing option: `{}`\", stringify!($field));\n-                                        crate::detail_exit(2);\n+                                        detail_exit_macro!(2);\n                                     }\n                                 } else {\n                                     self.$field = other.$field;\n@@ -678,7 +679,7 @@ impl<T> Merge for Option<T> {\n                             panic!(\"overriding existing option\")\n                         } else {\n                             eprintln!(\"overriding existing option\");\n-                            crate::detail_exit(2);\n+                            detail_exit_macro!(2);\n                         }\n                     } else {\n                         *self = other;\n@@ -944,7 +945,7 @@ impl Config {\n                 .and_then(|table: toml::Value| TomlConfig::deserialize(table))\n                 .unwrap_or_else(|err| {\n                     eprintln!(\"failed to parse TOML configuration '{}': {err}\", file.display());\n-                    crate::detail_exit(2);\n+                    detail_exit_macro!(2);\n                 })\n         }\n         Self::parse_inner(args, get_toml)\n@@ -978,7 +979,7 @@ impl Config {\n             eprintln!(\n                 \"Cannot use both `llvm_bolt_profile_generate` and `llvm_bolt_profile_use` at the same time\"\n             );\n-            crate::detail_exit(1);\n+            detail_exit_macro!(1);\n         }\n \n         // Infer the rest of the configuration.\n@@ -1094,7 +1095,7 @@ impl Config {\n                 }\n             }\n             eprintln!(\"failed to parse override `{option}`: `{err}\");\n-            crate::detail_exit(2)\n+            detail_exit_macro!(2)\n         }\n         toml.merge(override_toml, ReplaceOpt::Override);\n \n@@ -1810,7 +1811,7 @@ impl Config {\n             println!(\"help: maybe your repository history is too shallow?\");\n             println!(\"help: consider disabling `download-rustc`\");\n             println!(\"help: or fetch enough history to include one upstream commit\");\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         // Warn if there were changes to the compiler or standard library since the ancestor commit."}, {"sha": "12780df21757a26b15d20f319e07190d5d11faa2", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -7,14 +7,15 @@ use std::{\n     process::{Command, Stdio},\n };\n \n+use build_helper::util::try_run;\n use once_cell::sync::OnceCell;\n use xz2::bufread::XzDecoder;\n \n use crate::{\n     config::RustfmtMetadata,\n     llvm::detect_llvm_sha,\n     t,\n-    util::{check_run, exe, program_out_of_date, try_run},\n+    util::{check_run, exe, program_out_of_date},\n     Config,\n };\n \n@@ -245,7 +246,7 @@ impl Config {\n             if !help_on_error.is_empty() {\n                 eprintln!(\"{}\", help_on_error);\n             }\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n     }\n "}, {"sha": "dc05f47ee9cd1a8c5f1edebc938fdd5ceaf574e9", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -193,7 +193,7 @@ impl Flags {\n             } else {\n                 panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n             }\n-            crate::detail_exit(0);\n+            crate::detail_exit_macro!(0);\n         }\n \n         Flags::parse_from(it)\n@@ -538,7 +538,7 @@ pub fn get_completion<G: clap_complete::Generator>(shell: G, path: &Path) -> Opt\n     } else {\n         std::fs::read_to_string(path).unwrap_or_else(|_| {\n             eprintln!(\"couldn't read {}\", path.display());\n-            crate::detail_exit(1)\n+            crate::detail_exit_macro!(1)\n         })\n     };\n     let mut buf = Vec::new();"}, {"sha": "ebf068b2cb16ee4cc1183daf66106510aaf0fbd7", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -40,7 +40,7 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n                         code, run `./x.py fmt` instead.\",\n                 cmd_debug,\n             );\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n         true\n     }\n@@ -196,7 +196,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n \n     let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {\n         eprintln!(\"./x.py fmt is not supported on this channel\");\n-        crate::detail_exit(1);\n+        crate::detail_exit_macro!(1);\n     });\n     assert!(rustfmt_path.exists(), \"{}\", rustfmt_path.display());\n     let src = build.src.clone();"}, {"sha": "a1aaee68c625ded1c892633d29e7e891f62f5f17", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -27,6 +27,7 @@ use std::process::{Command, Stdio};\n use std::str;\n \n use build_helper::ci::{gha, CiEnv};\n+use build_helper::detail_exit_macro;\n use channel::GitInfo;\n use config::{DryRun, Target};\n use filetime::FileTime;\n@@ -699,7 +700,7 @@ impl Build {\n             for failure in failures.iter() {\n                 eprintln!(\"  - {}\\n\", failure);\n             }\n-            detail_exit(1);\n+            detail_exit_macro!(1);\n         }\n \n         #[cfg(feature = \"build-metrics\")]\n@@ -1482,7 +1483,7 @@ impl Build {\n                 \"Error: Unable to find the stamp file {}, did you try to keep a nonexistent build stage?\",\n                 stamp.display()\n             );\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         let mut paths = Vec::new();\n@@ -1674,7 +1675,7 @@ Alternatively, set `download-ci-llvm = true` in that `[llvm]` section\n to download LLVM rather than building it.\n \"\n                 );\n-                detail_exit(1);\n+                detail_exit_macro!(1);\n             }\n         }\n \n@@ -1739,18 +1740,6 @@ fn chmod(path: &Path, perms: u32) {\n #[cfg(windows)]\n fn chmod(_path: &Path, _perms: u32) {}\n \n-/// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n-/// If the test is running and code is an error code, it will cause a panic.\n-fn detail_exit(code: i32) -> ! {\n-    // if in test and code is an error code, panic with status code provided\n-    if cfg!(test) {\n-        panic!(\"status code: {}\", code);\n-    } else {\n-        // otherwise,exit with provided status code\n-        std::process::exit(code);\n-    }\n-}\n-\n impl Compiler {\n     pub fn with_stage(mut self, stage: u32) -> Compiler {\n         self.stage = stage;"}, {"sha": "872b75f6c1599889a72fd69744501ec722cdb523", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n \n     if !run_tests(builder, cmd) {\n         if builder.fail_fast {\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         } else {\n             let mut failures = builder.delayed_failures.borrow_mut();\n             failures.push(format!(\"{cmd:?}\"));"}, {"sha": "8f5ba42736b1ffe6241f6662024696a020360170", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -104,7 +104,7 @@ You should install cmake, or set `download-ci-llvm = true` in the\n than building it.\n \"\n             );\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n     }\n "}, {"sha": "40038df8332105443cf6c7abcf2cca0b8cbdfb22", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -194,7 +194,7 @@ fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n             \"note: this will use the configuration in {}\",\n             profile.include_path(&config.src).display()\n         );\n-        crate::detail_exit(1);\n+        crate::detail_exit_macro!(1);\n     }\n \n     let settings = format!(\n@@ -380,7 +380,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n         io::stdin().read_line(&mut input)?;\n         if input.is_empty() {\n             eprintln!(\"EOF on stdin, when expecting answer to question.  Giving up.\");\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n         break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,"}, {"sha": "2924ba0bdf1c7e80b30bffe2e15ab96fd85da41e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -773,7 +773,7 @@ impl Step for Clippy {\n         }\n \n         if !builder.config.cmd.bless() {\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         let mut cargo = builder.cargo(compiler, Mode::ToolRustc, SourceType::InTree, host, \"run\");\n@@ -1085,7 +1085,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                     PATH = inferred_rustfmt_dir.display(),\n                     CHAN = builder.config.channel,\n                 );\n-                crate::detail_exit(1);\n+                crate::detail_exit_macro!(1);\n             }\n             crate::format::format(&builder, !builder.config.cmd.bless(), &[]);\n         }\n@@ -1108,7 +1108,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                 eprintln!(\n                     \"x.py completions were changed; run `x.py run generate-completions` to update them\"\n                 );\n-                crate::detail_exit(1);\n+                crate::detail_exit_macro!(1);\n             }\n         }\n     }\n@@ -1329,7 +1329,7 @@ help: to test the compiler, use `--stage 1` instead\n help: to test the standard library, use `--stage 0 library/std` instead\n note: if you're sure you want to do this, please open an issue as to why. In the meantime, you can override this with `COMPILETEST_FORCE_STAGE0=1`.\"\n             );\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         let mut compiler = self.compiler;"}, {"sha": "0f0a3bb8775db3bec19573d7917aa28202fcba7d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -116,7 +116,7 @@ impl Step for ToolBuild {\n \n         if !is_expected {\n             if !is_optional_tool {\n-                crate::detail_exit(1);\n+                crate::detail_exit_macro!(1);\n             } else {\n                 None\n             }"}, {"sha": "9c4d0ea265ddfa0f1b586a80421d904aa890e790", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -91,7 +91,7 @@ fn print_error(tool: &str, submodule: &str) {\n     eprintln!(\"If you do NOT intend to update '{}', please ensure you did not accidentally\", tool);\n     eprintln!(\"change the submodule at '{}'. You may ask your reviewer for the\", submodule);\n     eprintln!(\"proper steps.\");\n-    crate::detail_exit(3);\n+    crate::detail_exit_macro!(3);\n }\n \n fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n@@ -106,7 +106,7 @@ fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n         Ok(o) => o,\n         Err(e) => {\n             eprintln!(\"Failed to get changed files: {:?}\", e);\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n     };\n \n@@ -177,7 +177,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         check_changed_files(&toolstates);\n@@ -223,7 +223,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            crate::detail_exit(1);\n+            crate::detail_exit_macro!(1);\n         }\n \n         if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {"}, {"sha": "e4bbccdb067c2dbf6b922395586ce52b75d3c469", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -3,6 +3,7 @@\n //! Simple things like testing the various filesystem operations here and there,\n //! not a lot of interesting happenings here unfortunately.\n \n+use build_helper::util::{fail, try_run};\n use std::env;\n use std::fs;\n use std::io;\n@@ -230,25 +231,10 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n \n pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n     if !try_run(cmd, print_cmd_on_fail) {\n-        crate::detail_exit(1);\n+        crate::detail_exit_macro!(1);\n     }\n }\n \n-pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n-    let status = match cmd.status() {\n-        Ok(status) => status,\n-        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n-    };\n-    if !status.success() && print_cmd_on_fail {\n-        println!(\n-            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\\n\\n\",\n-            cmd, status\n-        );\n-    }\n-    status.success()\n-}\n-\n pub fn check_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n@@ -269,7 +255,7 @@ pub fn check_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n \n pub fn run_suppressed(cmd: &mut Command) {\n     if !try_run_suppressed(cmd) {\n-        crate::detail_exit(1);\n+        crate::detail_exit_macro!(1);\n     }\n }\n \n@@ -374,11 +360,6 @@ fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n     })\n }\n \n-fn fail(s: &str) -> ! {\n-    eprintln!(\"\\n\\n{}\\n\\n\", s);\n-    crate::detail_exit(1);\n-}\n-\n /// Copied from `std::path::absolute` until it stabilizes.\n ///\n /// FIXME: this shouldn't exist."}, {"sha": "3fa970373b3fb85a99923c58cead5a777103a5c2", "filename": "src/tools/build_helper/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -1,2 +1,3 @@\n pub mod ci;\n pub mod git;\n+pub mod util;"}, {"sha": "731095023a96e8bbae1a1ef60509552acfd9fea4", "filename": "src/tools/build_helper/src/util.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Fbuild_helper%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Fbuild_helper%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Futil.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -0,0 +1,41 @@\n+use std::process::Command;\n+\n+/// Invokes `build_helper::util::detail_exit` with `cfg!(test)`\n+#[macro_export]\n+macro_rules! detail_exit_macro {\n+    ($code:expr) => {\n+        build_helper::util::detail_exit($code, cfg!(test));\n+    };\n+}\n+\n+/// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n+/// If `is_test` true and code is an error code, it will cause a panic.\n+pub fn detail_exit(code: i32, is_test: bool) -> ! {\n+    // if in test and code is an error code, panic with status code provided\n+    if is_test {\n+        panic!(\"status code: {}\", code);\n+    } else {\n+        // otherwise,exit with provided status code\n+        std::process::exit(code);\n+    }\n+}\n+\n+pub fn fail(s: &str) -> ! {\n+    eprintln!(\"\\n\\n{}\\n\\n\", s);\n+    detail_exit(1, cfg!(test));\n+}\n+\n+pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n+    let status = match cmd.status() {\n+        Ok(status) => status,\n+        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n+    };\n+    if !status.success() && print_cmd_on_fail {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\",\n+            cmd, status\n+        );\n+    }\n+    status.success()\n+}"}, {"sha": "4cb200ebc7c5f1928287648adfb0c662eaa30373", "filename": "src/tools/rustdoc-gui-test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -4,6 +4,7 @@ version = \"0.1.0\"\n edition = \"2021\"\n \n [dependencies]\n+build_helper = { path = \"../build_helper\" }\n compiletest = { path = \"../compiletest\" }\n getopts = \"0.2\"\n walkdir = \"2\""}, {"sha": "3f60a90f87a22c154e6a077e59e8dd3334a67d1a", "filename": "src/tools/rustdoc-gui-test/src/main.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183a31be859c36e94df9cc881a0356f1d559ddbf/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs?ref=183a31be859c36e94df9cc881a0356f1d559ddbf", "patch": "@@ -1,3 +1,4 @@\n+use build_helper::util::try_run;\n use compiletest::header::TestProps;\n use config::Config;\n use std::path::{Path, PathBuf};\n@@ -60,23 +61,6 @@ fn find_librs<P: AsRef<Path>>(path: P) -> Option<PathBuf> {\n     None\n }\n \n-// FIXME: move `bootstrap::util::try_run` into `build_helper` crate\n-// and use that one instead of creating this function.\n-fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n-    let status = match cmd.status() {\n-        Ok(status) => status,\n-        Err(e) => panic!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e),\n-    };\n-    if !status.success() && print_cmd_on_fail {\n-        println!(\n-            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\\n\\n\",\n-            cmd, status\n-        );\n-    }\n-    status.success()\n-}\n-\n fn main() {\n     let config = Arc::new(Config::from_args(env::args().collect()));\n \n@@ -143,6 +127,16 @@ If you want to install the `browser-ui-test` dependency, run `npm install browse\n     }\n \n     let mut command = Command::new(&config.nodejs);\n+\n+    if let Ok(current_dir) = env::current_dir() {\n+        let local_node_modules = current_dir.join(\"node_modules\");\n+        if local_node_modules.exists() {\n+            // Link the local node_modules if exists.\n+            // This is useful when we run rustdoc-gui-test from outside of the source root.\n+            env::set_var(\"NODE_PATH\", local_node_modules);\n+        }\n+    }\n+\n     command\n         .arg(config.rust_src.join(\"src/tools/rustdoc-gui/tester.js\"))\n         .arg(\"--jobs\")"}]}