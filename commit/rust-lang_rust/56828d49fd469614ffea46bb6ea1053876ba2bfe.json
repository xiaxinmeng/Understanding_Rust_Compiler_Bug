{"sha": "56828d49fd469614ffea46bb6ea1053876ba2bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODI4ZDQ5ZmQ0Njk2MTRmZmVhNDZiYjZlYTEwNTM4NzZiYTJiZmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T22:15:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T22:16:12Z"}, "message": "Remove unused \"flav\" parameter from function registration paths.", "tree": {"sha": "611313b8f4ed5c879c1b2318be0016b274ea6e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611313b8f4ed5c879c1b2318be0016b274ea6e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56828d49fd469614ffea46bb6ea1053876ba2bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56828d49fd469614ffea46bb6ea1053876ba2bfe", "html_url": "https://github.com/rust-lang/rust/commit/56828d49fd469614ffea46bb6ea1053876ba2bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56828d49fd469614ffea46bb6ea1053876ba2bfe/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d282481c123e9a1155179c4b2338adbcba7589a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d282481c123e9a1155179c4b2338adbcba7589a3", "html_url": "https://github.com/rust-lang/rust/commit/d282481c123e9a1155179c4b2338adbcba7589a3"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "a3b8dfd2154257db4a3edcc23b6aaf257fd96a6e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=56828d49fd469614ffea46bb6ea1053876ba2bfe", "patch": "@@ -4162,20 +4162,20 @@ fn get_pair_fn_ty(llpairty: TypeRef) -> TypeRef {\n     ret struct_elt(llpairty, 0u);\n }\n \n-fn register_fn(ccx: @crate_ctxt, sp: span, path: path, flav: str,\n+fn register_fn(ccx: @crate_ctxt, sp: span, path: path,\n                node_id: ast::node_id) -> ValueRef {\n     let t = ty::node_id_to_type(ccx.tcx, node_id);\n-    register_fn_full(ccx, sp, path, flav, node_id, t)\n+    register_fn_full(ccx, sp, path, node_id, t)\n }\n \n-fn register_fn_full(ccx: @crate_ctxt, sp: span, path: path, flav: str,\n+fn register_fn_full(ccx: @crate_ctxt, sp: span, path: path,\n                     node_id: ast::node_id, node_type: ty::t) -> ValueRef {\n     let llfty = type_of_fn_from_ty(ccx, node_type);\n-    register_fn_fuller(ccx, sp, path, flav, node_id, node_type,\n+    register_fn_fuller(ccx, sp, path, node_id, node_type,\n                        lib::llvm::CCallConv, llfty)\n }\n \n-fn register_fn_fuller(ccx: @crate_ctxt, sp: span, path: path, _flav: str,\n+fn register_fn_fuller(ccx: @crate_ctxt, sp: span, path: path,\n                       node_id: ast::node_id, node_type: ty::t,\n                       cc: lib::llvm::CallConv, llfty: TypeRef) -> ValueRef {\n     let ps: str = mangle_exported_name(ccx, path, node_type);\n@@ -4316,7 +4316,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n               }\n               ast::item_fn(decl, _, _) {\n                 let llfn = if decl.purity != ast::crust_fn {\n-                    register_fn(ccx, i.span, my_path, \"fn\", i.id)\n+                    register_fn(ccx, i.span, my_path, i.id)\n                 } else {\n                     native::register_crust_fn(ccx, i.span, my_path, i.id)\n                 };\n@@ -4331,7 +4331,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 // find the dtor symbol.\n                 let t = ty::node_id_to_type(ccx.tcx, dtor_id);\n                 register_fn_full(ccx, i.span, my_path + [path_name(\"dtor\")],\n-                                 \"res_dtor\", i.id, t)\n+                                 i.id, t)\n               }\n             }\n           }\n@@ -4340,8 +4340,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let mty = ty::node_id_to_type(ccx.tcx, id);\n             let pth = *pth + [path_name(ccx.names(\"meth\")),\n                               path_name(m.ident)];\n-            let llfn = register_fn_full(ccx, m.span, pth, \"impl_method\",\n-                                        id, mty);\n+            let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n             set_inline_hint_if_appr(m.attrs, llfn);\n             llfn\n           }\n@@ -4353,13 +4352,12 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             alt check i.node {\n               ast::item_res(_, _, _, _, _) {\n                 let my_path = item_path(ccx, i);\n-                let llctor = register_fn(ccx, i.span, my_path, \"res_ctor\",\n-                                         id);\n+                let llctor = register_fn(ccx, i.span, my_path, id);\n                 set_inline_hint(llctor);\n                 llctor\n               }\n               ast::item_class(_, _, ctor) {\n-                register_fn(ccx, i.span, item_path(ccx, i), \"ctor\", id)\n+                register_fn(ccx, i.span, item_path(ccx, i), id)\n               }\n             }\n           }\n@@ -4368,7 +4366,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let pth = *pth + [path_name(enm.ident), path_name(v.node.name)];\n             let llfn = alt check enm.node {\n               ast::item_enum(_, _) {\n-                register_fn(ccx, v.span, pth, \"enum\", id)\n+                register_fn(ccx, v.span, pth, id)\n               }\n             };\n             set_inline_hint(llfn);"}, {"sha": "225c22d5b405b8bb9eb097998d5aabd3b9ce831e", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=56828d49fd469614ffea46bb6ea1053876ba2bfe", "patch": "@@ -370,7 +370,7 @@ fn trans_expr_fn(bcx: block,\n     let sub_path = bcx.fcx.path + [path_name(\"anon\")];\n     let s = mangle_internal_name_by_path(ccx, sub_path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n-    register_fn(ccx, sp, sub_path, \"anon fn\", id);\n+    register_fn(ccx, sp, sub_path, id);\n \n     let trans_closure_env = fn@(ck: ty::closure_kind) -> ValueRef {\n         let cap_vars = capture::compute_capture_vars("}, {"sha": "938514c93b95b137152f563370f72ad09e904dfa", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56828d49fd469614ffea46bb6ea1053876ba2bfe/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=56828d49fd469614ffea46bb6ea1053876ba2bfe", "patch": "@@ -873,12 +873,12 @@ fn register_crust_fn(ccx: @crate_ctxt, sp: span,\n         let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n         let x86_64 = x86_64_tys(llargtys, llretty, ret_def);\n         decl_x86_64_fn(x86_64) {|fnty|\n-            register_fn_fuller(ccx, sp, path, \"crust fn\", node_id,\n+            register_fn_fuller(ccx, sp, path, node_id,\n                                t, lib::llvm::CCallConv, fnty)\n         }\n     } else {\n         let llfty = T_fn(llargtys, llretty);\n-        register_fn_fuller(ccx, sp, path, \"crust fn\", node_id,\n+        register_fn_fuller(ccx, sp, path, node_id,\n                            t, lib::llvm::CCallConv, llfty)\n     }\n }\n@@ -920,7 +920,7 @@ fn decl_native_fn(ccx: @crate_ctxt, i: @ast::native_item,\n             // For true external functions: create a rust wrapper\n             // and link to that.  The rust wrapper will handle\n             // switching to the C stack.\n-            register_fn(ccx, i.span, pth, \"native fn\", i.id)\n+            register_fn(ccx, i.span, pth, i.id)\n           }\n         }\n       }"}]}