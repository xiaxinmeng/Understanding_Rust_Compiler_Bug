{"sha": "523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "node_id": "C_kwDOAAsO6NoAKDUyM2ExYjFkMzg4YmZlODJhNWQwNTQwYjg3NmQ5NDI4YjZkY2NjOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-20T18:12:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-20T18:12:59Z"}, "message": "Auto merge of #94062 - Mark-Simulacrum:drop-print-cfg, r=oli-obk\n\nMove ty::print methods to Drop-based scope guards\n\nPrimary goal is reducing codegen of the TLS access for each closure, which shaves ~3 seconds of bootstrap time over rustc as a whole.", "tree": {"sha": "0df7073fb1bcab18729dd7194ec8e4b5d1176531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df7073fb1bcab18729dd7194ec8e4b5d1176531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "html_url": "https://github.com/rust-lang/rust/commit/523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1aa85475cf5623caf50f7ef3b62903bb084e518", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1aa85475cf5623caf50f7ef3b62903bb084e518", "html_url": "https://github.com/rust-lang/rust/commit/c1aa85475cf5623caf50f7ef3b62903bb084e518"}, {"sha": "976348603485b216b0d5314eca674a2b24df4c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/976348603485b216b0d5314eca674a2b24df4c73", "html_url": "https://github.com/rust-lang/rust/commit/976348603485b216b0d5314eca674a2b24df4c73"}], "stats": {"total": 280, "additions": 140, "deletions": 140}, "files": [{"sha": "42717ad0ae0e1e1f0d86e038ee45ad18db2fec02", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -779,29 +779,35 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         assert_inhabited | assert_zero_valid | assert_uninit_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n+                        span,\n+                    );\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n         };"}, {"sha": "0ada20cad2c3be3c3931a58151832a6c0d79a75b", "filename": "compiler/rustc_codegen_gcc/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -52,7 +52,7 @@ pub fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLa\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str\n             if !cx.sess().fewer_names() =>\n         {\n-            let mut name = with_no_trimmed_paths(|| layout.ty.to_string());\n+            let mut name = with_no_trimmed_paths!(layout.ty.to_string());\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (layout.ty.kind(), &layout.variants)\n             {"}, {"sha": "02a263637a6ecc15161f0654133bb2c5724b7354", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -43,8 +43,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str => {\n-            let mut name =\n-                with_no_visible_paths(|| with_no_trimmed_paths(|| layout.ty.to_string()));\n+            let mut name = with_no_visible_paths!(with_no_trimmed_paths!(layout.ty.to_string()));\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (layout.ty.kind(), &layout.variants)\n             {"}, {"sha": "fa3904576745abfc6f9cd93fde6927bd61027997", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -549,8 +549,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false),\n             };\n             if do_panic {\n-                let msg_str = with_no_visible_paths(|| {\n-                    with_no_trimmed_paths(|| {\n+                let msg_str = with_no_visible_paths!({\n+                    with_no_trimmed_paths!({\n                         if layout.abi.is_uninhabited() {\n                             // Use this error even for the other intrinsics as it is more precise.\n                             format!(\"attempted to instantiate uninhabited type `{}`\", ty)"}, {"sha": "11eda987b977490e69e49836e9a150c816773e6f", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -53,7 +53,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     trace!(\n         \"eval_body_using_ecx: pushing stack frame for global: {}{}\",\n-        with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n+        with_no_trimmed_paths!(ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n         cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p))\n     );\n \n@@ -274,7 +274,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         // The next two lines concatenated contain some discussion:\n         // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n         // subject/anon_const_instance_printing/near/135980032\n-        let instance = with_no_trimmed_paths(|| key.value.instance.to_string());\n+        let instance = with_no_trimmed_paths!(key.value.instance.to_string());\n         trace!(\"const eval: {:?} ({})\", key, instance);\n     }\n \n@@ -317,7 +317,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                     // the expression, leading to the const eval error.\n                     let instance = &key.value.instance;\n                     if !instance.substs.is_empty() {\n-                        let instance = with_no_trimmed_paths(|| instance.to_string());\n+                        let instance = with_no_trimmed_paths!(instance.to_string());\n                         let msg = format!(\"evaluation of `{}` failed\", instance);\n                         Cow::from(msg)\n                     } else {"}, {"sha": "e95e327618f0bf8fd9bcf7fad03fe08ec8deb7dc", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -33,7 +33,7 @@ macro_rules! throw_validation_failure {\n             msg.push_str(\", but expected \");\n             write!(&mut msg, $($expected_fmt),+).unwrap();\n         )?\n-        let path = rustc_middle::ty::print::with_no_trimmed_paths(|| {\n+        let path = rustc_middle::ty::print::with_no_trimmed_paths!({\n             let where_ = &$where;\n             if !where_.is_empty() {\n                 let mut path = String::new();"}, {"sha": "888c4b997dc30acf39930a4e97db783ec7255c0d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -108,9 +108,10 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                         .as_ref()\n                         .and_then(|node| node.generics())\n                     {\n-                        let constraint = with_no_trimmed_paths(|| {\n-                            format!(\"~const {}\", trait_ref.print_only_trait_path())\n-                        });\n+                        let constraint = with_no_trimmed_paths!(format!(\n+                            \"~const {}\",\n+                            trait_ref.print_only_trait_path()\n+                        ));\n                         suggest_constraining_type_param(\n                             tcx,\n                             generics,"}, {"sha": "a9530cd1bbf397c8a5fb4b2e6952422b11009b1d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -2634,7 +2634,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             // We are extremely conservative with what we warn about.\n             let conjured_ty = cx.typeck_results().expr_ty(expr);\n             if let Some((msg, span)) =\n-                with_no_trimmed_paths(|| ty_find_init_error(cx.tcx, conjured_ty, init))\n+                with_no_trimmed_paths!(ty_find_init_error(cx.tcx, conjured_ty, init))\n             {\n                 cx.struct_span_lint(INVALID_VALUE, expr.span, |lint| {\n                     let mut err = lint.build(&format!("}, {"sha": "d8f55292ccd8d66f87e02d123d7abd4be75bd715", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -993,7 +993,7 @@ impl<'tcx> LateContext<'tcx> {\n                 }\n \n                 // This shouldn't ever be needed, but just in case:\n-                with_no_trimmed_paths(|| {\n+                with_no_trimmed_paths!({\n                     Ok(vec![match trait_ref {\n                         Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)),\n                         None => Symbol::intern(&format!(\"<{}>\", self_ty)),\n@@ -1012,15 +1012,15 @@ impl<'tcx> LateContext<'tcx> {\n \n                 // This shouldn't ever be needed, but just in case:\n                 path.push(match trait_ref {\n-                    Some(trait_ref) => with_no_trimmed_paths(|| {\n-                        Symbol::intern(&format!(\n+                    Some(trait_ref) => {\n+                        with_no_trimmed_paths!(Symbol::intern(&format!(\n                             \"<impl {} for {}>\",\n                             trait_ref.print_only_trait_path(),\n                             self_ty\n-                        ))\n-                    }),\n+                        )))\n+                    }\n                     None => {\n-                        with_no_trimmed_paths(|| Symbol::intern(&format!(\"<impl {}>\", self_ty)))\n+                        with_no_trimmed_paths!(Symbol::intern(&format!(\"<impl {}>\", self_ty)))\n                     }\n                 });\n "}, {"sha": "a6912653368b522de305956bc9e99753f584cf7c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -434,7 +434,9 @@ fn add_query_description_impl(\n         #[allow(unused_variables)]\n         fn describe(tcx: QueryCtxt<$tcx>, key: Self::Key) -> String {\n             let (#tcx, #key) = (*tcx, key);\n-            ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc).into())\n+            ::rustc_middle::ty::print::with_no_trimmed_paths!(\n+                format!(#desc)\n+            )\n         }\n     };\n "}, {"sha": "d3de54b4950f6a4e6707e0dedcbbb0cf6f5b4b0b", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -55,6 +55,7 @@\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n #![feature(unwrap_infallible)]\n+#![feature(decl_macro)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n "}, {"sha": "ac4a5985c2f1ce87d7b740278bc2d3847387e669", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -367,7 +367,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     let is_in_effect = deprecation_in_effect(depr_attr);\n                     let lint = deprecation_lint(is_in_effect);\n                     if self.lint_level_at_node(lint, id).0 != Level::Allow {\n-                        let def_path = &with_no_trimmed_paths(|| self.def_path_str(def_id));\n+                        let def_path = with_no_trimmed_paths!(self.def_path_str(def_id));\n                         let def_kind = self.def_kind(def_id).descr(def_id);\n \n                         late_report_deprecation(\n@@ -377,7 +377,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                 depr_attr.since,\n                                 depr_attr.note,\n                                 def_kind,\n-                                def_path,\n+                                &def_path,\n                             ),\n                             depr_attr.suggestion,\n                             lint,"}, {"sha": "4eac0009f69e2e1893d6448942cb2bfa8d466442", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -147,7 +147,7 @@ pub struct GlobalId<'tcx> {\n \n impl<'tcx> GlobalId<'tcx> {\n     pub fn display(self, tcx: TyCtxt<'tcx>) -> String {\n-        let instance_name = with_no_trimmed_paths(|| tcx.def_path_str(self.instance.def.def_id()));\n+        let instance_name = with_no_trimmed_paths!(tcx.def_path_str(self.instance.def.def_id()));\n         if let Some(promoted) = self.promoted {\n             format!(\"{}::{:?}\", instance_name, promoted)\n         } else {"}, {"sha": "d1c27c84dd5de52e234e0ea11d2251d4186ec8e8", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -92,10 +92,8 @@ pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) ->\n     let Some(ref filters) = tcx.sess.opts.debugging_opts.dump_mir else {\n         return false;\n     };\n-    let node_path = ty::print::with_forced_impl_filename_line(|| {\n-        // see notes on #41697 below\n-        tcx.def_path_str(def_id)\n-    });\n+    // see notes on #41697 below\n+    let node_path = ty::print::with_forced_impl_filename_line!(tcx.def_path_str(def_id));\n     filters.split('|').any(|or_filter| {\n         or_filter.split('&').all(|and_filter| {\n             let and_filter_trimmed = and_filter.trim();\n@@ -123,10 +121,9 @@ fn dump_matched_mir_node<'tcx, F>(\n     let _: io::Result<()> = try {\n         let mut file =\n             create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, body.source)?;\n-        let def_path = ty::print::with_forced_impl_filename_line(|| {\n-            // see notes on #41697 above\n-            tcx.def_path_str(body.source.def_id())\n-        });\n+        // see notes on #41697 above\n+        let def_path =\n+            ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n         write!(file, \"// MIR for `{}\", def_path)?;\n         match body.source.promoted {\n             None => write!(file, \"`\")?,\n@@ -969,10 +966,10 @@ fn write_mir_sig(tcx: TyCtxt<'_>, body: &Body<'_>, w: &mut dyn Write) -> io::Res\n         _ => bug!(\"Unexpected def kind {:?}\", kind),\n     }\n \n-    ty::print::with_forced_impl_filename_line(|| {\n+    ty::print::with_forced_impl_filename_line! {\n         // see notes on #41697 elsewhere\n-        write!(w, \"{}\", tcx.def_path_str(def_id))\n-    })?;\n+        write!(w, \"{}\", tcx.def_path_str(def_id))?\n+    }\n \n     if body.source.promoted.is_none() && is_function {\n         write!(w, \"(\")?;"}, {"sha": "befd9ebb4771f7938c4c8540947ecb6f3d672a34", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 51, "deletions": 58, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -63,66 +63,59 @@ thread_local! {\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n }\n \n-/// Avoids running any queries during any prints that occur\n-/// during the closure. This may alter the appearance of some\n-/// types (e.g. forcing verbose printing for opaque types).\n-/// This method is used during some queries (e.g. `explicit_item_bounds`\n-/// for opaque types), to ensure that any debug printing that\n-/// occurs during the query computation does not end up recursively\n-/// calling the same query.\n-pub fn with_no_queries<F: FnOnce() -> R, R>(f: F) -> R {\n-    NO_QUERIES.with(|no_queries| {\n-        let old = no_queries.replace(true);\n-        let result = f();\n-        no_queries.set(old);\n-        result\n-    })\n-}\n-\n-/// Force us to name impls with just the filename/line number. We\n-/// normally try to use types. But at some points, notably while printing\n-/// cycle errors, this can result in extra or suboptimal error output,\n-/// so this variable disables that check.\n-pub fn with_forced_impl_filename_line<F: FnOnce() -> R, R>(f: F) -> R {\n-    FORCE_IMPL_FILENAME_LINE.with(|force| {\n-        let old = force.replace(true);\n-        let result = f();\n-        force.set(old);\n-        result\n-    })\n-}\n+macro_rules! define_helper {\n+    ($($(#[$a:meta])* fn $name:ident($helper:ident, $tl:ident);)+) => {\n+        $(\n+            #[must_use]\n+            pub struct $helper(bool);\n+\n+            impl $helper {\n+                pub fn new() -> $helper {\n+                    $helper($tl.with(|c| c.replace(true)))\n+                }\n+            }\n \n-/// Adds the `crate::` prefix to paths where appropriate.\n-pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n-    SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n-        let old = flag.replace(true);\n-        let result = f();\n-        flag.set(old);\n-        result\n-    })\n-}\n+            $(#[$a])*\n+            pub macro $name($e:expr) {\n+                {\n+                    let _guard = $helper::new();\n+                    $e\n+                }\n+            }\n \n-/// Prevent path trimming if it is turned on. Path trimming affects `Display` impl\n-/// of various rustc types, for example `std::vec::Vec` would be trimmed to `Vec`,\n-/// if no other `Vec` is found.\n-pub fn with_no_trimmed_paths<F: FnOnce() -> R, R>(f: F) -> R {\n-    NO_TRIMMED_PATH.with(|flag| {\n-        let old = flag.replace(true);\n-        let result = f();\n-        flag.set(old);\n-        result\n-    })\n+            impl Drop for $helper {\n+                fn drop(&mut self) {\n+                    $tl.with(|c| c.set(self.0))\n+                }\n+            }\n+        )+\n+    }\n }\n \n-/// Prevent selection of visible paths. `Display` impl of DefId will prefer visible (public) reexports of types as paths.\n-pub fn with_no_visible_paths<F: FnOnce() -> R, R>(f: F) -> R {\n-    NO_VISIBLE_PATH.with(|flag| {\n-        let old = flag.replace(true);\n-        let result = f();\n-        flag.set(old);\n-        result\n-    })\n-}\n+define_helper!(\n+    /// Avoids running any queries during any prints that occur\n+    /// during the closure. This may alter the appearance of some\n+    /// types (e.g. forcing verbose printing for opaque types).\n+    /// This method is used during some queries (e.g. `explicit_item_bounds`\n+    /// for opaque types), to ensure that any debug printing that\n+    /// occurs during the query computation does not end up recursively\n+    /// calling the same query.\n+    fn with_no_queries(NoQueriesGuard, NO_QUERIES);\n+    /// Force us to name impls with just the filename/line number. We\n+    /// normally try to use types. But at some points, notably while printing\n+    /// cycle errors, this can result in extra or suboptimal error output,\n+    /// so this variable disables that check.\n+    fn with_forced_impl_filename_line(ForcedImplGuard, FORCE_IMPL_FILENAME_LINE);\n+    /// Adds the `crate::` prefix to paths where appropriate.\n+    fn with_crate_prefix(CratePrefixGuard, SHOULD_PREFIX_WITH_CRATE);\n+    /// Prevent path trimming if it is turned on. Path trimming affects `Display` impl\n+    /// of various rustc types, for example `std::vec::Vec` would be trimmed to `Vec`,\n+    /// if no other `Vec` is found.\n+    fn with_no_trimmed_paths(NoTrimmedGuard, NO_TRIMMED_PATH);\n+    /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n+    /// visible (public) reexports of types as paths.\n+    fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n+);\n \n /// The \"region highlights\" are used to control region printing during\n /// specific error messages. When a \"region highlight\" is enabled, it\n@@ -379,7 +372,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // in cases where the `extern crate foo` has non-trivial\n                         // parents, e.g. it's nested in `impl foo::Trait for Bar`\n                         // (see also issues #55779 and #87932).\n-                        self = with_no_visible_paths(|| self.print_def_path(def_id, &[]))?;\n+                        self = with_no_visible_paths!(self.print_def_path(def_id, &[])?);\n \n                         return Ok((self, true));\n                     }\n@@ -654,7 +647,7 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                return with_no_queries(|| {\n+                return with_no_queries!({\n                     let def_key = self.tcx().def_key(def_id);\n                     if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n                         p!(write(\"{}\", name));"}, {"sha": "8711216b042fbdd88b3ed1989ddff356ac9c7995", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -22,9 +22,9 @@ use std::sync::Arc;\n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            with_no_trimmed_paths(|| {\n-                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.def_id, &[])\n-            })?;\n+            with_no_trimmed_paths!(\n+                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.def_id, &[])?\n+            );\n             Ok(())\n         })\n     }\n@@ -33,9 +33,9 @@ impl fmt::Debug for ty::TraitDef {\n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            with_no_trimmed_paths(|| {\n-                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.did, &[])\n-            })?;\n+            with_no_trimmed_paths!(\n+                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.did, &[])?\n+            );\n             Ok(())\n         })\n     }\n@@ -50,7 +50,7 @@ impl fmt::Debug for ty::UpvarId {\n \n impl<'tcx> fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n+        with_no_trimmed_paths!(fmt::Display::fmt(self, f))\n     }\n }\n \n@@ -126,13 +126,13 @@ impl fmt::Debug for ty::RegionVid {\n \n impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n+        with_no_trimmed_paths!(fmt::Display::fmt(self, f))\n     }\n }\n \n impl<'tcx> fmt::Debug for Ty<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n+        with_no_trimmed_paths!(fmt::Display::fmt(self, f))\n     }\n }\n "}, {"sha": "b83cbb753df72ae88b76e48b4138c0ec46fe1a05", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n         traits::search_for_structural_match_violation(self.span, self.tcx(), ty).map(|non_sm_ty| {\n-            with_no_trimmed_paths(|| match non_sm_ty {\n+            with_no_trimmed_paths!(match non_sm_ty {\n                 traits::NonStructuralMatchTy::Adt(adt) => self.adt_derive_msg(adt),\n                 traits::NonStructuralMatchTy::Dynamic => {\n                     \"trait objects cannot be used in patterns\".to_string()"}, {"sha": "a517e4879aafaafbc0b7c86dcb47123725eee9f7", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -454,7 +454,7 @@ fn collect_items_rec<'tcx>(\n         && starting_point.node.krate() != LOCAL_CRATE\n         && starting_point.node.is_user_defined()\n     {\n-        let formatted_item = with_no_trimmed_paths(|| starting_point.node.to_string());\n+        let formatted_item = with_no_trimmed_paths!(starting_point.node.to_string());\n         tcx.sess.span_note_without_error(\n             starting_point.span,\n             &format!(\"the above error was encountered while instantiating `{}`\", formatted_item),"}, {"sha": "c1992137575bc6ab20b77e4ef0984a0cd651b9f5", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -425,7 +425,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         let mut item_keys: Vec<_> = items\n             .iter()\n             .map(|i| {\n-                let mut output = with_no_trimmed_paths(|| i.to_string());\n+                let mut output = with_no_trimmed_paths!(i.to_string());\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);"}, {"sha": "683d56d5d0feb3fc5a85e59994a5790a0b7c6a1b", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -272,11 +272,12 @@ macro_rules! define_queries {\n                 let name = stringify!($name);\n                 // Disable visible paths printing for performance reasons.\n                 // Showing visible path instead of any path is not that important in production.\n-                let description = ty::print::with_no_visible_paths(\n-                    || ty::print::with_forced_impl_filename_line(\n+                let description = ty::print::with_no_visible_paths!(\n                     // Force filename-line mode to avoid invoking `type_of` query.\n-                    || queries::$name::describe(tcx, key)\n-                ));\n+                    ty::print::with_forced_impl_filename_line!(\n+                        queries::$name::describe(tcx, key)\n+                    )\n+                );\n                 let description = if tcx.sess.verbose() {\n                     format!(\"{} [{}]\", description, name)\n                 } else {"}, {"sha": "43ec35a8434194f9e54c93ed598ef18c912133f1", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -976,7 +976,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     config: Option<Config>,\n     mut handler: H,\n ) {\n-    with_no_trimmed_paths(|| {\n+    with_no_trimmed_paths!({\n         tcx.dep_graph.with_ignore(|| {\n             info!(\"Dumping crate {}\", cratename);\n "}, {"sha": "611943652a6a151abe17c7b6ca35960829735dab", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -48,7 +48,7 @@ impl SymbolNamesTest<'_> {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }\n             } else if attr.has_name(DEF_PATH) {\n-                let path = with_no_trimmed_paths(|| tcx.def_path_str(def_id.to_def_id()));\n+                let path = with_no_trimmed_paths!(tcx.def_path_str(def_id.to_def_id()));\n                 tcx.sess.span_err(attr.span, &format!(\"def-path({})\", path));\n             }\n "}, {"sha": "a277f74f7a43fbf8bb6a17c247390eeaedeb4e0b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         // Add all types without trimmed paths.\n-        ty::print::with_no_trimmed_paths(|| {\n+        ty::print::with_no_trimmed_paths!({\n             let generics = self.tcx.generics_of(def_id);\n             let self_ty = trait_ref.self_ty();\n             // This is also included through the generics list as `Self`,"}, {"sha": "e2b0c9f6248a623375218e1f89d66af928c4e307", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -443,9 +443,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 {\n                     // Missing generic type parameter bound.\n                     let param_name = self_ty.to_string();\n-                    let constraint = with_no_trimmed_paths(|| {\n+                    let constraint = with_no_trimmed_paths!(\n                         trait_pred.print_modifiers_and_trait_path().to_string()\n-                    });\n+                    );\n                     if suggest_constraining_type_param(\n                         self.tcx,\n                         generics,"}, {"sha": "d92f26288c14e8e94dcdd7af4c12f7f714e16713", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -92,7 +92,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if !candidate_set.ambiguous && no_candidates_apply {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                         let self_ty = trait_ref.self_ty();\n-                        let (trait_desc, self_desc) = with_no_trimmed_paths(|| {\n+                        let (trait_desc, self_desc) = with_no_trimmed_paths!({\n                             let trait_desc = trait_ref.print_only_trait_path().to_string();\n                             let self_desc = if self_ty.has_concrete_skeleton() {\n                                 Some(self_ty.to_string())"}, {"sha": "ad31751e6bbda4f6b97108a0e04504eec4a10fab", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -922,7 +922,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n                             let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                             let self_ty = trait_ref.self_ty();\n-                            let cause = with_no_trimmed_paths(|| {\n+                            let cause = with_no_trimmed_paths!({\n                                 IntercrateAmbiguityCause::DownstreamCrate {\n                                     trait_desc: trait_ref.print_only_trait_path().to_string(),\n                                     self_desc: if self_ty.has_concrete_skeleton() {"}, {"sha": "e31a9b200e873c5069a2c3981c03472b48ef5319", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -106,7 +106,7 @@ impl ChildrenExt<'_> for Children {\n                 let self_ty = trait_ref.self_ty();\n \n                 // FIXME: should postpone string formatting until we decide to actually emit.\n-                with_no_trimmed_paths(|| {\n+                with_no_trimmed_paths!({\n                     OverlapError {\n                         with_impl: possible_sibling,\n                         trait_desc: trait_ref.print_only_trait_path().to_string(),"}, {"sha": "466f32aa800f965619cf47dfef47411364217971", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path =\n-                            with_no_trimmed_paths(|| self.tcx.def_path_str(variant.def_id));\n+                            with_no_trimmed_paths!(self.tcx.def_path_str(variant.def_id));\n                         // FIXME #56861: DRYer prelude filtering\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\") {\n                             if let Some((_, path)) = path.split_once(\"::\") {"}, {"sha": "cbbb47ecaae1cb9ab48bd051952e59fc1ff63b11", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -1346,7 +1346,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let additional_newline = if found_use { \"\" } else { \"\\n\" };\n                 format!(\n                     \"use {};\\n{}\",\n-                    with_crate_prefix(|| self.tcx.def_path_str(*trait_did)),\n+                    with_crate_prefix!(self.tcx.def_path_str(*trait_did)),\n                     additional_newline\n                 )\n             });\n@@ -1359,7 +1359,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let additional_newline = if found_use { \"\" } else { \"\\n\" };\n                 format!(\n                     \"use {}::*; // trait {}\\n{}\",\n-                    with_crate_prefix(|| self.tcx.def_path_str(*parent_did)),\n+                    with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n                     self.tcx.item_name(*trait_did),\n                     additional_newline\n                 )\n@@ -1378,12 +1378,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     msg.push_str(&format!(\n                         \"\\ncandidate #{}: `use {};`\",\n                         i + 1,\n-                        with_crate_prefix(|| self.tcx.def_path_str(*trait_did))\n+                        with_crate_prefix!(self.tcx.def_path_str(*trait_did))\n                     ));\n                 } else {\n                     msg.push_str(&format!(\n                         \"\\n`use {};`\",\n-                        with_crate_prefix(|| self.tcx.def_path_str(*trait_did))\n+                        with_crate_prefix!(self.tcx.def_path_str(*trait_did))\n                     ));\n                 }\n             }\n@@ -1396,13 +1396,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     msg.push_str(&format!(\n                         \"\\ncandidate #{}: `use {}::*; // trait {}`\",\n                         candidates.len() + i + 1,\n-                        with_crate_prefix(|| self.tcx.def_path_str(*parent_did)),\n+                        with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n                         self.tcx.item_name(*trait_did),\n                     ));\n                 } else {\n                     msg.push_str(&format!(\n                         \"\\n`use {}::*; // trait {}`\",\n-                        with_crate_prefix(|| self.tcx.def_path_str(*parent_did)),\n+                        with_crate_prefix!(self.tcx.def_path_str(*parent_did)),\n                         self.tcx.item_name(*trait_did),\n                     ));\n                 }\n@@ -1442,7 +1442,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Some(did) = edition_fix {\n                 err.note(&format!(\n                     \"'{}' is included in the prelude starting in Edition 2021\",\n-                    with_crate_prefix(|| self.tcx.def_path_str(did))\n+                    with_crate_prefix!(self.tcx.def_path_str(did))\n                 ));\n             }\n "}, {"sha": "8801d0260bffce02a0074f5dd49315a7d15da7c5", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a1b1d388bfe82a5d0540b876d9428b6dccc9c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "patch": "@@ -59,7 +59,7 @@ fn opaque_type_bounds<'tcx>(\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n     span: Span,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n-    ty::print::with_no_queries(|| {\n+    ty::print::with_no_queries!({\n         let item_ty =\n             tcx.mk_opaque(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n "}]}