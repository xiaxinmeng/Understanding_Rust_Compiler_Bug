{"sha": "2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTZhNGZlNTQxYjZkMjM5Y2Q3NmRjZmM3OTMzMzk1YWU4ZWM0ZWM=", "commit": {"author": {"name": "Godmar Back", "email": "godmar@gmail.com", "date": "2021-08-07T15:33:18Z"}, "committer": {"name": "Godmar Back", "email": "godmar@gmail.com", "date": "2021-08-07T15:33:18Z"}, "message": "removed references to parent/child from std::thread documentation\n\n- also clarifies how thread.join and detaching of threads works\n- the previous prose implied that there is a relationship between a\nspawning thread and the thread being spawned, and that \"child\" threads\ncouldn't outlive their parents unless detached, which is incorrect.", "tree": {"sha": "e47a4d901dff3ea3d1d3748819480cd166ef4d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e47a4d901dff3ea3d1d3748819480cd166ef4d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec", "html_url": "https://github.com/rust-lang/rust/commit/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec/comments", "author": {"login": "godmar", "id": 486389, "node_id": "MDQ6VXNlcjQ4NjM4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/486389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godmar", "html_url": "https://github.com/godmar", "followers_url": "https://api.github.com/users/godmar/followers", "following_url": "https://api.github.com/users/godmar/following{/other_user}", "gists_url": "https://api.github.com/users/godmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/godmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godmar/subscriptions", "organizations_url": "https://api.github.com/users/godmar/orgs", "repos_url": "https://api.github.com/users/godmar/repos", "events_url": "https://api.github.com/users/godmar/events{/privacy}", "received_events_url": "https://api.github.com/users/godmar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godmar", "id": 486389, "node_id": "MDQ6VXNlcjQ4NjM4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/486389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godmar", "html_url": "https://github.com/godmar", "followers_url": "https://api.github.com/users/godmar/followers", "following_url": "https://api.github.com/users/godmar/following{/other_user}", "gists_url": "https://api.github.com/users/godmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/godmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godmar/subscriptions", "organizations_url": "https://api.github.com/users/godmar/orgs", "repos_url": "https://api.github.com/users/godmar/repos", "events_url": "https://api.github.com/users/godmar/events{/privacy}", "received_events_url": "https://api.github.com/users/godmar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b20506d17f4e5e5bf5bcad7e94add4d754b0ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b20506d17f4e5e5bf5bcad7e94add4d754b0ae3", "html_url": "https://github.com/rust-lang/rust/commit/6b20506d17f4e5e5bf5bcad7e94add4d754b0ae3"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "f44df845bf4dd56fc2b25a8fdcede67796195647", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=2a56a4fe541b6d239cd76dcfc7933395ae8ec4ec", "patch": "@@ -28,7 +28,7 @@\n //! When the main thread of a Rust program terminates, the entire program shuts\n //! down, even if other threads are still running. However, this module provides\n //! convenient facilities for automatically waiting for the termination of a\n-//! child thread (i.e., join).\n+//! thread (i.e., join).\n //!\n //! ## Spawning a thread\n //!\n@@ -42,38 +42,43 @@\n //! });\n //! ```\n //!\n-//! In this example, the spawned thread is \"detached\" from the current\n-//! thread. This means that it can outlive its parent (the thread that spawned\n-//! it), unless this parent is the main thread.\n+//! In this example, the spawned thread is \"detached,\" which means that there is\n+//! no way for the program to learn when the spawned thread completes or otherwise\n+//! terminates.\n //!\n-//! The parent thread can also wait on the completion of the child\n-//! thread; a call to [`spawn`] produces a [`JoinHandle`], which provides\n-//! a `join` method for waiting:\n+//! To learn when a thread completes, it is necessary to capture the [`JoinHandle`]\n+//! object that is returned by the call to [`spawn`], which provides\n+//! a `join` method that allows the caller to wait for the completion of the\n+//! spawned thread:\n //!\n //! ```rust\n //! use std::thread;\n //!\n-//! let child = thread::spawn(move || {\n+//! let thread_join_handle = thread::spawn(move || {\n //!     // some work here\n //! });\n //! // some work here\n-//! let res = child.join();\n+//! let res = thread_join_handle.join();\n //! ```\n //!\n //! The [`join`] method returns a [`thread::Result`] containing [`Ok`] of the final\n-//! value produced by the child thread, or [`Err`] of the value given to\n-//! a call to [`panic!`] if the child panicked.\n+//! value produced by the spawned thread, or [`Err`] of the value given to\n+//! a call to [`panic!`] if the thread panicked.\n+//!\n+//! Note that there is no parent/child relationship between a thread that spawns a\n+//! new thread and the thread being spawned.  In particular, the spawned thread may or\n+//! may not outlive the spawning thread, unless the spawning thread is the main thread.\n //!\n //! ## Configuring threads\n //!\n //! A new thread can be configured before it is spawned via the [`Builder`] type,\n-//! which currently allows you to set the name and stack size for the child thread:\n+//! which currently allows you to set the name and stack size for the thread:\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]\n //! use std::thread;\n //!\n-//! thread::Builder::new().name(\"child1\".to_string()).spawn(move || {\n+//! thread::Builder::new().name(\"thread1\".to_string()).spawn(move || {\n //!     println!(\"Hello, world!\");\n //! });\n //! ```\n@@ -344,7 +349,7 @@ impl Builder {\n     /// The spawned thread may outlive the caller (unless the caller thread\n     /// is the main thread; the whole process is terminated when the main\n     /// thread finishes). The join handle can be used to block on\n-    /// termination of the child thread, including recovering its panics.\n+    /// termination of the spawned thread, including recovering its panics.\n     ///\n     /// For a more complete documentation see [`thread::spawn`][`spawn`].\n     ///\n@@ -389,7 +394,7 @@ impl Builder {\n     /// The spawned thread may outlive the caller (unless the caller thread\n     /// is the main thread; the whole process is terminated when the main\n     /// thread finishes). The join handle can be used to block on\n-    /// termination of the child thread, including recovering its panics.\n+    /// termination of the spawned thread, including recovering its panics.\n     ///\n     /// This method is identical to [`thread::Builder::spawn`][`Builder::spawn`],\n     /// except for the relaxed lifetime bounds, which render it unsafe.\n@@ -516,15 +521,16 @@ impl Builder {\n \n /// Spawns a new thread, returning a [`JoinHandle`] for it.\n ///\n-/// The join handle will implicitly *detach* the child thread upon being\n-/// dropped. In this case, the child thread may outlive the parent (unless\n-/// the parent thread is the main thread; the whole process is terminated when\n-/// the main thread finishes). Additionally, the join handle provides a [`join`]\n-/// method that can be used to join the child thread. If the child thread\n-/// panics, [`join`] will return an [`Err`] containing the argument given to\n-/// [`panic!`].\n+/// The join handle provides a [`join`] method that can be used to join the spawned\n+/// thread. If the spawned thread panics, [`join`] will return an [`Err`] containing\n+/// the argument given to [`panic!`].\n+///\n+/// If the join handle is dropped, the spawned thread will implicitly be *detached*.\n+/// In this case, the spawned thread may no longer be joined.\n+/// (It is the responsibility of the program to either eventually join threads it\n+/// creates or detach them; otherwise, a resource leak will result.)\n ///\n-/// This will create a thread using default parameters of [`Builder`], if you\n+/// This call will create a thread using default parameters of [`Builder`], if you\n /// want to specify the stack size or the name of the thread, use this API\n /// instead.\n ///\n@@ -533,8 +539,8 @@ impl Builder {\n ///\n /// - The `'static` constraint means that the closure and its return value\n ///   must have a lifetime of the whole program execution. The reason for this\n-///   is that threads can `detach` and outlive the lifetime they have been\n-///   created in.\n+///   is that threads can outlive the lifetime they have been created in.\n+///\n ///   Indeed if the thread, and by extension its return value, can outlive their\n ///   caller, we need to make sure that they will be valid afterwards, and since\n ///   we *can't* know when it will return we need to have them valid as long as\n@@ -1236,10 +1242,10 @@ impl fmt::Debug for Thread {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n-// This packet is used to communicate the return value between the child thread\n-// and the parent thread. Memory is shared through the `Arc` within and there's\n+// This packet is used to communicate the return value between the spawned thread\n+// and the rest of the program. Memory is shared through the `Arc` within and there's\n // no need for a mutex here because synchronization happens with `join()` (the\n-// parent thread never reads this packet until the child has exited).\n+// caller will never read this packet until the thread has exited).\n //\n // This packet itself is then stored into a `JoinInner` which in turns is placed\n // in `JoinHandle` and `JoinGuard`. Due to the usage of `UnsafeCell` we need to\n@@ -1303,7 +1309,7 @@ impl<T> JoinInner<T> {\n /// }).unwrap();\n /// ```\n ///\n-/// Child being detached and outliving its parent:\n+/// A thread being detached and outliving the thread that spawned it:\n ///\n /// ```no_run\n /// use std::thread;\n@@ -1361,12 +1367,15 @@ impl<T> JoinHandle<T> {\n \n     /// Waits for the associated thread to finish.\n     ///\n+    /// This function will return immediately if the associated thread has already finished.\n+    ///\n     /// In terms of [atomic memory orderings],  the completion of the associated\n     /// thread synchronizes with this function returning. In other words, all\n-    /// operations performed by that thread are ordered before all\n+    /// operations performed by that thread [happen\n+    /// before](https://doc.rust-lang.org/nomicon/atomics.html#data-accesses) all\n     /// operations that happen after `join` returns.\n     ///\n-    /// If the child thread panics, [`Err`] is returned with the parameter given\n+    /// If the associated thread panics, [`Err`] is returned with the parameter given\n     /// to [`panic!`].\n     ///\n     /// [`Err`]: crate::result::Result::Err"}]}