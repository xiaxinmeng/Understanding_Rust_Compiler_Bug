{"sha": "3b9aea967f69fd96fce7a2861d953fe10004ef5f", "node_id": "C_kwDOAAsO6NoAKDNiOWFlYTk2N2Y2OWZkOTZmY2U3YTI4NjFkOTUzZmUxMDAwNGVmNWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T13:02:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T13:02:18Z"}, "message": "Rollup merge of #105744 - Ezrashaw:e0158-clarity, r=GuillaumeGomez\n\nRewrite `E0158` error-code docs for clarity\n\nFixes #105585.\n\nThe `E0158` error-code docs are unclear. It doesn't explain all three different variants of the error and doesn't explain *why* the error occurs. This PR cleans it up a bit and brings it properly into line with [RFC1567](https://rust-lang.github.io/rfcs/1567-long-error-codes-explanation-normalization.html).\n\nI'm a first time Rust contributor so I've probably not got it quite right. I also haven't run the whole build process because I assume that my minor docs changes shouldn't break everything.", "tree": {"sha": "030b4219bde312e6ab53f255c4d6b0093de90650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030b4219bde312e6ab53f255c4d6b0093de90650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9aea967f69fd96fce7a2861d953fe10004ef5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnGxaCRBK7hj4Ov3rIwAASpkIAAstcvDRcQdIStPW2TpQLcZg\npuk+5ag59ze5uHsXKcXQULKjuWPEmisvmg51fi+T001jEZ12nlniJ9Q1ARu7gVLv\nEF0RHx6INwc47T3FI5l+iyBbkaC2g/hU3LgbMeVuxCGYdvruokuv9ufcByyhxyH2\n/dMExvQV6VAwzPlbSqAV7ubUAeuYrc3E0Qu95nHDuhE/0ttuis4L/lD2s3llSVU6\nVK+2HHkcOfPJr3PkcCYTvpkpabnHCEHZ+zqjmFDqGudxtjWsuyCtDUcNAF6LEibm\n2RqNbxULN+Fiv5w7o3bd2lblw1kybuQ2G+Okf6baIooQb2QKC6X8DveJMnALyoA=\n=+nL+\n-----END PGP SIGNATURE-----\n", "payload": "tree 030b4219bde312e6ab53f255c4d6b0093de90650\nparent 22797ef6b23d7e6ca88c7d1401de4cfb18747f80\nparent fded03ee2d421359e49a69b6afa7d7f65ef9f597\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671195738 +0100\ncommitter GitHub <noreply@github.com> 1671195738 +0100\n\nRollup merge of #105744 - Ezrashaw:e0158-clarity, r=GuillaumeGomez\n\nRewrite `E0158` error-code docs for clarity\n\nFixes #105585.\n\nThe `E0158` error-code docs are unclear. It doesn't explain all three different variants of the error and doesn't explain *why* the error occurs. This PR cleans it up a bit and brings it properly into line with [RFC1567](https://rust-lang.github.io/rfcs/1567-long-error-codes-explanation-normalization.html).\n\nI'm a first time Rust contributor so I've probably not got it quite right. I also haven't run the whole build process because I assume that my minor docs changes shouldn't break everything.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9aea967f69fd96fce7a2861d953fe10004ef5f", "html_url": "https://github.com/rust-lang/rust/commit/3b9aea967f69fd96fce7a2861d953fe10004ef5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9aea967f69fd96fce7a2861d953fe10004ef5f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "html_url": "https://github.com/rust-lang/rust/commit/22797ef6b23d7e6ca88c7d1401de4cfb18747f80"}, {"sha": "fded03ee2d421359e49a69b6afa7d7f65ef9f597", "url": "https://api.github.com/repos/rust-lang/rust/commits/fded03ee2d421359e49a69b6afa7d7f65ef9f597", "html_url": "https://github.com/rust-lang/rust/commit/fded03ee2d421359e49a69b6afa7d7f65ef9f597"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "03b93d925c19a3f5c0eab3202af14735ab04cfdf", "filename": "compiler/rustc_error_codes/src/error_codes/E0158.md", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3b9aea967f69fd96fce7a2861d953fe10004ef5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b9aea967f69fd96fce7a2861d953fe10004ef5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md?ref=3b9aea967f69fd96fce7a2861d953fe10004ef5f", "patch": "@@ -1,38 +1,53 @@\n-An associated const has been referenced in a pattern.\n+An associated `const`, `const` parameter or `static` has been referenced\n+in a pattern.\n \n Erroneous code example:\n \n ```compile_fail,E0158\n-enum EFoo { A, B, C, D }\n+enum Foo {\n+    One,\n+    Two\n+}\n \n-trait Foo {\n-    const X: EFoo;\n+trait Bar {\n+    const X: Foo;\n }\n \n-fn test<A: Foo>(arg: EFoo) {\n+fn test<A: Bar>(arg: Foo) {\n     match arg {\n-        A::X => { // error!\n-            println!(\"A::X\");\n-        }\n+        A::X => println!(\"A::X\"), // error: E0158: associated consts cannot be\n+                                  //        referenced in patterns\n+        Foo::Two => println!(\"Two\")\n     }\n }\n ```\n \n-`const` and `static` mean different things. A `const` is a compile-time\n-constant, an alias for a literal value. This property means you can match it\n-directly within a pattern.\n+Associated `const`s cannot be referenced in patterns because it is impossible\n+for the compiler to prove exhaustiveness (that some pattern will always match).\n+Take the above example, because Rust does type checking in the *generic*\n+method, not the *monomorphized* specific instance. So because `Bar` could have\n+theoretically infinite implementations, there's no way to always be sure that\n+`A::X` is `Foo::One`. So this code must be rejected. Even if code can be\n+proven exhaustive by a programmer, the compiler cannot currently prove this.\n \n-The `static` keyword, on the other hand, guarantees a fixed location in memory.\n-This does not always mean that the value is constant. For example, a global\n-mutex can be declared `static` as well.\n+The same holds true of `const` parameters and `static`s.\n \n-If you want to match against a `static`, consider using a guard instead:\n+If you want to match against an associated `const`, `const` parameter or\n+`static` consider using a guard instead:\n \n ```\n-static FORTY_TWO: i32 = 42;\n+trait Trait {\n+    const X: char;\n+}\n+\n+static FOO: char = 'j';\n \n-match Some(42) {\n-    Some(x) if x == FORTY_TWO => {}\n-    _ => {}\n+fn test<A: Trait, const Y: char>(arg: char) {\n+    match arg {\n+        c if c == A::X => println!(\"A::X\"),\n+        c if c == Y => println!(\"Y\"),\n+        c if c == FOO => println!(\"FOO\"),\n+        _ => ()\n+    }\n }\n ```"}]}