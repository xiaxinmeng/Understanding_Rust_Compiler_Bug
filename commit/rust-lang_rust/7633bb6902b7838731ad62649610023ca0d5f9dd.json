{"sha": "7633bb6902b7838731ad62649610023ca0d5f9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzNiYjY5MDJiNzgzODczMWFkNjI2NDk2MTAwMjNjYTBkNWY5ZGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-11T17:08:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-11T17:08:01Z"}, "message": "Merge pull request #662 from bjorn3/jit_dylib\n\nLoad dependent dylibs in JIT mode", "tree": {"sha": "213f690395ea843547edf83e820f41269f298458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213f690395ea843547edf83e820f41269f298458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7633bb6902b7838731ad62649610023ca0d5f9dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdUEtxCRBK7hj4Ov3rIwAAdHIIAISnAJIdjvU3YzZNfWV7hgl4\nbyKK1on2vLak34WdtBla4J8jU90JEsGSSHp2bRXls+O8edFqdCX6f6UbTXyGkWEl\nfXQB2GnuGWOT3shjU0V2Z9Cbj7fVwxBxyxFsPpmmKyB4zpHLClIHIOrMxZctUcff\n1VCT3/o+t59ZwV2vXh4ZJYZzTfVB+51lx16CfkytMY1c/AAREXWgiKgrBJRXnpMd\nVL0eOUllHxKegVcgOp7b0dqSeRSSdCi9yC5DniGDEiyuliQrEORC/w/92Q37spEV\n/w6eVwAR+0fDJdKhcLN67AHTqB+eXlBJ7PN+OewECMCvuV+BGcUBqSyx0z8oLwU=\n=5n3g\n-----END PGP SIGNATURE-----\n", "payload": "tree 213f690395ea843547edf83e820f41269f298458\nparent bbcffc23cafb8b4965c54860156fa9a0b0a16de1\nparent 57bc9d8daf268fa7dc28d89665f4e8ee394ae726\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1565543281 +0200\ncommitter GitHub <noreply@github.com> 1565543281 +0200\n\nMerge pull request #662 from bjorn3/jit_dylib\n\nLoad dependent dylibs in JIT mode"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7633bb6902b7838731ad62649610023ca0d5f9dd", "html_url": "https://github.com/rust-lang/rust/commit/7633bb6902b7838731ad62649610023ca0d5f9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7633bb6902b7838731ad62649610023ca0d5f9dd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcffc23cafb8b4965c54860156fa9a0b0a16de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcffc23cafb8b4965c54860156fa9a0b0a16de1", "html_url": "https://github.com/rust-lang/rust/commit/bbcffc23cafb8b4965c54860156fa9a0b0a16de1"}, {"sha": "57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "url": "https://api.github.com/repos/rust-lang/rust/commits/57bc9d8daf268fa7dc28d89665f4e8ee394ae726", "html_url": "https://github.com/rust-lang/rust/commit/57bc9d8daf268fa7dc28d89665f4e8ee394ae726"}], "stats": {"total": 116, "additions": 89, "deletions": 27}, "files": [{"sha": "c642747e6f01d2ac1d910a49918e1fffb0ca6c85", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -396,6 +396,15 @@ name = \"libc\"\n version = \"0.2.60\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"libloading\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n@@ -606,6 +615,7 @@ dependencies = [\n  \"gimli 0.19.0 (git+https://github.com/gimli-rs/gimli.git)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libloading 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"object 0.12.0 (git+https://github.com/gimli-rs/object.git)\",\n  \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -884,6 +894,7 @@ dependencies = [\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n \"checksum libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d44e80633f007889c7eff624b709ab43c92d708caad982295768a7b13ca3b5eb\"\n+\"checksum libloading 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5692f82b51823e27c4118b3e5c0d98aee9be90633ebc71ad12afef380b50219\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n \"checksum mach 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\""}, {"sha": "ec0350687aacb4aa490ed8470918a1a06a5ede0c", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -26,6 +26,7 @@ tempfile = \"3.0.7\"\n gimli = { git = \"https://github.com/gimli-rs/gimli.git\" }\n indexmap = \"1.0.2\"\n object = \"0.12.0\"\n+libloading = \"0.5.1\"\n \n [patch.\"https://github.com/CraneStation/cranelift.git\"]\n cranelift = { git = \"https://github.com/bjorn3/cretonne.git\", branch = \"do_not_remove_cg_clif_i128\" }"}, {"sha": "c37dd5104a858c28e20bad1d612ca536b601343b", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -28,7 +28,7 @@ fi\n \n # Copy files to sysroot\n mkdir -p sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n-cp target/$TARGET_TRIPLE/$sysroot_channel/deps/*.rlib sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+cp target/$TARGET_TRIPLE/$sysroot_channel/deps/* sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n \n if [[ \"$1\" == \"--release\" ]]; then\n     channel='release'\n@@ -39,4 +39,4 @@ else\n fi\n \n # Copy files to sysroot\n-cp sysroot_src/src/libtest/target/$TARGET_TRIPLE/$sysroot_channel/deps/*.rlib sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+cp sysroot_src/src/libtest/target/$TARGET_TRIPLE/$sysroot_channel/deps/*  sysroot/lib/rustlib/$TARGET_TRIPLE/lib/"}, {"sha": "9bfff744a66f82c6f769f1733828b551c7aae91e", "filename": "config.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -15,3 +15,6 @@ TARGET_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n export RUSTFLAGS='-Zalways-encode-mir -Cpanic=abort -Cdebuginfo=2 -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n export RUSTC_LOG=warn # display metadata load errors\n+\n+export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/$TARGET_TRIPLE/lib\"\n+export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH"}, {"sha": "84664eb41392789df823b72d9d8b728c446cef76", "filename": "example/mini_core.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -369,9 +369,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n }\n \n #[lang = \"panic\"]\n-// Make it available to jited mini_core_hello_world\n-// FIXME remove next line when jit supports linking rlibs\n-#[inline(always)]\n pub fn panic(&(_msg, _file, _line, _col): &(&'static str, &'static str, u32, u32)) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n@@ -419,15 +416,11 @@ impl<T> Deref for Box<T> {\n }\n \n #[lang = \"exchange_malloc\"]\n-// Make it available to jited mini_core_hello_world\n-// FIXME remove next line when jit supports linking rlibs\n-#[inline(always)]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     libc::malloc(size)\n }\n \n #[lang = \"box_free\"]\n-#[inline(always)]\n unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     libc::free(ptr as *mut u8);\n }"}, {"sha": "3c4ce99d982893c9772771ca31c174fcea3e3151", "filename": "src/driver.rs", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -18,13 +18,6 @@ pub fn codegen_crate(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<dyn Any> {\n-    if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n-        && std::env::var(\"SHOULD_RUN\").is_ok()\n-    {\n-        tcx.sess\n-            .err(\"Can't JIT run non executable (SHOULD_RUN env var is set)\");\n-    }\n-\n     tcx.sess.abort_if_errors();\n \n     let mut log = if cfg!(debug_assertions) {\n@@ -33,7 +26,9 @@ pub fn codegen_crate(\n         None\n     };\n \n-    if std::env::var(\"SHOULD_RUN\").is_ok() {\n+    if std::env::var(\"SHOULD_RUN\").is_ok()\n+        && tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+    {\n         #[cfg(not(target_arch = \"wasm32\"))]\n         let _: ! = run_jit(tcx, &mut log);\n \n@@ -48,9 +43,14 @@ pub fn codegen_crate(\n fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n-    let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new(\n+    let imported_symbols = load_imported_symbols_for_jit(tcx);\n+\n+    let mut jit_builder = SimpleJITBuilder::with_isa(\n+        crate::build_isa(tcx.sess, false),\n         cranelift_module::default_libcall_names(),\n-    ));\n+    );\n+    jit_builder.symbols(imported_symbols);\n+    let mut jit_module: Module<SimpleJITBackend> = Module::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n     let sig = Signature {\n@@ -95,6 +95,53 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     std::process::exit(ret);\n }\n \n+fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n+    use rustc::middle::dependency_format::Linkage;\n+\n+    let mut dylib_paths = Vec::new();\n+\n+    let crate_info = CrateInfo::new(tcx);\n+    let formats = tcx.sess.dependency_formats.borrow();\n+    let data = formats.get(&CrateType::Executable).unwrap();\n+    for &(cnum, _) in &crate_info.used_crates_dynamic {\n+        let src = &crate_info.used_crate_source[&cnum];\n+        match data[cnum.as_usize() - 1] {\n+            Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n+            Linkage::Static => {\n+                let name = tcx.crate_name(cnum);\n+                let mut err = tcx.sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n+                err.emit();\n+            }\n+            Linkage::Dynamic => {\n+                dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n+            }\n+        }\n+    }\n+\n+    let mut imported_symbols = Vec::new();\n+    for path in dylib_paths {\n+        use object::Object;\n+        let lib = libloading::Library::new(&path).unwrap();\n+        let obj = std::fs::read(path).unwrap();\n+        let obj = object::File::parse(&obj).unwrap();\n+        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n+            let name = symbol.name().unwrap().to_string();\n+            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n+                return None;\n+            }\n+            let symbol: libloading::Symbol<*const u8> =\n+                unsafe { lib.get(name.as_bytes()) }.unwrap();\n+            Some((name, *symbol))\n+        }));\n+        std::mem::forget(lib)\n+    }\n+\n+    tcx.sess.abort_if_errors();\n+\n+    imported_symbols\n+}\n+\n fn run_aot(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n@@ -104,7 +151,7 @@ fn run_aot(\n     let new_module = |name: String| {\n         let module: Module<FaerieBackend> = Module::new(\n             FaerieBuilder::new(\n-                crate::build_isa(tcx.sess),\n+                crate::build_isa(tcx.sess, true),\n                 name + \".o\",\n                 FaerieTrapCollection::Disabled,\n                 cranelift_module::default_libcall_names(),\n@@ -176,7 +223,7 @@ fn run_aot(\n             .to_string();\n \n         let mut metadata_artifact =\n-            faerie::Artifact::new(crate::build_isa(tcx.sess).triple().clone(), metadata_cgu_name.clone());\n+            faerie::Artifact::new(crate::build_isa(tcx.sess, true).triple().clone(), metadata_cgu_name.clone());\n         crate::metadata::write_metadata(tcx, &mut metadata_artifact);\n \n         let tmp_file = tcx"}, {"sha": "e0cd46eea3c8aef123caf68dcb21c8c548c0dba8", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -239,10 +239,14 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     target.parse().unwrap()\n }\n \n-fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n-    flags_builder.enable(\"is_pic\").unwrap();\n-    flags_builder.set(\"probestack_enabled\", \"false\").unwrap(); // ___cranelift_probestack is not provided\n+    if enable_pic {\n+        flags_builder.enable(\"is_pic\").unwrap();\n+    } else {\n+        flags_builder.set(\"is_pic\", \"false\").unwrap();\n+    }\n+    flags_builder.set(\"probestack_enabled\", \"false\").unwrap(); // __cranelift_probestack is not provided\n         flags_builder.set(\"enable_verifier\", if cfg!(debug_assertions) {\n         \"true\"\n     } else {"}, {"sha": "4d05659a060e945cf63b95b4a656cfa9dd06c227", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -218,7 +218,7 @@ pub fn write_clif_file<'tcx>(\n         &mut clif,\n         &func,\n         &DisplayFunctionAnnotations {\n-            isa: Some(&*crate::build_isa(tcx.sess)),\n+            isa: Some(&*crate::build_isa(tcx.sess, true /* PIC doesn't matter here */)),\n             value_ranges,\n         },\n     )"}, {"sha": "cd2b9fe448398b50d6ebd9dd22484add33733201", "filename": "test.sh", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7633bb6902b7838731ad62649610023ca0d5f9dd/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7633bb6902b7838731ad62649610023ca0d5f9dd/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=7633bb6902b7838731ad62649610023ca0d5f9dd", "patch": "@@ -35,11 +35,14 @@ $RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitr\n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh\n \n-echo \"[BUILD+RUN] alloc_example\"\n+echo \"[AOT] alloc_example\"\n $RUSTC example/alloc_example.rs --crate-type bin\n ./target/out/alloc_example\n \n-echo \"[BUILD+RUN] std_example\"\n+echo \"[JIT] std_example\"\n+SHOULD_RUN=1 $RUSTC example/std_example.rs --crate-type bin -Cprefer-dynamic\n+\n+echo \"[AOT] std_example\"\n $RUSTC example/std_example.rs --crate-type bin\n ./target/out/std_example\n "}]}