{"sha": "535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWQyN2FjOWEzZDQ1ZGQ5Mjc2OWY0ZDRjN2I5ZjQ1NGQxMDc3ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T12:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T12:47:23Z"}, "message": "Auto merge of #77236 - matthewjasper:defer-typeof-impl-trait, r=davidtwco\n\nCompute underlying type of impl trait types later in compilation\n\nAlso change a `bug!` to `delay_span_bug`\nCloses #74018", "tree": {"sha": "2ae8bd0153d76845d29d95032214a7ae8772c645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae8bd0153d76845d29d95032214a7ae8772c645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "html_url": "https://github.com/rust-lang/rust/commit/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5a865b2f671189af8d7af6b2d8f3dfa2a6d425", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5a865b2f671189af8d7af6b2d8f3dfa2a6d425", "html_url": "https://github.com/rust-lang/rust/commit/1d5a865b2f671189af8d7af6b2d8f3dfa2a6d425"}, {"sha": "3a81adeca2b81a3c54bbbe07afafedea79f92c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a81adeca2b81a3c54bbbe07afafedea79f92c42", "html_url": "https://github.com/rust-lang/rust/commit/3a81adeca2b81a3c54bbbe07afafedea79f92c42"}], "stats": {"total": 805, "additions": 375, "deletions": 430}, "files": [{"sha": "3dc082a4413b3631f58e335217a37b0efd0307c5", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         polonius_output: Option<Rc<PoloniusOutput>>,\n     ) -> (Option<ClosureRegionRequirements<'tcx>>, RegionErrors<'tcx>) {\n-        self.propagate_constraints(body);\n+        self.propagate_constraints(body, infcx.tcx);\n \n         let mut errors_buffer = RegionErrors::new();\n \n@@ -599,7 +599,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// for each region variable until all the constraints are\n     /// satisfied. Note that some values may grow **too** large to be\n     /// feasible, but we check this later.\n-    fn propagate_constraints(&mut self, _body: &Body<'tcx>) {\n+    fn propagate_constraints(&mut self, _body: &Body<'tcx>, tcx: TyCtxt<'tcx>) {\n         debug!(\"propagate_constraints()\");\n \n         debug!(\"propagate_constraints: constraints={:#?}\", {\n@@ -617,7 +617,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // own.\n         let constraint_sccs = self.constraint_sccs.clone();\n         for scc in constraint_sccs.all_sccs() {\n-            self.compute_value_for_scc(scc);\n+            self.compute_value_for_scc(scc, tcx);\n         }\n \n         // Sort the applied member constraints so we can binary search\n@@ -629,7 +629,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// computed, by unioning the values of its successors.\n     /// Assumes that all successors have been computed already\n     /// (which is assured by iterating over SCCs in dependency order).\n-    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex) {\n+    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex, tcx: TyCtxt<'tcx>) {\n         let constraint_sccs = self.constraint_sccs.clone();\n \n         // Walk each SCC `B` such that `A: B`...\n@@ -652,7 +652,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Now take member constraints into account.\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.indices(scc_a) {\n-            self.apply_member_constraint(scc_a, m_c_i, member_constraints.choice_regions(m_c_i));\n+            self.apply_member_constraint(\n+                tcx,\n+                scc_a,\n+                m_c_i,\n+                member_constraints.choice_regions(m_c_i),\n+            );\n         }\n \n         debug!(\n@@ -675,6 +680,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// If we make any changes, returns true, else false.\n     fn apply_member_constraint(\n         &mut self,\n+        tcx: TyCtxt<'tcx>,\n         scc: ConstraintSccIndex,\n         member_constraint_index: NllMemberConstraintIndex,\n         choice_regions: &[ty::RegionVid],\n@@ -688,12 +694,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // `impl_trait_in_bindings`, I believe, and we are just\n             // opting not to handle it for now. See #61773 for\n             // details.\n-            bug!(\n-                \"member constraint for `{:?}` has an option region `{:?}` \\\n-                 that is not a universal region\",\n-                self.member_constraints[member_constraint_index].opaque_type_def_id,\n-                uh_oh,\n+            tcx.sess.delay_span_bug(\n+                self.member_constraints[member_constraint_index].definition_span,\n+                &format!(\n+                    \"member constraint for `{:?}` has an option region `{:?}` \\\n+                     that is not a universal region\",\n+                    self.member_constraints[member_constraint_index].opaque_type_def_id, uh_oh,\n+                ),\n             );\n+            return false;\n         }\n \n         // Create a mutable vector of the options. We'll try to winnow"}, {"sha": "0647be2dfde0be3332a26ef0952dd590833f6ec6", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -385,6 +385,7 @@ pub(super) fn check_opaque<'tcx>(\n     origin: &hir::OpaqueTyOrigin,\n ) {\n     check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n+    tcx.ensure().type_of(def_id);\n     check_opaque_for_cycles(tcx, def_id, substs, span, origin);\n }\n "}, {"sha": "d6985f3bd4d636f08a3228b672d67252089b5f9f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -693,8 +693,14 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         // Desugared from `impl Trait`, so visited by the function's return type.\n         hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: Some(_), .. }) => {}\n \n-        hir::ItemKind::OpaqueTy(..)\n-        | hir::ItemKind::TyAlias(..)\n+        // Don't call `type_of` on opaque types, since that depends on type\n+        // checking function bodies. `check_item_type` ensures that it's called\n+        // instead.\n+        hir::ItemKind::OpaqueTy(..) => {\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n+        }\n+        hir::ItemKind::TyAlias(..)\n         | hir::ItemKind::Static(..)\n         | hir::ItemKind::Const(..)\n         | hir::ItemKind::Fn(..) => {"}, {"sha": "21fb92ec8891a32f6ba88e7996f9f2c2f73b99a6", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -359,7 +359,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n-    // FIXME(matthewjasper) We shouldn't need to do this.\n+    // FIXME(matthewjasper) We shouldn't need to use `track_errors`.\n     tcx.sess.track_errors(|| {\n         tcx.sess.time(\"type_collecting\", || {\n             for &module in tcx.hir().krate().modules.keys() {"}, {"sha": "39df9ba02fdf5e1290693d8a7156078196ec2c8e", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -60,11 +60,8 @@ fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n@@ -107,28 +104,16 @@ type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n \n trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n@@ -166,15 +151,9 @@ trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n \n fn main() {}"}, {"sha": "77cd88e524f5ff8522dbfff43037caa563ee724f", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 46, "deletions": 178, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -200,497 +200,365 @@ LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:65:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:40\n+  --> $DIR/duplicate.rs:67:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:43\n+  --> $DIR/duplicate.rs:69:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:39\n+  --> $DIR/duplicate.rs:72:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:39\n+  --> $DIR/duplicate.rs:74:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:42\n+  --> $DIR/duplicate.rs:76:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:40\n+  --> $DIR/duplicate.rs:78:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:40\n+  --> $DIR/duplicate.rs:80:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:43\n+  --> $DIR/duplicate.rs:82:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n+  --> $DIR/duplicate.rs:85:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:46\n+  --> $DIR/duplicate.rs:87:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:49\n+  --> $DIR/duplicate.rs:89:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:92:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:35\n+  --> $DIR/duplicate.rs:94:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:38\n+  --> $DIR/duplicate.rs:96:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:98:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:44\n+  --> $DIR/duplicate.rs:100:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:47\n+  --> $DIR/duplicate.rs:102:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:105:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:62:42\n-   |\n-LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-   |                              ----------  ^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:64:42\n-   |\n-LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-   |                              ----------  ^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:45\n-   |\n-LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-   |                              -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:108:51\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                                                   ^^^^^^^^^\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:36\n+  --> $DIR/duplicate.rs:107:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:111:51\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                                                   ^^^^^^^^^\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:39\n+  --> $DIR/duplicate.rs:109:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:57\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                                                         ^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:117:14\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:117:40\n+  --> $DIR/duplicate.rs:111:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:122:14\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:40\n+  --> $DIR/duplicate.rs:113:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:127:14\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:43\n+  --> $DIR/duplicate.rs:115:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:36\n+  --> $DIR/duplicate.rs:118:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:36\n+  --> $DIR/duplicate.rs:120:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:39\n+  --> $DIR/duplicate.rs:122:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:34\n+  --> $DIR/duplicate.rs:124:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:141:34\n+  --> $DIR/duplicate.rs:126:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:37\n+  --> $DIR/duplicate.rs:128:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:45\n+  --> $DIR/duplicate.rs:130:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:45\n+  --> $DIR/duplicate.rs:132:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:48\n+  --> $DIR/duplicate.rs:134:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:151:46\n+  --> $DIR/duplicate.rs:136:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:151:46\n+  --> $DIR/duplicate.rs:136:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:46\n+  --> $DIR/duplicate.rs:139:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:46\n+  --> $DIR/duplicate.rs:139:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:49\n+  --> $DIR/duplicate.rs:142:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:49\n+  --> $DIR/duplicate.rs:142:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:43\n+  --> $DIR/duplicate.rs:145:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:162:43\n+  --> $DIR/duplicate.rs:147:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:46\n+  --> $DIR/duplicate.rs:149:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:167:40\n+  --> $DIR/duplicate.rs:152:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:171:44\n+  --> $DIR/duplicate.rs:154:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:175:43\n+  --> $DIR/duplicate.rs:156:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:117:28\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |                            ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:117:40\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |                                        ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:122:28\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |                            ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:122:40\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |                                        ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:127:28\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |                            ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:127:43\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |                                           ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:167:28\n-   |\n-LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-   |                            ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:167:40\n-   |\n-LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-   |                                        ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:171:32\n-   |\n-LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-   |                                ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:171:44\n-   |\n-LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-   |                                            ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:175:28\n-   |\n-LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-   |                            ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:175:43\n-   |\n-LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-   |                                           ^^^^^^^^^^^^^\n-\n-error: aborting due to 90 previous errors; 1 warning emitted\n+error: aborting due to 69 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "5af057387509de774abfd4f2291b298a7b6bc4da", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -3,32 +3,27 @@\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n struct S3 { f: dyn Iterator<Item: 'static> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n enum E3 { V(dyn Iterator<Item: 'static>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n \n union U1 { f: dyn Iterator<Item: Copy> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n union U2 { f: Box<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n union U3 { f: dyn Iterator<Item: 'static> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR could not find defining uses\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n \n fn main() {}"}, {"sha": "74e858ca8616f13c8ae1738e364014144aa7d96a", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 67, "deletions": 48, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -5,106 +5,125 @@ LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:7:33\n+  --> $DIR/inside-adt.rs:6:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:10:29\n+  --> $DIR/inside-adt.rs:8:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:14:26\n+  --> $DIR/inside-adt.rs:11:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:17:30\n+  --> $DIR/inside-adt.rs:14:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:20:26\n+  --> $DIR/inside-adt.rs:16:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:24:28\n+  --> $DIR/inside-adt.rs:20:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:27:32\n+  --> $DIR/inside-adt.rs:23:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:30:28\n+  --> $DIR/inside-adt.rs:25:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:4:29\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n+  --> $DIR/inside-adt.rs:11:13\n    |\n-LL | struct S1 { f: dyn Iterator<Item: Copy> }\n-   |                             ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:7:33\n+LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-   |                                 ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:10:29\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n+   = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n    |\n-LL | struct S3 { f: dyn Iterator<Item: 'static> }\n-   |                             ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:14:26\n+LL | enum E1 { V(&dyn Iterator<Item: Copy>) }\n+   |             ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n-   |                          ^^^^^^^^^^\n+LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n+   |             ^^^^                        ^\n \n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:17:30\n-   |\n-LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |                              ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:20:26\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+  --> $DIR/inside-adt.rs:16:13\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n-   |                          ^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL | enum E3 { V(&dyn Iterator<Item: 'static>) }\n+   |             ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n+   |             ^^^^                           ^\n \n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:24:28\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n+  --> $DIR/inside-adt.rs:20:15\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n-   |                            ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:27:32\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n-   |                                ^^^^^^^^^^\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n+   = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL | union U1 { f: &dyn Iterator<Item: Copy> }\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL | union U1 { f: Box<dyn Iterator<Item: Copy>> }\n+   |               ^^^^                        ^\n \n-error: could not find defining uses\n-  --> $DIR/inside-adt.rs:30:28\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+  --> $DIR/inside-adt.rs:25:15\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n-   |                            ^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL | union U3 { f: &dyn Iterator<Item: 'static> }\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL | union U3 { f: Box<dyn Iterator<Item: 'static>> }\n+   |               ^^^^                           ^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 13 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4f160fccc0113ab153f70828a51f4f8ab1fdda52", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -5,7 +5,7 @@\n async fn copy() -> Result<()> //~ ERROR wrong number of type arguments\n {\n     Ok(())\n-    //~^ type annotations needed\n+    //~^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "a746ed09af55b0311a814127d17b7c2dcc1f6d39", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,8 +1,7 @@\n // ignore-tidy-linelength\n #![feature(type_alias_impl_trait)]\n \n-pub trait Bar\n-{\n+pub trait Bar {\n     type E: Copy;\n \n     fn foo<T>() -> Self::E;\n@@ -14,7 +13,8 @@ impl<S: Default> Bar for S {\n     //~^^ ERROR the trait bound `T: Copy` is not satisfied in `(S, T)` [E0277]\n \n     fn foo<T: Default>() -> Self::E {\n-    //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~| ERROR impl has stricter requirements than trait\n         (S::default(), T::default())\n     }\n }"}, {"sha": "db49d988bb8eb81ae62e0a86172ae23c04e0b871", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,5 +1,14 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-55872-1.rs:15:5\n+   |\n+LL |     fn foo<T>() -> Self::E;\n+   |     ----------------------- definition of `foo` from trait\n+...\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+\n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n+  --> $DIR/issue-55872-1.rs:11:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -12,7 +21,7 @@ LL | impl<S: Default + Copy> Bar for S {\n    |                 ^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n+  --> $DIR/issue-55872-1.rs:11:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -25,15 +34,17 @@ LL |     fn foo<T: Default + Copy>() -> Self::E {\n    |                       ^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:16:37\n+  --> $DIR/issue-55872-1.rs:15:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^\n LL | |\n+LL | |\n LL | |         (S::default(), T::default())\n LL | |     }\n    | |_____^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0276, E0277.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "72b880fb92c65ec9582c7a48fa28ae26c7357b03", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -56,10 +56,12 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n+//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }"}, {"sha": "93f9724140ef6e36d596c3f474693185ebd9354f", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 51, "deletions": 31, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:119:16\n+  --> $DIR/where-allowed.rs:121:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:155:23\n+  --> $DIR/where-allowed.rs:157:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:159:39\n+  --> $DIR/where-allowed.rs:161:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -110,164 +110,184 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:61:59\n+  --> $DIR/where-allowed.rs:62:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:65:38\n+  --> $DIR/where-allowed.rs:67:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:69:40\n+  --> $DIR/where-allowed.rs:71:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:82:32\n+  --> $DIR/where-allowed.rs:84:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:86:41\n+  --> $DIR/where-allowed.rs:88:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:90:27\n+  --> $DIR/where-allowed.rs:92:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:95:25\n+  --> $DIR/where-allowed.rs:97:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:97:20\n+  --> $DIR/where-allowed.rs:99:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:108:23\n+  --> $DIR/where-allowed.rs:110:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:126:34\n+  --> $DIR/where-allowed.rs:128:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:139:33\n+  --> $DIR/where-allowed.rs:141:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:142:31\n+  --> $DIR/where-allowed.rs:144:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:159:39\n+  --> $DIR/where-allowed.rs:161:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:164:16\n+  --> $DIR/where-allowed.rs:166:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:169:24\n+  --> $DIR/where-allowed.rs:171:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:174:6\n+  --> $DIR/where-allowed.rs:176:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:180:24\n+  --> $DIR/where-allowed.rs:182:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:186:11\n+  --> $DIR/where-allowed.rs:188:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:193:15\n+  --> $DIR/where-allowed.rs:195:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:200:24\n+  --> $DIR/where-allowed.rs:202:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:207:17\n+  --> $DIR/where-allowed.rs:209:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:214:22\n+  --> $DIR/where-allowed.rs:216:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:220:29\n+  --> $DIR/where-allowed.rs:222:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:222:46\n+  --> $DIR/where-allowed.rs:224:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/where-allowed.rs:56:49\n+   |\n+LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n+   |                                                 |\n+   |                                                 cannot resolve opaque type\n+   |\n+   = help: this error will resolve once the item's body returns a concrete type\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/where-allowed.rs:62:46\n+   |\n+LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n+   |                                              |\n+   |                                              cannot resolve opaque type\n+   |\n+   = help: this error will resolve once the item's body returns a concrete type\n+\n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:119:16\n+  --> $DIR/where-allowed.rs:121:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:155:23\n+  --> $DIR/where-allowed.rs:157:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n \n-error: aborting due to 42 previous errors\n+error: aborting due to 44 previous errors\n \n-Some errors have detailed explanations: E0562, E0658, E0666.\n+Some errors have detailed explanations: E0562, E0658, E0666, E0720.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "a15074c35936bb2d10cd04ac5d8b5cb27908c086", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,19 +1,18 @@\n #![feature(type_alias_impl_trait)]\n \n-fn main() {\n-}\n+fn main() {}\n \n trait TraitWithAssoc {\n     type Assoc;\n }\n \n type Foo<V> = impl Trait<V>;\n-//~^ ERROR the trait bound `T: TraitWithAssoc` is not satisfied\n \n trait Trait<U> {}\n \n impl<W> Trait<W> for () {}\n \n fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     ()\n }"}, {"sha": "c9d6a43b9094ace0c5ea08b930d92eca1f44439a", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: the trait bound `T: TraitWithAssoc` is not satisfied\n-  --> $DIR/bound_reduction2.rs:10:15\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/bound_reduction2.rs:15:46\n    |\n-LL | type Foo<V> = impl Trait<V>;\n-   |               ^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n+LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+   |                                              ^^^^^^^^^^^^^\n    |\n-help: consider further restricting this bound\n+note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n+  --> $DIR/bound_reduction2.rs:9:10\n    |\n-LL | fn foo_desugared<T: TraitWithAssoc + TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                                    ^^^^^^^^^^^^^^^^\n+LL | type Foo<V> = impl Trait<V>;\n+   |          ^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "7ea517eb734a459701bfd6d1887416af6f228559", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -9,4 +9,5 @@ mod boo {\n \n fn bomp() -> boo::Boo {\n     \"\"\n+    //~^ mismatched types\n }"}, {"sha": "0b4c262bbb43b97f0a52e7bb8d9a60cc75a83d2c", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -4,5 +4,20 @@ error: could not find defining uses\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/declared_but_not_defined_in_scope.rs:11:5\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the expected opaque type\n+...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `impl Debug` because of return type\n+LL |     \"\"\n+   |     ^^ expected opaque type, found `&str`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                found reference `&'static str`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a74731df69515f05d454255d9746e4fed54d9845", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -8,10 +8,10 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-//~^ ERROR concrete type differs from previous defining opaque type use\n     t\n }"}, {"sha": "d87e8c5783b65e1020d8b275a000b90171239f26", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,14 +1,14 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use2.rs:14:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use2.rs:10:27\n    |\n-LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `U`, got `T`\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n    |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use2.rs:10:1\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use2.rs:8:10\n    |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n \n error: aborting due to previous error\n "}, {"sha": "0597b8385d25255673bdc496fad0fd92b64f9fc5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -8,11 +8,11 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-//~^ ERROR concrete type differs from previous defining opaque type use\n     t\n }\n "}, {"sha": "711de855f0d10978edf72e5311010b57b21d8bb2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,14 +1,14 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:14:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use3.rs:10:27\n    |\n-LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `U`, got `T`\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n    |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use3.rs:10:1\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use3.rs:8:10\n    |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n \n error: aborting due to previous error\n "}, {"sha": "766ee36c02be2662034d0c9e8402e79f6f8ff6fe", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -3,10 +3,11 @@\n fn main() {}\n \n trait Trait {}\n-type Underconstrained<T: Trait> = impl 'static; //~ ERROR the trait bound `T: Trait`\n+type Underconstrained<T: Trait> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n // no `Trait` bound\n fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+    //~^ ERROR the trait bound `T: Trait`\n     unimplemented!()\n }"}, {"sha": "cefc5d99b379ed68381731bfcb85f0817b527d22", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -5,12 +5,14 @@ LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:6:35\n+  --> $DIR/generic_underconstrained.rs:10:31\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                   ^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |                          ----- required by this bound in `Underconstrained`\n+...\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n-   = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `T`\n    |\n LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {"}, {"sha": "cd7c962e2d15b06bbd30805c9a44b96163cb752e", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -3,19 +3,19 @@\n fn main() {}\n \n type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-//~^ ERROR `U` doesn't implement `Debug`\n-//~^^ ERROR: at least one trait must be specified\n+//~^ ERROR: at least one trait must be specified\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+    //~^ ERROR `U` doesn't implement `Debug`\n     5u32\n }\n \n type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-//~^ ERROR `V` doesn't implement `Debug`\n-//~^^ ERROR: at least one trait must be specified\n+//~^ ERROR: at least one trait must be specified\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+    //~^ ERROR `V` doesn't implement `Debug`\n     5u32\n }"}, {"sha": "669546aef86691fbeb24a57c0b9b448f4b7f9e65", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -11,30 +11,28 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:5:45\n+  --> $DIR/generic_underconstrained2.rs:9:33\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                             ^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |                          --------------- required by this bound in `Underconstrained`\n ...\n-LL |     5u32\n-   |     ---- this returned value is of type `u32`\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `U`\n    |\n LL | fn underconstrained<U: Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:14:46\n+  --> $DIR/generic_underconstrained2.rs:18:43\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                              ^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |                           --------------- required by this bound in `Underconstrained2`\n ...\n-LL |     5u32\n-   |     ---- this returned value is of type `u32`\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `V`\n    |\n LL | fn underconstrained2<U, V: Debug>(_: U, _: V) -> Underconstrained2<V> {"}, {"sha": "851c2f66c475a2a39fcaaaaab3d9d2304106a7bc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -9,10 +9,9 @@ trait X {\n }\n \n impl<T> X for () {\n+    //~^ ERROR the type parameter `T` is not constrained\n     type I = impl Sized;\n-    //~^ ERROR could not find defining uses\n     fn f() -> Self::I {}\n-    //~^ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "8cf8fb1d16c4d8f997ecd6dd1f74dccb827aadcc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,15 +1,9 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/impl-with-unconstrained-param.rs:14:23\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/impl-with-unconstrained-param.rs:11:6\n    |\n-LL |     fn f() -> Self::I {}\n-   |                       ^^ cannot infer type for type parameter `T`\n+LL | impl<T> X for () {\n+   |      ^ unconstrained type parameter\n \n-error: could not find defining uses\n-  --> $DIR/impl-with-unconstrained-param.rs:12:14\n-   |\n-LL |     type I = impl Sized;\n-   |              ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "782eb0fb3df5e8993f02751fdc92f37471d1ef71", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -22,6 +22,6 @@ impl Foo for X {\n     }\n }\n \n-trait Baz<A, B> = Fn(&A) -> &B;\n+trait Baz<A: ?Sized, B: ?Sized> = Fn(&A) -> &B;\n \n fn main() {}"}, {"sha": "f29b980dfd0e578e0177ea2a574c3d18ff6b1c2d", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -7,6 +7,7 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn two<T: Debug>(t: T) -> Two<T, u32> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     (t, 4i8)\n }\n \n@@ -24,9 +25,7 @@ impl Bar for u32 {\n     const FOO: i32 = 42;\n }\n \n-// this should work! But it requires `two` and `three` not to be defining uses,\n-// just restricting uses\n-fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> { //~ concrete type differs from previous\n+fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n     (t, <U as Bar>::FOO)\n }\n "}, {"sha": "2fa236b373a40e482f9b5249ee24a8e3215d590a", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -1,14 +1,14 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/not_a_defining_use.rs:29:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/not_a_defining_use.rs:9:27\n    |\n-LL | fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n+LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n+   |                           ^^^^^^^^^^^\n    |\n-note: previous use here\n-  --> $DIR/not_a_defining_use.rs:9:1\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/not_a_defining_use.rs:7:13\n    |\n-LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Two<T, U> = impl Debug;\n+   |             ^\n \n error: aborting due to previous error\n "}, {"sha": "efbf4f1e351f7b699bc4a5c2c2d930653fd82408", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -0,0 +1,18 @@\n+// regression test for #74018\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {\n+    type Associated;\n+    fn into(self) -> Self::Associated;\n+}\n+\n+impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n+    //~^ ERROR the lifetime parameter `'a` is not constrained\n+    type Associated = (i32, impl Iterator<Item = i32>);\n+    fn into(self) -> Self::Associated {\n+        (0_i32, [0_i32].iter().copied())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8cdce2f8e81cae60b653c0ccbcc4bc45a249aa87", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:10:6\n+   |\n+LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "684f451b7c3f68787081924c2e196fb49dfa41f9", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535d27ac9a3d45dd92769f4d4c7b9f454d1077ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=535d27ac9a3d45dd92769f4d4c7b9f454d1077ea", "patch": "@@ -405,15 +405,10 @@ LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:43:27\n-   |\n-LL |     fn test10(&self, _x : _) { }\n-   |                           ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n+  --> $DIR/typeck_type_placeholder_item.rs:182:21\n    |\n-LL |     fn test10<T>(&self, _x : T) { }\n-   |              ^^^             ^\n+LL | type Y = impl Trait<_>;\n+   |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n@@ -485,45 +480,6 @@ help: use type parameters instead\n LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:61:37\n-   |\n-LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:110:34\n-   |\n-LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn fn_test10<T>(&self, _x : T) { }\n-   |                     ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:118:41\n-   |\n-LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:182:21\n-   |\n-LL | type Y = impl Trait<_>;\n-   |                     ^ not allowed in type signatures\n-\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n@@ -560,6 +516,17 @@ LL |     fn test9(&self) -> _ { () }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `()`\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:43:27\n+   |\n+LL |     fn test10(&self, _x : _) { }\n+   |                           ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn test10<T>(&self, _x : T) { }\n+   |              ^^^             ^\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:58:24\n    |\n@@ -569,6 +536,17 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `Test9`\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:61:37\n+   |\n+LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n+   |                                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n+   |                  ^^^                   ^\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:107:31\n    |\n@@ -578,6 +556,17 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               not allowed in type signatures\n    |                               help: replace with the correct return type: `()`\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:110:34\n+   |\n+LL |         fn fn_test10(&self, _x : _) { }\n+   |                                  ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn fn_test10<T>(&self, _x : T) { }\n+   |                     ^^^             ^\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:115:28\n    |\n@@ -587,6 +576,17 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `FnTest9`\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:118:41\n+   |\n+LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n+   |                                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n+   |                      ^^^                   ^\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |"}]}