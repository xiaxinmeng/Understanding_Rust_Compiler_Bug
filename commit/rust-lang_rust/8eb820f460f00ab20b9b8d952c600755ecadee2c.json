{"sha": "8eb820f460f00ab20b9b8d952c600755ecadee2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjgyMGY0NjBmMDBhYjIwYjliOGQ5NTJjNjAwNzU1ZWNhZGVlMmM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-05-03T12:07:57Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-05-03T12:55:08Z"}, "message": "Omit name hints for method names similar to parameter names", "tree": {"sha": "1b33340a396d93273941288dbb5236852d9533d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b33340a396d93273941288dbb5236852d9533d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb820f460f00ab20b9b8d952c600755ecadee2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb820f460f00ab20b9b8d952c600755ecadee2c", "html_url": "https://github.com/rust-lang/rust/commit/8eb820f460f00ab20b9b8d952c600755ecadee2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb820f460f00ab20b9b8d952c600755ecadee2c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa35b02b2f1a197beec65bcd68f56ffb89abfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa35b02b2f1a197beec65bcd68f56ffb89abfa1", "html_url": "https://github.com/rust-lang/rust/commit/baa35b02b2f1a197beec65bcd68f56ffb89abfa1"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "8eb2c44125f67498459959fb351e4f8a272dd1ea", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8eb820f460f00ab20b9b8d952c600755ecadee2c/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb820f460f00ab20b9b8d952c600755ecadee2c/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=8eb820f460f00ab20b9b8d952c600755ecadee2c", "patch": "@@ -144,7 +144,7 @@ fn get_param_name_hints(\n         .iter()\n         .skip(n_params_to_skip)\n         .zip(args)\n-        .filter(|(param, arg)| should_show_param_hint(&fn_signature, param, &arg))\n+        .filter(|(param, arg)| should_show_param_name_hint(&fn_signature, param, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -181,7 +181,7 @@ fn get_bind_pat_hints(\n \n fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n     if let Some(Adt::Enum(enum_data)) = pat_ty.as_adt() {\n-        let pat_text = bind_pat.syntax().to_string();\n+        let pat_text = bind_pat.to_string();\n         enum_data\n             .variants(db)\n             .into_iter()\n@@ -198,7 +198,7 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n     }\n \n     if let Some(Adt::Struct(s)) = pat_ty.as_adt() {\n-        if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.syntax().to_string() {\n+        if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.to_string() {\n             return true;\n         }\n     }\n@@ -230,13 +230,13 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n     false\n }\n \n-fn should_show_param_hint(\n+fn should_show_param_name_hint(\n     fn_signature: &FunctionSignature,\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n     if param_name.is_empty()\n-        || is_argument_similar_to_param(argument, param_name)\n+        || is_argument_similar_to_param_name(argument, param_name)\n         || Some(param_name.trim_start_matches('_'))\n             == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n     {\n@@ -254,20 +254,25 @@ fn should_show_param_hint(\n     parameters_len != 1 || !is_obvious_param(param_name)\n }\n \n-fn is_argument_similar_to_param(argument: &ast::Expr, param_name: &str) -> bool {\n-    let argument_string = remove_ref(argument.clone()).syntax().to_string();\n+fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n+    let argument_string = if let Some(repr) = get_string_representation(argument) {\n+        repr\n+    } else {\n+        return false;\n+    };\n     let param_name = param_name.trim_start_matches('_');\n     let argument_string = argument_string.trim_start_matches('_');\n     argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n }\n \n-fn remove_ref(expr: ast::Expr) -> ast::Expr {\n-    if let ast::Expr::RefExpr(ref_expr) = &expr {\n-        if let Some(inner) = ref_expr.expr() {\n-            return inner;\n+fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n+    match expr {\n+        ast::Expr::MethodCallExpr(method_call_expr) => {\n+            Some(method_call_expr.name_ref()?.to_string())\n         }\n+        ast::Expr::RefExpr(ref_expr) => get_string_representation(&ref_expr.expr()?),\n+        _ => Some(expr.to_string()),\n     }\n-    expr\n }\n \n fn is_obvious_param(param_name: &str) -> bool {\n@@ -1073,6 +1078,12 @@ struct TestVarContainer {\n     test_var: i32,\n }\n \n+impl TestVarContainer {\n+    fn test_var(&self) -> i32 {\n+        self.test_var\n+    }\n+}\n+\n struct Test {}\n \n impl Test {\n@@ -1114,12 +1125,13 @@ fn main() {\n     let test_var: i32 = 55;\n     test_processed.no_hints_expected(22, test_var);\n     test_processed.no_hints_expected(33, container.test_var);\n+    test_processed.no_hints_expected(44, container.test_var());\n     test_processed.frob(false);\n \n     twiddle(true);\n     doo(true);\n \n-    let param_begin: Param = Param {};\n+    let mut param_begin: Param = Param {};\n     different_order(&param_begin);\n     different_order(&mut param_begin);\n "}]}