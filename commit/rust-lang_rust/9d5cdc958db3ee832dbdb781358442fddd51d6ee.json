{"sha": "9d5cdc958db3ee832dbdb781358442fddd51d6ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWNkYzk1OGRiM2VlODMyZGJkYjc4MTM1ODQ0MmZkZGQ1MWQ2ZWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-23T09:21:01Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:02:40Z"}, "message": "Review feedback: Adding test cases suggested by arielb1.", "tree": {"sha": "3f41f60e40a849321c799147c40d9b3d14ee040f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f41f60e40a849321c799147c40d9b3d14ee040f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5cdc958db3ee832dbdb781358442fddd51d6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5cdc958db3ee832dbdb781358442fddd51d6ee", "html_url": "https://github.com/rust-lang/rust/commit/9d5cdc958db3ee832dbdb781358442fddd51d6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5cdc958db3ee832dbdb781358442fddd51d6ee/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324ced89e89a4e050ab2d0ef9e30e4ec8968f51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/324ced89e89a4e050ab2d0ef9e30e4ec8968f51a", "html_url": "https://github.com/rust-lang/rust/commit/324ced89e89a4e050ab2d0ef9e30e4ec8968f51a"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "b575f4ebce6c013c55338f924fba5e7ea41d6d02", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-1.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.rs?ref=9d5cdc958db3ee832dbdb781358442fddd51d6ee", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is testing an attempt to corrupt the discriminant of the match\n+// arm in a guard, followed by an attempt to continue matching on that\n+// corrupted discriminant in the remaining match arms.\n+//\n+// Basically this is testing that our new NLL feature of emitting a\n+// fake read on each match arm is catching cases like this.\n+//\n+// This case is interesting because it includes a guard that\n+// diverges, and therefore a single final fake-read at the very end\n+// after the final match arm would not suffice.\n+\n+#![feature(nll)]\n+\n+struct ForceFnOnce;\n+\n+fn main() {\n+    let mut x = &mut Some(&2);\n+    let force_fn_once = ForceFnOnce;\n+    match x {\n+        &mut None => panic!(\"unreachable\"),\n+        &mut Some(&_) if {\n+            // ForceFnOnce needed to exploit #27282\n+            (|| { *x = None; drop(force_fn_once); })();\n+            //~^ ERROR closure requires unique access to `x` but it is already borrowed [E0500]\n+            false\n+        } => {}\n+        &mut Some(&a) if { // this binds to garbage if we've corrupted discriminant\n+            println!(\"{}\", a);\n+            panic!()\n+        } => {}\n+        _ => panic!(\"unreachable\"),\n+    }\n+}"}, {"sha": "8f7fe9d33fe4128826edbcf27aa312b44b5a23ea", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=9d5cdc958db3ee832dbdb781358442fddd51d6ee", "patch": "@@ -0,0 +1,25 @@\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:33:14\n+   |\n+LL |        match x {\n+   |   _____-\n+   |  |_____|\n+   | ||\n+LL | ||         &mut None => panic!(\"unreachable\"),\n+LL | ||         &mut Some(&_) if {\n+LL | ||             // ForceFnOnce needed to exploit #27282\n+LL | ||             (|| { *x = None; drop(force_fn_once); })();\n+   | ||              ^^    - borrow occurs due to use of `x` in closure\n+   | ||              |\n+   | ||              closure construction occurs here\n+...  ||\n+LL | ||         _ => panic!(\"unreachable\"),\n+LL | ||     }\n+   | ||     -\n+   | ||_____|\n+   | |______borrow occurs here\n+   |        borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0500`."}, {"sha": "866fed1368504d63857f465b3b62aae278d902ff", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-2.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.rs?ref=9d5cdc958db3ee832dbdb781358442fddd51d6ee", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is testing an attempt to corrupt the discriminant of the match\n+// arm in a guard, followed by an attempt to continue matching on that\n+// corrupted discriminant in the remaining match arms.\n+//\n+// Basically this is testing that our new NLL feature of emitting a\n+// fake read on each match arm is catching cases like this.\n+//\n+// This case is interesting because it includes a guard that\n+// diverges, and therefore a single final fake-read at the very end\n+// after the final match arm would not suffice.\n+//\n+// It is also interesting because the access to the corrupted data\n+// occurs in the pattern-match itself, and not in the guard\n+// expression.\n+\n+#![feature(nll)]\n+\n+struct ForceFnOnce;\n+\n+fn main() {\n+    let mut x = &mut Some(&2);\n+    let force_fn_once = ForceFnOnce;\n+    match x {\n+        &mut None => panic!(\"unreachable\"),\n+        &mut Some(&_)\n+            if {\n+                // ForceFnOnce needed to exploit #27282\n+                (|| { *x = None; drop(force_fn_once); })();\n+                //~^ ERROR closure requires unique access to `x` but it is already borrowed [E0500]\n+                false\n+            } => {}\n+\n+        // this segfaults if we corrupted the discriminant, because\n+        // the compiler gets to *assume* that it cannot be the `None`\n+        // case, even though that was the effect of the guard.\n+        &mut Some(&2)\n+            if {\n+                panic!()\n+            } => {}\n+        _ => panic!(\"unreachable\"),\n+    }\n+}"}, {"sha": "df5e4300ceca2904fb2c772be008a7f0f416b7ce", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cdc958db3ee832dbdb781358442fddd51d6ee/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=9d5cdc958db3ee832dbdb781358442fddd51d6ee", "patch": "@@ -0,0 +1,26 @@\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:38:18\n+   |\n+LL |        match x {\n+   |   _____-\n+   |  |_____|\n+   | ||\n+LL | ||         &mut None => panic!(\"unreachable\"),\n+LL | ||         &mut Some(&_)\n+LL | ||             if {\n+LL | ||                 // ForceFnOnce needed to exploit #27282\n+LL | ||                 (|| { *x = None; drop(force_fn_once); })();\n+   | ||                  ^^    - borrow occurs due to use of `x` in closure\n+   | ||                  |\n+   | ||                  closure construction occurs here\n+...  ||\n+LL | ||         _ => panic!(\"unreachable\"),\n+LL | ||     }\n+   | ||     -\n+   | ||_____|\n+   | |______borrow occurs here\n+   |        borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0500`."}]}