{"sha": "c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDVmMzRmY2JiMWJkYjE3Y2YxYTIwYmJkYjg3ODgxYTU1MzA1Njc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-29T11:32:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T11:32:28Z"}, "message": "Rollup merge of #59473 - estebank:borrow-sugg-inside-macro, r=davidtwco\n\nDo not emit incorrect borrow suggestion involving macros and fix overlapping multiline spans\n\nFix #58298.", "tree": {"sha": "e31eead154b00055c4b6f4dee5f22e103b660b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31eead154b00055c4b6f4dee5f22e103b660b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcngJMCRBK7hj4Ov3rIwAAdHIIAAyYxOyYz9RtnB0AN23UClrY\nhnLOauvSRBcpy3O/RxKIZpvo6COOP3upnMu0eHsUjIopVmaL0k8DfF5JItmaUm5j\nTC52lO2v5wOf48ze2uIS1TEE9N/qDZTJeNTJUii3+Z7jjVDJqRx7Iyh+KtgCSZOf\nerWVFQ+OTauDgLzi+Ya6LWBAC6zmWFyt+50/CtdWnZKbCq9T9X1HuWVTfuoiGPzi\nMAQSMJXyuUGxFPFDfEepFF8Fs+7tcwlC+m7TduVkamuj59KAL5llguYYuzMvTH37\nj2uqvxQ4rP4I3O9O8MTFhRJtM+Atb6+4EfNS+d9hiz/Wd+gW4BDBXJMcyvW9T5Y=\n=BUMX\n-----END PGP SIGNATURE-----\n", "payload": "tree e31eead154b00055c4b6f4dee5f22e103b660b6b\nparent fda206633da99468b4f813a2f888e05e31bafa2d\nparent b5690c2cb86afc48e958e0d58ff1916c75f65b66\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553859148 +0100\ncommitter GitHub <noreply@github.com> 1553859148 +0100\n\nRollup merge of #59473 - estebank:borrow-sugg-inside-macro, r=davidtwco\n\nDo not emit incorrect borrow suggestion involving macros and fix overlapping multiline spans\n\nFix #58298.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "html_url": "https://github.com/rust-lang/rust/commit/c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda206633da99468b4f813a2f888e05e31bafa2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda206633da99468b4f813a2f888e05e31bafa2d", "html_url": "https://github.com/rust-lang/rust/commit/fda206633da99468b4f813a2f888e05e31bafa2d"}, {"sha": "b5690c2cb86afc48e958e0d58ff1916c75f65b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5690c2cb86afc48e958e0d58ff1916c75f65b66", "html_url": "https://github.com/rust-lang/rust/commit/b5690c2cb86afc48e958e0d58ff1916c75f65b66"}], "stats": {"total": 169, "additions": 149, "deletions": 20}, "files": [{"sha": "98db0097c745734a50eaa82b28ec6a1abc97e94d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -243,6 +243,7 @@ impl EmitterWriter {\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n                         label: span_label.label.clone(),\n+                        overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file.clone(), ml.clone()));\n                     AnnotationType::Multiline(ml)\n@@ -258,10 +259,7 @@ impl EmitterWriter {\n                 };\n \n                 if !ann.is_multiline() {\n-                    add_annotation_to_file(&mut output,\n-                                           lo.file,\n-                                           lo.line,\n-                                           ann);\n+                    add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n                 }\n             }\n         }\n@@ -274,10 +272,12 @@ impl EmitterWriter {\n                 let ref mut a = item.1;\n                 // Move all other multiline annotations overlapping with this one\n                 // one level to the right.\n-                if &ann != a &&\n+                if !(ann.same_span(a)) &&\n                     num_overlap(ann.line_start, ann.line_end, a.line_start, a.line_end, true)\n                 {\n                     a.increase_depth();\n+                } else if ann.same_span(a) && &ann != a {\n+                    a.overlaps_exactly = true;\n                 } else {\n                     break;\n                 }\n@@ -289,17 +289,49 @@ impl EmitterWriter {\n             if ann.depth > max_depth {\n                 max_depth = ann.depth;\n             }\n-            add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n-            let middle = min(ann.line_start + 4, ann.line_end);\n-            for line in ann.line_start + 1..middle {\n-                add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n-            }\n-            if middle < ann.line_end - 1 {\n-                for line in ann.line_end - 1..ann.line_end {\n+            let mut end_ann = ann.as_end();\n+            if !ann.overlaps_exactly {\n+                // avoid output like\n+                //\n+                //  |        foo(\n+                //  |   _____^\n+                //  |  |_____|\n+                //  | ||         bar,\n+                //  | ||     );\n+                //  | ||      ^\n+                //  | ||______|\n+                //  |  |______foo\n+                //  |         baz\n+                //\n+                // and instead get\n+                //\n+                //  |       foo(\n+                //  |  _____^\n+                //  | |         bar,\n+                //  | |     );\n+                //  | |      ^\n+                //  | |      |\n+                //  | |______foo\n+                //  |        baz\n+                add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n+                // 4 is the minimum vertical length of a multiline span when presented: two lines\n+                // of code and two lines of underline. This is not true for the special case where\n+                // the beginning doesn't have an underline, but the current logic seems to be\n+                // working correctly.\n+                let middle = min(ann.line_start + 4, ann.line_end);\n+                for line in ann.line_start + 1..middle {\n+                    // Every `|` that joins the beginning of the span (`___^`) to the end (`|__^`).\n                     add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n                 }\n+                if middle < ann.line_end - 1 {\n+                    for line in ann.line_end - 1..ann.line_end {\n+                        add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n+                    }\n+                }\n+            } else {\n+                end_ann.annotation_type = AnnotationType::Singleline;\n             }\n-            add_annotation_to_file(&mut output, file, ann.line_end, ann.as_end());\n+            add_annotation_to_file(&mut output, file, ann.line_end, end_ann);\n         }\n         for file_vec in output.iter_mut() {\n             file_vec.multiline_depth = max_depth;"}, {"sha": "a0af604026d4afa051aaba78b899662693e25894", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -18,13 +18,20 @@ pub struct MultilineAnnotation {\n     pub end_col: usize,\n     pub is_primary: bool,\n     pub label: Option<String>,\n+    pub overlaps_exactly: bool,\n }\n \n impl MultilineAnnotation {\n     pub fn increase_depth(&mut self) {\n         self.depth += 1;\n     }\n \n+    /// Compare two `MultilineAnnotation`s considering only the `Span` they cover.\n+    pub fn same_span(&self, other: &MultilineAnnotation) -> bool {\n+        self.line_start == other.line_start && self.line_end == other.line_end\n+            && self.start_col == other.start_col && self.end_col == other.end_col\n+    }\n+\n     pub fn as_start(&self) -> Annotation {\n         Annotation {\n             start_col: self.start_col,"}, {"sha": "1fc63a9302204b7ac8a9da448a6616ce87062a9d", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::Node;\n use rustc::hir::{Item, ItemKind, print};\n use rustc::ty::{self, Ty, AssociatedItem};\n use rustc::ty::adjustment::AllowTwoPhase;\n-use errors::{Applicability, DiagnosticBuilder, SourceMapper};\n+use errors::{Applicability, DiagnosticBuilder};\n \n use super::method::probe;\n \n@@ -292,9 +292,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  expected: Ty<'tcx>)\n                  -> Option<(Span, &'static str, String)> {\n         let cm = self.sess().source_map();\n-        // Use the callsite's span if this is a macro call. #41858\n-        let sp = cm.call_span_if_macro(expr.span);\n+        let sp = expr.span;\n         if !cm.span_to_filename(sp).is_real() {\n+            // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n+            // call span, but that breaks down when the type error comes from multiple calls down.\n             return None;\n         }\n "}, {"sha": "86910ffd894c4ea9870e82ddb46ed67f85d2cbf8", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -374,6 +374,66 @@ error: foo\n \"#);\n }\n \n+#[test]\n+fn triple_exact_overlap() {\n+    test_harness(r#\"\n+fn foo() {\n+  X0 Y0 Z0\n+  X1 Y1 Z1\n+  X2 Y2 Z2\n+}\n+\"#,\n+    vec![\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`X` is a good letter\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Y` is a good letter too\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Z` label\",\n+        },\n+    ],\n+    r#\"\n+error: foo\n+ --> test.rs:3:3\n+  |\n+3 | /   X0 Y0 Z0\n+4 | |   X1 Y1 Z1\n+5 | |   X2 Y2 Z2\n+  | |    ^\n+  | |    |\n+  | |    `X` is a good letter\n+  | |____`Y` is a good letter too\n+  |      `Z` label\n+\n+\"#);\n+}\n+\n #[test]\n fn minimum_depth() {\n     test_harness(r#\""}, {"sha": "996d80a07e058ed2d471b7bf7309fe6acb61d9c2", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -50,10 +50,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9\n    |\n LL |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^\n-   |         |\n-   |         expected mutable reference, found struct `std::string::String`\n-   |         help: consider mutably borrowing here: `&mut format!(\"foo\")`\n+   |         ^^^^^^^^^^^^^^ expected mutable reference, found struct `std::string::String`\n    |\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`"}, {"sha": "ef1c09d218058050b2ca72ece7c8412907009a60", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -0,0 +1,14 @@\n+fn warn(_: &str) {}\n+\n+macro_rules! intrinsic_match {\n+    ($intrinsic:expr) => {\n+        warn(format!(\"unsupported intrinsic {}\", $intrinsic));\n+        //~^ ERROR mismatched types\n+    };\n+}\n+\n+fn main() {\n+    intrinsic_match! {\n+        \"abc\"\n+    };\n+}"}, {"sha": "bc7a7247a12830e62a557676240d4813e0a3978f", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c105f34fcbb1bdb17cf1a20bbdb87881a5530567/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=c105f34fcbb1bdb17cf1a20bbdb87881a5530567", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-suggest-deref-inside-macro-issue-58298.rs:11:5\n+   |\n+LL | /     intrinsic_match! {\n+LL | |         \"abc\"\n+LL | |     };\n+   | |      ^\n+   | |      |\n+   | |______expected &str, found struct `std::string::String`\n+   |        in this macro invocation\n+   |\n+   = note: expected type `&str`\n+              found type `std::string::String`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}