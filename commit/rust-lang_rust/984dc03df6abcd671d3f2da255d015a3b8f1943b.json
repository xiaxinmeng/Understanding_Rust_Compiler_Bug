{"sha": "984dc03df6abcd671d3f2da255d015a3b8f1943b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NGRjMDNkZjZhYmNkNjcxZDNmMmRhMjU1ZDAxNWEzYjhmMTk0M2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-21T22:45:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-22T20:37:03Z"}, "message": "Do not cache ambiguous results unless there is at least some inference by-product within.\n\nFixes #19499.", "tree": {"sha": "334be0bb5f171d973005903b9ab93d156c54d526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334be0bb5f171d973005903b9ab93d156c54d526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984dc03df6abcd671d3f2da255d015a3b8f1943b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984dc03df6abcd671d3f2da255d015a3b8f1943b", "html_url": "https://github.com/rust-lang/rust/commit/984dc03df6abcd671d3f2da255d015a3b8f1943b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984dc03df6abcd671d3f2da255d015a3b8f1943b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "html_url": "https://github.com/rust-lang/rust/commit/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "d08a05a5c1c784d8fe50e8664f1921c81ce70cbb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/984dc03df6abcd671d3f2da255d015a3b8f1943b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984dc03df6abcd671d3f2da255d015a3b8f1943b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=984dc03df6abcd671d3f2da255d015a3b8f1943b", "patch": "@@ -526,9 +526,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // If no match, compute result and insert into cache.\n         let candidate = self.candidate_from_obligation_no_cache(stack);\n-        debug!(\"CACHE MISS: cache_fresh_trait_pred={}, candidate={}\",\n-               cache_fresh_trait_pred.repr(self.tcx()), candidate.repr(self.tcx()));\n-        self.insert_candidate_cache(cache_fresh_trait_pred, candidate.clone());\n+\n+        if self.should_update_candidate_cache(&cache_fresh_trait_pred, &candidate) {\n+            debug!(\"CACHE MISS: cache_fresh_trait_pred={}, candidate={}\",\n+                   cache_fresh_trait_pred.repr(self.tcx()), candidate.repr(self.tcx()));\n+            self.insert_candidate_cache(cache_fresh_trait_pred, candidate.clone());\n+        }\n+\n         candidate\n     }\n \n@@ -705,6 +709,47 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         hashmap.insert(cache_fresh_trait_pred.0.trait_ref.clone(), candidate);\n     }\n \n+    fn should_update_candidate_cache(&mut self,\n+                                     cache_fresh_trait_pred: &ty::PolyTraitPredicate<'tcx>,\n+                                     candidate: &SelectionResult<'tcx, SelectionCandidate<'tcx>>)\n+                                     -> bool\n+    {\n+        // In general, it's a good idea to cache results, even\n+        // ambigious ones, to save us some trouble later. But we have\n+        // to be careful not to cache results that could be\n+        // invalidated later by advances in inference. Normally, this\n+        // is not an issue, because any inference variables whose\n+        // types are not yet bound are \"freshened\" in the cache key,\n+        // which means that if we later get the same request once that\n+        // type variable IS bound, we'll have a different cache key.\n+        // For example, if we have `Vec<_#0t> : Foo`, and `_#0t` is\n+        // not yet known, we may cache the result as `None`. But if\n+        // later `_#0t` is bound to `Bar`, then when we freshen we'll\n+        // have `Vec<Bar> : Foo` as the cache key.\n+        //\n+        // HOWEVER, it CAN happen that we get an ambiguity result in\n+        // one particular case around closures where the cache key\n+        // would not change. That is when the precise types of the\n+        // upvars that a closure references have not yet been figured\n+        // out (i.e., because it is not yet known if they are captured\n+        // by ref, and if by ref, what kind of ref). In these cases,\n+        // when matching a builtin bound, we will yield back an\n+        // ambiguous result. But the *cache key* is just the closure type,\n+        // it doesn't capture the state of the upvar computation.\n+        //\n+        // To avoid this trap, just don't cache ambiguous results if\n+        // the self-type contains no inference byproducts (that really\n+        // shouldn't happen in other circumstances anyway, given\n+        // coherence).\n+\n+        match *candidate {\n+            Ok(Some(_)) | Err(_) => true,\n+            Ok(None) => {\n+                cache_fresh_trait_pred.0.input_types().iter().any(|&t| ty::type_has_ty_infer(t))\n+            }\n+        }\n+    }\n+\n     fn assemble_candidates<'o>(&mut self,\n                                stack: &TraitObligationStack<'o, 'tcx>)\n                                -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>>\n@@ -788,6 +833,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // FIXME(#20297) -- being strict about this can cause\n                 // inference failures with BorrowFrom, which is\n                 // unfortunate. Can we do better here?\n+                debug!(\"assemble_candidates_for_projected_tys: ambiguous self-type\");\n                 candidates.ambiguous = true;\n                 return;\n             }\n@@ -962,6 +1008,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let (closure_def_id, substs) = match self_ty.sty {\n             ty::ty_unboxed_closure(id, _, ref substs) => (id, substs.clone()),\n             ty::ty_infer(ty::TyVar(_)) => {\n+                debug!(\"assemble_unboxed_closure_candidates: ambiguous self-type\");\n                 candidates.ambiguous = true;\n                 return Ok(());\n             }\n@@ -1000,6 +1047,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         match self_ty.sty {\n             ty::ty_infer(ty::TyVar(_)) => {\n+                debug!(\"assemble_fn_pointer_candidates: ambiguous self-type\");\n                 candidates.ambiguous = true; // could wind up being a fn() type\n             }\n \n@@ -1270,7 +1318,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(())\n             }\n             Ok(ParameterBuiltin) => { Ok(()) }\n-            Ok(AmbiguousBuiltin) => { Ok(candidates.ambiguous = true) }\n+            Ok(AmbiguousBuiltin) => {\n+                debug!(\"assemble_builtin_bound_candidates: ambiguous builtin\");\n+                Ok(candidates.ambiguous = true)\n+            }\n             Err(e) => { Err(e) }\n         }\n     }\n@@ -1476,6 +1527,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         Ok(If(upvars.iter().map(|c| c.ty).collect()))\n                     }\n                     None => {\n+                        debug!(\"assemble_builtin_bound_candidates: no upvar types available yet\");\n                         Ok(AmbiguousBuiltin)\n                     }\n                 }\n@@ -1512,6 +1564,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Unbound type variable. Might or might not have\n                 // applicable impls and so forth, depending on what\n                 // those type variables wind up being bound to.\n+                debug!(\"assemble_builtin_bound_candidates: ambiguous builtin\");\n                 Ok(AmbiguousBuiltin)\n             }\n "}, {"sha": "04017da977535604c6ffcec7d462bc26fb54d069", "filename": "src/test/run-pass/issue-19499.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/984dc03df6abcd671d3f2da255d015a3b8f1943b/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984dc03df6abcd671d3f2da255d015a3b8f1943b/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19499.rs?ref=984dc03df6abcd671d3f2da255d015a3b8f1943b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #19499. Due to incorrect caching of trait\n+// results for closures with upvars whose types were not fully\n+// computed, this rather bizarre little program (along with many more\n+// reasonable examples) let to ambiguity errors about not being able\n+// to infer sufficient type information.\n+\n+fn main() {\n+    let n = 0;\n+    let it = Some(1_us).into_iter().inspect(|_| {n;});\n+}"}]}