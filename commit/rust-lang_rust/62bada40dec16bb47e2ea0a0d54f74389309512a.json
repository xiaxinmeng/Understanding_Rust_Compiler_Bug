{"sha": "62bada40dec16bb47e2ea0a0d54f74389309512a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmFkYTQwZGVjMTZiYjQ3ZTJlYTBhMGQ1NGY3NDM4OTMwOTUxMmE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-09T20:42:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-12T18:28:42Z"}, "message": "Autoderef in librustc_borrowck", "tree": {"sha": "e27c2b2402e014bf69abfa33ad714f90bd005b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27c2b2402e014bf69abfa33ad714f90bd005b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bada40dec16bb47e2ea0a0d54f74389309512a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bada40dec16bb47e2ea0a0d54f74389309512a", "html_url": "https://github.com/rust-lang/rust/commit/62bada40dec16bb47e2ea0a0d54f74389309512a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bada40dec16bb47e2ea0a0d54f74389309512a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "html_url": "https://github.com/rust-lang/rust/commit/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "f19a8658a057b5e1fb0332175f3bac1ccef90604", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=62bada40dec16bb47e2ea0a0d54f74389309512a", "patch": "@@ -51,13 +51,13 @@ fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<\n         match loan_path.kind {\n             LpVar(_) | LpUpvar(_) => None,\n             LpExtend(ref lp_base, _, LpDeref(mc::Unique)) => {\n-                match helper(&**lp_base) {\n+                match helper(&lp_base) {\n                     v @ Some(_) => v,\n-                    None => Some(&**lp_base)\n+                    None => Some(&lp_base)\n                 }\n             }\n             LpDowncast(ref lp_base, _) |\n-            LpExtend(ref lp_base, _, _) => helper(&**lp_base)\n+            LpExtend(ref lp_base, _, _) => helper(&lp_base)\n         }\n     }\n }\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 }\n                 LpDowncast(ref lp_base, _) |\n                 LpExtend(ref lp_base, _, _) => {\n-                    loan_path = &**lp_base;\n+                    loan_path = &lp_base;\n                 }\n             }\n \n@@ -442,21 +442,21 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             //     borrow prevents subsequent moves, borrows, or modification of `x` until the\n             //     borrow ends\n \n-            let common = new_loan.loan_path.common(&*old_loan.loan_path);\n+            let common = new_loan.loan_path.common(&old_loan.loan_path);\n             let (nl, ol, new_loan_msg, old_loan_msg) =\n-                if new_loan.loan_path.has_fork(&*old_loan.loan_path) && common.is_some() {\n+                if new_loan.loan_path.has_fork(&old_loan.loan_path) && common.is_some() {\n                     let nl = self.bccx.loan_path_to_string(&common.unwrap());\n                     let ol = nl.clone();\n                     let new_loan_msg = format!(\" (here through borrowing `{}`)\",\n                                                self.bccx.loan_path_to_string(\n-                                                   &*new_loan.loan_path));\n+                                                   &new_loan.loan_path));\n                     let old_loan_msg = format!(\" (through borrowing `{}`)\",\n                                                self.bccx.loan_path_to_string(\n-                                                   &*old_loan.loan_path));\n+                                                   &old_loan.loan_path));\n                     (nl, ol, new_loan_msg, old_loan_msg)\n                 } else {\n-                    (self.bccx.loan_path_to_string(&*new_loan.loan_path),\n-                     self.bccx.loan_path_to_string(&*old_loan.loan_path),\n+                    (self.bccx.loan_path_to_string(&new_loan.loan_path),\n+                     self.bccx.loan_path_to_string(&old_loan.loan_path),\n                      String::new(), String::new())\n                 };\n \n@@ -578,7 +578,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             Some(lp) => {\n                 let moved_value_use_kind = match mode {\n                     euv::Copy => {\n-                        self.check_for_copy_of_frozen_path(id, span, &*lp);\n+                        self.check_for_copy_of_frozen_path(id, span, &lp);\n                         MovedInUse\n                     }\n                     euv::Move(_) => {\n@@ -593,7 +593,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                             }\n                             Some(move_kind) => {\n                                 self.check_for_move_of_borrowed_path(id, span,\n-                                                                     &*lp, move_kind);\n+                                                                     &lp, move_kind);\n                                 if move_kind == move_data::Captured {\n                                     MovedInCapture\n                                 } else {\n@@ -622,7 +622,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                  &self.bccx.loan_path_to_string(copy_path))\n                     .span_note(loan_span,\n                                &format!(\"borrow of `{}` occurs here\",\n-                                       &self.bccx.loan_path_to_string(&*loan_path))\n+                                       &self.bccx.loan_path_to_string(&loan_path))\n                                )\n                     .emit();\n             }\n@@ -656,7 +656,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 err.span_note(\n                     loan_span,\n                     &format!(\"borrow of `{}` occurs here\",\n-                            &self.bccx.loan_path_to_string(&*loan_path))\n+                            &self.bccx.loan_path_to_string(&loan_path))\n                     );\n                 err.emit();\n             }\n@@ -706,7 +706,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             self.bccx.report_use_of_moved_value(\n                 span,\n                 use_kind,\n-                &**lp,\n+                &lp,\n                 the_move,\n                 moved_lp,\n                 self.param_env);\n@@ -760,7 +760,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                             self.bccx\n                                 .report_partial_reinitialization_of_uninitialized_structure(\n                                     span,\n-                                    &*loan_path);\n+                                    &loan_path);\n                             false\n                         });\n                         return;\n@@ -790,8 +790,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         // Check that we don't invalidate any outstanding loans\n         if let Some(loan_path) = opt_loan_path(&assignee_cmt) {\n             let scope = self.tcx().region_maps.node_extent(assignment_id);\n-            self.each_in_scope_loan_affecting_path(scope, &*loan_path, |loan| {\n-                self.report_illegal_mutation(assignment_span, &*loan_path, loan);\n+            self.each_in_scope_loan_affecting_path(scope, &loan_path, |loan| {\n+                self.report_illegal_mutation(assignment_span, &loan_path, loan);\n                 false\n             });\n         }\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 } else {\n                     self.bccx.report_reassigned_immutable_variable(\n                         assignment_span,\n-                        &*lp,\n+                        &lp,\n                         assign);\n                 }\n                 false"}, {"sha": "38157d04a5d6d605f475579eecf6479763a2d76d", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=62bada40dec16bb47e2ea0a0d54f74389309512a", "patch": "@@ -386,11 +386,11 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                 let gen_scope = self.compute_gen_scope(borrow_scope, loan_scope);\n                 debug!(\"gen_scope = {:?}\", gen_scope);\n \n-                let kill_scope = self.compute_kill_scope(loan_scope, &*loan_path);\n+                let kill_scope = self.compute_kill_scope(loan_scope, &loan_path);\n                 debug!(\"kill_scope = {:?}\", kill_scope);\n \n                 if req_kind == ty::MutBorrow {\n-                    self.mark_loan_path_as_mutated(&*loan_path);\n+                    self.mark_loan_path_as_mutated(&loan_path);\n                 }\n \n                 Loan {\n@@ -452,7 +452,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             LpDowncast(ref base, _) |\n             LpExtend(ref base, mc::McInherited, _) |\n             LpExtend(ref base, mc::McDeclared, _) => {\n-                self.mark_loan_path_as_mutated(&**base);\n+                self.mark_loan_path_as_mutated(&base);\n             }\n             LpExtend(_, mc::McImmutable, _) => {\n                 // Nothing to do.\n@@ -527,7 +527,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n         if let hir::ExprAddrOf(mutbl, ref base) = ex.node {\n             let infcx = infer::new_infer_ctxt(self.bccx.tcx, &self.bccx.tcx.tables, None);\n             let mc = mc::MemCategorizationContext::new(&infcx);\n-            let base_cmt = mc.cat_expr(&**base).unwrap();\n+            let base_cmt = mc.cat_expr(&base).unwrap();\n             let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);\n             // Check that we don't allow borrows of unsafe static items.\n             if check_aliasability(self.bccx, ex.span,"}, {"sha": "1fa36a98ec5d975f42d211024aca0ceded036cf2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=62bada40dec16bb47e2ea0a0d54f74389309512a", "patch": "@@ -85,14 +85,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n         if let hir::ConstTraitItem(_, Some(ref expr)) = ti.node {\n-            gather_loans::gather_loans_in_static_initializer(self, &*expr);\n+            gather_loans::gather_loans_in_static_initializer(self, &expr);\n         }\n         intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n         if let hir::ImplItemKind::Const(_, ref expr) = ii.node {\n-            gather_loans::gather_loans_in_static_initializer(self, &*expr);\n+            gather_loans::gather_loans_in_static_initializer(self, &expr);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n@@ -139,7 +139,7 @@ fn borrowck_item(this: &mut BorrowckCtxt, item: &hir::Item) {\n     match item.node {\n         hir::ItemStatic(_, _, ref ex) |\n         hir::ItemConst(_, ref ex) => {\n-            gather_loans::gather_loans_in_static_initializer(this, &**ex);\n+            gather_loans::gather_loans_in_static_initializer(this, &ex);\n         }\n         _ => { }\n     }\n@@ -251,9 +251,9 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n \n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx,\n                                                      fn_parts.kind,\n-                                                     &*fn_parts.decl,\n+                                                     &fn_parts.decl,\n                                                      cfg,\n-                                                     &*fn_parts.body,\n+                                                     &fn_parts.body,\n                                                      fn_parts.span,\n                                                      fn_parts.id);\n \n@@ -426,12 +426,12 @@ impl<'tcx> LoanPath<'tcx> {\n             (&LpExtend(ref base, _, LpInterior(opt_variant_id, id)),\n              &LpExtend(ref base2, _, LpInterior(opt_variant_id2, id2))) =>\n                 if id == id2 && opt_variant_id == opt_variant_id2 {\n-                    base.has_fork(&**base2)\n+                    base.has_fork(&base2)\n                 } else {\n                     true\n                 },\n             (&LpExtend(ref base, _, LpDeref(_)), _) => base.has_fork(other),\n-            (_, &LpExtend(ref base, _, LpDeref(_))) => self.has_fork(&**base),\n+            (_, &LpExtend(ref base, _, LpDeref(_))) => self.has_fork(&base),\n             _ => false,\n         }\n     }\n@@ -449,7 +449,7 @@ impl<'tcx> LoanPath<'tcx> {\n             (&LpExtend(ref base, a, LpInterior(opt_variant_id, id)),\n              &LpExtend(ref base2, _, LpInterior(opt_variant_id2, id2))) => {\n                 if id == id2 && opt_variant_id == opt_variant_id2 {\n-                    base.common(&**base2).map(|x| {\n+                    base.common(&base2).map(|x| {\n                         let xd = x.depth();\n                         if base.depth() == xd && base2.depth() == xd {\n                             assert_eq!(base.ty, base2.ty);\n@@ -463,11 +463,11 @@ impl<'tcx> LoanPath<'tcx> {\n                         }\n                     })\n                 } else {\n-                    base.common(&**base2)\n+                    base.common(&base2)\n                 }\n             }\n             (&LpExtend(ref base, _, LpDeref(_)), _) => base.common(other),\n-            (_, &LpExtend(ref other, _, LpDeref(_))) => self.common(&**other),\n+            (_, &LpExtend(ref other, _, LpDeref(_))) => self.common(&other),\n             (&LpVar(id), &LpVar(id2)) => {\n                 if id == id2 {\n                     assert_eq!(self.ty, other.ty);\n@@ -673,7 +673,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                      .map\n                                                      .find(the_move.id) {\n                     Some(hir_map::NodeExpr(expr)) => {\n-                        (self.tcx.expr_ty_adjusted(&*expr), expr.span)\n+                        (self.tcx.expr_ty_adjusted(&expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(&format!(\"MoveExpr({}) maps to \\\n@@ -735,7 +735,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                      .map\n                                                      .find(the_move.id) {\n                     Some(hir_map::NodeExpr(expr)) => {\n-                        (self.tcx.expr_ty_adjusted(&*expr), expr.span)\n+                        (self.tcx.expr_ty_adjusted(&expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(&format!(\"Captured({}) maps to \\\n@@ -833,19 +833,19 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n-                        self.cmt_to_string(&*err.cmt)\n+                        self.cmt_to_string(&err.cmt)\n                     }\n                     _ => match opt_loan_path(&err.cmt) {\n                         None => {\n                             format!(\"{} {}\",\n                                     err.cmt.mutbl.to_user_str(),\n-                                    self.cmt_to_string(&*err.cmt))\n+                                    self.cmt_to_string(&err.cmt))\n                         }\n                         Some(lp) => {\n                             format!(\"{} {} `{}`\",\n                                     err.cmt.mutbl.to_user_str(),\n-                                    self.cmt_to_string(&*err.cmt),\n-                                    self.loan_path_to_string(&*lp))\n+                                    self.cmt_to_string(&err.cmt),\n+                                    self.loan_path_to_string(&lp))\n                         }\n                     }\n                 };\n@@ -876,7 +876,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let msg = match opt_loan_path(&err.cmt) {\n                     None => \"borrowed value\".to_string(),\n                     Some(lp) => {\n-                        format!(\"`{}`\", self.loan_path_to_string(&*lp))\n+                        format!(\"`{}`\", self.loan_path_to_string(&lp))\n                     }\n                 };\n                 format!(\"{} does not live long enough\", msg)\n@@ -1051,9 +1051,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {\n                 let descr = match opt_loan_path(&err.cmt) {\n                     Some(lp) => {\n-                        format!(\"`{}`\", self.loan_path_to_string(&*lp))\n+                        format!(\"`{}`\", self.loan_path_to_string(&lp))\n                     }\n-                    None => self.cmt_to_string(&*err.cmt),\n+                    None => self.cmt_to_string(&err.cmt),\n                 };\n                 self.tcx.note_and_explain_region(\n                     db,\n@@ -1081,15 +1081,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n             LpDowncast(ref lp_base, variant_def_id) => {\n                 out.push('(');\n-                self.append_loan_path_to_string(&**lp_base, out);\n+                self.append_loan_path_to_string(&lp_base, out);\n                 out.push_str(DOWNCAST_PRINTED_OPERATOR);\n                 out.push_str(&self.tcx.item_path_str(variant_def_id));\n                 out.push(')');\n             }\n \n \n             LpExtend(ref lp_base, _, LpInterior(_, InteriorField(fname))) => {\n-                self.append_autoderefd_loan_path_to_string(&**lp_base, out);\n+                self.append_autoderefd_loan_path_to_string(&lp_base, out);\n                 match fname {\n                     mc::NamedField(fname) => {\n                         out.push('.');\n@@ -1103,13 +1103,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             LpExtend(ref lp_base, _, LpInterior(_, InteriorElement(..))) => {\n-                self.append_autoderefd_loan_path_to_string(&**lp_base, out);\n+                self.append_autoderefd_loan_path_to_string(&lp_base, out);\n                 out.push_str(\"[..]\");\n             }\n \n             LpExtend(ref lp_base, _, LpDeref(_)) => {\n                 out.push('*');\n-                self.append_loan_path_to_string(&**lp_base, out);\n+                self.append_loan_path_to_string(&lp_base, out);\n             }\n         }\n     }\n@@ -1122,12 +1122,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 // For a path like `(*x).f` or `(*x)[3]`, autoderef\n                 // rules would normally allow users to omit the `*x`.\n                 // So just serialize such paths to `x.f` or x[3]` respectively.\n-                self.append_autoderefd_loan_path_to_string(&**lp_base, out)\n+                self.append_autoderefd_loan_path_to_string(&lp_base, out)\n             }\n \n             LpDowncast(ref lp_base, variant_def_id) => {\n                 out.push('(');\n-                self.append_autoderefd_loan_path_to_string(&**lp_base, out);\n+                self.append_autoderefd_loan_path_to_string(&lp_base, out);\n                 out.push(':');\n                 out.push_str(&self.tcx.item_path_str(variant_def_id));\n                 out.push(')');"}, {"sha": "cbec32e358d81fbad18e71443939b3b3a9c43d15", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=62bada40dec16bb47e2ea0a0d54f74389309512a", "patch": "@@ -207,7 +207,7 @@ fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n         }\n         LpDowncast(ref lp_base, _) |\n         LpExtend(ref lp_base, _, _) => {\n-            loan_path_is_precise(&**lp_base)\n+            loan_path_is_precise(&lp_base)\n         }\n     }\n }\n@@ -587,7 +587,7 @@ impl<'tcx> MoveData<'tcx> {\n         // assignment referring to another location.\n \n         let loan_path = self.path_loan_path(path);\n-        if loan_path_is_precise(&*loan_path) {\n+        if loan_path_is_precise(&loan_path) {\n             self.each_applicable_move(path, |move_index| {\n                 debug!(\"kill_moves add_kill {:?} kill_id={} move_index={}\",\n                        kill_kind, kill_id, move_index.get());\n@@ -700,7 +700,7 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n             if base_indices.iter().any(|x| x == &moved_path) {\n                 // Scenario 1 or 2: `loan_path` or some base path of\n                 // `loan_path` was moved.\n-                if !f(the_move, &*self.move_data.path_loan_path(moved_path)) {\n+                if !f(the_move, &self.move_data.path_loan_path(moved_path)) {\n                     ret = false;\n                 }\n             } else {\n@@ -710,7 +710,7 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                             // Scenario 3: some extension of `loan_path`\n                             // was moved\n                             f(the_move,\n-                              &*self.move_data.path_loan_path(moved_path))\n+                              &self.move_data.path_loan_path(moved_path))\n                         } else {\n                             true\n                         }"}, {"sha": "7a5491cdbe7f3cd612a36456fd95d0090df018fd", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bada40dec16bb47e2ea0a0d54f74389309512a/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=62bada40dec16bb47e2ea0a0d54f74389309512a", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n             if saw_some {\n                 set.push_str(\", \");\n             }\n-            let loan_str = self.borrowck_ctxt.loan_path_to_string(&*lp);\n+            let loan_str = self.borrowck_ctxt.loan_path_to_string(&lp);\n             set.push_str(&loan_str[..]);\n             saw_some = true;\n             true"}]}