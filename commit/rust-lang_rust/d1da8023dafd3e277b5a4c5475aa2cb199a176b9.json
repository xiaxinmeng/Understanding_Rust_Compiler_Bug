{"sha": "d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZGE4MDIzZGFmZDNlMjc3YjVhNGM1NDc1YWEyY2IxOTlhMTc2Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T04:38:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T04:38:47Z"}, "message": "Auto merge of #66074 - wesleywiser:test_run_const_prop, r=oli-obk\n\n[mir-opt] Turn on the `ConstProp` pass by default\n\nperf.rlo shows that running the `ConstProp` pass results in\nacross-the-board wins regardless of debug or opt complilation mode. As a\nresult, we're turning it on to get the compile time benefits.", "tree": {"sha": "d13a2f1b6389d4de19065ba4cd9042832d80d2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13a2f1b6389d4de19065ba4cd9042832d80d2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "html_url": "https://github.com/rust-lang/rust/commit/d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05", "html_url": "https://github.com/rust-lang/rust/commit/5c5a1209583d5ac0de67f57e0f1cd8ca28aa6c05"}, {"sha": "db5fc10c21f7ee8ef7649628ae37e6481b8ca14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5fc10c21f7ee8ef7649628ae37e6481b8ca14c", "html_url": "https://github.com/rust-lang/rust/commit/db5fc10c21f7ee8ef7649628ae37e6481b8ca14c"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "da11a7446bbe20ddef41db968f90a6207d3d969b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "patch": "@@ -648,8 +648,21 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn should_const_prop(&self) -> bool {\n-        self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+    fn should_const_prop(&mut self, op: OpTy<'tcx>) -> bool {\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+            return true;\n+        } else if self.tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n+            return false;\n+        }\n+\n+        match *op {\n+            interpret::Operand::Immediate(Immediate::Scalar(ScalarMaybeUndef::Scalar(s))) =>\n+                s.is_bits(),\n+            interpret::Operand::Immediate(Immediate::ScalarPair(ScalarMaybeUndef::Scalar(l),\n+                                                                ScalarMaybeUndef::Scalar(r))) =>\n+                l.is_bits() && r.is_bits(),\n+            _ => false\n+        }\n     }\n }\n \n@@ -749,15 +762,15 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         if self.can_const_prop[local] {\n                             trace!(\"propagated into {:?}\", local);\n \n-                            if self.should_const_prop() {\n-                                let value =\n-                                    self.get_const(local).expect(\"local was dead/uninitialized\");\n-                                trace!(\"replacing {:?} with {:?}\", rval, value);\n-                                self.replace_with_const(\n-                                    rval,\n-                                    value,\n-                                    statement.source_info,\n-                                );\n+                            if let Some(value) = self.get_const(local) {\n+                                if self.should_const_prop(value) {\n+                                    trace!(\"replacing {:?} with {:?}\", rval, value);\n+                                    self.replace_with_const(\n+                                        rval,\n+                                        value,\n+                                        statement.source_info,\n+                                    );\n+                                }\n                             }\n                         } else {\n                             trace!(\"can't propagate into {:?}\", local);\n@@ -859,7 +872,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             &msg,\n                         );\n                     } else {\n-                        if self.should_const_prop() {\n+                        if self.should_const_prop(value) {\n                             if let ScalarMaybeUndef::Scalar(scalar) = value_const {\n                                 *cond = self.operand_from_scalar(\n                                     scalar,\n@@ -872,8 +885,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                 }\n             },\n             TerminatorKind::SwitchInt { ref mut discr, switch_ty, .. } => {\n-                if self.should_const_prop() {\n-                    if let Some(value) = self.eval_operand(&discr, source_info) {\n+                if let Some(value) = self.eval_operand(&discr, source_info) {\n+                    if self.should_const_prop(value) {\n                         if let ScalarMaybeUndef::Scalar(scalar) =\n                                 self.ecx.read_scalar(value).unwrap() {\n                             *discr = self.operand_from_scalar(scalar, switch_ty, source_info.span);"}, {"sha": "a8be10ba3ce0aace871a323ad7d4a299a8273e21", "filename": "src/test/codegen/optimize-attr-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs?ref=d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "patch": "@@ -8,7 +8,7 @@\n \n // CHECK-LABEL: define i32 @nothing\n // CHECK-SAME: [[NOTHING_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 %_1.0\n+// NO-OPT: ret i32 4\n // SIZE-OPT: ret i32 4\n // SPEEC-OPT: ret i32 4\n #[no_mangle]\n@@ -18,7 +18,7 @@ pub fn nothing() -> i32 {\n \n // CHECK-LABEL: define i32 @size\n // CHECK-SAME: [[SIZE_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 %_1.0\n+// NO-OPT: ret i32 6\n // SIZE-OPT: ret i32 6\n // SPEED-OPT: ret i32 6\n #[optimize(size)]\n@@ -31,7 +31,7 @@ pub fn size() -> i32 {\n // NO-OPT-SAME: [[NOTHING_ATTRS]]\n // SPEED-OPT-SAME: [[NOTHING_ATTRS]]\n // SIZE-OPT-SAME: [[SPEED_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 %_1.0\n+// NO-OPT: ret i32 8\n // SIZE-OPT: ret i32 8\n // SPEED-OPT: ret i32 8\n #[optimize(speed)]"}, {"sha": "615f1fe1fd0b888ca79b9b0145884c9ebc062c5e", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "patch": "@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "70d0f86c3d268eed931ff5f4983d3d013a5132c9", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1da8023dafd3e277b5a4c5475aa2cb199a176b9/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=d1da8023dafd3e277b5a4c5475aa2cb199a176b9", "patch": "@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;"}]}