{"sha": "0e7915d11f6888f005e78c2358fcdc48ff655753", "node_id": "C_kwDOAAsO6NoAKDBlNzkxNWQxMWY2ODg4ZjAwNWU3OGMyMzU4ZmNkYzQ4ZmY2NTU3NTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-28T04:17:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-28T04:17:52Z"}, "message": "Auto merge of #96085 - jsgf:deny-unused-deps, r=compiler-errors\n\nMake sure `-Dunused-crate-dependencies --json unused-externs` makes rustc exit with error status\n\nThis PR:\n- fixes compiletest to understand unused extern notifications\n- adds tests for `--json unused-externs`\n- makes sure that deny-level unused externs notifications are treated as compile errors\n  - refactors the `emit_unused_externs` callstack to plumb through the level as an enum as a string, and adds `Level::is_error`\n\nUpdate: adds `--json unused-externs-silent` with the original behaviour since Cargo needs it. Should address `@est31's` concerns.\n\nFixes: https://github.com/rust-lang/rust/issues/96068", "tree": {"sha": "b5df5a22a17acee9c13ce2a0e469704539dd0850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5df5a22a17acee9c13ce2a0e469704539dd0850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e7915d11f6888f005e78c2358fcdc48ff655753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7915d11f6888f005e78c2358fcdc48ff655753", "html_url": "https://github.com/rust-lang/rust/commit/0e7915d11f6888f005e78c2358fcdc48ff655753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e7915d11f6888f005e78c2358fcdc48ff655753/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81799cd8fd841e23b52876ae5e22faeb3ad04eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81799cd8fd841e23b52876ae5e22faeb3ad04eb5", "html_url": "https://github.com/rust-lang/rust/commit/81799cd8fd841e23b52876ae5e22faeb3ad04eb5"}, {"sha": "c6bafa7322943643f37f8818bcb16dad28f53d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bafa7322943643f37f8818bcb16dad28f53d26", "html_url": "https://github.com/rust-lang/rust/commit/c6bafa7322943643f37f8818bcb16dad28f53d26"}], "stats": {"total": 177, "additions": 156, "deletions": 21}, "files": [{"sha": "5dd743e8d00236b93dfd4e79600a65af700c77ce", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -212,7 +212,12 @@ pub trait Emitter {\n     fn emit_future_breakage_report(&mut self, _diags: Vec<Diagnostic>) {}\n \n     /// Emit list of unused externs\n-    fn emit_unused_externs(&mut self, _lint_level: &str, _unused_externs: &[&str]) {}\n+    fn emit_unused_externs(\n+        &mut self,\n+        _lint_level: rustc_lint_defs::Level,\n+        _unused_externs: &[&str],\n+    ) {\n+    }\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {"}, {"sha": "6ff52182d6b037d6e713a66fee467af41ce8a05a", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -171,7 +171,8 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+    fn emit_unused_externs(&mut self, lint_level: rustc_lint_defs::Level, unused_externs: &[&str]) {\n+        let lint_level = lint_level.as_str();\n         let data = UnusedExterns { lint_level, unused_extern_names: unused_externs };\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))"}, {"sha": "a64133bb7f4f9304bac99cbed5c1773ed82644fd", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -969,8 +969,19 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n-    pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n-        self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n+    pub fn emit_unused_externs(\n+        &self,\n+        lint_level: rustc_lint_defs::Level,\n+        loud: bool,\n+        unused_externs: &[&str],\n+    ) {\n+        let mut inner = self.inner.borrow_mut();\n+\n+        if loud && lint_level.is_error() {\n+            inner.bump_err_count();\n+        }\n+\n+        inner.emit_unused_externs(lint_level, unused_externs)\n     }\n \n     pub fn update_unstable_expectation_id(\n@@ -1141,7 +1152,7 @@ impl HandlerInner {\n         self.emitter.emit_artifact_notification(path, artifact_type);\n     }\n \n-    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+    fn emit_unused_externs(&mut self, lint_level: rustc_lint_defs::Level, unused_externs: &[&str]) {\n         self.emitter.emit_unused_externs(lint_level, unused_externs);\n     }\n "}, {"sha": "57b4f96dc100d5b689dd29a420d51a42d2d875c0", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -214,6 +214,13 @@ impl Level {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_error(self) -> bool {\n+        match self {\n+            Level::Allow | Level::Expect(_) | Level::Warn | Level::ForceWarn => false,\n+            Level::Deny | Level::Forbid => true,\n+        }\n+    }\n }\n \n /// Specification of a single lint."}, {"sha": "3c545e6a0d2404f040c0f405bdc05b265a731f07", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -195,10 +195,12 @@ impl CStore {\n     }\n \n     pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n+        let json_unused_externs = tcx.sess.opts.json_unused_externs;\n+\n         // We put the check for the option before the lint_level_at_node call\n         // because the call mutates internal state and introducing it\n         // leads to some ui tests failing.\n-        if !tcx.sess.opts.json_unused_externs {\n+        if !json_unused_externs.is_enabled() {\n             return;\n         }\n         let level = tcx\n@@ -208,10 +210,11 @@ impl CStore {\n             let unused_externs =\n                 self.unused_externs.iter().map(|ident| ident.to_ident_string()).collect::<Vec<_>>();\n             let unused_externs = unused_externs.iter().map(String::as_str).collect::<Vec<&str>>();\n-            tcx.sess\n-                .parse_sess\n-                .span_diagnostic\n-                .emit_unused_externs(level.as_str(), &unused_externs);\n+            tcx.sess.parse_sess.span_diagnostic.emit_unused_externs(\n+                level,\n+                json_unused_externs.is_loud(),\n+                &unused_externs,\n+            );\n         }\n     }\n }\n@@ -917,7 +920,7 @@ impl<'a> CrateLoader<'a> {\n             }\n \n             // Got a real unused --extern\n-            if self.sess.opts.json_unused_externs {\n+            if self.sess.opts.json_unused_externs.is_enabled() {\n                 self.cstore.unused_externs.push(name_interned);\n                 continue;\n             }"}, {"sha": "530c1a06f8f47d451e0e843c12031366512acc3e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -757,7 +757,7 @@ impl Default for Options {\n             real_rust_source_base_dir: None,\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n-            json_unused_externs: false,\n+            json_unused_externs: JsonUnusedExterns::No,\n             json_future_incompat: false,\n             pretty: None,\n             working_dir: RealFileName::LocalPath(std::env::current_dir().unwrap()),\n@@ -1498,10 +1498,37 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n pub struct JsonConfig {\n     pub json_rendered: HumanReadableErrorType,\n     pub json_artifact_notifications: bool,\n-    pub json_unused_externs: bool,\n+    pub json_unused_externs: JsonUnusedExterns,\n     pub json_future_incompat: bool,\n }\n \n+/// Report unused externs in event stream\n+#[derive(Copy, Clone)]\n+pub enum JsonUnusedExterns {\n+    /// Do not\n+    No,\n+    /// Report, but do not exit with failure status for deny/forbid\n+    Silent,\n+    /// Report, and also exit with failure status for deny/forbid\n+    Loud,\n+}\n+\n+impl JsonUnusedExterns {\n+    pub fn is_enabled(&self) -> bool {\n+        match self {\n+            JsonUnusedExterns::No => false,\n+            JsonUnusedExterns::Loud | JsonUnusedExterns::Silent => true,\n+        }\n+    }\n+\n+    pub fn is_loud(&self) -> bool {\n+        match self {\n+            JsonUnusedExterns::No | JsonUnusedExterns::Silent => false,\n+            JsonUnusedExterns::Loud => true,\n+        }\n+    }\n+}\n+\n /// Parse the `--json` flag.\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n@@ -1511,7 +1538,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n-    let mut json_unused_externs = false;\n+    let mut json_unused_externs = JsonUnusedExterns::No;\n     let mut json_future_incompat = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n@@ -1529,7 +1556,8 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n                 \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n-                \"unused-externs\" => json_unused_externs = true,\n+                \"unused-externs\" => json_unused_externs = JsonUnusedExterns::Loud,\n+                \"unused-externs-silent\" => json_unused_externs = JsonUnusedExterns::Silent,\n                 \"future-incompat\" => json_future_incompat = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n@@ -2229,7 +2257,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n-    if !debugging_opts.unstable_options && json_unused_externs {\n+    if !debugging_opts.unstable_options && json_unused_externs.is_enabled() {\n         early_error(\n             error_format,\n             \"the `-Z unstable-options` flag must also be passed to enable \\"}, {"sha": "14e918660dd39f47341ef76851ab35e5993ddbe3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -221,7 +221,7 @@ top_level_options!(\n         json_artifact_notifications: bool [TRACKED],\n \n         /// `true` if we're emitting a JSON blob containing the unused externs\n-        json_unused_externs: bool [UNTRACKED],\n+        json_unused_externs: JsonUnusedExterns [UNTRACKED],\n \n         /// `true` if we're emitting a JSON job containing a future-incompat report for lints\n         json_future_incompat: bool [TRACKED],"}, {"sha": "1ff2c8191e562ef3a79bbd2c3e5dbdaadfe307d1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -10,7 +10,9 @@ use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n use rustc_session::config::{get_cmd_lint_options, nightly_options};\n-use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n+use rustc_session::config::{\n+    CodegenOptions, DebuggingOptions, ErrorOutputType, Externs, JsonUnusedExterns,\n+};\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -147,7 +149,7 @@ crate struct Options {\n     /// documentation.\n     crate run_check: bool,\n     /// Whether doctests should emit unused externs\n-    crate json_unused_externs: bool,\n+    crate json_unused_externs: JsonUnusedExterns,\n     /// Whether to skip capturing stdout and stderr of tests.\n     crate nocapture: bool,\n "}, {"sha": "82e367427ef6ff757d9a6838e3a03cb4c828bf1e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -168,7 +168,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n-    if json_unused_externs {\n+    if json_unused_externs.is_enabled() {\n         let unused_extern_reports: Vec<_> =\n             std::mem::take(&mut unused_extern_reports.lock().unwrap());\n         if unused_extern_reports.len() == compiling_test_count {\n@@ -337,7 +337,7 @@ fn run_test(\n     if lang_string.test_harness {\n         compiler.arg(\"--test\");\n     }\n-    if rustdoc_options.json_unused_externs && !lang_string.compile_fail {\n+    if rustdoc_options.json_unused_externs.is_enabled() && !lang_string.compile_fail {\n         compiler.arg(\"--error-format=json\");\n         compiler.arg(\"--json\").arg(\"unused-externs\");\n         compiler.arg(\"-Z\").arg(\"unstable-options\");"}, {"sha": "e9ab18ff63f394825c60026003bfd67d7bc1ecb0", "filename": "src/test/ui/unused-crate-deps/deny-attr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,9 @@\n+// Check for unused crate dep, no path\n+\n+// edition:2018\n+// aux-crate:bar=bar.rs\n+\n+#![deny(unused_crate_dependencies)]\n+//~^ ERROR external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "93694f6827f9c91752fa206771c70163049f9f50", "filename": "src/test/ui/unused-crate-deps/deny-attr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-attr.stderr?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,14 @@\n+error: external crate `bar` unused in `deny_attr`: remove the dependency or add `use bar as _;`\n+  --> $DIR/deny-attr.rs:6:1\n+   |\n+LL | #![deny(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny-attr.rs:6:9\n+   |\n+LL | #![deny(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd9a61d6caa25dae560f3921de8a0993b6ca535f", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json-silent.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,8 @@\n+// Check for unused crate dep, json event, deny but we're not reporting that in exit status\n+\n+// edition:2018\n+// check-pass\n+// compile-flags: -Dunused-crate-dependencies -Zunstable-options --json unused-externs-silent --error-format=json\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}"}, {"sha": "595619f3a8a4e728340efacf5b3a817dfa7e1199", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json-silent.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1 @@\n+{\"lint_level\":\"deny\",\"unused_extern_names\":[\"bar\"]}"}, {"sha": "2b369dee5a0db8198fdf3488b69a2781e6b77c8a", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,7 @@\n+// Check for unused crate dep, json event, deny, expect compile failure\n+\n+// edition:2018\n+// compile-flags: -Dunused-crate-dependencies  -Zunstable-options --json unused-externs --error-format=json\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}"}, {"sha": "595619f3a8a4e728340efacf5b3a817dfa7e1199", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json.stderr?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1 @@\n+{\"lint_level\":\"deny\",\"unused_extern_names\":[\"bar\"]}"}, {"sha": "69e28b3319a2272118a122dd1ad9ead7ff1c1a97", "filename": "src/test/ui/unused-crate-deps/deny-cmdline.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,8 @@\n+// Check for unused crate dep, deny, expect failure\n+\n+// edition:2018\n+// compile-flags: -Dunused-crate-dependencies\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}\n+//~^ ERROR external crate `bar` unused in"}, {"sha": "0951dc670fe9ef9dabae1ee78313dad1240175cf", "filename": "src/test/ui/unused-crate-deps/deny-cmdline.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline.stderr?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,10 @@\n+error: external crate `bar` unused in `deny_cmdline`: remove the dependency or add `use bar as _;`\n+  --> $DIR/deny-cmdline.rs:7:1\n+   |\n+LL | fn main() {}\n+   | ^\n+   |\n+   = note: requested on the command line with `-D unused-crate-dependencies`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4826c0062d0e502e427b7b62c6979d1b33c5202a", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-json.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1,8 @@\n+// Check for unused crate dep, warn, json event, expect pass\n+\n+// edition:2018\n+// check-pass\n+// compile-flags: -Wunused-crate-dependencies -Zunstable-options --json unused-externs --error-format=json\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}"}, {"sha": "98dbd763927e6351b892af45a95b449f5aa8705a", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-json.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-json.stderr?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -0,0 +1 @@\n+{\"lint_level\":\"warn\",\"unused_extern_names\":[\"bar\"]}"}, {"sha": "10726b9842080be4c5e34f9f07f1394c121e7d2e", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7915d11f6888f005e78c2358fcdc48ff655753/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=0e7915d11f6888f005e78c2358fcdc48ff655753", "patch": "@@ -23,6 +23,14 @@ struct ArtifactNotification {\n     artifact: PathBuf,\n }\n \n+#[derive(Deserialize)]\n+struct UnusedExternNotification {\n+    #[allow(dead_code)]\n+    lint_level: String,\n+    #[allow(dead_code)]\n+    unused_extern_names: Vec<String>,\n+}\n+\n #[derive(Deserialize, Clone)]\n struct DiagnosticSpan {\n     file_name: String,\n@@ -113,6 +121,9 @@ pub fn extract_rendered(output: &str) -> String {\n                 } else if serde_json::from_str::<ArtifactNotification>(line).is_ok() {\n                     // Ignore the notification.\n                     None\n+                } else if serde_json::from_str::<UnusedExternNotification>(line).is_ok() {\n+                    // Ignore the notification.\n+                    None\n                 } else {\n                     print!(\n                         \"failed to decode compiler output as json: line: {}\\noutput: {}\","}]}