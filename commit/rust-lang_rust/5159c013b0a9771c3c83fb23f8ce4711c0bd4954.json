{"sha": "5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "node_id": "C_kwDOAAsO6NoAKDUxNTljMDEzYjBhOTc3MWMzYzgzZmIyM2Y4Y2U0NzExYzBiZDQ5NTQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-02-01T04:12:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T04:12:55Z"}, "message": "Rollup merge of #91343 - FabianWolff:issue-91328-as-deref, r=jackh726\n\nFix suggestion to slice if scrutinee is a `Result` or `Option`\n\nFixes #91328.", "tree": {"sha": "04637f9d9fe6406bc8d397ccb302053f3235c402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04637f9d9fe6406bc8d397ccb302053f3235c402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+LNHCRBK7hj4Ov3rIwAAdUcIAAuN6aN/JQ4QrGhNo/Vadpk6\n1G2zIrVSIPmRry+uilgs4UMay8687lCBUVUZF0h2DC4Ces50WEsADZP38pZ1tlS7\nNEFAxeNZRJvzIOtbux/daA+6MJzvq6XAJmj3cwbTY24JEBK2t7WV5v6nD3XbTa33\nmfAIPJxt9atZBPX4a4W91vALnPCYY/YdJRGvJCLWfSWg1kXPIEn4ksUNzsLlstSo\nVJmhQbKz8YW/825Nk4hLGMi2R9IGPJ7Wif7e7qIXJuy0VEtWEPAZjHIpBPJBRHC5\n+kIY7aYLC/HeuGHNFKOlYElu2NstaW50WBJmS5pIeI4QVWSpNADQlDH6et0tXt0=\n=ZhHL\n-----END PGP SIGNATURE-----\n", "payload": "tree 04637f9d9fe6406bc8d397ccb302053f3235c402\nparent a6cd4aa9a784e3d2e54bca2a1b41082fda67310d\nparent 95344c02fd72511d3c87eb36f2fb36e28562934a\nauthor Eric Huss <eric@huss.org> 1643688775 -0800\ncommitter GitHub <noreply@github.com> 1643688775 -0800\n\nRollup merge of #91343 - FabianWolff:issue-91328-as-deref, r=jackh726\n\nFix suggestion to slice if scrutinee is a `Result` or `Option`\n\nFixes #91328.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "html_url": "https://github.com/rust-lang/rust/commit/5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6cd4aa9a784e3d2e54bca2a1b41082fda67310d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cd4aa9a784e3d2e54bca2a1b41082fda67310d", "html_url": "https://github.com/rust-lang/rust/commit/a6cd4aa9a784e3d2e54bca2a1b41082fda67310d"}, {"sha": "95344c02fd72511d3c87eb36f2fb36e28562934a", "url": "https://api.github.com/repos/rust-lang/rust/commits/95344c02fd72511d3c87eb36f2fb36e28562934a", "html_url": "https://github.com/rust-lang/rust/commit/95344c02fd72511d3c87eb36f2fb36e28562934a"}], "stats": {"total": 145, "additions": 138, "deletions": 7}, "files": [{"sha": "62cd9c64a4a7c8205af4600d1fc14fca32a1fb00", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "patch": "@@ -15,7 +15,7 @@ use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n@@ -2033,12 +2033,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             if let (Some(span), true) = (ti.span, ti.origin_expr) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider slicing here\",\n-                        format!(\"{}[..]\", snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    let applicability = match self.resolve_vars_if_possible(ti.expected).kind() {\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n+                                || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n+                        {\n+                            // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider using `as_deref` here\",\n+                                format!(\"{}.as_deref()\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            None\n+                        }\n+                        // FIXME: instead of checking for Vec only, we could check whether the\n+                        // type implements `Deref<Target=X>`; see\n+                        // https://github.com/rust-lang/rust/pull/91343#discussion_r761466979\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did) =>\n+                        {\n+                            Some(Applicability::MachineApplicable)\n+                        }\n+                        _ => Some(Applicability::MaybeIncorrect),\n+                    };\n+\n+                    if let Some(applicability) = applicability {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider slicing here\",\n+                            format!(\"{}[..]\", snippet),\n+                            applicability,\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "81b6a996072156dd6e306c56c8286f7f41426ef4", "filename": "src/test/ui/typeck/issue-91328.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed?ref=5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn baz(v: Vec<i32>) -> i32 {\n+    match v[..] {\n+    //~^ HELP: consider slicing here\n+        [a, b] => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e938d8f5c9f04b96d66bb93883dbd83b3eec4ad5", "filename": "src/test/ui/typeck/issue-91328.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs?ref=5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn baz(v: Vec<i32>) -> i32 {\n+    match v {\n+    //~^ HELP: consider slicing here\n+        [a, b] => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "96ad00cde4f7b619f35219b956185e4e65bdda47", "filename": "src/test/ui/typeck/issue-91328.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5159c013b0a9771c3c83fb23f8ce4711c0bd4954/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr?ref=5159c013b0a9771c3c83fb23f8ce4711c0bd4954", "patch": "@@ -0,0 +1,30 @@\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:10:12\n+   |\n+LL |     match r {\n+   |           - help: consider using `as_deref` here: `r.as_deref()`\n+LL |\n+LL |         Ok([a, b]) => a + b,\n+   |            ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:20:14\n+   |\n+LL |     match o {\n+   |           - help: consider using `as_deref` here: `o.as_deref()`\n+LL |\n+LL |         Some([a, b]) => a + b,\n+   |              ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:30:9\n+   |\n+LL |     match v {\n+   |           - help: consider slicing here: `v[..]`\n+LL |\n+LL |         [a, b] => a + b,\n+   |         ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}]}