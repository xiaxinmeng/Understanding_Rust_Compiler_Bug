{"sha": "72a7f736106187fb09474130921dfa4bcc1ceac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTdmNzM2MTA2MTg3ZmIwOTQ3NDEzMDkyMWRmYTRiY2MxY2VhYzI=", "commit": {"author": {"name": "Max Sharnoff", "email": "github@max.sharnoff.org", "date": "2020-12-09T23:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T23:13:24Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Camelid <camelidcamel@gmail.com>", "tree": {"sha": "45e97687c110566ddd79c017241e15003cb95b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e97687c110566ddd79c017241e15003cb95b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a7f736106187fb09474130921dfa4bcc1ceac2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0VoUCRBK7hj4Ov3rIwAAdHIIADJstMd2rJzRKnEKqRvaGpx3\n4dRU/Em+zMCxsSIUl4GSwFWuoz351ohJMT2mTiTIt8gPiVhfXDhW15eAKowg1Hj8\nP2GVEfB2fRuyseCeKO1py3iRIHf15+gCFajqT4MHUU0ZB7CUb28F6RAA5J+J9/4N\noj4s/ul9E41OWjHtytLVMVRepdeiKidrvJV8A+SvE2zC6Cd55QyeZkArRGrWF408\n7fbFne5FiB4DWm9FfRO/oI5zfxoaAu4pYVXZzDF7cB7wYqT72YW2VaVYoJaHyH8u\nZFlx1v5OTW4eJGBGCUMw4SKdQviJ9JDDyZsFDIIAAIzPTExRsUEEmxfSSSmoSgE=\n=bi4C\n-----END PGP SIGNATURE-----\n", "payload": "tree 45e97687c110566ddd79c017241e15003cb95b94\nparent 1c36bb2f690b7ef508baaf72462a165566f48130\nauthor Max Sharnoff <github@max.sharnoff.org> 1607555604 +0000\ncommitter GitHub <noreply@github.com> 1607555604 +0000\n\nApply suggestions from code review\n\nCo-authored-by: Camelid <camelidcamel@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a7f736106187fb09474130921dfa4bcc1ceac2", "html_url": "https://github.com/rust-lang/rust/commit/72a7f736106187fb09474130921dfa4bcc1ceac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a7f736106187fb09474130921dfa4bcc1ceac2/comments", "author": {"login": "sharnoff", "id": 29154784, "node_id": "MDQ6VXNlcjI5MTU0Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/29154784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharnoff", "html_url": "https://github.com/sharnoff", "followers_url": "https://api.github.com/users/sharnoff/followers", "following_url": "https://api.github.com/users/sharnoff/following{/other_user}", "gists_url": "https://api.github.com/users/sharnoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharnoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharnoff/subscriptions", "organizations_url": "https://api.github.com/users/sharnoff/orgs", "repos_url": "https://api.github.com/users/sharnoff/repos", "events_url": "https://api.github.com/users/sharnoff/events{/privacy}", "received_events_url": "https://api.github.com/users/sharnoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c36bb2f690b7ef508baaf72462a165566f48130", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c36bb2f690b7ef508baaf72462a165566f48130", "html_url": "https://github.com/rust-lang/rust/commit/1c36bb2f690b7ef508baaf72462a165566f48130"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "eef8f2046d33e543a4b12d685c78dbf3bbc31678", "filename": "library/core/src/any.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72a7f736106187fb09474130921dfa4bcc1ceac2/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a7f736106187fb09474130921dfa4bcc1ceac2/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=72a7f736106187fb09474130921dfa4bcc1ceac2", "patch": "@@ -17,11 +17,12 @@\n //! # Smart pointers and `dyn Any`\n //!\n //! One piece of behavior to keep in mind when using `Any` as a trait object,\n-//! especially with types like `Box<dyn Any>` or `Arc<dyn Any>` is that simply\n+//! especially with types like `Box<dyn Any>` or `Arc<dyn Any>`, is that simply\n //! calling `.type_id()` on the value will produce the `TypeId` of the\n-//! container, and not the underlying trait object. This can be avoided\n+//! *container*, not the underlying trait object. This can be avoided by\n //! converting the smart pointer into a `&dyn Any` instead, which will return\n-//! the object's type id. For example:\n+//! the object's `TypeId`. For example:\n+//!\n //! ```\n //! use std::any::{Any, TypeId};\n //!\n@@ -32,7 +33,6 @@\n //! // ... than this:\n //! let boxed_id = boxed.type_id();\n //!\n-//! // Both of these assertions pass\n //! assert_eq!(actual_id, TypeId::of::<i32>());\n //! assert_eq!(boxed_id, TypeId::of::<Box<dyn Any>>());\n //! ```"}]}