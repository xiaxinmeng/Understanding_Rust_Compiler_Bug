{"sha": "b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YTRjMTQxNWIxNTRmYTFlNWJkOGJiNTRlNjgxZjBmNWUyMWUyYTQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-13T17:56:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-17T21:43:18Z"}, "message": "Add br##\"xx\"## raw byte string literals.", "tree": {"sha": "9a68d3b4eae31521d410062ca5ff9fc7018dc233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a68d3b4eae31521d410062ca5ff9fc7018dc233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "html_url": "https://github.com/rust-lang/rust/commit/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e01b5809cd600a30bab29da698acb3d1b52409", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e01b5809cd600a30bab29da698acb3d1b52409", "html_url": "https://github.com/rust-lang/rust/commit/d7e01b5809cd600a30bab29da698acb3d1b52409"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "daa9ee3da844f88568d20df17b8eccece1425cd5", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -140,7 +140,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n             }\n \n             // text literals\n-            t::LIT_BYTE(..) | t::LIT_BINARY(..) |\n+            t::LIT_BYTE(..) | t::LIT_BINARY(..) | t::LIT_BINARY_RAW(..) |\n                 t::LIT_CHAR(..) | t::LIT_STR(..) | t::LIT_STR_RAW(..) => \"string\",\n \n             // number literals"}, {"sha": "31f15fd7495a4b40cad959426e0307ea8e551bcc", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -650,12 +650,13 @@ impl<'a> StringReader<'a> {\n     /// token, and updates the interner\n     fn next_token_inner(&mut self) -> token::Token {\n         let c = self.curr;\n-        if ident_start(c) && match (c.unwrap(), self.nextch()) {\n+        if ident_start(c) && match (c.unwrap(), self.nextch(), self.nextnextch()) {\n             // Note: r as in r\" or r#\" is part of a raw string literal,\n             // b as in b' is part of a byte literal.\n             // They are not identifiers, and are handled further down.\n-           ('r', Some('\"')) | ('r', Some('#')) |\n-           ('b', Some('\"')) | ('b', Some('\\'')) => false,\n+           ('r', Some('\"'), _) | ('r', Some('#'), _) |\n+           ('b', Some('\"'), _) | ('b', Some('\\''), _) |\n+           ('b', Some('r'), Some('\"')) | ('b', Some('r'), Some('#')) => false,\n            _ => true\n         } {\n             let start = self.last_pos;\n@@ -863,6 +864,7 @@ impl<'a> StringReader<'a> {\n             return match self.curr {\n                 Some('\\'') => parse_byte(self),\n                 Some('\"') => parse_byte_string(self),\n+                Some('r') => parse_raw_byte_string(self),\n                 _ => unreachable!()  // Should have been a token::IDENT above.\n             };\n \n@@ -978,6 +980,54 @@ impl<'a> StringReader<'a> {\n                 self_.bump();\n                 return token::LIT_BINARY(Rc::new(value));\n             }\n+\n+            fn parse_raw_byte_string(self_: &mut StringReader) -> token::Token {\n+                let start_bpos = self_.last_pos;\n+                self_.bump();\n+                let mut hash_count = 0u;\n+                while self_.curr_is('#') {\n+                    self_.bump();\n+                    hash_count += 1;\n+                }\n+\n+                if self_.is_eof() {\n+                    self_.fatal_span(start_bpos, self_.last_pos, \"unterminated raw string\");\n+                } else if !self_.curr_is('\"') {\n+                    self_.fatal_span_char(start_bpos, self_.last_pos,\n+                                    \"only `#` is allowed in raw string delimitation; \\\n+                                     found illegal character\",\n+                                    self_.curr.unwrap());\n+                }\n+                self_.bump();\n+                let content_start_bpos = self_.last_pos;\n+                let mut content_end_bpos;\n+                'outer: loop {\n+                    match self_.curr {\n+                        None => self_.fatal_span(start_bpos, self_.last_pos,\n+                                                 \"unterminated raw string\"),\n+                        Some('\"') => {\n+                            content_end_bpos = self_.last_pos;\n+                            for _ in range(0, hash_count) {\n+                                self_.bump();\n+                                if !self_.curr_is('#') {\n+                                    continue 'outer;\n+                                }\n+                            }\n+                            break;\n+                        },\n+                        Some(c) => if c > '\\x7F' {\n+                            self_.err_span_char(self_.last_pos, self_.last_pos,\n+                                                \"raw byte string must be ASCII\", c);\n+                        }\n+                    }\n+                    self_.bump();\n+                }\n+                self_.bump();\n+                let bytes = self_.with_str_from_to(content_start_bpos,\n+                                                   content_end_bpos,\n+                                                   |s| s.as_bytes().to_owned());\n+                return token::LIT_BINARY_RAW(Rc::new(bytes), hash_count);\n+            }\n           }\n           '\"' => {\n             let mut accum_str = String::new();"}, {"sha": "ae2ec216bee60924d3b45e695fe2aa99d4f28132", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -1529,6 +1529,7 @@ impl<'a> Parser<'a> {\n             token::LIT_STR_RAW(s, n) => {\n                 LitStr(self.id_to_interned_str(s), ast::RawStr(n))\n             }\n+            token::LIT_BINARY_RAW(ref v, _) |\n             token::LIT_BINARY(ref v) => LitBinary(v.clone()),\n             token::LPAREN => { self.expect(&token::RPAREN); LitNil },\n             _ => { self.unexpected_last(tok); }"}, {"sha": "a2af417ed79a82055ec86c8defc389994ea1788c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -88,6 +88,7 @@ pub enum Token {\n     LIT_STR(ast::Ident),\n     LIT_STR_RAW(ast::Ident, uint), /* raw str delimited by n hash symbols */\n     LIT_BINARY(Rc<Vec<u8>>),\n+    LIT_BINARY_RAW(Rc<Vec<u8>>, uint), /* raw binary str delimited by n hash symbols */\n \n     /* Name components */\n     // an identifier contains an \"is_mod_name\" boolean,\n@@ -243,6 +244,10 @@ pub fn to_str(t: &Token) -> String {\n             \"b\\\"{}\\\"\",\n             v.iter().map(|&b| b as char).collect::<String>().escape_default())\n       }\n+      LIT_BINARY_RAW(ref s, n) => {\n+        format!(\"br{delim}\\\"{string}\\\"{delim}\",\n+                 delim=\"#\".repeat(n), string=s.as_slice().to_ascii().as_str_ascii())\n+      }\n \n       /* Name components */\n       IDENT(s, _) => get_ident(s).get().to_string(),\n@@ -298,6 +303,7 @@ pub fn can_begin_expr(t: &Token) -> bool {\n       LIT_STR(_) => true,\n       LIT_STR_RAW(_, _) => true,\n       LIT_BINARY(_) => true,\n+      LIT_BINARY_RAW(_, _) => true,\n       POUND => true,\n       AT => true,\n       NOT => true,\n@@ -338,6 +344,7 @@ pub fn is_lit(t: &Token) -> bool {\n       LIT_STR(_) => true,\n       LIT_STR_RAW(_, _) => true,\n       LIT_BINARY(_) => true,\n+      LIT_BINARY_RAW(_, _) => true,\n       _ => false\n     }\n }"}, {"sha": "83ea9db39b798b1f80009c7bc6a016fe5851477a", "filename": "src/test/compile-fail/raw-byte-string-eof.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-eof.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+pub fn main() {\n+    br##\"a\"#;  //~ unterminated raw string\n+}\n+\n+"}, {"sha": "7a3d1b2318a3186c776a3d5fc504209468b5189a", "filename": "src/test/compile-fail/raw-byte-string-literals.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-byte-string-literals.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+pub fn main() {\n+    br\"\u00e9\";  //~ raw byte string must be ASCII\n+    br##~\"a\"~##;  //~ only `#` is allowed in raw string delimitation\n+}\n+\n+"}, {"sha": "5317fdc391fd68ce7b7db5023d405c46dd0ffbe1", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "patch": "@@ -11,6 +11,7 @@\n \n static FOO: u8 = b'\\xF0';\n static BAR: &'static [u8] = b\"a\\xF0\\t\";\n+static BAZ: &'static [u8] = br\"a\\n\";\n \n pub fn main() {\n     assert_eq!(b'a', 97u8);\n@@ -24,7 +25,6 @@ pub fn main() {\n     assert_eq!(b'\\xF0', 240u8);\n     assert_eq!(FOO, 240u8);\n \n-    // FIXME: Do we want this to be valid?\n     assert_eq!([42, ..b'\\t'].as_slice(), &[42, 42, 42, 42, 42, 42, 42, 42, 42]);\n \n     match 42 {\n@@ -47,4 +47,10 @@ pub fn main() {\n         b\"a\\n\" => {},\n         _ => fail!(),\n     }\n+\n+    assert_eq!(BAZ, &[97u8, 92u8, 110u8]);\n+    assert_eq!(br\"a\\n\", &[97u8, 92u8, 110u8]);\n+    assert_eq!(br\"a\\n\", b\"a\\\\n\");\n+    assert_eq!(br###\"a\"##b\"###, &[97u8, 34u8, 35u8, 35u8, 98u8]);\n+    assert_eq!(br###\"a\"##b\"###, b\"a\\\"##b\");\n }"}]}