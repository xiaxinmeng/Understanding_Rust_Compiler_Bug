{"sha": "320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMGRkMDRmYWJmMWQzMzUxZWZhMDA0NDZiYzljMzZkNWM2YzVlZjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:16Z"}, "message": "Rollup merge of #33832 - alexcrichton:android-memalign, r=luqmana\n\nstd: Use memalign, not posix_memalign, on Android\n\nWe've gotten requests to move our Android support as far back as API level 9\nwhere unfortunately the `posix_memalign` API wasn't implemented yet. Thankfully,\nhowever, the `memalign` API was and it appears to be usable with `free` on the\nAndroid platform (see comments included in commit).\n\nThis should help fix some of the last few test failures when compiling against\nAPI level 9.", "tree": {"sha": "77feb0a21e5c7cda90aa3396f4b259c955f872db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77feb0a21e5c7cda90aa3396f4b259c955f872db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "html_url": "https://github.com/rust-lang/rust/commit/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6bf3744b886ebc33adf210b00733af1d09b677", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6bf3744b886ebc33adf210b00733af1d09b677", "html_url": "https://github.com/rust-lang/rust/commit/0a6bf3744b886ebc33adf210b00733af1d09b677"}, {"sha": "33dfd0fb16a71cc3c96ca28b57eccbd1e278a3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/33dfd0fb16a71cc3c96ca28b57eccbd1e278a3ac", "html_url": "https://github.com/rust-lang/rust/commit/33dfd0fb16a71cc3c96ca28b57eccbd1e278a3ac"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "9eade937bfb4cffd60a4f3c207d312fccb8c54f5", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "patch": "@@ -80,13 +80,40 @@ mod imp {\n         if align <= MIN_ALIGN {\n             libc::malloc(size as libc::size_t) as *mut u8\n         } else {\n-            let mut out = ptr::null_mut();\n-            let ret = libc::posix_memalign(&mut out, align as libc::size_t, size as libc::size_t);\n-            if ret != 0 {\n-                ptr::null_mut()\n-            } else {\n-                out as *mut u8\n-            }\n+            aligned_malloc(size, align)\n+        }\n+    }\n+\n+    #[cfg(target_os = \"android\")]\n+    unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n+        // On android we currently target API level 9 which unfortunately\n+        // doesn't have the `posix_memalign` API used below. Instead we use\n+        // `memalign`, but this unfortunately has the property on some systems\n+        // where the memory returned cannot be deallocated by `free`!\n+        //\n+        // Upon closer inspection, however, this appears to work just fine with\n+        // Android, so for this platform we should be fine to call `memalign`\n+        // (which is present in API level 9). Some helpful references could\n+        // possibly be chromium using memalign [1], attempts at documenting that\n+        // memalign + free is ok [2] [3], or the current source of chromium\n+        // which still uses memalign on android [4].\n+        //\n+        // [1]: https://codereview.chromium.org/10796020/\n+        // [2]: https://code.google.com/p/android/issues/detail?id=35391\n+        // [3]: https://bugs.chromium.org/p/chromium/issues/detail?id=138579\n+        // [4]: https://chromium.googlesource.com/chromium/src/base/+/master/\n+        //                                       /memory/aligned_memory.cc\n+        libc::memalign(align as libc::size_t, size as libc::size_t) as *mut u8\n+    }\n+\n+    #[cfg(not(target_os = \"android\"))]\n+    unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n+        let mut out = ptr::null_mut();\n+        let ret = libc::posix_memalign(&mut out, align as libc::size_t, size as libc::size_t);\n+        if ret != 0 {\n+            ptr::null_mut()\n+        } else {\n+            out as *mut u8\n         }\n     }\n "}]}