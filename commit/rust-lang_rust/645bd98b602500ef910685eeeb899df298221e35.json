{"sha": "645bd98b602500ef910685eeeb899df298221e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NWJkOThiNjAyNTAwZWY5MTA2ODVlZWViODk5ZGYyOTgyMjFlMzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-11T21:43:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-11T21:43:14Z"}, "message": "doc: add missing decls to example, r=burningtree.", "tree": {"sha": "23740cdaaf1345737e11f1ea93efc4bc785a6c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23740cdaaf1345737e11f1ea93efc4bc785a6c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645bd98b602500ef910685eeeb899df298221e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645bd98b602500ef910685eeeb899df298221e35", "html_url": "https://github.com/rust-lang/rust/commit/645bd98b602500ef910685eeeb899df298221e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645bd98b602500ef910685eeeb899df298221e35/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb498ff59f3de4da58d9f6e90fd989482c901fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb498ff59f3de4da58d9f6e90fd989482c901fc5", "html_url": "https://github.com/rust-lang/rust/commit/fb498ff59f3de4da58d9f6e90fd989482c901fc5"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "b7a07f4021a5aa7f28848e6120d72fb22aae99cd", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645bd98b602500ef910685eeeb899df298221e35/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/645bd98b602500ef910685eeeb899df298221e35/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=645bd98b602500ef910685eeeb899df298221e35", "patch": "@@ -1838,6 +1838,8 @@ combination of arguments of the appropriate types. The usual way is to write\n a function that returns `Option<T>` instead of `T`.\n \n ~~~~\n+# struct Point {x: float, y: float}\n+# enum Shape { Circle(Point, float), Rectangle(Point, Point) }\n fn radius(shape: Shape) -> Option<float> {\n    match shape {\n        Circle(_, radius) => Some(radius),"}]}