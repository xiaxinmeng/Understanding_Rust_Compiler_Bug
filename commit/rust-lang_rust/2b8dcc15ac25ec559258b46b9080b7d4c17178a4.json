{"sha": "2b8dcc15ac25ec559258b46b9080b7d4c17178a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOGRjYzE1YWMyNWVjNTU5MjU4YjQ2YjkwODBiN2Q0YzE3MTc4YTQ=", "commit": {"author": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2020-07-26T23:49:17Z"}, "committer": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2020-07-27T00:23:21Z"}, "message": "add completion for rustc lints", "tree": {"sha": "92ac03c6b8c9ad1c62704017c480c509348c8968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ac03c6b8c9ad1c62704017c480c509348c8968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8dcc15ac25ec559258b46b9080b7d4c17178a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8dcc15ac25ec559258b46b9080b7d4c17178a4", "html_url": "https://github.com/rust-lang/rust/commit/2b8dcc15ac25ec559258b46b9080b7d4c17178a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8dcc15ac25ec559258b46b9080b7d4c17178a4/comments", "author": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff40af7286b66294d8b64f0c8fdb3179a84be76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff40af7286b66294d8b64f0c8fdb3179a84be76", "html_url": "https://github.com/rust-lang/rust/commit/8ff40af7286b66294d8b64f0c8fdb3179a84be76"}], "stats": {"total": 282, "additions": 278, "deletions": 4}, "files": [{"sha": "109c5e9a8806c2aec34b22cffb0f4e572e8d928f", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 278, "deletions": 4, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/2b8dcc15ac25ec559258b46b9080b7d4c17178a4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8dcc15ac25ec559258b46b9080b7d4c17178a4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=2b8dcc15ac25ec559258b46b9080b7d4c17178a4", "patch": "@@ -13,13 +13,19 @@ use crate::completion::{\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n-\n     match (attribute.path(), attribute.input()) {\n         (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n             if path.to_string() == \"derive\" =>\n         {\n             complete_derive(acc, ctx, token_tree)\n         }\n+        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n+            if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n+                .iter()\n+                .any(|lint_level| lint_level == &path.to_string()) =>\n+        {\n+            complete_lint(acc, ctx, token_tree)\n+        }\n         (_, Some(ast::AttrInput::TokenTree(_token_tree))) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n     }\n@@ -125,7 +131,7 @@ const ATTRIBUTES: &[AttrCompletion] = &[\n ];\n \n fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n-    if let Ok(existing_derives) = parse_derive_input(derive_input) {\n+    if let Ok(existing_derives) = parse_comma_sep_input(derive_input) {\n         for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n             .into_iter()\n             .filter(|completion| !existing_derives.contains(completion.label))\n@@ -158,7 +164,26 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n     }\n }\n \n-fn parse_derive_input(derive_input: ast::TokenTree) -> Result<FxHashSet<String>, ()> {\n+fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n+    if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n+        for lint_completion in DEFAULT_LINT_COMPLETIONS\n+            .into_iter()\n+            .filter(|completion| !existing_lints.contains(completion.label))\n+        {\n+            acc.add(\n+                CompletionItem::new(\n+                    CompletionKind::Attribute,\n+                    ctx.source_range(),\n+                    lint_completion.label,\n+                )\n+                .kind(CompletionItemKind::Attribute)\n+                .detail(lint_completion.description),\n+            );\n+        }\n+    }\n+}\n+\n+fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Result<FxHashSet<String>, ()> {\n     match (derive_input.left_delimiter_token(), derive_input.right_delimiter_token()) {\n         (Some(left_paren), Some(right_paren))\n             if left_paren.kind() == SyntaxKind::L_PAREN\n@@ -212,6 +237,7 @@ struct DeriveCompletion {\n \n /// Standard Rust derives and the information about their dependencies\n /// (the dependencies are needed so that the main derive don't break the compilation when added)\n+#[rustfmt::skip]\n const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Clone\", dependencies: &[] },\n     DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n@@ -224,6 +250,130 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n+struct LintCompletion {\n+    label: &'static str,\n+    description: &'static str,\n+}\n+\n+#[rustfmt::skip]\n+const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n+    LintCompletion { label: \"absolute_paths_not_starting_with_crate\", description: r#\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"# },\n+    LintCompletion { label: \"anonymous_parameters\", description: r#\"detects anonymous parameters\"# },\n+    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n+    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n+    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n+    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n+    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n+    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n+    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n+    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n+    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n+    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n+    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n+    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n+    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n+    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n+    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n+    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n+    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n+    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n+    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n+    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n+    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n+    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n+    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n+    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n+    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n+    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n+    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n+    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n+    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n+    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n+    LintCompletion { label: \"array_into_iter\", description: r#\"detects calling `into_iter` on arrays\"# },\n+    LintCompletion { label: \"asm_sub_register\", description: r#\"using only a subset of a register for inline asm inputs\"# },\n+    LintCompletion { label: \"bare_trait_objects\", description: r#\"suggest using `dyn Trait` for trait objects\"# },\n+    LintCompletion { label: \"bindings_with_variant_name\", description: r#\"detects pattern bindings with the same name as one of the matched variants\"# },\n+    LintCompletion { label: \"cenum_impl_drop_cast\", description: r#\"a C-like enum implementing Drop is cast\"# },\n+    LintCompletion { label: \"clashing_extern_declarations\", description: r#\"detects when an extern fn has been declared with the same name but different types\"# },\n+    LintCompletion { label: \"coherence_leak_check\", description: r#\"distinct impls distinguished only by the leak-check code\"# },\n+    LintCompletion { label: \"confusable_idents\", description: r#\"detects visually confusable pairs between identifiers\"# },\n+    LintCompletion { label: \"dead_code\", description: r#\"detect unused, unexported items\"# },\n+    LintCompletion { label: \"deprecated\", description: r#\"detects use of deprecated items\"# },\n+    LintCompletion { label: \"ellipsis_inclusive_range_patterns\", description: r#\"`...` range patterns are deprecated\"# },\n+    LintCompletion { label: \"exported_private_dependencies\", description: r#\"public interface leaks type from a private dependency\"# },\n+    LintCompletion { label: \"illegal_floating_point_literal_pattern\", description: r#\"floating-point literals cannot be used in patterns\"# },\n+    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n+    LintCompletion { label: \"improper_ctypes_definitions\", description: r#\"proper use of libc types in foreign item definitions\"# },\n+    LintCompletion { label: \"incomplete_features\", description: r#\"incomplete features that may function improperly in some or all cases\"# },\n+    LintCompletion { label: \"inline_no_sanitize\", description: r#\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"# },\n+    LintCompletion { label: \"intra_doc_link_resolution_failure\", description: r#\"failures in resolving intra-doc link targets\"# },\n+    LintCompletion { label: \"invalid_codeblock_attributes\", description: r#\"codeblock attribute looks a lot like a known one\"# },\n+    LintCompletion { label: \"invalid_value\", description: r#\"an invalid value is being created (such as a NULL reference)\"# },\n+    LintCompletion { label: \"irrefutable_let_patterns\", description: r#\"detects irrefutable patterns in if-let and while-let statements\"# },\n+    LintCompletion { label: \"late_bound_lifetime_arguments\", description: r#\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"# },\n+    LintCompletion { label: \"mixed_script_confusables\", description: r#\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"# },\n+    LintCompletion { label: \"mutable_borrow_reservation_conflict\", description: r#\"reservation of a two-phased borrow conflicts with other shared borrows\"# },\n+    LintCompletion { label: \"non_camel_case_types\", description: r#\"types, variants, traits and type parameters should have camel case names\"# },\n+    LintCompletion { label: \"non_shorthand_field_patterns\", description: r#\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"# },\n+    LintCompletion { label: \"non_snake_case\", description: r#\"variables, methods, functions, lifetime parameters and modules should have snake case names\"# },\n+    LintCompletion { label: \"non_upper_case_globals\", description: r#\"static constants should have uppercase identifiers\"# },\n+    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n+    LintCompletion { label: \"overlapping_patterns\", description: r#\"detects overlapping patterns\"# },\n+    LintCompletion { label: \"path_statements\", description: r#\"path statements with no effect\"# },\n+    LintCompletion { label: \"private_in_public\", description: r#\"detect private items in public interfaces not caught by the old implementation\"# },\n+    LintCompletion { label: \"proc_macro_derive_resolution_fallback\", description: r#\"detects proc macro derives using inaccessible names from parent modules\"# },\n+    LintCompletion { label: \"redundant_semicolons\", description: r#\"detects unnecessary trailing semicolons\"# },\n+    LintCompletion { label: \"renamed_and_removed_lints\", description: r#\"lints that have been renamed or removed\"# },\n+    LintCompletion { label: \"safe_packed_borrows\", description: r#\"safe borrows of fields of packed structs were erroneously allowed\"# },\n+    LintCompletion { label: \"stable_features\", description: r#\"stable features found in `#[feature]` directive\"# },\n+    LintCompletion { label: \"trivial_bounds\", description: r#\"these bounds don't depend on an type parameters\"# },\n+    LintCompletion { label: \"type_alias_bounds\", description: r#\"bounds in type aliases are not enforced\"# },\n+    LintCompletion { label: \"tyvar_behind_raw_pointer\", description: r#\"raw pointer to an inference variable\"# },\n+    LintCompletion { label: \"uncommon_codepoints\", description: r#\"detects uncommon Unicode codepoints in identifiers\"# },\n+    LintCompletion { label: \"unconditional_recursion\", description: r#\"functions that cannot return without calling themselves\"# },\n+    LintCompletion { label: \"unknown_lints\", description: r#\"unrecognized lint attribute\"# },\n+    LintCompletion { label: \"unnameable_test_items\", description: r#\"detects an item that cannot be named being marked as `#[test_case]`\"# },\n+    LintCompletion { label: \"unreachable_code\", description: r#\"detects unreachable code paths\"# },\n+    LintCompletion { label: \"unreachable_patterns\", description: r#\"detects unreachable patterns\"# },\n+    LintCompletion { label: \"unstable_name_collisions\", description: r#\"detects name collision with an existing but unstable method\"# },\n+    LintCompletion { label: \"unused_allocation\", description: r#\"detects unnecessary allocations that can be eliminated\"# },\n+    LintCompletion { label: \"unused_assignments\", description: r#\"detect assignments that will never be read\"# },\n+    LintCompletion { label: \"unused_attributes\", description: r#\"detects attributes that were not used by the compiler\"# },\n+    LintCompletion { label: \"unused_braces\", description: r#\"unnecessary braces around an expression\"# },\n+    LintCompletion { label: \"unused_comparisons\", description: r#\"comparisons made useless by limits of the types involved\"# },\n+    LintCompletion { label: \"unused_doc_comments\", description: r#\"detects doc comments that aren't used by rustdoc\"# },\n+    LintCompletion { label: \"unused_features\", description: r#\"unused features found in crate-level `#[feature]` directives\"# },\n+    LintCompletion { label: \"unused_imports\", description: r#\"imports that are never used\"# },\n+    LintCompletion { label: \"unused_labels\", description: r#\"detects labels that are never used\"# },\n+    LintCompletion { label: \"unused_macros\", description: r#\"detects macros that were not used\"# },\n+    LintCompletion { label: \"unused_must_use\", description: r#\"unused result of a type flagged as `#[must_use]`\"# },\n+    LintCompletion { label: \"unused_mut\", description: r#\"detect mut variables which don't need to be mutable\"# },\n+    LintCompletion { label: \"unused_parens\", description: r#\"`if`, `match`, `while` and `return` do not need parentheses\"# },\n+    LintCompletion { label: \"unused_unsafe\", description: r#\"unnecessary use of an `unsafe` block\"# },\n+    LintCompletion { label: \"unused_variables\", description: r#\"detect variables which are not used in any way\"# },\n+    LintCompletion { label: \"warnings\", description: r#\"mass-change the level for lints which produce warnings\"# },\n+    LintCompletion { label: \"where_clauses_object_safety\", description: r#\"checks the object safety of where clauses\"# },\n+    LintCompletion { label: \"while_true\", description: r#\"suggest using `loop { }` instead of `while true { }`\"# },\n+    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n+    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n+    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n+    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n+    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n+    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n+    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n+    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n+    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n+    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n+    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n+    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n+    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n+    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n+    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n+    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n+    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n+    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n+];\n+\n #[cfg(test)]\n mod tests {\n     use expect::{expect, Expect};\n@@ -256,6 +406,130 @@ struct Test {}\n         );\n     }\n \n+    #[test]\n+    fn empty_lint_completion() {\n+        check(\n+            r#\"#[allow(<|>)]\"#,\n+            expect![[r#\"\n+                at absolute_paths_not_starting_with_crate fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\n+                at ambiguous_associated_items ambiguous associated items\n+                at anonymous_parameters detects anonymous parameters\n+                at arithmetic_overflow arithmetic operation overflows\n+                at array_into_iter  detects calling `into_iter` on arrays\n+                at asm_sub_register using only a subset of a register for inline asm inputs\n+                at bare_trait_objects suggest using `dyn Trait` for trait objects\n+                at bindings_with_variant_name detects pattern bindings with the same name as one of the matched variants\n+                at box_pointers     use of owned (Box type) heap memory\n+                at cenum_impl_drop_cast a C-like enum implementing Drop is cast\n+                at clashing_extern_declarations detects when an extern fn has been declared with the same name but different types\n+                at coherence_leak_check distinct impls distinguished only by the leak-check code\n+                at conflicting_repr_hints conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\n+                at confusable_idents detects visually confusable pairs between identifiers\n+                at const_err        constant evaluation detected erroneous expression\n+                at dead_code        detect unused, unexported items\n+                at deprecated       detects use of deprecated items\n+                at deprecated_in_future detects use of items that will be deprecated in a future version\n+                at elided_lifetimes_in_paths hidden lifetime parameters in types are deprecated\n+                at ellipsis_inclusive_range_patterns `...` range patterns are deprecated\n+                at explicit_outlives_requirements outlives requirements can be inferred\n+                at exported_private_dependencies public interface leaks type from a private dependency\n+                at ill_formed_attribute_input ill-formed attribute inputs that were previously accepted and used in practice\n+                at illegal_floating_point_literal_pattern floating-point literals cannot be used in patterns\n+                at improper_ctypes  proper use of libc types in foreign modules\n+                at improper_ctypes_definitions proper use of libc types in foreign item definitions\n+                at incomplete_features incomplete features that may function improperly in some or all cases\n+                at incomplete_include trailing content in included file\n+                at indirect_structural_match pattern with const indirectly referencing non-structural-match type\n+                at inline_no_sanitize detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\n+                at intra_doc_link_resolution_failure failures in resolving intra-doc link targets\n+                at invalid_codeblock_attributes codeblock attribute looks a lot like a known one\n+                at invalid_type_param_default type parameter default erroneously allowed in invalid location\n+                at invalid_value    an invalid value is being created (such as a NULL reference)\n+                at irrefutable_let_patterns detects irrefutable patterns in if-let and while-let statements\n+                at keyword_idents   detects edition keywords being used as an identifier\n+                at late_bound_lifetime_arguments detects generic lifetime arguments in path segments with late bound lifetime parameters\n+                at macro_expanded_macro_exports_accessed_by_absolute_paths macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+                at macro_use_extern_crate the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\n+                at meta_variable_misuse possible meta-variable misuse at macro definition\n+                at missing_copy_implementations detects potentially-forgotten implementations of `Copy`\n+                at missing_crate_level_docs detects crates with no crate-level documentation\n+                at missing_debug_implementations detects missing implementations of Debug\n+                at missing_doc_code_examples detects publicly-exported items without code samples in their documentation\n+                at missing_docs     detects missing documentation for public members\n+                at missing_fragment_specifier detects missing fragment specifiers in unused `macro_rules!` patterns\n+                at mixed_script_confusables detects Unicode scripts whose mixed script confusables codepoints are solely used\n+                at mutable_borrow_reservation_conflict reservation of a two-phased borrow conflicts with other shared borrows\n+                at mutable_transmutes mutating transmuted &mut T from &T may cause undefined behavior\n+                at no_mangle_const_items const items will not have their symbols exported\n+                at no_mangle_generic_items generic items must be mangled\n+                at non_ascii_idents detects non-ASCII identifiers\n+                at non_camel_case_types types, variants, traits and type parameters should have camel case names\n+                at non_shorthand_field_patterns using `Struct { x: x }` instead of `Struct { x }` in a pattern\n+                at non_snake_case   variables, methods, functions, lifetime parameters and modules should have snake case names\n+                at non_upper_case_globals static constants should have uppercase identifiers\n+                at order_dependent_trait_objects trait-object types were treated as different depending on marker-trait order\n+                at overflowing_literals literal out of range for its type\n+                at overlapping_patterns detects overlapping patterns\n+                at path_statements  path statements with no effect\n+                at patterns_in_fns_without_body patterns in functions without body were erroneously allowed\n+                at private_doc_tests detects code samples in docs of private items not documented by rustdoc\n+                at private_in_public detect private items in public interfaces not caught by the old implementation\n+                at proc_macro_derive_resolution_fallback detects proc macro derives using inaccessible names from parent modules\n+                at pub_use_of_private_extern_crate detect public re-exports of private extern crates\n+                at redundant_semicolons detects unnecessary trailing semicolons\n+                at renamed_and_removed_lints lints that have been renamed or removed\n+                at safe_packed_borrows safe borrows of fields of packed structs were erroneously allowed\n+                at single_use_lifetimes detects lifetime parameters that are only used once\n+                at soft_unstable    a feature gate that doesn't break dependent crates\n+                at stable_features  stable features found in `#[feature]` directive\n+                at trivial_bounds   these bounds don't depend on an type parameters\n+                at trivial_casts    detects trivial casts which could be removed\n+                at trivial_numeric_casts detects trivial casts of numeric types which could be removed\n+                at type_alias_bounds bounds in type aliases are not enforced\n+                at tyvar_behind_raw_pointer raw pointer to an inference variable\n+                at unaligned_references detects unaligned references to fields of packed structs\n+                at uncommon_codepoints detects uncommon Unicode codepoints in identifiers\n+                at unconditional_panic operation will cause a panic at runtime\n+                at unconditional_recursion functions that cannot return without calling themselves\n+                at unknown_crate_types unknown crate type found in `#[crate_type]` directive\n+                at unknown_lints    unrecognized lint attribute\n+                at unnameable_test_items detects an item that cannot be named being marked as `#[test_case]`\n+                at unreachable_code detects unreachable code paths\n+                at unreachable_patterns detects unreachable patterns\n+                at unreachable_pub  `pub` items not reachable from crate root\n+                at unsafe_code      usage of `unsafe` code\n+                at unsafe_op_in_unsafe_fn unsafe operations in unsafe functions without an explicit unsafe block are deprecated\n+                at unstable_features enabling unstable features (deprecated. do not use)\n+                at unstable_name_collisions detects name collision with an existing but unstable method\n+                at unused_allocation detects unnecessary allocations that can be eliminated\n+                at unused_assignments detect assignments that will never be read\n+                at unused_attributes detects attributes that were not used by the compiler\n+                at unused_braces    unnecessary braces around an expression\n+                at unused_comparisons comparisons made useless by limits of the types involved\n+                at unused_crate_dependencies crate dependencies that are never used\n+                at unused_doc_comments detects doc comments that aren't used by rustdoc\n+                at unused_extern_crates extern crates that are never used\n+                at unused_features  unused features found in crate-level `#[feature]` directives\n+                at unused_import_braces unnecessary braces around an imported item\n+                at unused_imports   imports that are never used\n+                at unused_labels    detects labels that are never used\n+                at unused_lifetimes detects lifetime parameters that are never used\n+                at unused_macros    detects macros that were not used\n+                at unused_must_use  unused result of a type flagged as `#[must_use]`\n+                at unused_mut       detect mut variables which don't need to be mutable\n+                at unused_parens    `if`, `match`, `while` and `return` do not need parentheses\n+                at unused_qualifications detects unnecessarily qualified names\n+                at unused_results   unused result of an expression in a statement\n+                at unused_unsafe    unnecessary use of an `unsafe` block\n+                at unused_variables detect variables which are not used in any way\n+                at variant_size_differences detects enums with widely varying variant sizes\n+                at warnings         mass-change the level for lints which produce warnings\n+                at where_clauses_object_safety checks the object safety of where clauses\n+                at while_true       suggest using `loop { }` instead of `while true { }`\n+        \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn no_completion_for_incorrect_derive() {\n         check(\n@@ -325,7 +599,7 @@ struct Test {}\n \n     #[test]\n     fn test_attribute_completion_inside_nested_attr() {\n-        check(r#\"#[allow(<|>)]\"#, expect![[]])\n+        check(r#\"#[cfg(<|>)]\"#, expect![[]])\n     }\n \n     #[test]"}]}