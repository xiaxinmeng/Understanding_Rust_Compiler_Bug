{"sha": "e4eaf319c1d87eaaca70b608f850110e7f607ad1", "node_id": "C_kwDOAAsO6NoAKGU0ZWFmMzE5YzFkODdlYWFjYTcwYjYwOGY4NTAxMTBlN2Y2MDdhZDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-06T21:32:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T21:32:02Z"}, "message": "Rollup merge of #111203 - Kobzol:remark-print-kind, r=tmiasko\n\nOutput LLVM optimization remark kind in `-Cremark` output\n\nSince https://github.com/rust-lang/rust/pull/90833, the optimization remark kind has not been printed. Therefore it wasn't possible to easily determine from the log (in a programmatic way) which remark kind was produced. I think that the most interesting remarks are the missed ones, which can lead users to some code optimization.\n\nMaybe we could also change the format closer to the \"old\" one:\n```\nnote: optimization remark for tailcallelim at /checkout/src/libcore/num/mod.rs:1:0: marked this call a tail call candidate\n```\n\nI wanted to programatically parse the remarks so that they could work e.g. with https://github.com/OfekShilon/optview2. However, now that I think about it, probably the proper solution is to tell rustc to output them to YAML and then use the YAML as input for the opt remark visualization tools. The flag for enabling this does not seem to work though (https://github.com/rust-lang/rust/issues/96705#issuecomment-1117632322).\n\nStill I think that it's good to output the remark kind anyway, it's an important piece of information.\n\nr? ```@tmiasko```", "tree": {"sha": "a309b3c90733348a19809b883a25f1c0dca0e0d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a309b3c90733348a19809b883a25f1c0dca0e0d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4eaf319c1d87eaaca70b608f850110e7f607ad1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVsdSCRBK7hj4Ov3rIwAAQbsIACYVGu0gJm+AqhDWNaa4X7nK\naCZ8nQVYAG6mRGnngLw/46pdldI3mvHP1iXp9w+DHVE5R6+Ky5TvPgvAFJ9S1r0X\nDyB6c1ZFY6lXxyGPdKsqbOw0AstVktkmt0Rml8L9NiQe1q/AViqHsB/lxMYrAFuF\ncSZ6e+QzMSQABVXO3/GAPYTmUIik+mzDNvAqm11uykQzJP/qFXkvG6Y6GixSvcZ/\nWyFSGzzAIv9lKtZOf/RzOo8ItGsjCqpQPZWHF40nyGNy/Uq8jbRqCQfuVvZbZmws\now+77yo80egIa9jqWlvKb9KPgDOv/LlzMDutg3mD/FpkNpH8uH1JNPO76Thv71o=\n=VJ1Q\n-----END PGP SIGNATURE-----\n", "payload": "tree a309b3c90733348a19809b883a25f1c0dca0e0d1\nparent 60db4487904a1c8ed6a99343c648c0fbda2447b6\nparent 00ac29d7b2e7a9a2da79f8754efc8e0d51e81886\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683408722 +0200\ncommitter GitHub <noreply@github.com> 1683408722 +0200\n\nRollup merge of #111203 - Kobzol:remark-print-kind, r=tmiasko\n\nOutput LLVM optimization remark kind in `-Cremark` output\n\nSince https://github.com/rust-lang/rust/pull/90833, the optimization remark kind has not been printed. Therefore it wasn't possible to easily determine from the log (in a programmatic way) which remark kind was produced. I think that the most interesting remarks are the missed ones, which can lead users to some code optimization.\n\nMaybe we could also change the format closer to the \"old\" one:\n```\nnote: optimization remark for tailcallelim at /checkout/src/libcore/num/mod.rs:1:0: marked this call a tail call candidate\n```\n\nI wanted to programatically parse the remarks so that they could work e.g. with https://github.com/OfekShilon/optview2. However, now that I think about it, probably the proper solution is to tell rustc to output them to YAML and then use the YAML as input for the opt remark visualization tools. The flag for enabling this does not seem to work though (https://github.com/rust-lang/rust/issues/96705#issuecomment-1117632322).\n\nStill I think that it's good to output the remark kind anyway, it's an important piece of information.\n\nr? ```@tmiasko```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4eaf319c1d87eaaca70b608f850110e7f607ad1", "html_url": "https://github.com/rust-lang/rust/commit/e4eaf319c1d87eaaca70b608f850110e7f607ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4eaf319c1d87eaaca70b608f850110e7f607ad1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60db4487904a1c8ed6a99343c648c0fbda2447b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60db4487904a1c8ed6a99343c648c0fbda2447b6", "html_url": "https://github.com/rust-lang/rust/commit/60db4487904a1c8ed6a99343c648c0fbda2447b6"}, {"sha": "00ac29d7b2e7a9a2da79f8754efc8e0d51e81886", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ac29d7b2e7a9a2da79f8754efc8e0d51e81886", "html_url": "https://github.com/rust-lang/rust/commit/00ac29d7b2e7a9a2da79f8754efc8e0d51e81886"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "d77634741fb885694ac3e10801172273454ff73d", "filename": "compiler/rustc_codegen_llvm/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fmessages.ftl?ref=e4eaf319c1d87eaaca70b608f850110e7f607ad1", "patch": "@@ -82,7 +82,7 @@ codegen_llvm_prepare_thin_lto_module_with_llvm_err = failed to prepare thin LTO\n codegen_llvm_parse_bitcode = failed to parse bitcode for LTO module\n codegen_llvm_parse_bitcode_with_llvm_err = failed to parse bitcode for LTO module: {$llvm_err}\n \n-codegen_llvm_from_llvm_optimization_diag = {$filename}:{$line}:{$column} {$pass_name}: {$message}\n+codegen_llvm_from_llvm_optimization_diag = {$filename}:{$line}:{$column} {$pass_name} ({$kind}): {$message}\n codegen_llvm_from_llvm_diag = {$message}\n \n codegen_llvm_write_bytecode = failed to write bytecode to {$path}: {$err}"}, {"sha": "ca2eab28f872b26680425aec92eada7a3d64053f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=e4eaf319c1d87eaaca70b608f850110e7f607ad1", "patch": "@@ -31,6 +31,7 @@ use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel, SanitizerSet, SplitDebuginfo};\n \n+use crate::llvm::diagnostic::OptimizationDiagnosticKind;\n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;\n use std::fs;\n@@ -363,6 +364,15 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n                     line: opt.line,\n                     column: opt.column,\n                     pass_name: &opt.pass_name,\n+                    kind: match opt.kind {\n+                        OptimizationDiagnosticKind::OptimizationRemark => \"success\",\n+                        OptimizationDiagnosticKind::OptimizationMissed\n+                        | OptimizationDiagnosticKind::OptimizationFailure => \"missed\",\n+                        OptimizationDiagnosticKind::OptimizationAnalysis\n+                        | OptimizationDiagnosticKind::OptimizationAnalysisFPCommute\n+                        | OptimizationDiagnosticKind::OptimizationAnalysisAliasing => \"analysis\",\n+                        OptimizationDiagnosticKind::OptimizationRemarkOther => \"other\",\n+                    },\n                     message: &opt.message,\n                 });\n             }"}, {"sha": "6a9173ab450a312fe1393ab0e1b2419820b438ae", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4eaf319c1d87eaaca70b608f850110e7f607ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=e4eaf319c1d87eaaca70b608f850110e7f607ad1", "patch": "@@ -196,6 +196,7 @@ pub(crate) struct FromLlvmOptimizationDiag<'a> {\n     pub line: std::ffi::c_uint,\n     pub column: std::ffi::c_uint,\n     pub pass_name: &'a str,\n+    pub kind: &'a str,\n     pub message: &'a str,\n }\n "}, {"sha": "8fd30466f43c9a7b93211016a1a8b0fd6c31518a", "filename": "tests/ui/optimization-remark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4eaf319c1d87eaaca70b608f850110e7f607ad1/tests%2Fui%2Foptimization-remark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4eaf319c1d87eaaca70b608f850110e7f607ad1/tests%2Fui%2Foptimization-remark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foptimization-remark.rs?ref=e4eaf319c1d87eaaca70b608f850110e7f607ad1", "patch": "@@ -13,7 +13,7 @@\n // [merge1] compile-flags: -Cremark=all    -Cremark=giraffe\n // [merge2] compile-flags: -Cremark=inline -Cremark=giraffe\n //\n-// error-pattern: inline: 'f' not inlined into 'g'\n+// error-pattern: inline (missed): 'f' not inlined into 'g'\n // dont-check-compiler-stderr\n \n #[no_mangle]"}]}