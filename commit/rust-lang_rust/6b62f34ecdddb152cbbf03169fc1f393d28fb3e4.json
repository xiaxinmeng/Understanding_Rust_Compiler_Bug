{"sha": "6b62f34ecdddb152cbbf03169fc1f393d28fb3e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNjJmMzRlY2RkZGIxNTJjYmJmMDMxNjlmYzFmMzkzZDI4ZmIzZTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-22T11:36:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-22T11:36:19Z"}, "message": "Rollup merge of #44010 - GuillaumeGomez:read-links, r=frewsxcv\n\nAdd missing links for Read trait\n\nr? @rust-lang/docs", "tree": {"sha": "e46cacf29afc4489ab6d066d25cb930dbed03de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46cacf29afc4489ab6d066d25cb930dbed03de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4", "html_url": "https://github.com/rust-lang/rust/commit/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80cc5e51f02ac310cfc2fa0a4b82db69f68c9217", "url": "https://api.github.com/repos/rust-lang/rust/commits/80cc5e51f02ac310cfc2fa0a4b82db69f68c9217", "html_url": "https://github.com/rust-lang/rust/commit/80cc5e51f02ac310cfc2fa0a4b82db69f68c9217"}, {"sha": "871bd237ee233bce3c3ba964c0b3948d685d7902", "url": "https://api.github.com/repos/rust-lang/rust/commits/871bd237ee233bce3c3ba964c0b3948d685d7902", "html_url": "https://github.com/rust-lang/rust/commit/871bd237ee233bce3c3ba964c0b3948d685d7902"}], "stats": {"total": 106, "additions": 65, "deletions": 41}, "files": [{"sha": "0fff833e7d83e2a9bc93f1fd07150a1a3cfe4278", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 65, "deletions": 41, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b62f34ecdddb152cbbf03169fc1f393d28fb3e4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6b62f34ecdddb152cbbf03169fc1f393d28fb3e4", "patch": "@@ -401,28 +401,29 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n ///\n-/// Readers are defined by one required method, `read()`. Each call to `read`\n+/// Readers are defined by one required method, [`read()`]. Each call to [`read()`]\n /// will attempt to pull bytes from this source into a provided buffer. A\n-/// number of other methods are implemented in terms of `read()`, giving\n+/// number of other methods are implemented in terms of [`read()`], giving\n /// implementors a number of ways to read bytes while only needing to implement\n /// a single method.\n ///\n /// Readers are intended to be composable with one another. Many implementors\n-/// throughout `std::io` take and provide types which implement the `Read`\n+/// throughout [`std::io`] take and provide types which implement the `Read`\n /// trait.\n ///\n-/// Please note that each call to `read` may involve a system call, and\n-/// therefore, using something that implements [`BufRead`][bufread], such as\n-/// [`BufReader`][bufreader], will be more efficient.\n-///\n-/// [bufread]: trait.BufRead.html\n-/// [bufreader]: struct.BufReader.html\n+/// Please note that each call to [`read()`] may involve a system call, and\n+/// therefore, using something that implements [`BufRead`], such as\n+/// [`BufReader`], will be more efficient.\n ///\n /// # Examples\n ///\n-/// [`File`][file]s implement `Read`:\n+/// [`File`]s implement `Read`:\n ///\n-/// [file]: ../fs/struct.File.html\n+/// [`read()`]: trait.Read.html#tymethod.read\n+/// [`std::io`]: ../../std/io/index.html\n+/// [`File`]: ../fs/struct.File.html\n+/// [`BufRead`]: trait.BufRead.html\n+/// [`BufReader`]: struct.BufReader.html\n ///\n /// ```\n /// use std::io;\n@@ -455,9 +456,9 @@ pub trait Read {\n     ///\n     /// This function does not provide any guarantees about whether it blocks\n     /// waiting for data, but if an object needs to block for a read but cannot\n-    /// it will typically signal this via an `Err` return value.\n+    /// it will typically signal this via an [`Err`] return value.\n     ///\n-    /// If the return value of this method is `Ok(n)`, then it must be\n+    /// If the return value of this method is [`Ok(n)`], then it must be\n     /// guaranteed that `0 <= n <= buf.len()`. A nonzero `n` value indicates\n     /// that the buffer `buf` has been filled in with `n` bytes of data from this\n     /// source. If `n` is `0`, then it can indicate one of two scenarios:\n@@ -478,14 +479,17 @@ pub trait Read {\n     /// variant will be returned. If an error is returned then it must be\n     /// guaranteed that no bytes were read.\n     ///\n-    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the read\n+    /// An error of the [`ErrorKind::Interrupted`] kind is non-fatal and the read\n     /// operation should be retried if there is nothing else to do.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Ok(n)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`File`]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -511,8 +515,8 @@ pub trait Read {\n     /// buffers.\n     ///\n     /// If a `Read`er guarantees that it can work properly with uninitialized\n-    /// memory, it should call `Initializer::nop()`. See the documentation for\n-    /// `Initializer` for details.\n+    /// memory, it should call [`Initializer::nop()`]. See the documentation for\n+    /// [`Initializer`] for details.\n     ///\n     /// The behavior of this method must be independent of the state of the\n     /// `Read`er - the method only takes `&self` so that it can be used through\n@@ -523,6 +527,9 @@ pub trait Read {\n     /// This method is unsafe because a `Read`er could otherwise return a\n     /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n     /// block.\n+    ///\n+    /// [`Initializer::nop()`]: ../../std/io/struct.Initializer.html#method.nop\n+    /// [`Initializer`]: ../../std/io/struct.Initializer.html\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n@@ -532,16 +539,16 @@ pub trait Read {\n     /// Read all bytes until EOF in this source, placing them into `buf`.\n     ///\n     /// All bytes read from this source will be appended to the specified buffer\n-    /// `buf`. This function will continuously call `read` to append more data to\n-    /// `buf` until `read` returns either `Ok(0)` or an error of\n-    /// non-`ErrorKind::Interrupted` kind.\n+    /// `buf`. This function will continuously call [`read()`] to append more data to\n+    /// `buf` until [`read()`] returns either [`Ok(0)`] or an error of\n+    /// non-[`ErrorKind::Interrupted`] kind.\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// `ErrorKind::Interrupted` then the error is ignored and the operation\n+    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -550,9 +557,12 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`read()`]: trait.Read.html#tymethod.read\n+    /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`File`]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -633,11 +643,11 @@ pub trait Read {\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// `ErrorKind::Interrupted` then the error is ignored and the operation\n+    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind `ErrorKind::UnexpectedEof`.\n+    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -649,9 +659,11 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`ErrorKind::UnexpectedEof`]: ../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n     ///\n     /// ```\n     /// use std::io;\n@@ -722,18 +734,24 @@ pub trait Read {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n \n-    /// Transforms this `Read` instance to an `Iterator` over its bytes.\n+    /// Transforms this `Read` instance to an [`Iterator`] over its bytes.\n     ///\n-    /// The returned type implements `Iterator` where the `Item` is `Result<u8,\n-    /// R::Err>`.  The yielded item is `Ok` if a byte was successfully read and\n-    /// `Err` otherwise for I/O errors. EOF is mapped to returning `None` from\n+    /// The returned type implements [`Iterator`] where the `Item` is [`Result`]`<`[`u8`]`,\n+    /// R::Err>`. The yielded item is [`Ok`] if a byte was successfully read and\n+    /// [`Err`] otherwise for I/O errors. EOF is mapped to returning [`None`] from\n     /// this iterator.\n     ///\n     /// # Examples\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n     /// [file]: ../fs/struct.File.html\n+    /// [`Iterator`]: ../../std/iter/trait.Iterator.html\n+    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// ```\n     /// use std::io;\n@@ -754,22 +772,26 @@ pub trait Read {\n         Bytes { inner: self }\n     }\n \n-    /// Transforms this `Read` instance to an `Iterator` over `char`s.\n+    /// Transforms this `Read` instance to an [`Iterator`] over [`char`]s.\n     ///\n     /// This adaptor will attempt to interpret this reader as a UTF-8 encoded\n-    /// sequence of characters. The returned iterator will return `None` once\n+    /// sequence of characters. The returned iterator will return [`None`] once\n     /// EOF is reached for this reader. Otherwise each element yielded will be a\n-    /// `Result<char, E>` where `E` may contain information about what I/O error\n+    /// [`Result`]`<`[`char`]`, E>` where `E` may contain information about what I/O error\n     /// occurred or where decoding failed.\n     ///\n     /// Currently this adaptor will discard intermediate data read, and should\n     /// be avoided if this is not desired.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`Iterator`]: ../../std/iter/trait.Iterator.html\n+    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`char`]: ../../std/primitive.char.html\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// ```\n     /// #![feature(io)]\n@@ -832,15 +854,17 @@ pub trait Read {\n     /// Creates an adaptor which will read at most `limit` bytes from it.\n     ///\n     /// This function returns a new instance of `Read` which will read at most\n-    /// `limit` bytes, after which it will always return EOF (`Ok(0)`). Any\n+    /// `limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\n     /// read errors will not count towards the number of bytes read and future\n-    /// calls to `read` may succeed.\n+    /// calls to [`read()`] may succeed.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`read()`]: trait.Read.html#tymethod.read\n     ///\n     /// ```\n     /// use std::io;"}]}