{"sha": "6ffd7005c150dac4a99eea73eeb72189e0f5f694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZmQ3MDA1YzE1MGRhYzRhOTllZWE3M2VlYjcyMTg5ZTBmNWY2OTQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T21:35:33Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T21:35:33Z"}, "message": "Cache string and bytestring literal allocs.", "tree": {"sha": "6e86ef47865a4fd0c9ce6de970053e23c4038789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e86ef47865a4fd0c9ce6de970053e23c4038789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ffd7005c150dac4a99eea73eeb72189e0f5f694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffd7005c150dac4a99eea73eeb72189e0f5f694", "html_url": "https://github.com/rust-lang/rust/commit/6ffd7005c150dac4a99eea73eeb72189e0f5f694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ffd7005c150dac4a99eea73eeb72189e0f5f694/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d28b688c0279b5a05620db321ca2fde78a7954", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d28b688c0279b5a05620db321ca2fde78a7954", "html_url": "https://github.com/rust-lang/rust/commit/98d28b688c0279b5a05620db321ca2fde78a7954"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "6ed6b6bebc066fced7f58853cc6083f06b8dd0cb", "filename": "src/eval_context.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ffd7005c150dac4a99eea73eeb72189e0f5f694/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffd7005c150dac4a99eea73eeb72189e0f5f694/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=6ffd7005c150dac4a99eea73eeb72189e0f5f694", "patch": "@@ -168,11 +168,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &self.stack\n     }\n \n-    pub(super) fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value> {\n-        // FIXME: cache these allocs\n-        let ptr = self.memory.allocate(s.len() as u64, 1)?;\n-        self.memory.write_bytes(ptr, s.as_bytes())?;\n-        self.memory.mark_static_initalized(ptr.alloc_id, false)?;\n+    pub(crate) fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value> {\n+        let ptr = self.memory.allocate_cached(s.as_bytes())?;\n         Ok(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::from_u128(s.len() as u128)))\n     }\n \n@@ -194,10 +191,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Str(ref s) => return self.str_to_value(s),\n \n             ByteStr(ref bs) => {\n-                // FIXME: cache these allocs\n-                let ptr = self.memory.allocate(bs.len() as u64, 1)?;\n-                self.memory.write_bytes(ptr, bs)?;\n-                self.memory.mark_static_initalized(ptr.alloc_id, false)?;\n+                let ptr = self.memory.allocate_cached(bs)?;\n                 PrimVal::Ptr(ptr)\n             }\n "}, {"sha": "0d3bec62e9939f47416a44080baf08135cfab60c", "filename": "src/memory.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ffd7005c150dac4a99eea73eeb72189e0f5f694/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffd7005c150dac4a99eea73eeb72189e0f5f694/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=6ffd7005c150dac4a99eea73eeb72189e0f5f694", "patch": "@@ -180,6 +180,10 @@ pub struct Memory<'a, 'tcx> {\n     /// the normal struct access will succeed even though it shouldn't.\n     /// But even with mir optimizations, that situation is hard/impossible to produce.\n     packed: BTreeSet<Entry>,\n+\n+    /// A cache for basic byte allocations keyed by their contents. This is used to deduplicate\n+    /// allocations for string and bytestring literals.\n+    literal_alloc_cache: HashMap<Vec<u8>, AllocId>,\n }\n \n const ZST_ALLOC_ID: AllocId = AllocId(0);\n@@ -197,6 +201,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             memory_usage: 0,\n             packed: BTreeSet::new(),\n             static_alloc: HashSet::new(),\n+            literal_alloc_cache: HashMap::new(),\n         }\n     }\n \n@@ -263,6 +268,18 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Pointer::new(id, 0)\n     }\n \n+    pub fn allocate_cached(&mut self, bytes: &[u8]) -> EvalResult<'tcx, Pointer> {\n+        if let Some(&alloc_id) = self.literal_alloc_cache.get(bytes) {\n+            return Ok(Pointer::new(alloc_id, 0));\n+        }\n+\n+        let ptr = self.allocate(bytes.len() as u64, 1)?;\n+        self.write_bytes(ptr, bytes)?;\n+        self.mark_static_initalized(ptr.alloc_id, false)?;\n+        self.literal_alloc_cache.insert(bytes.to_vec(), ptr.alloc_id);\n+        Ok(ptr)\n+    }\n+\n     pub fn allocate(&mut self, size: u64, align: u64) -> EvalResult<'tcx, Pointer> {\n         if size == 0 {\n             return Ok(Pointer::zst_ptr());"}]}