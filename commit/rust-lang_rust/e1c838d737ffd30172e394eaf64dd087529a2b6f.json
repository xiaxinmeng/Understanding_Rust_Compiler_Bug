{"sha": "e1c838d737ffd30172e394eaf64dd087529a2b6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzgzOGQ3MzdmZmQzMDE3MmUzOTRlYWY2NGRkMDg3NTI5YTJiNmY=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-08T21:02:31Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-09T04:41:54Z"}, "message": "de-abuse TyKind::Error: ice on missing slice type", "tree": {"sha": "9d8679977e150003c31752ef3a6e2b0c7e2e1473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8679977e150003c31752ef3a6e2b0c7e2e1473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c838d737ffd30172e394eaf64dd087529a2b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c838d737ffd30172e394eaf64dd087529a2b6f", "html_url": "https://github.com/rust-lang/rust/commit/e1c838d737ffd30172e394eaf64dd087529a2b6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c838d737ffd30172e394eaf64dd087529a2b6f/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a691faac43f838a16aa872101b0277dbf2e25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a691faac43f838a16aa872101b0277dbf2e25f", "html_url": "https://github.com/rust-lang/rust/commit/f9a691faac43f838a16aa872101b0277dbf2e25f"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "37f0efd4064c068931599d51cd776bc25f78ea71", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1c838d737ffd30172e394eaf64dd087529a2b6f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c838d737ffd30172e394eaf64dd087529a2b6f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=e1c838d737ffd30172e394eaf64dd087529a2b6f", "patch": "@@ -1360,8 +1360,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let min = before.len() as u64 + after.len() as u64;\n                 let (opt_slice_ty, expected) =\n                     self.check_array_pat_len(span, element_ty, expected, slice, len, min);\n-                // we can get opt_slice_ty == None in cases that are not an error, e.g. if the\n-                // slice covers 0 elements or if slice is None.\n+                // opt_slice_ty.is_none() => slice.is_none()\n+                // Note, though, that opt_slice_ty could be Some(error_ty).\n+                assert!(opt_slice_ty.is_some() || slice.is_none());\n                 (element_ty, opt_slice_ty, expected)\n             }\n             ty::Slice(element_ty) => (element_ty, Some(expected), expected),\n@@ -1371,17 +1372,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.error_expected_array_or_slice(span, expected);\n                 }\n                 let err = self.tcx.types.err;\n-                (err, None, err)\n+                (err, Some(err), err)\n             }\n         };\n \n         // Type check all the patterns before `slice`.\n         for elt in before {\n             self.check_pat(&elt, element_ty, def_bm, ti);\n         }\n-        // Type check the `slice`, if present, against its expected type, if there is one.\n-        if let (Some(slice), Some(slice_ty)) = (slice, opt_slice_ty) {\n-            self.check_pat(&slice, slice_ty, def_bm, ti);\n+        // Type check the `slice`, if present, against its expected type.\n+        if let Some(slice) = slice {\n+            self.check_pat(&slice, opt_slice_ty.unwrap(), def_bm, ti);\n         }\n         // Type check the elements after `slice`, if present.\n         for elt in after {\n@@ -1393,7 +1394,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type check the length of an array pattern.\n     ///\n     /// Returns both the type of the variable length pattern (or `None`), and the potentially\n-    /// inferred array type.\n+    /// inferred array type. We should only return `None` for the slice type if `slice.is_none()`.\n     fn check_array_pat_len(\n         &self,\n         span: Span,\n@@ -1409,9 +1410,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // ...and since there is no variable-length pattern,\n                 // we require an exact match between the number of elements\n                 // in the array pattern and as provided by the matched type.\n-                if min_len != len {\n-                    self.error_scrutinee_inconsistent_length(span, min_len, len);\n+                if min_len == len {\n+                    return (None, arr_ty);\n                 }\n+\n+                self.error_scrutinee_inconsistent_length(span, min_len, len);\n             } else if let Some(pat_len) = len.checked_sub(min_len) {\n                 // The variable-length pattern was there,\n                 // so it has an array type with the remaining elements left as its size...\n@@ -1433,7 +1436,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // `let [a, b, ..] = arr` where `arr: [T; N]` where `const N: usize`.\n             self.error_scrutinee_unfixed_length(span);\n         }\n-        (None, arr_ty)\n+\n+        // If we get here, we must have emitted an error.\n+        (Some(self.tcx.types.err), arr_ty)\n     }\n \n     fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {"}]}