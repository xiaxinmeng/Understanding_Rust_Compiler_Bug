{"sha": "763d373dabb7ccf581737749a2a1adec335d8249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2M2QzNzNkYWJiN2NjZjU4MTczNzc0OWEyYTFhZGVjMzM1ZDgyNDk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-10T21:59:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Use tcx as the only context for visitor\n\nPreviously two different parts of the context had to be passed\nseparately; there were two sources of truth.", "tree": {"sha": "feefbc30aee923a6e32551d78354ccdcbb919f42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feefbc30aee923a6e32551d78354ccdcbb919f42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763d373dabb7ccf581737749a2a1adec335d8249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763d373dabb7ccf581737749a2a1adec335d8249", "html_url": "https://github.com/rust-lang/rust/commit/763d373dabb7ccf581737749a2a1adec335d8249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763d373dabb7ccf581737749a2a1adec335d8249/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f29e696ab0ced54f016bed0514a53f6e281ac8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f29e696ab0ced54f016bed0514a53f6e281ac8a", "html_url": "https://github.com/rust-lang/rust/commit/2f29e696ab0ced54f016bed0514a53f6e281ac8a"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "b87d7b19dcd5ed9b0b24ea9106755210d7a34270", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/763d373dabb7ccf581737749a2a1adec335d8249/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763d373dabb7ccf581737749a2a1adec335d8249/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=763d373dabb7ccf581737749a2a1adec335d8249", "patch": "@@ -392,7 +392,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 let hir = tcx.hir();\n                 let body = hir.body(hir.body_owned_by(hir.as_local_hir_id(def_id)));\n                 debug!(\"visiting body for {:?}\", def_id);\n-                EmitIgnoredResolutionErrors::new(&tcx.sess, hir).visit_body(body);\n+                EmitIgnoredResolutionErrors::new(&tcx).visit_body(body);\n                 DEFAULT_TYPECK.with(|typeck| typeck(tcx, def_id))\n             };\n         }),\n@@ -602,27 +602,26 @@ thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(TyCtxt<'tcx>, LocalDefId) -> &\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:\n /// 'Res::Error found but not reported'. To avoid this, emit the errors now.\n-struct EmitIgnoredResolutionErrors<'a, 'hir> {\n-    session: &'a Session,\n-    hir_map: Map<'hir>,\n+struct EmitIgnoredResolutionErrors<'a, 'tcx> {\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n-impl<'a, 'hir> EmitIgnoredResolutionErrors<'a, 'hir> {\n-    fn new(session: &'a Session, hir_map: Map<'hir>) -> Self {\n-        Self { session, hir_map }\n+impl<'a, 'tcx> EmitIgnoredResolutionErrors<'a, 'tcx> {\n+    fn new(tcx: &'a TyCtxt<'tcx>) -> Self {\n+        Self { tcx }\n     }\n }\n \n-impl<'hir> Visitor<'hir> for EmitIgnoredResolutionErrors<'_, 'hir> {\n-    type Map = Map<'hir>;\n+impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'_, 'tcx> {\n+    type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         // We need to recurse into nested closures,\n         // since those will fallback to the parent for type checking.\n-        NestedVisitorMap::OnlyBodies(self.hir_map)\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n-    fn visit_path(&mut self, path: &'hir Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         debug!(\"visiting path {:?}\", path);\n         if path.res == Res::Err {\n             // We have less context here than in rustc_resolve,\n@@ -637,7 +636,7 @@ impl<'hir> Visitor<'hir> for EmitIgnoredResolutionErrors<'_, 'hir> {\n                     .join(\"::\")\n             );\n             let mut err = rustc_errors::struct_span_err!(\n-                self.session,\n+                self.tcx.sess,\n                 path.span,\n                 E0433,\n                 \"failed to resolve: {}\","}]}