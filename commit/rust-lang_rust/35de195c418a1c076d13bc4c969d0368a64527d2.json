{"sha": "35de195c418a1c076d13bc4c969d0368a64527d2", "node_id": "C_kwDOAAsO6NoAKDM1ZGUxOTVjNDE4YTFjMDc2ZDEzYmM0Yzk2OWQwMzY4YTY0NTI3ZDI", "commit": {"author": {"name": "Milo", "email": "50248166+Milo123459@users.noreply.github.com", "date": "2021-10-14T18:57:21Z"}, "committer": {"name": "Milo", "email": "50248166+Milo123459@users.noreply.github.com", "date": "2021-10-14T18:57:21Z"}, "message": "a few clippy fixes", "tree": {"sha": "e0e677a4dc58b21f0860e318113f6456350d6106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e677a4dc58b21f0860e318113f6456350d6106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35de195c418a1c076d13bc4c969d0368a64527d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35de195c418a1c076d13bc4c969d0368a64527d2", "html_url": "https://github.com/rust-lang/rust/commit/35de195c418a1c076d13bc4c969d0368a64527d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35de195c418a1c076d13bc4c969d0368a64527d2/comments", "author": {"login": "Milo123459", "id": 50248166, "node_id": "MDQ6VXNlcjUwMjQ4MTY2", "avatar_url": "https://avatars.githubusercontent.com/u/50248166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milo123459", "html_url": "https://github.com/Milo123459", "followers_url": "https://api.github.com/users/Milo123459/followers", "following_url": "https://api.github.com/users/Milo123459/following{/other_user}", "gists_url": "https://api.github.com/users/Milo123459/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milo123459/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milo123459/subscriptions", "organizations_url": "https://api.github.com/users/Milo123459/orgs", "repos_url": "https://api.github.com/users/Milo123459/repos", "events_url": "https://api.github.com/users/Milo123459/events{/privacy}", "received_events_url": "https://api.github.com/users/Milo123459/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Milo123459", "id": 50248166, "node_id": "MDQ6VXNlcjUwMjQ4MTY2", "avatar_url": "https://avatars.githubusercontent.com/u/50248166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milo123459", "html_url": "https://github.com/Milo123459", "followers_url": "https://api.github.com/users/Milo123459/followers", "following_url": "https://api.github.com/users/Milo123459/following{/other_user}", "gists_url": "https://api.github.com/users/Milo123459/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milo123459/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milo123459/subscriptions", "organizations_url": "https://api.github.com/users/Milo123459/orgs", "repos_url": "https://api.github.com/users/Milo123459/repos", "events_url": "https://api.github.com/users/Milo123459/events{/privacy}", "received_events_url": "https://api.github.com/users/Milo123459/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52d47a3b8211c46de9321f76a59ce5e9811a8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52d47a3b8211c46de9321f76a59ce5e9811a8f8", "html_url": "https://github.com/rust-lang/rust/commit/e52d47a3b8211c46de9321f76a59ce5e9811a8f8"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "417ba6091972edb77f479a3c0d0c3a583de521c1", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=35de195c418a1c076d13bc4c969d0368a64527d2", "patch": "@@ -113,6 +113,10 @@ impl CfgDiff {\n     pub fn len(&self) -> usize {\n         self.enable.len() + self.disable.len()\n     }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n }\n \n impl fmt::Display for CfgDiff {"}, {"sha": "1641f744cd396b7239eac2cc13963a060db6d6d0", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=35de195c418a1c076d13bc4c969d0368a64527d2", "patch": "@@ -297,7 +297,7 @@ impl CargoActor {\n                 read_at_least_one_message = true;\n \n                 // Try to deserialize a message from Cargo or Rustc.\n-                let mut deserializer = serde_json::Deserializer::from_str(&line);\n+                let mut deserializer = serde_json::Deserializer::from_str(line);\n                 deserializer.disable_recursion_limit();\n                 if let Ok(message) = JsonMessage::deserialize(&mut deserializer) {\n                     match message {"}, {"sha": "2c5a24b1d2e8788786b377ac63e16f60cc839f34", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=35de195c418a1c076d13bc4c969d0368a64527d2", "patch": "@@ -57,7 +57,7 @@ mod tests {\n             .unwrap()\n             .expect(\"no declaration or definition found\")\n             .info;\n-        if navs.len() == 0 {\n+        if navs.is_empty() {\n             panic!(\"unresolved reference\")\n         }\n "}, {"sha": "47c0f00c00f5930cbef51b38601a16eaf2d70aa6", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=35de195c418a1c076d13bc4c969d0368a64527d2", "patch": "@@ -741,7 +741,7 @@ fn parents_match(mut node: NodeOrToken<SyntaxNode, SyntaxToken>, mut kinds: &[Sy\n     }\n \n     // Only true if we matched all expected kinds\n-    kinds.len() == 0\n+    kinds.is_empty()\n }\n \n #[inline]"}, {"sha": "f977d23c4809073f3a9e5def5f499ce3e290ef54", "filename": "crates/syntax/test_data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35de195c418a1c076d13bc4c969d0368a64527d2/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs?ref=35de195c418a1c076d13bc4c969d0368a64527d2", "patch": "@@ -101,7 +101,7 @@ pub /*(meh)*/ fn replace_range(mut text: String, range: TextRange, replace_with:\n }\n \n fn is_balanced(tokens: &[Token]) -> bool {\n-    if tokens.len() == 0\n+    if tokens.is_empty()\n        || tokens.first().unwrap().kind != L_CURLY\n        || tokens.last().unwrap().kind != R_CURLY {\n         return false\n@@ -153,7 +153,7 @@ pub /*(meh)*/ fn replace_range(mut text: String, range: TextRange, replace_with:\n }\n \n fn is_balanced(tokens: &[Token]) -> bool {\n-    if tokens.len() == 0\n+    if tokens.is_empty()\n        || tokens.first().unwrap().kind != L_CURLY\n        || tokens.last().unwrap().kind != R_CURLY {\n         return false"}]}