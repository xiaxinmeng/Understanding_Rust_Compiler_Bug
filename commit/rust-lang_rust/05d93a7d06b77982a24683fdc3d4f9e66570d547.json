{"sha": "05d93a7d06b77982a24683fdc3d4f9e66570d547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDkzYTdkMDZiNzc5ODJhMjQ2ODNmZGMzZDRmOWU2NjU3MGQ1NDc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-18T17:58:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-18T17:58:05Z"}, "message": "Rollup merge of #64348 - arnohaase:pr_documentation_spin_loop_hint, r=alexcrichton\n\nPR: documentation spin loop hint\n\nThe documentation for 'spin loop hint' explains that yield is better if the lock holder is running on the same CPU. I suggest that 'CPU or core' would be clearer.", "tree": {"sha": "dc6cff44867b0fc2ec04ed518fee09affe96a430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6cff44867b0fc2ec04ed518fee09affe96a430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d93a7d06b77982a24683fdc3d4f9e66570d547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgnAtCRBK7hj4Ov3rIwAAdHIIAHgPS34sYDleP6QTMx0EebFZ\nfffmgZJeq1ocpfMzlu4R/at6r2Lim8tatlIGHTov9yyVXXaxKExfgIYp4n2rft4N\nkErDjwNVVcu0UPMq3pdDQw8m37VPWwazQ3Br9q1ZniROVojy+tugXvTJCA/UzOKK\nNoa2jFRRLNWjrLBeMFmSQ1Sl59FTwVKLMvYaanbsrVvuylc4nJMbGN4/n6bmMUOM\nLul85GkXgjOM7aMewsz3k//CQwOoqUQ2R0Vhlu2gZHf8zj4OaIHNylJJ1tWg3ibx\nscTTjQ53j9ALUyDhJME+FuylXDv6MGqOGFMmPHN0REt6gVcX+ZZ1zqiND9152Q8=\n=0YdF\n-----END PGP SIGNATURE-----\n", "payload": "tree dc6cff44867b0fc2ec04ed518fee09affe96a430\nparent e8ded849ef57a983ff26245f7065dcaf17edc04b\nparent eb48b5d983fde79ab3595f250871116ee650c5e9\nauthor Tyler Mandry <tmandry@gmail.com> 1568829485 -0700\ncommitter GitHub <noreply@github.com> 1568829485 -0700\n\nRollup merge of #64348 - arnohaase:pr_documentation_spin_loop_hint, r=alexcrichton\n\nPR: documentation spin loop hint\n\nThe documentation for 'spin loop hint' explains that yield is better if the lock holder is running on the same CPU. I suggest that 'CPU or core' would be clearer.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d93a7d06b77982a24683fdc3d4f9e66570d547", "html_url": "https://github.com/rust-lang/rust/commit/05d93a7d06b77982a24683fdc3d4f9e66570d547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d93a7d06b77982a24683fdc3d4f9e66570d547/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ded849ef57a983ff26245f7065dcaf17edc04b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ded849ef57a983ff26245f7065dcaf17edc04b", "html_url": "https://github.com/rust-lang/rust/commit/e8ded849ef57a983ff26245f7065dcaf17edc04b"}, {"sha": "eb48b5d983fde79ab3595f250871116ee650c5e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb48b5d983fde79ab3595f250871116ee650c5e9", "html_url": "https://github.com/rust-lang/rust/commit/eb48b5d983fde79ab3595f250871116ee650c5e9"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "ee4be6c9151194b0e7a58e32b8be797e188bd933", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d93a7d06b77982a24683fdc3d4f9e66570d547/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d93a7d06b77982a24683fdc3d4f9e66570d547/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=05d93a7d06b77982a24683fdc3d4f9e66570d547", "patch": "@@ -49,28 +49,16 @@ pub unsafe fn unreachable_unchecked() -> ! {\n     intrinsics::unreachable()\n }\n \n-/// Signals the processor that it is entering a busy-wait spin-loop.\n+/// Emits a machine instruction hinting to the processor that it is running in busy-wait\n+/// spin-loop (\"spin lock\").\n ///\n-/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n-/// power or switching hyper-threads.\n-///\n-/// This function is different than [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop` only signals the processor that it is entering a\n-/// busy-wait spin-loop without yielding control to the system's scheduler.\n-///\n-/// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU and where the waiting\n-/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n-/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n-/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n-/// use [`std::thread::yield_now`].\n+/// For a discussion of different locking strategies and their trade-offs, see\n+/// [`core::sync::atomic::spin_loop_hint`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n-/// [`std::thread::yield_now`]: ../../std/thread/fn.yield_now.html\n+/// [`core::sync::atomic::spin_loop_hint`]: ../sync/atomic/fn.spin_loop_hint.html\n #[inline]\n #[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n pub fn spin_loop() {"}, {"sha": "c9ccef972c2b5faabdabf7f55a79c4378d180a9e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05d93a7d06b77982a24683fdc3d4f9e66570d547/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d93a7d06b77982a24683fdc3d4f9e66570d547/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=05d93a7d06b77982a24683fdc3d4f9e66570d547", "patch": "@@ -124,28 +124,31 @@ use crate::fmt;\n \n use crate::hint::spin_loop;\n \n-/// Signals the processor that it is entering a busy-wait spin-loop.\n+/// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n ///\n /// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n /// power or switching hyper-threads.\n ///\n-/// This function is different than [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop_hint` only signals the processor that it is entering a\n-/// busy-wait spin-loop without yielding control to the system's scheduler.\n+/// This function is different from [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop_hint` does not interact with the operating system.\n ///\n-/// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU and where the waiting\n-/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n-/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n-/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n-/// use [`std::thread::yield_now`].\n+/// Spin locks can be very efficient for short lock durations because they do not involve context\n+/// switches or interaction with the operating system. For long lock durations they become wasteful\n+/// however because they use CPU cycles for the entire lock duration, and using a\n+/// [`std::sync::Mutex`] is likely the better approach. If actively spinning for a long time is\n+/// required, e.g. because code polls a non-blocking API, calling [`std::thread::yield_now`]\n+/// or [`std::thread::sleep`] may be the best option.\n+///\n+/// **Note**: Spin locks are based on the underlying assumption that another thread will release\n+/// the lock 'soon'. In order for this to work, that other thread must run on a different CPU or\n+/// core (at least potentially). Spin locks do not work efficiently on single CPU / core platforms.\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n /// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n+/// [`std::thread::sleep`]: ../../../std/thread/fn.sleep.html\n+/// [`std::sync::Mutex`]: ../../../std/sync/struct.Mutex.html\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {"}]}