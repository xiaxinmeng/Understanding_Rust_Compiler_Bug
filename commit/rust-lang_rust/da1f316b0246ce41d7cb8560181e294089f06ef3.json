{"sha": "da1f316b0246ce41d7cb8560181e294089f06ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMWYzMTZiMDI0NmNlNDFkN2NiODU2MDE4MWUyOTQwODlmMDZlZjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-27T20:12:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-27T20:12:27Z"}, "message": "Merge #4173\n\n4173: Use core instead of std for builtin derive macros r=edwin0cheng a=edwin0cheng\n\nFixed #4087.\r\n\r\nWe can't use `$crate` here right now because : \r\n\r\n1. We have to able to detect `macro` 2.0 in collecting phase for finding `rustc_builtin_macro` attrs.\r\n2. And we have to make hygiene works for builtin derive macro.\r\n\r\nr= @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "d73e1927a6e3d57df3a1cbd64abdb2de0a735e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73e1927a6e3d57df3a1cbd64abdb2de0a735e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1f316b0246ce41d7cb8560181e294089f06ef3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepzyrCRBK7hj4Ov3rIwAAdHIIAGiB5hxNvWlY9absTHYNLgHV\nx7HpcnPC6tw7OS7iHQXR11BhqH9bKF9Se2dWVwkKYcCK1T3Wv/X8qdLJUFyKccWr\nU8fYysUyRHETCm7daKhZe2Czq6fPjdg04DDg9EU0qQvPk1zlKurglOX3osFIQFWu\nI8F1/MBw9popc1lKJy01BYgIa/ieSyAXNO/W7nHLTmlaYEYMYre0QYyRuaVcfTu2\nH16RdBPPnpgINUMiAZfdWnIyMWT7OLEABy+WUbxocXzJTs39h1Lzwqx1ovOc+FnG\nLlXlQj+MTSpThCLpjLeXr23oSclaS11ee0G4/DAdFNiu9+8s8Hw3edY25hdHBsE=\n=L88h\n-----END PGP SIGNATURE-----\n", "payload": "tree d73e1927a6e3d57df3a1cbd64abdb2de0a735e2d\nparent 7a9ba1657daa9fd90c639dcd937da11b4f526675\nparent c69f9c1b0a849b2cf5349e707508358e42bc8bb5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588018347 +0000\ncommitter GitHub <noreply@github.com> 1588018347 +0000\n\nMerge #4173\n\n4173: Use core instead of std for builtin derive macros r=edwin0cheng a=edwin0cheng\n\nFixed #4087.\r\n\r\nWe can't use `$crate` here right now because : \r\n\r\n1. We have to able to detect `macro` 2.0 in collecting phase for finding `rustc_builtin_macro` attrs.\r\n2. And we have to make hygiene works for builtin derive macro.\r\n\r\nr= @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1f316b0246ce41d7cb8560181e294089f06ef3", "html_url": "https://github.com/rust-lang/rust/commit/da1f316b0246ce41d7cb8560181e294089f06ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1f316b0246ce41d7cb8560181e294089f06ef3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9ba1657daa9fd90c639dcd937da11b4f526675", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ba1657daa9fd90c639dcd937da11b4f526675", "html_url": "https://github.com/rust-lang/rust/commit/7a9ba1657daa9fd90c639dcd937da11b4f526675"}, {"sha": "c69f9c1b0a849b2cf5349e707508358e42bc8bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c69f9c1b0a849b2cf5349e707508358e42bc8bb5", "html_url": "https://github.com/rust-lang/rust/commit/c69f9c1b0a849b2cf5349e707508358e42bc8bb5"}], "stats": {"total": 146, "additions": 109, "deletions": 37}, "files": [{"sha": "e60f879a393548b4de21c06d261c064ac373e10e", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 80, "deletions": 33, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/da1f316b0246ce41d7cb8560181e294089f06ef3/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1f316b0246ce41d7cb8560181e294089f06ef3/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=da1f316b0246ce41d7cb8560181e294089f06ef3", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n };\n \n use crate::db::AstDatabase;\n-use crate::{name, quote, LazyMacroId, MacroDefId, MacroDefKind};\n+use crate::{name, quote, LazyMacroId, MacroCallId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -153,76 +153,113 @@ fn expand_simple_derive(\n     Ok(expanded)\n }\n \n+fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n+    // FIXME: make hygiene works for builtin derive macro\n+    // such that $crate can be used here.\n+\n+    let m: MacroCallId = id.into();\n+    let file_id = m.as_file().original_file(db);\n+    let cg = db.crate_graph();\n+    let krates = db.relevant_crates(file_id);\n+    let krate = match krates.get(0) {\n+        Some(krate) => krate,\n+        None => {\n+            let tt = quote! { core };\n+            return tt.token_trees[0].clone();\n+        }\n+    };\n+\n+    // XXX\n+    //  All crates except core itself should have a dependency on core,\n+    //  We detect `core` by seeing whether it doesn't have such a dependency.\n+    let tt = if cg[*krate].dependencies.iter().any(|dep| dep.name == \"core\") {\n+        quote! { core }\n+    } else {\n+        quote! { crate }\n+    };\n+\n+    tt.token_trees[0].clone()\n+}\n+\n fn copy_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::marker::Copy })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::marker::Copy })\n }\n \n fn clone_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::clone::Clone })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::clone::Clone })\n }\n \n fn default_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::default::Default })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::default::Default })\n }\n \n fn debug_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::fmt::Debug })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::fmt::Debug })\n }\n \n fn hash_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::hash::Hash })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::hash::Hash })\n }\n \n fn eq_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::Eq })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::Eq })\n }\n \n fn partial_eq_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::PartialEq })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::PartialEq })\n }\n \n fn ord_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::Ord })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::Ord })\n }\n \n fn partial_ord_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::PartialOrd })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::PartialOrd })\n }\n \n #[cfg(test)]\n@@ -234,8 +271,18 @@ mod tests {\n \n     fn expand_builtin_derive(s: &str, name: Name) -> String {\n         let def = find_builtin_derive(&name).unwrap();\n+        let fixture = format!(\n+            r#\"//- /main.rs crate:main deps:core\n+<|>\n+{}\n+//- /lib.rs crate:core\n+// empty\n+\"#,\n+            s\n+        );\n \n-        let (db, file_id) = TestDB::with_single_file(&s);\n+        let (db, file_pos) = TestDB::with_position(&fixture);\n+        let file_id = file_pos.file_id;\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n@@ -264,7 +311,7 @@ mod tests {\n             known::Copy,\n         );\n \n-        assert_eq!(expanded, \"impl< >std::marker::CopyforFoo< >{}\");\n+        assert_eq!(expanded, \"impl< >core::marker::CopyforFoo< >{}\");\n     }\n \n     #[test]\n@@ -279,7 +326,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::marker::Copy,T1:std::marker::Copy>std::marker::CopyforFoo<T0,T1>{}\"\n+            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n         );\n     }\n \n@@ -297,7 +344,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::marker::Copy,T1:std::marker::Copy>std::marker::CopyforFoo<T0,T1>{}\"\n+            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n         );\n     }\n \n@@ -313,7 +360,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::clone::Clone,T1:std::clone::Clone>std::clone::CloneforFoo<T0,T1>{}\"\n+            \"impl<T0:core::clone::Clone,T1:core::clone::Clone>core::clone::CloneforFoo<T0,T1>{}\"\n         );\n     }\n }"}, {"sha": "5ddecbdc6808bb728402d565f7a07c5e5ae03dc7", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/da1f316b0246ce41d7cb8560181e294089f06ef3/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1f316b0246ce41d7cb8560181e294089f06ef3/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=da1f316b0246ce41d7cb8560181e294089f06ef3", "patch": "@@ -622,14 +622,14 @@ fn main() {\n fn infer_derive_clone_simple() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n #[derive(Clone)]\n struct S;\n fn test() {\n     S.clone()<|>;\n }\n \n-//- /lib.rs crate:std\n+//- /lib.rs crate:core\n #[prelude_import]\n use clone::*;\n mod clone {\n@@ -642,11 +642,36 @@ mod clone {\n     assert_eq!(\"S\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_derive_clone_in_core() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /lib.rs crate:core\n+#[prelude_import]\n+use clone::*;\n+mod clone {\n+    trait Clone {\n+        fn clone(&self) -> Self;\n+    }\n+}\n+#[derive(Clone)]\n+pub struct S;\n+\n+//- /main.rs crate:main deps:core\n+use core::S;\n+fn test() {\n+    S.clone()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(\"S\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_derive_clone_with_params() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n #[derive(Clone)]\n struct S;\n #[derive(Clone)]\n@@ -656,7 +681,7 @@ fn test() {\n     (Wrapper(S).clone(), Wrapper(NonClone).clone())<|>;\n }\n \n-//- /lib.rs crate:std\n+//- /lib.rs crate:core\n #[prelude_import]\n use clone::*;\n mod clone {"}]}