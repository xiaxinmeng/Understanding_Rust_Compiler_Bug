{"sha": "dd2c6c318bfe3191e936f4500d60b5089db1ef60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMmM2YzMxOGJmZTMxOTFlOTM2ZjQ1MDBkNjBiNTA4OWRiMWVmNjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T06:40:17Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T08:14:38Z"}, "message": "Add fallible box APIs (`Box::try_new_*`)", "tree": {"sha": "b09d512b2f9b56a15a4328b1f00e47377a28a4ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09d512b2f9b56a15a4328b1f00e47377a28a4ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2c6c318bfe3191e936f4500d60b5089db1ef60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2c6c318bfe3191e936f4500d60b5089db1ef60", "html_url": "https://github.com/rust-lang/rust/commit/dd2c6c318bfe3191e936f4500d60b5089db1ef60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2c6c318bfe3191e936f4500d60b5089db1ef60/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "html_url": "https://github.com/rust-lang/rust/commit/d116f48788645f2b5ff5cd409f4ac8ba84f906ad"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "eb00d1a8b47f128a897d07035b261c252ec94cb9", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/dd2c6c318bfe3191e936f4500d60b5089db1ef60/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2c6c318bfe3191e936f4500d60b5089db1ef60/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=dd2c6c318bfe3191e936f4500d60b5089db1ef60", "patch": "@@ -241,6 +241,77 @@ impl<T> Box<T> {\n     pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n     }\n+\n+    /// Allocates memory on the heap then places `x` into it,\n+    /// returning an error if the allocation fails\n+    ///\n+    /// This doesn't actually allocate if `T` is zero-sized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// let five = Box::try_new(5)?;\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_new(x: T) -> Result<Self, AllocError> {\n+        Self::try_new_in(x, Global)\n+    }\n+\n+    /// Constructs a new box with uninitialized contents on the heap,\n+    /// returning an error if the allocation fails\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    ///\n+    /// let mut five = Box::<u32>::try_new_uninit()?;\n+    ///\n+    /// let five = unsafe {\n+    ///     // Deferred initialization:\n+    ///     five.as_mut_ptr().write(5);\n+    ///\n+    ///     five.assume_init()\n+    /// };\n+    ///\n+    /// assert_eq!(*five, 5);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn try_new_uninit() -> Result<Box<mem::MaybeUninit<T>>, AllocError> {\n+        Box::try_new_uninit_in(Global)\n+    }\n+\n+    /// Constructs a new `Box` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes on the heap\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    /// let zero = Box::<u32>::try_new_zeroed()?;\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    ///\n+    /// [zeroed]: mem::MaybeUninit::zeroed\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn try_new_zeroed() -> Result<Box<mem::MaybeUninit<T>>, AllocError> {\n+        Box::try_new_zeroed_in(Global)\n+    }\n }\n \n impl<T, A: Allocator> Box<T, A> {\n@@ -380,7 +451,8 @@ impl<T, A: Allocator> Box<T, A> {\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory\n-    /// being filled with `0` bytes in the provided allocator.\n+    /// being filled with `0` bytes in the provided allocator,\n+    /// returning an error if the allocation fails,\n     ///\n     /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n     /// of this method."}, {"sha": "739ffd31f60b5bbb16f2b09ad92fc02b737993a4", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd2c6c318bfe3191e936f4500d60b5089db1ef60/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2c6c318bfe3191e936f4500d60b5089db1ef60/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=dd2c6c318bfe3191e936f4500d60b5089db1ef60", "patch": "@@ -346,6 +346,28 @@ impl<T> Rc<T> {\n         )\n     }\n \n+    /// Constructs a new `Rc<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn try_new(value: T) -> Result<Rc<T>, AllocError> {\n+        // There is an implicit weak pointer owned by all the strong\n+        // pointers, which ensures that the weak destructor never frees\n+        // the allocation while the strong destructor is running, even\n+        // if the weak pointer is stored inside the strong one.\n+        Ok(Self::from_inner(\n+            Box::leak(Box::try_new(RcBox { strong: Cell::new(1), weak: Cell::new(1), value })?)\n+                .into(),\n+        ))\n+    }\n+\n     /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n     /// to upgrade the weak reference before this function returns will result\n     /// in a `None` value. However, the weak reference may be cloned freely and"}]}