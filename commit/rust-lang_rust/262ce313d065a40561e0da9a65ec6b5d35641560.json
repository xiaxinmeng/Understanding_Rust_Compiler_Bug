{"sha": "262ce313d065a40561e0da9a65ec6b5d35641560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MmNlMzEzZDA2NWE0MDU2MWUwZGE5YTY1ZWM2YjVkMzU2NDE1NjA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-11T13:31:32Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-22T14:36:37Z"}, "message": "ci: add support for GitHub Actions in the CI scripts", "tree": {"sha": "3d125e9439e4a8368f40482380dd1d593cfa0c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d125e9439e4a8368f40482380dd1d593cfa0c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262ce313d065a40561e0da9a65ec6b5d35641560", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl3X8nUACgkQPgar6Auq\n8ZwjhBAAmYJW8ENjzqnWbOxxjDHGNOUtMckirHQrUe9A+PTLdRvfo6uvzG07WxjA\nv+iv61aswjt4nwwMeci8TYQQFM+8r/Ps3QjUOq18w4WwW7EVE4QmQw+Gck2Qo0ik\nBGLr9hu7wuON2C75/r0vvdxaWZIybhlS7+H1pdCoEFHcUkzFPoMtQhne6niAOQaj\nkuCwWankW+k07UuNQtRk4lu9BRJcRAe5nLVlEXXQN/nE/9hFBQdB71OGEobjxolo\n69OYcAx9CH5sUOrOUL0MQ6nV12TYE2CQ8CQY5EIpmxJDv7AP+AvWWiqRYaqO8jDy\ncLriSq60cSUQBN2dXuvJ1FU2370KeyOi/gxjsgAo7p3y8A34gH6AQPBxa0Rtw4zj\nb/xK7fJ9MTAiQdC/La2fhBEa2VtJ6w3dkLuHffwGTRqXmEuZ6IvTxDHreoTWsshG\nRdcYs+ceozp04cK7yORpPYozCZrOzLNI7hIR6grg72VuSS+CSElNyVcV2ikRWgiS\nMg8LoIsi2UJERxISBRV7KH6HOeTAJOm4r4XSTHJmF7sIwyeDZgMF2HM0midCGE94\n+7DAenGaavWiyVuVOhJjiSHXoGRwBUdpLcd6hZUTFYosRsvyRSq73udHlWh2T7lv\ntWIN3vP1DQVzXZydSeAwqjKzT4P0qais+DrGL1zgbjo0PgsKEHg=\n=kFtc\n-----END PGP SIGNATURE-----", "payload": "tree 3d125e9439e4a8368f40482380dd1d593cfa0c2a\nparent f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec\nauthor Pietro Albini <pietro@pietroalbini.org> 1573479092 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1574433397 +0100\n\nci: add support for GitHub Actions in the CI scripts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262ce313d065a40561e0da9a65ec6b5d35641560", "html_url": "https://github.com/rust-lang/rust/commit/262ce313d065a40561e0da9a65ec6b5d35641560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262ce313d065a40561e0da9a65ec6b5d35641560/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "html_url": "https://github.com/rust-lang/rust/commit/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec"}], "stats": {"total": 120, "additions": 73, "deletions": 47}, "files": [{"sha": "6f8a630874570324e26b750ec700d05122fca01b", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -262,13 +262,17 @@ pub enum CiEnv {\n     None,\n     /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n     AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n }\n \n impl CiEnv {\n     /// Obtains the current CI environment.\n     pub fn current() -> CiEnv {\n         if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AzurePipelines\n+        } else if env::var(\"GITHUB_ACTIONS\").ok().map_or(false, |e| &*e == \"true\") {\n+            CiEnv::GitHubActions\n         } else {\n             CiEnv::None\n         }"}, {"sha": "698aa5f2cf1ad792d6c7541a424cb78c76ca48e3", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -38,38 +38,26 @@ steps:\n   displayName: Show the current environment\n \n - bash: src/ci/scripts/install-sccache.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install sccache\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-clang.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install clang\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/switch-xcode.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Switch to Xcode 9.3\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-wix.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install wix\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-innosetup.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install InnoSetup\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/windows-symlink-build-dir.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Ensure the build happens on C:\\ instead of D:\\\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -78,35 +66,22 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2-packages.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2 packages\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-mingw.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install MinGW\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-ninja.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install ninja\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/enable-docker-ipv6.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Enable IPv6 on Docker\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -120,22 +95,16 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/checkout-submodules.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Checkout submodules\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/verify-line-endings.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Verify line endings\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n # images, etc.\n - bash: src/ci/scripts/install-awscli.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Install awscli\n "}, {"sha": "f29f9f3bf1c453dcb098ca16f65b37d640b474cc", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -172,6 +172,8 @@ docker \\\n   --env CI \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n+  --env GITHUB_ACTIONS \\\n+  --env GITHUB_REF \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n   --env TOOLSTATE_PUBLISH \\"}, {"sha": "ae5b22493ab07efd593aa3eb1bfc15d489c8f935", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -23,9 +23,7 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-branch_name=$(getCIBranch)\n-\n-if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ] || [ \"$branch_name\" = \"try\" ]; then\n+if [ ! isCI ] || isCiBranch auto || isCiBranch beta; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}, {"sha": "98373df7fce50d92a0249cd506e795a02523416b", "filename": "src/ci/scripts/install-mingw.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -52,7 +52,7 @@ if isWindows; then\n     if [[ \"${CUSTOM_MINGW-0}\" -ne 1 ]]; then\n         pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n             mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${bits}/bin\"\n+        ciCommandAddPath \"$(ciCheckoutPath)/msys2/mingw${bits}/bin\"\n     else\n         mingw_dir=\"mingw${bits}\"\n "}, {"sha": "c9fafc7fe6b41b5bc624a4b2818878753b100930", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -12,8 +12,8 @@ IFS=$'\\n\\t'\n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n if isWindows; then\n-    choco install msys2 --params=\"/InstallDir:${SYSTEM_WORKFOLDER}/msys2 /NoPath\" -y --no-progress\n-    mkdir -p \"${SYSTEM_WORKFOLDER}/msys2/home/${USERNAME}\"\n+    choco install msys2 --params=\"/InstallDir:$(ciCheckoutPath)/msys2 /NoPath\" -y --no-progress\n+    mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\"\n \n-    ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/usr/bin\"\n+    ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\"\n fi"}, {"sha": "98120f5dff95dafb63b62f2a8ac64221b88b73bb", "filename": "src/ci/shared.sh", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/262ce313d065a40561e0da9a65ec6b5d35641560/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=262ce313d065a40561e0da9a65ec6b5d35641560", "patch": "@@ -27,27 +27,66 @@ function retry {\n }\n \n function isCI {\n-  [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+    [[ \"${CI-false}\" = \"true\" ]] || isAzurePipelines || isGitHubActions\n+}\n+\n+function isAzurePipelines {\n+    [[ \"${TF_BUILD-False}\" = \"True\" ]]\n+}\n+\n+function isGitHubActions {\n+    [[ \"${GITHUB_ACTIONS-false}\" = \"true\" ]]\n }\n \n function isMacOS {\n-  [ \"$AGENT_OS\" = \"Darwin\" ]\n+    [[ \"${OSTYPE}\" = \"darwin\"* ]]\n }\n \n function isWindows {\n-  [ \"$AGENT_OS\" = \"Windows_NT\" ]\n+    [[ \"${OSTYPE}\" = \"cygwin\" ]] || [[ \"${OSTYPE}\" = \"msys\" ]]\n }\n \n function isLinux {\n-  [ \"$AGENT_OS\" = \"Linux\" ]\n+    [[ \"${OSTYPE}\" = \"linux-gnu\" ]]\n }\n \n-function getCIBranch {\n-  echo \"$BUILD_SOURCEBRANCHNAME\"\n+function isCiBranch {\n+    if [[ $# -ne 1 ]]; then\n+        echo \"usage: $0 <branch-name>\"\n+        exit 1\n+    fi\n+    name=\"$1\"\n+\n+    if isAzurePipelines; then\n+        [[ \"${BUILD_SOURCEBRANCHNAME}\" = \"${name}\" ]]\n+    elif isGitHubActions; then\n+        [[ \"${GITHUB_REF}\" = \"refs/heads/${name}\" ]]\n+    else\n+        echo \"isCiBranch only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommit {\n-  echo \"${BUILD_SOURCEVERSION}\"\n+    if isAzurePipelines; then\n+        echo \"${BUILD_SOURCEVERSION}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_SHA}\"\n+    else\n+        echo \"ciCommit only works inside CI!\"\n+        exit 1\n+    fi\n+}\n+\n+function ciCheckoutPath {\n+    if isAzurePipelines; then\n+        echo \"${SYSTEM_WORKFOLDER}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_WORKSPACE}\"\n+    else\n+        echo \"ciCheckoutPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandAddPath {\n@@ -57,7 +96,14 @@ function ciCommandAddPath {\n     fi\n     path=\"$1\"\n \n-    echo \"##vso[task.prependpath]${path}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.prependpath]${path}\"\n+    elif isGitHubActions; then\n+        echo \"::add-path::${value}\"\n+    else\n+        echo \"ciCommandAddPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandSetEnv {\n@@ -68,5 +114,12 @@ function ciCommandSetEnv {\n     name=\"$1\"\n     value=\"$2\"\n \n-    echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    elif isGitHubActions; then\n+        echo \"::set-env name=${name}::${value}\"\n+    else\n+        echo \"ciCommandSetEnv only works inside CI!\"\n+        exit 1\n+    fi\n }"}]}