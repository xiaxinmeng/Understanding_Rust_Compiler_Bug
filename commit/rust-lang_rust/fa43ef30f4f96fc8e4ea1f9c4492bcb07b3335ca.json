{"sha": "fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDNlZjMwZjRmOTZmYzhlNGVhMWY5YzQ0OTJiY2IwN2IzMzM1Y2E=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-19T00:02:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Change parsing of struct field patterns", "tree": {"sha": "b1c3d3d2e543e8e77c13760119ee7f446e1a858a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c3d3d2e543e8e77c13760119ee7f446e1a858a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "html_url": "https://github.com/rust-lang/rust/commit/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcbfa2cc1146dfa23acb3e61f7ec053733a8fac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcbfa2cc1146dfa23acb3e61f7ec053733a8fac1", "html_url": "https://github.com/rust-lang/rust/commit/bcbfa2cc1146dfa23acb3e61f7ec053733a8fac1"}], "stats": {"total": 86, "additions": 46, "deletions": 40}, "files": [{"sha": "51dae8e25b54af72cb406392c78eda18dae627b1", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "patch": "@@ -854,25 +854,25 @@ impl ExprCollector {\n             ast::PatKind::PlaceholderPat(_) => Pat::Wild,\n             ast::PatKind::StructPat(p) => {\n                 let path = p.path().and_then(Path::from_ast);\n-                let fields = p\n+                let field_pat_list = p\n                     .field_pat_list()\n-                    .expect(\"every struct should have a field list\")\n-                    .pats()\n-                    .map(|f| {\n-                        let ast_pat = f.pat().expect(\"field pat always contains a pattern\");\n+                    .expect(\"every struct should have a field list\");\n+                let mut fields: Vec<_> = field_pat_list\n+                    .bind_pats()\n+                    .map(|bind_pat| {\n+                        let ast_pat = ast::Pat::cast(bind_pat.syntax()).expect(\"bind pat is a pat\");\n                         let pat = self.collect_pat(ast_pat);\n-                        let name = f\n-                            .name()\n-                            .unwrap_or_else(|| {\n-                                ast::BindPat::cast(ast_pat.syntax())\n-                                    .expect(\"field pat without label is a bind pat\")\n-                                    .name()\n-                                    .expect(\"bind pat has a name\")\n-                            })\n-                            .as_name();\n+                        let name = bind_pat.name().expect(\"bind pat has a name\").as_name();\n                         FieldPat { name, pat }\n                     })\n                     .collect();\n+                let iter = field_pat_list.field_pats().map(|f| {\n+                    let ast_pat = f.pat().expect(\"field pat always contains a pattern\");\n+                    let pat = self.collect_pat(ast_pat);\n+                    let name = f.name().expect(\"field pats always have a name\").as_name();\n+                    FieldPat { name, pat }\n+                });\n+                fields.extend(iter);\n \n                 Pat::Struct {\n                     path: path,"}, {"sha": "271040bf42d9f2cd18d63d4c1425dfa914f6f50c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "patch": "@@ -910,7 +910,11 @@ impl AstNode for FieldPatList {\n \n \n impl FieldPatList {\n-    pub fn pats(&self) -> impl Iterator<Item = &FieldPat> {\n+    pub fn field_pats(&self) -> impl Iterator<Item = &FieldPat> {\n+        super::children(self)\n+    }\n+\n+    pub fn bind_pats(&self) -> impl Iterator<Item = &BindPat> {\n         super::children(self)\n     }\n }"}, {"sha": "fc47c36d33a8c43542229846e6eb63170ae762b9", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "patch": "@@ -496,7 +496,12 @@ Grammar(\n         \"PlaceholderPat\": (),\n         \"PathPat\": ( options: [ \"Path\" ] ),\n         \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n-        \"FieldPatList\": ( collections: [[\"pats\", \"FieldPat\"]] ),\n+        \"FieldPatList\": (\n+            collections: [\n+                [\"field_pats\", \"FieldPat\"],\n+                [\"bind_pats\", \"BindPat\"],\n+            ]\n+        ),\n         \"FieldPat\": (\n             traits: [\"NameOwner\"],\n             options: [\"Pat\"]"}, {"sha": "1ac5efdf6ea63a4b1eb8ab2a394135a68e16a45b", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "patch": "@@ -128,7 +128,11 @@ fn field_pat_list(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n             DOTDOT => p.bump(),\n-            _ => field_pat(p),\n+            IDENT if p.nth(1) == COLON => field_pat(p),\n+            L_CURLY => error_block(p, \"expected ident\"),\n+            _ => {\n+                bind_pat(p, false);\n+            }\n         }\n         if !p.at(R_CURLY) {\n             p.expect(COMMA);\n@@ -139,18 +143,13 @@ fn field_pat_list(p: &mut Parser) {\n }\n \n fn field_pat(p: &mut Parser) {\n+    assert!(p.at(IDENT));\n+    assert!(p.nth(1) == COLON);\n+\n     let m = p.start();\n-    match p.current() {\n-        IDENT if p.nth(1) == COLON => {\n-            name(p);\n-            p.bump();\n-            pattern(p);\n-        }\n-        L_CURLY => error_block(p, \"expected ident\"),\n-        _ => {\n-            bind_pat(p, false);\n-        }\n-    }\n+    name(p);\n+    p.bump();\n+    pattern(p);\n     m.complete(p, FIELD_PAT);\n }\n "}, {"sha": "3f7bb10d2f2eb061bb21c8a8a6b54101e657c064", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0102_field_pat_list.txt", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0102_field_pat_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0102_field_pat_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0102_field_pat_list.txt?ref=fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "patch": "@@ -43,20 +43,18 @@ SOURCE_FILE@[0; 119)\n           FIELD_PAT_LIST@[40; 56)\n             L_CURLY@[40; 41)\n             WHITESPACE@[41; 42)\n-            FIELD_PAT@[42; 43)\n-              BIND_PAT@[42; 43)\n-                NAME@[42; 43)\n-                  IDENT@[42; 43) \"f\"\n+            BIND_PAT@[42; 43)\n+              NAME@[42; 43)\n+                IDENT@[42; 43) \"f\"\n             COMMA@[43; 44)\n             WHITESPACE@[44; 45)\n-            FIELD_PAT@[45; 54)\n-              BIND_PAT@[45; 54)\n-                REF_KW@[45; 48)\n-                WHITESPACE@[48; 49)\n-                MUT_KW@[49; 52)\n-                WHITESPACE@[52; 53)\n-                NAME@[53; 54)\n-                  IDENT@[53; 54) \"g\"\n+            BIND_PAT@[45; 54)\n+              REF_KW@[45; 48)\n+              WHITESPACE@[48; 49)\n+              MUT_KW@[49; 52)\n+              WHITESPACE@[52; 53)\n+              NAME@[53; 54)\n+                IDENT@[53; 54) \"g\"\n             WHITESPACE@[54; 55)\n             R_CURLY@[55; 56)\n         WHITESPACE@[56; 57)"}]}