{"sha": "ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNmVlNWY0ZTVmNzc5ZDk4N2FjN2EzNWNlNmYxNDkwMzlhNDViMTU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T06:52:11Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T07:29:19Z"}, "message": "Use four-space indentation, add trailing commas, and remove unnecessary uses of the return keyword", "tree": {"sha": "e2925b4ee751e51a7cf106641cb9da7565676ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2925b4ee751e51a7cf106641cb9da7565676ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "html_url": "https://github.com/rust-lang/rust/commit/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ea6d6957697ac6ced355e8a1db5ab6be439765", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ea6d6957697ac6ced355e8a1db5ab6be439765", "html_url": "https://github.com/rust-lang/rust/commit/60ea6d6957697ac6ced355e8a1db5ab6be439765"}], "stats": {"total": 175, "additions": 95, "deletions": 80}, "files": [{"sha": "f89bb3b2f90646c993d6e40ce9fb690d7c873a4a", "filename": "src/libcore/either.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "patch": "@@ -35,8 +35,8 @@ pub enum Either<T, U> {\n pub fn either<T, U, V>(f_left: &fn(&T) -> V,\n                        f_right: &fn(&U) -> V, value: &Either<T, U>) -> V {\n     match *value {\n-      Left(ref l) => f_left(l),\n-      Right(ref r) => f_right(r)\n+        Left(ref l) => f_left(l),\n+        Right(ref r) => f_right(r)\n     }\n }\n \n@@ -73,8 +73,8 @@ pub fn partition<T, U>(eithers: ~[Either<T, U>]) -> (~[T], ~[U]) {\n     let mut rights: ~[U] = ~[];\n     do vec::consume(eithers) |_i, elt| {\n         match elt {\n-          Left(l) => lefts.push(l),\n-          Right(r) => rights.push(r)\n+            Left(l) => lefts.push(l),\n+            Right(r) => rights.push(r)\n         }\n     }\n     return (lefts, rights);\n@@ -84,8 +84,8 @@ pub fn partition<T, U>(eithers: ~[Either<T, U>]) -> (~[T], ~[U]) {\n #[inline(always)]\n pub fn flip<T, U>(eith: Either<T, U>) -> Either<U, T> {\n     match eith {\n-      Right(r) => Left(r),\n-      Left(l) => Right(l)\n+        Right(r) => Left(r),\n+        Left(l) => Right(l)\n     }\n }\n \n@@ -96,21 +96,27 @@ pub fn flip<T, U>(eith: Either<T, U>) -> Either<U, T> {\n #[inline(always)]\n pub fn to_result<T, U>(eith: Either<T, U>) -> Result<U, T> {\n     match eith {\n-      Right(r) => result::Ok(r),\n-      Left(l) => result::Err(l)\n+        Right(r) => result::Ok(r),\n+        Left(l) => result::Err(l)\n     }\n }\n \n /// Checks whether the given value is a left\n #[inline(always)]\n pub fn is_left<T, U>(eith: &Either<T, U>) -> bool {\n-    match *eith { Left(_) => true, _ => false }\n+    match *eith {\n+        Left(_) => true,\n+        _ => false\n+    }\n }\n \n /// Checks whether the given value is a right\n #[inline(always)]\n pub fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n-    match *eith { Right(_) => true, _ => false }\n+    match *eith {\n+        Right(_) => true,\n+        _ => false\n+    }\n }\n \n /// Retrieves the value in the left branch. Fails if the either is Right."}, {"sha": "0212d4abd29d6955b0a67e9c0bcf64ff2684d24f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "patch": "@@ -89,11 +89,11 @@ impl<T:Ord> Ord for Option<T> {\n     }\n \n     fn ge(&self, other: &Option<T>) -> bool {\n-        ! (self < other)\n+        !(self < other)\n     }\n \n     fn gt(&self, other: &Option<T>) -> bool {\n-        ! (self <= other)\n+        !(self <= other)\n     }\n }\n "}, {"sha": "8a5d9c0416d07d4f4ff060885f284425ecccbe7f", "filename": "src/libcore/path.rs", "status": "modified", "additions": 77, "deletions": 68, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6ee5f4e5f779d987ac7a35ce6f149039a45b15/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=ad6ee5f4e5f779d987ac7a35ce6f149039a45b15", "patch": "@@ -452,8 +452,10 @@ impl GenericPath for PosixPath {\n             components.push(s.to_owned())\n         }\n         let is_absolute = (s.len() != 0 && s[0] == '/' as u8);\n-        return PosixPath { is_absolute: is_absolute,\n-                           components: components }\n+        PosixPath {\n+            is_absolute: is_absolute,\n+            components: components,\n+        }\n     }\n \n     fn dirname(&self) -> ~str {\n@@ -466,40 +468,40 @@ impl GenericPath for PosixPath {\n \n     fn filename(&self) -> Option<~str> {\n         match self.components.len() {\n-          0 => None,\n-          n => Some(copy self.components[n - 1])\n+            0 => None,\n+            n => Some(copy self.components[n - 1]),\n         }\n     }\n \n     fn filestem(&self) -> Option<~str> {\n         match self.filename() {\n-          None => None,\n-          Some(ref f) => {\n-            match str::rfind_char(*f, '.') {\n-              Some(p) => Some(f.slice(0, p).to_owned()),\n-              None => Some(copy *f)\n+            None => None,\n+            Some(ref f) => {\n+                match str::rfind_char(*f, '.') {\n+                    Some(p) => Some(f.slice(0, p).to_owned()),\n+                    None => Some(copy *f),\n+                }\n             }\n-          }\n         }\n     }\n \n     fn filetype(&self) -> Option<~str> {\n         match self.filename() {\n-          None => None,\n-          Some(ref f) => {\n-            match str::rfind_char(*f, '.') {\n-              Some(p) if p < f.len() => Some(f.slice(p, f.len()).to_owned()),\n-              _ => None\n+            None => None,\n+            Some(ref f) => {\n+                match str::rfind_char(*f, '.') {\n+                    Some(p) if p < f.len() => Some(f.slice(p, f.len()).to_owned()),\n+                    _ => None,\n+                }\n             }\n-          }\n         }\n     }\n \n     fn with_dirname(&self, d: &str) -> PosixPath {\n         let dpath = PosixPath(d);\n         match self.filename() {\n-          Some(ref f) => dpath.push(*f),\n-          None => dpath\n+            Some(ref f) => dpath.push(*f),\n+            None => dpath,\n         }\n     }\n \n@@ -510,8 +512,8 @@ impl GenericPath for PosixPath {\n \n     fn with_filestem(&self, s: &str) -> PosixPath {\n         match self.filetype() {\n-          None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n+            None => self.with_filename(s),\n+            Some(ref t) => self.with_filename(str::to_owned(s) + *t),\n         }\n     }\n \n@@ -536,8 +538,10 @@ impl GenericPath for PosixPath {\n           None => ~[],\n           Some(ref f) => ~[copy *f]\n         };\n-        return PosixPath { is_absolute: false,\n-                           components: cs }\n+        PosixPath {\n+            is_absolute: false,\n+            components: cs,\n+        }\n     }\n \n     fn push_rel(&self, other: &PosixPath) -> PosixPath {\n@@ -547,8 +551,10 @@ impl GenericPath for PosixPath {\n \n     fn unsafe_join(&self, other: &PosixPath) -> PosixPath {\n         if other.is_absolute {\n-            PosixPath { is_absolute: true,\n-                        components: copy other.components }\n+            PosixPath {\n+                is_absolute: true,\n+                components: copy other.components,\n+            }\n         } else {\n             self.push_rel(other)\n         }\n@@ -567,8 +573,10 @@ impl GenericPath for PosixPath {\n             }\n             v.push_all_move(ss);\n         }\n-        PosixPath { is_absolute: self.is_absolute,\n-                    components: v }\n+        PosixPath {\n+            is_absolute: self.is_absolute,\n+            components: v,\n+        }\n     }\n \n     fn push(&self, s: &str) -> PosixPath {\n@@ -586,19 +594,17 @@ impl GenericPath for PosixPath {\n         if cs.len() != 0 {\n             cs.pop();\n         }\n-        return PosixPath {\n+        PosixPath {\n             is_absolute: self.is_absolute,\n-            components: cs\n-        }\n-                          //..self }\n+            components: cs,\n+        } //..self }\n     }\n \n     fn normalize(&self) -> PosixPath {\n-        return PosixPath {\n+        PosixPath {\n             is_absolute: self.is_absolute,\n-            components: normalize(self.components)\n-          //  ..self\n-        }\n+            components: normalize(self.components),\n+        } // ..self }\n     }\n \n     fn is_absolute(&self) -> bool {\n@@ -658,10 +664,12 @@ impl GenericPath for WindowsPath {\n             components.push(s.to_owned())\n         }\n         let is_absolute = (rest.len() != 0 && windows::is_sep(rest[0]));\n-        return WindowsPath { host: host,\n-                             device: device,\n-                             is_absolute: is_absolute,\n-                             components: components }\n+        WindowsPath {\n+            host: host,\n+            device: device,\n+            is_absolute: is_absolute,\n+            components: components,\n+        }\n     }\n \n     fn dirname(&self) -> ~str {\n@@ -674,20 +682,20 @@ impl GenericPath for WindowsPath {\n \n     fn filename(&self) -> Option<~str> {\n         match self.components.len() {\n-          0 => None,\n-          n => Some(copy self.components[n - 1])\n+            0 => None,\n+            n => Some(copy self.components[n - 1]),\n         }\n     }\n \n     fn filestem(&self) -> Option<~str> {\n         match self.filename() {\n-          None => None,\n-          Some(ref f) => {\n-            match str::rfind_char(*f, '.') {\n-              Some(p) => Some(f.slice(0, p).to_owned()),\n-              None => Some(copy *f)\n+            None => None,\n+            Some(ref f) => {\n+                match str::rfind_char(*f, '.') {\n+                    Some(p) => Some(f.slice(0, p).to_owned()),\n+                    None => Some(copy *f),\n+                }\n             }\n-          }\n         }\n     }\n \n@@ -696,8 +704,8 @@ impl GenericPath for WindowsPath {\n           None => None,\n           Some(ref f) => {\n             match str::rfind_char(*f, '.') {\n-              Some(p) if p < f.len() => Some(f.slice(p, f.len()).to_owned()),\n-              _ => None\n+                Some(p) if p < f.len() => Some(f.slice(p, f.len()).to_owned()),\n+                _ => None,\n             }\n           }\n         }\n@@ -706,8 +714,8 @@ impl GenericPath for WindowsPath {\n     fn with_dirname(&self, d: &str) -> WindowsPath {\n         let dpath = WindowsPath(d);\n         match self.filename() {\n-          Some(ref f) => dpath.push(*f),\n-          None => dpath\n+            Some(ref f) => dpath.push(*f),\n+            None => dpath,\n         }\n     }\n \n@@ -718,8 +726,8 @@ impl GenericPath for WindowsPath {\n \n     fn with_filestem(&self, s: &str) -> WindowsPath {\n         match self.filetype() {\n-          None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n+            None => self.with_filename(s),\n+            Some(ref t) => self.with_filename(str::to_owned(s) + *t),\n         }\n     }\n \n@@ -740,14 +748,15 @@ impl GenericPath for WindowsPath {\n     }\n \n     fn file_path(&self) -> WindowsPath {\n-        let cs = match self.filename() {\n-          None => ~[],\n-          Some(ref f) => ~[copy *f]\n-        };\n-        return WindowsPath { host: None,\n-                             device: None,\n-                             is_absolute: false,\n-                             components: cs }\n+        WindowsPath {\n+            host: None,\n+            device: None,\n+            is_absolute: false,\n+            components: match self.filename() {\n+                None => ~[],\n+                Some(ref f) => ~[copy *f],\n+            }\n+        }\n     }\n \n     fn push_rel(&self, other: &WindowsPath) -> WindowsPath {\n@@ -768,7 +777,7 @@ impl GenericPath for WindowsPath {\n                     host: Some(host),\n                     device: copy other.device,\n                     is_absolute: true,\n-                    components: copy other.components\n+                    components: copy other.components,\n                 };\n             }\n             _ => {}\n@@ -781,7 +790,7 @@ impl GenericPath for WindowsPath {\n                     host: None,\n                     device: Some(device),\n                     is_absolute: true,\n-                    components: copy other.components\n+                    components: copy other.components,\n                 };\n             }\n             _ => {}\n@@ -793,7 +802,7 @@ impl GenericPath for WindowsPath {\n             host: copy self.host,\n             device: copy self.device,\n             is_absolute: self.is_absolute || other.is_absolute,\n-            components: copy other.components\n+            components: copy other.components,\n         }\n     }\n \n@@ -822,7 +831,7 @@ impl GenericPath for WindowsPath {\n             v.push_all_move(ss);\n         }\n         // tedious, but as-is, we can't use ..self\n-        return WindowsPath {\n+        WindowsPath {\n             host: copy self.host,\n             device: copy self.device,\n             is_absolute: self.is_absolute,\n@@ -837,24 +846,24 @@ impl GenericPath for WindowsPath {\n             ss.push(s.to_owned())\n         }\n         v.push_all_move(ss);\n-        return WindowsPath { components: v, ..copy *self }\n+        WindowsPath { components: v, ..copy *self }\n     }\n \n     fn pop(&self) -> WindowsPath {\n         let mut cs = copy self.components;\n         if cs.len() != 0 {\n             cs.pop();\n         }\n-        return WindowsPath {\n+        WindowsPath {\n             host: copy self.host,\n             device: copy self.device,\n             is_absolute: self.is_absolute,\n-            components: cs\n+            components: cs,\n         }\n     }\n \n     fn normalize(&self) -> WindowsPath {\n-        return WindowsPath {\n+        WindowsPath {\n             host: copy self.host,\n             device: match self.device {\n                 None => None,"}]}