{"sha": "51b7f2739b4fcf1c40335b59a15b1105df27f743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjdmMjczOWI0ZmNmMWM0MDMzNWI1OWExNWIxMTA1ZGYyN2Y3NDM=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-20T16:16:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Generalized IntPredicate in the BuilderMethods trait", "tree": {"sha": "50456f2bb3f7972354e99b52f66bb3ceca717585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50456f2bb3f7972354e99b52f66bb3ceca717585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b7f2739b4fcf1c40335b59a15b1105df27f743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b7f2739b4fcf1c40335b59a15b1105df27f743", "html_url": "https://github.com/rust-lang/rust/commit/51b7f2739b4fcf1c40335b59a15b1105df27f743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b7f2739b4fcf1c40335b59a15b1105df27f743/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14798d69374845a8107c482470e2242fc2476734", "url": "https://api.github.com/repos/rust-lang/rust/commits/14798d69374845a8107c482470e2242fc2476734", "html_url": "https://github.com/rust-lang/rust/commit/14798d69374845a8107c482470e2242fc2476734"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "31884e0748bfcbb1aab998e023c2f8eaaf2ae475", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -75,7 +75,7 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use traits::BuilderMethods;\n+use traits::{IntPredicate, BuilderMethods};\n use llvm::BasicBlock;\n \n use std::any::Any;\n@@ -127,14 +127,14 @@ impl Drop for StatRecorder<'a, 'll, 'tcx> {\n \n pub fn bin_op_to_icmp_predicate(op: hir::BinOpKind,\n                                 signed: bool)\n-                                -> llvm::IntPredicate {\n+                                -> IntPredicate {\n     match op {\n-        hir::BinOpKind::Eq => llvm::IntEQ,\n-        hir::BinOpKind::Ne => llvm::IntNE,\n-        hir::BinOpKind::Lt => if signed { llvm::IntSLT } else { llvm::IntULT },\n-        hir::BinOpKind::Le => if signed { llvm::IntSLE } else { llvm::IntULE },\n-        hir::BinOpKind::Gt => if signed { llvm::IntSGT } else { llvm::IntUGT },\n-        hir::BinOpKind::Ge => if signed { llvm::IntSGE } else { llvm::IntUGE },\n+        hir::BinOpKind::Eq => IntPredicate::IntEQ,\n+        hir::BinOpKind::Ne => IntPredicate::IntNE,\n+        hir::BinOpKind::Lt => if signed { IntPredicate::IntSLT } else { IntPredicate::IntULT },\n+        hir::BinOpKind::Le => if signed { IntPredicate::IntSLE } else { IntPredicate::IntULE },\n+        hir::BinOpKind::Gt => if signed { IntPredicate::IntSGT } else { IntPredicate::IntUGT },\n+        hir::BinOpKind::Ge => if signed { IntPredicate::IntSGE } else { IntPredicate::IntUGE },\n         op => {\n             bug!(\"comparison_op_to_icmp_predicate: expected comparison operator, \\\n                   found {:?}\","}, {"sha": "640067fd6a38b98704ecfdbe748b272cb1f06d6b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{IntPredicate, RealPredicate, False, OperandBundleDef};\n+use llvm::{RealPredicate, False, OperandBundleDef};\n use llvm::{self, BasicBlock};\n use common::*;\n use type_::Type;\n@@ -19,7 +19,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::{config, Session};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use traits::BuilderMethods;\n+use traits::{self, BuilderMethods};\n \n use std::borrow::Cow;\n use std::ops::Range;\n@@ -689,8 +689,9 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n     }\n \n     /* Comparisons */\n-    fn icmp(&self, op: IntPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+    fn icmp(&self, op: traits::IntPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"icmp\");\n+        let op : llvm::IntPredicate = traits::IntPredicateMethods::convert_to_backend_specific(op);\n         unsafe {\n             llvm::LLVMBuildICmp(self.llbuilder, op as c_uint, lhs, rhs, noname())\n         }\n@@ -1048,8 +1049,9 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n         src: &'ll Value,\n         order: AtomicOrdering,\n         failure_order: AtomicOrdering,\n-        weak: llvm::Bool,\n+        weak: bool,\n     ) -> &'ll Value {\n+        let weak = if weak { llvm::True } else { llvm::False };\n         unsafe {\n             llvm::LLVMRustBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n                                              order, failure_order, weak)"}, {"sha": "5a19fd9aa99ecd51be7124865d8e224fb84df0d7", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -16,12 +16,11 @@ use std;\n \n use builder::Builder;\n use common::*;\n-use llvm;\n use meth;\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use value::Value;\n-use traits::BuilderMethods;\n+use traits::{IntPredicate,BuilderMethods};\n \n pub fn size_and_align_of_dst(\n     bx: &Builder<'_, 'll, 'tcx>,\n@@ -100,7 +99,7 @@ pub fn size_and_align_of_dst(\n                     // pick the correct alignment statically.\n                     C_usize(cx, std::cmp::max(sized_align, unsized_align) as u64)\n                 }\n-                _ => bx.select(bx.icmp(llvm::IntUGT, sized_align, unsized_align),\n+                _ => bx.select(bx.icmp(IntPredicate::IntUGT, sized_align, unsized_align),\n                                sized_align,\n                                unsized_align)\n             };"}, {"sha": "9f43a95c446d03c0d74df51933afb58d434e335f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -478,7 +478,7 @@ pub fn codegen_intrinsic_call(\n                 \"cxchg\" | \"cxchgweak\" => {\n                     let ty = substs.type_at(0);\n                     if int_type_width_signed(ty, cx).is_some() {\n-                        let weak = if split[1] == \"cxchgweak\" { llvm::True } else { llvm::False };\n+                        let weak = split[1] == \"cxchgweak\";\n                         let pair = bx.atomic_cmpxchg(\n                             args[0].immediate(),\n                             args[1].immediate(),"}, {"sha": "9c0ffd2b7acbfb5158754c20d2ad1751cd29f20e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -19,6 +19,7 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n+use traits;\n \n use super::RustString;\n \n@@ -141,6 +142,23 @@ pub enum IntPredicate {\n     IntSLE = 41,\n }\n \n+impl traits::IntPredicateMethods for IntPredicate {\n+    fn convert_to_backend_specific(intpre: traits::IntPredicate) -> Self {\n+        match intpre {\n+            traits::IntPredicate::IntEQ => IntPredicate::IntEQ,\n+            traits::IntPredicate::IntNE => IntPredicate::IntNE,\n+            traits::IntPredicate::IntUGT => IntPredicate::IntUGT,\n+            traits::IntPredicate::IntUGE => IntPredicate::IntUGE,\n+            traits::IntPredicate::IntULT => IntPredicate::IntULT,\n+            traits::IntPredicate::IntULE => IntPredicate::IntULE,\n+            traits::IntPredicate::IntSGT => IntPredicate::IntSGT,\n+            traits::IntPredicate::IntSGE => IntPredicate::IntSGE,\n+            traits::IntPredicate::IntSLT => IntPredicate::IntSLT,\n+            traits::IntPredicate::IntSLE => IntPredicate::IntSLE,\n+        }\n+    }\n+}\n+\n /// LLVMRealPredicate\n #[derive(Copy, Clone)]\n #[repr(C)]"}, {"sha": "22be854659efc8544a21bacc6c99b8ddf671e963", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -26,7 +26,7 @@ use type_of::LayoutLlvmExt;\n use type_::Type;\n use value::Value;\n \n-use traits::BuilderMethods;\n+use traits::{IntPredicate,BuilderMethods};\n \n use syntax::symbol::Symbol;\n use syntax_pos::Pos;\n@@ -210,7 +210,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                     } else {\n                         let switch_llty = bx.cx.layout_of(switch_ty).immediate_llvm_type(bx.cx);\n                         let llval = C_uint_big(switch_llty, values[0]);\n-                        let cmp = bx.icmp(llvm::IntEQ, discr.immediate(), llval);\n+                        let cmp = bx.icmp(IntPredicate::IntEQ, discr.immediate(), llval);\n                         bx.cond_br(cmp, lltrue, llfalse);\n                     }\n                 } else {"}, {"sha": "66129783549e46f70e0c19fcf748fed91d6bfc58", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -23,7 +23,7 @@ use value::Value;\n use glue;\n use mir::constant::const_alloc_to_llvm;\n \n-use traits::BuilderMethods;\n+use traits::{IntPredicate,BuilderMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n@@ -332,15 +332,15 @@ impl PlaceRef<'tcx, &'ll Value> {\n                     } else {\n                         C_uint_big(niche_llty, niche_start)\n                     };\n-                    bx.select(bx.icmp(llvm::IntEQ, lldiscr, niche_llval),\n+                    bx.select(bx.icmp(IntPredicate::IntEQ, lldiscr, niche_llval),\n                         C_uint(cast_to, niche_variants.start().as_u32() as u64),\n                         C_uint(cast_to, dataful_variant.as_u32() as u64))\n                 } else {\n                     // Rebase from niche values to discriminant values.\n                     let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n                     let lldiscr = bx.sub(lldiscr, C_uint_big(niche_llty, delta));\n                     let lldiscr_max = C_uint(niche_llty, niche_variants.end().as_u32() as u64);\n-                    bx.select(bx.icmp(llvm::IntULE, lldiscr, lldiscr_max),\n+                    bx.select(bx.icmp(IntPredicate::IntULE, lldiscr, lldiscr_max),\n                         bx.intcast(lldiscr, cast_to, false),\n                         C_uint(cast_to, dataful_variant.as_u32() as u64))\n                 }"}, {"sha": "35e0fd396eee6ad6db13a858582afb9c82cfd6f5", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -28,7 +28,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use traits::BuilderMethods;\n+use traits::{IntPredicate,BuilderMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n@@ -135,7 +135,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                 bx.br(header_bx.llbb());\n                 let current = header_bx.phi(common::val_ty(start), &[start], &[bx.llbb()]);\n \n-                let keep_going = header_bx.icmp(llvm::IntNE, current, end);\n+                let keep_going = header_bx.icmp(IntPredicate::IntNE, current, end);\n                 header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n \n                 cg_elem.val.store(&body_bx,\n@@ -337,7 +337,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                                     // convenient place to put the `assume`.\n \n                                     base::call_assume(&bx, bx.icmp(\n-                                        llvm::IntULE,\n+                                        IntPredicate::IntULE,\n                                         llval,\n                                         C_uint_big(ll_t_in, *scalar.valid_range.end())\n                                     ));\n@@ -639,31 +639,31 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n         match op {\n             mir::BinOp::Eq => {\n                 bx.and(\n-                    bx.icmp(llvm::IntEQ, lhs_addr, rhs_addr),\n-                    bx.icmp(llvm::IntEQ, lhs_extra, rhs_extra)\n+                    bx.icmp(IntPredicate::IntEQ, lhs_addr, rhs_addr),\n+                    bx.icmp(IntPredicate::IntEQ, lhs_extra, rhs_extra)\n                 )\n             }\n             mir::BinOp::Ne => {\n                 bx.or(\n-                    bx.icmp(llvm::IntNE, lhs_addr, rhs_addr),\n-                    bx.icmp(llvm::IntNE, lhs_extra, rhs_extra)\n+                    bx.icmp(IntPredicate::IntNE, lhs_addr, rhs_addr),\n+                    bx.icmp(IntPredicate::IntNE, lhs_extra, rhs_extra)\n                 )\n             }\n             mir::BinOp::Le | mir::BinOp::Lt |\n             mir::BinOp::Ge | mir::BinOp::Gt => {\n                 // a OP b ~ a.0 STRICT(OP) b.0 | (a.0 == b.0 && a.1 OP a.1)\n                 let (op, strict_op) = match op {\n-                    mir::BinOp::Lt => (llvm::IntULT, llvm::IntULT),\n-                    mir::BinOp::Le => (llvm::IntULE, llvm::IntULT),\n-                    mir::BinOp::Gt => (llvm::IntUGT, llvm::IntUGT),\n-                    mir::BinOp::Ge => (llvm::IntUGE, llvm::IntUGT),\n+                    mir::BinOp::Lt => (IntPredicate::IntULT, IntPredicate::IntULT),\n+                    mir::BinOp::Le => (IntPredicate::IntULE, IntPredicate::IntULT),\n+                    mir::BinOp::Gt => (IntPredicate::IntUGT, IntPredicate::IntUGT),\n+                    mir::BinOp::Ge => (IntPredicate::IntUGE, IntPredicate::IntUGT),\n                     _ => bug!(),\n                 };\n \n                 bx.or(\n                     bx.icmp(strict_op, lhs_addr, rhs_addr),\n                     bx.and(\n-                        bx.icmp(llvm::IntEQ, lhs_addr, rhs_addr),\n+                        bx.icmp(IntPredicate::IntEQ, lhs_addr, rhs_addr),\n                         bx.icmp(op, lhs_extra, rhs_extra)\n                     )\n                 )\n@@ -710,7 +710,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n                 let invert_mask = common::shift_mask_val(&bx, lhs_llty, rhs_llty, true);\n                 let outer_bits = bx.and(rhs, invert_mask);\n \n-                let of = bx.icmp(llvm::IntNE, outer_bits, C_null(rhs_llty));\n+                let of = bx.icmp(IntPredicate::IntNE, outer_bits, C_null(rhs_llty));\n                 let val = self.codegen_scalar_binop(bx, op, lhs, rhs, input_ty);\n \n                 (val, of)\n@@ -838,7 +838,7 @@ fn cast_int_to_float(bx: &Builder<'_, 'll, '_>,\n         const MAX_F32_PLUS_HALF_ULP: u128 = ((1 << (Single::PRECISION + 1)) - 1)\n                                             << (Single::MAX_EXP - Single::PRECISION as i16);\n         let max = C_uint_big(int_ty, MAX_F32_PLUS_HALF_ULP);\n-        let overflow = bx.icmp(llvm::IntUGE, x, max);\n+        let overflow = bx.icmp(IntPredicate::IntUGE, x, max);\n         let infinity_bits = C_u32(bx.cx, ieee::Single::INFINITY.to_bits() as u32);\n         let infinity = consts::bitcast(infinity_bits, float_ty);\n         bx.select(overflow, infinity, bx.uitofp(x, float_ty))"}, {"sha": "e35669dc383b591b9639ad79faa74b3eb15d6201", "filename": "src/librustc_codegen_llvm/traits.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b7f2739b4fcf1c40335b59a15b1105df27f743/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftraits.rs?ref=51b7f2739b4fcf1c40335b59a15b1105df27f743", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{IntPredicate, RealPredicate, OperandBundleDef};\n-use llvm;\n+use llvm::{RealPredicate, OperandBundleDef};\n use common::*;\n use type_::Type;\n use libc::c_char;\n@@ -22,6 +21,23 @@ use builder::MemFlags;\n use std::borrow::Cow;\n use std::ops::Range;\n \n+pub enum IntPredicate {\n+    IntEQ,\n+    IntNE,\n+    IntUGT,\n+    IntUGE,\n+    IntULT,\n+    IntULE,\n+    IntSGT,\n+    IntSGE,\n+    IntSLT,\n+    IntSLE,\n+}\n+\n+pub trait IntPredicateMethods {\n+    fn convert_to_backend_specific(intpre : IntPredicate) -> Self;\n+}\n+\n \n pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n     Value : ?Sized,\n@@ -251,7 +267,7 @@ pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n         src: &'ll Value,\n         order: AtomicOrdering,\n         failure_order: AtomicOrdering,\n-        weak: llvm::Bool,\n+        weak: bool,\n     ) -> &'ll Value;\n     fn atomic_rmw(\n         &self,"}]}