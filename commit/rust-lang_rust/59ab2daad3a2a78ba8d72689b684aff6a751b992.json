{"sha": "59ab2daad3a2a78ba8d72689b684aff6a751b992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWIyZGFhZDNhMmE3OGJhOGQ3MjY4OWI2ODRhZmY2YTc1MWI5OTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-21T20:23:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-21T20:23:16Z"}, "message": "Rollup merge of #22567 - Gankro:unstable, r=alexcrichton\n\n * Adds features and allows\n* Removes unused muts, unused imports, dead code\n* Migrates some deprecated code to new io/env\n* Changes std::num::uint/int to be re-exports of std::num::usize/isize\n\nlibcollections, liballoc, and libcoretest no longer warn during testing.\n\nlibstd warns much less, though there's some dangly bits that weren't obvious fixes. In particular, how to only supress deprecated warnings in specific submodules of std.", "tree": {"sha": "fde20950cca6318f89f21fc843ba03a16513b324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde20950cca6318f89f21fc843ba03a16513b324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ab2daad3a2a78ba8d72689b684aff6a751b992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ab2daad3a2a78ba8d72689b684aff6a751b992", "html_url": "https://github.com/rust-lang/rust/commit/59ab2daad3a2a78ba8d72689b684aff6a751b992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ab2daad3a2a78ba8d72689b684aff6a751b992/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494dbe9c07839a8eeb2b035f86011df52f625a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/494dbe9c07839a8eeb2b035f86011df52f625a2d", "html_url": "https://github.com/rust-lang/rust/commit/494dbe9c07839a8eeb2b035f86011df52f625a2d"}, {"sha": "ac7d964dcf62f4c6104ae8d6bf3713f697215769", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7d964dcf62f4c6104ae8d6bf3713f697215769", "html_url": "https://github.com/rust-lang/rust/commit/ac7d964dcf62f4c6104ae8d6bf3713f697215769"}], "stats": {"total": 351, "additions": 157, "deletions": 194}, "files": [{"sha": "0cdc71b6f604f68bf88e988af72988a9aa8c9ca9", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -73,6 +73,7 @@\n #![feature(unboxed_closures)]\n #![feature(unsafe_no_drop_flag)]\n #![feature(core)]\n+#![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]\n "}, {"sha": "bc3995439a0173c782f158f56daa1c835dd3b7ac", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -170,84 +170,84 @@ mod u32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n-    use std::old_io::util::NullWriter;\n+    use std::io::{Write, sink};\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:b}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:o}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:x}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:?}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<u32>(), 36)) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", radix(rng.gen::<u32>(), 36)) })\n     }\n }\n \n mod i32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n-    use std::old_io::util::NullWriter;\n+    use std::io::{Write, sink};\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:b}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:o}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:x}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:?}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<i32>(), 36)) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", radix(rng.gen::<i32>(), 36)) })\n     }\n }"}, {"sha": "03924910e0485d12acf5f4c86798842dacac6fe6", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -12,6 +12,15 @@\n #![feature(int_uint)]\n #![feature(unboxed_closures)]\n #![feature(unsafe_destructor)]\n+#![feature(core)]\n+#![feature(test)]\n+#![feature(rand)]\n+#![feature(unicode)]\n+#![feature(std_misc)]\n+#![feature(libc)]\n+#![feature(hash)]\n+#![feature(io)]\n+#![feature(collections)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}, {"sha": "583c658dfe0582f3b02847e71aab3d4770620237", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -32,6 +32,8 @@\n #![deprecated(reason = \"use the crates.io `rand` library instead\",\n               since = \"1.0.0-alpha\")]\n \n+#![cfg_attr(test, feature(test, rand))]\n+\n #![allow(deprecated)]\n \n #[macro_use]"}, {"sha": "c48dd7a6ee89406fe26a978264a17ba81dd6c9f3", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -32,6 +32,8 @@\n #![feature(rustc_private)]\n #![feature(staged_api)]\n \n+#![cfg_attr(test, feature(test))]\n+\n extern crate serialize;\n #[macro_use] extern crate log;\n "}, {"sha": "f5d2b8aed29df340567b370b8b93743fd886b247", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -88,7 +88,6 @@ impl DefaultResizePolicy {\n \n #[test]\n fn test_resize_policy() {\n-    use prelude::v1::*;\n     let rp = DefaultResizePolicy;\n     for n in 0..1000 {\n         assert!(rp.min_capacity(rp.usable_capacity(n)) <= n);\n@@ -2256,6 +2255,7 @@ mod test_map {\n \n     #[test]\n     fn test_entry_take_doesnt_corrupt() {\n+        #![allow(deprecated)] //rand\n         // Test for #19292\n         fn check(m: &HashMap<isize, ()>) {\n             for k in m.keys() {"}, {"sha": "98c1b50a9bf14e2885ef371a5bdc08398349498f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -744,6 +744,8 @@ pub fn set_permissions<P: AsPath + ?Sized>(path: &P, perm: Permissions)\n \n #[cfg(test)]\n mod tests {\n+    #![allow(deprecated)] //rand\n+\n     use prelude::v1::*;\n     use io::prelude::*;\n \n@@ -1035,7 +1037,7 @@ mod tests {\n             let msg = msg_str.as_bytes();\n             check!(w.write(msg));\n         }\n-        let mut files = check!(fs::read_dir(dir));\n+        let files = check!(fs::read_dir(dir));\n         let mut mem = [0u8; 4];\n         for f in files {\n             let f = f.unwrap().path();\n@@ -1065,7 +1067,7 @@ mod tests {\n         check!(fs::create_dir_all(dir2));\n         check!(File::create(&dir2.join(\"14\")));\n \n-        let mut files = check!(fs::walk_dir(dir));\n+        let files = check!(fs::walk_dir(dir));\n         let mut cur = [0u8; 2];\n         for f in files {\n             let f = f.unwrap().path();"}, {"sha": "9ef319782369d7090506bddfcb676b0e30f8640b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -497,7 +497,6 @@ mod tests {\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8]);\n \n         writer.write(&[9, 10, 11]).unwrap();\n-        let a: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n \n         writer.flush().unwrap();\n@@ -593,7 +592,7 @@ mod tests {\n     #[test]\n     fn test_lines() {\n         let in_buf = b\"a\\nb\\nc\";\n-        let mut reader = BufReader::with_capacity(2, in_buf);\n+        let reader = BufReader::with_capacity(2, in_buf);\n         let mut it = reader.lines();\n         assert_eq!(it.next(), Some(Ok(\"a\".to_string())));\n         assert_eq!(it.next(), Some(Ok(\"b\".to_string())));\n@@ -618,14 +617,14 @@ mod tests {\n     #[test]\n     fn read_char_buffered() {\n         let buf = [195u8, 159u8];\n-        let mut reader = BufReader::with_capacity(1, &buf[..]);\n+        let reader = BufReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.chars().next(), Some(Ok('\u00df')));\n     }\n \n     #[test]\n     fn test_chars() {\n         let buf = [195u8, 159u8, b'a'];\n-        let mut reader = BufReader::with_capacity(1, &buf[..]);\n+        let reader = BufReader::with_capacity(1, &buf[..]);\n         let mut it = reader.chars();\n         assert_eq!(it.next(), Some(Ok('\u00df')));\n         assert_eq!(it.next(), Some(Ok('a')));"}, {"sha": "5b319f4c6876dc28acdc0461c1347c1d575a602c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -869,12 +869,12 @@ mod tests {\n \n     #[test]\n     fn split() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(b\"12\");\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), None);\n \n-        let mut buf = Cursor::new(b\"1233\");\n+        let buf = Cursor::new(b\"1233\");\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), Some(Ok(vec![])));\n@@ -902,12 +902,12 @@ mod tests {\n \n     #[test]\n     fn lines() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(b\"12\");\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), None);\n \n-        let mut buf = Cursor::new(b\"12\\n\\n\");\n+        let buf = Cursor::new(b\"12\\n\\n\");\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), Some(Ok(String::new())));"}, {"sha": "4b6e9cf76f9e570f3566d7d8cc6cb103d61a00a9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -109,7 +109,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(hash)]\n #![feature(int_uint)]\n #![feature(lang_items)]\n #![feature(libc)]\n@@ -123,7 +122,7 @@\n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]\n #![feature(macro_reexport)]\n-#![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(test, rustc_private, env))]\n \n // Don't link to std. We are std.\n #![feature(no_std)]\n@@ -219,15 +218,15 @@ mod int_macros;\n #[macro_use]\n mod uint_macros;\n \n-#[path = \"num/int.rs\"]  pub mod int;\n #[path = \"num/isize.rs\"]  pub mod isize;\n+pub use isize as int;\n #[path = \"num/i8.rs\"]   pub mod i8;\n #[path = \"num/i16.rs\"]  pub mod i16;\n #[path = \"num/i32.rs\"]  pub mod i32;\n #[path = \"num/i64.rs\"]  pub mod i64;\n \n-#[path = \"num/uint.rs\"] pub mod uint;\n #[path = \"num/usize.rs\"] pub mod usize;\n+pub use usize as uint;\n #[path = \"num/u8.rs\"]   pub mod u8;\n #[path = \"num/u16.rs\"]  pub mod u16;\n #[path = \"num/u32.rs\"]  pub mod u32;"}, {"sha": "f99cd2b1d1be9eeb59887f081817a4787236af95", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -456,12 +456,6 @@ mod tests {\n         }\n     }\n \n-    pub fn socket_name(addr: SocketAddr) {\n-    }\n-\n-    pub fn peer_name(addr: SocketAddr) {\n-    }\n-\n     #[test]\n     fn socket_and_peer_name_ip4() {\n         each_ip(&mut |addr| {"}, {"sha": "c70e92884ac653749ea3d9915323fe760b65b6aa", "filename": "src/libstd/net/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftest.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -33,7 +33,7 @@ fn base_port() -> u16 {\n     let cwd = env::current_dir().unwrap();\n     let dirs = [\"32-opt\", \"32-nopt\", \"64-opt\", \"64-nopt\", \"64-opt-vg\",\n                 \"all-opt\", \"snap3\", \"dist\"];\n-    dirs.iter().enumerate().find(|&(i, dir)| {\n+    dirs.iter().enumerate().find(|&(_, dir)| {\n         cwd.as_str().unwrap().contains(dir)\n     }).map(|p| p.0).unwrap_or(0) as u16 * 1000 + 19600\n }"}, {"sha": "669952eee3924a8bb81e94cd953a16ca965cdc77", "filename": "src/libstd/num/int.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/494dbe9c07839a8eeb2b035f86011df52f625a2d/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494dbe9c07839a8eeb2b035f86011df52f625a2d/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=494dbe9c07839a8eeb2b035f86011df52f625a2d", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Deprecated: replaced by `isize`.\n-//!\n-//! The rollout of the new type will gradually take place over the\n-//! alpha cycle along with the development of clearer conventions\n-//! around integer types.\n-\n-#![unstable(feature = \"std_misc\")]\n-#![deprecated(since = \"1.0.0\", reason = \"replaced by isize\")]\n-\n-pub use core::int::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { int }"}, {"sha": "968adfafeab73df1f4e5496403be1708c70c91f0", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -11,7 +11,7 @@\n //! Numeric traits and functions for generic mathematics\n //!\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n-//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64}`.\n+//! u32, u64, usize, i8, i16, i32, i64, isize, f32, f64}`.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n@@ -146,12 +146,12 @@ pub trait Float\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n                            `std::f64::MANTISSA_DIGITS` as appropriate\")]\n-    fn mantissa_digits(unused_self: Option<Self>) -> uint;\n+    fn mantissa_digits(unused_self: Option<Self>) -> usize;\n     /// Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n-    fn digits(unused_self: Option<Self>) -> uint;\n+    fn digits(unused_self: Option<Self>) -> usize;\n     /// Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n@@ -161,22 +161,22 @@ pub trait Float\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n-    fn min_exp(unused_self: Option<Self>) -> int;\n+    fn min_exp(unused_self: Option<Self>) -> isize;\n     /// Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n-    fn max_exp(unused_self: Option<Self>) -> int;\n+    fn max_exp(unused_self: Option<Self>) -> isize;\n     /// Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n-    fn min_10_exp(unused_self: Option<Self>) -> int;\n+    fn min_10_exp(unused_self: Option<Self>) -> isize;\n     /// Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n-    fn max_10_exp(unused_self: Option<Self>) -> int;\n+    fn max_10_exp(unused_self: Option<Self>) -> isize;\n \n     /// Returns the smallest finite value that this type can represent.\n     ///\n@@ -698,7 +698,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"pending integer conventions\")]\n-    fn ldexp(x: Self, exp: int) -> Self;\n+    fn ldexp(x: Self, exp: isize) -> Self;\n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n     /// satisfying:\n     ///\n@@ -720,7 +720,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"pending integer conventions\")]\n-    fn frexp(self) -> (Self, int);\n+    fn frexp(self) -> (Self, isize);\n     /// Returns the next representable floating-point value in the direction of\n     /// `other`.\n     ///\n@@ -1112,12 +1112,12 @@ mod tests {\n     use i16;\n     use i32;\n     use i64;\n-    use int;\n+    use isize;\n     use u8;\n     use u16;\n     use u32;\n     use u64;\n-    use uint;\n+    use usize;\n \n     macro_rules! test_cast_20 {\n         ($_20:expr) => ({\n@@ -1179,33 +1179,33 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_int_min() {\n-        assert_eq!(int::MIN.to_int(),  Some(int::MIN as int));\n-        assert_eq!(int::MIN.to_i8(),   None);\n-        assert_eq!(int::MIN.to_i16(),  None);\n-        // int::MIN.to_i32() is word-size specific\n-        assert_eq!(int::MIN.to_i64(),  Some(int::MIN as i64));\n-        assert_eq!(int::MIN.to_uint(), None);\n-        assert_eq!(int::MIN.to_u8(),   None);\n-        assert_eq!(int::MIN.to_u16(),  None);\n-        assert_eq!(int::MIN.to_u32(),  None);\n-        assert_eq!(int::MIN.to_u64(),  None);\n+        assert_eq!(isize::MIN.to_int(),  Some(isize::MIN as isize));\n+        assert_eq!(isize::MIN.to_i8(),   None);\n+        assert_eq!(isize::MIN.to_i16(),  None);\n+        // isize::MIN.to_i32() is word-size specific\n+        assert_eq!(isize::MIN.to_i64(),  Some(isize::MIN as i64));\n+        assert_eq!(isize::MIN.to_uint(), None);\n+        assert_eq!(isize::MIN.to_u8(),   None);\n+        assert_eq!(isize::MIN.to_u16(),  None);\n+        assert_eq!(isize::MIN.to_u32(),  None);\n+        assert_eq!(isize::MIN.to_u64(),  None);\n \n         #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n-            assert_eq!(int::MIN.to_i32(), Some(int::MIN as i32));\n+            assert_eq!(isize::MIN.to_i32(), Some(isize::MIN as i32));\n         }\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(int::MIN.to_i32(), None);\n+            assert_eq!(isize::MIN.to_i32(), None);\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_cast_range_i8_min() {\n-        assert_eq!(i8::MIN.to_int(),  Some(i8::MIN as int));\n+        assert_eq!(i8::MIN.to_int(),  Some(i8::MIN as isize));\n         assert_eq!(i8::MIN.to_i8(),   Some(i8::MIN as i8));\n         assert_eq!(i8::MIN.to_i16(),  Some(i8::MIN as i16));\n         assert_eq!(i8::MIN.to_i32(),  Some(i8::MIN as i32));\n@@ -1219,7 +1219,7 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_i16_min() {\n-        assert_eq!(i16::MIN.to_int(),  Some(i16::MIN as int));\n+        assert_eq!(i16::MIN.to_int(),  Some(i16::MIN as isize));\n         assert_eq!(i16::MIN.to_i8(),   None);\n         assert_eq!(i16::MIN.to_i16(),  Some(i16::MIN as i16));\n         assert_eq!(i16::MIN.to_i32(),  Some(i16::MIN as i32));\n@@ -1233,7 +1233,7 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_i32_min() {\n-        assert_eq!(i32::MIN.to_int(),  Some(i32::MIN as int));\n+        assert_eq!(i32::MIN.to_int(),  Some(i32::MIN as isize));\n         assert_eq!(i32::MIN.to_i8(),   None);\n         assert_eq!(i32::MIN.to_i16(),  None);\n         assert_eq!(i32::MIN.to_i32(),  Some(i32::MIN as i32));\n@@ -1265,47 +1265,47 @@ mod tests {\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(i64::MIN.to_int(), Some(i64::MIN as int));\n+            assert_eq!(i64::MIN.to_int(), Some(i64::MIN as isize));\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_cast_range_int_max() {\n-        assert_eq!(int::MAX.to_int(),  Some(int::MAX as int));\n-        assert_eq!(int::MAX.to_i8(),   None);\n-        assert_eq!(int::MAX.to_i16(),  None);\n-        // int::MAX.to_i32() is word-size specific\n-        assert_eq!(int::MAX.to_i64(),  Some(int::MAX as i64));\n-        assert_eq!(int::MAX.to_u8(),   None);\n-        assert_eq!(int::MAX.to_u16(),  None);\n-        // int::MAX.to_u32() is word-size specific\n-        assert_eq!(int::MAX.to_u64(),  Some(int::MAX as u64));\n+        assert_eq!(isize::MAX.to_int(),  Some(isize::MAX as isize));\n+        assert_eq!(isize::MAX.to_i8(),   None);\n+        assert_eq!(isize::MAX.to_i16(),  None);\n+        // isize::MAX.to_i32() is word-size specific\n+        assert_eq!(isize::MAX.to_i64(),  Some(isize::MAX as i64));\n+        assert_eq!(isize::MAX.to_u8(),   None);\n+        assert_eq!(isize::MAX.to_u16(),  None);\n+        // isize::MAX.to_u32() is word-size specific\n+        assert_eq!(isize::MAX.to_u64(),  Some(isize::MAX as u64));\n \n         #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n-            assert_eq!(int::MAX.to_i32(), Some(int::MAX as i32));\n-            assert_eq!(int::MAX.to_u32(), Some(int::MAX as u32));\n+            assert_eq!(isize::MAX.to_i32(), Some(isize::MAX as i32));\n+            assert_eq!(isize::MAX.to_u32(), Some(isize::MAX as u32));\n         }\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(int::MAX.to_i32(), None);\n-            assert_eq!(int::MAX.to_u32(), None);\n+            assert_eq!(isize::MAX.to_i32(), None);\n+            assert_eq!(isize::MAX.to_u32(), None);\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_cast_range_i8_max() {\n-        assert_eq!(i8::MAX.to_int(),  Some(i8::MAX as int));\n+        assert_eq!(i8::MAX.to_int(),  Some(i8::MAX as isize));\n         assert_eq!(i8::MAX.to_i8(),   Some(i8::MAX as i8));\n         assert_eq!(i8::MAX.to_i16(),  Some(i8::MAX as i16));\n         assert_eq!(i8::MAX.to_i32(),  Some(i8::MAX as i32));\n         assert_eq!(i8::MAX.to_i64(),  Some(i8::MAX as i64));\n-        assert_eq!(i8::MAX.to_uint(), Some(i8::MAX as uint));\n+        assert_eq!(i8::MAX.to_uint(), Some(i8::MAX as usize));\n         assert_eq!(i8::MAX.to_u8(),   Some(i8::MAX as u8));\n         assert_eq!(i8::MAX.to_u16(),  Some(i8::MAX as u16));\n         assert_eq!(i8::MAX.to_u32(),  Some(i8::MAX as u32));\n@@ -1314,12 +1314,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_i16_max() {\n-        assert_eq!(i16::MAX.to_int(),  Some(i16::MAX as int));\n+        assert_eq!(i16::MAX.to_int(),  Some(i16::MAX as isize));\n         assert_eq!(i16::MAX.to_i8(),   None);\n         assert_eq!(i16::MAX.to_i16(),  Some(i16::MAX as i16));\n         assert_eq!(i16::MAX.to_i32(),  Some(i16::MAX as i32));\n         assert_eq!(i16::MAX.to_i64(),  Some(i16::MAX as i64));\n-        assert_eq!(i16::MAX.to_uint(), Some(i16::MAX as uint));\n+        assert_eq!(i16::MAX.to_uint(), Some(i16::MAX as usize));\n         assert_eq!(i16::MAX.to_u8(),   None);\n         assert_eq!(i16::MAX.to_u16(),  Some(i16::MAX as u16));\n         assert_eq!(i16::MAX.to_u32(),  Some(i16::MAX as u32));\n@@ -1328,12 +1328,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_i32_max() {\n-        assert_eq!(i32::MAX.to_int(),  Some(i32::MAX as int));\n+        assert_eq!(i32::MAX.to_int(),  Some(i32::MAX as isize));\n         assert_eq!(i32::MAX.to_i8(),   None);\n         assert_eq!(i32::MAX.to_i16(),  None);\n         assert_eq!(i32::MAX.to_i32(),  Some(i32::MAX as i32));\n         assert_eq!(i32::MAX.to_i64(),  Some(i32::MAX as i64));\n-        assert_eq!(i32::MAX.to_uint(), Some(i32::MAX as uint));\n+        assert_eq!(i32::MAX.to_uint(), Some(i32::MAX as usize));\n         assert_eq!(i32::MAX.to_u8(),   None);\n         assert_eq!(i32::MAX.to_u16(),  None);\n         assert_eq!(i32::MAX.to_u32(),  Some(i32::MAX as u32));\n@@ -1361,35 +1361,35 @@ mod tests {\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(i64::MAX.to_int(),  Some(i64::MAX as int));\n-            assert_eq!(i64::MAX.to_uint(), Some(i64::MAX as uint));\n+            assert_eq!(i64::MAX.to_int(),  Some(i64::MAX as isize));\n+            assert_eq!(i64::MAX.to_uint(), Some(i64::MAX as usize));\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_cast_range_uint_min() {\n-        assert_eq!(uint::MIN.to_int(),  Some(uint::MIN as int));\n-        assert_eq!(uint::MIN.to_i8(),   Some(uint::MIN as i8));\n-        assert_eq!(uint::MIN.to_i16(),  Some(uint::MIN as i16));\n-        assert_eq!(uint::MIN.to_i32(),  Some(uint::MIN as i32));\n-        assert_eq!(uint::MIN.to_i64(),  Some(uint::MIN as i64));\n-        assert_eq!(uint::MIN.to_uint(), Some(uint::MIN as uint));\n-        assert_eq!(uint::MIN.to_u8(),   Some(uint::MIN as u8));\n-        assert_eq!(uint::MIN.to_u16(),  Some(uint::MIN as u16));\n-        assert_eq!(uint::MIN.to_u32(),  Some(uint::MIN as u32));\n-        assert_eq!(uint::MIN.to_u64(),  Some(uint::MIN as u64));\n+        assert_eq!(usize::MIN.to_int(),  Some(usize::MIN as isize));\n+        assert_eq!(usize::MIN.to_i8(),   Some(usize::MIN as i8));\n+        assert_eq!(usize::MIN.to_i16(),  Some(usize::MIN as i16));\n+        assert_eq!(usize::MIN.to_i32(),  Some(usize::MIN as i32));\n+        assert_eq!(usize::MIN.to_i64(),  Some(usize::MIN as i64));\n+        assert_eq!(usize::MIN.to_uint(), Some(usize::MIN as usize));\n+        assert_eq!(usize::MIN.to_u8(),   Some(usize::MIN as u8));\n+        assert_eq!(usize::MIN.to_u16(),  Some(usize::MIN as u16));\n+        assert_eq!(usize::MIN.to_u32(),  Some(usize::MIN as u32));\n+        assert_eq!(usize::MIN.to_u64(),  Some(usize::MIN as u64));\n     }\n \n     #[test]\n     fn test_cast_range_u8_min() {\n-        assert_eq!(u8::MIN.to_int(),  Some(u8::MIN as int));\n+        assert_eq!(u8::MIN.to_int(),  Some(u8::MIN as isize));\n         assert_eq!(u8::MIN.to_i8(),   Some(u8::MIN as i8));\n         assert_eq!(u8::MIN.to_i16(),  Some(u8::MIN as i16));\n         assert_eq!(u8::MIN.to_i32(),  Some(u8::MIN as i32));\n         assert_eq!(u8::MIN.to_i64(),  Some(u8::MIN as i64));\n-        assert_eq!(u8::MIN.to_uint(), Some(u8::MIN as uint));\n+        assert_eq!(u8::MIN.to_uint(), Some(u8::MIN as usize));\n         assert_eq!(u8::MIN.to_u8(),   Some(u8::MIN as u8));\n         assert_eq!(u8::MIN.to_u16(),  Some(u8::MIN as u16));\n         assert_eq!(u8::MIN.to_u32(),  Some(u8::MIN as u32));\n@@ -1398,12 +1398,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_u16_min() {\n-        assert_eq!(u16::MIN.to_int(),  Some(u16::MIN as int));\n+        assert_eq!(u16::MIN.to_int(),  Some(u16::MIN as isize));\n         assert_eq!(u16::MIN.to_i8(),   Some(u16::MIN as i8));\n         assert_eq!(u16::MIN.to_i16(),  Some(u16::MIN as i16));\n         assert_eq!(u16::MIN.to_i32(),  Some(u16::MIN as i32));\n         assert_eq!(u16::MIN.to_i64(),  Some(u16::MIN as i64));\n-        assert_eq!(u16::MIN.to_uint(), Some(u16::MIN as uint));\n+        assert_eq!(u16::MIN.to_uint(), Some(u16::MIN as usize));\n         assert_eq!(u16::MIN.to_u8(),   Some(u16::MIN as u8));\n         assert_eq!(u16::MIN.to_u16(),  Some(u16::MIN as u16));\n         assert_eq!(u16::MIN.to_u32(),  Some(u16::MIN as u32));\n@@ -1412,12 +1412,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_u32_min() {\n-        assert_eq!(u32::MIN.to_int(),  Some(u32::MIN as int));\n+        assert_eq!(u32::MIN.to_int(),  Some(u32::MIN as isize));\n         assert_eq!(u32::MIN.to_i8(),   Some(u32::MIN as i8));\n         assert_eq!(u32::MIN.to_i16(),  Some(u32::MIN as i16));\n         assert_eq!(u32::MIN.to_i32(),  Some(u32::MIN as i32));\n         assert_eq!(u32::MIN.to_i64(),  Some(u32::MIN as i64));\n-        assert_eq!(u32::MIN.to_uint(), Some(u32::MIN as uint));\n+        assert_eq!(u32::MIN.to_uint(), Some(u32::MIN as usize));\n         assert_eq!(u32::MIN.to_u8(),   Some(u32::MIN as u8));\n         assert_eq!(u32::MIN.to_u16(),  Some(u32::MIN as u16));\n         assert_eq!(u32::MIN.to_u32(),  Some(u32::MIN as u32));\n@@ -1426,12 +1426,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_u64_min() {\n-        assert_eq!(u64::MIN.to_int(),  Some(u64::MIN as int));\n+        assert_eq!(u64::MIN.to_int(),  Some(u64::MIN as isize));\n         assert_eq!(u64::MIN.to_i8(),   Some(u64::MIN as i8));\n         assert_eq!(u64::MIN.to_i16(),  Some(u64::MIN as i16));\n         assert_eq!(u64::MIN.to_i32(),  Some(u64::MIN as i32));\n         assert_eq!(u64::MIN.to_i64(),  Some(u64::MIN as i64));\n-        assert_eq!(u64::MIN.to_uint(), Some(u64::MIN as uint));\n+        assert_eq!(u64::MIN.to_uint(), Some(u64::MIN as usize));\n         assert_eq!(u64::MIN.to_u8(),   Some(u64::MIN as u8));\n         assert_eq!(u64::MIN.to_u16(),  Some(u64::MIN as u16));\n         assert_eq!(u64::MIN.to_u32(),  Some(u64::MIN as u32));\n@@ -1440,39 +1440,39 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_uint_max() {\n-        assert_eq!(uint::MAX.to_int(),  None);\n-        assert_eq!(uint::MAX.to_i8(),   None);\n-        assert_eq!(uint::MAX.to_i16(),  None);\n-        assert_eq!(uint::MAX.to_i32(),  None);\n-        // uint::MAX.to_i64() is word-size specific\n-        assert_eq!(uint::MAX.to_u8(),   None);\n-        assert_eq!(uint::MAX.to_u16(),  None);\n-        // uint::MAX.to_u32() is word-size specific\n-        assert_eq!(uint::MAX.to_u64(),  Some(uint::MAX as u64));\n+        assert_eq!(usize::MAX.to_int(),  None);\n+        assert_eq!(usize::MAX.to_i8(),   None);\n+        assert_eq!(usize::MAX.to_i16(),  None);\n+        assert_eq!(usize::MAX.to_i32(),  None);\n+        // usize::MAX.to_i64() is word-size specific\n+        assert_eq!(usize::MAX.to_u8(),   None);\n+        assert_eq!(usize::MAX.to_u16(),  None);\n+        // usize::MAX.to_u32() is word-size specific\n+        assert_eq!(usize::MAX.to_u64(),  Some(usize::MAX as u64));\n \n         #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n-            assert_eq!(uint::MAX.to_u32(), Some(uint::MAX as u32));\n-            assert_eq!(uint::MAX.to_i64(), Some(uint::MAX as i64));\n+            assert_eq!(usize::MAX.to_u32(), Some(usize::MAX as u32));\n+            assert_eq!(usize::MAX.to_i64(), Some(usize::MAX as i64));\n         }\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(uint::MAX.to_u32(), None);\n-            assert_eq!(uint::MAX.to_i64(), None);\n+            assert_eq!(usize::MAX.to_u32(), None);\n+            assert_eq!(usize::MAX.to_i64(), None);\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_cast_range_u8_max() {\n-        assert_eq!(u8::MAX.to_int(),  Some(u8::MAX as int));\n+        assert_eq!(u8::MAX.to_int(),  Some(u8::MAX as isize));\n         assert_eq!(u8::MAX.to_i8(),   None);\n         assert_eq!(u8::MAX.to_i16(),  Some(u8::MAX as i16));\n         assert_eq!(u8::MAX.to_i32(),  Some(u8::MAX as i32));\n         assert_eq!(u8::MAX.to_i64(),  Some(u8::MAX as i64));\n-        assert_eq!(u8::MAX.to_uint(), Some(u8::MAX as uint));\n+        assert_eq!(u8::MAX.to_uint(), Some(u8::MAX as usize));\n         assert_eq!(u8::MAX.to_u8(),   Some(u8::MAX as u8));\n         assert_eq!(u8::MAX.to_u16(),  Some(u8::MAX as u16));\n         assert_eq!(u8::MAX.to_u32(),  Some(u8::MAX as u32));\n@@ -1481,12 +1481,12 @@ mod tests {\n \n     #[test]\n     fn test_cast_range_u16_max() {\n-        assert_eq!(u16::MAX.to_int(),  Some(u16::MAX as int));\n+        assert_eq!(u16::MAX.to_int(),  Some(u16::MAX as isize));\n         assert_eq!(u16::MAX.to_i8(),   None);\n         assert_eq!(u16::MAX.to_i16(),  None);\n         assert_eq!(u16::MAX.to_i32(),  Some(u16::MAX as i32));\n         assert_eq!(u16::MAX.to_i64(),  Some(u16::MAX as i64));\n-        assert_eq!(u16::MAX.to_uint(), Some(u16::MAX as uint));\n+        assert_eq!(u16::MAX.to_uint(), Some(u16::MAX as usize));\n         assert_eq!(u16::MAX.to_u8(),   None);\n         assert_eq!(u16::MAX.to_u16(),  Some(u16::MAX as u16));\n         assert_eq!(u16::MAX.to_u32(),  Some(u16::MAX as u32));\n@@ -1500,7 +1500,7 @@ mod tests {\n         assert_eq!(u32::MAX.to_i16(),  None);\n         assert_eq!(u32::MAX.to_i32(),  None);\n         assert_eq!(u32::MAX.to_i64(),  Some(u32::MAX as i64));\n-        assert_eq!(u32::MAX.to_uint(), Some(u32::MAX as uint));\n+        assert_eq!(u32::MAX.to_uint(), Some(u32::MAX as usize));\n         assert_eq!(u32::MAX.to_u8(),   None);\n         assert_eq!(u32::MAX.to_u16(),  None);\n         assert_eq!(u32::MAX.to_u32(),  Some(u32::MAX as u32));\n@@ -1513,7 +1513,7 @@ mod tests {\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(u32::MAX.to_int(),  Some(u32::MAX as int));\n+            assert_eq!(u32::MAX.to_int(),  Some(u32::MAX as isize));\n         }\n \n         check_word_size();\n@@ -1539,15 +1539,15 @@ mod tests {\n \n         #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n-            assert_eq!(u64::MAX.to_uint(), Some(u64::MAX as uint));\n+            assert_eq!(u64::MAX.to_uint(), Some(u64::MAX as usize));\n         }\n \n         check_word_size();\n     }\n \n     #[test]\n     fn test_saturating_add_uint() {\n-        use uint::MAX;\n+        use usize::MAX;\n         assert_eq!(3_usize.saturating_add(5_usize), 8_usize);\n         assert_eq!(3_usize.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n@@ -1556,7 +1556,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_sub_uint() {\n-        use uint::MAX;\n+        use usize::MAX;\n         assert_eq!(5_usize.saturating_sub(3_usize), 2_usize);\n         assert_eq!(3_usize.saturating_sub(5_usize), 0_usize);\n         assert_eq!(0_usize.saturating_sub(1_usize), 0_usize);\n@@ -1565,7 +1565,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_add_int() {\n-        use int::{MIN,MAX};\n+        use isize::{MIN,MAX};\n         assert_eq!(3.saturating_add(5), 8);\n         assert_eq!(3.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n@@ -1577,7 +1577,7 @@ mod tests {\n \n     #[test]\n     fn test_saturating_sub_int() {\n-        use int::{MIN,MAX};\n+        use isize::{MIN,MAX};\n         assert_eq!(3.saturating_sub(5), -2);\n         assert_eq!(MIN.saturating_sub(1), MIN);\n         assert_eq!((-2).saturating_sub(MAX), MIN);\n@@ -1589,13 +1589,13 @@ mod tests {\n \n     #[test]\n     fn test_checked_add() {\n-        let five_less = uint::MAX - 5;\n-        assert_eq!(five_less.checked_add(0), Some(uint::MAX - 5));\n-        assert_eq!(five_less.checked_add(1), Some(uint::MAX - 4));\n-        assert_eq!(five_less.checked_add(2), Some(uint::MAX - 3));\n-        assert_eq!(five_less.checked_add(3), Some(uint::MAX - 2));\n-        assert_eq!(five_less.checked_add(4), Some(uint::MAX - 1));\n-        assert_eq!(five_less.checked_add(5), Some(uint::MAX));\n+        let five_less = usize::MAX - 5;\n+        assert_eq!(five_less.checked_add(0), Some(usize::MAX - 5));\n+        assert_eq!(five_less.checked_add(1), Some(usize::MAX - 4));\n+        assert_eq!(five_less.checked_add(2), Some(usize::MAX - 3));\n+        assert_eq!(five_less.checked_add(3), Some(usize::MAX - 2));\n+        assert_eq!(five_less.checked_add(4), Some(usize::MAX - 1));\n+        assert_eq!(five_less.checked_add(5), Some(usize::MAX));\n         assert_eq!(five_less.checked_add(6), None);\n         assert_eq!(five_less.checked_add(7), None);\n     }\n@@ -1614,7 +1614,7 @@ mod tests {\n \n     #[test]\n     fn test_checked_mul() {\n-        let third = uint::MAX / 3;\n+        let third = usize::MAX / 3;\n         assert_eq!(third.checked_mul(0), Some(0));\n         assert_eq!(third.checked_mul(1), Some(third));\n         assert_eq!(third.checked_mul(2), Some(third * 2));\n@@ -1641,7 +1641,7 @@ mod tests {\n     test_is_power_of_two!{ test_is_power_of_two_u16, u16 }\n     test_is_power_of_two!{ test_is_power_of_two_u32, u32 }\n     test_is_power_of_two!{ test_is_power_of_two_u64, u64 }\n-    test_is_power_of_two!{ test_is_power_of_two_uint, uint }\n+    test_is_power_of_two!{ test_is_power_of_two_uint, usize }\n \n     macro_rules! test_next_power_of_two {\n         ($test_name:ident, $T:ident) => (\n@@ -1661,7 +1661,7 @@ mod tests {\n     test_next_power_of_two! { test_next_power_of_two_u16, u16 }\n     test_next_power_of_two! { test_next_power_of_two_u32, u32 }\n     test_next_power_of_two! { test_next_power_of_two_u64, u64 }\n-    test_next_power_of_two! { test_next_power_of_two_uint, uint }\n+    test_next_power_of_two! { test_next_power_of_two_uint, usize }\n \n     macro_rules! test_checked_next_power_of_two {\n         ($test_name:ident, $T:ident) => (\n@@ -1684,19 +1684,19 @@ mod tests {\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_u16, u16 }\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_u32, u32 }\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_u64, u64 }\n-    test_checked_next_power_of_two! { test_checked_next_power_of_two_uint, uint }\n+    test_checked_next_power_of_two! { test_checked_next_power_of_two_uint, usize }\n \n     #[derive(PartialEq, Debug)]\n-    struct Value { x: int }\n+    struct Value { x: isize }\n \n     impl ToPrimitive for Value {\n         fn to_i64(&self) -> Option<i64> { self.x.to_i64() }\n         fn to_u64(&self) -> Option<u64> { self.x.to_u64() }\n     }\n \n     impl FromPrimitive for Value {\n-        fn from_i64(n: i64) -> Option<Value> { Some(Value { x: n as int }) }\n-        fn from_u64(n: u64) -> Option<Value> { Some(Value { x: n as int }) }\n+        fn from_i64(n: i64) -> Option<Value> { Some(Value { x: n as isize }) }\n+        fn from_u64(n: u64) -> Option<Value> { Some(Value { x: n as isize }) }\n     }\n \n     #[test]\n@@ -1734,7 +1734,7 @@ mod tests {\n \n     #[test]\n     fn test_pow() {\n-        fn naive_pow<T: Int>(base: T, exp: uint) -> T {\n+        fn naive_pow<T: Int>(base: T, exp: usize) -> T {\n             let one: T = Int::one();\n             (0..exp).fold(one, |acc, _| acc * base)\n         }"}, {"sha": "c7b491381f337abca0b65054bfdaa8b620469cd9", "filename": "src/libstd/num/uint.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/494dbe9c07839a8eeb2b035f86011df52f625a2d/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494dbe9c07839a8eeb2b035f86011df52f625a2d/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=494dbe9c07839a8eeb2b035f86011df52f625a2d", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Deprecated: replaced by `usize`.\n-//!\n-//! The rollout of the new type will gradually take place over the\n-//! alpha cycle along with the development of clearer conventions\n-//! around integer types.\n-\n-#![unstable(feature = \"std_misc\")]\n-#![deprecated(since = \"1.0.0\", reason = \"replaced by usize\")]\n-\n-pub use core::uint::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { uint }"}, {"sha": "b82572fc08957380c68f439b2ae1919d7ccca064", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -240,6 +240,8 @@\n \n #![unstable(feature = \"old_io\")]\n #![deny(unused_must_use)]\n+#![allow(deprecated)] // seriously this is all deprecated\n+#![allow(unused_imports)]\n \n pub use self::SeekStyle::*;\n pub use self::FileMode::*;"}, {"sha": "4f8976fb2ecda2e18faf75c8f5098e9929d43a17", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -60,6 +60,8 @@\n //! ```\n \n #![unstable(feature = \"old_path\")]\n+#![allow(deprecated)] // seriously this is all deprecated\n+#![allow(unused_imports)]\n \n use core::marker::Sized;\n use ffi::CString;"}, {"sha": "88543ad85ed116e78326c1dbc83d392733637745", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -1324,7 +1324,6 @@ impl<T: AsOsStr + ?Sized> AsPath for T {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use ffi::OsStr;\n     use core::prelude::*;\n     use string::{ToString, String};\n     use vec::Vec;"}, {"sha": "86604f62171ef073369a56646de779961ba80c38", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -489,18 +489,14 @@ impl Child {\n mod tests {\n     use io::ErrorKind;\n     use io::prelude::*;\n-    use prelude::v1::{Ok, Err, range, drop, Some, None, Vec};\n+    use prelude::v1::{Ok, Err, drop, Some, Vec};\n     use prelude::v1::{String, Clone};\n     use prelude::v1::{SliceExt, Str, StrExt, AsSlice, ToString, GenericPath};\n-    use path::Path;\n     use old_path;\n     use old_io::fs::PathExtensions;\n     use rt::running_on_valgrind;\n     use str;\n-    use super::{Child, Command, Output, ExitStatus, Stdio};\n-    use sync::mpsc::channel;\n-    use thread;\n-    use time::Duration;\n+    use super::{Command, Output, Stdio};\n \n     // FIXME(#10380) these tests should not all be ignored on android.\n "}, {"sha": "1f70e1526a096c61c5b0c50d1d14704d9d6c0a27", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab2daad3a2a78ba8d72689b684aff6a751b992/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=59ab2daad3a2a78ba8d72689b684aff6a751b992", "patch": "@@ -702,7 +702,7 @@ mod test {\n     use boxed::BoxAny;\n     use result;\n     use std::old_io::{ChanReader, ChanWriter};\n-    use super::{Thread, Builder};\n+    use super::{Builder};\n     use thread;\n     use thunk::Thunk;\n     use time::Duration;\n@@ -767,7 +767,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_scoped_implicit_panic() {\n-        thread::scoped(|| panic!());\n+        let _ = thread::scoped(|| panic!());\n     }\n \n     #[test]"}]}