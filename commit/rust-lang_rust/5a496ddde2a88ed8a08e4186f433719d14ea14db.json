{"sha": "5a496ddde2a88ed8a08e4186f433719d14ea14db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNDk2ZGRkZTJhODhlZDhhMDhlNDE4NmY0MzM3MTlkMTRlYTE0ZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T08:03:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-10T08:03:22Z"}, "message": "Merge pull request #467 from solson/rustup\n\nrustup; test for return type mismatch", "tree": {"sha": "2121c45a610baf0d8b3ee3ff82778286c67932b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2121c45a610baf0d8b3ee3ff82778286c67932b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a496ddde2a88ed8a08e4186f433719d14ea14db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbvbJKCRBK7hj4Ov3rIwAAdHIIAFWIV54fLRcODV7K6cgT54Z9\ncZa0EJetZ4xJ+MYwORbyuZUQpr/b+cP94bDnX3dw7ADvCF2kCgJwAH/SAtxf2rLO\nshxhnU1kGF2UZkaOFe1n2a3Kl/3shYrS8Y78uBvE07n7i1JDgraFo4qyNfpTDm61\nUvqGCKWsIVcH8McPDtSFYhfa1QCxfqcmBPwl7B5fuP8+ES3XRl4+/owbGqbeMrKz\nRymYp8s8huo30y3c/WVwDhuXfsX7WzY3YSFtHDVv7rlO5gdtqbyObQ8nfcBhTjc2\nqqosXZraJdIBf3TvnQyLEiRychoSaX6ralZqCPvQeaiYQy74gKB80gJbYu5Q4HI=\n=vmoK\n-----END PGP SIGNATURE-----\n", "payload": "tree 2121c45a610baf0d8b3ee3ff82778286c67932b9\nparent c91d8dcfb0b32b37c128d87eb9be1bfb66c9e0ce\nparent 6ae988fc3e672dffa1f07672a109747b763180d7\nauthor Ralf Jung <post@ralfj.de> 1539158602 +0200\ncommitter GitHub <noreply@github.com> 1539158602 +0200\n\nMerge pull request #467 from solson/rustup\n\nrustup; test for return type mismatch"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a496ddde2a88ed8a08e4186f433719d14ea14db", "html_url": "https://github.com/rust-lang/rust/commit/5a496ddde2a88ed8a08e4186f433719d14ea14db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a496ddde2a88ed8a08e4186f433719d14ea14db/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c91d8dcfb0b32b37c128d87eb9be1bfb66c9e0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c91d8dcfb0b32b37c128d87eb9be1bfb66c9e0ce", "html_url": "https://github.com/rust-lang/rust/commit/c91d8dcfb0b32b37c128d87eb9be1bfb66c9e0ce"}, {"sha": "6ae988fc3e672dffa1f07672a109747b763180d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae988fc3e672dffa1f07672a109747b763180d7", "html_url": "https://github.com/rust-lang/rust/commit/6ae988fc3e672dffa1f07672a109747b763180d7"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "5fb054b088e466402cfed4db4038a019eed9a797", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a496ddde2a88ed8a08e4186f433719d14ea14db/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/5a496ddde2a88ed8a08e4186f433719d14ea14db/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=5a496ddde2a88ed8a08e4186f433719d14ea14db", "patch": "@@ -1 +1 @@\n-nightly-2018-10-01\n+nightly-2018-10-10"}, {"sha": "e4a389427c52aa249e26e4a34cf1eafae2faa548", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a496ddde2a88ed8a08e4186f433719d14ea14db/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a496ddde2a88ed8a08e4186f433719d14ea14db/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5a496ddde2a88ed8a08e4186f433719d14ea14db", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     const MUT_STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n+    const ENFORCE_VALIDITY: bool = false; // this is still WIP\n \n     /// Returns Ok() when the function was handled, fail otherwise\n     fn find_fn("}, {"sha": "6e903a8f46b3bf8486106799eef4e264ecc995f5", "filename": "src/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a496ddde2a88ed8a08e4186f433719d14ea14db/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a496ddde2a88ed8a08e4186f433719d14ea14db/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=5a496ddde2a88ed8a08e4186f433719d14ea14db", "patch": "@@ -142,8 +142,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     // allocations sit right next to each other.  The C/C++ standards are\n                     // somewhat fuzzy about this case, so I think for now this check is\n                     // \"good enough\".\n-                    self.memory.check_bounds(left, false)?;\n-                    self.memory.check_bounds(right, false)?;\n+                    self.memory.check_bounds_ptr(left, false)?;\n+                    self.memory.check_bounds_ptr(right, false)?;\n                     // Two live in-bounds pointers, we can compare across allocations\n                     left == right\n                 }\n@@ -153,7 +153,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n                 let bits = bits as u64;\n-                let (alloc_size, alloc_align) = self.memory.get_size_and_align(ptr.alloc_id)?;\n+                let (alloc_size, alloc_align) = self.memory.get_size_and_align(ptr.alloc_id);\n \n                 // Case I: Comparing with NULL\n                 if bits == 0 {\n@@ -296,9 +296,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can move around freely, as long as they do not overflow"}, {"sha": "e4ac95e676764bdcfc19b839acb1519f4a9d7044", "filename": "tests/compile-fail/cast_fn_ptr5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a496ddde2a88ed8a08e4186f433719d14ea14db/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a496ddde2a88ed8a08e4186f433719d14ea14db/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs?ref=5a496ddde2a88ed8a08e4186f433719d14ea14db", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    fn f() -> u32 { 42 }\n+\n+    let g = unsafe {\n+        std::mem::transmute::<fn() -> u32, fn()>(f)\n+    };\n+\n+    g() //~ ERROR tried to call a function with return type u32 passing return place of type ()\n+}"}, {"sha": "68826a6ff03d5661b3bffc504f596a88ef0babf6", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a496ddde2a88ed8a08e4186f433719d14ea14db/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a496ddde2a88ed8a08e4186f433719d14ea14db/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=5a496ddde2a88ed8a08e4186f433719d14ea14db", "patch": "@@ -1,8 +1,8 @@\n fn f() {}\n \n fn main() {\n-    let x: i32 = unsafe {\n-        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error: tried to dereference a function pointer\n+    let x: u8 = unsafe {\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR constant evaluation error: tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);\n }"}]}