{"sha": "d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZGIwYThjYWZmYTJjNGUyOGQ5ZTgwNmRlZTE5NDlhNWE1NjRhNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T23:36:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T23:36:04Z"}, "message": "Rollup merge of #71534 - cuviper:unused-option-map, r=Mark-Simulacrum\n\nAvoid unused Option::map results\n\nThese are changes that would be needed if we add `#[must_use]` to `Option::map`, per #71484.\n\nr? @Mark-Simulacrum", "tree": {"sha": "c24f275e3be0459d86c5fde405426291e0fdc93d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24f275e3be0459d86c5fde405426291e0fdc93d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeo3fkCRBK7hj4Ov3rIwAAdHIIAGsHcoGk8Ys4xa4msJfZh5cv\n7/rj8Tzl0b92RcC0OzkOyoqwEMms0ZdfLDGkiiUkThafKvzRbY7BhewugMRXUKf6\nEXKHD4f2RmX6r9JgbTQLpAJalXvWYFlWeuTqHLqOdS2/PJp+w5JxMVLhZ4xSI9Hn\n/1J/vZbdTyqacN+61cOaZdZKRTKsFIm+EBG/0tP2QaQ7nnltw6TxJSvWhXKK43aC\nvdgtg9aZ8Iie0td2O353SSAlk/fb4eyf4lyC9n9JCgT8zj0I//qXPJesEUdxgUe2\n4NUfLrkPkfytCsxQbppFLNphw2SXYlcgqCf56dGKpZ6p8EnKGPDCG7pbra3HIkE=\n=rv5c\n-----END PGP SIGNATURE-----\n", "payload": "tree c24f275e3be0459d86c5fde405426291e0fdc93d\nparent 2ca6df76a53da39698f152e703d519e62f1fc396\nparent 2325c209257a8ce6c11200ebfc152907566f7a04\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587771364 +0200\ncommitter GitHub <noreply@github.com> 1587771364 +0200\n\nRollup merge of #71534 - cuviper:unused-option-map, r=Mark-Simulacrum\n\nAvoid unused Option::map results\n\nThese are changes that would be needed if we add `#[must_use]` to `Option::map`, per #71484.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "html_url": "https://github.com/rust-lang/rust/commit/d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca6df76a53da39698f152e703d519e62f1fc396", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca6df76a53da39698f152e703d519e62f1fc396", "html_url": "https://github.com/rust-lang/rust/commit/2ca6df76a53da39698f152e703d519e62f1fc396"}, {"sha": "2325c209257a8ce6c11200ebfc152907566f7a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/2325c209257a8ce6c11200ebfc152907566f7a04", "html_url": "https://github.com/rust-lang/rust/commit/2325c209257a8ce6c11200ebfc152907566f7a04"}], "stats": {"total": 175, "additions": 111, "deletions": 64}, "files": [{"sha": "c2b2e7ce59f3711a1a27bbc3dfd2c14fbbe2572c", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -98,7 +98,7 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n                         }\n                     }\n \n-                    diagnostic.map(|d| {\n+                    if let Some(d) = diagnostic {\n                         struct_span_err!(d, attr.span, E0633, \"malformed `unwind` attribute input\")\n                             .span_label(attr.span, \"invalid argument\")\n                             .span_suggestions(\n@@ -110,7 +110,7 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n                                 Applicability::MachineApplicable,\n                             )\n                             .emit();\n-                    });\n+                    };\n                 }\n             }\n         }"}, {"sha": "972e75d201b90964dbc095f8822809f797780a04", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -1172,10 +1172,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             // ignore derives so they remain unused\n             let (attr, after_derive) = self.classify_nonitem(&mut expr);\n \n-            if attr.is_some() {\n+            if let Some(ref attr_value) = attr {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n-                attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+                self.cfg.maybe_emit_expr_attr_err(attr_value);\n \n                 // AstFragmentKind::Expr requires the macro to emit an expression.\n                 return self\n@@ -1322,8 +1322,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             // Ignore derives so they remain unused.\n             let (attr, after_derive) = self.classify_nonitem(&mut expr);\n \n-            if attr.is_some() {\n-                attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+            if let Some(ref attr_value) = attr {\n+                self.cfg.maybe_emit_expr_attr_err(attr_value);\n \n                 return self\n                     .collect_attr("}, {"sha": "30cddac6aac91afd8df0fd90a00756fb07721281", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -246,7 +246,7 @@ impl DefPath {\n \n         let mut opt_delimiter = None;\n         for component in &self.data {\n-            opt_delimiter.map(|d| s.push(d));\n+            s.extend(opt_delimiter);\n             opt_delimiter = Some('-');\n             if component.disambiguator == 0 {\n                 write!(s, \"{}\", component.data.as_symbol()).unwrap();"}, {"sha": "8b53019106537275eaa40a8c2e051fbb78f07d8e", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -755,7 +755,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             },\n             ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {\n                 err.span_label(then, \"expected because of this\");\n-                outer.map(|sp| err.span_label(sp, \"`if` and `else` have incompatible types\"));\n+                if let Some(sp) = outer {\n+                    err.span_label(sp, \"`if` and `else` have incompatible types\");\n+                }\n                 if let Some(sp) = semicolon {\n                     err.span_suggestion_short(\n                         sp,"}, {"sha": "e7a863c63ccaaa43bae17772834e8fd41e671083", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -101,9 +101,15 @@ fn dump_crates(cstore: &CStore) {\n         info!(\"  hash: {}\", data.hash());\n         info!(\"  reqd: {:?}\", data.dep_kind());\n         let CrateSource { dylib, rlib, rmeta } = data.source();\n-        dylib.as_ref().map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n-        rlib.as_ref().map(|rl| info!(\"   rlib: {}\", rl.0.display()));\n-        rmeta.as_ref().map(|rl| info!(\"   rmeta: {}\", rl.0.display()));\n+        if let Some(dylib) = dylib {\n+            info!(\"  dylib: {}\", dylib.0.display());\n+        }\n+        if let Some(rlib) = rlib {\n+            info!(\"   rlib: {}\", rlib.0.display());\n+        }\n+        if let Some(rmeta) = rmeta {\n+            info!(\"   rmeta: {}\", rmeta.0.display());\n+        }\n     });\n }\n "}, {"sha": "b9d61458a839b5cb76c5a0353e1937d365206060", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -1388,7 +1388,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         // Insert a Shallow borrow of any places that is switched on.\n-        fake_borrows.as_mut().map(|fb| fb.insert(match_place));\n+        if let Some(fb) = fake_borrows {\n+            fb.insert(match_place);\n+        }\n \n         // perform the test, branching to one of N blocks. For each of\n         // those N possible outcomes, create a (initially empty)"}, {"sha": "9264fc8a7351828fa76f5ece2cd74f9cf2975c70", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -1206,8 +1206,8 @@ pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &Pa\n     *sess.reached_eof.borrow_mut() |=\n         unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());\n     for unmatched in unclosed_delims.drain(..) {\n-        make_unclosed_delims_error(unmatched, sess).map(|mut e| {\n+        if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {\n             e.emit();\n-        });\n+        }\n     }\n }"}, {"sha": "09b3d44020d8160b486cfaa94e70ad1796a4f87e", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -68,7 +68,9 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.with_context(LabeledBlock, |v| v.visit_block(&b));\n             }\n             hir::ExprKind::Break(label, ref opt_expr) => {\n-                opt_expr.as_ref().map(|e| self.visit_expr(e));\n+                if let Some(e) = opt_expr {\n+                    self.visit_expr(e);\n+                }\n \n                 if self.require_label_in_labeled_block(e.span, &label, \"break\") {\n                     // If we emitted an error about an unlabeled break in a labeled"}, {"sha": "5150b278a77222549a9607970ba86625f39eb4ec", "filename": "src/librustc_query_system/query/job.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_query_system%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_query_system%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fjob.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -133,7 +133,11 @@ impl<CTX: QueryContext> QueryJob<CTX> {\n     /// as there are no concurrent jobs which could be waiting on us\n     pub fn signal_complete(self) {\n         #[cfg(parallel_compiler)]\n-        self.latch.map(|latch| latch.set());\n+        {\n+            if let Some(latch) = self.latch {\n+                latch.set();\n+            }\n+        }\n     }\n }\n "}, {"sha": "f369e827a402b29c6dd34f6d6d03bfa9165b3451", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -1996,7 +1996,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     this.visit_expr(cond);\n                     this.visit_block(then);\n                 });\n-                opt_else.as_ref().map(|expr| self.visit_expr(expr));\n+                if let Some(expr) = opt_else {\n+                    self.visit_expr(expr);\n+                }\n             }\n \n             ExprKind::Loop(ref block, label) => self.resolve_labeled_block(label, expr.id, &block),"}, {"sha": "77aa7230aa893fbdf7031385a7f3797cda37155b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -499,7 +499,9 @@ impl<'a> ModuleData<'a> {\n         F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),\n     {\n         for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {\n-            name_resolution.borrow().binding.map(|binding| f(resolver, key.ident, key.ns, binding));\n+            if let Some(binding) = name_resolution.borrow().binding {\n+                f(resolver, key.ident, key.ns, binding);\n+            }\n         }\n     }\n "}, {"sha": "d904046331723ac1c419b8f100ded4cf3860f730", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -979,20 +979,21 @@ impl Target {\n         macro_rules! key {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..]).map(|o| o.as_string()\n-                                    .map(|s| base.options.$key_name = s.to_string()));\n+                if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n+                    base.options.$key_name = s.to_string();\n+                }\n             } );\n             ($key_name:ident, bool) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..])\n-                    .map(|o| o.as_boolean()\n-                         .map(|s| base.options.$key_name = s));\n+                if let Some(s) = obj.find(&name).and_then(Json::as_boolean) {\n+                    base.options.$key_name = s;\n+                }\n             } );\n             ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..])\n-                    .map(|o| o.as_u64()\n-                         .map(|s| base.options.$key_name = Some(s)));\n+                if let Some(s) = obj.find(&name).and_then(Json::as_u64) {\n+                    base.options.$key_name = Some(s);\n+                }\n             } );\n             ($key_name:ident, MergeFunctions) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n@@ -1034,19 +1035,19 @@ impl Target {\n             } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..]).map(|o| o.as_array()\n-                    .map(|v| base.options.$key_name = v.iter()\n-                        .map(|a| a.as_string().unwrap().to_string()).collect()\n-                        )\n-                    );\n+                if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n+                    base.options.$key_name = v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string())\n+                        .collect();\n+                }\n             } );\n             ($key_name:ident, opt_list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..]).map(|o| o.as_array()\n-                    .map(|v| base.options.$key_name = Some(v.iter()\n-                        .map(|a| a.as_string().unwrap().to_string()).collect())\n-                        )\n-                    );\n+                if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n+                    base.options.$key_name = Some(v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string())\n+                        .collect());\n+                }\n             } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");"}, {"sha": "c7d749815febb9555612ce2ca7130150cf6f7b5a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -213,7 +213,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             None,\n         );\n \n-        assoc_bindings.first().map(|b| Self::prohibit_assoc_ty_binding(self.tcx(), b.span));\n+        if let Some(b) = assoc_bindings.first() {\n+            Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n+        }\n \n         substs\n     }\n@@ -1095,7 +1097,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ) -> ty::TraitRef<'tcx> {\n         let (substs, assoc_bindings, _) =\n             self.create_substs_for_ast_trait_ref(span, trait_def_id, self_ty, trait_segment);\n-        assoc_bindings.first().map(|b| AstConv::prohibit_assoc_ty_binding(self.tcx(), b.span));\n+        if let Some(b) = assoc_bindings.first() {\n+            AstConv::prohibit_assoc_ty_binding(self.tcx(), b.span);\n+        }\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n "}, {"sha": "c75283e419a6d5da928552e1c75a46afbcecfaa1", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -36,7 +36,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Requires that the two types unify, and prints an error message if\n     // they don't.\n     pub fn demand_suptype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-        self.demand_suptype_diag(sp, expected, actual).map(|mut e| e.emit());\n+        if let Some(mut e) = self.demand_suptype_diag(sp, expected, actual) {\n+            e.emit();\n+        }\n     }\n \n     pub fn demand_suptype_diag("}, {"sha": "b7e86c0791f634d8b27925613bdcd41a4ac9e8a5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -4492,15 +4492,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => Err(ErrorReported),\n             };\n             if item_name.name != kw::Invalid {\n-                self.report_method_error(\n+                if let Some(mut e) = self.report_method_error(\n                     span,\n                     ty,\n                     item_name,\n                     SelfSource::QPath(qself),\n                     error,\n                     None,\n-                )\n-                .map(|mut e| e.emit());\n+                ) {\n+                    e.emit();\n+                }\n             }\n             result\n         });"}, {"sha": "8e109efbcb576362ddd10f25e477d8fd8af07dc5", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -104,7 +104,9 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) {\n-        self.demand_eqtype_pat_diag(cause_span, expected, actual, ti).map(|mut err| err.emit());\n+        if let Some(mut err) = self.demand_eqtype_pat_diag(cause_span, expected, actual, ti) {\n+            err.emit();\n+        }\n     }\n }\n \n@@ -449,12 +451,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Subtyping doesn't matter here, as the value is some kind of scalar.\n         let demand_eqtype = |x, y| {\n             if let Some((_, x_ty, x_span)) = x {\n-                self.demand_eqtype_pat_diag(x_span, expected, x_ty, ti).map(|mut err| {\n+                if let Some(mut err) = self.demand_eqtype_pat_diag(x_span, expected, x_ty, ti) {\n                     if let Some((_, y_ty, y_span)) = y {\n                         self.endpoint_has_type(&mut err, y_span, y_ty);\n                     }\n                     err.emit();\n-                });\n+                };\n             }\n         };\n         demand_eqtype(lhs, rhs);\n@@ -852,8 +854,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Type-check the tuple struct pattern against the expected type.\n         let diag = self.demand_eqtype_pat_diag(pat.span, expected, pat_ty, ti);\n-        let had_err = diag.is_some();\n-        diag.map(|mut err| err.emit());\n+        let had_err = if let Some(mut err) = diag {\n+            err.emit();\n+            true\n+        } else {\n+            false\n+        };\n \n         // Type-check subpatterns.\n         if subpats.len() == variant.fields.len()"}, {"sha": "c5bf151bc1e11083ff42ba0e7293ee9052792a84", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -165,12 +165,18 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                         hir::ExprKind::Binary(..) => {\n                             if !op.node.is_by_value() {\n                                 let mut adjustments = tables.adjustments_mut();\n-                                adjustments.get_mut(lhs.hir_id).map(|a| a.pop());\n-                                adjustments.get_mut(rhs.hir_id).map(|a| a.pop());\n+                                if let Some(a) = adjustments.get_mut(lhs.hir_id) {\n+                                    a.pop();\n+                                }\n+                                if let Some(a) = adjustments.get_mut(rhs.hir_id) {\n+                                    a.pop();\n+                                }\n                             }\n                         }\n                         hir::ExprKind::AssignOp(..) => {\n-                            tables.adjustments_mut().get_mut(lhs.hir_id).map(|a| a.pop());\n+                            if let Some(a) = tables.adjustments_mut().get_mut(lhs.hir_id) {\n+                                a.pop();\n+                            }\n                         }\n                         _ => {}\n                     }\n@@ -215,7 +221,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     tables.type_dependent_defs_mut().remove(e.hir_id);\n                     tables.node_substs_mut().remove(e.hir_id);\n \n-                    tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n+                    if let Some(a) = tables.adjustments_mut().get_mut(base.hir_id) {\n                         // Discard the need for a mutable borrow\n \n                         // Extra adjustment made when indexing causes a drop\n@@ -229,7 +235,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                             // So the borrow discard actually happens here\n                             a.pop();\n                         }\n-                    });\n+                    }\n                 }\n             }\n         }"}, {"sha": "63ab0ef5f1728129f0a12bd5e3b60c61af9a2dd5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -1599,7 +1599,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                 let mut param_names = vec![];\n-                reg.clean(cx).map(|b| param_names.push(GenericBound::Outlives(b)));\n+                if let Some(b) = reg.clean(cx) {\n+                    param_names.push(GenericBound::Outlives(b));\n+                }\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path =\n@@ -1662,10 +1664,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             tr\n                         } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n                             // these should turn up at the end\n-                            pred.skip_binder()\n-                                .1\n-                                .clean(cx)\n-                                .map(|r| regions.push(GenericBound::Outlives(r)));\n+                            if let Some(r) = pred.skip_binder().1.clean(cx) {\n+                                regions.push(GenericBound::Outlives(r));\n+                            }\n                             return None;\n                         } else {\n                             return None;"}, {"sha": "37540295774754a7d8939ab3cc2a6a1d06eb32a9", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -94,7 +94,7 @@ impl TocBuilder {\n         loop {\n             match self.chain.pop() {\n                 Some(mut next) => {\n-                    this.map(|e| next.children.entries.push(e));\n+                    next.children.entries.extend(this);\n                     if next.level < level {\n                         // this is the parent we want, so return it to\n                         // its rightful place.\n@@ -105,7 +105,7 @@ impl TocBuilder {\n                     }\n                 }\n                 None => {\n-                    this.map(|e| self.top_level.entries.push(e));\n+                    self.top_level.entries.extend(this);\n                     return;\n                 }\n             }"}, {"sha": "fd9d61e99c2cd2d3b39f935c94cf5573422e3501", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -91,7 +91,7 @@ impl<T> Packet<T> {\n     //\n     // This can only be called at channel-creation time\n     pub fn inherit_blocker(&self, token: Option<SignalToken>, guard: MutexGuard<'_, ()>) {\n-        token.map(|token| {\n+        if let Some(token) = token {\n             assert_eq!(self.cnt.load(Ordering::SeqCst), 0);\n             assert_eq!(self.to_wake.load(Ordering::SeqCst), 0);\n             self.to_wake.store(unsafe { token.cast_to_usize() }, Ordering::SeqCst);\n@@ -118,7 +118,7 @@ impl<T> Packet<T> {\n             unsafe {\n                 *self.steals.get() = -1;\n             }\n-        });\n+        }\n \n         // When the shared packet is constructed, we grabbed this lock. The\n         // purpose of this lock is to ensure that abort_selection() doesn't"}, {"sha": "79123903e92a5ac2cdd01676076efdc151778aa0", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0db0a8caffa2c4e28d9e806dee1949a5a564a66/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=d0db0a8caffa2c4e28d9e806dee1949a5a564a66", "patch": "@@ -343,8 +343,12 @@ impl<T> Packet<T> {\n         mem::drop(guard);\n \n         // only outside of the lock do we wake up the pending threads\n-        pending_sender1.map(|t| t.signal());\n-        pending_sender2.map(|t| t.signal());\n+        if let Some(token) = pending_sender1 {\n+            token.signal();\n+        }\n+        if let Some(token) = pending_sender2 {\n+            token.signal();\n+        }\n     }\n \n     // Prepares this shared packet for a channel clone, essentially just bumping\n@@ -410,7 +414,9 @@ impl<T> Packet<T> {\n         while let Some(token) = queue.dequeue() {\n             token.signal();\n         }\n-        waiter.map(|t| t.signal());\n+        if let Some(token) = waiter {\n+            token.signal();\n+        }\n     }\n }\n "}]}