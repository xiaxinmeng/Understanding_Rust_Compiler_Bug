{"sha": "5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzg0MWNhMmZlNWNmMGJhNzE0ZGI0MmEyOWE4MDA0YTg3OGI2ZTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-07T14:17:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: rename PrintContext to PrintCx.", "tree": {"sha": "0dcda91317c0958998fa64238fcb88412bd0b13f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dcda91317c0958998fa64238fcb88412bd0b13f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "html_url": "https://github.com/rust-lang/rust/commit/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6848141026853e8d59cf8b6f3a3bb2f76e06128", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6848141026853e8d59cf8b6f3a3bb2f76e06128", "html_url": "https://github.com/rust-lang/rust/commit/c6848141026853e8d59cf8b6f3a3bb2f76e06128"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "ebed768fa54ec08552433814981dcfc05e56313f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "patch": "@@ -683,7 +683,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// For generic types with parameters with defaults, remove the parameters corresponding to\n-    /// the defaults. This repeats a lot of the logic found in `PrintContext::parameterized`.\n+    /// the defaults. This repeats a lot of the logic found in `PrintCx::parameterized`.\n     fn strip_generic_default_params(\n         &self,\n         def_id: DefId,"}, {"sha": "3d6dec8a141f7c7085b75d359446680c8878058c", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "patch": "@@ -22,7 +22,7 @@ impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n }\n \n #[derive(Debug)]\n-pub struct PrintContext {\n+pub struct PrintCx {\n     pub(crate) is_debug: bool,\n     pub(crate) is_verbose: bool,\n     pub(crate) identify_regions: bool,\n@@ -31,12 +31,12 @@ pub struct PrintContext {\n     pub(crate) binder_depth: usize,\n }\n \n-impl PrintContext {\n+impl PrintCx {\n     pub(crate) fn new() -> Self {\n         ty::tls::with(|tcx| {\n             let (is_verbose, identify_regions) =\n                 (tcx.sess.verbose(), tcx.sess.opts.debugging_opts.identify_regions);\n-            PrintContext {\n+            PrintCx {\n                 is_debug: false,\n                 is_verbose: is_verbose,\n                 identify_regions: identify_regions,\n@@ -57,32 +57,32 @@ impl PrintContext {\n }\n \n pub trait Print<'tcx> {\n-    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result;\n-    fn print_to_string(&self, cx: &mut PrintContext) -> String {\n+    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintCx) -> fmt::Result;\n+    fn print_to_string(&self, cx: &mut PrintCx) -> String {\n         let mut result = String::new();\n         let _ = self.print(&mut result, cx);\n         result\n     }\n-    fn print_display<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n+    fn print_display<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintCx) -> fmt::Result {\n         let old_debug = cx.is_debug;\n         cx.is_debug = false;\n         let result = self.print(f, cx);\n         cx.is_debug = old_debug;\n         result\n     }\n-    fn print_display_to_string(&self, cx: &mut PrintContext) -> String {\n+    fn print_display_to_string(&self, cx: &mut PrintCx) -> String {\n         let mut result = String::new();\n         let _ = self.print_display(&mut result, cx);\n         result\n     }\n-    fn print_debug<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n+    fn print_debug<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintCx) -> fmt::Result {\n         let old_debug = cx.is_debug;\n         cx.is_debug = true;\n         let result = self.print(f, cx);\n         cx.is_debug = old_debug;\n         result\n     }\n-    fn print_debug_to_string(&self, cx: &mut PrintContext) -> String {\n+    fn print_debug_to_string(&self, cx: &mut PrintCx) -> String {\n         let mut result = String::new();\n         let _ = self.print_debug(&mut result, cx);\n         result"}, {"sha": "683e0aa0dab62ba5029138183dc99bc3d524eacd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3841ca2fe5cf0ba714db42a29a8004a878b6e6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5f3841ca2fe5cf0ba714db42a29a8004a878b6e6", "patch": "@@ -9,7 +9,7 @@ use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind, ParamConst};\n-use crate::ty::print::{PrintContext, Print};\n+use crate::ty::print::{PrintCx, Print};\n use crate::mir::interpret::ConstValue;\n \n use std::cell::Cell;\n@@ -182,7 +182,7 @@ impl RegionHighlightMode {\n macro_rules! gen_display_debug_body {\n     ( $with:path ) => {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let mut cx = PrintContext::new();\n+            let mut cx = PrintCx::new();\n             $with(self, f, &mut cx)\n         }\n     };\n@@ -213,15 +213,15 @@ macro_rules! gen_display_debug {\n macro_rules! gen_print_impl {\n     ( ($($x:tt)+) $target:ty, ($self:ident, $f:ident, $cx:ident) $disp:block $dbg:block ) => {\n         impl<$($x)+> Print<'tcx> for $target {\n-            fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintContext) -> fmt::Result {\n+            fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintCx) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n             }\n         }\n     };\n     ( () $target:ty, ($self:ident, $f:ident, $cx:ident) $disp:block $dbg:block ) => {\n         impl Print<'tcx> for $target {\n-            fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintContext) -> fmt::Result {\n+            fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintCx) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n             }\n@@ -275,7 +275,7 @@ macro_rules! print {\n     };\n }\n \n-impl PrintContext {\n+impl PrintCx {\n     fn fn_sig<F: fmt::Write>(&mut self,\n                              f: &mut F,\n                              inputs: &[Ty<'_>],\n@@ -618,11 +618,11 @@ pub fn parameterized<F: fmt::Write>(f: &mut F,\n                                     did: DefId,\n                                     projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n-    PrintContext::new().parameterized(f, substs, did, projections)\n+    PrintCx::new().parameterized(f, substs, did, projections)\n }\n \n impl<'a, 'tcx, T: Print<'tcx>> Print<'tcx> for &'a T {\n-    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n+    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintCx) -> fmt::Result {\n         (*self).print(f, cx)\n     }\n }"}]}