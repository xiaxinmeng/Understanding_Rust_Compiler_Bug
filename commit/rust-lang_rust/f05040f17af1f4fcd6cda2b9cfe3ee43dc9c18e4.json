{"sha": "f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTA0MGYxN2FmMWY0ZmNkNmNkYTJiOWNmZTNlZTQzZGM5YzE4ZTQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-30T21:54:38Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-31T00:39:53Z"}, "message": "Use std::deque now that the bugs are fixed. Also, avoid a few copies.", "tree": {"sha": "29f98e9a7d3604cbaa082e7e9a683c3cd3bf373a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f98e9a7d3604cbaa082e7e9a683c3cd3bf373a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4", "html_url": "https://github.com/rust-lang/rust/commit/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5757923cd1ad20fdee7571aeaa0be445e51f379", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5757923cd1ad20fdee7571aeaa0be445e51f379", "html_url": "https://github.com/rust-lang/rust/commit/e5757923cd1ad20fdee7571aeaa0be445e51f379"}], "stats": {"total": 53, "additions": 7, "deletions": 46}, "files": [{"sha": "70e81e8bdd71c3f09b37595d8ddf613b9abccbec", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=f05040f17af1f4fcd6cda2b9cfe3ee43dc9c18e4", "patch": "@@ -20,45 +20,6 @@ type node_id = i64;\n type graph = [[node_id]];\n type bfs_result = [node_id];\n \n-iface queue<T: send> {\n-    fn add_back(T);\n-    fn pop_front() -> T;\n-    fn size() -> uint;\n-}\n-\n-#[doc=\"Creates a queue based on ports and channels.\n-\n-This is admittedly not ideal, but it will help us work around the deque\n-bugs for the time being.\"]\n-fn create_queue<T: send>() -> queue<T> {\n-    type repr<T: send> = {\n-        p : port<T>,\n-        c : chan<T>,\n-        mut s : uint,\n-    };\n-\n-    let p = port();\n-    let c = chan(p);\n-\n-    impl<T: copy send> of queue<T> for repr<T> {\n-        fn add_back(x : T) {\n-            let x = x;\n-            send(self.c, x);\n-            self.s += 1u;\n-        }\n-\n-        fn pop_front() -> T {\n-            self.s -= 1u;\n-            recv(self.p)\n-        }\n-\n-        fn size() -> uint { self.s }\n-    }\n-\n-    let Q : repr<T> = { p : p, c : c, mut s : 0u };\n-    Q as queue::<T>\n-}\n-\n fn make_edges(scale: uint, edgefactor: uint) -> [(node_id, node_id)] {\n     let r = rand::rng();\n \n@@ -145,7 +106,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n     let marks : [mut node_id] \n         = vec::to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n-    let Q = create_queue();\n+    let Q = deque::create();\n \n     Q.add_back(key);\n     marks[key] = key;\n@@ -266,7 +227,7 @@ fn pbfs(graph: graph, key: node_id) -> bfs_result {\n         }\n     }\n \n-    let (res, graph) = arc::shared_arc(copy graph);\n+    let (_res, graph) = arc::shared_arc(copy graph);\n \n     let mut i = 0u;\n     while par::any(colors, is_gray) {\n@@ -275,24 +236,24 @@ fn pbfs(graph: graph, key: node_id) -> bfs_result {\n         i += 1u;\n         let old_len = colors.len();\n \n-        let (res, color) = arc::shared_arc(copy colors);\n+        let (_res, color) = arc::shared_arc(copy colors);\n \n         colors = par::mapi(colors) {|i, c|\n             let c : color = c;\n             let colors = &arc::get_arc(color);\n-            let colors : [color] = *arc::get(colors);\n+            let colors = arc::get(colors);\n             let graph = &arc::get_arc(graph);\n-            let graph : graph = *arc::get(graph);\n+            let graph = arc::get(graph);\n             alt c {\n               white {\n                 let i = i as node_id;\n                 \n-                let neighbors = graph[i];\n+                let neighbors = (*graph)[i];\n                 \n                 let mut color = white;\n                 \n                 neighbors.each() {|k|\n-                    if is_gray(colors[k]) {\n+                    if is_gray((*colors)[k]) {\n                         color = gray(k);\n                         false\n                     }"}]}