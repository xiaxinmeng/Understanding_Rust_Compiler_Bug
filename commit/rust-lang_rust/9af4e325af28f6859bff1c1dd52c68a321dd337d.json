{"sha": "9af4e325af28f6859bff1c1dd52c68a321dd337d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjRlMzI1YWYyOGY2ODU5YmZmMWMxZGQ1MmM2OGEzMjFkZDMzN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-19T08:35:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-19T08:35:55Z"}, "message": "auto merge of #16582 : Gankro/rust/bitv, r=alexcrichton\n\nThis was bothering me (and some other people). The macro was necessary in a transient step of my development, but I converged on a design where it was unnecessary, but it didn't really click that that had happened.\r\n\r\nThis fixes it up.", "tree": {"sha": "1d61655ef6d09d130888b208d0508395da68cf9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d61655ef6d09d130888b208d0508395da68cf9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af4e325af28f6859bff1c1dd52c68a321dd337d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af4e325af28f6859bff1c1dd52c68a321dd337d", "html_url": "https://github.com/rust-lang/rust/commit/9af4e325af28f6859bff1c1dd52c68a321dd337d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af4e325af28f6859bff1c1dd52c68a321dd337d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d16a5cd7c4d37c947faf4661b22e994409197809", "url": "https://api.github.com/repos/rust-lang/rust/commits/d16a5cd7c4d37c947faf4661b22e994409197809", "html_url": "https://github.com/rust-lang/rust/commit/d16a5cd7c4d37c947faf4661b22e994409197809"}, {"sha": "dcccf824b1096cc596671724ebf42b8d3ed35705", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcccf824b1096cc596671724ebf42b8d3ed35705", "html_url": "https://github.com/rust-lang/rust/commit/dcccf824b1096cc596671724ebf42b8d3ed35705"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "e89d66578b0bb61062cf84b7057c85b790a1b456", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9af4e325af28f6859bff1c1dd52c68a321dd337d/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af4e325af28f6859bff1c1dd52c68a321dd337d/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=9af4e325af28f6859bff1c1dd52c68a321dd337d", "patch": "@@ -66,7 +66,7 @@ use core::prelude::*;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n-use core::iter::Take;\n+use core::iter::{Chain, Enumerate, Repeat, Skip, Take};\n use core::iter;\n use core::slice;\n use core::uint;\n@@ -75,25 +75,22 @@ use std::hash;\n use {Mutable, Set, MutableSet, MutableSeq};\n use vec::Vec;\n \n+type MatchWords<'a> = Chain<MaskWords<'a>, Skip<Take<Enumerate<Repeat<uint>>>>>;\n // Take two BitV's, and return iterators of their words, where the shorter one\n // has been padded with 0's\n-macro_rules! match_words(\n-    ($a_expr:expr, $b_expr:expr) => ({\n-        let a = $a_expr;\n-        let b = $b_expr;\n-        let a_len = a.storage.len();\n-        let b_len = b.storage.len();\n-\n-        // have to uselessly pretend to pad the longer one for type matching\n-        if a_len < b_len {\n-            (a.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(b_len).skip(a_len)),\n-             b.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(0).skip(0)))\n-        } else {\n-            (a.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(0).skip(0)),\n-             b.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(a_len).skip(b_len)))\n-        }\n-    })\n-)\n+fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<'b>) {\n+    let a_len = a.storage.len();\n+    let b_len = b.storage.len();\n+\n+    // have to uselessly pretend to pad the longer one for type matching\n+    if a_len < b_len {\n+        (a.mask_words(0).chain(Repeat::new(0u).enumerate().take(b_len).skip(a_len)),\n+         b.mask_words(0).chain(Repeat::new(0u).enumerate().take(0).skip(0)))\n+    } else {\n+        (a.mask_words(0).chain(Repeat::new(0u).enumerate().take(0).skip(0)),\n+         b.mask_words(0).chain(Repeat::new(0u).enumerate().take(a_len).skip(b_len)))\n+    }\n+}\n \n static TRUE: bool = true;\n static FALSE: bool = false;\n@@ -1014,23 +1011,23 @@ impl Extendable<bool> for BitvSet {\n impl PartialOrd for BitvSet {\n     #[inline]\n     fn partial_cmp(&self, other: &BitvSet) -> Option<Ordering> {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::partial_cmp(a_iter, b_iter)\n     }\n }\n \n impl Ord for BitvSet {\n     #[inline]\n     fn cmp(&self, other: &BitvSet) -> Ordering {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::cmp(a_iter, b_iter)\n     }\n }\n \n impl cmp::PartialEq for BitvSet {\n     #[inline]\n     fn eq(&self, other: &BitvSet) -> bool {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::eq(a_iter, b_iter)\n     }\n }\n@@ -1191,10 +1188,10 @@ impl BitvSet {\n         self_bitv.reserve(other_bitv.capacity());\n \n         // virtually pad other with 0's for equal lengths\n-        let self_len = self_bitv.storage.len();\n-        let other_len =  other_bitv.storage.len();\n-        let mut other_words = other_bitv.mask_words(0)\n-         .chain(iter::Repeat::new(0u).enumerate().take(self_len).skip(other_len));\n+        let mut other_words = {\n+            let (_, result) = match_words(self_bitv, other_bitv);\n+            result\n+        };\n \n         // Apply values found in other\n         for (i, w) in other_words {\n@@ -1524,7 +1521,7 @@ impl Set<uint> for BitvSet {\n \n     #[inline]\n     fn is_disjoint(&self, other: &BitvSet) -> bool {\n-        self.intersection(other).count() > 0\n+        self.intersection(other).next().is_none()\n     }\n \n     #[inline]\n@@ -2266,6 +2263,24 @@ mod tests {\n         assert!(set1.is_subset(&set2)); // { 2 }  { 2, 4 }\n     }\n \n+    #[test]\n+    fn test_bitv_set_is_disjoint() {\n+        let a = BitvSet::from_bitv(from_bytes([0b10100010]));\n+        let b = BitvSet::from_bitv(from_bytes([0b01000000]));\n+        let c = BitvSet::new();\n+        let d = BitvSet::from_bitv(from_bytes([0b00110000]));\n+\n+        assert!(!a.is_disjoint(&d));\n+        assert!(!d.is_disjoint(&a));\n+\n+        assert!(a.is_disjoint(&b))\n+        assert!(a.is_disjoint(&c))\n+        assert!(b.is_disjoint(&a))\n+        assert!(b.is_disjoint(&c))\n+        assert!(c.is_disjoint(&a))\n+        assert!(c.is_disjoint(&b))\n+    }\n+\n     #[test]\n     fn test_bitv_set_intersect_with() {\n         // Explicitly 0'ed bits"}]}