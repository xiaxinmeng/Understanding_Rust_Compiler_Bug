{"sha": "1f95c91c887acb2d0c49f549a07025178b818d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTVjOTFjODg3YWNiMmQwYzQ5ZjU0OWEwNzAyNTE3OGI4MThkODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T14:34:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T14:34:20Z"}, "message": "Auto merge of #79613 - GuillaumeGomez:doc-keyword-checks, r=oli-obk\n\nAdd checks for #[doc(keyword = \"...\")] attribute\n\nThe goal here is to extend check for `#[doc(keyword = \"...\")]`.\n\ncc `@jyn514`\nr? `@oli-obk`", "tree": {"sha": "8e1cc6e3d84e6a843b4c01cbcf1613f48a9cc2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1cc6e3d84e6a843b4c01cbcf1613f48a9cc2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f95c91c887acb2d0c49f549a07025178b818d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f95c91c887acb2d0c49f549a07025178b818d87", "html_url": "https://github.com/rust-lang/rust/commit/1f95c91c887acb2d0c49f549a07025178b818d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f95c91c887acb2d0c49f549a07025178b818d87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220352781c2585f0efb07ab0e758b136514de5b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/220352781c2585f0efb07ab0e758b136514de5b8", "html_url": "https://github.com/rust-lang/rust/commit/220352781c2585f0efb07ab0e758b136514de5b8"}, {"sha": "15f9453a260ffc035ea3797c6939b1f61acd3e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f9453a260ffc035ea3797c6939b1f61acd3e6d", "html_url": "https://github.com/rust-lang/rust/commit/15f9453a260ffc035ea3797c6939b1f61acd3e6d"}], "stats": {"total": 300, "additions": 194, "deletions": 106}, "files": [{"sha": "85be4c392afae3eaf9b1978e6183afa77037329b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -4011,6 +4011,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_lexer\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "c87799f1c2acc8dcba61750a647a86a8e269feaf", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -18,3 +18,4 @@ rustc_ast = { path = \"../rustc_ast\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_lexer = { path = \"../rustc_lexer\" }"}, {"sha": "fc97ca035b9b4028e8475f89a3ba71c266d20c4c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 139, "deletions": 79, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -78,7 +78,7 @@ impl CheckAttrVisitor<'tcx> {\n             } else if self.tcx.sess.check_name(attr, sym::track_caller) {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n-                self.check_doc_alias(attr, hir_id, target)\n+                self.check_doc_attrs(attr, hir_id, target)\n             } else if self.tcx.sess.check_name(attr, sym::no_link) {\n                 self.check_no_link(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::export_name) {\n@@ -287,99 +287,159 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn doc_alias_str_error(&self, meta: &NestedMetaItem) {\n+    fn doc_attr_str_error(&self, meta: &NestedMetaItem, attr_name: &str) {\n         self.tcx\n             .sess\n             .struct_span_err(\n                 meta.span(),\n-                \"doc alias attribute expects a string: #[doc(alias = \\\"0\\\")]\",\n+                &format!(\"doc {0} attribute expects a string: #[doc({0} = \\\"a\\\")]\", attr_name),\n             )\n             .emit();\n     }\n \n-    fn check_doc_alias(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n+    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n+        let doc_alias = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n+        if doc_alias.is_empty() {\n+            self.doc_attr_str_error(meta, \"alias\");\n+            return false;\n+        }\n+        if let Some(c) =\n+            doc_alias.chars().find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n+        {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                    &format!(\"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\", c,),\n+                )\n+                .emit();\n+            return false;\n+        }\n+        if doc_alias.starts_with(' ') || doc_alias.ends_with(' ') {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                    \"`#[doc(alias = \\\"...\\\")]` cannot start or end with ' '\",\n+                )\n+                .emit();\n+            return false;\n+        }\n+        if let Some(err) = match target {\n+            Target::Impl => Some(\"implementation block\"),\n+            Target::ForeignMod => Some(\"extern block\"),\n+            Target::AssocTy => {\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                if Target::from_item(containing_item) == Target::Impl {\n+                    Some(\"type alias in implementation block\")\n+                } else {\n+                    None\n+                }\n+            }\n+            Target::AssocConst => {\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                // We can't link to trait impl's consts.\n+                let err = \"associated constant in trait implementation block\";\n+                match containing_item.kind {\n+                    ItemKind::Impl { of_trait: Some(_), .. } => Some(err),\n+                    _ => None,\n+                }\n+            }\n+            _ => None,\n+        } {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.span(),\n+                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err),\n+                )\n+                .emit();\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn check_doc_keyword(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+        let doc_keyword = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n+        if doc_keyword.is_empty() {\n+            self.doc_attr_str_error(meta, \"keyword\");\n+            return false;\n+        }\n+        match self.tcx.hir().expect_item(hir_id).kind {\n+            ItemKind::Mod(ref module) => {\n+                if !module.item_ids.is_empty() {\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(\n+                            meta.span(),\n+                            \"`#[doc(keyword = \\\"...\\\")]` can only be used on empty modules\",\n+                        )\n+                        .emit();\n+                    return false;\n+                }\n+            }\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        meta.span(),\n+                        \"`#[doc(keyword = \\\"...\\\")]` can only be used on modules\",\n+                    )\n+                    .emit();\n+                return false;\n+            }\n+        }\n+        if !rustc_lexer::is_ident(&doc_keyword) {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                    &format!(\"`{}` is not a valid identifier\", doc_keyword),\n+                )\n+                .emit();\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn check_attr_crate_level(\n+        &self,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+        attr_name: &str,\n+    ) -> bool {\n+        if CRATE_HIR_ID == hir_id {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.span(),\n+                    &format!(\n+                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate level attribute\",\n+                        attr_name,\n+                    ),\n+                )\n+                .emit();\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n         if let Some(mi) = attr.meta() {\n             if let Some(list) = mi.meta_item_list() {\n                 for meta in list {\n                     if meta.has_name(sym::alias) {\n-                        if !meta.is_value_str() {\n-                            self.doc_alias_str_error(meta);\n-                            return false;\n-                        }\n-                        let doc_alias =\n-                            meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n-                        if doc_alias.is_empty() {\n-                            self.doc_alias_str_error(meta);\n-                            return false;\n-                        }\n-                        if let Some(c) = doc_alias\n-                            .chars()\n-                            .find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n+                        if !self.check_attr_crate_level(meta, hir_id, \"alias\")\n+                            || !self.check_doc_alias(meta, hir_id, target)\n                         {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                                    &format!(\n-                                        \"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\",\n-                                        c,\n-                                    ),\n-                                )\n-                                .emit();\n                             return false;\n                         }\n-                        if doc_alias.starts_with(' ') || doc_alias.ends_with(' ') {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                                    \"`#[doc(alias = \\\"...\\\")]` cannot start or end with ' '\",\n-                                )\n-                                .emit();\n-                            return false;\n-                        }\n-                        if let Some(err) = match target {\n-                            Target::Impl => Some(\"implementation block\"),\n-                            Target::ForeignMod => Some(\"extern block\"),\n-                            Target::AssocTy => {\n-                                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n-                                if Target::from_item(containing_item) == Target::Impl {\n-                                    Some(\"type alias in implementation block\")\n-                                } else {\n-                                    None\n-                                }\n-                            }\n-                            Target::AssocConst => {\n-                                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n-                                // We can't link to trait impl's consts.\n-                                let err = \"associated constant in trait implementation block\";\n-                                match containing_item.kind {\n-                                    ItemKind::Impl { of_trait: Some(_), .. } => Some(err),\n-                                    _ => None,\n-                                }\n-                            }\n-                            _ => None,\n-                        } {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    meta.span(),\n-                                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err),\n-                                )\n-                                .emit();\n-                            return false;\n-                        }\n-                        if CRATE_HIR_ID == hir_id {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    meta.span(),\n-                                    \"`#![doc(alias = \\\"...\\\")]` isn't allowed as a crate \\\n-                                     level attribute\",\n-                                )\n-                                .emit();\n+                    } else if meta.has_name(sym::keyword) {\n+                        if !self.check_attr_crate_level(meta, hir_id, \"keyword\")\n+                            || !self.check_doc_keyword(meta, hir_id)\n+                        {\n                             return false;\n                         }\n                     }"}, {"sha": "a3c28be313792858b58b08dc160b3ad968f1d0b0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -162,29 +162,14 @@ impl Clean<ExternalCrate> for CrateNum {\n                 .collect()\n         };\n \n-        let get_span =\n-            |attr: &ast::NestedMetaItem| Some(attr.meta_item()?.name_value_literal()?.span);\n-\n         let as_keyword = |res: Res| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let attrs = cx.tcx.get_attrs(def_id).clean(cx);\n                 let mut keyword = None;\n                 for attr in attrs.lists(sym::doc) {\n                     if attr.has_name(sym::keyword) {\n                         if let Some(v) = attr.value_str() {\n-                            let k = v.to_string();\n-                            if !rustc_lexer::is_ident(&k) {\n-                                let sp = get_span(&attr).unwrap_or_else(|| attr.span());\n-                                cx.tcx\n-                                    .sess\n-                                    .struct_span_err(\n-                                        sp,\n-                                        &format!(\"`{}` is not a valid identifier\", v),\n-                                    )\n-                                    .emit();\n-                            } else {\n-                                keyword = Some(k);\n-                            }\n+                            keyword = Some(v.to_string());\n                             break;\n                         }\n                     }"}, {"sha": "1c7fc83bb8dea5d3dae401f52f136cd8094c3d09", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -1,16 +1,16 @@\n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:6:7\n    |\n LL | #[doc(alias)]\n    |       ^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:7:7\n    |\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:8:7\n    |\n LL | #[doc(alias(\"bar\"))]"}, {"sha": "dce325f9d3898dd3a6be401fae4d04009876ea3e", "filename": "src/test/ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -1,16 +1,16 @@\n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:7:7\n    |\n LL | #[doc(alias)]\n    |       ^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:8:7\n    |\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n   --> $DIR/check-doc-alias-attr.rs:9:7\n    |\n LL | #[doc(alias(\"bar\"))]"}, {"sha": "9b596ece5b55aec39fb8c2c4574cc190def8d3a5", "filename": "src/test/ui/doc-alias-crate-level.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -4,4 +4,7 @@\n \n #![crate_type = \"lib\"]\n \n-#![doc(alias = \"shouldn't work!\")] //~ ERROR\n+#![doc(alias = \"not working!\")] //~ ERROR\n+\n+#[doc(alias = \"shouldn't work!\")] //~ ERROR\n+pub struct Foo;"}, {"sha": "b6437fad5d05a557bf4fbd33eb523d24c13d5a64", "filename": "src/test/ui/doc-alias-crate-level.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -1,8 +1,14 @@\n error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n-  --> $DIR/doc-alias-crate-level.rs:7:16\n+  --> $DIR/doc-alias-crate-level.rs:9:15\n    |\n-LL | #![doc(alias = \"shouldn't work!\")]\n-   |                ^^^^^^^^^^^^^^^^^\n+LL | #[doc(alias = \"shouldn't work!\")]\n+   |               ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+  --> $DIR/doc-alias-crate-level.rs:7:8\n+   |\n+LL | #![doc(alias = \"not working!\")]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "4c72e7e96842cb8ad6bfae46999eba8eb1cfce68", "filename": "src/test/ui/doc_keyword.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc_keyword.rs?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type = \"lib\"]\n+#![feature(doc_keyword)]\n+\n+#![doc(keyword = \"hello\")] //~ ERROR\n+\n+#[doc(keyword = \"hell\")] //~ ERROR\n+mod foo {\n+    fn hell() {}\n+}\n+\n+#[doc(keyword = \"hall\")] //~ ERROR\n+fn foo() {}"}, {"sha": "d72a876163eb302975d78f5275ee56bdb11d0bb1", "filename": "src/test/ui/doc_keyword.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f95c91c887acb2d0c49f549a07025178b818d87/src%2Ftest%2Fui%2Fdoc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc_keyword.stderr?ref=1f95c91c887acb2d0c49f549a07025178b818d87", "patch": "@@ -0,0 +1,20 @@\n+error: `#[doc(keyword = \"...\")]` can only be used on empty modules\n+  --> $DIR/doc_keyword.rs:6:7\n+   |\n+LL | #[doc(keyword = \"hell\")]\n+   |       ^^^^^^^^^^^^^^^^\n+\n+error: `#[doc(keyword = \"...\")]` can only be used on modules\n+  --> $DIR/doc_keyword.rs:11:7\n+   |\n+LL | #[doc(keyword = \"hall\")]\n+   |       ^^^^^^^^^^^^^^^^\n+\n+error: `#![doc(keyword = \"...\")]` isn't allowed as a crate level attribute\n+  --> $DIR/doc_keyword.rs:4:8\n+   |\n+LL | #![doc(keyword = \"hello\")]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}