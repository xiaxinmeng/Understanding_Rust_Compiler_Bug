{"sha": "b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMGJhMzgyZTA2YWZmOGFhZTRlZjZiYTkyN2NlNTNhNGVmZDZmMjU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-29T18:01:14Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-30T17:48:32Z"}, "message": "Use query instead of `impl_is_default` fn", "tree": {"sha": "8da0fd716fb758f5cc658fb0e9c80d615adbd02e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da0fd716fb758f5cc658fb0e9c80d615adbd02e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "html_url": "https://github.com/rust-lang/rust/commit/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8910f51d804438b6ed161a27e21dd272d9e969a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8910f51d804438b6ed161a27e21dd272d9e969a", "html_url": "https://github.com/rust-lang/rust/commit/e8910f51d804438b6ed161a27e21dd272d9e969a"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "c129b574fd38a0f6def4cb3a9fa896fde54304f9", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "patch": "@@ -6,7 +6,6 @@ pub mod query;\n pub mod select;\n pub mod specialization_graph;\n mod structural_impls;\n-pub mod util;\n \n use crate::mir::interpret::ErrorHandled;\n use crate::ty::subst::SubstsRef;"}, {"sha": "a2793f98050048ceeed91f55138599f5ebe0982e", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> Ancestors<'tcx> {\n             if let Some(item) = node.item(tcx, trait_item_name, trait_item_kind, trait_def_id) {\n                 if finalizing_node.is_none() {\n                     let is_specializable = item.defaultness.is_default()\n-                        || super::util::impl_is_default(tcx, node.def_id());\n+                        || tcx.impl_defaultness(node.def_id()).is_default();\n \n                     if !is_specializable {\n                         finalizing_node = Some(node);"}, {"sha": "cb29cf0760ebc384b4f0f4f3ca81e9e2770b2c01", "filename": "src/librustc_middle/traits/util.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_middle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_middle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Futil.rs?ref=e8910f51d804438b6ed161a27e21dd272d9e969a", "patch": "@@ -1,17 +0,0 @@\n-use crate::ty::TyCtxt;\n-use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n-\n-pub fn impl_is_default(tcx: TyCtxt<'_>, node_item_def_id: DefId) -> bool {\n-    match tcx.hir().as_local_hir_id(node_item_def_id) {\n-        Some(hir_id) => {\n-            let item = tcx.hir().expect_item(hir_id);\n-            if let hir::ItemKind::Impl { defaultness, .. } = item.kind {\n-                defaultness.is_default()\n-            } else {\n-                false\n-            }\n-        }\n-        None => tcx.impl_defaultness(node_item_def_id).is_default(),\n-    }\n-}"}, {"sha": "6348673dab8b542a28450966d6da22f68f31a957", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_middle::traits::util::impl_is_default;\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n \n@@ -652,7 +651,7 @@ pub fn generator_trait_ref_and_outputs(\n }\n \n pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n-    assoc_item.defaultness.is_final() && !impl_is_default(tcx, assoc_item.container.id())\n+    assoc_item.defaultness.is_final() && tcx.impl_defaultness(assoc_item.container.id()).is_final()\n }\n \n pub enum TupleArgumentsFlag {"}, {"sha": "aefe61f60b87a4e59b2d2effa8a9d33b1cc751d6", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "patch": "@@ -165,6 +165,16 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     )\n }\n \n+fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let item = tcx.hir().expect_item(hir_id);\n+    if let hir::ItemKind::Impl { defaultness, .. } = item.kind {\n+        defaultness\n+    } else {\n+        bug!(\"`impl_defaultness` called on {:?}\", item);\n+    }\n+}\n+\n /// Calculates the `Sized` constraint.\n ///\n /// In fact, there are only a few options for the types in the constraint:\n@@ -371,6 +381,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         crate_hash,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n+        impl_defaultness,\n         ..*providers\n     };\n }"}, {"sha": "3823efe9d927e9667fd9ede644a9cbb876d36815", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00ba382e06aff8aae4ef6ba927ce53a4efd6f25/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b00ba382e06aff8aae4ef6ba927ce53a4efd6f25", "patch": "@@ -110,7 +110,6 @@ use rustc_infer::infer::{self, InferCtxt, InferOk, InferResult, TyCtxtInferExt};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::traits::util::impl_is_default;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -1943,7 +1942,7 @@ fn check_specialization_validity<'tcx>(\n             // grandparent. In that case, if parent is a `default impl`, inherited items use the\n             // \"defaultness\" from the grandparent, else they are final.\n             None => {\n-                if impl_is_default(tcx, parent_impl.def_id()) {\n+                if tcx.impl_defaultness(parent_impl.def_id()).is_default() {\n                     None\n                 } else {\n                     Some(Err(parent_impl.def_id()))\n@@ -2118,7 +2117,7 @@ fn check_impl_items_against_trait<'tcx>(\n                 .map(|node_item| !node_item.defining_node.is_from_trait())\n                 .unwrap_or(false);\n \n-            if !is_implemented && !impl_is_default(tcx, impl_id) {\n+            if !is_implemented && tcx.impl_defaultness(impl_id).is_final() {\n                 if !trait_item.defaultness.has_value() {\n                     missing_items.push(*trait_item);\n                 }"}]}