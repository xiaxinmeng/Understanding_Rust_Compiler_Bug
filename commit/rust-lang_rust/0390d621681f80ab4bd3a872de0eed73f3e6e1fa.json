{"sha": "0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTBkNjIxNjgxZjgwYWI0YmQzYTg3MmRlMGVlZDczZjNlNmUxZmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-16T12:57:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T12:57:31Z"}, "message": "Merge #3979\n\n3979: fix missing match arm false positive for enum with no variants r=flodiebold a=JoshMcguigan\n\nfixes #3974\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "b9d23e3ff52657c15f0da7a831308b44cc8755d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d23e3ff52657c15f0da7a831308b44cc8755d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemFY7CRBK7hj4Ov3rIwAAdHIIADBrZ+Jhadl3p1BW5IfjNpEb\nW00jOyTuVyac6nehiKzpbaJV8H+RhqT1cfSGezqpLHkeitObHp+qnQ08AFNdlZR6\n2LL/e6uA8pfSKUCpRrEGhvDXLDdOJpvOtW9TiC6g6pGm0L5ApF8E3L9HPkBAZo18\nEWZEdg6pOQh3AmuPebNoD+/tonkEXYC7fGOzuCtuF+S5Dbkavl+5CNw1sMt7N3et\nfR7AK+SncUW9tSnconOQ5uo7ErxLQ9EuftDUyuifNLsfBjKWOzfj5Qx7IcSml8Uz\nJv/lJzJrmCDytpzsye/oPllQh+Yl5nV1i9rkB1qXQAIDZQx/OYQ1kw7mI8RICiQ=\n=Nj5O\n-----END PGP SIGNATURE-----\n", "payload": "tree b9d23e3ff52657c15f0da7a831308b44cc8755d3\nparent 7d60a446fca0923f698c4b8d10236ae246012f4e\nparent 360bdf653b91f5232a5584c7f4b13960caa48dda\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587041851 +0000\ncommitter GitHub <noreply@github.com> 1587041851 +0000\n\nMerge #3979\n\n3979: fix missing match arm false positive for enum with no variants r=flodiebold a=JoshMcguigan\n\nfixes #3974\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "html_url": "https://github.com/rust-lang/rust/commit/0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d60a446fca0923f698c4b8d10236ae246012f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d60a446fca0923f698c4b8d10236ae246012f4e", "html_url": "https://github.com/rust-lang/rust/commit/7d60a446fca0923f698c4b8d10236ae246012f4e"}, {"sha": "360bdf653b91f5232a5584c7f4b13960caa48dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/360bdf653b91f5232a5584c7f4b13960caa48dda", "html_url": "https://github.com/rust-lang/rust/commit/360bdf653b91f5232a5584c7f4b13960caa48dda"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "688026a0408d2401fa2802172d02e3a84bcc4753", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "patch": "@@ -194,9 +194,10 @@ use smallvec::{smallvec, SmallVec};\n use crate::{\n     db::HirDatabase,\n     expr::{Body, Expr, Literal, Pat, PatId},\n-    InferenceResult,\n+    ApplicationTy, InferenceResult, Ty, TypeCtor,\n };\n-use hir_def::{adt::VariantData, EnumVariantId, VariantId};\n+use hir_def::{adt::VariantData, AdtId, EnumVariantId, VariantId};\n+use ra_arena::Idx;\n \n #[derive(Debug, Clone, Copy)]\n /// Either a pattern from the source code being analyzed, represented as\n@@ -512,6 +513,7 @@ pub enum Usefulness {\n }\n \n pub struct MatchCheckCtx<'a> {\n+    pub match_expr: Idx<Expr>,\n     pub body: Arc<Body>,\n     pub infer: Arc<InferenceResult>,\n     pub db: &'a dyn HirDatabase,\n@@ -530,6 +532,16 @@ pub(crate) fn is_useful(\n     matrix: &Matrix,\n     v: &PatStack,\n ) -> MatchCheckResult<Usefulness> {\n+    // Handle the special case of enums with no variants. In that case, no match\n+    // arm is useful.\n+    if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(AdtId::EnumId(enum_id)), .. }) =\n+        cx.infer[cx.match_expr].strip_references()\n+    {\n+        if cx.db.enum_data(*enum_id).variants.is_empty() {\n+            return Ok(Usefulness::NotUseful);\n+        }\n+    }\n+\n     if v.is_empty() {\n         let result = if matrix.is_empty() { Usefulness::Useful } else { Usefulness::NotUseful };\n \n@@ -1618,6 +1630,32 @@ mod tests {\n \n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn enum_never() {\n+        let content = r\"\n+            enum Never {}\n+\n+            fn test_fn(never: Never) {\n+                match never {}\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn enum_never_ref() {\n+        let content = r\"\n+            enum Never {}\n+\n+            fn test_fn(never: &Never) {\n+                match never {}\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "fd59f43207e428fa448ecdbb10fb76061a2a9051", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        let cx = MatchCheckCtx { body, infer: infer.clone(), db };\n+        let cx = MatchCheckCtx { match_expr, body, infer: infer.clone(), db };\n         let pats = arms.iter().map(|arm| arm.pat);\n \n         let mut seen = Matrix::empty();"}, {"sha": "2677f3af2d752e1e791513fb47ad1552e48beed7", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0390d621681f80ab4bd3a872de0eed73f3e6e1fa/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=0390d621681f80ab4bd3a872de0eed73f3e6e1fa", "patch": "@@ -680,6 +680,16 @@ impl Ty {\n         }\n     }\n \n+    pub fn strip_references(&self) -> &Ty {\n+        let mut t: &Ty = self;\n+\n+        while let Ty::Apply(ApplicationTy { ctor: TypeCtor::Ref(_mutability), parameters }) = t {\n+            t = parameters.as_single();\n+        }\n+\n+        t\n+    }\n+\n     pub fn as_adt(&self) -> Option<(AdtId, &Substs)> {\n         match self {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_def), parameters }) => {"}]}