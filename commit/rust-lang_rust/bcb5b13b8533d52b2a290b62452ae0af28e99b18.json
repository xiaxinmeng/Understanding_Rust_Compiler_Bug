{"sha": "bcb5b13b8533d52b2a290b62452ae0af28e99b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjViMTNiODUzM2Q1MmIyYTI5MGI2MjQ1MmFlMGFmMjhlOTliMTg=", "commit": {"author": {"name": "Alexander Bulaev", "email": "alexbool@yandex-team.ru", "date": "2017-06-17T12:50:55Z"}, "committer": {"name": "Alexander Bulaev", "email": "alexbool@yandex-team.ru", "date": "2017-06-20T08:18:52Z"}, "message": "Mark smaller CStr and CString functions as #[inline]", "tree": {"sha": "0461c763468abe5b231d4895385f96491589244f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0461c763468abe5b231d4895385f96491589244f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb5b13b8533d52b2a290b62452ae0af28e99b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb5b13b8533d52b2a290b62452ae0af28e99b18", "html_url": "https://github.com/rust-lang/rust/commit/bcb5b13b8533d52b2a290b62452ae0af28e99b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb5b13b8533d52b2a290b62452ae0af28e99b18/comments", "author": {"login": "alexbool", "id": 1283792, "node_id": "MDQ6VXNlcjEyODM3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1283792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbool", "html_url": "https://github.com/alexbool", "followers_url": "https://api.github.com/users/alexbool/followers", "following_url": "https://api.github.com/users/alexbool/following{/other_user}", "gists_url": "https://api.github.com/users/alexbool/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbool/subscriptions", "organizations_url": "https://api.github.com/users/alexbool/orgs", "repos_url": "https://api.github.com/users/alexbool/repos", "events_url": "https://api.github.com/users/alexbool/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbool/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexbool", "id": 1283792, "node_id": "MDQ6VXNlcjEyODM3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1283792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbool", "html_url": "https://github.com/alexbool", "followers_url": "https://api.github.com/users/alexbool/followers", "following_url": "https://api.github.com/users/alexbool/following{/other_user}", "gists_url": "https://api.github.com/users/alexbool/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbool/subscriptions", "organizations_url": "https://api.github.com/users/alexbool/orgs", "repos_url": "https://api.github.com/users/alexbool/repos", "events_url": "https://api.github.com/users/alexbool/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbool/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9f2d2ae94fd951229c33ae55076fce4f68fab0", "html_url": "https://github.com/rust-lang/rust/commit/ff9f2d2ae94fd951229c33ae55076fce4f68fab0"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "74ac9d528bb626102eae7ae708b8885db43f85f5", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bcb5b13b8533d52b2a290b62452ae0af28e99b18/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb5b13b8533d52b2a290b62452ae0af28e99b18/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=bcb5b13b8533d52b2a290b62452ae0af28e99b18", "patch": "@@ -308,6 +308,7 @@ impl CString {\n     ///     let _ = CString::from_raw(ptr);\n     /// }\n     /// ```\n+    #[inline]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n@@ -382,6 +383,7 @@ impl CString {\n     /// let bytes = c_string.as_bytes();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.inner[..self.inner.len() - 1]\n@@ -401,6 +403,7 @@ impl CString {\n     /// let bytes = c_string.as_bytes_with_nul();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n@@ -409,6 +412,7 @@ impl CString {\n     /// Extracts a [`CStr`] slice containing the entire string.\n     ///\n     /// [`CStr`]: struct.CStr.html\n+    #[inline]\n     #[unstable(feature = \"as_c_str\", issue = \"40380\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n@@ -449,6 +453,7 @@ impl Drop for CString {\n impl ops::Deref for CString {\n     type Target = CStr;\n \n+    #[inline]\n     fn deref(&self) -> &CStr {\n         unsafe { CStr::from_bytes_with_nul_unchecked(self.as_bytes_with_nul()) }\n     }\n@@ -463,6 +468,7 @@ impl fmt::Debug for CString {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl From<CString> for Vec<u8> {\n+    #[inline]\n     fn from(s: CString) -> Vec<u8> {\n         s.into_bytes()\n     }\n@@ -498,6 +504,7 @@ impl Default for CString {\n \n #[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]\n impl Borrow<CStr> for CString {\n+    #[inline]\n     fn borrow(&self) -> &CStr { self }\n }\n \n@@ -511,13 +518,15 @@ impl<'a> From<&'a CStr> for Box<CStr> {\n \n #[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]\n impl From<Box<CStr>> for CString {\n+    #[inline]\n     fn from(s: Box<CStr>) -> CString {\n         s.into_c_string()\n     }\n }\n \n #[stable(feature = \"box_from_c_string\", since = \"1.18.0\")]\n impl Into<Box<CStr>> for CString {\n+    #[inline]\n     fn into(self) -> Box<CStr> {\n         self.into_boxed_c_str()\n     }\n@@ -730,6 +739,7 @@ impl CStr {\n     ///     assert_eq!(cstr, &*cstring);\n     /// }\n     /// ```\n+    #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         mem::transmute(bytes)\n@@ -772,6 +782,7 @@ impl CStr {\n     ///     *ptr;\n     /// }\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()\n@@ -789,6 +800,7 @@ impl CStr {\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n@@ -805,6 +817,7 @@ impl CStr {\n     /// > length calculation whenever this method is called.\n     ///\n     /// [`to_bytes`]: #method.to_bytes\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { mem::transmute(&self.inner) }\n@@ -908,13 +921,15 @@ impl ops::Index<ops::RangeFull> for CString {\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl AsRef<CStr> for CStr {\n+    #[inline]\n     fn as_ref(&self) -> &CStr {\n         self\n     }\n }\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl AsRef<CStr> for CString {\n+    #[inline]\n     fn as_ref(&self) -> &CStr {\n         self\n     }"}]}