{"sha": "95b4a7487b4055d951b59967caffcdc92a733c84", "node_id": "C_kwDOAAsO6NoAKDk1YjRhNzQ4N2I0MDU1ZDk1MWI1OTk2N2NhZmZjZGM5MmE3MzNjODQ", "commit": {"author": {"name": "Bben01", "email": "52465698+Bben01@users.noreply.github.com", "date": "2022-11-07T20:31:43Z"}, "committer": {"name": "Bben01", "email": "52465698+Bben01@users.noreply.github.com", "date": "2022-11-21T20:17:04Z"}, "message": "Suppress \"Implement default members\" inside contained items", "tree": {"sha": "4c8bc3247530a9fecb993ea6852bb19fea28641a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8bc3247530a9fecb993ea6852bb19fea28641a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b4a7487b4055d951b59967caffcdc92a733c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b4a7487b4055d951b59967caffcdc92a733c84", "html_url": "https://github.com/rust-lang/rust/commit/95b4a7487b4055d951b59967caffcdc92a733c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b4a7487b4055d951b59967caffcdc92a733c84/comments", "author": {"login": "Bben01", "id": 52465698, "node_id": "MDQ6VXNlcjUyNDY1Njk4", "avatar_url": "https://avatars.githubusercontent.com/u/52465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bben01", "html_url": "https://github.com/Bben01", "followers_url": "https://api.github.com/users/Bben01/followers", "following_url": "https://api.github.com/users/Bben01/following{/other_user}", "gists_url": "https://api.github.com/users/Bben01/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bben01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bben01/subscriptions", "organizations_url": "https://api.github.com/users/Bben01/orgs", "repos_url": "https://api.github.com/users/Bben01/repos", "events_url": "https://api.github.com/users/Bben01/events{/privacy}", "received_events_url": "https://api.github.com/users/Bben01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bben01", "id": 52465698, "node_id": "MDQ6VXNlcjUyNDY1Njk4", "avatar_url": "https://avatars.githubusercontent.com/u/52465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bben01", "html_url": "https://github.com/Bben01", "followers_url": "https://api.github.com/users/Bben01/followers", "following_url": "https://api.github.com/users/Bben01/following{/other_user}", "gists_url": "https://api.github.com/users/Bben01/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bben01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bben01/subscriptions", "organizations_url": "https://api.github.com/users/Bben01/orgs", "repos_url": "https://api.github.com/users/Bben01/repos", "events_url": "https://api.github.com/users/Bben01/events{/privacy}", "received_events_url": "https://api.github.com/users/Bben01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b1951ee8642e6fd8453ca437a081d2eb254d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b1951ee8642e6fd8453ca437a081d2eb254d1c", "html_url": "https://github.com/rust-lang/rust/commit/b8b1951ee8642e6fd8453ca437a081d2eb254d1c"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "2394e4341afb3d8dbedf3357a976fc146ec3f37f", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/95b4a7487b4055d951b59967caffcdc92a733c84/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b4a7487b4055d951b59967caffcdc92a733c84/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=95b4a7487b4055d951b59967caffcdc92a733c84", "patch": "@@ -107,6 +107,14 @@ fn add_missing_impl_members_inner(\n ) -> Option<()> {\n     let _p = profile::span(\"add_missing_impl_members_inner\");\n     let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n+\n+    if ctx.token_at_offset().all(|t| {\n+        t.parent_ancestors()\n+            .any(|s| ast::BlockExpr::can_cast(s.kind()) || ast::ParamList::can_cast(s.kind()))\n+    }) {\n+        return None;\n+    }\n+\n     let target_scope = ctx.sema.scope(impl_def.syntax())?;\n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n@@ -1337,4 +1345,95 @@ impl PartialEq for SomeStruct {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_ignore_function_body() {\n+        check_assist_not_applicable(\n+            add_missing_default_members,\n+            r#\"\n+trait Trait {\n+    type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl Trait for () {\n+    type X = u8;\n+    fn foo(&self) {$0\n+        let x = 5;\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_param_list() {\n+        check_assist_not_applicable(\n+            add_missing_impl_members,\n+            r#\"\n+trait Trait {\n+    type X;\n+    fn foo(&self);\n+    fn bar(&self);\n+}\n+\n+impl Trait for () {\n+    type X = u8;\n+    fn foo(&self$0) {\n+        let x = 5;\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_scope_inside_function() {\n+        check_assist_not_applicable(\n+            add_missing_impl_members,\n+            r#\"\n+trait Trait {\n+    type X;\n+    fn foo(&self);\n+    fn bar(&self);\n+}\n+\n+impl Trait for () {\n+    type X = u8;\n+    fn foo(&self) {\n+        let x = async {$0 5 };\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_apply_outside_function() {\n+        check_assist(\n+            add_missing_default_members,\n+            r#\"\n+trait Trait {\n+    type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl Trait for () {\n+    type X = u8;\n+    fn foo(&self)$0 {}\n+}\"#,\n+            r#\"\n+trait Trait {\n+    type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl Trait for () {\n+    type X = u8;\n+    fn foo(&self) {}\n+\n+    $0fn bar(&self) {}\n+}\"#,\n+        )\n+    }\n }"}]}