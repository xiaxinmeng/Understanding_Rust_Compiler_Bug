{"sha": "c36696ac0229ed706d3640177d6d90e232c6d615", "node_id": "C_kwDOAAsO6NoAKGMzNjY5NmFjMDIyOWVkNzA2ZDM2NDAxNzdkNmQ5MGUyMzJjNmQ2MTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T18:54:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T18:54:06Z"}, "message": "Auto merge of #9418 - lukaslueg:issue9415, r=llogiq\n\nFix `mut_mutex_lock` when Mutex is behind immutable deref\n\nI *think* the problem here is the `if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind()` line tries to check if the `Mutex` can be mutably borrowed (there already is a test for `Arc<Mutex<_>>`), but gets bamboozled by the `&mut Arc` indirection. And I *think* checking the deref-adjustment to filter immutable-adjust (the deref through the `Arc`, starting from `&mut Arc`) is the correct fix.\n\nFixes #9415\n\nchangelog: Fix `mut_mutex_lock` when Mutex is behind immutable deref", "tree": {"sha": "2bcea333276ebb6db188a0149611d42b9af3c8d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bcea333276ebb6db188a0149611d42b9af3c8d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c36696ac0229ed706d3640177d6d90e232c6d615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c36696ac0229ed706d3640177d6d90e232c6d615", "html_url": "https://github.com/rust-lang/rust/commit/c36696ac0229ed706d3640177d6d90e232c6d615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c36696ac0229ed706d3640177d6d90e232c6d615/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958a9cf297d313c04c40b4b5164679b516e92885", "url": "https://api.github.com/repos/rust-lang/rust/commits/958a9cf297d313c04c40b4b5164679b516e92885", "html_url": "https://github.com/rust-lang/rust/commit/958a9cf297d313c04c40b4b5164679b516e92885"}, {"sha": "ffc75af4cd01740e9daac43ff24d777525e506c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc75af4cd01740e9daac43ff24d777525e506c1", "html_url": "https://github.com/rust-lang/rust/commit/ffc75af4cd01740e9daac43ff24d777525e506c1"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "b9593b3687d9cf3633d93dc397eda0893dd729c3", "filename": "clippy_lints/src/methods/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c36696ac0229ed706d3640177d6d90e232c6d615/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36696ac0229ed706d3640177d6d90e232c6d615/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs?ref=c36696ac0229ed706d3640177d6d90e232c6d615", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{expr_custom_deref_adjustment, ty::is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n@@ -11,6 +11,7 @@ use super::MUT_MUTEX_LOCK;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>, recv: &'tcx Expr<'tcx>, name_span: Span) {\n     if_chain! {\n+        if matches!(expr_custom_deref_adjustment(cx, recv), None | Some(Mutability::Mut));\n         if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind();\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(ex.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);"}, {"sha": "ecad10a82903884a182a13a46df9922e4a9896b0", "filename": "tests/ui/mut_mutex_lock.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c36696ac0229ed706d3640177d6d90e232c6d615/tests%2Fui%2Fmut_mutex_lock.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c36696ac0229ed706d3640177d6d90e232c6d615/tests%2Fui%2Fmut_mutex_lock.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.fixed?ref=c36696ac0229ed706d3640177d6d90e232c6d615", "patch": "@@ -18,4 +18,11 @@ fn no_owned_mutex_lock() {\n     *value += 1;\n }\n \n+fn issue9415() {\n+    let mut arc_mutex = Arc::new(Mutex::new(42_u8));\n+    let arc_mutex: &mut Arc<Mutex<u8>> = &mut arc_mutex;\n+    let mut guard = arc_mutex.lock().unwrap();\n+    *guard += 1;\n+}\n+\n fn main() {}"}, {"sha": "f2b1d6fbfbc3e1f4ca237404f4106a5fd2d8f5e7", "filename": "tests/ui/mut_mutex_lock.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c36696ac0229ed706d3640177d6d90e232c6d615/tests%2Fui%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36696ac0229ed706d3640177d6d90e232c6d615/tests%2Fui%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.rs?ref=c36696ac0229ed706d3640177d6d90e232c6d615", "patch": "@@ -18,4 +18,11 @@ fn no_owned_mutex_lock() {\n     *value += 1;\n }\n \n+fn issue9415() {\n+    let mut arc_mutex = Arc::new(Mutex::new(42_u8));\n+    let arc_mutex: &mut Arc<Mutex<u8>> = &mut arc_mutex;\n+    let mut guard = arc_mutex.lock().unwrap();\n+    *guard += 1;\n+}\n+\n fn main() {}"}]}