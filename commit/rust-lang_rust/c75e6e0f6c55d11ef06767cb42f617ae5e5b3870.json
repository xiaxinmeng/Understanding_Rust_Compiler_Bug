{"sha": "c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "node_id": "C_kwDOAAsO6NoAKGM3NWU2ZTBmNmM1NWQxMWVmMDY3NjdjYjQyZjYxN2FlNWU1YjM4NzA", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-06-15T12:49:49Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-06-15T12:49:49Z"}, "message": "normalize closure output before relation", "tree": {"sha": "3f7d830ec9f17672eaeca0258599d0ec3bbbe313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f7d830ec9f17672eaeca0258599d0ec3bbbe313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "html_url": "https://github.com/rust-lang/rust/commit/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80917360d350fb55aebf383e7ff99efea41f63fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/80917360d350fb55aebf383e7ff99efea41f63fd", "html_url": "https://github.com/rust-lang/rust/commit/80917360d350fb55aebf383e7ff99efea41f63fd"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "eec886b7be48fcd01250cc065ee559b91a68c85b", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "patch": "@@ -124,21 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Return types are a bit more complex. They may contain opaque `impl Trait` types.\n         let mir_output_ty = body.local_decls[RETURN_PLACE].ty;\n         let output_span = body.local_decls[RETURN_PLACE].source_info.span;\n-        if let Err(terr) = self.eq_types(\n-            normalized_output_ty,\n-            mir_output_ty,\n-            Locations::All(output_span),\n-            ConstraintCategory::BoringNoLocation,\n-        ) {\n-            span_mirbug!(\n-                self,\n-                Location::START,\n-                \"equate_inputs_and_outputs: `{:?}=={:?}` failed with `{:?}`\",\n-                normalized_output_ty,\n-                mir_output_ty,\n-                terr\n-            );\n-        };\n+        self.equate_normalized_input_or_output(normalized_output_ty, mir_output_ty, output_span);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "e4c954eeb33d2bd3fa98af002c1e3366781bc6ba", "filename": "tests/ui/nll/issue-112604-closure-output-normalize.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75e6e0f6c55d11ef06767cb42f617ae5e5b3870/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs?ref=c75e6e0f6c55d11ef06767cb42f617ae5e5b3870", "patch": "@@ -0,0 +1,49 @@\n+//check-pass\n+\n+use higher_kinded_types::*;\n+mod higher_kinded_types {\n+    pub(crate) trait HKT {\n+        type Of<'lt>;\n+    }\n+\n+    pub(crate) trait WithLifetime<'lt> {\n+        type T;\n+    }\n+\n+    impl<T: ?Sized + for<'any> WithLifetime<'any>> HKT for T {\n+        type Of<'lt> = <T as WithLifetime<'lt>>::T;\n+    }\n+}\n+\n+trait Trait {\n+    type Gat<'lt>;\n+}\n+\n+impl Trait for () {\n+    type Gat<'lt> = ();\n+}\n+\n+/// Same as `Trait`, but using HKTs rather than GATs\n+trait HTrait {\n+    type Hat: ?Sized + HKT;\n+}\n+\n+impl<T: Trait> HTrait for T {\n+    type Hat = dyn for<'lt> WithLifetime<'lt, T = T::Gat<'lt>>;\n+}\n+\n+impl<Hat: ?Sized + HKT> Trait for Box<dyn '_ + HTrait<Hat = Hat>> {\n+    type Gat<'lt> = Hat::Of<'lt>;\n+}\n+\n+fn existential() -> impl for<'a> Trait<Gat<'a> = ()> {}\n+\n+fn dyn_hoops<T: Trait>(\n+    _: T,\n+) -> Box<dyn HTrait<Hat = dyn for<'a> WithLifetime<'a, T = T::Gat<'a>>>> {\n+    loop {}\n+}\n+\n+fn main() {\n+    let _ = || -> _ { dyn_hoops(existential()) };\n+}"}]}