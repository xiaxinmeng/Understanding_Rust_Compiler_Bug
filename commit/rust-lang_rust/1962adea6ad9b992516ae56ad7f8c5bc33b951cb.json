{"sha": "1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjJhZGVhNmFkOWI5OTI1MTZhZTU2YWQ3ZjhjNWJjMzNiOTUxY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T09:58:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T09:58:30Z"}, "message": "Auto merge of #60877 - Centril:rollup-j0o5mo5, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #59825 (string: implement From<&String> for String)\n - #59923 (Fix convert module's documentation links)\n - #60691 (Include expression to wait for to the span of Await)\n - #60769 (Update rustc book CLI docs.)\n - #60816 (README.md: Mention MSVC 2017+, not 2013(!))\n - #60851 (Move `box` from the stable keyword to unstable keywords list)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c22f44a66cb659b62e795883d0d661949ea563fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22f44a66cb659b62e795883d0d661949ea563fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "html_url": "https://github.com/rust-lang/rust/commit/1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472211ab0ae2beec0fbec23c7f90f5d15c51317d", "url": "https://api.github.com/repos/rust-lang/rust/commits/472211ab0ae2beec0fbec23c7f90f5d15c51317d", "html_url": "https://github.com/rust-lang/rust/commit/472211ab0ae2beec0fbec23c7f90f5d15c51317d"}, {"sha": "b59ce94bceca7d0be2b6d81820d95bdaf0f020df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ce94bceca7d0be2b6d81820d95bdaf0f020df", "html_url": "https://github.com/rust-lang/rust/commit/b59ce94bceca7d0be2b6d81820d95bdaf0f020df"}], "stats": {"total": 235, "additions": 197, "deletions": 38}, "files": [{"sha": "75d7823490a201564a55c708960c231c7a9b869d", "filename": "README.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -128,9 +128,15 @@ build.\n #### MSVC\n [windows-msvc]: #windows-msvc\n \n-MSVC builds of Rust additionally require an installation of Visual Studio 2013\n-(or later) so `rustc` can use its linker. Make sure to check the \u201cC++ tools\u201d\n-option.\n+MSVC builds of Rust additionally require an installation of Visual Studio 2017\n+(or later) so `rustc` can use its linker.  The simplest way is to get the\n+[Visual Studio Build Tools] and check the \u201cC++ build tools\u201d workload.\n+\n+[Visual Studio Build Tools]: https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\n+\n+At last check (cmake 3.14.3 and msvc 16.0.3) using the 2019 tools fails to\n+build the in-tree LLVM build with a CMake error, so use 2017 instead by\n+including the \u201cMSVC v141 \u2013 VS 2017 C++ x64/x86 build tools (v14.16)\u201d component.\n \n With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:"}, {"sha": "bd7f6630ea2adf988db267c5692b88266b40f6c1", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 156, "deletions": 11, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -17,28 +17,147 @@ to `#[cfg(verbose)]` and `#[cfg(feature = \"serde\")]` respectively.\n \n ## `-L`: add a directory to the library search path\n \n-When looking for external crates, a directory passed to this flag will be searched.\n+When looking for external crates or libraries, a directory passed to this flag\n+will be searched.\n+\n+The kind of search path can optionally be specified with the form `-L\n+KIND=PATH` where `KIND` may be one of:\n+\n+- `dependency` \u2014\u00a0Only search for transitive dependencies in this directory.\n+- `crate` \u2014\u00a0Only search for this crate's direct dependencies in this\n+  directory.\n+- `native` \u2014 Only search for native libraries in this directory.\n+- `framework` \u2014\u00a0Only search for macOS frameworks in this directory.\n+- `all` \u2014\u00a0Search for all library kinds in this directory. This is the default\n+  if `KIND` is not specified.\n \n ## `-l`: link the generated crate to a native library\n \n This flag allows you to specify linking to a specific native library when building\n a crate.\n \n+The kind of library can optionally be specified with the form `-l KIND=lib`\n+where `KIND` may be one of:\n+\n+- `dylib` \u2014\u00a0A native dynamic library.\n+- `static` \u2014\u00a0A native static library (such as a `.a` archive).\n+- `framework` \u2014\u00a0A macOS framework.\n+\n+The kind of library can be specified in a [`#[link]`\n+attribute][link-attribute]. If the kind is not specified in the `link`\n+attribute or on the command-line, it will link a dynamic library if available,\n+otherwise it will use a static library. If the kind is specified on the\n+command-line, it will override the kind specified in a `link` attribute.\n+\n+The name used in a `link` attribute may be overridden using the form `-l\n+ATTR_NAME:LINK_NAME` where `ATTR_NAME` is the name in the `link` attribute,\n+and `LINK_NAME` is the name of the actual library that will be linked.\n+\n+[link-attribute]: ../reference/items/external-blocks.html#the-link-attribute\n+\n ## `--crate-type`: a list of types of crates for the compiler to emit\n \n-This instructs `rustc` on which crate type to build.\n+This instructs `rustc` on which crate type to build. This flag accepts a\n+comma-separated list of values, and may be specified multiple times. The valid\n+crate types are:\n+\n+- `lib` \u2014 Generates a library kind preferred by the compiler, currently\n+  defaults to `rlib`.\n+- `rlib` \u2014 A Rust static library.\n+- `staticlib` \u2014 A native static library.\n+- `dylib` \u2014 A Rust dynamic library.\n+- `cdylib` \u2014 A native dynamic library.\n+- `bin` \u2014 A runnable executable program.\n+- `proc-macro` \u2014 Generates a format suitable for a procedural macro library\n+  that may be loaded by the compiler.\n+\n+The crate type may be specified with the [`crate_type` attribute][crate_type].\n+The `--crate-type` command-line value will override the `crate_type`\n+attribute.\n+\n+More details may be found in the [linkage chapter] of the reference.\n+\n+[linkage chapter]: ../reference/linkage.html\n+[crate_type]: ../reference/linkage.html\n \n ## `--crate-name`: specify the name of the crate being built\n \n This informs `rustc` of the name of your crate.\n \n-## `--emit`: emit output other than a crate\n-\n-Instead of producing a crate, this flag can print out things like the assembly or LLVM-IR.\n+## `--edition`: specify the edition to use\n+\n+This flag takes a value of `2015` or `2018`. The default is `2015`. More\n+information about editions may be found in the [edition guide].\n+\n+[edition guide]: ../edition-guide/introduction.html\n+\n+## `--emit`: specifies the types of output files to generate\n+\n+This flag controls the types of output files generated by the compiler. It\n+accepts a comma-separated list of values, and may be specified multiple times.\n+The valid emit kinds are:\n+\n+- `asm` \u2014 Generates a file with the crate's assembly code. The default output\n+  filename is `CRATE_NAME.s`.\n+- `dep-info` \u2014 Generates a file with Makefile syntax that indicates all the\n+  source files that were loaded to generate the crate. The default output\n+  filename is `CRATE_NAME.d`.\n+- `link` \u2014 Generates the crates specified by `--crate-type`. The default\n+  output filenames depend on the crate type and platform. This is the default\n+  if `--emit` is not specified.\n+- `llvm-bc` \u2014 Generates a binary file containing the [LLVM bitcode]. The\n+  default output filename is `CRATE_NAME.bc`.\n+- `llvm-ir` \u2014 Generates a file containing [LLVM IR]. The default output\n+  filename is `CRATE_NAME.ll`.\n+- `metadata` \u2014 Generates a file containing metadata about the crate. The\n+  default output filename is `CRATE_NAME.rmeta`.\n+- `mir` \u2014 Generates a file containing rustc's mid-level intermediate\n+  representation. The default output filename is `CRATE_NAME.mir`.\n+- `obj` \u2014 Generates a native object file. The default output filename is\n+  `CRATE_NAME.o`.\n+\n+The output filename can be set with the `-o` flag. A suffix may be added to\n+the filename with the `-C extra-filename` flag. The files are written to the\n+current directory unless the `--out-dir` flag is used. Each emission type may\n+also specify the output filename with the form `KIND=PATH`, which takes\n+precedence over the `-o` flag.\n+\n+[LLVM bitcode]: https://llvm.org/docs/BitCodeFormat.html\n+[LLVM IR]: https://llvm.org/docs/LangRef.html\n \n ## `--print`: print compiler information\n \n-This flag prints out various information about the compiler.\n+This flag prints out various information about the compiler. This flag may be\n+specified multiple times, and the information is printed in the order the\n+flags are specified. Specifying a `--print` flag will usually disable the\n+`--emit` step and will only print the requested information. The valid types\n+of print values are:\n+\n+- `crate-name` \u2014 The name of the crate.\n+- `file-names` \u2014 The names of the files created by the `link` emit kind.\n+- `sysroot` \u2014 Path to the sysroot.\n+- `cfg` \u2014 List of cfg values. See [conditional compilation] for more\n+  information about cfg values.\n+- `target-list` \u2014 List of known targets. The target may be selected with the\n+  `--target` flag.\n+- `target-cpus` \u2014 List of available CPU values for the current target. The\n+  target CPU may be selected with the `-C target-cpu=val` flag.\n+- `target-features` \u2014 List of available target features for the current\n+  target. Target features may be enabled with the `-C target-feature=val`\n+  flag.\n+- `relocation-models` \u2014 List of relocation models. Relocation models may be\n+  selected with the `-C relocation-model=val` flag.\n+- `code-models` \u2014 List of code models. Code models may be selected with the\n+  `-C code-model=val` flag.\n+- `tls-models` \u2014 List of Thread Local Storage models supported. The model may\n+  be selected with the `-Z tls-model=val` flag.\n+- `native-static-libs` \u2014 This may be used when creating a `staticlib` crate\n+  type. If this is the only flag, it will perform a full compilation and\n+  include a diagnostic note that indicates the linker flags to use when\n+  linking the resulting static library. The note starts with the text\n+  `native-static-libs:` to make it easier to fetch the output.\n+\n+[conditional compilation]: ../reference/conditional-compilation.html\n \n ## `-g`: include debug information\n \n@@ -54,7 +173,8 @@ This flag controls the output filename.\n \n ## `--out-dir`: directory to write the output in\n \n-The outputted crate will be written to this directory.\n+The outputted crate will be written to this directory. This flag is ignored if\n+the `-o` flag is used.\n \n ## `--explain`: provide a detailed explanation of an error message\n \n@@ -111,8 +231,9 @@ This flag, when combined with other flags, makes them produce extra output.\n \n ## `--extern`: specify where an external library is located\n \n-This flag allows you to pass the name and location of an external crate that will\n-be linked into the crate you're buildling.\n+This flag allows you to pass the name and location of an external crate that\n+will be linked into the crate you are building. This flag may be specified\n+multiple times. The format of the value should be `CRATENAME=PATH`.\n \n ## `--sysroot`: Override the system root\n \n@@ -121,8 +242,32 @@ distribution; this flag allows that to be overridden.\n \n ## `--error-format`: control how errors are produced\n \n-This flag lets you control the format of errors.\n+This flag lets you control the format of messages. Messages are printed to\n+stderr. The valid options are:\n+\n+- `human` \u2014 Human-readable output. This is the default.\n+- `json` \u2014 Structured JSON output.\n+- `short` \u2014 Short, one-line messages.\n \n ## `--color`: configure coloring of output\n \n-This flag lets you control color settings of the output.\n+This flag lets you control color settings of the output. The valid options\n+are:\n+\n+- `auto` \u2014 Use colors if output goes to a tty. This is the default.\n+- `always` \u2014\u00a0Always use colors.\n+- `never` \u2014\u00a0Never colorize output.\n+\n+## `--remap-path-prefix`: remap source names in output\n+\n+Remap source path prefixes in all output, including compiler diagnostics,\n+debug information, macro expansions, etc. It takes a value of the form\n+`FROM=TO` where a path prefix equal to `FROM` is rewritten to the value `TO`.\n+The `FROM` may itself contain an `=` symbol, but the `TO` value may not. This\n+flag may be specified multiple times.\n+\n+This is useful for normalizing build products, for example by removing the\n+current directory out of pathnames emitted into the object files. The\n+replacement is purely textual, with no consideration of the current system's\n+pathname syntax. For example `--remap-path-prefix foo=bar` will match\n+`foo/lib.rs` but not `./foo/lib.rs`."}, {"sha": "e74d37c1c2bae1b676b4c14a1dc08f4cb107efa1", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -2189,6 +2189,14 @@ impl From<&str> for String {\n     }\n }\n \n+#[stable(feature = \"from_ref_string\", since = \"1.35.0\")]\n+impl From<&String> for String {\n+    #[inline]\n+    fn from(s: &String) -> String {\n+        s.clone()\n+    }\n+}\n+\n // note: test pulls in libstd, which causes errors here\n #[cfg(not(test))]\n #[stable(feature = \"string_from_box\", since = \"1.18.0\")]"}, {"sha": "b3ff447be5ee4802f110e4c601b38007b9a30bef", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -104,7 +104,6 @@ pub const fn identity<T>(x: T) -> T { x }\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n-///\n /// `AsRef` has the same signature as [`Borrow`], but `Borrow` is different in few aspects:\n ///\n /// - Unlike `AsRef`, `Borrow` has a blanket impl for any `T`, and can be used to accept either\n@@ -133,7 +132,7 @@ pub const fn identity<T>(x: T) -> T { x }\n /// converted a the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n-/// want to accept all references that can be converted to &str as an argument.\n+/// want to accept all references that can be converted to `&str` as an argument.\n /// Since both [`String`] and `&str` implement `AsRef<str>` we can accept both as input argument.\n ///\n /// [`String`]: ../../std/string/struct.String.html\n@@ -149,7 +148,6 @@ pub const fn identity<T>(x: T) -> T { x }\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n@@ -182,6 +180,7 @@ pub trait AsRef<T: ?Sized> {\n /// write a function `add_one`that takes all arguments that can be converted to `&mut u64`.\n /// Because [`Box<T>`] implements `AsMut<T>` `add_one` accepts arguments of type\n /// `&mut Box<u64>` as well:\n+///\n /// ```\n /// fn add_one<T: AsMut<u64>>(num: &mut T) {\n ///     *num.as_mut() += 1;\n@@ -191,8 +190,8 @@ pub trait AsRef<T: ?Sized> {\n /// add_one(&mut boxed_num);\n /// assert_eq!(*boxed_num, 1);\n /// ```\n-/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n ///\n+/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n@@ -203,18 +202,18 @@ pub trait AsMut<T: ?Sized> {\n /// A value-to-value conversion that consumes the input value. The\n /// opposite of [`From`].\n ///\n-/// One should only implement [`Into`] if a conversion to a type outside the current crate is\n-/// required. Otherwise one should always prefer implementing [`From`] over [`Into`] because\n-/// implementing [`From`] automatically provides one with a implementation of [`Into`] thanks to\n+/// One should only implement `Into` if a conversion to a type outside the current crate is\n+/// required. Otherwise one should always prefer implementing [`From`] over `Into` because\n+/// implementing [`From`] automatically provides one with a implementation of `Into` thanks to\n /// the blanket implementation in the standard library. [`From`] cannot do these type of\n /// conversions because of Rust's orphaning rules.\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use [`TryInto`].\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies `Into<U> for T`\n-/// - [`Into`]` is reflexive, which means that `Into<T> for T` is implemented\n+/// - [`From`]`<T> for U` implies `Into<U> for T`\n+/// - `Into` is reflexive, which means that `Into<T> for T` is implemented\n ///\n /// # Implementing `Into` for conversions to external types\n ///\n@@ -273,7 +272,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [From]: trait.From.html\n+/// [`From`]: trait.From.html\n /// [`into`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n@@ -285,18 +284,18 @@ pub trait Into<T>: Sized {\n /// Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n /// [`Into`].\n ///\n-/// One should always prefer implementing [`From`] over [`Into`]\n-/// because implementing [`From`] automatically provides one with a implementation of [`Into`]\n+/// One should always prefer implementing `From` over [`Into`]\n+/// because implementing `From` automatically provides one with a implementation of [`Into`]\n /// thanks to the blanket implementation in the standard library.\n ///\n /// Only implement [`Into`] if a conversion to a type outside the current crate is required.\n-/// [`From`] cannot do these type of conversions because of Rust's orphaning rules.\n+/// `From` cannot do these type of conversions because of Rust's orphaning rules.\n /// See [`Into`] for more details.\n ///\n-/// Prefer using [`Into`] over using [`From`] when specifying trait bounds on a generic function.\n+/// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function.\n /// This way, types that directly implement [`Into`] can be used as arguments as well.\n ///\n-/// The [`From`] is also very useful when performing error handling. When constructing a function\n+/// The `From` is also very useful when performing error handling. When constructing a function\n /// that is capable of failing, the return type will generally be of the form `Result<T, E>`.\n /// The `From` trait simplifies error handling by allowing a function to return a single error type\n /// that encapsulate multiple error types. See the \"Examples\" section and [the book][book] for more\n@@ -306,14 +305,15 @@ pub trait Into<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies [`Into<U>`]` for T`\n-/// - [`From`] is reflexive, which means that `From<T> for T` is implemented\n+/// - `From<T> for U` implies [`Into`]`<U> for T`\n+/// - `From` is reflexive, which means that `From<T> for T` is implemented\n ///\n /// # Examples\n ///\n /// [`String`] implements `From<&str>`:\n ///\n-/// An explicit conversion from a &str to a String is done as follows:\n+/// An explicit conversion from a `&str` to a String is done as follows:\n+///\n /// ```\n /// let string = \"hello\".to_string();\n /// let other_string = String::from(\"hello\");\n@@ -361,7 +361,7 @@ pub trait Into<T>: Sized {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`Into<U>`]: trait.Into.html\n+/// [`Into`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -422,7 +422,7 @@ pub trait TryInto<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n+/// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n /// calling `T::try_from()` on a value of type `T` is `Infallible`."}, {"sha": "b5e3c4cda0a66f20d13297585046b7b35e5e1944", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -1744,8 +1744,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::multi_s(\n             \"\",\n             \"print\",\n-            \"Comma separated list of compiler information to \\\n-             print on stdout\",\n+            \"Compiler information to print on stdout\",\n             \"[crate-name|file-names|sysroot|cfg|target-list|\\\n              target-cpus|target-features|relocation-models|\\\n              code-models|tls-models|target-spec-json|native-static-libs]\","}, {"sha": "99e8db9d8e6d2ec8fabc1f982c4176a8fbdb9181", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -2635,6 +2635,7 @@ impl<'a> Parser<'a> {\n                     self.expect(&token::OpenDelim(token::Paren))?;\n                     let expr = self.parse_expr()?;\n                     self.expect(&token::CloseDelim(token::Paren))?;\n+                    hi = self.prev_span;\n                     ex = ExprKind::Await(ast::AwaitOrigin::MacroLike, expr);\n                 } else if self.token.is_path_start() {\n                     let path = self.parse_path(PathStyle::Expr)?;"}, {"sha": "c2a18c9df83babe5bf0b3c78ad04cd3b8ce0006e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -30,7 +30,6 @@ symbols! {\n \n         // Keywords that are used in stable Rust.\n         As:                 \"as\",\n-        Box:                \"box\",\n         Break:              \"break\",\n         Const:              \"const\",\n         Continue:           \"continue\",\n@@ -69,6 +68,7 @@ symbols! {\n         // Keywords that are used in unstable Rust or reserved for future use.\n         Abstract:           \"abstract\",\n         Become:             \"become\",\n+        Box:                \"box\",\n         Do:                 \"do\",\n         Final:              \"final\",\n         Macro:              \"macro\","}, {"sha": "699a7a8886e890eae72b10d8c584c1c1ffac0239", "filename": "src/test/ui/feature-gate/await-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1962adea6ad9b992516ae56ad7f8c5bc33b951cb/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr?ref=1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "patch": "@@ -2,7 +2,7 @@ error[E0658]: `await!(<expr>)` macro syntax is unstable, and will soon be remove\n   --> $DIR/await-macro.rs:9:5\n    |\n LL |     await!(bar());\n-   |     ^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n    = help: add #![feature(await_macro)] to the crate attributes to enable"}]}