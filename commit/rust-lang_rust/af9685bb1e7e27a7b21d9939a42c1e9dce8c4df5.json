{"sha": "af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTY4NWJiMWU3ZTI3YTdiMjFkOTkzOWE0MmMxZTlkY2U4YzRkZjU=", "commit": {"author": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-03T23:55:38Z"}, "committer": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-03T23:55:38Z"}, "message": "Rename unsafe_sizeof_count_copies to size_of_in_element_count\n\nAlso fix review comments:\n - Use const arrays and iterate them for the method/function names\n - merge 2 if_chain's into one using a rest pattern\n - remove unnecessary unsafe block in test\n\nAnd make the lint only point to the count expression instead of the entire function call", "tree": {"sha": "6e472ff046afd1fc091d3ac1998e2c9445df0554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e472ff046afd1fc091d3ac1998e2c9445df0554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "html_url": "https://github.com/rust-lang/rust/commit/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/comments", "author": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63a3c44060b9b06e10e7a854abcdbb853f6938c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a3c44060b9b06e10e7a854abcdbb853f6938c3", "html_url": "https://github.com/rust-lang/rust/commit/63a3c44060b9b06e10e7a854abcdbb853f6938c3"}], "stats": {"total": 357, "additions": 175, "deletions": 182}, "files": [{"sha": "c7e02aaf4e188762a3dd12f87409458bb2596ca2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "patch": "@@ -2057,6 +2057,7 @@ Released 2018-09-13\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n+[`size_of_in_element_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n@@ -2124,7 +2125,6 @@ Released 2018-09-13\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n [`unsafe_derive_deserialize`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n-[`unsafe_sizeof_count_copies`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_sizeof_count_copies\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization\n [`unseparated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix\n [`unsound_collection_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsound_collection_transmute"}, {"sha": "06961064a4baa7dee763e481b0545e945e11a2ea", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "patch": "@@ -306,6 +306,7 @@ mod self_assignment;\n mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n+mod size_of_in_element_count;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n mod strings;\n@@ -329,7 +330,6 @@ mod unnecessary_sort_by;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n-mod unsafe_sizeof_count_copies;\n mod unused_io_amount;\n mod unused_self;\n mod unused_unit;\n@@ -917,7 +917,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnecessary_wraps::UNNECESSARY_WRAPS,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        &unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES,\n+        &size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n         &unused_self::UNUSED_SELF,\n         &unused_unit::UNUSED_UNIT,\n@@ -1000,7 +1000,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box matches::Matches::new(msrv));\n     store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n     store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n-    store.register_late_pass(|| box unsafe_sizeof_count_copies::UnsafeSizeofCountCopies);\n+    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -1608,7 +1608,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(&unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1887,7 +1887,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(&unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),"}, {"sha": "9701e7937007c1d856dc9e7153e787de0878d477", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "renamed", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "patch": "@@ -1,5 +1,5 @@\n-//! Lint on unsafe memory copying that use the `size_of` of the pointee type instead of a pointee\n-//! count\n+//! Lint on use of `size_of` or `size_of_val` of T in an expression\n+//! expecting a count of T\n \n use crate::utils::{match_def_path, paths, span_lint_and_help};\n use if_chain::if_chain;\n@@ -11,15 +11,11 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Detects expressions where\n-    /// size_of::<T> is used as the count argument to unsafe\n-    /// memory copying functions like ptr::copy and\n-    /// ptr::copy_nonoverlapping where T is the pointee type\n-    /// of the pointers used\n+    /// size_of::<T> or size_of_val::<T> is used as a\n+    /// count of elements of type T\n     ///\n     /// **Why is this bad?** These functions expect a count\n-    /// of T and not a number of bytes, which can lead to\n-    /// copying the incorrect amount of bytes, which can\n-    /// result in Undefined Behaviour\n+    /// of T and not a number of bytes\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -33,12 +29,12 @@ declare_clippy_lint! {\n     /// let mut y = [2u8; SIZE];\n     /// unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n     /// ```\n-    pub UNSAFE_SIZEOF_COUNT_COPIES,\n+    pub SIZE_OF_IN_ELEMENT_COUNT,\n     correctness,\n-    \"unsafe memory copying using a byte count instead of a count of T\"\n+    \"using size_of::<T> or size_of_val::<T> where a count of elements of T is expected\"\n }\n \n-declare_lint_pass!(UnsafeSizeofCountCopies => [UNSAFE_SIZEOF_COUNT_COPIES]);\n+declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n \n fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tcx>> {\n     match expr.kind {\n@@ -62,18 +58,30 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tc\n     }\n }\n \n+const FUNCTIONS: [[&str; 3]; 6] = [\n+    paths::COPY_NONOVERLAPPING,\n+    paths::COPY,\n+    paths::WRITE_BYTES,\n+    paths::PTR_SWAP_NONOVERLAPPING,\n+    paths::PTR_SLICE_FROM_RAW_PARTS,\n+    paths::PTR_SLICE_FROM_RAW_PARTS_MUT,\n+    ];\n+const METHODS: [&str; 5] = [\n+    \"write_bytes\",\n+    \"copy_to\",\n+    \"copy_from\",\n+    \"copy_to_nonoverlapping\",\n+    \"copy_from_nonoverlapping\",\n+    ];\n fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n     if_chain! {\n         // Find calls to ptr::{copy, copy_nonoverlapping}\n         // and ptr::{swap_nonoverlapping, write_bytes},\n         if let ExprKind::Call(func, args) = expr.kind;\n-        if let [_, _, count] = args;\n+        if let [.., count] = args;\n         if let ExprKind::Path(ref func_qpath) = func.kind;\n         if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-        if match_def_path(cx, def_id, &paths::COPY_NONOVERLAPPING)\n-            || match_def_path(cx, def_id, &paths::COPY)\n-            || match_def_path(cx, def_id, &paths::WRITE_BYTES)\n-            || match_def_path(cx, def_id, &paths::PTR_SWAP_NONOVERLAPPING);\n+        if FUNCTIONS.iter().any(|func_path| match_def_path(cx, def_id, func_path));\n \n         // Get the pointee type\n         if let Some(pointee_ty) = cx.typeck_results().node_substs(func.hir_id).types().next();\n@@ -86,8 +94,7 @@ fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -\n         if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind;\n         if let [ptr_self, _, count] = args;\n         let method_ident = method_path.ident.as_str();\n-        if method_ident == \"write_bytes\" || method_ident == \"copy_to\" || method_ident == \"copy_from\"\n-            || method_ident == \"copy_to_nonoverlapping\" || method_ident == \"copy_from_nonoverlapping\";\n+        if METHODS.iter().any(|m| *m == &*method_ident);\n \n         // Get the pointee type\n         if let ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl:_mutability }) =\n@@ -96,31 +103,16 @@ fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -\n             return Some((pointee_ty, count));\n         }\n     };\n-    if_chain! {\n-        // Find calls to ptr::copy and copy_nonoverlapping\n-        if let ExprKind::Call(func, args) = expr.kind;\n-        if let [_data, count] = args;\n-        if let ExprKind::Path(ref func_qpath) = func.kind;\n-        if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-        if match_def_path(cx, def_id, &paths::PTR_SLICE_FROM_RAW_PARTS)\n-            || match_def_path(cx, def_id, &paths::PTR_SLICE_FROM_RAW_PARTS_MUT);\n-\n-        // Get the pointee type\n-        if let Some(pointee_ty) = cx.typeck_results().node_substs(func.hir_id).types().next();\n-        then {\n-            return Some((pointee_ty, count));\n-        }\n-    };\n     None\n }\n \n-impl<'tcx> LateLintPass<'tcx> for UnsafeSizeofCountCopies {\n+impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        const HELP_MSG: &str = \"use a count of elements instead of a count of bytes \\\n-            for the count parameter, it already gets multiplied by the size of the pointed to type\";\n+        const HELP_MSG: &str = \"use a count of elements instead of a count of bytes\\\n+            , it already gets multiplied by the size of the type\";\n \n-        const LINT_MSG: &str = \"unsafe memory copying using a byte count \\\n-            (multiplied by size_of/size_of_val::<T>) instead of a count of T\";\n+        const LINT_MSG: &str = \"found a count of bytes \\\n+             instead of a count of elements of T\";\n \n         if_chain! {\n             // Find calls to unsafe copy functions and get\n@@ -134,8 +126,8 @@ impl<'tcx> LateLintPass<'tcx> for UnsafeSizeofCountCopies {\n             then {\n                 span_lint_and_help(\n                     cx,\n-                    UNSAFE_SIZEOF_COUNT_COPIES,\n-                    expr.span,\n+                    SIZE_OF_IN_ELEMENT_COUNT,\n+                    count_expr.span,\n                     LINT_MSG,\n                     None,\n                     HELP_MSG", "previous_filename": "clippy_lints/src/unsafe_sizeof_count_copies.rs"}, {"sha": "d4658ebf72db8dd8b387ffaac9c4c50bcd755092", "filename": "tests/ui/size_of_in_element_count.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/tests%2Fui%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/tests%2Fui%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count.rs?ref=af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "patch": "@@ -1,8 +1,9 @@\n-#![warn(clippy::unsafe_sizeof_count_copies)]\n+#![warn(clippy::size_of_in_element_count)]\n \n use std::mem::{size_of, size_of_val};\n use std::ptr::{\n-    copy, copy_nonoverlapping, slice_from_raw_parts, slice_from_raw_parts_mut, swap_nonoverlapping, write_bytes,\n+    copy, copy_nonoverlapping, slice_from_raw_parts,\n+    slice_from_raw_parts_mut, swap_nonoverlapping, write_bytes,\n };\n \n fn main() {\n@@ -29,8 +30,8 @@ fn main() {\n \n     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n \n-    unsafe { slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-    unsafe { slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n+    slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n+    slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n \n     // Count expression involving multiplication of size_of (Should trigger the lint)\n     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };", "previous_filename": "tests/ui/unsafe_sizeof_count_copies.rs"}, {"sha": "80c3fec1b0509c58b2f0f47feb5a728ab6479bb7", "filename": "tests/ui/size_of_in_element_count.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/tests%2Fui%2Fsize_of_in_element_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5/tests%2Fui%2Fsize_of_in_element_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count.stderr?ref=af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "patch": "@@ -0,0 +1,131 @@\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:17:68\n+   |\n+LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                                    ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:18:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:20:49\n+   |\n+LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:21:64\n+   |\n+LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                                ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:22:51\n+   |\n+LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n+   |                                                   ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:23:66\n+   |\n+LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n+   |                                                                  ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:25:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                               ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:26:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |                                               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:28:46\n+   |\n+LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:29:47\n+   |\n+LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:31:66\n+   |\n+LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:33:46\n+   |\n+LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:34:38\n+   |\n+LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:37:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:40:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:43:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "7989e96dd21e6a493f1ede4517737965e8b9ae81", "filename": "tests/ui/unsafe_sizeof_count_copies.stderr", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_sizeof_count_copies.stderr?ref=63a3c44060b9b06e10e7a854abcdbb853f6938c3", "patch": "@@ -1,131 +0,0 @@\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:16:14\n-   |\n-LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unsafe-sizeof-count-copies` implied by `-D warnings`\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:17:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:19:14\n-   |\n-LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:20:14\n-   |\n-LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:21:14\n-   |\n-LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:22:14\n-   |\n-LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:24:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:25:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:27:14\n-   |\n-LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:28:14\n-   |\n-LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:30:14\n-   |\n-LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:32:14\n-   |\n-LL |     unsafe { slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:33:14\n-   |\n-LL |     unsafe { slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:36:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:39:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:42:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: aborting due to 16 previous errors\n-"}]}