{"sha": "e6d8fbede2e492e55283072e426ba81ec90f54ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZDhmYmVkZTJlNDkyZTU1MjgzMDcyZTQyNmJhODFlYzkwZjU0YWU=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-09T17:54:06Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-10T10:44:44Z"}, "message": "cleanup polonius liveness fact generation\n\nFor the var_uses_region and var_drops_region relations:\n- check for all facts existence only once\n- remove function only used once\n- pull var_uses_region with the other access facts instead of on its own", "tree": {"sha": "f566055751e0513c0c5f17c3e4d589b4faf6a2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f566055751e0513c0c5f17c3e4d589b4faf6a2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6d8fbede2e492e55283072e426ba81ec90f54ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d8fbede2e492e55283072e426ba81ec90f54ae", "html_url": "https://github.com/rust-lang/rust/commit/e6d8fbede2e492e55283072e426ba81ec90f54ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6d8fbede2e492e55283072e426ba81ec90f54ae/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883b6aacba85b524a194577a24a47f115106ecc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/883b6aacba85b524a194577a24a47f115106ecc8", "html_url": "https://github.com/rust-lang/rust/commit/883b6aacba85b524a194577a24a47f115106ecc8"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "deb49b61e8d5e6d81ae8caf94de3c0b52a5660e7", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e6d8fbede2e492e55283072e426ba81ec90f54ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d8fbede2e492e55283072e426ba81ec90f54ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=e6d8fbede2e492e55283072e426ba81ec90f54ae", "patch": "@@ -5,7 +5,6 @@ use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Place, ReadOnlyBodyAndCache};\n use rustc::ty::subst::GenericArg;\n-use rustc::ty::Ty;\n \n use super::TypeChecker;\n \n@@ -84,17 +83,6 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n     }\n }\n \n-fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty<'tcx>) {\n-    debug!(\"add_regions(local={:?}, type={:?})\", local, ty);\n-    typeck.tcx().for_each_free_region(&ty, |region| {\n-        let region_vid = typeck.borrowck_context.universal_regions.to_region_vid(region);\n-        debug!(\"add_regions for region {:?}\", region_vid);\n-        if let Some(facts) = typeck.borrowck_context.all_facts {\n-            facts.var_uses_region.push((local, region_vid));\n-        }\n-    });\n-}\n-\n pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     body: ReadOnlyBodyAndCache<'_, 'tcx>,\n@@ -118,10 +106,15 @@ pub(super) fn populate_access_facts(\n         facts.var_drop_used.extend(drop_used.iter().map(|&(local, location)| {\n             (local, location_table.mid_index(location))\n         }));\n-    }\n \n-    for (local, local_decl) in body.local_decls.iter_enumerated() {\n-        add_var_uses_regions(typeck, local, local_decl.ty);\n+        for (local, local_decl) in body.local_decls.iter_enumerated() {\n+            debug!(\"add var_uses_regions facts - local={:?}, type={:?}\", local, local_decl.ty);\n+            let universal_regions = &typeck.borrowck_context.universal_regions;\n+            typeck.infcx.tcx.for_each_free_region(&local_decl.ty, |region| {\n+                let region_vid = universal_regions.to_region_vid(region);\n+                facts.var_uses_region.push((local, region_vid));\n+            });\n+        }\n     }\n }\n \n@@ -133,12 +126,11 @@ pub(super) fn add_var_drops_regions(\n     kind: &GenericArg<'tcx>,\n ) {\n     debug!(\"add_var_drops_region(local={:?}, kind={:?}\", local, kind);\n-    let tcx = typeck.tcx();\n-\n-    tcx.for_each_free_region(kind, |drop_live_region| {\n-        let region_vid = typeck.borrowck_context.universal_regions.to_region_vid(drop_live_region);\n-        if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n+    if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n+        let universal_regions = &typeck.borrowck_context.universal_regions;\n+        typeck.infcx.tcx.for_each_free_region(kind, |drop_live_region| {\n+            let region_vid = universal_regions.to_region_vid(drop_live_region);\n             facts.var_drops_region.push((local, region_vid));\n-        };\n-    });\n+        });\n+    }\n }"}]}