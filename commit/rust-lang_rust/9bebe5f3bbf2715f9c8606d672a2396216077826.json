{"sha": "9bebe5f3bbf2715f9c8606d672a2396216077826", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZWJlNWYzYmJmMjcxNWY5Yzg2MDZkNjcyYTIzOTYyMTYwNzc4MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T15:14:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T15:14:25Z"}, "message": "Auto merge of #25059 - erickt:pprint, r=acrichto\n\nThe recent quote changes unfortunately broke unquoting statements like `let foo = 5` because the parser requires their to be a trailing semicolon in those statements. Along the way I added support for unquoting generics and where clauses as well as better pretty printing of `token::Interpolated`.", "tree": {"sha": "94bca0791705d56a8afe947b4673581a2c921a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94bca0791705d56a8afe947b4673581a2c921a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bebe5f3bbf2715f9c8606d672a2396216077826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bebe5f3bbf2715f9c8606d672a2396216077826", "html_url": "https://github.com/rust-lang/rust/commit/9bebe5f3bbf2715f9c8606d672a2396216077826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bebe5f3bbf2715f9c8606d672a2396216077826/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a4b83c1a73260b9c34a66d3bde62ff09d01863", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a4b83c1a73260b9c34a66d3bde62ff09d01863", "html_url": "https://github.com/rust-lang/rust/commit/13a4b83c1a73260b9c34a66d3bde62ff09d01863"}, {"sha": "b62290d421acf39db929f05522c8ce530e031067", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62290d421acf39db929f05522c8ce530e031067", "html_url": "https://github.com/rust-lang/rust/commit/b62290d421acf39db929f05522c8ce530e031067"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "e0753b2f6f6eebe9c2bda077d6ed6522b92963c3", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -28,8 +28,7 @@ pub mod rt {\n     use ast;\n     use codemap::Spanned;\n     use ext::base::ExtCtxt;\n-    use parse::token;\n-    use parse;\n+    use parse::{self, token, classify};\n     use ptr::P;\n     use std::rc::Rc;\n \n@@ -94,6 +93,18 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::Generics {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![ast::TtToken(DUMMY_SP, token::Interpolated(token::NtGenerics(self.clone())))]\n+        }\n+    }\n+\n+    impl ToTokens for ast::WhereClause {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![ast::TtToken(DUMMY_SP, token::Interpolated(token::NtWhereClause(self.clone())))]\n+        }\n+    }\n+\n     impl ToTokens for P<ast::Item> {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n             vec![ast::TtToken(self.span, token::Interpolated(token::NtItem(self.clone())))]\n@@ -114,7 +125,16 @@ pub mod rt {\n \n     impl ToTokens for P<ast::Stmt> {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n-            vec![ast::TtToken(self.span, token::Interpolated(token::NtStmt(self.clone())))]\n+            let mut tts = vec![\n+                ast::TtToken(self.span, token::Interpolated(token::NtStmt(self.clone())))\n+            ];\n+\n+            // Some statements require a trailing semicolon.\n+            if classify::stmt_ends_with_semi(&self.node) {\n+                tts.push(ast::TtToken(self.span, token::Semi));\n+            }\n+\n+            tts\n         }\n     }\n "}, {"sha": "4bf15f509a048e1f34b833228ba10da97cd43fa2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -689,6 +689,9 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtTraitItem(arm) =>\n             token::NtTraitItem(fld.fold_trait_item(arm)\n                                .expect_one(\"expected fold to produce exactly one item\")),\n+        token::NtGenerics(generics) => token::NtGenerics(fld.fold_generics(generics)),\n+        token::NtWhereClause(where_clause) =>\n+            token::NtWhereClause(fld.fold_where_clause(where_clause)),\n     }\n }\n "}, {"sha": "9bf6fa88ba5531d48e61fce29a2fb34548a9f8c9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -3808,6 +3808,8 @@ impl<'a> Parser<'a> {\n     ///                  | ( < lifetimes , typaramseq ( , )? > )\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     pub fn parse_generics(&mut self) -> PResult<ast::Generics> {\n+        maybe_whole!(self, NtGenerics);\n+\n         if try!(self.eat(&token::Lt) ){\n             let lifetime_defs = try!(self.parse_lifetime_defs());\n             let mut seen_default = false;\n@@ -3928,6 +3930,8 @@ impl<'a> Parser<'a> {\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub fn parse_where_clause(&mut self) -> PResult<ast::WhereClause> {\n+        maybe_whole!(self, NtWhereClause);\n+\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),"}, {"sha": "832fec40199b8ae9be51f7ed59abf0368c50b08a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -385,6 +385,8 @@ pub enum Nonterminal {\n     NtArm(ast::Arm),\n     NtImplItem(P<ast::ImplItem>),\n     NtTraitItem(P<ast::TraitItem>),\n+    NtGenerics(ast::Generics),\n+    NtWhereClause(ast::WhereClause),\n }\n \n impl fmt::Debug for Nonterminal {\n@@ -403,6 +405,8 @@ impl fmt::Debug for Nonterminal {\n             NtArm(..) => f.pad(\"NtArm(..)\"),\n             NtImplItem(..) => f.pad(\"NtImplItem(..)\"),\n             NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n+            NtGenerics(..) => f.pad(\"NtGenerics(..)\"),\n+            NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n         }\n     }\n }"}, {"sha": "b71d65a8fb0c5dcafdd173deefdf6e847ac6dd6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -287,19 +287,21 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::SpecialVarNt(var)    => format!(\"${}\", var.as_str()),\n \n         token::Interpolated(ref nt) => match *nt {\n-            token::NtExpr(ref e)   => expr_to_string(&**e),\n-            token::NtMeta(ref e)   => meta_item_to_string(&**e),\n-            token::NtTy(ref e)     => ty_to_string(&**e),\n-            token::NtPath(ref e)   => path_to_string(&**e),\n-            token::NtItem(..)      => \"an interpolated item\".to_string(),\n-            token::NtBlock(..)     => \"an interpolated block\".to_string(),\n-            token::NtStmt(..)      => \"an interpolated statement\".to_string(),\n-            token::NtPat(..)       => \"an interpolated pattern\".to_string(),\n-            token::NtIdent(..)     => \"an interpolated identifier\".to_string(),\n-            token::NtTT(..)        => \"an interpolated tt\".to_string(),\n-            token::NtArm(..)       => \"an interpolated arm\".to_string(),\n-            token::NtImplItem(..)  => \"an interpolated impl item\".to_string(),\n-            token::NtTraitItem(..) => \"an interpolated trait item\".to_string(),\n+            token::NtExpr(ref e)        => expr_to_string(&**e),\n+            token::NtMeta(ref e)        => meta_item_to_string(&**e),\n+            token::NtTy(ref e)          => ty_to_string(&**e),\n+            token::NtPath(ref e)        => path_to_string(&**e),\n+            token::NtItem(ref e)        => item_to_string(&**e),\n+            token::NtBlock(ref e)       => block_to_string(&**e),\n+            token::NtStmt(ref e)        => stmt_to_string(&**e),\n+            token::NtPat(ref e)         => pat_to_string(&**e),\n+            token::NtIdent(ref e, _)    => ident_to_string(&**e),\n+            token::NtTT(ref e)          => tt_to_string(&**e),\n+            token::NtArm(ref e)         => arm_to_string(&*e),\n+            token::NtImplItem(ref e)    => impl_item_to_string(&**e),\n+            token::NtTraitItem(ref e)   => trait_item_to_string(&**e),\n+            token::NtGenerics(ref e)    => generics_to_string(&*e),\n+            token::NtWhereClause(ref e) => where_clause_to_string(&*e),\n         }\n     }\n }"}, {"sha": "5182f274255ae4b956b05ce837dd315ae0eafe3c", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bebe5f3bbf2715f9c8606d672a2396216077826/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=9bebe5f3bbf2715f9c8606d672a2396216077826", "patch": "@@ -43,6 +43,12 @@ fn syntax_extension(cx: &ExtCtxt) {\n     let _n: syntax::ast::Attribute = quote_attr!(cx, #![cfg(foo, bar = \"baz\")]);\n \n     let _o: Option<P<syntax::ast::Item>> = quote_item!(cx, fn foo<T: ?Sized>() {});\n+\n+    let stmts = vec![\n+        quote_stmt!(cx, let x = 1;).unwrap(),\n+        quote_stmt!(cx, let y = 2;).unwrap(),\n+    ];\n+    let expr: P<syntax::ast::Expr> = quote_expr!(cx, x + y);\n }\n \n fn main() {"}]}