{"sha": "82d8e8420bf072cad7837edb70473622b986544b", "node_id": "C_kwDOAAsO6NoAKDgyZDhlODQyMGJmMDcyY2FkNzgzN2VkYjcwNDczNjIyYjk4NjU0NGI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-14T08:06:07Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-14T08:07:49Z"}, "message": "relax `suspicious_auto_trait_impls` lint", "tree": {"sha": "abb89ac9524ba25c786d51d177964e091a0fd458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb89ac9524ba25c786d51d177964e091a0fd458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82d8e8420bf072cad7837edb70473622b986544b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82d8e8420bf072cad7837edb70473622b986544b", "html_url": "https://github.com/rust-lang/rust/commit/82d8e8420bf072cad7837edb70473622b986544b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82d8e8420bf072cad7837edb70473622b986544b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f58828fdc3d1eb114c47bf1331a9bb638eab246", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f58828fdc3d1eb114c47bf1331a9bb638eab246", "html_url": "https://github.com/rust-lang/rust/commit/3f58828fdc3d1eb114c47bf1331a9bb638eab246"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "5dfd444133a37ffb8b17d857be35936e23fe914b", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82d8e8420bf072cad7837edb70473622b986544b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d8e8420bf072cad7837edb70473622b986544b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=82d8e8420bf072cad7837edb70473622b986544b", "patch": "@@ -297,17 +297,11 @@ impl<'tcx> TypeVisitor<'tcx> for AreUniqueParamsVisitor {\n             _ => ControlFlow::Break(NotUniqueParam::NotParam(t.into())),\n         }\n     }\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match *r {\n-            ty::ReEarlyBound(p) => {\n-                if self.seen.insert(p.index) {\n-                    ControlFlow::CONTINUE\n-                } else {\n-                    ControlFlow::Break(NotUniqueParam::DuplicateParam(r.into()))\n-                }\n-            }\n-            _ => ControlFlow::Break(NotUniqueParam::NotParam(r.into())),\n-        }\n+    fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // We don't drop candidates during candidate assembly because of region\n+        // constraints, so the behavior for impls only constrained by regions\n+        // will not change.\n+        ControlFlow::CONTINUE\n     }\n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match c.val() {"}, {"sha": "7712e84f4a243b0127c965bbb80e41edea9006aa", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82d8e8420bf072cad7837edb70473622b986544b/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d8e8420bf072cad7837edb70473622b986544b/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs?ref=82d8e8420bf072cad7837edb70473622b986544b", "patch": "@@ -41,4 +41,10 @@ unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n //~^ ERROR\n //~| WARNING this will change its meaning\n \n+pub struct WithLifetime<'a, T>(&'a (), T);\n+unsafe impl<T> Send for WithLifetime<'static, T> {} // ok\n+unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n fn main() {}"}, {"sha": "e299e5369fe030b3322a460c833812deaeccccae", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82d8e8420bf072cad7837edb70473622b986544b/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82d8e8420bf072cad7837edb70473622b986544b/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=82d8e8420bf072cad7837edb70473622b986544b", "patch": "@@ -63,5 +63,20 @@ LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `*const T` is not a generic parameter\n \n-error: aborting due to 4 previous errors\n+error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:46:1\n+   |\n+LL | unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:44:1\n+   |\n+LL | pub struct WithLifetime<'a, T>(&'a (), T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `Vec<T>` is not a generic parameter\n+\n+error: aborting due to 5 previous errors\n "}]}