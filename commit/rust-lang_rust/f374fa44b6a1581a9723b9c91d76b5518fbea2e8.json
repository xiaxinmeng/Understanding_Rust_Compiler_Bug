{"sha": "f374fa44b6a1581a9723b9c91d76b5518fbea2e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzRmYTQ0YjZhMTU4MWE5NzIzYjljOTFkNzZiNTUxOGZiZWEyZTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-11T23:58:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-12T19:48:46Z"}, "message": "Tighten up condition on use of opaque_tag, remove blunt hammer of alias arg-casting in trans_args.", "tree": {"sha": "9581b9bc9c9fb04955bd4180b937b33897845096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9581b9bc9c9fb04955bd4180b937b33897845096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f374fa44b6a1581a9723b9c91d76b5518fbea2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f374fa44b6a1581a9723b9c91d76b5518fbea2e8", "html_url": "https://github.com/rust-lang/rust/commit/f374fa44b6a1581a9723b9c91d76b5518fbea2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f374fa44b6a1581a9723b9c91d76b5518fbea2e8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832ad0e04137ed2943fad44df71bcd06ed2ce511", "url": "https://api.github.com/repos/rust-lang/rust/commits/832ad0e04137ed2943fad44df71bcd06ed2ce511", "html_url": "https://github.com/rust-lang/rust/commit/832ad0e04137ed2943fad44df71bcd06ed2ce511"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "9f1702cc77a93091ee253fd58642df82300a1579", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f374fa44b6a1581a9723b9c91d76b5518fbea2e8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f374fa44b6a1581a9723b9c91d76b5518fbea2e8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f374fa44b6a1581a9723b9c91d76b5518fbea2e8", "patch": "@@ -673,7 +673,7 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t, bool boxed) -> TypeRef {\n         case (ty.ty_char) { llty = T_char(); }\n         case (ty.ty_str) { llty = T_ptr(T_str()); }\n         case (ty.ty_tag(_, _)) {\n-            if (boxed) {\n+            if (ty.type_has_dynamic_size(t)) {\n                 llty = T_opaque_tag(cx.tn);\n             } else {\n                 auto size = static_size_of_tag(cx, t);\n@@ -1128,7 +1128,25 @@ fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n     auto max_size = 0u;\n     auto variants = tag_variants(cx, tid);\n     for (variant_info variant in variants) {\n-        auto tup_ty = ty.plain_tup_ty(variant.args);\n+\n+        let vec[@ty.t] args = vec();\n+        for (@ty.t t in variant.args) {\n+            alt (t.struct) {\n+                // NB: We're just going for 'size' here, so we can do a little\n+                // faking work here and substitute all boxes to boxed ints;\n+                // this will break any tag cycles we might otherwise traverse\n+                // (which would cause infinite recursion while measuring\n+                // size).\n+                case (ty.ty_box(_)) {\n+                    args += vec(ty.plain_box_ty(ty.plain_ty(ty.ty_int),\n+                                                ast.imm));\n+                }\n+                case (_) {\n+                    args += vec(t);\n+                }\n+            }\n+        }\n+        auto tup_ty = ty.plain_tup_ty(args);\n \n         // Perform any type parameter substitutions.\n         tup_ty = ty.substitute_ty_params(ty_params, subtys, tup_ty);\n@@ -4420,9 +4438,6 @@ fn trans_args(@block_ctxt cx,\n                 }\n             }\n \n-            val = bcx.build.PointerCast(val, lldestty);\n-        } else if (mode == ast.alias) {\n-            auto lldestty = arg_tys.(i);\n             val = bcx.build.PointerCast(val, lldestty);\n         }\n "}]}