{"sha": "5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "node_id": "C_kwDOAAsO6NoAKDU1NDZjYjY0ZjZmYmJhNzA1Mjk1ODJiYmU1OGE0MGJhNGE4ZWQ5ZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T02:36:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T02:36:38Z"}, "message": "Auto merge of #109247 - saethlin:inline-without-inline, r=oli-obk\n\nPermit MIR inlining without #[inline]\n\nI noticed that there are at least a handful of portable-simd functions that have no `#[inline]` but compile to an assign + return.\n\nI locally benchmarked inlining thresholds between 0 and 50 in increments of 5, and 50 seems to be the best. Interesting. That didn't include check builds though, ~maybe perf will have something to say about that~.\n\nPerf has little useful to say about this. We generally regress all the check builds, as best as I can tell, due to a number of small codegen changes in a particular hot function in the compiler. Probably this is because we've nudged the inlining outcomes all over, and uses of `#[inline(always)]`/`#[inline(never)]` might need to be adjusted.", "tree": {"sha": "82603ce3d07dc6bb247669285f38009495a80d85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82603ce3d07dc6bb247669285f38009495a80d85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "html_url": "https://github.com/rust-lang/rust/commit/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23eb90ffa77943153d203c3d184c182490d758e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23eb90ffa77943153d203c3d184c182490d758e7", "html_url": "https://github.com/rust-lang/rust/commit/23eb90ffa77943153d203c3d184c182490d758e7"}, {"sha": "354177504757c3b79e38daa3f6c81004470f455f", "url": "https://api.github.com/repos/rust-lang/rust/commits/354177504757c3b79e38daa3f6c81004470f455f", "html_url": "https://github.com/rust-lang/rust/commit/354177504757c3b79e38daa3f6c81004470f455f"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "1525933aee3f42f2b36b004d2a0f47059df0e066", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -350,14 +350,8 @@ impl<'tcx> Inliner<'tcx> {\n         callsite: &CallSite<'tcx>,\n         callee_attrs: &CodegenFnAttrs,\n     ) -> Result<(), &'static str> {\n-        match callee_attrs.inline {\n-            InlineAttr::Never => return Err(\"never inline hint\"),\n-            InlineAttr::Always | InlineAttr::Hint => {}\n-            InlineAttr::None => {\n-                if self.tcx.sess.mir_opt_level() <= 2 {\n-                    return Err(\"at mir-opt-level=2, only #[inline] is inlined\");\n-                }\n-            }\n+        if let InlineAttr::Never = callee_attrs.inline {\n+            return Err(\"never inline hint\");\n         }\n \n         // Only inline local functions if they would be eligible for cross-crate"}, {"sha": "b7216a143180a391296264b1222e1dbcbbe39c81", "filename": "tests/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "d951cbfacec6685c66d950676325b0b3967895e7", "filename": "tests/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,5 +1,4 @@\n-//\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "f790cd0dadd7a07d1c899f495430bc37674e453b", "filename": "tests/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "e19eec36b31ede4e76d3560d9fe88cb3aaed6980", "filename": "tests/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "ad0ed7da28e642951aec8e07b7c130796cfb1735", "filename": "tests/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "164ef794ca7e1a294b6b9bd8f76905acc287e7f3", "filename": "tests/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,5 +1,4 @@\n-//\n-// compile-flags:-Zprint-mono-items=eager\n+// compile-flags:-Zprint-mono-items=eager -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "d953582cce9b60c6032dd0de6247320259b16955", "filename": "tests/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-Zprint-mono-items=eager -Zpolymorphize=on\n+// compile-flags:-Zprint-mono-items=eager -Zpolymorphize=on -Zinline-mir=no\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "3706ddf99fd905c16c73786f16bc3c001eedeeac", "filename": "tests/codegen/array-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Farray-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Farray-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Farray-map.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -21,7 +21,7 @@ pub fn short_integer_map(x: [u32; 8]) -> [u32; 8] {\n pub fn short_integer_zip_map(x: [u32; 8], y: [u32; 8]) -> [u32; 8] {\n     // CHECK: %[[A:.+]] = load <8 x i32>\n     // CHECK: %[[B:.+]] = load <8 x i32>\n-    // CHECK: sub <8 x i32> %[[A]], %[[B]]\n+    // CHECK: sub <8 x i32> %[[B]], %[[A]]\n     // CHECK: store <8 x i32>\n     x.zip(y).map(|(x, y)| x - y)\n }"}, {"sha": "bb2a8e6a649d1e8c1bccba0d0fbda47921c7d2da", "filename": "tests/codegen/inline-hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Finline-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Finline-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finline-hint.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,7 +1,7 @@\n // Checks that closures, constructors, and shims except\n // for a drop glue receive inline hint by default.\n //\n-// compile-flags: -Cno-prepopulate-passes -Csymbol-mangling-version=v0\n+// compile-flags: -Cno-prepopulate-passes -Csymbol-mangling-version=v0 -Zinline-mir=no\n #![crate_type = \"lib\"]\n \n pub fn f() {"}, {"sha": "449c5ca75fcdf60512245ef306f763bba8f9ea41", "filename": "tests/codegen/local-generics-in-exe-internalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Flocal-generics-in-exe-internalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Flocal-generics-in-exe-internalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Flocal-generics-in-exe-internalized.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes -Zshare-generics=yes\n+// compile-flags: -C no-prepopulate-passes -Zshare-generics=yes -Zinline-mir=no\n \n // Check that local generics are internalized if they are in the same CGU\n "}, {"sha": "15bd0f17421826099d24f6368a58f2671b88f095", "filename": "tests/codegen/remap_path_prefix/auxiliary/xcrate-generic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -3,4 +3,6 @@\n \n #![crate_type = \"lib\"]\n \n-pub fn foo<T>() {}\n+pub fn foo<T: Default>() -> T {\n+    T::default()\n+}"}, {"sha": "399deec1fc93991f00d0a259b02bbc050bd8bfa7", "filename": "tests/codegen/remap_path_prefix/xcrate-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc/tests%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs?ref=5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "patch": "@@ -7,7 +7,7 @@\n extern crate xcrate_generic;\n \n pub fn foo() {\n-    xcrate_generic::foo::<u32>();\n+    println!(\"{}\", xcrate_generic::foo::<u32>());\n }\n \n // Here we check that local debuginfo is mapped correctly."}]}