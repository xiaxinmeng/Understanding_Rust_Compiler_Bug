{"sha": "aae7901a78d5804306f7b20b01622d2a423db37c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZTc5MDFhNzhkNTgwNDMwNmY3YjIwYjAxNjIyZDJhNDIzZGIzN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-08T03:51:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-08T03:51:15Z"}, "message": "auto merge of #16285 : alexcrichton/rust/rename-share, r=huonw\n\nThis leaves the `Share` trait at `std::kinds` via a `#[deprecated]` `pub use`\r\nstatement, but the `NoShare` struct is no longer part of `std::kinds::marker`\r\ndue to #12660 (the build cannot bootstrap otherwise).\r\n\r\nAll code referencing the `Share` trait should now reference the `Sync` trait,\r\nand all code referencing the `NoShare` type should now reference the `NoSync`\r\ntype. The functionality and meaning of this trait have not changed, only the\r\nnaming.\r\n\r\nCloses #16281\r\n[breaking-change]", "tree": {"sha": "5441f8447f858c9cb63ae8d65b33c5c7be8e07a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5441f8447f858c9cb63ae8d65b33c5c7be8e07a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aae7901a78d5804306f7b20b01622d2a423db37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aae7901a78d5804306f7b20b01622d2a423db37c", "html_url": "https://github.com/rust-lang/rust/commit/aae7901a78d5804306f7b20b01622d2a423db37c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aae7901a78d5804306f7b20b01622d2a423db37c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d2bf400ce1bc2cec832f9d5b8e763f06bb7f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d2bf400ce1bc2cec832f9d5b8e763f06bb7f43", "html_url": "https://github.com/rust-lang/rust/commit/87d2bf400ce1bc2cec832f9d5b8e763f06bb7f43"}, {"sha": "1f760d5d1a448c08ff4b66cfa8d35d39a5d667c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f760d5d1a448c08ff4b66cfa8d35d39a5d667c0", "html_url": "https://github.com/rust-lang/rust/commit/1f760d5d1a448c08ff4b66cfa8d35d39a5d667c0"}], "stats": {"total": 389, "additions": 199, "deletions": 190}, "files": [{"sha": "eb060d06cc4ff3fc33b3aee7c907b77c8804d449", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -50,15 +50,15 @@ non-deterministic behavior. Rust provides the tools to make using a GC\n possible and even pleasant, but it should not be a requirement for\n implementing the language.\n \n-## Non-`Share` `static mut` is unsafe\n+## Non-`Sync` `static mut` is unsafe\n \n-Types which are [`Share`][share] are thread-safe when multiple shared\n-references to them are used concurrently. Types which are not `Share` are not\n+Types which are [`Sync`][sync] are thread-safe when multiple shared\n+references to them are used concurrently. Types which are not `Sync` are not\n thread-safe, and thus when used in a global require unsafe code to use.\n \n-[share]: http://doc.rust-lang.org/core/kinds/trait.Share.html\n+[sync]: http://doc.rust-lang.org/core/kinds/trait.Sync.html\n \n-### If mutable static items that implement `Share` are safe, why is taking &mut SHARABLE unsafe?\n+### If mutable static items that implement `Sync` are safe, why is taking &mut SHARABLE unsafe?\n \n Having multiple aliasing `&mut T`s is never allowed. Due to the nature of\n globals, the borrow checker cannot possibly ensure that a static obeys the"}, {"sha": "8349c8ebcb6489e72d288c967186b6e9a1722cf8", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -699,10 +699,10 @@ Other features provided by lang items include:\n - stack unwinding and general failure; the `eh_personality`, `fail_`\n   and `fail_bounds_checks` lang items.\n - the traits in `std::kinds` used to indicate types that satisfy\n-  various kinds; lang items `send`, `share` and `copy`.\n+  various kinds; lang items `send`, `sync` and `copy`.\n - the marker types and variance indicators found in\n   `std::kinds::markers`; lang items `covariant_type`,\n-  `contravariant_lifetime`, `no_share_bound`, etc.\n+  `contravariant_lifetime`, `no_sync_bound`, etc.\n \n Lang items are loaded lazily by the compiler; e.g. if one never uses\n `Box` then there is no need to define functions for `exchange_malloc`"}, {"sha": "9061a623c03f024256c5af2a8fae9cf67f5b0efe", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -2111,7 +2111,7 @@ A complete list of the built-in language items follows:\n   : Has a size known at compile time.\n * `copy`\n   : Types that do not move ownership when used by-value.\n-* `share`\n+* `sync`\n   : Able to be safely shared between tasks when aliased.\n * `drop`\n   : Have destructors.\n@@ -2191,8 +2191,8 @@ These types help drive the compiler's analysis\n   : This type does not implement \"send\", even if eligible\n * `no_copy_bound`\n   : This type does not implement \"copy\", even if eligible\n-* `no_share_bound`\n-  : This type does not implement \"share\", even if eligible\n+* `no_sync_bound`\n+  : This type does not implement \"sync\", even if eligible\n * `managed_bound`\n   : This type implements \"managed\"\n "}, {"sha": "1a004e31c7d7a63e47074db782a0f85c86f835f3", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -2196,7 +2196,7 @@ and may not be overridden:\n Types are sendable\n unless they contain references.\n \n-* `Share` - Types that are *threadsafe*.\n+* `Sync` - Types that are *threadsafe*.\n These are types that are safe to be used across several threads with access to\n a `&T` pointer. `Mutex<T>` is an example of a *sharable* type with internal mutable data.\n \n@@ -2250,7 +2250,7 @@ We say that the `Printable` trait _provides_ a `print` method with the\n given signature.  This means that we can call `print` on an argument\n of any type that implements the `Printable` trait.\n \n-Rust's built-in `Send` and `Share` types are examples of traits that\n+Rust's built-in `Send` and `Sync` types are examples of traits that\n don't provide any methods.\n \n Traits may be implemented for specific types with [impls]. An impl for\n@@ -2535,7 +2535,7 @@ select the method to call at runtime.\n \n This usage of traits is similar to Java interfaces.\n \n-There are some built-in bounds, such as `Send` and `Share`, which are properties\n+There are some built-in bounds, such as `Send` and `Sync`, which are properties\n of the components of types. By design, trait objects don't know the exact type\n of their contents and so the compiler cannot reason about those properties.\n \n@@ -2548,7 +2548,7 @@ trait Foo {}\n trait Bar<T> {}\n \n fn sendable_foo(f: Box<Foo + Send>) { /* ... */ }\n-fn shareable_bar<T: Share>(b: &Bar<T> + Share) { /* ... */ }\n+fn sync_bar<T: Sync>(b: &Bar<T> + Sync) { /* ... */ }\n ~~~\n \n When no colon is specified (such as the type `Box<Foo>`), it is inferred that the"}, {"sha": "d8330b84f31191585ac5fc2dfe45dcd5c158bd5e", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -76,7 +76,7 @@ syn keyword   rustType        f64 i8 i16 i32 i64 str Self\n \" to make it easy to update.\n \n \" Core operators {{{3\n-syn keyword   rustTrait       Copy Send Sized Share\n+syn keyword   rustTrait       Copy Send Sized Sync\n syn keyword   rustTrait       Add Sub Mul Div Rem Neg Not\n syn keyword   rustTrait       BitAnd BitOr BitXor\n syn keyword   rustTrait       Drop Deref DerefMut"}, {"sha": "1d6714430a8ed70b7c12882755cd8d69558787de", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -15,7 +15,7 @@\n \n use core::atomic;\n use core::clone::Clone;\n-use core::kinds::{Share, Send};\n+use core::kinds::{Sync, Send};\n use core::mem::{min_align_of, size_of, drop};\n use core::mem;\n use core::ops::{Drop, Deref};\n@@ -76,7 +76,7 @@ struct ArcInner<T> {\n     data: T,\n }\n \n-impl<T: Share + Send> Arc<T> {\n+impl<T: Sync + Send> Arc<T> {\n     /// Create an atomically reference counted wrapper.\n     #[inline]\n     #[stable]\n@@ -95,8 +95,8 @@ impl<T: Share + Send> Arc<T> {\n     fn inner(&self) -> &ArcInner<T> {\n         // This unsafety is ok because while this arc is alive we're guaranteed\n         // that the inner pointer is valid. Furthermore, we know that the\n-        // `ArcInner` structure itself is `Share` because the inner data is\n-        // `Share` as well, so we're ok loaning out an immutable pointer to\n+        // `ArcInner` structure itself is `Sync` because the inner data is\n+        // `Sync` as well, so we're ok loaning out an immutable pointer to\n         // these contents.\n         unsafe { &*self._ptr }\n     }\n@@ -115,7 +115,7 @@ impl<T: Share + Send> Arc<T> {\n }\n \n #[unstable = \"waiting on stability of Clone\"]\n-impl<T: Share + Send> Clone for Arc<T> {\n+impl<T: Sync + Send> Clone for Arc<T> {\n     /// Duplicate an atomically reference counted wrapper.\n     ///\n     /// The resulting two `Arc` objects will point to the same underlying data\n@@ -140,14 +140,14 @@ impl<T: Share + Send> Clone for Arc<T> {\n }\n \n #[experimental = \"Deref is experimental.\"]\n-impl<T: Send + Share> Deref<T> for Arc<T> {\n+impl<T: Send + Sync> Deref<T> for Arc<T> {\n     #[inline]\n     fn deref(&self) -> &T {\n         &self.inner().data\n     }\n }\n \n-impl<T: Send + Share + Clone> Arc<T> {\n+impl<T: Send + Sync + Clone> Arc<T> {\n     /// Acquires a mutable pointer to the inner contents by guaranteeing that\n     /// the reference count is one (no sharing is possible).\n     ///\n@@ -175,7 +175,7 @@ impl<T: Send + Share + Clone> Arc<T> {\n \n #[unsafe_destructor]\n #[experimental = \"waiting on stability of Drop\"]\n-impl<T: Share + Send> Drop for Arc<T> {\n+impl<T: Sync + Send> Drop for Arc<T> {\n     fn drop(&mut self) {\n         // This structure has #[unsafe_no_drop_flag], so this drop glue may run\n         // more than once (but it is guaranteed to be zeroed after the first if\n@@ -219,7 +219,7 @@ impl<T: Share + Send> Drop for Arc<T> {\n }\n \n #[experimental = \"Weak pointers may not belong in this module.\"]\n-impl<T: Share + Send> Weak<T> {\n+impl<T: Sync + Send> Weak<T> {\n     /// Attempts to upgrade this weak reference to a strong reference.\n     ///\n     /// This method will fail to upgrade this reference if the strong reference\n@@ -245,7 +245,7 @@ impl<T: Share + Send> Weak<T> {\n }\n \n #[experimental = \"Weak pointers may not belong in this module.\"]\n-impl<T: Share + Send> Clone for Weak<T> {\n+impl<T: Sync + Send> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {\n         // See comments in Arc::clone() for why this is relaxed\n@@ -256,7 +256,7 @@ impl<T: Share + Send> Clone for Weak<T> {\n \n #[unsafe_destructor]\n #[experimental = \"Weak pointers may not belong in this module.\"]\n-impl<T: Share + Send> Drop for Weak<T> {\n+impl<T: Sync + Send> Drop for Weak<T> {\n     fn drop(&mut self) {\n         // see comments above for why this check is here\n         if self._ptr.is_null() { return }"}, {"sha": "060f9875bfcf9a154cd9b91f766fc9da557f9c4d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -179,7 +179,7 @@ pub struct Rc<T> {\n     // field accesses of the contained type via Deref\n     _ptr: *mut RcBox<T>,\n     _nosend: marker::NoSend,\n-    _noshare: marker::NoShare\n+    _noshare: marker::NoSync\n }\n \n #[stable]\n@@ -199,7 +199,7 @@ impl<T> Rc<T> {\n                     weak: Cell::new(1)\n                 }),\n                 _nosend: marker::NoSend,\n-                _noshare: marker::NoShare\n+                _noshare: marker::NoSync\n             }\n         }\n     }\n@@ -213,7 +213,7 @@ impl<T> Rc<T> {\n         Weak {\n             _ptr: self._ptr,\n             _nosend: marker::NoSend,\n-            _noshare: marker::NoShare\n+            _noshare: marker::NoSync\n         }\n     }\n }\n@@ -348,7 +348,7 @@ impl<T> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n-        Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoShare }\n+        Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n }\n \n@@ -412,7 +412,7 @@ pub struct Weak<T> {\n     // field accesses of the contained type via Deref\n     _ptr: *mut RcBox<T>,\n     _nosend: marker::NoSend,\n-    _noshare: marker::NoShare\n+    _noshare: marker::NoSync\n }\n \n #[experimental = \"Weak pointers may not belong in this module.\"]\n@@ -423,7 +423,7 @@ impl<T> Weak<T> {\n             None\n         } else {\n             self.inc_strong();\n-            Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoShare })\n+            Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync })\n         }\n     }\n }\n@@ -451,7 +451,7 @@ impl<T> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {\n         self.inc_weak();\n-        Weak { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoShare }\n+        Weak { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n }\n "}, {"sha": "2a7b1630edf689a6d17df86e929cd50ad0c4e9fa", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -165,7 +165,7 @@ use option::{None, Option, Some};\n #[unstable = \"likely to be renamed; otherwise stable\"]\n pub struct Cell<T> {\n     value: UnsafeCell<T>,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n #[stable]\n@@ -174,7 +174,7 @@ impl<T:Copy> Cell<T> {\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n             value: UnsafeCell::new(value),\n-            noshare: marker::NoShare,\n+            noshare: marker::NoSync,\n         }\n     }\n \n@@ -213,7 +213,7 @@ pub struct RefCell<T> {\n     value: UnsafeCell<T>,\n     borrow: Cell<BorrowFlag>,\n     nocopy: marker::NoCopy,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -230,7 +230,7 @@ impl<T> RefCell<T> {\n             value: UnsafeCell::new(value),\n             borrow: Cell::new(UNUSED),\n             nocopy: marker::NoCopy,\n-            noshare: marker::NoShare,\n+            noshare: marker::NoSync,\n         }\n     }\n \n@@ -430,7 +430,7 @@ impl<'b, T> DerefMut<T> for RefMut<'b, T> {\n ///\n /// struct NotThreadSafe<T> {\n ///     value: UnsafeCell<T>,\n-///     marker: marker::NoShare\n+///     marker: marker::NoSync\n /// }\n /// ```\n ///"}, {"sha": "2a6bf28cfc4b63fde6a331304c3dbc57d393c631", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -20,6 +20,9 @@ by the compiler automatically for the types to which they apply.\n \n */\n \n+#[deprecated = \"This has been renamed to Sync\"]\n+pub use Share = self::Sync;\n+\n /// Types able to be transferred across task boundaries.\n #[lang=\"send\"]\n pub trait Send {\n@@ -40,51 +43,58 @@ pub trait Copy {\n \n /// Types that can be safely shared between tasks when aliased.\n ///\n-/// The precise definition is: a type `T` is `Share` if `&T` is\n+/// The precise definition is: a type `T` is `Sync` if `&T` is\n /// thread-safe. In other words, there is no possibility of data races\n /// when passing `&T` references between tasks.\n ///\n /// As one would expect, primitive types like `u8` and `f64` are all\n-/// `Share`, and so are simple aggregate types containing them (like\n-/// tuples, structs and enums). More instances of basic `Share` types\n+/// `Sync`, and so are simple aggregate types containing them (like\n+/// tuples, structs and enums). More instances of basic `Sync` types\n /// include \"immutable\" types like `&T` and those with simple\n /// inherited mutability, such as `Box<T>`, `Vec<T>` and most other\n-/// collection types. (Generic parameters need to be `Share` for their\n-/// container to be `Share`.)\n+/// collection types. (Generic parameters need to be `Sync` for their\n+/// container to be `Sync`.)\n ///\n /// A somewhat surprising consequence of the definition is `&mut T` is\n-/// `Share` (if `T` is `Share`) even though it seems that it might\n+/// `Sync` (if `T` is `Sync`) even though it seems that it might\n /// provide unsynchronised mutation. The trick is a mutable reference\n /// stored in an aliasable reference (that is, `& &mut T`) becomes\n /// read-only, as if it were a `& &T`, hence there is no risk of a data\n /// race.\n ///\n-/// Types that are not `Share` are those that have \"interior\n+/// Types that are not `Sync` are those that have \"interior\n /// mutability\" in a non-thread-safe way, such as `Cell` and `RefCell`\n /// in `std::cell`. These types allow for mutation of their contents\n /// even when in an immutable, aliasable slot, e.g. the contents of\n /// `&Cell<T>` can be `.set`, and do not ensure data races are\n-/// impossible, hence they cannot be `Share`. A higher level example\n-/// of a non-`Share` type is the reference counted pointer\n+/// impossible, hence they cannot be `Sync`. A higher level example\n+/// of a non-`Sync` type is the reference counted pointer\n /// `std::rc::Rc`, because any reference `&Rc<T>` can clone a new\n /// reference, which modifies the reference counts in a non-atomic\n /// way.\n ///\n /// For cases when one does need thread-safe interior mutability,\n /// types like the atomics in `std::sync` and `Mutex` & `RWLock` in\n /// the `sync` crate do ensure that any mutation cannot cause data\n-/// races.  Hence these types are `Share`.\n+/// races.  Hence these types are `Sync`.\n ///\n /// Users writing their own types with interior mutability (or anything\n-/// else that is not thread-safe) should use the `NoShare` marker type\n+/// else that is not thread-safe) should use the `NoSync` marker type\n /// (from `std::kinds::marker`) to ensure that the compiler doesn't\n-/// consider the user-defined type to be `Share`.  Any types with\n+/// consider the user-defined type to be `Sync`.  Any types with\n /// interior mutability must also use the `std::cell::UnsafeCell` wrapper\n /// around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behaviour (for example,\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n+#[lang=\"sync\"]\n+#[cfg(not(stage0))]\n+pub trait Sync {\n+    // Empty\n+}\n+/// dox\n #[lang=\"share\"]\n-pub trait Share {\n+#[cfg(stage0)]\n+pub trait Sync {\n     // Empty\n }\n \n@@ -94,7 +104,6 @@ pub trait Share {\n /// implemented using unsafe code. In that case, you may want to embed\n /// some of the marker types below into your type.\n pub mod marker {\n-\n     /// A marker type whose type parameter `T` is considered to be\n     /// covariant with respect to the type itself. This is (typically)\n     /// used to indicate that an instance of the type `T` is being stored\n@@ -266,12 +275,12 @@ pub mod marker {\n     #[deriving(PartialEq,Clone)]\n     pub struct NoCopy;\n \n-    /// A type which is considered \"not shareable\", meaning that\n+    /// A type which is considered \"not sync\", meaning that\n     /// its contents are not threadsafe, hence they cannot be\n     /// shared between tasks.\n     #[lang=\"no_share_bound\"]\n     #[deriving(PartialEq,Clone)]\n-    pub struct NoShare;\n+    pub struct NoSync;\n \n     /// A type which is considered managed by the GC. This is typically\n     /// embedded in other types."}, {"sha": "5b7c7c8f31a6f2a80a4615801c93f20ac658bdf5", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -29,7 +29,7 @@\n //! ```\n \n // Reexported core operators\n-pub use kinds::{Copy, Send, Sized, Share};\n+pub use kinds::{Copy, Send, Sized, Sync};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop, Deref, DerefMut};"}, {"sha": "66040633ff1929a7fe5340cc7a39730d872108c8", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -20,18 +20,18 @@ pub enum PopResult<T> {\n \n pub fn queue<T: Send>() -> (Consumer<T>, Producer<T>) {\n     let a = Arc::new(mpsc::Queue::new());\n-    (Consumer { inner: a.clone(), noshare: marker::NoShare },\n-     Producer { inner: a, noshare: marker::NoShare })\n+    (Consumer { inner: a.clone(), noshare: marker::NoSync },\n+     Producer { inner: a, noshare: marker::NoSync })\n }\n \n pub struct Producer<T> {\n     inner: Arc<mpsc::Queue<T>>,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n pub struct Consumer<T> {\n     inner: Arc<mpsc::Queue<T>>,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n impl<T: Send> Consumer<T> {\n@@ -60,6 +60,6 @@ impl<T: Send> Producer<T> {\n \n impl<T: Send> Clone for Producer<T> {\n     fn clone(&self) -> Producer<T> {\n-        Producer { inner: self.inner.clone(), noshare: marker::NoShare }\n+        Producer { inner: self.inner.clone(), noshare: marker::NoSync }\n     }\n }"}, {"sha": "fed23185c5d27388fcd58f7723c85f6d60086655", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -633,7 +633,7 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n                 param_bounds.builtin_bounds.add(ty::BoundCopy);\n             }\n             'T' => {\n-                param_bounds.builtin_bounds.add(ty::BoundShare);\n+                param_bounds.builtin_bounds.add(ty::BoundSync);\n             }\n             'I' => {\n                 param_bounds.trait_bounds.push(Rc::new(parse_trait_ref(st, |x,y| conv(x,y))));"}, {"sha": "ba865c7ab04d01e5e9a019f250c1f568e2eba2e2", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -352,7 +352,7 @@ fn enc_bounds(w: &mut SeekableMemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n             ty::BoundStatic => mywrite!(w, \"O\"),\n             ty::BoundSized => mywrite!(w, \"Z\"),\n             ty::BoundCopy => mywrite!(w, \"P\"),\n-            ty::BoundShare => mywrite!(w, \"T\"),\n+            ty::BoundSync => mywrite!(w, \"T\"),\n         }\n     }\n "}, {"sha": "223e518fecdf7882ac8b7cbacc72dc2e2af58c7d", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -13,7 +13,7 @@\n // Language items are items that represent concepts intrinsic to the language\n // itself. Examples are:\n //\n-// * Traits that specify \"kinds\"; e.g. \"Share\", \"Send\".\n+// * Traits that specify \"kinds\"; e.g. \"Sync\", \"Send\".\n //\n // * Traits that represent operators; e.g. \"Add\", \"Sub\", \"Index\".\n //\n@@ -92,8 +92,8 @@ impl LanguageItems {\n             Some(ty::BoundSized)\n         } else if Some(id) == self.copy_trait() {\n             Some(ty::BoundCopy)\n-        } else if Some(id) == self.share_trait() {\n-            Some(ty::BoundShare)\n+        } else if Some(id) == self.sync_trait() {\n+            Some(ty::BoundSync)\n         } else {\n             None\n         }\n@@ -218,7 +218,7 @@ lets_do_this! {\n     SendTraitLangItem,               \"send\",                    send_trait;\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n     CopyTraitLangItem,               \"copy\",                    copy_trait;\n-    ShareTraitLangItem,              \"share\",                   share_trait;\n+    SyncTraitLangItem,               \"sync\",                    sync_trait;\n \n     DropTraitLangItem,               \"drop\",                    drop_trait;\n \n@@ -296,7 +296,7 @@ lets_do_this! {\n \n     NoSendItem,                      \"no_send_bound\",           no_send_bound;\n     NoCopyItem,                      \"no_copy_bound\",           no_copy_bound;\n-    NoShareItem,                     \"no_share_bound\",          no_share_bound;\n+    NoSyncItem,                     \"no_share_bound\",          no_share_bound;\n     ManagedItem,                     \"managed_bound\",           managed_bound;\n \n     IteratorItem,                    \"iterator\",                iterator;"}, {"sha": "c27b0bb8cb1ebeac5eb625248a57800331d4bcfb", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -499,7 +499,7 @@ impl TypeMap {\n                         ty::BoundSend => unique_type_id.push_str(\"Send\"),\n                         ty::BoundSized => unique_type_id.push_str(\"Sized\"),\n                         ty::BoundCopy => unique_type_id.push_str(\"Copy\"),\n-                        ty::BoundShare => unique_type_id.push_str(\"Share\"),\n+                        ty::BoundSync => unique_type_id.push_str(\"Sync\"),\n                     };\n                     unique_type_id.push_char('+');\n                 }"}, {"sha": "0cc5486013aac8f152e1e3dcc0aaf92d2290c0b3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -833,7 +833,7 @@ pub enum BuiltinBound {\n     BoundSend,\n     BoundSized,\n     BoundCopy,\n-    BoundShare,\n+    BoundSync,\n }\n \n pub fn empty_builtin_bounds() -> BuiltinBounds {\n@@ -845,7 +845,7 @@ pub fn all_builtin_bounds() -> BuiltinBounds {\n     set.add(BoundStatic);\n     set.add(BoundSend);\n     set.add(BoundSized);\n-    set.add(BoundShare);\n+    set.add(BoundSync);\n     set\n }\n \n@@ -1804,7 +1804,7 @@ def_type_content_sets!(\n         ReachesBorrowed                     = 0b0000_0010__0000_0000__0000,\n         // ReachesManaged /* see [1] below */  = 0b0000_0100__0000_0000__0000,\n         ReachesMutable                      = 0b0000_1000__0000_0000__0000,\n-        ReachesNoShare                      = 0b0001_0000__0000_0000__0000,\n+        ReachesNoSync                       = 0b0001_0000__0000_0000__0000,\n         ReachesAll                          = 0b0001_1111__0000_0000__0000,\n \n         // Things that cause values to *move* rather than *copy*\n@@ -1828,8 +1828,8 @@ def_type_content_sets!(\n         // Things that prevent values from being considered sized\n         Nonsized                            = 0b0000_0000__0000_0000__0001,\n \n-        // Things that prevent values from being shared\n-        Nonsharable                         = 0b0001_0000__0000_0000__0000,\n+        // Things that prevent values from being sync\n+        Nonsync                             = 0b0001_0000__0000_0000__0000,\n \n         // Things that make values considered not POD (would be same\n         // as `Moves`, but for the fact that managed data `@` is\n@@ -1855,7 +1855,7 @@ impl TypeContents {\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n             BoundCopy => self.is_copy(cx),\n-            BoundShare => self.is_sharable(cx),\n+            BoundSync => self.is_sync(cx),\n         }\n     }\n \n@@ -1875,8 +1875,8 @@ impl TypeContents {\n         !self.intersects(TC::Nonsendable)\n     }\n \n-    pub fn is_sharable(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Nonsharable)\n+    pub fn is_sync(&self, _: &ctxt) -> bool {\n+        !self.intersects(TC::Nonsync)\n     }\n \n     pub fn owns_managed(&self) -> bool {\n@@ -2169,11 +2169,11 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n         } else if Some(did) == cx.lang_items.no_copy_bound() {\n             tc | TC::OwnsAffine\n         } else if Some(did) == cx.lang_items.no_share_bound() {\n-            tc | TC::ReachesNoShare\n+            tc | TC::ReachesNoSync\n         } else if Some(did) == cx.lang_items.unsafe_type() {\n             // FIXME(#13231): This shouldn't be needed after\n             // opt-in built-in bounds are implemented.\n-            (tc | TC::InteriorUnsafe) - TC::Nonsharable\n+            (tc | TC::InteriorUnsafe) - TC::Nonsync\n         } else {\n             tc\n         }\n@@ -2237,7 +2237,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 BoundSend => TC::Nonsendable,\n                 BoundSized => TC::Nonsized,\n                 BoundCopy => TC::Noncopy,\n-                BoundShare => TC::Nonsharable,\n+                BoundSync => TC::Nonsync,\n             };\n         });\n         return tc;"}, {"sha": "4e193f0f1d952f816ce290d7a97883fe0c2b733f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -646,7 +646,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundSend => \"Send\".to_string(),\n                 ty::BoundSized => \"Sized\".to_string(),\n                 ty::BoundCopy => \"Copy\".to_string(),\n-                ty::BoundShare => \"Share\".to_string(),\n+                ty::BoundSync => \"Sync\".to_string(),\n             });\n         }\n         for t in self.trait_bounds.iter() {\n@@ -931,7 +931,7 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundSend => \"Send\".to_string(),\n             ty::BoundSized => \"Sized\".to_string(),\n             ty::BoundCopy => \"Copy\".to_string(),\n-            ty::BoundShare => \"Share\".to_string(),\n+            ty::BoundSync => \"Sync\".to_string(),\n         }\n     }\n }"}, {"sha": "a1f486b3b31b81a92f14fabccda514d6c0632a9f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -535,9 +535,9 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n             ty::BoundCopy =>\n                 (tcx.lang_items.copy_trait().unwrap(),\n                  external_path(\"Copy\", &empty)),\n-            ty::BoundShare =>\n-                (tcx.lang_items.share_trait().unwrap(),\n-                 external_path(\"Share\", &empty)),\n+            ty::BoundSync =>\n+                (tcx.lang_items.sync_trait().unwrap(),\n+                 external_path(\"Sync\", &empty)),\n         };\n         let fqn = csearch::get_item_path(tcx, did);\n         let fqn = fqn.move_iter().map(|i| i.to_string()).collect();"}, {"sha": "27858b025c6cb5d7d7af2f8a1945080a10d2a643", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -112,7 +112,7 @@ struct TLDValueBox<T> {\n     // refcount of 0 means uninitialized value, 1 means initialized, 2+ means\n     // borrowed.\n     // NB: we use UnsafeCell instead of Cell because Ref should be allowed to\n-    // be Share. The only mutation occurs when a Ref is created or destroyed,\n+    // be Sync. The only mutation occurs when a Ref is created or destroyed,\n     // so there's no issue with &Ref being thread-safe.\n     refcount: UnsafeCell<uint>\n }"}, {"sha": "aa407ce8e0ccbb9de5d5e2637dab8b898ad10bb7", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -40,7 +40,7 @@\n #![experimental]\n \n // Reexported core operators\n-#[doc(no_inline)] pub use kinds::{Copy, Send, Sized, Share};\n+#[doc(no_inline)] pub use kinds::{Copy, Send, Sized, Sync};\n #[doc(no_inline)] pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n #[doc(no_inline)] pub use ops::{BitAnd, BitOr, BitXor};\n #[doc(no_inline)] pub use ops::{Drop, Deref, DerefMut};"}, {"sha": "31b993d8bab468b3f795ac8727c8b858cf855002", "filename": "src/libsync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fatomic.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -25,7 +25,7 @@\n //!\n //! [1]: http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync\n //!\n-//! Atomic variables are safe to share between threads (they implement `Share`)\n+//! Atomic variables are safe to share between threads (they implement `Sync`)\n //! but they do not themselves provide the mechanism for sharing. The most\n //! common way to share an atomic variable is to put it into an `Arc` (an\n //! atomically-reference-counted shared pointer)."}, {"sha": "45016b97566ceab20dbbf8d46302fdecd0ed90d0", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -375,7 +375,7 @@ pub struct Receiver<T> {\n     inner: UnsafeCell<Flavor<T>>,\n     receives: Cell<uint>,\n     // can't share in an arc\n-    marker: marker::NoShare,\n+    marker: marker::NoSync,\n }\n \n /// An iterator over messages on a receiver, this iterator will block\n@@ -393,7 +393,7 @@ pub struct Sender<T> {\n     inner: UnsafeCell<Flavor<T>>,\n     sends: Cell<uint>,\n     // can't share in an arc\n-    marker: marker::NoShare,\n+    marker: marker::NoSync,\n }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n@@ -402,7 +402,7 @@ pub struct Sender<T> {\n pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n     // can't share in an arc\n-    marker: marker::NoShare,\n+    marker: marker::NoSync,\n }\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n@@ -537,7 +537,7 @@ impl<T: Send> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n             sends: Cell::new(0),\n-            marker: marker::NoShare,\n+            marker: marker::NoSync,\n         }\n     }\n \n@@ -713,7 +713,7 @@ impl<T: Send> Drop for Sender<T> {\n \n impl<T: Send> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n-        SyncSender { inner: inner, marker: marker::NoShare }\n+        SyncSender { inner: inner, marker: marker::NoSync }\n     }\n \n     /// Sends a value on this synchronous channel.\n@@ -801,7 +801,7 @@ impl<T: Send> Drop for SyncSender<T> {\n \n impl<T: Send> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n-        Receiver { inner: UnsafeCell::new(inner), receives: Cell::new(0), marker: marker::NoShare }\n+        Receiver { inner: UnsafeCell::new(inner), receives: Cell::new(0), marker: marker::NoSync }\n     }\n \n     /// Blocks waiting for a value on this receiver"}, {"sha": "e70a730dc3a13823044466005bd25e806e8a2a13", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -87,15 +87,15 @@ struct Deque<T> {\n /// There may only be one worker per deque.\n pub struct Worker<T> {\n     deque: Arc<Deque<T>>,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n /// The stealing half of the work-stealing deque. Stealers have access to the\n /// opposite end of the deque from the worker, and they only have access to the\n /// `steal` method.\n pub struct Stealer<T> {\n     deque: Arc<Deque<T>>,\n-    noshare: marker::NoShare,\n+    noshare: marker::NoSync,\n }\n \n /// When stealing some data, this is an enumeration of the possible outcomes.\n@@ -153,8 +153,8 @@ impl<T: Send> BufferPool<T> {\n     pub fn deque(&self) -> (Worker<T>, Stealer<T>) {\n         let a = Arc::new(Deque::new(self.clone()));\n         let b = a.clone();\n-        (Worker { deque: a, noshare: marker::NoShare },\n-         Stealer { deque: b, noshare: marker::NoShare })\n+        (Worker { deque: a, noshare: marker::NoSync },\n+         Stealer { deque: b, noshare: marker::NoSync })\n     }\n \n     fn alloc(&mut self, bits: uint) -> Box<Buffer<T>> {\n@@ -217,7 +217,7 @@ impl<T: Send> Stealer<T> {\n \n impl<T: Send> Clone for Stealer<T> {\n     fn clone(&self) -> Stealer<T> {\n-        Stealer { deque: self.deque.clone(), noshare: marker::NoShare }\n+        Stealer { deque: self.deque.clone(), noshare: marker::NoSync }\n     }\n }\n "}, {"sha": "b07d06ca18e541589f1da8d3141b94acf804b1ea", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -298,7 +298,7 @@ pub struct RWLockReadGuard<'a, T> {\n     _guard: raw::RWLockReadGuard<'a>,\n }\n \n-impl<T: Send + Share> RWLock<T> {\n+impl<T: Send + Sync> RWLock<T> {\n     /// Create a reader/writer lock with the supplied data.\n     pub fn new(user_data: T) -> RWLock<T> {\n         RWLock::new_with_condvars(user_data, 1)\n@@ -359,7 +359,7 @@ impl<T: Send + Share> RWLock<T> {\n     }\n }\n \n-impl<'a, T: Send + Share> RWLockWriteGuard<'a, T> {\n+impl<'a, T: Send + Sync> RWLockWriteGuard<'a, T> {\n     /// Consumes this write lock token, returning a new read lock token.\n     ///\n     /// This will allow pending readers to come into the lock.\n@@ -375,13 +375,13 @@ impl<'a, T: Send + Share> RWLockWriteGuard<'a, T> {\n     }\n }\n \n-impl<'a, T: Send + Share> Deref<T> for RWLockReadGuard<'a, T> {\n+impl<'a, T: Send + Sync> Deref<T> for RWLockReadGuard<'a, T> {\n     fn deref<'a>(&'a self) -> &'a T { self._data }\n }\n-impl<'a, T: Send + Share> Deref<T> for RWLockWriteGuard<'a, T> {\n+impl<'a, T: Send + Sync> Deref<T> for RWLockWriteGuard<'a, T> {\n     fn deref<'a>(&'a self) -> &'a T { &*self._data }\n }\n-impl<'a, T: Send + Share> DerefMut<T> for RWLockWriteGuard<'a, T> {\n+impl<'a, T: Send + Sync> DerefMut<T> for RWLockWriteGuard<'a, T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T { &mut *self._data }\n }\n "}, {"sha": "c42d567fc18cee23134c0e2cc8723d6b6b258a47", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -87,7 +87,7 @@ impl WaitQueue {\n // The building-block used to make semaphores, mutexes, and rwlocks.\n struct Sem<Q> {\n     lock: mutex::Mutex,\n-    // n.b, we need Sem to be `Share`, but the WaitQueue type is not send/share\n+    // n.b, we need Sem to be `Sync`, but the WaitQueue type is not send/share\n     //      (for good reason). We have an internal invariant on this semaphore,\n     //      however, that the queue is never accessed outside of a locked\n     //      context."}, {"sha": "629b21875c9b61b37904f3e65f52e2c5e35009e8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -214,7 +214,7 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n-/// detects Copy, Send and Share.\n+/// detects Copy, Send and Sync.\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),"}, {"sha": "7cff6e8ff3c01c1ccf33f1fe3cbc6e24dd3ecbd2", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -27,7 +27,7 @@ pub fn expand_deriving_bound(cx: &mut ExtCtxt,\n             match tname.get() {\n                 \"Copy\" => \"Copy\",\n                 \"Send\" => \"Send\",\n-                \"Share\" => \"Share\",\n+                \"Sync\" => \"Sync\",\n                 ref tname => {\n                     cx.span_bug(span,\n                                 format!(\"expected built-in trait name but \\"}, {"sha": "a9b5c8a413463ee453c3bdcaf44589bcabfb8bac", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -94,7 +94,7 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             \"FromPrimitive\" => expand!(primitive::expand_deriving_from_primitive),\n \n                             \"Send\" => expand!(bounds::expand_deriving_bound),\n-                            \"Share\" => expand!(bounds::expand_deriving_bound),\n+                            \"Sync\" => expand!(bounds::expand_deriving_bound),\n                             \"Copy\" => expand!(bounds::expand_deriving_bound),\n \n                             ref tname => {"}, {"sha": "c2e1dd69a900ce0b97b4fad4aad35260531f9089", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -18,17 +18,17 @@ struct arc_destruct<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Share> Drop for arc_destruct<T> {\n+impl<T: Sync> Drop for arc_destruct<T> {\n     fn drop(&mut self) {}\n }\n \n-fn arc_destruct<T: Share>(data: int) -> arc_destruct<T> {\n+fn arc_destruct<T: Sync>(data: int) -> arc_destruct<T> {\n     arc_destruct {\n         _data: data\n     }\n }\n \n-fn arc<T: Share>(_data: T) -> arc_destruct<T> {\n+fn arc<T: Sync>(_data: T) -> arc_destruct<T> {\n     arc_destruct(0)\n }\n "}, {"sha": "0fa2d3459f433f9395fb4b89b695c93d65c566a2", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -13,6 +13,6 @@\n \n #![crate_type=\"lib\"]\n \n-pub trait RequiresShare : Share { }\n+pub trait RequiresShare : Sync { }\n pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n pub trait RequiresCopy : Copy { }"}, {"sha": "d5a648e3e20017c56130eac56c3257f76fe7f7e0", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -11,12 +11,12 @@\n // Test for traits that inherit from multiple builtin kinds at once,\n // testing that all such kinds must be present on implementing types.\n \n-trait Foo : Send+Share { }\n+trait Foo : Send+Sync { }\n \n-impl <T: Share> Foo for (T,) { } //~ ERROR cannot implement this trait\n+impl <T: Sync> Foo for (T,) { } //~ ERROR cannot implement this trait\n \n impl <T: Send> Foo for (T,T) { } //~ ERROR cannot implement this trait\n \n-impl <T: Send+Share> Foo for (T,T,T) { } // (ok)\n+impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n \n fn main() { }"}, {"sha": "889d82383e74e465e37b63a415edba377d8d80b3", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -19,8 +19,8 @@ use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n struct X<T>(T);\n \n-impl <T:Share> RequiresShare for X<T> { }\n+impl <T:Sync> RequiresShare for X<T> { }\n \n-impl <T:Share> RequiresRequiresShareAndSend for X<T> { } //~ ERROR cannot implement this trait\n+impl <T:Sync> RequiresRequiresShareAndSend for X<T> { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "67222bdafbf947faceb68a9825ee4d19848ee976", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -11,13 +11,13 @@\n // Tests (negatively) the ability for the Self type in default methods\n // to use capabilities granted by builtin kinds as supertraits.\n \n-trait Foo : Share {\n+trait Foo : Sync {\n     fn foo(self, mut chan: Sender<Self>) {\n         chan.send(self); //~ ERROR does not fulfill `Send`\n     }\n }\n \n-impl <T: Share> Foo for T { }\n+impl <T: Sync> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();"}, {"sha": "166ca10ee187594d81971f79c7d47174e4d652fe", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Share> Foo for T { } //~ ERROR cannot implement this trait\n+impl <T: Sync> Foo for T { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "51188e5dce4120d5831257458f6dd59b2494a450", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -12,7 +12,7 @@\n fn take_any(_: ||:) {\n }\n \n-fn take_const_owned(_: ||:Share+Send) {\n+fn take_const_owned(_: ||:Sync+Send) {\n }\n \n fn give_any(f: ||:) {\n@@ -21,7 +21,7 @@ fn give_any(f: ||:) {\n \n fn give_owned(f: ||:Send) {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Share` but found bounds `Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Send+Sync` but found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "5820818167cbdd4902c8cf530e60b0c064ec211a", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test<T: Share>() {}\n+fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();        //~ ERROR: does not fulfill `Share`\n-    test::<Receiver<int>>();        //~ ERROR: does not fulfill `Share`\n-    test::<Sender<int>>();  //~ ERROR: does not fulfill `Share`\n+    test::<Sender<int>>();        //~ ERROR: does not fulfill `Sync`\n+    test::<Receiver<int>>();        //~ ERROR: does not fulfill `Sync`\n+    test::<Sender<int>>();  //~ ERROR: does not fulfill `Sync`\n }"}, {"sha": "1f9bd881afe2d5aa6c3ca6a7d44b64f56f6b9579", "filename": "src/test/compile-fail/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Share(Bad),Send,Copy)]\n+#[deriving(Sync(Bad),Send,Copy)]\n //~^ ERROR unexpected value in deriving, expected a trait\n struct Test;\n "}, {"sha": "42b70c28be6045cdd944be8771bb50fdf392e394", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -20,7 +20,7 @@ struct E {\n }\n \n impl A for E {\n-  fn b<F: Share, G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Share`\n+  fn b<F: Sync, G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Sync`\n }\n \n fn main() {}"}, {"sha": "25fe95b80c42c445155a8897df4f9bd0ccee6cd1", "filename": "src/test/compile-fail/marker-no-share.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -10,9 +10,9 @@\n \n use std::kinds::marker;\n \n-fn foo<P: Share>(p: P) { }\n+fn foo<P: Sync>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoShare); //~ ERROR does not fulfill `Share`\n+    foo(marker::NoSync); //~ ERROR does not fulfill `Sync`\n }"}, {"sha": "a5b6acc447f84b3e359352f1633ee3894247cdd5", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -10,9 +10,9 @@\n \n use std::cell::RefCell;\n \n-fn f<T: Share>(_: T) {}\n+fn f<T: Sync>(_: T) {}\n \n fn main() {\n     let x = RefCell::new(0i);\n-    f(x); //~ ERROR: which does not fulfill `Share`\n+    f(x); //~ ERROR: which does not fulfill `Sync`\n }"}, {"sha": "9d4c35baea38b7a27ccc62561f67b761825a4f71", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -13,11 +13,11 @@\n \n use std::kinds::marker;\n \n-enum Foo { A(marker::NoShare) }\n+enum Foo { A(marker::NoSync) }\n \n-fn bar<T: Share>(_: T) {}\n+fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoShare);\n+    let x = A(marker::NoSync);\n     bar(&x); //~ ERROR type parameter with an incompatible type\n }"}, {"sha": "f96d751af7e9deca318787101689c5a3e28fa319", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -10,13 +10,13 @@\n \n use std::kinds::marker;\n \n-enum Foo { A(marker::NoShare) }\n+enum Foo { A(marker::NoSync) }\n \n-fn bar<T: Share>(_: T) {}\n+fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoShare);\n+    let x = A(marker::NoSync);\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Share`\n+    //         which does not fulfill `Sync`\n }"}, {"sha": "7a840674be6f010a723107b75f720cb3afdbf3ce", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -11,11 +11,11 @@\n use std::rc::Rc;\n use std::cell::RefCell;\n \n-fn bar<T: Share>(_: T) {}\n+fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = Rc::new(RefCell::new(5i));\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type\n-    //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Share`\n+    //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Sync`\n }"}, {"sha": "6b87a5fa09c98e4ca63873a0260bb5454bfe20f7", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -10,13 +10,13 @@\n \n use std::kinds::marker;\n \n-struct Foo { a: int, m: marker::NoShare }\n+struct Foo { a: int, m: marker::NoSync }\n \n-fn bar<T: Share>(_: T) {}\n+fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Foo { a: 5, m: marker::NoShare };\n+    let x = Foo { a: 5, m: marker::NoSync };\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Share`\n+    //         which does not fulfill `Sync`\n }"}, {"sha": "e8c6a3ba19174ad295f0d2f96c6c38b5d8a206e8", "filename": "src/test/compile-fail/proc-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Share>() {}\n+fn is_freeze<T: Sync>() {}\n fn is_static<T: 'static>() {}\n \n fn main() {"}, {"sha": "4f405e2558d2399c95512c227d2195c698649acb", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n fn a(_x: Box<Foo+Send>) {\n }\n \n-fn c(x: Box<Foo+Share+Send>) {\n+fn c(x: Box<Foo+Sync+Send>) {\n     a(x);\n }\n "}, {"sha": "c3d608b48f3c61dad462456b07e0a91290da8ffb", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -19,11 +19,11 @@ fn a(_x: Box<Foo+Send>) {\n fn b(_x: &'static Foo) { // should be same as &'static Foo+'static\n }\n \n-fn c(x: Box<Foo+Share>) {\n+fn c(x: Box<Foo+Sync>) {\n     a(x); //~ ERROR expected bounds `Send`\n }\n \n-fn d(x: &'static Foo+Share) {\n+fn d(x: &'static Foo+Sync) {\n     b(x); //~ ERROR expected bounds `'static`\n }\n "}, {"sha": "826fec27929938cf2c2e88397d4c9078b5cc18c1", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -8,36 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that UnsafeCell is *always* share regardles `T` is share.\n+// Verify that UnsafeCell is *always* sync regardles `T` is sync.\n \n // ignore-tidy-linelength\n \n use std::cell::UnsafeCell;\n use std::kinds::marker;\n \n-struct MyShare<T> {\n+struct MySync<T> {\n     u: UnsafeCell<T>\n }\n \n-struct NoShare {\n-    m: marker::NoShare\n+struct NoSync {\n+    m: marker::NoSync\n }\n \n-fn test<T: Share>(s: T){\n+fn test<T: Sync>(s: T){\n \n }\n \n fn main() {\n-    let us = UnsafeCell::new(MyShare{u: UnsafeCell::new(0i)});\n+    let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0i)});\n     test(us);\n \n-    let uns = UnsafeCell::new(NoShare{m: marker::NoShare});\n+    let uns = UnsafeCell::new(NoSync{m: marker::NoSync});\n     test(uns);\n \n-    let ms = MyShare{u: uns};\n+    let ms = MySync{u: uns};\n     test(ms);\n \n-    let ns = NoShare{m: marker::NoShare};\n+    let ns = NoSync{m: marker::NoSync};\n     test(ns);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `NoShare`, which does not fulfill `Share`\n+    //~^ ERROR instantiating a type parameter with an incompatible type `NoSync`, which does not fulfill `Sync`\n }"}, {"sha": "7c05e6d606546edec7a2f31582f4da15f2bddbc9", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -14,11 +14,11 @@\n trait Tr { }\n impl Tr for int { }\n \n-fn foo(x: Box<Tr+ Share>) -> Box<Tr+ Share> { x }\n+fn foo(x: Box<Tr+ Sync>) -> Box<Tr+ Sync> { x }\n \n fn main() {\n-    let x: Box<Tr+ Share>;\n+    let x: Box<Tr+ Sync>;\n \n-    box() 1i as Box<Tr+ Share>;\n+    box() 1i as Box<Tr+ Sync>;\n }\n "}, {"sha": "c2b874c61a77fb1bcf364f32a546500ec92ad029", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -20,8 +20,8 @@ use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n #[deriving(PartialEq)]\n struct X<T>(T);\n \n-impl <T: Share> RequiresShare for X<T> { }\n-impl <T: Share+Send> RequiresRequiresShareAndSend for X<T> { }\n+impl <T: Sync> RequiresShare for X<T> { }\n+impl <T: Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n \n fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n     chan.send(val);"}, {"sha": "683e7ece8717d714d0b3704094d06d91ab6a19b2", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -19,9 +19,9 @@ use trait_superkinds_in_metadata::{RequiresCopy};\n \n struct X<T>(T);\n \n-impl <T:Share> RequiresShare for X<T> { }\n+impl <T:Sync> RequiresShare for X<T> { }\n \n-impl <T:Share+Send> RequiresRequiresShareAndSend for X<T> { }\n+impl <T:Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n \n impl <T:Copy> RequiresCopy for X<T> { }\n "}, {"sha": "7b8d1dd7576b9f6cb0a426566cea18edcbcef52b", "filename": "src/test/run-pass/closure-syntax.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -28,11 +28,11 @@ struct Foo<'a> {\n     a: ||: 'a,\n     b: ||: 'static,\n     c: <'b>||: 'a,\n-    d: ||: 'a + Share,\n-    e: <'b>|int|: 'a + Share -> &'b f32,\n+    d: ||: 'a + Sync,\n+    e: <'b>|int|: 'a + Sync -> &'b f32,\n     f: proc(),\n-    g: proc(): 'static + Share,\n-    h: proc<'b>(int): Share -> &'b f32,\n+    g: proc(): 'static + Sync,\n+    h: proc<'b>(int): Sync -> &'b f32,\n }\n \n fn f<'a>(a: &'a int, f: <'b>|&'b int| -> &'b int) -> &'a int {\n@@ -54,14 +54,14 @@ fn bar<'b>() {\n     foo::<|| -> ()>();\n     foo::<||:>();\n     foo::<||:'b>();\n-    foo::<||:'b + Share>();\n-    foo::<||:Share>();\n-    foo::< <'a>|int, f32, &'a int|:'b + Share -> &'a int>();\n+    foo::<||:'b + Sync>();\n+    foo::<||:Sync>();\n+    foo::< <'a>|int, f32, &'a int|:'b + Sync -> &'a int>();\n     foo::<proc()>();\n     foo::<proc() -> ()>();\n     foo::<proc():'static>();\n-    foo::<proc():Share>();\n-    foo::<proc<'a>(int, f32, &'a int):'static + Share -> &'a int>();\n+    foo::<proc():Sync>();\n+    foo::<proc<'a>(int, f32, &'a int):'static + Sync -> &'a int>();\n \n     foo::<<'a>||>();\n "}, {"sha": "e24bc1dbff9d57cd004138307a15770e23de92c9", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -12,7 +12,7 @@\n // are const.\n \n \n-fn foo<T: Share>(x: T) -> T { x }\n+fn foo<T: Sync>(x: T) -> T { x }\n \n struct F { field: int }\n "}, {"sha": "d120b8030c1cfd4138f2be2c2084ca0a4b2beafd", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Share,Send,Copy)]\n+#[deriving(Sync,Send,Copy)]\n struct Test;\n \n pub fn main() {}"}, {"sha": "8a9e2d28776a78fb3e0309075b86bf914f8ee1c4", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -12,7 +12,7 @@\n // than the traits require.\n \n trait A {\n-  fn b<C:Share,D>(x: C) -> C;\n+  fn b<C:Sync,D>(x: C) -> C;\n }\n \n struct E {"}, {"sha": "339c9e3c490c7ab008b931ee75ec15456889befe", "filename": "src/test/run-pass/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n fn foo1<T>(_: &A<T> + Send) {}\n-fn foo2<T>(_: Box<A<T> + Send + Share>) {}\n+fn foo2<T>(_: Box<A<T> + Send + Sync>) {}\n fn foo3<T>(_: Box<B<int, uint> + 'static>) {}\n fn foo4<'a, T>(_: Box<C<'a, T> + 'static + Send>) {}\n fn foo5<'a, T>(_: Box<foo::D<'a, T> + 'static + Send>) {}"}, {"sha": "7241b0b88b96b66e04a2b0b1c9ad5b5fb1007d68", "filename": "src/test/run-pass/proc-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-bounds.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -12,18 +12,18 @@ fn foo<T>() {}\n fn bar<T>(_: T) {}\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Share>() {}\n+fn is_freeze<T: Sync>() {}\n fn is_static<T: 'static>() {}\n \n pub fn main() {\n     foo::<proc()>();\n     foo::<proc()>();\n     foo::<proc():Send>();\n-    foo::<proc():Send + Share>();\n-    foo::<proc():'static + Send + Share>();\n+    foo::<proc():Send + Sync>();\n+    foo::<proc():'static + Send + Sync>();\n \n     is_send::<proc():Send>();\n-    is_freeze::<proc():Share>();\n+    is_freeze::<proc():Sync>();\n     is_static::<proc():'static>();\n \n "}, {"sha": "d03496403ad2a629a349cbb94f14f59f4fc801f4", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n fn b(_x: Box<Foo+Send>) {\n }\n \n-fn c(x: Box<Foo+Share+Send>) {\n+fn c(x: Box<Foo+Sync+Send>) {\n     e(x);\n }\n "}, {"sha": "50d3531b632f4589ed5fb0ea2ae6d81c872bda5f", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae7901a78d5804306f7b20b01622d2a423db37c/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=aae7901a78d5804306f7b20b01622d2a423db37c", "patch": "@@ -71,10 +71,10 @@ pub fn main() {\n         swim_speed: 998,\n         name: \"alec_guinness\".to_string(),\n     };\n-    let arc = Arc::new(vec!(box catte  as Box<Pet+Share+Send>,\n-                            box dogge1 as Box<Pet+Share+Send>,\n-                            box fishe  as Box<Pet+Share+Send>,\n-                            box dogge2 as Box<Pet+Share+Send>));\n+    let arc = Arc::new(vec!(box catte  as Box<Pet+Sync+Send>,\n+                            box dogge1 as Box<Pet+Sync+Send>,\n+                            box fishe  as Box<Pet+Sync+Send>,\n+                            box dogge2 as Box<Pet+Sync+Send>));\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     task::spawn(proc() { check_legs(arc1); tx1.send(()); });\n@@ -89,21 +89,21 @@ pub fn main() {\n     rx3.recv();\n }\n \n-fn check_legs(arc: Arc<Vec<Box<Pet+Share+Send>>>) {\n+fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     let mut legs = 0;\n     for pet in arc.iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: Arc<Vec<Box<Pet+Share+Send>>>) {\n+fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         pet.name(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         })\n     }\n }\n-fn check_pedigree(arc: Arc<Vec<Box<Pet+Share+Send>>>) {\n+fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         assert!(pet.of_good_pedigree());\n     }"}]}