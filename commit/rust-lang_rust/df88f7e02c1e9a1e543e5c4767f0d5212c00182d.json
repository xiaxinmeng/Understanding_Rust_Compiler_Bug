{"sha": "df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "node_id": "C_kwDOAAsO6NoAKGRmODhmN2UwMmMxZTlhMWU1NDNlNWM0NzY3ZjBkNTIxMmMwMDE4MmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-20T06:16:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-20T06:16:08Z"}, "message": "Rollup merge of #106783 - WaffleLapkin:break-my-ident, r=wesleywiser\n\nRecover labels written as identifiers\n\nThis adds recovery for `break label expr` and `continue label`, as well as a test for `break label`.", "tree": {"sha": "ae02fab068c14f55e7194ca365ba948474c06bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae02fab068c14f55e7194ca365ba948474c06bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyjGoCRBK7hj4Ov3rIwAANccIAA92N3Ff9zakUgvyX1D9reGl\nIlbqlA0w/R+8pJpPTygeQs32tZwK6gXhhwoM4BQjPsfO6XR97l3zbuU73ShTgnPr\n89vMvPS+fWVsnqt9U4i4u9ZL1m/vRf8X0nbgRFfQ9HVy2BpBkW8WpuL2MQVvkV14\neMV9bJikqOWNbTAnfYBvSX6lXHexnzQz4Y8JS8bOqPgLGYwk6fn1VuHRTxD1zHAe\nIv6aX+rpQev7sK+4d8eLcQHbxa4YRMqF6WEzsy96EVAeQEiiY5IIExbgT1xymYjd\nyUVwclbv0b7LOh8tlRA+G9CcyudTKR16MgdlZ8UPyZAK5t+TJtBM08hUj4Sf78A=\n=mb2A\n-----END PGP SIGNATURE-----\n", "payload": "tree ae02fab068c14f55e7194ca365ba948474c06bd7\nparent 51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906\nparent 57d822a904e440b6020d39274ac40a0ed68d55c9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674195368 +0100\ncommitter GitHub <noreply@github.com> 1674195368 +0100\n\nRollup merge of #106783 - WaffleLapkin:break-my-ident, r=wesleywiser\n\nRecover labels written as identifiers\n\nThis adds recovery for `break label expr` and `continue label`, as well as a test for `break label`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "html_url": "https://github.com/rust-lang/rust/commit/df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906", "html_url": "https://github.com/rust-lang/rust/commit/51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906"}, {"sha": "57d822a904e440b6020d39274ac40a0ed68d55c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d822a904e440b6020d39274ac40a0ed68d55c9", "html_url": "https://github.com/rust-lang/rust/commit/57d822a904e440b6020d39274ac40a0ed68d55c9"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "bf93a89f065557efc5535cc75ad9ad1233047d8b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "patch": "@@ -1353,9 +1353,6 @@ impl<'a> Parser<'a> {\n                 err.span_label(sp, \"while parsing this `loop` expression\");\n                 err\n             })\n-        } else if self.eat_keyword(kw::Continue) {\n-            let kind = ExprKind::Continue(self.eat_label());\n-            Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n         } else if self.eat_keyword(kw::Match) {\n             let match_sp = self.prev_token.span;\n             self.parse_match_expr().map_err(|mut err| {\n@@ -1379,6 +1376,8 @@ impl<'a> Parser<'a> {\n             self.parse_try_block(lo)\n         } else if self.eat_keyword(kw::Return) {\n             self.parse_return_expr()\n+        } else if self.eat_keyword(kw::Continue) {\n+            self.parse_continue_expr(lo)\n         } else if self.eat_keyword(kw::Break) {\n             self.parse_break_expr()\n         } else if self.eat_keyword(kw::Yield) {\n@@ -1715,10 +1714,10 @@ impl<'a> Parser<'a> {\n     fn parse_break_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n         let mut label = self.eat_label();\n-        let kind = if label.is_some() && self.token == token::Colon {\n+        let kind = if self.token == token::Colon && let Some(label) = label.take() {\n             // The value expression can be a labeled loop, see issue #86948, e.g.:\n             // `loop { break 'label: loop { break 'label 42; }; }`\n-            let lexpr = self.parse_labeled_expr(label.take().unwrap(), true)?;\n+            let lexpr = self.parse_labeled_expr(label, true)?;\n             self.sess.emit_err(LabeledLoopInBreak {\n                 span: lexpr.span,\n                 sub: WrapExpressionInParentheses {\n@@ -1730,8 +1729,8 @@ impl<'a> Parser<'a> {\n         } else if self.token != token::OpenDelim(Delimiter::Brace)\n             || !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n         {\n-            let expr = self.parse_expr_opt()?;\n-            if let Some(expr) = &expr {\n+            let mut expr = self.parse_expr_opt()?;\n+            if let Some(expr) = &mut expr {\n                 if label.is_some()\n                     && matches!(\n                         expr.kind,\n@@ -1749,7 +1748,19 @@ impl<'a> Parser<'a> {\n                         BuiltinLintDiagnostics::BreakWithLabelAndLoop(expr.span),\n                     );\n                 }\n+\n+                // Recover `break label aaaaa`\n+                if self.may_recover()\n+                    && let ExprKind::Path(None, p) = &expr.kind\n+                    && let [segment] = &*p.segments\n+                    && let &ast::PathSegment { ident, args: None, .. } = segment\n+                    && let Some(next) = self.parse_expr_opt()?\n+                {\n+                    label = Some(self.recover_ident_into_label(ident));\n+                    *expr = next;\n+                }\n             }\n+\n             expr\n         } else {\n             None\n@@ -1758,6 +1769,23 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr)\n     }\n \n+    /// Parse `\"continue\" label?`.\n+    fn parse_continue_expr(&mut self, lo: Span) -> PResult<'a, P<Expr>> {\n+        let mut label = self.eat_label();\n+\n+        // Recover `continue label` -> `continue 'label`\n+        if self.may_recover()\n+            && label.is_none()\n+            && let Some((ident, _)) = self.token.ident()\n+        {\n+            self.bump();\n+            label = Some(self.recover_ident_into_label(ident));\n+        }\n+\n+        let kind = ExprKind::Continue(label);\n+        Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n+    }\n+\n     /// Parse `\"yield\" expr?`.\n     fn parse_yield_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n@@ -3046,6 +3074,25 @@ impl<'a> Parser<'a> {\n         false\n     }\n \n+    /// Converts an ident into 'label and emits an \"expected a label, found an identifier\" error.\n+    fn recover_ident_into_label(&mut self, ident: Ident) -> Label {\n+        // Convert `label` -> `'label`,\n+        // so that nameres doesn't complain about non-existing label\n+        let label = format!(\"'{}\", ident.name);\n+        let ident = Ident { name: Symbol::intern(&label), span: ident.span };\n+\n+        self.struct_span_err(ident.span, \"expected a label, found an identifier\")\n+            .span_suggestion(\n+                ident.span,\n+                \"labels start with a tick\",\n+                label,\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        Label { ident }\n+    }\n+\n     /// Parses `ident (COLON expr)?`.\n     fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {\n         let attrs = self.parse_outer_attributes()?;"}, {"sha": "159d995b8dad303c1c8e0b0c9d79b12b2fd8929f", "filename": "tests/ui/parser/recover-unticked-labels.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed?ref=df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    'label: loop { break 'label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break 'label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue 'label }; //~ error: expected a label, found an identifier\n+}"}, {"sha": "56034de68449fdda7695545035c3cd7b8c979b89", "filename": "tests/ui/parser/recover-unticked-labels.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs?ref=df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    'label: loop { break label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue label }; //~ error: expected a label, found an identifier\n+}"}, {"sha": "c115dffb10e9c6e476bf9eddd7e214cb2b2b0e23", "filename": "tests/ui/parser/recover-unticked-labels.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df88f7e02c1e9a1e543e5c4767f0d5212c00182d/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr?ref=df88f7e02c1e9a1e543e5c4767f0d5212c00182d", "patch": "@@ -0,0 +1,25 @@\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:5:26\n+   |\n+LL |     'label: loop { break label 0 };\n+   |                          ^^^^^ help: labels start with a tick: `'label`\n+\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:6:29\n+   |\n+LL |     'label: loop { continue label };\n+   |                             ^^^^^ help: labels start with a tick: `'label`\n+\n+error[E0425]: cannot find value `label` in this scope\n+  --> $DIR/recover-unticked-labels.rs:4:26\n+   |\n+LL |     'label: loop { break label };\n+   |     ------               ^^^^^\n+   |     |                    |\n+   |     |                    not found in this scope\n+   |     |                    help: use the similarly named label: `'label`\n+   |     a label with a similar name exists\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}