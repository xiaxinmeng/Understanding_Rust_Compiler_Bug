{"sha": "6c21a0322c55c2da7f2b1479cb631b8596901f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjFhMDMyMmM1NWMyZGE3ZjJiMTQ3OWNiNjMxYjg1OTY5MDFmMWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-25T23:54:52Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Refactor after miri api changes", "tree": {"sha": "a2628e83c141a40e7694778ec2dae900623a1120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2628e83c141a40e7694778ec2dae900623a1120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c21a0322c55c2da7f2b1479cb631b8596901f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c21a0322c55c2da7f2b1479cb631b8596901f1c", "html_url": "https://github.com/rust-lang/rust/commit/6c21a0322c55c2da7f2b1479cb631b8596901f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c21a0322c55c2da7f2b1479cb631b8596901f1c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732d63848302156d475beb7159e73c14c0570e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/732d63848302156d475beb7159e73c14c0570e3a", "html_url": "https://github.com/rust-lang/rust/commit/732d63848302156d475beb7159e73c14c0570e3a"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "8b5b41fc777eaf5bb332491ddc3d1064371698e8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c21a0322c55c2da7f2b1479cb631b8596901f1c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c21a0322c55c2da7f2b1479cb631b8596901f1c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6c21a0322c55c2da7f2b1479cb631b8596901f1c", "patch": "@@ -35,7 +35,6 @@ use std::slice;\n use std::vec::IntoIter;\n use std::{iter, mem, option, u32};\n use syntax::ast::{self, Name};\n-use syntax::attr::SignedInt;\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};"}, {"sha": "9cd59a42402ba303066367839f92976f56b800c8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6c21a0322c55c2da7f2b1479cb631b8596901f1c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c21a0322c55c2da7f2b1479cb631b8596901f1c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=6c21a0322c55c2da7f2b1479cb631b8596901f1c", "patch": "@@ -461,33 +461,36 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .collect()\n         }\n         ty::TyChar if exhaustive_integer_patterns => {\n+            value_constructors = true;\n             let endpoint = |c: char| {\n-                ty::Const::from_bits(cx.tcx, c as u128, cx.tcx.types.char)\n+                let ty = ty::ParamEnv::empty().and(cx.tcx.types.char);\n+                ty::Const::from_bits(cx.tcx, c as u128, ty)\n             };\n-            value_constructors = true;\n             vec![\n                 // The valid Unicode Scalar Value ranges.\n                 ConstantRange(endpoint('\\u{0000}'), endpoint('\\u{D7FF}'), RangeEnd::Included),\n                 ConstantRange(endpoint('\\u{E000}'), endpoint('\\u{10FFFF}'), RangeEnd::Included),\n             ]\n         }\n         ty::TyInt(ity) if exhaustive_integer_patterns => {\n+            value_constructors = true;\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(cx.tcx, SignedInt(ity)).size().bits() as u128;\n             let min = 1u128 << (bits - 1);\n             let max = (1u128 << (bits - 1)) - 1;\n-            value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min as u128, pcx.ty),\n-                               ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n+            let ty = ty::ParamEnv::empty().and(pcx.ty);\n+            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min as u128, ty),\n+                               ty::Const::from_bits(cx.tcx, max as u128, ty),\n                                RangeEnd::Included)]\n         }\n         ty::TyUint(uty) if exhaustive_integer_patterns => {\n+            value_constructors = true;\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(cx.tcx, UnsignedInt(uty)).size().bits() as u128;\n             let max = !0u128 >> (128 - bits);\n-            value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0, pcx.ty),\n-                               ty::Const::from_bits(cx.tcx, max, pcx.ty),\n+            let ty = ty::ParamEnv::empty().and(pcx.ty);\n+            vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0, ty),\n+                               ty::Const::from_bits(cx.tcx, max, ty),\n                                RangeEnd::Included)]\n         }\n         _ => {\n@@ -623,8 +626,9 @@ impl<'tcx> IntRange<'tcx> {\n             ConstantRange(lo, hi, end) => {\n                 assert_eq!(lo.ty, hi.ty);\n                 let ty = lo.ty;\n-                if let Some(lo) = lo.assert_bits(ty) {\n-                    if let Some(hi) = hi.assert_bits(ty) {\n+                let env_ty = ty::ParamEnv::empty().and(ty);\n+                if let Some(lo) = lo.assert_bits(tcx, env_ty) {\n+                    if let Some(hi) = hi.assert_bits(tcx, env_ty) {\n                         // Perform a shift if the underlying types are signed,\n                         // which makes the interval arithmetic simpler.\n                         let bias = IntRange::signed_bias(tcx, ty);\n@@ -642,7 +646,7 @@ impl<'tcx> IntRange<'tcx> {\n             }\n             ConstantValue(val) => {\n                 let ty = val.ty;\n-                if let Some(val) = val.assert_bits(ty) {\n+                if let Some(val) = val.assert_bits(tcx, ty::ParamEnv::empty().and(ty)) {\n                     let bias = IntRange::signed_bias(tcx, ty);\n                     let val = val ^ bias;\n                     Some(IntRange { range: val..=val, ty })\n@@ -707,6 +711,7 @@ fn ranges_subtract_pattern<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         remaining_ranges.into_iter().map(|r| {\n             let (lo, hi) = r.into_inner();\n             let bias = IntRange::signed_bias(cx.tcx, ty);\n+            let ty = ty::ParamEnv::empty().and(ty);\n             ConstantRange(ty::Const::from_bits(cx.tcx, lo ^ bias, ty),\n                           ty::Const::from_bits(cx.tcx, hi ^ bias, ty),\n                           RangeEnd::Included)"}]}