{"sha": "d9db4f02a4092009a29fa4b2f0be0438856aeb36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZGI0ZjAyYTQwOTIwMDlhMjlmYTRiMmYwYmUwNDM4ODU2YWViMzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:03:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:31Z"}, "message": "move to dvec in metadata", "tree": {"sha": "0fccd3f39f275762139ffdcdf72cf2a25c50ef2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fccd3f39f275762139ffdcdf72cf2a25c50ef2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9db4f02a4092009a29fa4b2f0be0438856aeb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9db4f02a4092009a29fa4b2f0be0438856aeb36", "html_url": "https://github.com/rust-lang/rust/commit/d9db4f02a4092009a29fa4b2f0be0438856aeb36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9db4f02a4092009a29fa4b2f0be0438856aeb36/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4490c99b113a572d771a3b9171cb83b42813c97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4490c99b113a572d771a3b9171cb83b42813c97c", "html_url": "https://github.com/rust-lang/rust/commit/4490c99b113a572d771a3b9171cb83b42813c97c"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "3356e8cdd65245c5affe6238eff7f5af09eb6b38", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d9db4f02a4092009a29fa4b2f0be0438856aeb36/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9db4f02a4092009a29fa4b2f0be0438856aeb36/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=d9db4f02a4092009a29fa4b2f0be0438856aeb36", "patch": "@@ -13,6 +13,7 @@ import std::map::{hashmap, int_hash};\n import syntax::print::pprust;\n import filesearch::filesearch;\n import common::*;\n+import dvec::{dvec, extensions};\n \n export read_crates;\n \n@@ -26,7 +27,7 @@ fn read_crates(diag: span_handler, crate: ast::crate,\n               cstore: cstore,\n               os: os,\n               static: static,\n-              mut crate_cache: [],\n+              crate_cache: dvec(),\n               mut next_crate_num: 1};\n     let v =\n         visit::mk_simple_visitor(@{visit_view_item:\n@@ -35,7 +36,7 @@ fn read_crates(diag: span_handler, crate: ast::crate,\n                                       with *visit::default_simple_visitor()});\n     visit::visit_crate(crate, (), v);\n     dump_crates(e.crate_cache);\n-    warn_if_multiple_versions(diag, copy e.crate_cache);\n+    warn_if_multiple_versions(diag, e.crate_cache.get());\n }\n \n type cache_entry = {\n@@ -45,7 +46,7 @@ type cache_entry = {\n     metas: @[@ast::meta_item]\n };\n \n-fn dump_crates(crate_cache: [cache_entry]) {\n+fn dump_crates(crate_cache: dvec<cache_entry>) {\n     #debug(\"resolved crates:\");\n     for crate_cache.each {|entry|\n         #debug(\"cnum: %?\", entry.cnum);\n@@ -64,10 +65,10 @@ fn warn_if_multiple_versions(diag: span_handler,\n                              crate_cache: [cache_entry]) {\n     import either::*;\n \n-    if crate_cache.is_not_empty() {\n+    if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas(*crate_cache.last().metas);\n         let {lefts: matches, rights: non_matches} =\n-            partition(crate_cache.map {|entry|\n+            partition(crate_cache.map_to_vec {|entry|\n                 let othername = loader::crate_name_from_metas(*entry.metas);\n                 if name == othername {\n                     left(entry)\n@@ -99,7 +100,7 @@ type env = @{diag: span_handler,\n              cstore: cstore::cstore,\n              os: loader::os,\n              static: bool,\n-             mut crate_cache: [cache_entry],\n+             crate_cache: dvec<cache_entry>,\n              mut next_crate_num: ast::crate_num};\n \n fn visit_view_item(e: env, i: @ast::view_item) {\n@@ -176,12 +177,14 @@ fn metas_with_ident(ident: ast::ident,\n \n fn existing_match(e: env, metas: [@ast::meta_item], hash: str) ->\n     option<int> {\n-    let maybe_entry = e.crate_cache.find {|c|\n-        loader::metadata_matches(*c.metas, metas) &&\n-            (hash.is_empty() || c.hash == hash)\n-    };\n \n-    maybe_entry.map {|c| c.cnum }\n+    for e.crate_cache.each {|c|\n+        if loader::metadata_matches(*c.metas, metas)\n+            && (hash.is_empty() || c.hash == hash) {\n+            ret some(c.cnum);\n+        }\n+    }\n+    ret none;\n }\n \n fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n@@ -211,8 +214,8 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n \n         // Claim this crate number and cache it\n         let cnum = e.next_crate_num;\n-        e.crate_cache += [{cnum: cnum, span: span,\n-                           hash: hash, metas: @linkage_metas}];\n+        e.crate_cache.push({cnum: cnum, span: span,\n+                            hash: hash, metas: @linkage_metas});\n         e.next_crate_num += 1;\n \n         // Now resolve the crates referenced by this crate"}, {"sha": "0bbbeafdb54a0cf9a131d1ddce651bab3da28a2c", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9db4f02a4092009a29fa4b2f0be0438856aeb36/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9db4f02a4092009a29fa4b2f0be0438856aeb36/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=d9db4f02a4092009a29fa4b2f0be0438856aeb36", "patch": "@@ -63,7 +63,9 @@ type cstore_private =\n type use_crate_map = map::hashmap<ast::node_id, ast::crate_num>;\n \n // Internal method to retrieve the data from the cstore\n-fn p(cstore: cstore) -> cstore_private { alt cstore { private(p) { p } } }\n+pure fn p(cstore: cstore) -> cstore_private {\n+    alt cstore { private(p) { p } }\n+}\n \n fn mk_cstore() -> cstore {\n     let meta_cache = map::int_hash::<crate_metadata>();"}]}