{"sha": "547a48e1936ec7f369bf338fd7f5048f47265868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2E0OGUxOTM2ZWM3ZjM2OWJmMzM4ZmQ3ZjUwNDhmNDcyNjU4Njg=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T18:47:00Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T21:23:13Z"}, "message": "collections: Update docs for slice since SliceExt was removed\n\nA lot has changed since this doc text was last touched up, and this is\njust a minor edit. I remove the trait section entirely since we don't\nuse extension traits that much anymore, so there are no significant\ntrait hilights for this module.", "tree": {"sha": "f582a339e96e4bf6d35a49cb55d2e34ee7070c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f582a339e96e4bf6d35a49cb55d2e34ee7070c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547a48e1936ec7f369bf338fd7f5048f47265868", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547a48e1936ec7f369bf338fd7f5048f47265868", "html_url": "https://github.com/rust-lang/rust/commit/547a48e1936ec7f369bf338fd7f5048f47265868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547a48e1936ec7f369bf338fd7f5048f47265868/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e14f16225fcf529b6d8a20c4c000d803064ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e14f16225fcf529b6d8a20c4c000d803064ec8", "html_url": "https://github.com/rust-lang/rust/commit/00e14f16225fcf529b6d8a20c4c000d803064ec8"}], "stats": {"total": 74, "additions": 33, "deletions": 41}, "files": [{"sha": "688d730e2528744c03f49903d7928a0610384a29", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/547a48e1936ec7f369bf338fd7f5048f47265868/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547a48e1936ec7f369bf338fd7f5048f47265868/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=547a48e1936ec7f369bf338fd7f5048f47265868", "patch": "@@ -13,25 +13,23 @@\n //! The `slice` module contains useful code to help work with slice values.\n //! Slices are a view into a block of memory represented as a pointer and a length.\n //!\n-//! ```rust\n-//! # #![feature(core)]\n+//! ```\n //! // slicing a Vec\n-//! let vec = vec!(1, 2, 3);\n-//! let int_slice = vec.as_slice();\n+//! let vec = vec![1, 2, 3];\n+//! let int_slice = &vec[..];\n //! // coercing an array to a slice\n //! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];\n //! ```\n //!\n //! Slices are either mutable or shared. The shared slice type is `&[T]`,\n-//! while the mutable slice type is `&mut[T]`. For example, you can mutate the\n-//! block of memory that a mutable slice points to:\n+//! while the mutable slice type is `&mut [T]`, where `T` represents the element\n+//! type. For example, you can mutate the block of memory that a mutable slice\n+//! points to:\n //!\n-//! ```rust\n-//! let x: &mut[i32] = &mut [1, 2, 3];\n+//! ```\n+//! let x = &mut [1, 2, 3];\n //! x[1] = 7;\n-//! assert_eq!(x[0], 1);\n-//! assert_eq!(x[1], 7);\n-//! assert_eq!(x[2], 3);\n+//! assert_eq!(x, &[1, 7, 3]);\n //! ```\n //!\n //! Here are some of the things this module contains:\n@@ -41,49 +39,43 @@\n //! There are several structs that are useful for slices, such as `Iter`, which\n //! represents iteration over a slice.\n //!\n-//! ## Traits\n-//!\n-//! A number of traits add methods that allow you to accomplish tasks\n-//! with slices, the most important being `SliceExt`. Other traits\n-//! apply only to slices of elements satisfying certain bounds (like\n-//! `Ord`).\n-//!\n-//! An example is the `slice` method which enables slicing syntax `[a..b]` that\n-//! returns an immutable \"view\" into a `Vec` or another slice from the index\n-//! interval `[a, b)`:\n-//!\n-//! ```rust\n-//! fn main() {\n-//!     let numbers = [0, 1, 2];\n-//!     let last_numbers = &numbers[1..3];\n-//!     // last_numbers is now &[1, 2]\n-//! }\n-//! ```\n-//!\n-//! ## Implementations of other traits\n+//! ## Trait Implementations\n //!\n //! There are several implementations of common traits for slices. Some examples\n //! include:\n //!\n //! * `Clone`\n-//! * `Eq`, `Ord` - for immutable slices whose element type are `Eq` or `Ord`.\n+//! * `Eq`, `Ord` - for slices whose element type are `Eq` or `Ord`.\n //! * `Hash` - for slices whose element type is `Hash`\n //!\n //! ## Iteration\n //!\n-//! The method `iter()` returns an iteration value for a slice. The iterator\n-//! yields references to the slice's elements, so if the element\n-//! type of the slice is `isize`, the element type of the iterator is `&isize`.\n+//! The slices implement `IntoIterator`. The iterators of yield references\n+//! to the slice elements.\n //!\n-//! ```rust\n-//! let numbers = [0, 1, 2];\n-//! for &x in numbers.iter() {\n-//!     println!(\"{} is a number!\", x);\n+//! ```\n+//! let numbers = &[0, 1, 2];\n+//! for n in numbers {\n+//!     println!(\"{} is a number!\", n);\n //! }\n //! ```\n //!\n-//! * `.iter_mut()` returns an iterator that allows modifying each value.\n-//! * Further iterators exist that split, chunk or permute the slice.\n+//! The mutable slice yields mutable references to the elements:\n+//!\n+//! ```\n+//! let mut scores = [7, 8, 9];\n+//! for score in &mut scores[..] {\n+//!     *score += 1;\n+//! }\n+//! ```\n+//!\n+//! This iterator yields mutable references to the slice's elements, so while the element\n+//! type of the slice is `i32`, the element type of the iterator is `&mut i32`.\n+//!\n+//! * `.iter()` and `.iter_mut()` are the explicit methods to return the default\n+//!   iterators.\n+//! * Further methods that return iterators are `.split()`, `.splitn()`,\n+//!   `.chunks()`, `.windows()` and more.\n \n #![doc(primitive = \"slice\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}