{"sha": "67a2555f6d4c3914742fd42645ca043cf56f358b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTI1NTVmNmQ0YzM5MTQ3NDJmZDQyNjQ1Y2EwNDNjZjU2ZjM1OGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-21T13:29:33Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-22T23:08:03Z"}, "message": "Update Chalk, clean up Chalk integration a bit", "tree": {"sha": "8edadceaa43e5f0d5ccea2ea2f9c6e6f8f66abde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edadceaa43e5f0d5ccea2ea2f9c6e6f8f66abde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a2555f6d4c3914742fd42645ca043cf56f358b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a2555f6d4c3914742fd42645ca043cf56f358b", "html_url": "https://github.com/rust-lang/rust/commit/67a2555f6d4c3914742fd42645ca043cf56f358b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a2555f6d4c3914742fd42645ca043cf56f358b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60aa4d12f95477565d5b01f122d2c9dd845015b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4", "html_url": "https://github.com/rust-lang/rust/commit/60aa4d12f95477565d5b01f122d2c9dd845015b4"}], "stats": {"total": 284, "additions": 131, "deletions": 153}, "files": [{"sha": "7b19a06dc559e352552ceb735a3590a0ff8afc01", "filename": "Cargo.lock", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67a2555f6d4c3914742fd42645ca043cf56f358b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/67a2555f6d4c3914742fd42645ca043cf56f358b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=67a2555f6d4c3914742fd42645ca043cf56f358b", "patch": "@@ -128,7 +128,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -138,52 +138,52 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb#151949dece8117d180b5d197a7afa968c3ba14bb\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -995,9 +995,9 @@ name = \"ra_hir_ty\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n- \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1782,12 +1782,12 @@ dependencies = [\n \"checksum cargo_metadata 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46e3374c604fb39d1a2f35ed5e4a4e30e60d01fab49446e08f1b3e9a90aef202\"\n \"checksum cc 1.0.48 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f52a465a666ca3d838ebbf08b241383421412fe7ebb463527bba275526d89f76\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n-\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n-\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n-\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n-\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n-\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=151949dece8117d180b5d197a7afa968c3ba14bb)\" = \"<none>\"\n+\"checksum chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum console 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5d540c2d34ac9dd0deb5f3b5f54c36c79efa78f6b3ad19106a554d07a7b5d9f\""}, {"sha": "60793db442511b31c42b363f37ecb62145e174ee", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=67a2555f6d4c3914742fd42645ca043cf56f358b", "patch": "@@ -21,10 +21,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-# https://github.com/rust-lang/chalk/pull/294\n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"151949dece8117d180b5d197a7afa968c3ba14bb\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"151949dece8117d180b5d197a7afa968c3ba14bb\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"151949dece8117d180b5d197a7afa968c3ba14bb\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n \n lalrpop-intern = \"0.15.1\"\n "}, {"sha": "d52f65b83634204019e4c82d3e6fe77e572b9457", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=67a2555f6d4c3914742fd42645ca043cf56f358b", "patch": "@@ -10,7 +10,7 @@ use ra_db::{salsa, CrateId};\n \n use crate::{\n     method_resolution::CrateImplBlocks,\n-    traits::{AssocTyValue, Impl},\n+    traits::{chalk, AssocTyValue, Impl},\n     CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, TraitRef, Ty, TyDefId, TypeCtor,\n     ValueTyDefId,\n };\n@@ -77,39 +77,24 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::interned]\n     fn intern_assoc_ty_value(&self, assoc_ty_value: AssocTyValue) -> crate::traits::AssocTyValueId;\n \n-    #[salsa::invoke(crate::traits::chalk::associated_ty_data_query)]\n-    fn associated_ty_data(\n-        &self,\n-        id: chalk_ir::TypeId,\n-    ) -> Arc<chalk_rust_ir::AssociatedTyDatum<chalk_ir::family::ChalkIr>>;\n+    #[salsa::invoke(chalk::associated_ty_data_query)]\n+    fn associated_ty_data(&self, id: chalk::AssocTypeId) -> Arc<chalk::AssociatedTyDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::trait_datum_query)]\n-    fn trait_datum(\n-        &self,\n-        krate: CrateId,\n-        trait_id: chalk_ir::TraitId,\n-    ) -> Arc<chalk_rust_ir::TraitDatum<chalk_ir::family::ChalkIr>>;\n+    #[salsa::invoke(chalk::trait_datum_query)]\n+    fn trait_datum(&self, krate: CrateId, trait_id: chalk::TraitId) -> Arc<chalk::TraitDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::struct_datum_query)]\n-    fn struct_datum(\n-        &self,\n-        krate: CrateId,\n-        struct_id: chalk_ir::StructId,\n-    ) -> Arc<chalk_rust_ir::StructDatum<chalk_ir::family::ChalkIr>>;\n+    #[salsa::invoke(chalk::struct_datum_query)]\n+    fn struct_datum(&self, krate: CrateId, struct_id: chalk::StructId) -> Arc<chalk::StructDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::impl_datum_query)]\n-    fn impl_datum(\n-        &self,\n-        krate: CrateId,\n-        impl_id: chalk_ir::ImplId,\n-    ) -> Arc<chalk_rust_ir::ImplDatum<chalk_ir::family::ChalkIr>>;\n+    fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,\n         krate: CrateId,\n-        id: chalk_rust_ir::AssociatedTyValueId,\n-    ) -> Arc<chalk_rust_ir::AssociatedTyValue<chalk_ir::family::ChalkIr>>;\n+        id: chalk::AssociatedTyValueId,\n+    ) -> Arc<chalk::AssociatedTyValue>;\n \n     #[salsa::invoke(crate::traits::trait_solve_query)]\n     fn trait_solve("}, {"sha": "46e17f0b8d71e6239ac5bbb984a51b4159b075f3", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=67a2555f6d4c3914742fd42645ca043cf56f358b", "patch": "@@ -209,9 +209,9 @@ fn solution_from_chalk(\n             .parameters\n             .into_iter()\n             .map(|p| {\n-                let ty = match p {\n-                    chalk_ir::Parameter(chalk_ir::ParameterKind::Ty(ty)) => from_chalk(db, ty),\n-                    chalk_ir::Parameter(chalk_ir::ParameterKind::Lifetime(_)) => unimplemented!(),\n+                let ty = match p.ty() {\n+                    Some(ty) => from_chalk(db, ty.clone()),\n+                    None => unimplemented!(),\n                 };\n                 ty\n             })"}, {"sha": "3a91a374d8cb943765f3b5215e01cc5b807460bf", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 87, "deletions": 93, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a2555f6d4c3914742fd42645ca043cf56f358b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=67a2555f6d4c3914742fd42645ca043cf56f358b", "patch": "@@ -3,15 +3,9 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{\n-    cast::Cast, family::ChalkIr, Identifier, Parameter, PlaceholderIndex, TypeId, TypeKindId,\n-    TypeName, UniverseIndex,\n-};\n-use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n+use chalk_ir::{cast::Cast, family::ChalkIr, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n \n-use hir_def::{\n-    AssocContainerId, AssocItemId, GenericDefId, HasModule, ImplId, Lookup, TraitId, TypeAliasId,\n-};\n+use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -23,9 +17,20 @@ use crate::{\n     ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n+pub type TypeFamily = chalk_ir::family::ChalkIr; // TODO use everywhere\n+pub type AssocTypeId = chalk_ir::AssocTypeId<TypeFamily>;\n+pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<TypeFamily>;\n+pub type TraitId = chalk_ir::TraitId<TypeFamily>;\n+pub type TraitDatum = chalk_rust_ir::TraitDatum<TypeFamily>;\n+pub type StructId = chalk_ir::StructId<TypeFamily>;\n+pub type StructDatum = chalk_rust_ir::StructDatum<TypeFamily>;\n+pub type ImplId = chalk_ir::ImplId<TypeFamily>;\n+pub type ImplDatum = chalk_rust_ir::ImplDatum<TypeFamily>;\n+pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId;\n+pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<TypeFamily>;\n+\n /// This represents a trait whose name we could not resolve.\n-const UNKNOWN_TRAIT: chalk_ir::TraitId =\n-    chalk_ir::TraitId(chalk_ir::RawId { index: u32::max_value() });\n+const UNKNOWN_TRAIT: TraitId = chalk_ir::TraitId(chalk_ir::RawId { index: u32::max_value() });\n \n pub(super) trait ToChalk {\n     type Chalk;\n@@ -53,7 +58,7 @@ impl ToChalk for Ty {\n                     _ => {\n                         // other TypeCtors get interned and turned into a chalk StructId\n                         let struct_id = apply_ty.ctor.to_chalk(db);\n-                        TypeName::TypeKindId(struct_id.into())\n+                        TypeName::Struct(struct_id.into())\n                     }\n                 };\n                 let parameters = apply_ty.parameters.to_chalk(db);\n@@ -71,11 +76,13 @@ impl ToChalk for Ty {\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n             Ty::Dyn(predicates) => {\n                 let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n-                chalk_ir::TyData::Dyn(make_binders(where_clauses, 1)).intern()\n+                let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n+                chalk_ir::TyData::Dyn(bounded_ty).intern()\n             }\n             Ty::Opaque(predicates) => {\n                 let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n-                chalk_ir::TyData::Opaque(make_binders(where_clauses, 1)).intern()\n+                let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n+                chalk_ir::TyData::Opaque(bounded_ty).intern()\n             }\n             Ty::Unknown => {\n                 let parameters = Vec::new();\n@@ -87,10 +94,9 @@ impl ToChalk for Ty {\n     fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<ChalkIr>) -> Self {\n         match chalk.data().clone() {\n             chalk_ir::TyData::Apply(apply_ty) => {\n-                // FIXME this is kind of hacky due to the fact that\n-                // TypeName::Placeholder is a Ty::Param on our side\n+                // TODO clean this up now that Placeholder isn't in TypeName anymore\n                 match apply_ty.name {\n-                    TypeName::TypeKindId(TypeKindId::StructId(struct_id)) => {\n+                    TypeName::Struct(struct_id) => {\n                         let ctor = from_chalk(db, struct_id);\n                         let parameters = from_chalk(db, apply_ty.parameters);\n                         Ty::Apply(ApplicationTy { ctor, parameters })\n@@ -101,14 +107,12 @@ impl ToChalk for Ty {\n                         Ty::Apply(ApplicationTy { ctor, parameters })\n                     }\n                     TypeName::Error => Ty::Unknown,\n-                    // FIXME handle TypeKindId::Trait/Type here\n-                    TypeName::TypeKindId(_) => unimplemented!(),\n-                    TypeName::Placeholder(idx) => {\n-                        assert_eq!(idx.ui, UniverseIndex::ROOT);\n-                        Ty::Param { idx: idx.idx as u32, name: crate::Name::missing() }\n-                    }\n                 }\n             }\n+            chalk_ir::TyData::Placeholder(idx) => {\n+                assert_eq!(idx.ui, UniverseIndex::ROOT);\n+                Ty::Param { idx: idx.idx as u32, name: crate::Name::missing() }\n+            }\n             chalk_ir::TyData::Projection(proj) => {\n                 let associated_ty = from_chalk(db, proj.associated_ty_id);\n                 let parameters = from_chalk(db, proj.parameters);\n@@ -118,15 +122,15 @@ impl ToChalk for Ty {\n             chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx as u32),\n             chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {\n-                assert_eq!(where_clauses.binders.len(), 1);\n+                assert_eq!(where_clauses.bounds.binders.len(), 1);\n                 let predicates =\n-                    where_clauses.value.into_iter().map(|c| from_chalk(db, c)).collect();\n+                    where_clauses.bounds.value.into_iter().map(|c| from_chalk(db, c)).collect();\n                 Ty::Dyn(predicates)\n             }\n             chalk_ir::TyData::Opaque(where_clauses) => {\n-                assert_eq!(where_clauses.binders.len(), 1);\n+                assert_eq!(where_clauses.bounds.binders.len(), 1);\n                 let predicates =\n-                    where_clauses.value.into_iter().map(|c| from_chalk(db, c)).collect();\n+                    where_clauses.bounds.value.into_iter().map(|c| from_chalk(db, c)).collect();\n                 Ty::Opaque(predicates)\n             }\n         }\n@@ -143,9 +147,9 @@ impl ToChalk for Substs {\n     fn from_chalk(db: &impl HirDatabase, parameters: Vec<chalk_ir::Parameter<ChalkIr>>) -> Substs {\n         let tys = parameters\n             .into_iter()\n-            .map(|p| match p {\n-                chalk_ir::Parameter(chalk_ir::ParameterKind::Ty(ty)) => from_chalk(db, ty),\n-                chalk_ir::Parameter(chalk_ir::ParameterKind::Lifetime(_)) => unimplemented!(),\n+            .map(|p| match p.ty() {\n+                Some(ty) => from_chalk(db, ty.clone()),\n+                None => unimplemented!(),\n             })\n             .collect();\n         Substs(tys)\n@@ -168,65 +172,62 @@ impl ToChalk for TraitRef {\n     }\n }\n \n-impl ToChalk for TraitId {\n-    type Chalk = chalk_ir::TraitId;\n+impl ToChalk for hir_def::TraitId {\n+    type Chalk = TraitId;\n \n-    fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TraitId {\n+    fn to_chalk(self, _db: &impl HirDatabase) -> TraitId {\n         chalk_ir::TraitId(id_to_chalk(self))\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, trait_id: chalk_ir::TraitId) -> TraitId {\n+    fn from_chalk(_db: &impl HirDatabase, trait_id: TraitId) -> hir_def::TraitId {\n         id_from_chalk(trait_id.0)\n     }\n }\n \n impl ToChalk for TypeCtor {\n-    type Chalk = chalk_ir::StructId;\n+    type Chalk = StructId;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::StructId {\n+    fn to_chalk(self, db: &impl HirDatabase) -> StructId {\n         db.intern_type_ctor(self).into()\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, struct_id: chalk_ir::StructId) -> TypeCtor {\n+    fn from_chalk(db: &impl HirDatabase, struct_id: StructId) -> TypeCtor {\n         db.lookup_intern_type_ctor(struct_id.into())\n     }\n }\n \n impl ToChalk for Impl {\n-    type Chalk = chalk_ir::ImplId;\n+    type Chalk = ImplId;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ImplId {\n+    fn to_chalk(self, db: &impl HirDatabase) -> ImplId {\n         db.intern_chalk_impl(self).into()\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, impl_id: chalk_ir::ImplId) -> Impl {\n+    fn from_chalk(db: &impl HirDatabase, impl_id: ImplId) -> Impl {\n         db.lookup_intern_chalk_impl(impl_id.into())\n     }\n }\n \n impl ToChalk for TypeAliasId {\n-    type Chalk = chalk_ir::TypeId;\n+    type Chalk = AssocTypeId;\n \n-    fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TypeId {\n-        chalk_ir::TypeId(id_to_chalk(self))\n+    fn to_chalk(self, _db: &impl HirDatabase) -> AssocTypeId {\n+        chalk_ir::AssocTypeId(id_to_chalk(self))\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, type_alias_id: chalk_ir::TypeId) -> TypeAliasId {\n+    fn from_chalk(_db: &impl HirDatabase, type_alias_id: AssocTypeId) -> TypeAliasId {\n         id_from_chalk(type_alias_id.0)\n     }\n }\n \n impl ToChalk for AssocTyValue {\n-    type Chalk = chalk_rust_ir::AssociatedTyValueId;\n+    type Chalk = AssociatedTyValueId;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_rust_ir::AssociatedTyValueId {\n+    fn to_chalk(self, db: &impl HirDatabase) -> AssociatedTyValueId {\n         db.intern_assoc_ty_value(self).into()\n     }\n \n-    fn from_chalk(\n-        db: &impl HirDatabase,\n-        assoc_ty_value_id: chalk_rust_ir::AssociatedTyValueId,\n-    ) -> AssocTyValue {\n+    fn from_chalk(db: &impl HirDatabase, assoc_ty_value_id: AssociatedTyValueId) -> AssocTyValue {\n         db.lookup_intern_assoc_ty_value(assoc_ty_value_id.into())\n     }\n }\n@@ -468,28 +469,28 @@ impl<'a, DB> chalk_solve::RustIrDatabase<ChalkIr> for ChalkContext<'a, DB>\n where\n     DB: HirDatabase,\n {\n-    fn associated_ty_data(&self, id: TypeId) -> Arc<AssociatedTyDatum<ChalkIr>> {\n+    fn associated_ty_data(&self, id: AssocTypeId) -> Arc<AssociatedTyDatum> {\n         self.db.associated_ty_data(id)\n     }\n-    fn trait_datum(&self, trait_id: chalk_ir::TraitId) -> Arc<TraitDatum<ChalkIr>> {\n+    fn trait_datum(&self, trait_id: TraitId) -> Arc<TraitDatum> {\n         self.db.trait_datum(self.krate, trait_id)\n     }\n-    fn struct_datum(&self, struct_id: chalk_ir::StructId) -> Arc<StructDatum<ChalkIr>> {\n+    fn struct_datum(&self, struct_id: StructId) -> Arc<StructDatum> {\n         self.db.struct_datum(self.krate, struct_id)\n     }\n-    fn impl_datum(&self, impl_id: chalk_ir::ImplId) -> Arc<ImplDatum<ChalkIr>> {\n+    fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum> {\n         self.db.impl_datum(self.krate, impl_id)\n     }\n     fn impls_for_trait(\n         &self,\n-        trait_id: chalk_ir::TraitId,\n-        parameters: &[Parameter<ChalkIr>],\n-    ) -> Vec<chalk_ir::ImplId> {\n+        trait_id: TraitId,\n+        parameters: &[Parameter<TypeFamily>],\n+    ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         if trait_id == UNKNOWN_TRAIT {\n             return Vec::new();\n         }\n-        let trait_: TraitId = from_chalk(self.db, trait_id);\n+        let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n         let mut result: Vec<_> = self\n             .db\n             .impls_for_trait(self.krate, trait_.into())\n@@ -508,39 +509,32 @@ where\n         debug!(\"impls_for_trait returned {} impls\", result.len());\n         result\n     }\n-    fn impl_provided_for(\n-        &self,\n-        auto_trait_id: chalk_ir::TraitId,\n-        struct_id: chalk_ir::StructId,\n-    ) -> bool {\n+    fn impl_provided_for(&self, auto_trait_id: TraitId, struct_id: StructId) -> bool {\n         debug!(\"impl_provided_for {:?}, {:?}\", auto_trait_id, struct_id);\n         false // FIXME\n     }\n-    fn type_name(&self, _id: TypeKindId) -> Identifier {\n-        unimplemented!()\n-    }\n-    fn associated_ty_value(\n-        &self,\n-        id: chalk_rust_ir::AssociatedTyValueId,\n-    ) -> Arc<AssociatedTyValue<ChalkIr>> {\n+    fn associated_ty_value(&self, id: AssociatedTyValueId) -> Arc<AssociatedTyValue> {\n         self.db.associated_ty_value(self.krate.into(), id)\n     }\n     fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<ChalkIr>> {\n         vec![]\n     }\n-    fn local_impls_to_coherence_check(\n-        &self,\n-        _trait_id: chalk_ir::TraitId,\n-    ) -> Vec<chalk_ir::ImplId> {\n+    fn local_impls_to_coherence_check(&self, _trait_id: TraitId) -> Vec<ImplId> {\n         // We don't do coherence checking (yet)\n         unimplemented!()\n     }\n+    fn as_struct_id(&self, id: &TypeName<TypeFamily>) -> Option<StructId> {\n+        match id {\n+            TypeName::Struct(struct_id) => Some(*struct_id),\n+            _ => None,\n+        }\n+    }\n }\n \n pub(crate) fn associated_ty_data_query(\n     db: &impl HirDatabase,\n-    id: TypeId,\n-) -> Arc<AssociatedTyDatum<ChalkIr>> {\n+    id: AssocTypeId,\n+) -> Arc<AssociatedTyDatum> {\n     debug!(\"associated_ty_data {:?}\", id);\n     let type_alias: TypeAliasId = from_chalk(db, id);\n     let trait_ = match type_alias.lookup(db).container {\n@@ -565,8 +559,8 @@ pub(crate) fn associated_ty_data_query(\n pub(crate) fn trait_datum_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n-    trait_id: chalk_ir::TraitId,\n-) -> Arc<TraitDatum<ChalkIr>> {\n+    trait_id: TraitId,\n+) -> Arc<TraitDatum> {\n     debug!(\"trait_datum {:?}\", trait_id);\n     if trait_id == UNKNOWN_TRAIT {\n         let trait_datum_bound = chalk_rust_ir::TraitDatumBound { where_clauses: Vec::new() };\n@@ -586,7 +580,7 @@ pub(crate) fn trait_datum_query(\n             associated_ty_ids: vec![],\n         });\n     }\n-    let trait_: TraitId = from_chalk(db, trait_id);\n+    let trait_: hir_def::TraitId = from_chalk(db, trait_id);\n     let trait_data = db.trait_data(trait_);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db, trait_.into());\n@@ -616,8 +610,8 @@ pub(crate) fn trait_datum_query(\n pub(crate) fn struct_datum_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n-    struct_id: chalk_ir::StructId,\n-) -> Arc<StructDatum<ChalkIr>> {\n+    struct_id: StructId,\n+) -> Arc<StructDatum> {\n     debug!(\"struct_datum {:?}\", struct_id);\n     let type_ctor: TypeCtor = from_chalk(db, struct_id);\n     debug!(\"struct {:?} = {:?}\", struct_id, type_ctor);\n@@ -648,8 +642,8 @@ pub(crate) fn struct_datum_query(\n pub(crate) fn impl_datum_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n-    impl_id: chalk_ir::ImplId,\n-) -> Arc<ImplDatum<ChalkIr>> {\n+    impl_id: ImplId,\n+) -> Arc<ImplDatum> {\n     let _p = ra_prof::profile(\"impl_datum\");\n     debug!(\"impl_datum {:?}\", impl_id);\n     let impl_: Impl = from_chalk(db, impl_id);\n@@ -663,9 +657,9 @@ pub(crate) fn impl_datum_query(\n fn impl_block_datum(\n     db: &impl HirDatabase,\n     krate: CrateId,\n-    chalk_id: chalk_ir::ImplId,\n-    impl_id: ImplId,\n-) -> Option<Arc<ImplDatum<ChalkIr>>> {\n+    chalk_id: ImplId,\n+    impl_id: hir_def::ImplId,\n+) -> Option<Arc<ImplDatum>> {\n     let trait_ref = db.impl_trait(impl_id)?;\n     let impl_data = db.impl_data(impl_id);\n \n@@ -721,7 +715,7 @@ fn impl_block_datum(\n     Some(Arc::new(impl_datum))\n }\n \n-fn invalid_impl_datum() -> Arc<ImplDatum<ChalkIr>> {\n+fn invalid_impl_datum() -> Arc<ImplDatum> {\n     let trait_ref = chalk_ir::TraitRef {\n         trait_id: UNKNOWN_TRAIT,\n         parameters: vec![chalk_ir::TyData::BoundVar(0).cast().intern().cast()],\n@@ -754,7 +748,7 @@ fn type_alias_associated_ty_value(\n     db: &impl HirDatabase,\n     _krate: CrateId,\n     type_alias: TypeAliasId,\n-) -> Arc<AssociatedTyValue<ChalkIr>> {\n+) -> Arc<AssociatedTyValue> {\n     let type_alias_data = db.type_alias_data(type_alias);\n     let impl_id = match type_alias.lookup(db).container {\n         AssocContainerId::ImplId(it) => it,\n@@ -786,25 +780,25 @@ fn id_to_chalk<T: InternKey>(salsa_id: T) -> chalk_ir::RawId {\n     chalk_ir::RawId { index: salsa_id.as_intern_id().as_u32() }\n }\n \n-impl From<chalk_ir::StructId> for crate::TypeCtorId {\n-    fn from(struct_id: chalk_ir::StructId) -> Self {\n+impl From<StructId> for crate::TypeCtorId {\n+    fn from(struct_id: StructId) -> Self {\n         id_from_chalk(struct_id.0)\n     }\n }\n \n-impl From<crate::TypeCtorId> for chalk_ir::StructId {\n+impl From<crate::TypeCtorId> for StructId {\n     fn from(type_ctor_id: crate::TypeCtorId) -> Self {\n         chalk_ir::StructId(id_to_chalk(type_ctor_id))\n     }\n }\n \n-impl From<chalk_ir::ImplId> for crate::traits::GlobalImplId {\n-    fn from(impl_id: chalk_ir::ImplId) -> Self {\n+impl From<ImplId> for crate::traits::GlobalImplId {\n+    fn from(impl_id: ImplId) -> Self {\n         id_from_chalk(impl_id.0)\n     }\n }\n \n-impl From<crate::traits::GlobalImplId> for chalk_ir::ImplId {\n+impl From<crate::traits::GlobalImplId> for ImplId {\n     fn from(impl_id: crate::traits::GlobalImplId) -> Self {\n         chalk_ir::ImplId(id_to_chalk(impl_id))\n     }"}]}