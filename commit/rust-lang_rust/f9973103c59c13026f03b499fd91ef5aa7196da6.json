{"sha": "f9973103c59c13026f03b499fd91ef5aa7196da6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTczMTAzYzU5YzEzMDI2ZjAzYjQ5OWZkOTFlZjVhYTcxOTZkYTY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:29:37Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:22Z"}, "message": "middle: trans: datum: remove dead code", "tree": {"sha": "9e3ec37a1c68740982daba63fbc0ed11c91fccb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3ec37a1c68740982daba63fbc0ed11c91fccb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9973103c59c13026f03b499fd91ef5aa7196da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9973103c59c13026f03b499fd91ef5aa7196da6", "html_url": "https://github.com/rust-lang/rust/commit/f9973103c59c13026f03b499fd91ef5aa7196da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9973103c59c13026f03b499fd91ef5aa7196da6/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd185c25517e568d7fd85df030e848deec655d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd185c25517e568d7fd85df030e848deec655d0", "html_url": "https://github.com/rust-lang/rust/commit/9dd185c25517e568d7fd85df030e848deec655d0"}], "stats": {"total": 48, "additions": 2, "deletions": 46}, "files": [{"sha": "500a36c5dee60f7fc32527779158c1d425d5609c", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f9973103c59c13026f03b499fd91ef5aa7196da6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9973103c59c13026f03b499fd91ef5aa7196da6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f9973103c59c13026f03b499fd91ef5aa7196da6", "patch": "@@ -24,12 +24,10 @@ use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::tvec;\n use middle::trans::type_of;\n-use middle::trans::write_guard;\n use middle::ty;\n use util::ppaux::{ty_to_str};\n \n use syntax::ast;\n-use syntax::codemap::Span;\n \n /**\n  * A `Datum` encapsulates the result of evaluating an expression.  It\n@@ -160,10 +158,6 @@ pub fn rvalue_scratch_datum(bcx: &Block,\n     Datum(scratch, ty, Rvalue(ByRef))\n }\n \n-pub fn is_by_value_type(ccx: &CrateContext, ty: ty::t) -> bool {\n-    appropriate_rvalue_mode(ccx, ty) == ByValue\n-}\n-\n pub fn appropriate_rvalue_mode(ccx: &CrateContext, ty: ty::t) -> RvalueMode {\n     /*!\n      * Indicates the \"appropriate\" mode for this value,\n@@ -389,10 +383,7 @@ impl Datum<Expr> {\n         }\n     }\n \n-    pub fn is_by_ref(&self) -> bool {\n-        self.kind.is_by_ref()\n-    }\n-\n+    #[allow(dead_code)] // potentially useful\n     pub fn assert_lvalue(self, bcx: &Block) -> Datum<Lvalue> {\n         /*!\n          * Asserts that this datum *is* an lvalue and returns it.\n@@ -632,6 +623,7 @@ impl<K:KindOps> Datum<K> {\n         glue::take_ty(bcx, dst, self.ty)\n     }\n \n+    #[allow(dead_code)] // useful for debugging\n     pub fn to_str(&self, ccx: &CrateContext) -> ~str {\n         format!(\"Datum({}, {}, {:?})\",\n              ccx.tn.val_to_str(self.val),\n@@ -645,16 +637,6 @@ impl<K:KindOps> Datum<K> {\n         appropriate_rvalue_mode(ccx, self.ty)\n     }\n \n-    pub fn root_and_write_guard<'a>(\n-                                &self,\n-                                bcx: &'a Block<'a>,\n-                                span: Span,\n-                                expr_id: ast::NodeId,\n-                                derefs: uint)\n-                                -> &'a Block<'a> {\n-        write_guard::root_and_write_guard(self, bcx, span, expr_id, derefs)\n-    }\n-\n     pub fn to_llscalarish<'a>(self, bcx: &'a Block<'a>) -> ValueRef {\n         /*!\n          * Converts `self` into a by-value `ValueRef`. Consumes this\n@@ -688,39 +670,13 @@ impl<'a, K:KindOps> DatumBlock<'a, K> {\n }\n \n impl<'a> DatumBlock<'a, Expr> {\n-    pub fn assert_by_ref(self) -> DatumBlock<'a, Expr> {\n-        assert!(self.datum.kind.is_by_ref());\n-        self\n-    }\n-\n-    pub fn store_to(self, dst: ValueRef) -> &'a Block<'a> {\n-        let DatumBlock { bcx, datum } = self;\n-        datum.store_to(bcx, dst)\n-    }\n-\n     pub fn store_to_dest(self,\n                          dest: expr::Dest,\n                          expr_id: ast::NodeId) -> &'a Block<'a> {\n         let DatumBlock { bcx, datum } = self;\n         datum.store_to_dest(bcx, dest, expr_id)\n     }\n \n-    pub fn shallow_copy(self, dst: ValueRef) -> &'a Block<'a> {\n-        self.datum.shallow_copy(self.bcx, dst)\n-    }\n-\n-    pub fn ccx(&self) -> &'a CrateContext {\n-        self.bcx.ccx()\n-    }\n-\n-    pub fn tcx(&self) -> &'a ty::ctxt {\n-        self.bcx.tcx()\n-    }\n-\n-    pub fn to_str(&self) -> ~str {\n-        self.datum.to_str(self.ccx())\n-    }\n-\n     pub fn to_llbool(self) -> Result<'a> {\n         let DatumBlock { datum, bcx } = self;\n         rslt(bcx, datum.to_llbool(bcx))"}]}