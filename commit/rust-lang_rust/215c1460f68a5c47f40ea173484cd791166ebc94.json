{"sha": "215c1460f68a5c47f40ea173484cd791166ebc94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWMxNDYwZjY4YTVjNDdmNDBlYTE3MzQ4NGNkNzkxMTY2ZWJjOTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-20T23:55:39Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-21T23:01:02Z"}, "message": "Check attributes in `expand_mac_invoc`", "tree": {"sha": "4367d10885f825754c252f8d74cc3aee2a0cd796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4367d10885f825754c252f8d74cc3aee2a0cd796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215c1460f68a5c47f40ea173484cd791166ebc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215c1460f68a5c47f40ea173484cd791166ebc94", "html_url": "https://github.com/rust-lang/rust/commit/215c1460f68a5c47f40ea173484cd791166ebc94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215c1460f68a5c47f40ea173484cd791166ebc94/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4075e9467ef704d7f8cd120669faec455eb84f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4075e9467ef704d7f8cd120669faec455eb84f9", "html_url": "https://github.com/rust-lang/rust/commit/f4075e9467ef704d7f8cd120669faec455eb84f9"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "aa5d93d82695487e498b0ad2ecdca283a791fb39", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/215c1460f68a5c47f40ea173484cd791166ebc94/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215c1460f68a5c47f40ea173484cd791166ebc94/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=215c1460f68a5c47f40ea173484cd791166ebc94", "patch": "@@ -16,7 +16,7 @@ use ast;\n use ext::mtwt;\n use ext::build::AstBuilder;\n use attr;\n-use attr::{AttrMetaMethods, WithAttrs};\n+use attr::{AttrMetaMethods, WithAttrs, ThinAttributesExt};\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n@@ -86,14 +86,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n         ast::ExprKind::Mac(mac) => {\n-            if let Some(ref attrs) = attrs {\n-                check_attributes(attrs, fld);\n-            }\n-\n-            // Assert that we drop any macro attributes on the floor here\n-            drop(attrs);\n-\n-            expand_mac_invoc(mac, span, fld)\n+            expand_mac_invoc(mac, attrs.into_attr_vec(), span, fld)\n         }\n \n         ast::ExprKind::InPlace(placer, value_expr) => {\n@@ -204,7 +197,12 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n }\n \n /// Expand a (not-ident-style) macro invocation. Returns the result of expansion.\n-fn expand_mac_invoc<T: MacroGenerable>(mac: ast::Mac, span: Span, fld: &mut MacroExpander) -> T {\n+fn expand_mac_invoc<T>(mac: ast::Mac, attrs: Vec<ast::Attribute>, span: Span,\n+                       fld: &mut MacroExpander) -> T\n+    where T: MacroGenerable,\n+{\n+    check_attributes(&attrs, fld);\n+\n     // it would almost certainly be cleaner to pass the whole\n     // macro invocation in, rather than pulling it apart and\n     // marking the tts and the ctxt separately. This also goes\n@@ -527,15 +525,8 @@ fn expand_stmt(stmt: Stmt, fld: &mut MacroExpander) -> SmallVector<Stmt> {\n         _ => return expand_non_macro_stmt(stmt, fld)\n     };\n \n-    if let Some(ref attrs) = attrs {\n-        check_attributes(attrs, fld);\n-    }\n-\n-    // Assert that we drop any macro attributes on the floor here\n-    drop(attrs);\n-\n     let mut fully_expanded: SmallVector<ast::Stmt> =\n-        expand_mac_invoc(mac.unwrap(), stmt.span, fld);\n+        expand_mac_invoc(mac.unwrap(), attrs.into_attr_vec(), stmt.span, fld);\n \n     // If this is a macro invocation with a semicolon, then apply that\n     // semicolon to the final statement produced by expansion.\n@@ -752,7 +743,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n     }\n     p.and_then(|ast::Pat {node, span, ..}| {\n         match node {\n-            PatKind::Mac(mac) => expand_mac_invoc(mac, span, fld),\n+            PatKind::Mac(mac) => expand_mac_invoc(mac, Vec::new(), span, fld),\n             _ => unreachable!()\n         }\n     })\n@@ -1007,8 +998,7 @@ fn expand_impl_item(ii: ast::ImplItem, fld: &mut MacroExpander)\n             span: fld.new_span(ii.span)\n         }),\n         ast::ImplItemKind::Macro(mac) => {\n-            check_attributes(&ii.attrs, fld);\n-            expand_mac_invoc(mac, ii.span, fld)\n+            expand_mac_invoc(mac, ii.attrs, ii.span, fld)\n         }\n         _ => fold::noop_fold_impl_item(ii, fld)\n     }\n@@ -1052,7 +1042,7 @@ pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n     let t = match t.node.clone() {\n         ast::TyKind::Mac(mac) => {\n             if fld.cx.ecfg.features.unwrap().type_macros {\n-                expand_mac_invoc(mac, t.span, fld)\n+                expand_mac_invoc(mac, Vec::new(), t.span, fld)\n             } else {\n                 feature_gate::emit_feature_err(\n                     &fld.cx.parse_sess.span_diagnostic,"}]}