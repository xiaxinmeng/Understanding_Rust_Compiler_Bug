{"sha": "7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNmRiODNiMTQxNmYxYjNjNmU4MWRkMDExODk1Y2Y4MzdlM2RkMjM=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-24T06:34:53Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:40Z"}, "message": "Inherited use constness and assoc change predicate", "tree": {"sha": "148c9b56c07d580ad74b60cf67fc2d21e3dbbd37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148c9b56c07d580ad74b60cf67fc2d21e3dbbd37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1EACgkQAn35M4hi\nrd1sNw//aB1E5kINCoXUjyXNQDHdvXaQxYPo0CzVw01ycMV+4tR0io60Cl5Q6XU6\nKiBWmGXvj0iV8WGkoavZZ3qNKUzqUHQ4RQLClDoTnZWZL1V5qr2iOgrEBNXxGmOt\n1WTxC0dU1S5tfLMjOUtfplIXZNwLp7fIInlWI8KTdluwGJCwi3/JvfAYnhe4ehtI\nfm8xEWfA5DZVeXi0l7RbUEH0dMPBNbM/kKypYftjxpYKuPJpqOA5FMZSptFiJErF\nx4OpVUjFk2lQs2W8nbp4pEK4KcORQXF4ERbWw4j1axRu0U/T3c6w7uzaJ9lzNSRZ\nP4Vw3JqRx9fA7yobN6dNfN70VW+d67DXVb+2ZPWqwSrlGaflU/7ESshcujPFHq2m\n7I1Dc1enJX7VOBOas04UiWtNXpO+Q4hOlmeuMS5aT6lF6C2umZ3fA/nAKiHf4d2q\nqKi32zZg+FeaJiTFIOmx/Ou4Llf5Eyxcz+pBAn2/2sgBz8RXHGaPa+8WJ/dnHGs2\n3oZv3F0caVNUqpJfhRsr8EPBeZj+/IVi0Lc4fKHTVs2Yau6ya9Ep148ltqWIWKXF\nysHFEpp1W6pwDf7b2SXBp6nz56eW7CUMgnL2tdG8lreDxhYS6SphNHXMPMgxWU8O\nOwCS5WYhYenDfUACVFFjbIz/HJRDLAXNqlvO2ognbMLdFlGa4CA=\n=WLcV\n-----END PGP SIGNATURE-----", "payload": "tree 148c9b56c07d580ad74b60cf67fc2d21e3dbbd37\nparent d356cd10f7380cc3d9e20d50f2d64e4a07ba196c\nauthor Deadbeef <ent3rm4n@gmail.com> 1627108493 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846920 +0000\n\nInherited use constness and assoc change predicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "html_url": "https://github.com/rust-lang/rust/commit/7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d356cd10f7380cc3d9e20d50f2d64e4a07ba196c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d356cd10f7380cc3d9e20d50f2d64e4a07ba196c", "html_url": "https://github.com/rust-lang/rust/commit/d356cd10f7380cc3d9e20d50f2d64e4a07ba196c"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "d080a3f5b26b7a0955fd31b7562285798e8d3d5c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "patch": "@@ -255,7 +255,7 @@ checksum = \"81a18687293a1546b67c246452202bbbf143d239cb43494cc163da14979082da\"\n \n [[package]]\n name = \"cargo\"\n-version = \"0.57.0\"\n+version = \"0.56.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -388,7 +388,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo-util\"\n-version = \"0.1.1\"\n+version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"core-foundation\","}, {"sha": "994936351ff8ce944663180af6f11aace30745e0", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "patch": "@@ -16,6 +16,15 @@ pub enum AssocItemContainer {\n }\n \n impl AssocItemContainer {\n+    /// Asserts that this is the `DefId` of an associated item declared\n+    /// in an impl, and returns the trait `DefId`.\n+    pub fn assert_impl(&self) -> DefId {\n+        match *self {\n+            ImplContainer(id) => id,\n+            _ => bug!(\"associated item has wrong container type: {:?}\", self),\n+        }\n+    }\n+\n     /// Asserts that this is the `DefId` of an associated item declared\n     /// in a trait, and returns the trait `DefId`.\n     pub fn assert_trait(&self) -> DefId {"}, {"sha": "01890f750263de8a87ef5cdbd1eedf8925189e75", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "patch": "@@ -1292,7 +1292,24 @@ pub fn check_type_bounds<'tcx>(\n     };\n \n     tcx.infer_ctxt().enter(move |infcx| {\n-        let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n+        // if the item is inside a const impl, we transform the predicates to be const.\n+        let constness = tcx.impl_constness(impl_ty.container.assert_impl());\n+        let pred_map = match constness {\n+            hir::Constness::NotConst => |p, _| p,\n+            hir::Constness::Const => |p: ty::Predicate<'tcx>, tcx: TyCtxt<'tcx>| {\n+                p.kind()\n+                    .map_bound(|kind| match kind {\n+                        ty::PredicateKind::Trait(mut tp) => {\n+                            tp.constness = hir::Constness::Const;\n+                            ty::PredicateKind::Trait(tp)\n+                        }\n+                        kind => kind,\n+                    })\n+                    .to_predicate(tcx)\n+            },\n+        };\n+\n+        let inh = Inherited::with_constness(infcx, impl_ty.def_id.expect_local(), constness);\n         let infcx = &inh.infcx;\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n@@ -1310,7 +1327,7 @@ pub fn check_type_bounds<'tcx>(\n             .explicit_item_bounds(trait_ty.def_id)\n             .iter()\n             .map(|&(bound, span)| {\n-                let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n+                let concrete_ty_bound = pred_map(bound.subst(tcx, rebased_substs), tcx);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n                 traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n@@ -1328,7 +1345,10 @@ pub fn check_type_bounds<'tcx>(\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n             obligation.predicate = normalized_predicate;\n \n-            inh.register_predicates(obligations);\n+            inh.register_predicates(obligations.into_iter().map(|mut o| {\n+                o.predicate = pred_map(o.predicate, tcx);\n+                o\n+            }));\n             inh.register_predicate(obligation);\n         }\n "}, {"sha": "242edf5396c5809b6e805ef942286bd656ab6043", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6db83b1416f1b3c6e81dd011895cf837e3dd23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=7e6db83b1416f1b3c6e81dd011895cf837e3dd23", "patch": "@@ -52,6 +52,9 @@ pub struct Inherited<'a, 'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n+    /// Reports whether this is in a const context.\n+    pub(super) constness: hir::Constness,\n+\n     pub(super) body_id: Option<hir::BodyId>,\n }\n \n@@ -93,6 +96,12 @@ impl<'tcx> InheritedBuilder<'tcx> {\n \n impl Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n+        let tcx = infcx.tcx;\n+        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        Self::with_constness(infcx, def_id, tcx.hir().get(item_id).constness())\n+    }\n+\n+    pub(super) fn with_constness(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId, constness: hir::Constness) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = tcx.hir().maybe_body_owned_by(item_id);\n@@ -108,12 +117,29 @@ impl Inherited<'a, 'tcx> {\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n+            constness,\n             body_id,\n         }\n     }\n \n-    pub(super) fn register_predicate(&self, obligation: traits::PredicateObligation<'tcx>) {\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn transform_predicate(&self, p: &mut ty::Predicate<'tcx>) {\n+        // Don't transform non-const bounds into const bounds,\n+        // but transform const bounds to non-const when we are\n+        // not in a const context.\n+        if let hir::Constness::NotConst = self.constness {\n+            let kind = p.kind();\n+            if let ty::PredicateKind::Trait(pred) = kind.as_ref().skip_binder() {\n+                let mut pred = *pred;\n+                pred.constness = hir::Constness::NotConst;\n+                *p = kind.rebind(ty::PredicateKind::Trait(pred)).to_predicate(self.tcx);\n+            }\n+        }\n+    }\n+\n+    pub(super) fn register_predicate(&self, mut obligation: traits::PredicateObligation<'tcx>) {\n         debug!(\"register_predicate({:?})\", obligation);\n+        self.transform_predicate(&mut obligation.predicate);\n         if obligation.has_escaping_bound_vars() {\n             span_bug!(obligation.cause.span, \"escaping bound vars in predicate {:?}\", obligation);\n         }"}]}