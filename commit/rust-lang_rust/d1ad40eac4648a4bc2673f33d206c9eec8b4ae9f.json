{"sha": "d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWQ0MGVhYzQ2NDhhNGJjMjY3M2YzM2QyMDZjOWVlYzhiNGFlOWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-05T08:40:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-07T09:30:08Z"}, "message": "Fix rendering of reexported macros 2.0", "tree": {"sha": "df70bf358e4577ecb915242e2da56d4529cf65a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df70bf358e4577ecb915242e2da56d4529cf65a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "html_url": "https://github.com/rust-lang/rust/commit/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "html_url": "https://github.com/rust-lang/rust/commit/c5e344f7747dbd7e7d4b209e3c480deb5979a56f"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "1049dcfd117671bfa17a6f44d638746453bbb9a6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "patch": "@@ -546,17 +546,35 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind {\n     let imported_from = cx.tcx.crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n-        LoadedMacro::MacroDef(def, _) => {\n-            if let ast::ItemKind::MacroDef(ref def) = def.kind {\n+        LoadedMacro::MacroDef(item_def, _) => {\n+            if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n                 let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n                 let matchers = tts.chunks(4).map(|arm| &arm[0]);\n-\n-                let source = format!(\n-                    \"macro_rules! {} {{\\n{}}}\",\n-                    name,\n-                    utils::render_macro_arms(matchers, \";\")\n-                );\n-\n+                let source = if def.macro_rules {\n+                    format!(\n+                        \"macro_rules! {} {{\\n{}}}\",\n+                        name,\n+                        utils::render_macro_arms(matchers, \";\")\n+                    )\n+                } else {\n+                    let vis = item_def.vis.clean(cx);\n+\n+                    if matchers.len() <= 1 {\n+                        format!(\n+                            \"{}macro {}{} {{\\n    ...\\n}}\",\n+                            vis.to_src_with_space(cx.tcx, did),\n+                            name,\n+                            matchers.map(utils::render_macro_matcher).collect::<String>(),\n+                        )\n+                    } else {\n+                        format!(\n+                            \"{}macro {} {{\\n{}}}\",\n+                            vis.to_src_with_space(cx.tcx, did),\n+                            name,\n+                            utils::render_macro_arms(matchers, \";\"),\n+                        )\n+                    }\n+                };\n                 clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n             } else {\n                 unreachable!()"}, {"sha": "711f2e6da41a5e089563fdaba2ac3aab417e17ea", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "patch": "@@ -10,6 +10,7 @@ crate mod types;\n crate mod utils;\n \n use rustc_ast as ast;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -1696,6 +1697,23 @@ impl Clean<Visibility> for hir::Visibility<'_> {\n     }\n }\n \n+impl Clean<Visibility> for ast::Visibility {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Visibility {\n+        match self.kind {\n+            ast::VisibilityKind::Public => Visibility::Public,\n+            ast::VisibilityKind::Inherited => Visibility::Inherited,\n+            ast::VisibilityKind::Crate(_) => {\n+                let krate = DefId::local(CRATE_DEF_INDEX);\n+                Visibility::Restricted(krate)\n+            }\n+            ast::VisibilityKind::Restricted { id, .. } => {\n+                let did = cx.enter_resolver(|r| r.local_def_id(id)).to_def_id();\n+                Visibility::Restricted(did)\n+            }\n+        }\n+    }\n+}\n+\n impl Clean<Visibility> for ty::Visibility {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Visibility {\n         match *self {"}, {"sha": "4f51a00f4ffa0fc05034146056b6f0bc0f849b06", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d1ad40eac4648a4bc2673f33d206c9eec8b4ae9f", "patch": "@@ -31,6 +31,7 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate rustc_ast;\n+extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;"}]}