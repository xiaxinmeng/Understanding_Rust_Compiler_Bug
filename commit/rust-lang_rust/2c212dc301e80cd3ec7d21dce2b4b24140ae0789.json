{"sha": "2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjEyZGMzMDFlODBjZDNlYzdkMjFkY2UyYjRiMjQxNDBhZTA3ODk=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-07T13:48:13Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-07T13:48:13Z"}, "message": "Merge pull request #603 from mcarton/copies\n\nDie copy & paste, die", "tree": {"sha": "3d529f99d3b34cc4598122489ce38fc7bf8e21b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d529f99d3b34cc4598122489ce38fc7bf8e21b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "html_url": "https://github.com/rust-lang/rust/commit/2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba5d45509a62169dc4f6c0bac5ea6ac08d40883", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba5d45509a62169dc4f6c0bac5ea6ac08d40883", "html_url": "https://github.com/rust-lang/rust/commit/9ba5d45509a62169dc4f6c0bac5ea6ac08d40883"}, {"sha": "a9e1b1fba05ce94a65f511e2c07bd086c1b0f00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e1b1fba05ce94a65f511e2c07bd086c1b0f00f", "html_url": "https://github.com/rust-lang/rust/commit/a9e1b1fba05ce94a65f511e2c07bd086c1b0f00f"}], "stats": {"total": 466, "additions": 443, "deletions": 23}, "files": [{"sha": "d134afe8a8e6eec9158d9fa16d5154b3f5925cd9", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 114 lints included in this crate:\n+There are 116 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -47,6 +47,8 @@ name\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                   | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                         | warn    | if with the same *then* and *else* blocks\n+[ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                 | warn    | consecutive `ifs` with the same condition\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases\n [invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                 | deny    | finds invalid regular expressions in `Regex::new(_)` invocations"}, {"sha": "525c7b7a6fde2e8acd5c6209deef94f69447bab6", "filename": "src/copies.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -0,0 +1,102 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::{get_parent_expr, in_macro, is_block_equal, is_exp_equal, span_lint, span_note_and_lint};\n+\n+/// **What it does:** This lint checks for consecutive `ifs` with the same condition. This lint is\n+/// `Warn` by default.\n+///\n+/// **Why is this bad?** This is probably a copy & paste error.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:** `if a == b { .. } else if a == b { .. }`\n+declare_lint! {\n+    pub IFS_SAME_COND,\n+    Warn,\n+    \"consecutive `ifs` with the same condition\"\n+}\n+\n+/// **What it does:** This lint checks for `if/else` with the same body as the *then* part and the\n+/// *else* part. This lint is `Warn` by default.\n+///\n+/// **Why is this bad?** This is probably a copy & paste error.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:** `if .. { 42 } else { 42 }`\n+declare_lint! {\n+    pub IF_SAME_THEN_ELSE,\n+    Warn,\n+    \"if with the same *then* and *else* blocks\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct CopyAndPaste;\n+\n+impl LintPass for CopyAndPaste {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![\n+            IFS_SAME_COND,\n+            IF_SAME_THEN_ELSE\n+        ]\n+    }\n+}\n+\n+impl LateLintPass for CopyAndPaste {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if !in_macro(cx, expr.span) {\n+            lint_same_then_else(cx, expr);\n+            lint_same_cond(cx, expr);\n+        }\n+    }\n+}\n+\n+/// Implementation of `IF_SAME_THEN_ELSE`.\n+fn lint_same_then_else(cx: &LateContext, expr: &Expr) {\n+    if let ExprIf(_, ref then_block, Some(ref else_expr)) = expr.node {\n+        if let ExprBlock(ref else_block) = else_expr.node {\n+            if is_block_equal(cx, &then_block, &else_block, false) {\n+                span_lint(cx, IF_SAME_THEN_ELSE, expr.span, \"this if has the same then and else blocks\");\n+            }\n+        }\n+    }\n+}\n+\n+/// Implementation of `IFS_SAME_COND`.\n+fn lint_same_cond(cx: &LateContext, expr: &Expr) {\n+    // skip ifs directly in else, it will be checked in the parent if\n+    if let Some(&Expr{node: ExprIf(_, _, Some(ref else_expr)), ..}) = get_parent_expr(cx, expr) {\n+        if else_expr.id == expr.id {\n+            return;\n+        }\n+    }\n+\n+    let conds = condition_sequence(expr);\n+\n+    for (n, i) in conds.iter().enumerate() {\n+        for j in conds.iter().skip(n+1) {\n+            if is_exp_equal(cx, i, j, true) {\n+                span_note_and_lint(cx, IFS_SAME_COND, j.span, \"this if has the same condition as a previous if\", i.span, \"same as this\");\n+            }\n+        }\n+    }\n+}\n+\n+/// Return the list of condition expressions in a sequence of `if/else`.\n+/// Eg. would return `[a, b]` for the expression `if a {..} else if b {..}`.\n+fn condition_sequence(mut expr: &Expr) -> Vec<&Expr> {\n+    let mut result = vec![];\n+\n+    while let ExprIf(ref cond, _, ref else_expr) = expr.node {\n+        result.push(&**cond);\n+\n+        if let Some(ref else_expr) = *else_expr {\n+            expr = else_expr;\n+        }\n+        else {\n+            break;\n+        }\n+    }\n+\n+    result\n+}"}, {"sha": "d5bb086fc213712beb89e7a3152035e9f5f69b23", "filename": "src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fentry.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -89,7 +89,7 @@ fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr:\n             params.len() == 3,\n             name.node.as_str() == \"insert\",\n             get_item_name(cx, map) == get_item_name(cx, &*params[0]),\n-            is_exp_equal(cx, key, &params[1])\n+            is_exp_equal(cx, key, &params[1], false)\n         ], {\n             let help = if sole_expr {\n                 format!(\"{}.entry({}).or_insert({})\","}, {"sha": "aecd0693ff1f2acdb31bb1e2904e4de4b77e895e", "filename": "src/eq_op.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -4,9 +4,11 @@ use rustc_front::util as ast_util;\n \n use utils::{is_exp_equal, span_lint};\n \n-/// **What it does:** This lint checks for equal operands to comparisons and bitwise binary operators (`&`, `|` and `^`).\n+/// **What it does:** This lint checks for equal operands to comparison, logical and bitwise,\n+/// difference and division binary operators (`==`, `>`, etc., `&&`, `||`, `&`, `|`, `^`, `-` and\n+/// `/`).\n ///\n-/// **Why is this bad?** This is usually just a typo.\n+/// **Why is this bad?** This is usually just a typo or a copy and paste error.\n ///\n /// **Known problems:** False negatives: We had some false positives regarding calls (notably [racer](https://github.com/phildawes/racer) had one instance of `x.pop() && x.pop()`), so we removed matching any function or method calls. We may introduce a whitelist of known pure functions in the future.\n ///\n@@ -29,19 +31,21 @@ impl LintPass for EqOp {\n impl LateLintPass for EqOp {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n-            if is_cmp_or_bit(op) && is_exp_equal(cx, left, right) {\n+            if is_valid_operator(op) && is_exp_equal(cx, left, right, true) {\n                 span_lint(cx,\n                           EQ_OP,\n                           e.span,\n-                          &format!(\"equal expressions as operands to {}\", ast_util::binop_to_string(op.node)));\n+                          &format!(\"equal expressions as operands to `{}`\", ast_util::binop_to_string(op.node)));\n             }\n         }\n     }\n }\n \n \n-fn is_cmp_or_bit(op: &BinOp) -> bool {\n+fn is_valid_operator(op: &BinOp) -> bool {\n     match op.node {\n+        BiSub |\n+        BiDiv |\n         BiEq |\n         BiLt |\n         BiLe |"}, {"sha": "35ec0e13c3c17d781778f3bcdaacbeb46f641a4c", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -37,6 +37,7 @@ use rustc_plugin::Registry;\n \n #[macro_use]\n pub mod utils;\n+pub mod copies;\n pub mod consts;\n pub mod types;\n pub mod misc;\n@@ -157,6 +158,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n     reg.register_late_lint_pass(box types::AbsurdUnsignedComparisons);\n     reg.register_late_lint_pass(box regex::RegexPass);\n+    reg.register_late_lint_pass(box copies::CopyAndPaste);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -190,6 +192,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n+        copies::IF_SAME_THEN_ELSE,\n+        copies::IFS_SAME_COND,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_NOT_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,"}, {"sha": "b78db7f4b7718f6fc657463de2636c8c23494e8b", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -84,7 +84,7 @@ impl LateLintPass for StringAdd {\n                     if let Some(ref p) = parent {\n                         if let ExprAssign(ref target, _) = p.node {\n                             // avoid duplicate matches\n-                            if is_exp_equal(cx, target, left) {\n+                            if is_exp_equal(cx, target, left, false) {\n                                 return;\n                             }\n                         }\n@@ -113,7 +113,7 @@ fn is_string(cx: &LateContext, e: &Expr) -> bool {\n \n fn is_add(cx: &LateContext, src: &Expr, target: &Expr) -> bool {\n     match src.node {\n-        ExprBinary(Spanned{ node: BiAdd, .. }, ref left, _) => is_exp_equal(cx, target, left),\n+        ExprBinary(Spanned{ node: BiAdd, .. }, ref left, _) => is_exp_equal(cx, target, left, false),\n         ExprBlock(ref block) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |expr| is_add(cx, expr, target))\n         }"}, {"sha": "a8890f31cb03d820ede398c6adf9d05ed45576f1", "filename": "src/utils.rs", "status": "modified", "additions": 166, "deletions": 10, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -589,29 +589,183 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n-pub fn is_exp_equal(cx: &LateContext, left: &Expr, right: &Expr) -> bool {\n+/// Check whether two statements are the same.\n+/// See also `is_exp_equal`.\n+pub fn is_stmt_equal(cx: &LateContext, left: &Stmt, right: &Stmt, ignore_fn: bool) -> bool {\n+    match (&left.node, &right.node) {\n+        (&StmtDecl(ref l, _), &StmtDecl(ref r, _)) => {\n+            if let (&DeclLocal(ref l), &DeclLocal(ref r)) = (&l.node, &r.node) {\n+                // TODO: tys\n+                l.ty.is_none() && r.ty.is_none() &&\n+                    both(&l.init, &r.init, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n+            }\n+            else {\n+                false\n+            }\n+        }\n+        (&StmtExpr(ref l, _), &StmtExpr(ref r, _)) => is_exp_equal(cx, l, r, ignore_fn),\n+        (&StmtSemi(ref l, _), &StmtSemi(ref r, _)) => is_exp_equal(cx, l, r, ignore_fn),\n+        _ => false,\n+    }\n+}\n+\n+/// Check whether two blocks are the same.\n+/// See also `is_exp_equal`.\n+pub fn is_block_equal(cx: &LateContext, left: &Block, right: &Block, ignore_fn: bool) -> bool {\n+    over(&left.stmts, &right.stmts, |l, r| is_stmt_equal(cx, l, r, ignore_fn)) &&\n+        both(&left.expr, &right.expr, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n+}\n+\n+/// Check whether two pattern are the same.\n+/// See also `is_exp_equal`.\n+pub fn is_pat_equal(cx: &LateContext, left: &Pat, right: &Pat, ignore_fn: bool) -> bool {\n+    match (&left.node, &right.node) {\n+        (&PatBox(ref l), &PatBox(ref r)) => {\n+            is_pat_equal(cx, l, r, ignore_fn)\n+        }\n+        (&PatEnum(ref lp, ref la), &PatEnum(ref rp, ref ra)) => {\n+            is_path_equal(lp, rp) &&\n+                both(la, ra, |l, r| {\n+                    over(l, r, |l, r| is_pat_equal(cx, l, r, ignore_fn))\n+                })\n+        }\n+        (&PatIdent(ref lb, ref li, ref lp), &PatIdent(ref rb, ref ri, ref rp)) => {\n+            lb == rb && li.node.name.as_str() == ri.node.name.as_str() &&\n+                both(lp, rp, |l, r| is_pat_equal(cx, l, r, ignore_fn))\n+        }\n+        (&PatLit(ref l), &PatLit(ref r)) => {\n+            is_exp_equal(cx, l, r, ignore_fn)\n+        }\n+        (&PatQPath(ref ls, ref lp), &PatQPath(ref rs, ref rp)) => {\n+            is_qself_equal(ls, rs) && is_path_equal(lp, rp)\n+        }\n+        (&PatTup(ref l), &PatTup(ref r)) => {\n+            over(l, r, |l, r| is_pat_equal(cx, l, r, ignore_fn))\n+        }\n+        (&PatRange(ref ls, ref le), &PatRange(ref rs, ref re)) => {\n+            is_exp_equal(cx, ls, rs, ignore_fn) &&\n+                is_exp_equal(cx, le, re, ignore_fn)\n+        }\n+        (&PatRegion(ref le, ref lm), &PatRegion(ref re, ref rm)) => {\n+            lm == rm && is_pat_equal(cx, le, re, ignore_fn)\n+        }\n+        (&PatVec(ref ls, ref li, ref le), &PatVec(ref rs, ref ri, ref re)) => {\n+            over(ls, rs, |l, r| is_pat_equal(cx, l, r, ignore_fn)) &&\n+                over(le, re, |l, r| is_pat_equal(cx, l, r, ignore_fn)) &&\n+                both(li, ri, |l, r| is_pat_equal(cx, l, r, ignore_fn))\n+        }\n+        (&PatWild, &PatWild) => true,\n+        _ => false,\n+    }\n+}\n+\n+/// Check whether two expressions are the same. This is different from the operator `==` on\n+/// expression as this operator would compare true equality with ID and span.\n+/// If `ignore_fn` is true, never consider as equal fonction calls.\n+///\n+/// Note that some expression kinds are not considered but could be added.\n+#[allow(cyclomatic_complexity)] // ok, it\u2019s a big function, but mostly one big match with simples cases\n+pub fn is_exp_equal(cx: &LateContext, left: &Expr, right: &Expr, ignore_fn: bool) -> bool {\n     if let (Some(l), Some(r)) = (constant(cx, left), constant(cx, right)) {\n         if l == r {\n             return true;\n         }\n     }\n+\n     match (&left.node, &right.node) {\n+        (&ExprAddrOf(ref lmut, ref le), &ExprAddrOf(ref rmut, ref re)) => {\n+            lmut == rmut && is_exp_equal(cx, le, re, ignore_fn)\n+        }\n+        (&ExprAgain(li), &ExprAgain(ri)) => {\n+            both(&li, &ri, |l, r| l.node.name.as_str() == r.node.name.as_str())\n+        }\n+        (&ExprAssign(ref ll, ref lr), &ExprAssign(ref rl, ref rr)) => {\n+            is_exp_equal(cx, ll, rl, ignore_fn) && is_exp_equal(cx, lr, rr, ignore_fn)\n+        }\n+        (&ExprAssignOp(ref lo, ref ll, ref lr), &ExprAssignOp(ref ro, ref rl, ref rr)) => {\n+            lo.node == ro.node && is_exp_equal(cx, ll, rl, ignore_fn) && is_exp_equal(cx, lr, rr, ignore_fn)\n+        }\n+        (&ExprBlock(ref l), &ExprBlock(ref r)) => {\n+            is_block_equal(cx, l, r, ignore_fn)\n+        }\n+        (&ExprBinary(lop, ref ll, ref lr), &ExprBinary(rop, ref rl, ref rr)) => {\n+            lop.node == rop.node && is_exp_equal(cx, ll, rl, ignore_fn) && is_exp_equal(cx, lr, rr, ignore_fn)\n+        }\n+        (&ExprBreak(li), &ExprBreak(ri)) => {\n+            both(&li, &ri, |l, r| l.node.name.as_str() == r.node.name.as_str())\n+        }\n+        (&ExprBox(ref l), &ExprBox(ref r)) => {\n+            is_exp_equal(cx, l, r, ignore_fn)\n+        }\n+        (&ExprCall(ref lfun, ref largs), &ExprCall(ref rfun, ref rargs)) => {\n+            !ignore_fn &&\n+                is_exp_equal(cx, lfun, rfun, ignore_fn) &&\n+                is_exps_equal(cx, largs, rargs, ignore_fn)\n+        }\n+        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => {\n+            is_exp_equal(cx, lx, rx, ignore_fn) && is_cast_ty_equal(lt, rt)\n+        }\n         (&ExprField(ref lfexp, ref lfident), &ExprField(ref rfexp, ref rfident)) => {\n-            lfident.node == rfident.node && is_exp_equal(cx, lfexp, rfexp)\n+            lfident.node == rfident.node && is_exp_equal(cx, lfexp, rfexp, ignore_fn)\n+        }\n+        (&ExprIndex(ref la, ref li), &ExprIndex(ref ra, ref ri)) => {\n+            is_exp_equal(cx, la, ra, ignore_fn) && is_exp_equal(cx, li, ri, ignore_fn)\n+        }\n+        (&ExprIf(ref lc, ref lt, ref le), &ExprIf(ref rc, ref rt, ref re)) => {\n+            is_exp_equal(cx, lc, rc, ignore_fn) &&\n+                is_block_equal(cx, lt, rt, ignore_fn) &&\n+                both(le, re, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n         }\n         (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n+        (&ExprMatch(ref le, ref la, ref ls), &ExprMatch(ref re, ref ra, ref rs)) => {\n+            ls == rs &&\n+                is_exp_equal(cx, le, re, ignore_fn) &&\n+                over(la, ra, |l, r| {\n+                    is_exp_equal(cx, &l.body, &r.body, ignore_fn) &&\n+                        both(&l.guard, &r.guard, |l, r| is_exp_equal(cx, l, r, ignore_fn)) &&\n+                        over(&l.pats, &r.pats, |l, r| is_pat_equal(cx, l, r, ignore_fn))\n+                })\n+        }\n+        (&ExprMethodCall(ref lname, ref ltys, ref largs), &ExprMethodCall(ref rname, ref rtys, ref rargs)) => {\n+            // TODO: tys\n+            !ignore_fn &&\n+                lname.node == rname.node &&\n+                ltys.is_empty() &&\n+                rtys.is_empty() &&\n+                is_exps_equal(cx, largs, rargs, ignore_fn)\n+        }\n+        (&ExprRange(ref lb, ref le), &ExprRange(ref rb, ref re)) => {\n+            both(lb, rb, |l, r| is_exp_equal(cx, l, r, ignore_fn)) &&\n+            both(le, re, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n+        }\n+        (&ExprRepeat(ref le, ref ll), &ExprRepeat(ref re, ref rl)) => {\n+            is_exp_equal(cx, le, re, ignore_fn) && is_exp_equal(cx, ll, rl, ignore_fn)\n+        }\n+        (&ExprRet(ref l), &ExprRet(ref r)) => {\n+            both(l, r, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n+        }\n         (&ExprPath(ref lqself, ref lsubpath), &ExprPath(ref rqself, ref rsubpath)) => {\n             both(lqself, rqself, is_qself_equal) && is_path_equal(lsubpath, rsubpath)\n         }\n-        (&ExprTup(ref ltup), &ExprTup(ref rtup)) => is_exps_equal(cx, ltup, rtup),\n-        (&ExprVec(ref l), &ExprVec(ref r)) => is_exps_equal(cx, l, r),\n-        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => is_exp_equal(cx, lx, rx) && is_cast_ty_equal(lt, rt),\n+        (&ExprTup(ref ltup), &ExprTup(ref rtup)) => is_exps_equal(cx, ltup, rtup, ignore_fn),\n+        (&ExprTupField(ref le, li), &ExprTupField(ref re, ri)) => {\n+            li.node == ri.node && is_exp_equal(cx, le, re, ignore_fn)\n+        }\n+        (&ExprUnary(lop, ref le), &ExprUnary(rop, ref re)) => {\n+            lop == rop && is_exp_equal(cx, le, re, ignore_fn)\n+        }\n+        (&ExprVec(ref l), &ExprVec(ref r)) => is_exps_equal(cx, l, r, ignore_fn),\n+        (&ExprWhile(ref lc, ref lb, ref ll), &ExprWhile(ref rc, ref rb, ref rl)) => {\n+            is_exp_equal(cx, lc, rc, ignore_fn) &&\n+                is_block_equal(cx, lb, rb, ignore_fn) &&\n+                both(ll, rl, |l, r| l.name.as_str() == r.name.as_str())\n+        }\n         _ => false,\n     }\n }\n \n-fn is_exps_equal(cx: &LateContext, left: &[P<Expr>], right: &[P<Expr>]) -> bool {\n-    over(left, right, |l, r| is_exp_equal(cx, l, r))\n+fn is_exps_equal(cx: &LateContext, left: &[P<Expr>], right: &[P<Expr>], ignore_fn: bool) -> bool {\n+    over(left, right, |l, r| is_exp_equal(cx, l, r, ignore_fn))\n }\n \n fn is_path_equal(left: &Path, right: &Path) -> bool {\n@@ -620,20 +774,22 @@ fn is_path_equal(left: &Path, right: &Path) -> bool {\n     left.global == right.global &&\n     over(&left.segments,\n          &right.segments,\n-         |l, r| l.identifier.name == r.identifier.name && l.parameters == r.parameters)\n+         |l, r| l.identifier.name.as_str() == r.identifier.name.as_str() && l.parameters == r.parameters)\n }\n \n fn is_qself_equal(left: &QSelf, right: &QSelf) -> bool {\n     left.ty.node == right.ty.node && left.position == right.position\n }\n \n-fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n+/// Check if two slices are equal as per `eq_fn`.\n+pub fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n     where F: FnMut(&X, &X) -> bool\n {\n     left.len() == right.len() && left.iter().zip(right).all(|(x, y)| eq_fn(x, y))\n }\n \n-fn both<X, F>(l: &Option<X>, r: &Option<X>, mut eq_fn: F) -> bool\n+/// Check if the two `Option`s are both `None` or some equal values as per `eq_fn`.\n+pub fn both<X, F>(l: &Option<X>, r: &Option<X>, mut eq_fn: F) -> bool\n     where F: FnMut(&X, &X) -> bool\n {\n     l.as_ref().map_or_else(|| r.is_none(), |x| r.as_ref().map_or(false, |y| eq_fn(x, y)))"}, {"sha": "0f57b619ccc83d27e874f8e3dcefd84bfe0f1958", "filename": "tests/compile-fail/copies.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -0,0 +1,135 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![allow(let_and_return)]\n+#![allow(needless_return)]\n+#![allow(unused_variables)]\n+#![deny(if_same_then_else)]\n+#![deny(ifs_same_cond)]\n+\n+fn foo() -> bool { unimplemented!() }\n+\n+fn if_same_then_else() -> &'static str {\n+    if true { //~ERROR this if has the same then and else blocks\n+        foo();\n+    }\n+    else {\n+        foo();\n+    }\n+\n+    if true {\n+        foo();\n+        foo();\n+    }\n+    else {\n+        foo();\n+    }\n+\n+    let _ = if true { //~ERROR this if has the same then and else blocks\n+        foo();\n+        42\n+    }\n+    else {\n+        foo();\n+        42\n+    };\n+\n+    if true {\n+        foo();\n+    }\n+\n+    let _ = if true { //~ERROR this if has the same then and else blocks\n+        42\n+    }\n+    else {\n+        42\n+    };\n+\n+    if true { //~ERROR this if has the same then and else blocks\n+        let bar = if true {\n+            42\n+        }\n+        else {\n+            43\n+        };\n+\n+        while foo() { break; }\n+        bar + 1;\n+    }\n+    else {\n+        let bar = if true {\n+            42\n+        }\n+        else {\n+            43\n+        };\n+\n+        while foo() { break; }\n+        bar + 1;\n+    }\n+\n+    if true { //~ERROR this if has the same then and else blocks\n+        match 42 {\n+            42 => (),\n+            a if a > 0 => (),\n+            10...15 => (),\n+            _ => (),\n+        }\n+    }\n+    else {\n+        match 42 {\n+            42 => (),\n+            a if a > 0 => (),\n+            10...15 => (),\n+            _ => (),\n+        }\n+    }\n+\n+    if true { //~ERROR this if has the same then and else blocks\n+        if let Some(a) = Some(42) {}\n+    }\n+    else {\n+        if let Some(a) = Some(42) {}\n+    }\n+\n+    if true { //~ERROR this if has the same then and else blocks\n+        let foo = \"\";\n+        return &foo[0..];\n+    }\n+    else {\n+        let foo = \"\";\n+        return &foo[0..];\n+    }\n+}\n+\n+fn ifs_same_cond() {\n+    let a = 0;\n+\n+    if a == 1 {\n+    }\n+    else if a == 1 { //~ERROR this if has the same condition as a previous if\n+    }\n+\n+    if 2*a == 1 {\n+    }\n+    else if 2*a == 2 {\n+    }\n+    else if 2*a == 1 { //~ERROR this if has the same condition as a previous if\n+    }\n+    else if a == 1 {\n+    }\n+\n+    let mut v = vec![1];\n+    if v.pop() == None { // ok, functions\n+    }\n+    else if v.pop() == None {\n+    }\n+\n+    if v.len() == 42 { // ok, functions\n+    }\n+    else if v.len() == 42 {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7be5ef11ce6a65d5185da4a3fe75163c45924eec", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -19,9 +19,9 @@ fn main() {\n     // unary and binary operators\n     (-(2) < -(2));  //~ERROR equal expressions\n     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n-          //~^ ERROR equal expressions\n-                    //~^^ ERROR equal expressions\n-                               //~^^^ ERROR equal expressions\n+          //~^ ERROR equal expressions as operands to `==`\n+                    //~^^ ERROR equal expressions as operands to `&`\n+                               //~^^^ ERROR equal expressions as operands to `&`\n     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR equal expressions\n \n     // various other things\n@@ -31,5 +31,16 @@ fn main() {\n \n     // const folding\n     1 + 1 == 2; //~ERROR equal expressions\n-    1 - 1 == 0; //~ERROR equal expressions\n+    1 - 1 == 0; //~ERROR equal expressions as operands to `==`\n+                //~^ ERROR equal expressions as operands to `-`\n+\n+    1 - 1; //~ERROR equal expressions\n+    1 / 1; //~ERROR equal expressions\n+    true && true; //~ERROR equal expressions\n+    true || true; //~ERROR equal expressions\n+\n+    let mut a = vec![1];\n+    a == a; //~ERROR equal expressions\n+    2*a.len() == 2*a.len(); // ok, functions\n+    a.pop() == a.pop(); // ok, functions\n }"}, {"sha": "c1141e0b460f2c03d23ebbaea5cb6cb93136bfc4", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -5,6 +5,7 @@ const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n+#[allow(eq_op)]\n #[deny(identity_op)]\n fn main() {\n     let x = 0;"}, {"sha": "c2ad24bc4eeed63a9a17aa63b109e5948c1b21d3", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#[allow(if_same_then_else)]\n #[deny(needless_bool)]\n fn main() {\n     let x = true;"}, {"sha": "c422e83873b09b855f5c515cbc2ce3e552fc619a", "filename": "tests/compile-fail/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c212dc301e80cd3ec7d21dce2b4b24140ae0789/tests%2Fcompile-fail%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzero_div_zero.rs?ref=2c212dc301e80cd3ec7d21dce2b4b24140ae0789", "patch": "@@ -5,9 +5,13 @@\n #[deny(zero_divided_by_zero)]\n fn main() {\n     let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let zero = 0.0;\n     let other_zero = 0.0;\n     let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants."}]}