{"sha": "340b91e2ffdd884be5c260144305b518e5a22a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MGI5MWUyZmZkZDg4NGJlNWMyNjAxNDQzMDViNTE4ZTVhMjJhOWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T14:12:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:17:23Z"}, "message": "rustc: remove `has_parent` from `hir::Upvar`.", "tree": {"sha": "24ba9d467866742f6aecdc7237bc4db06c9696cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ba9d467866742f6aecdc7237bc4db06c9696cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/340b91e2ffdd884be5c260144305b518e5a22a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/340b91e2ffdd884be5c260144305b518e5a22a9b", "html_url": "https://github.com/rust-lang/rust/commit/340b91e2ffdd884be5c260144305b518e5a22a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/340b91e2ffdd884be5c260144305b518e5a22a9b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "html_url": "https://github.com/rust-lang/rust/commit/a0ca2a2deb8f46fab5add2e35d51a64e712890fb"}], "stats": {"total": 41, "additions": 7, "deletions": 34}, "files": [{"sha": "38ef4d3dbd62697df8c7a6d952a7a34de1c56dc4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=340b91e2ffdd884be5c260144305b518e5a22a9b", "patch": "@@ -2495,9 +2495,6 @@ impl ForeignItemKind {\n /// A variable captured by a closure.\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Upvar {\n-    /// Whether this is not a direct capture (comes from parent closure).\n-    pub has_parent: bool,\n-\n     // First span where it is accessed (there can be multiple).\n     pub span: Span\n }"}, {"sha": "477f5ceff6198c8f007a71902d66fbaa407f91bc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=340b91e2ffdd884be5c260144305b518e5a22a9b", "patch": "@@ -940,8 +940,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n                 let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.hir_id,\n                                                                    fn_decl_span,\n-                                                                   var_id,\n-                                                                   upvar));\n+                                                                   var_id));\n                 match upvar_capture {\n                     ty::UpvarCapture::ByValue => {\n                         let mode = copy_or_move(&self.mc,\n@@ -966,12 +965,11 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     fn cat_captured_var(&mut self,\n                         closure_hir_id: hir::HirId,\n                         closure_span: Span,\n-                        var_id: hir::HirId,\n-                        upvar: &hir::Upvar)\n+                        var_id: hir::HirId)\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let res = if upvar.has_parent {\n+        let res = if self.mc.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)) {\n             Res::Upvar(var_id)\n         } else {\n             Res::Local(var_id)"}, {"sha": "be2f533ced0a8678169aedbe72dca77a58a09cd1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=340b91e2ffdd884be5c260144305b518e5a22a9b", "patch": "@@ -99,7 +99,7 @@ use self::VarKind::*;\n \n use crate::hir::def::*;\n use crate::hir::Node;\n-use crate::ty::{self, DefIdTree, TyCtxt};\n+use crate::ty::{self, TyCtxt};\n use crate::ty::query::Providers;\n use crate::lint;\n use crate::util::nodemap::{HirIdMap, HirIdSet};\n@@ -493,12 +493,8 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n             let parent_upvars = ir.tcx.upvars(ir.body_owner);\n             call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {\n-                if upvar.has_parent {\n-                    assert_eq!(ir.body_owner, ir.tcx.parent(closure_def_id).unwrap());\n-                }\n                 let has_parent = parent_upvars\n                     .map_or(false, |upvars| upvars.contains_key(&var_id));\n-                assert_eq!(upvar.has_parent, has_parent);\n                 if !has_parent {\n                     let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n                     Some(CaptureInfo { ln: upvar_ln, var_hid: var_id })"}, {"sha": "181313f94361af2d0b8f6798e3ac4c6894b89b55", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=340b91e2ffdd884be5c260144305b518e5a22a9b", "patch": "@@ -6,7 +6,7 @@ use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n-use rustc::ty::{self, AdtKind, DefIdTree, Ty};\n+use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::hir;\n@@ -515,7 +515,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let upvars = cx.tcx.upvars(def_id).iter()\n                 .flat_map(|upvars| upvars.iter())\n                 .zip(substs.upvar_tys(def_id, cx.tcx))\n-                .map(|((&var_hir_id, upvar), ty)| capture_upvar(cx, expr, var_hir_id, upvar, ty))\n+                .map(|((&var_hir_id, _), ty)| capture_upvar(cx, expr, var_hir_id, ty))\n                 .collect();\n             ExprKind::Closure {\n                 closure_id: def_id,\n@@ -1192,7 +1192,6 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    closure_expr: &'tcx hir::Expr,\n                                    var_hir_id: hir::HirId,\n-                                   upvar: &hir::Upvar,\n                                    upvar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n     let upvar_id = ty::UpvarId {\n@@ -1202,15 +1201,6 @@ fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n     let var_ty = cx.tables().node_type(var_hir_id);\n-    if upvar.has_parent {\n-        let closure_def_id = upvar_id.closure_expr_id.to_def_id();\n-        assert_eq!(cx.body_owner, cx.tcx.parent(closure_def_id).unwrap());\n-    }\n-    assert_eq!(\n-        upvar.has_parent,\n-        cx.tables().upvar_list.get(&cx.body_owner)\n-            .map_or(false, |upvars| upvars.contains_key(&var_hir_id)),\n-    );\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,"}, {"sha": "c8ec7367edccd8c127436bca0892be90498901a0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340b91e2ffdd884be5c260144305b518e5a22a9b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=340b91e2ffdd884be5c260144305b518e5a22a9b", "patch": "@@ -4049,20 +4049,12 @@ impl<'a> Resolver<'a> {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n-                            let has_parent = match res {\n-                                Res::Upvar(..) => true,\n-                                _ => false,\n-                            };\n                             res = Res::Upvar(var_id);\n-\n                             match self.upvars.entry(function_id).or_default().entry(var_id) {\n                                 indexmap::map::Entry::Occupied(_) => continue,\n                                 indexmap::map::Entry::Vacant(entry) => {\n                                     if record_used {\n-                                        entry.insert(Upvar {\n-                                            has_parent,\n-                                            span,\n-                                        });\n+                                        entry.insert(Upvar { span });\n                                     }\n                                 }\n                             }"}]}