{"sha": "82beeabf54b830f9df64c2837e5ab2068633bd5d", "node_id": "C_kwDOAAsO6NoAKDgyYmVlYWJmNTRiODMwZjlkZjY0YzI4MzdlNWFiMjA2ODYzM2JkNWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-26T18:59:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-26T18:59:40Z"}, "message": "Rollup merge of #96033 - yaahc:expect-elaboration, r=scottmcm\n\nAdd section on common message styles for Result::expect\n\nBased on a question from https://github.com/rust-lang/project-error-handling/issues/50#issuecomment-1092339937\n\n~~One thing I haven't decided on yet, should I duplicate this section on `Option::expect`, link to this section, or move it somewhere else and link to that location from both docs?~~: I ended up moving the section to `std::error` and referencing it from both `Result::expect` and `Option::expect`'s docs.\n\nI think this section, when combined with the similar update I made on [`std::panic!`](https://doc.rust-lang.org/nightly/std/macro.panic.html#when-to-use-panic-vs-result) implies that we should possibly more aggressively encourage and support the \"expect as precondition\" style described in this section. The consensus among the libs team seems to be that panic should be used for bugs, not expected potential failure modes. The \"expect as error message\" style seems to align better with the panic for unrecoverable errors style where they're seen as normal errors where the only difference is a desire to kill the current execution unit (aka erlang style error handling). I'm wondering if we should be providing a panic hook similar to `human-panic` or more strongly recommending the \"expect as precondition\" style of expect message.", "tree": {"sha": "2f311e1ea9bd6b74bdea598501054d538c82ab8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f311e1ea9bd6b74bdea598501054d538c82ab8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82beeabf54b830f9df64c2837e5ab2068633bd5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJij84cCRBK7hj4Ov3rIwAAEEMIAKyCvbbzhfJHQ62kTK3fqB2a\nU8zL/9z8dkDXNk/Gul6L+b1e1POv1ibvk8+KRIpF+GXp6/zAERfzkjcxy0pwEwNV\nPpftX1iSGTDo8RVtAxV166ExowQepFaW6SAS+02qam7SMxXVuaQUU4dLRNx/jqYo\nh9Ons005EY14PSd/AqMKMOq2KqPZkyr0Xbhvp+EPWTQr6eiNvbPPOBTMy+bka7IT\nibo41aUU1zuOnDXTwjecm1FtFbWW0UQzL5YRtZd5sdN8F4WXHL8K3UJ/vWAASgd6\n/mbz2WtrPmrnDmh4boAf5rXI2u4lXV0l0UoEodZ3zxu/aBicIASKo619Nq0LxQU=\n=7e1E\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f311e1ea9bd6b74bdea598501054d538c82ab8c\nparent 1851f0802e148bb7fa0bfd7dabcb7397bf371b0b\nparent ef879c680e4a4d7a1060b27e1686bf031067a587\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1653591580 +0200\ncommitter GitHub <noreply@github.com> 1653591580 +0200\n\nRollup merge of #96033 - yaahc:expect-elaboration, r=scottmcm\n\nAdd section on common message styles for Result::expect\n\nBased on a question from https://github.com/rust-lang/project-error-handling/issues/50#issuecomment-1092339937\n\n~~One thing I haven't decided on yet, should I duplicate this section on `Option::expect`, link to this section, or move it somewhere else and link to that location from both docs?~~: I ended up moving the section to `std::error` and referencing it from both `Result::expect` and `Option::expect`'s docs.\n\nI think this section, when combined with the similar update I made on [`std::panic!`](https://doc.rust-lang.org/nightly/std/macro.panic.html#when-to-use-panic-vs-result) implies that we should possibly more aggressively encourage and support the \"expect as precondition\" style described in this section. The consensus among the libs team seems to be that panic should be used for bugs, not expected potential failure modes. The \"expect as error message\" style seems to align better with the panic for unrecoverable errors style where they're seen as normal errors where the only difference is a desire to kill the current execution unit (aka erlang style error handling). I'm wondering if we should be providing a panic hook similar to `human-panic` or more strongly recommending the \"expect as precondition\" style of expect message.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82beeabf54b830f9df64c2837e5ab2068633bd5d", "html_url": "https://github.com/rust-lang/rust/commit/82beeabf54b830f9df64c2837e5ab2068633bd5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82beeabf54b830f9df64c2837e5ab2068633bd5d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1851f0802e148bb7fa0bfd7dabcb7397bf371b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1851f0802e148bb7fa0bfd7dabcb7397bf371b0b", "html_url": "https://github.com/rust-lang/rust/commit/1851f0802e148bb7fa0bfd7dabcb7397bf371b0b"}, {"sha": "ef879c680e4a4d7a1060b27e1686bf031067a587", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef879c680e4a4d7a1060b27e1686bf031067a587", "html_url": "https://github.com/rust-lang/rust/commit/ef879c680e4a4d7a1060b27e1686bf031067a587"}], "stats": {"total": 178, "additions": 177, "deletions": 1}, "files": [{"sha": "28ea45ed235dc995df37637a5c3f249e51fab9dd", "filename": "library/core/src/option.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=82beeabf54b830f9df64c2837e5ab2068633bd5d", "patch": "@@ -708,6 +708,26 @@ impl<T> Option<T> {\n     /// let x: Option<&str> = None;\n     /// x.expect(\"fruits are healthy\"); // panics with `fruits are healthy`\n     /// ```\n+    ///\n+    /// # Recommended Message Style\n+    ///\n+    /// We recommend that `expect` messages are used to describe the reason you\n+    /// _expect_ the `Option` should be `Some`.\n+    ///\n+    /// ```should_panic\n+    /// # let slice: &[u8] = &[];\n+    /// let item = slice.get(0)\n+    ///     .expect(\"slice should not be empty\");\n+    /// ```\n+    ///\n+    /// **Hint**: If you're having trouble remembering how to phrase expect\n+    /// error messages remember to focus on the word \"should\" as in \"env\n+    /// variable should be set by blah\" or \"the given binary should be available\n+    /// and executable by the current user\".\n+    ///\n+    /// For more detail on expect message styles and the reasoning behind our\n+    /// recommendation please refer to the section on [\"Common Message\n+    /// Styles\"](../../std/error/index.html#common-message-styles) in the [`std::error`](../../std/error/index.html) module docs.\n     #[inline]\n     #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c4dc34fff97fab5f55c8b6d6447d4759d9501de0", "filename": "library/core/src/result.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=82beeabf54b830f9df64c2837e5ab2068633bd5d", "patch": "@@ -1023,6 +1023,26 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n+    ///\n+    /// # Recommended Message Style\n+    ///\n+    /// We recommend that `expect` messages are used to describe the reason you\n+    /// _expect_ the `Result` should be `Ok`.\n+    ///\n+    /// ```should_panic\n+    /// let path = std::env::var(\"IMPORTANT_PATH\")\n+    ///     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n+    /// ```\n+    ///\n+    /// **Hint**: If you're having trouble remembering how to phrase expect\n+    /// error messages remember to focus on the word \"should\" as in \"env\n+    /// variable should be set by blah\" or \"the given binary should be available\n+    /// and executable by the current user\".\n+    ///\n+    /// For more detail on expect message styles and the reasoning behind our recommendation please\n+    /// refer to the section on [\"Common Message\n+    /// Styles\"](../../std/error/index.html#common-message-styles) in the\n+    /// [`std::error`](../../std/error/index.html) module docs.\n     #[inline]\n     #[track_caller]\n     #[stable(feature = \"result_expect\", since = \"1.4.0\")]"}, {"sha": "c2d30616019c718899ef692f0eb2bb8218cb2fa2", "filename": "library/std/src/error.rs", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82beeabf54b830f9df64c2837e5ab2068633bd5d/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=82beeabf54b830f9df64c2837e5ab2068633bd5d", "patch": "@@ -1,4 +1,140 @@\n-//! Traits for working with Errors.\n+//! Interfaces for working with Errors.\n+//!\n+//! # Error Handling In Rust\n+//!\n+//! The Rust language provides two complementary systems for constructing /\n+//! representing, reporting, propagating, reacting to, and discarding errors.\n+//! These responsibilities are collectively known as \"error handling.\" The\n+//! components of the first system, the panic runtime and interfaces, are most\n+//! commonly used to represent bugs that have been detected in your program. The\n+//! components of the second system, `Result`, the error traits, and user\n+//! defined types, are used to represent anticipated runtime failure modes of\n+//! your program.\n+//!\n+//! ## The Panic Interfaces\n+//!\n+//! The following are the primary interfaces of the panic system and the\n+//! responsibilities they cover:\n+//!\n+//! * [`panic!`] and [`panic_any`] (Constructing, Propagated automatically)\n+//! * [`PanicInfo`] (Reporting)\n+//! * [`set_hook`], [`take_hook`], and [`#[panic_handler]`][panic-handler] (Reporting)\n+//! * [`catch_unwind`] and [`resume_unwind`] (Discarding, Propagating)\n+//!\n+//! The following are the primary interfaces of the error system and the\n+//! responsibilities they cover:\n+//!\n+//! * [`Result`] (Propagating, Reacting)\n+//! * The [`Error`] trait (Reporting)\n+//! * User defined types (Constructing / Representing)\n+//! * [`match`] and [`downcast`] (Reacting)\n+//! * The question mark operator ([`?`]) (Propagating)\n+//! * The partially stable [`Try`] traits (Propagating, Constructing)\n+//! * [`Termination`] (Reporting)\n+//!\n+//! ## Converting Errors into Panics\n+//!\n+//! The panic and error systems are not entirely distinct. Often times errors\n+//! that are anticipated runtime failures in an API might instead represent bugs\n+//! to a caller. For these situations the standard library provides APIs for\n+//! constructing panics with an `Error` as it's source.\n+//!\n+//! * [`Result::unwrap`]\n+//! * [`Result::expect`]\n+//!\n+//! These functions are equivalent, they either return the inner value if the\n+//! `Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n+//! as the source. The only difference between them is that with `expect` you\n+//! provide a panic error message to be printed alongside the source, whereas\n+//! `unwrap` has a default message indicating only that you unwraped an `Err`.\n+//!\n+//! Of the two, `expect` is generally preferred since its `msg` field allows you\n+//! to convey your intent and assumptions which makes tracking down the source\n+//! of a panic easier. `unwrap` on the other hand can still be a good fit in\n+//! situations where you can trivially show that a piece of code will never\n+//! panick, such as `\"127.0.0.1\".parse::<std::net::IpAddr>().unwrap()` or early\n+//! prototyping.\n+//!\n+//! # Common Message Styles\n+//!\n+//! There are two common styles for how people word `expect` messages. Using\n+//! the message to present information to users encountering a panic\n+//! (\"expect as error message\") or using the message to present information\n+//! to developers debugging the panic (\"expect as precondition\").\n+//!\n+//! In the former case the expect message is used to describe the error that\n+//! has occurred which is considered a bug. Consider the following example:\n+//!\n+//! ```should_panic\n+//! // Read environment variable, panic if it is not present\n+//! let path = std::env::var(\"IMPORTANT_PATH\").unwrap();\n+//! ```\n+//!\n+//! In the \"expect as error message\" style we would use expect to describe\n+//! that the environment variable was not set when it should have been:\n+//!\n+//! ```should_panic\n+//! let path = std::env::var(\"IMPORTANT_PATH\")\n+//!     .expect(\"env variable `IMPORTANT_PATH` is not set\");\n+//! ```\n+//!\n+//! In the \"expect as precondition\" style, we would instead describe the\n+//! reason we _expect_ the `Result` should be `Ok`. With this style we would\n+//! prefer to write:\n+//!\n+//! ```should_panic\n+//! let path = std::env::var(\"IMPORTANT_PATH\")\n+//!     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n+//! ```\n+//!\n+//! The \"expect as error message\" style does not work as well with the\n+//! default output of the std panic hooks, and often ends up repeating\n+//! information that is already communicated by the source error being\n+//! unwrapped:\n+//!\n+//! ```text\n+//! thread 'main' panicked at 'env variable `IMPORTANT_PATH` is not set: NotPresent', src/main.rs:4:6\n+//! ```\n+//!\n+//! In this example we end up mentioning that an env variable is not set,\n+//! followed by our source message that says the env is not present, the\n+//! only additional information we're communicating is the name of the\n+//! environment variable being checked.\n+//!\n+//! The \"expect as precondition\" style instead focuses on source code\n+//! readability, making it easier to understand what must have gone wrong in\n+//! situations where panics are being used to represent bugs exclusively.\n+//! Also, by framing our expect in terms of what \"SHOULD\" have happened to\n+//! prevent the source error, we end up introducing new information that is\n+//! independent from our source error.\n+//!\n+//! ```text\n+//! thread 'main' panicked at 'env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`: NotPresent', src/main.rs:4:6\n+//! ```\n+//!\n+//! In this example we are communicating not only the name of the\n+//! environment variable that should have been set, but also an explanation\n+//! for why it should have been set, and we let the source error display as\n+//! a clear contradiction to our expectation.\n+//!\n+//! **Hint**: If you're having trouble remembering how to phrase\n+//! expect-as-precondition style error messages remember to focus on the word\n+//! \"should\" as in \"env variable should be set by blah\" or \"the given binary\n+//! should be available and executable by the current user\".\n+//!\n+//! [`panic_any`]: crate::panic::panic_any\n+//! [`PanicInfo`]: crate::panic::PanicInfo\n+//! [`catch_unwind`]: crate::panic::catch_unwind\n+//! [`resume_unwind`]: crate::panic::resume_unwind\n+//! [`downcast`]: crate::error::Error\n+//! [`Termination`]: crate::process::Termination\n+//! [`Try`]: crate::ops::Try\n+//! [panic hook]: crate::panic::set_hook\n+//! [`set_hook`]: crate::panic::set_hook\n+//! [`take_hook`]: crate::panic::take_hook\n+//! [panic-handler]: <https://doc.rust-lang.org/nomicon/panic-handler.html>\n+//! [`match`]: ../../std/keyword.match.html\n+//! [`?`]: ../../std/result/index.html#the-question-mark-operator-\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}