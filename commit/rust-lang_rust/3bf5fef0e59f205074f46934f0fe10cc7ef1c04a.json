{"sha": "3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjVmZWYwZTU5ZjIwNTA3NGY0NjkzNGYwZmUxMGNjN2VmMWMwNGE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-29T21:38:33Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-29T21:38:33Z"}, "message": "Refactor syntax exts some. Don't ever emit bare vectors.", "tree": {"sha": "b10b4572daa4a4ff10b72eb1788c7ffb221bd8ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b10b4572daa4a4ff10b72eb1788c7ffb221bd8ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "html_url": "https://github.com/rust-lang/rust/commit/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa43b2599b353dc3e26f5ecc2aef30bc1883145", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa43b2599b353dc3e26f5ecc2aef30bc1883145", "html_url": "https://github.com/rust-lang/rust/commit/7aa43b2599b353dc3e26f5ecc2aef30bc1883145"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "312de4959d0aa87f9a6ebd1ceed291c81e855461", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "patch": "@@ -173,17 +173,6 @@ fn expr_to_ident(cx: ext_ctxt, expr: @ast::expr, error: str) -> ast::ident {\n     }\n }\n \n-fn make_new_lit(cx: ext_ctxt, sp: codemap::span, lit: ast::lit_) ->\n-   @ast::expr {\n-    let sp_lit = @{node: lit, span: sp};\n-    ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n-}\n-\n-fn make_new_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n-    @ast::expr {\n-    ret @{id: cx.next_id(), node: expr, span: sp};\n-}\n-\n fn get_mac_args_no_max(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                        min: uint, name: str) -> [@ast::expr]/~ {\n     ret get_mac_args(cx, sp, arg, min, none, name);"}, {"sha": "a497cede61962472be3eda88974a9ccdd538bc57", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "patch": "@@ -1,6 +1,11 @@\n import codemap::span;\n import base::ext_ctxt;\n \n+fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n+    @ast::expr {\n+    ret @{id: cx.next_id(), node: expr, span: sp};\n+}\n+\n fn mk_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {\n     let sp_lit = @{node: lit, span: sp};\n     ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n@@ -21,26 +26,23 @@ fn mk_binary(cx: ext_ctxt, sp: span, op: ast::binop,\n              lhs: @ast::expr, rhs: @ast::expr)\n    -> @ast::expr {\n     cx.next_id(); // see ast_util::op_expr_callee_id\n-    let binexpr = ast::expr_binary(op, lhs, rhs);\n-    ret @{id: cx.next_id(), node: binexpr, span: sp};\n+    mk_expr(cx, sp, ast::expr_binary(op, lhs, rhs))\n }\n fn mk_unary(cx: ext_ctxt, sp: span, op: ast::unop, e: @ast::expr)\n     -> @ast::expr {\n     cx.next_id(); // see ast_util::op_expr_callee_id\n-    let expr = ast::expr_unary(op, e);\n-    ret @{id: cx.next_id(), node: expr, span: sp};\n+    mk_expr(cx, sp, ast::expr_unary(op, e))\n }\n fn mk_path(cx: ext_ctxt, sp: span, idents: [ast::ident]/~) ->\n     @ast::expr {\n     let path = @{span: sp, global: false, idents: idents,\n                  rp: none, types: []/~};\n     let pathexpr = ast::expr_path(path);\n-    ret @{id: cx.next_id(), node: pathexpr, span: sp};\n+    mk_expr(cx, sp, pathexpr)\n }\n fn mk_access_(cx: ext_ctxt, sp: span, p: @ast::expr, m: ast::ident)\n     -> @ast::expr {\n-    let expr = ast::expr_field(p, m, []/~);\n-    ret @{id: cx.next_id(), node: expr, span: sp};\n+    mk_expr(cx, sp, ast::expr_field(p, m, []/~))\n }\n fn mk_access(cx: ext_ctxt, sp: span, p: [ast::ident]/~, m: ast::ident)\n     -> @ast::expr {\n@@ -49,32 +51,30 @@ fn mk_access(cx: ext_ctxt, sp: span, p: [ast::ident]/~, m: ast::ident)\n }\n fn mk_call_(cx: ext_ctxt, sp: span, fn_expr: @ast::expr,\n             args: [@ast::expr]/~) -> @ast::expr {\n-    let callexpr = ast::expr_call(fn_expr, args, false);\n-    ret @{id: cx.next_id(), node: callexpr, span: sp};\n+    mk_expr(cx, sp, ast::expr_call(fn_expr, args, false))\n }\n fn mk_call(cx: ext_ctxt, sp: span, fn_path: [ast::ident]/~,\n              args: [@ast::expr]/~) -> @ast::expr {\n     let pathexpr = mk_path(cx, sp, fn_path);\n     ret mk_call_(cx, sp, pathexpr, args);\n }\n // e = expr, t = type\n-fn mk_vec_e(cx: ext_ctxt, sp: span, exprs: [@ast::expr]/~) ->\n+fn mk_base_vec_e(cx: ext_ctxt, sp: span, exprs: [@ast::expr]/~) ->\n    @ast::expr {\n     let vecexpr = ast::expr_vec(exprs, ast::m_imm);\n     ret @{id: cx.next_id(), node: vecexpr, span: sp};\n }\n fn mk_vstore_e(cx: ext_ctxt, sp: span, expr: @ast::expr, vst: ast::vstore) ->\n    @ast::expr {\n-    let vstoreexpr = ast::expr_vstore(expr, vst);\n-    ret @{id: cx.next_id(), node: vstoreexpr, span: sp};\n+    mk_expr(cx, sp, ast::expr_vstore(expr, vst))\n }\n fn mk_uniq_vec_e(cx: ext_ctxt, sp: span, exprs: [@ast::expr]/~) ->\n    @ast::expr {\n-    mk_vstore_e(cx, sp, mk_vec_e(cx, sp, exprs), ast::vstore_uniq)\n+    mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs), ast::vstore_uniq)\n }\n fn mk_fixed_vec_e(cx: ext_ctxt, sp: span, exprs: [@ast::expr]/~) ->\n    @ast::expr {\n-    mk_vstore_e(cx, sp, mk_vec_e(cx, sp, exprs), ast::vstore_fixed(none))\n+    mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs), ast::vstore_fixed(none))\n }\n \n fn mk_rec_e(cx: ext_ctxt, sp: span,\n@@ -89,6 +89,6 @@ fn mk_rec_e(cx: ext_ctxt, sp: span,\n         vec::push(astfields, astfield);\n     }\n     let recexpr = ast::expr_rec(astfields, option::none::<@ast::expr>);\n-    ret @{id: cx.next_id(), node: recexpr, span: sp};\n+    mk_expr(cx, sp, recexpr)\n }\n "}, {"sha": "b8aa69b773555c0474f65c51cc3ec9ecb4c004ad", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "patch": "@@ -5,6 +5,7 @@\n  * interface.\n  */\n import base::*;\n+import build::mk_lit;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n@@ -22,7 +23,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n }\n \n fn make_new_str(cx: ext_ctxt, sp: codemap::span, +s: str) -> @ast::expr {\n-    ret make_new_lit(cx, sp, ast::lit_str(@s));\n+    ret mk_lit(cx, sp, ast::lit_str(@s));\n }\n //\n // Local Variables:"}, {"sha": "2cff86d98a7e879a34a3c3b767af029d944d7697", "filename": "src/libsyntax/ext/ident_to_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fident_to_str.rs?ref=3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "patch": "@@ -1,11 +1,12 @@\n import base::*;\n+import build::mk_lit;\n import option;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"ident_to_str\");\n \n-    ret make_new_lit(cx, sp,\n-                     ast::lit_str(expr_to_ident(cx, args[0u],\n-                                                \"expected an ident\")));\n+    ret mk_lit(cx, sp,\n+               ast::lit_str(expr_to_ident(cx, args[0u],\n+                                          \"expected an ident\")));\n }"}, {"sha": "d8afdb7534aef51aea048da661ea869e69b34f14", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf5fef0e59f205074f46934f0fe10cc7ef1c04a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=3bf5fef0e59f205074f46934f0fe10cc7ef1c04a", "patch": "@@ -2,6 +2,7 @@ import base::*;\n import ast;\n import codemap::span;\n import print::pprust;\n+import build::{mk_lit,mk_uniq_vec_e};\n \n export expand_line;\n export expand_col;\n@@ -17,15 +18,15 @@ fn expand_line(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"line\");\n     let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret make_new_lit(cx, sp, ast::lit_uint(loc.line as u64, ast::ty_u));\n+    ret mk_lit(cx, sp, ast::lit_uint(loc.line as u64, ast::ty_u));\n }\n \n /* #col(): expands to the current column number */\n fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n               _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"col\");\n     let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret make_new_lit(cx, sp, ast::lit_uint(loc.col as u64, ast::ty_u));\n+    ret mk_lit(cx, sp, ast::lit_uint(loc.col as u64, ast::ty_u));\n }\n \n /* #file(): expands to the current filename */\n@@ -36,19 +37,19 @@ fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n     let { file: @{ name: filename, _ }, _ } =\n         codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret make_new_lit(cx, sp, ast::lit_str(@filename));\n+    ret mk_lit(cx, sp, ast::lit_str(@filename));\n }\n \n fn expand_stringify(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                     _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"stringify\");\n-    ret make_new_lit(cx, sp, ast::lit_str(@pprust::expr_to_str(args[0])));\n+    ret mk_lit(cx, sp, ast::lit_str(@pprust::expr_to_str(args[0])));\n }\n \n fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n     -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n-    ret make_new_lit(cx, sp, ast::lit_str(\n+    ret mk_lit(cx, sp, ast::lit_str(\n         @str::connect(cx.mod_path().map({|x|*x}), \"::\")));\n }\n \n@@ -76,7 +77,7 @@ fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n       }\n     }\n \n-    ret make_new_lit(cx, sp, ast::lit_str(@result::unwrap(res)));\n+    ret mk_lit(cx, sp, ast::lit_str(@result::unwrap(res)));\n }\n \n fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n@@ -88,9 +89,9 @@ fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     alt io::read_whole_file(res_rel_file(cx, sp, file)) {\n       result::ok(src) {\n         let u8_exprs = vec::map(src) { |char: u8|\n-            make_new_lit(cx, sp, ast::lit_uint(char as u64, ast::ty_u8))\n+            mk_lit(cx, sp, ast::lit_uint(char as u64, ast::ty_u8))\n         };\n-        ret make_new_expr(cx, sp, ast::expr_vec(u8_exprs, ast::m_imm));\n+        ret mk_uniq_vec_e(cx, sp, u8_exprs);\n       }\n       result::err(e) {\n         cx.parse_sess().span_diagnostic.handler().fatal(e)"}]}