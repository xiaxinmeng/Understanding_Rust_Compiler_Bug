{"sha": "ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGFiNmI3ZWU3MGZiMzlmZTExMDY5ZWFkM2U3ZWY2MmU5MmZlOWU=", "commit": {"author": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-20T08:08:58Z"}, "committer": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-20T08:55:35Z"}, "message": "cargo: Use system-mode by default except \"install\"\n\nI think it is confused that you need to \"cargo init\"\nand \"cargo sync\" every time to setup local-level .cargo", "tree": {"sha": "8f93eff3e9881f5434e9a6a98541c7c5ada7dbff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f93eff3e9881f5434e9a6a98541c7c5ada7dbff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "html_url": "https://github.com/rust-lang/rust/commit/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e/comments", "author": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e63bc5d8293d38cb3be7cb07d6267c9db385062", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e63bc5d8293d38cb3be7cb07d6267c9db385062", "html_url": "https://github.com/rust-lang/rust/commit/2e63bc5d8293d38cb3be7cb07d6267c9db385062"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "1d95c929b17b32af4ac068198722b39eddf545bd", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "patch": "@@ -346,39 +346,35 @@ fn build_cargo_options(argv: [str]) -> options {\n     };\n \n     let test = opt_present(match, \"test\");\n-    let mode = if opt_present(match, \"G\") {\n-        if opt_present(match, \"mode\") { fail \"--mode and -G both provided\"; }\n-        if opt_present(match, \"g\") { fail \"-G and -g both provided\"; }\n-        system_mode\n-    } else if opt_present(match, \"g\") {\n-        if opt_present(match, \"mode\") { fail \"--mode and -g both provided\"; }\n-        if opt_present(match, \"G\") { fail \"-G and -g both provided\"; }\n-        user_mode\n-    } else if opt_present(match, \"mode\") {\n-        alt getopts::opt_str(match, \"mode\") {\n-            \"system\" { system_mode }\n-            \"user\" { user_mode }\n-            \"local\" { local_mode }\n-            _ { fail \"argument to `mode` must be one of `system`\" +\n-                \", `user`, or `normal`\";\n+    let G = opt_present(match, \"G\");\n+    let g = opt_present(match, \"g\");\n+    let m = opt_present(match, \"mode\");\n+    let is_install = vec::len(match.free) > 1u && match.free[1] == \"install\";\n+\n+    if G && g { fail \"-G and -g both provided\"; }\n+    if g && m { fail \"--mode and -g both provided\"; }\n+    if G && m { fail \"--mode and -G both provided\"; }\n+\n+    let mode = if is_install {\n+        if G { system_mode }\n+        else if g { user_mode }\n+        else if m {\n+            alt getopts::opt_str(match, \"mode\") {\n+                \"system\" { system_mode }\n+                \"user\" { user_mode }\n+                \"local\" { local_mode }\n+                _ { fail \"argument to `mode` must be one of `system`\" +\n+                    \", `user`, or `local`\";\n+                }\n             }\n-        }\n-    } else {\n-        local_mode\n-    };\n-\n-    if mode == system_mode {\n-        // FIXME: Per discussion on #1760, we need to think about how\n-        // system mode works. It should install files to the normal\n-        // sysroot paths, but it also needsd an area to place various\n-        // cargo configuration and work files.\n-        fail \"system mode does not exist yet\";\n-    }\n+        } else { local_mode }\n+    } else { system_mode };\n \n     {test: test, mode: mode, free: match.free}\n }\n \n fn configure(opts: options) -> cargo {\n+    let syscargo = result::get(get_cargo_sysroot());\n     let get_cargo_dir = alt opts.mode {\n         system_mode { get_cargo_sysroot }\n         user_mode { get_cargo_root }\n@@ -391,15 +387,15 @@ fn configure(opts: options) -> cargo {\n     };\n \n     let sources = map::new_str_hash::<source>();\n-    try_parse_sources(fs::connect(p, \"sources.json\"), sources);\n-    try_parse_sources(fs::connect(p, \"local-sources.json\"), sources);\n+    try_parse_sources(fs::connect(syscargo, \"sources.json\"), sources);\n+    try_parse_sources(fs::connect(syscargo, \"local-sources.json\"), sources);\n     let c = {\n         pgp: pgp::supported(),\n         root: p,\n         bindir: fs::connect(p, \"bin\"),\n         libdir: fs::connect(p, \"lib\"),\n         workdir: fs::connect(p, \"work\"),\n-        sourcedir: fs::connect(p, \"sources\"),\n+        sourcedir: fs::connect(syscargo, \"sources\"),\n         sources: sources,\n         opts: opts\n     };"}]}