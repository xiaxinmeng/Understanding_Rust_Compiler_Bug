{"sha": "a85ee3ed9130de6b263de0b05e67b04e644f269e", "node_id": "C_kwDOAAsO6NoAKGE4NWVlM2VkOTEzMGRlNmIyNjNkZTBiMDVlNjdiMDRlNjQ0ZjI2OWU", "commit": {"author": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-14T14:47:06Z"}, "committer": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-14T14:47:06Z"}, "message": "add code examples", "tree": {"sha": "3cac8398da0adb6a86ff5150de3dab4a06c3e741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cac8398da0adb6a86ff5150de3dab4a06c3e741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a85ee3ed9130de6b263de0b05e67b04e644f269e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a85ee3ed9130de6b263de0b05e67b04e644f269e", "html_url": "https://github.com/rust-lang/rust/commit/a85ee3ed9130de6b263de0b05e67b04e644f269e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a85ee3ed9130de6b263de0b05e67b04e644f269e/comments", "author": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d35ab38067ede0b2816e0177d1d0e0869e89136", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d35ab38067ede0b2816e0177d1d0e0869e89136", "html_url": "https://github.com/rust-lang/rust/commit/8d35ab38067ede0b2816e0177d1d0e0869e89136"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "ae99772450e217ac907785ba6328eacac5681812", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a85ee3ed9130de6b263de0b05e67b04e644f269e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85ee3ed9130de6b263de0b05e67b04e644f269e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a85ee3ed9130de6b263de0b05e67b04e644f269e", "patch": "@@ -557,6 +557,32 @@ impl<T> Vec<T> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::{AllocError, Allocator, Global, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///\n+    ///     let vec = unsafe {\n+    ///         let mem = match Global.allocate(layout) {\n+    ///             Ok(mem) => mem.cast::<u32>().as_ptr(),\n+    ///             Err(AllocError) => return,\n+    ///         };\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts_in(mem, 1, 16, Global)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {\n@@ -669,7 +695,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///   See the safety documentation of [`pointer::offset`].\n     ///\n     /// These requirements are always upheld by any `ptr` that has been allocated\n-    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n+    /// via `Vec<T, A>`. Other allocation sources are allowed if the invariants are\n     /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n@@ -727,6 +753,29 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// use std::alloc::{alloc, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///     let vec = unsafe {\n+    ///         let mem = alloc(layout).cast::<u32>();\n+    ///         if mem.is_null() {\n+    ///             return;\n+    ///         }\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts(mem, 1, 16)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {"}]}