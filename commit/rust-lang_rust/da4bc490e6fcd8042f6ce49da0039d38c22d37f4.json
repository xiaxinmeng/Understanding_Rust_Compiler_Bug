{"sha": "da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNGJjNDkwZTZmY2Q4MDQyZjZjZTQ5ZGEwMDM5ZDM4YzIyZDM3ZjQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-04-22T11:54:12Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-04-22T11:54:12Z"}, "message": "Choose target features", "tree": {"sha": "41e8834b278190ef124edf1eb469a083627a156d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e8834b278190ef124edf1eb469a083627a156d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "html_url": "https://github.com/rust-lang/rust/commit/da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "html_url": "https://github.com/rust-lang/rust/commit/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "6bf09f30898c290a0eb9d52ecb93131d11414850", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "patch": "@@ -62,6 +62,7 @@ pub fn llvm_err(sess: Session, msg: ~str) -> ! {\n pub fn WriteOutputFile(sess: Session,\n         PM: lib::llvm::PassManagerRef, M: ModuleRef,\n         Triple: &str,\n+        Feature: &str,\n         Output: &str,\n         // FIXME: When #2334 is fixed, change\n         // c_uint to FileType\n@@ -70,17 +71,20 @@ pub fn WriteOutputFile(sess: Session,\n         EnableSegmentedStacks: bool) {\n     unsafe {\n         do str::as_c_str(Triple) |Triple| {\n-            do str::as_c_str(Output) |Output| {\n-                let result = llvm::LLVMRustWriteOutputFile(\n-                        PM,\n-                        M,\n-                        Triple,\n-                        Output,\n-                        FileType,\n-                        OptLevel,\n-                        EnableSegmentedStacks);\n-                if (!result) {\n-                    llvm_err(sess, ~\"Could not write output\");\n+            do str::as_c_str(Feature) |Feature| {\n+                do str::as_c_str(Output) |Output| {\n+                    let result = llvm::LLVMRustWriteOutputFile(\n+                            PM,\n+                            M,\n+                            Triple,\n+                            Feature,\n+                            Output,\n+                            FileType,\n+                            OptLevel,\n+                            EnableSegmentedStacks);\n+                    if (!result) {\n+                        llvm_err(sess, ~\"Could not write output\");\n+                    }\n                 }\n             }\n         }\n@@ -323,6 +327,7 @@ pub mod write {\n                             pm.llpm,\n                             llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n+                            opts.target_feature,\n                             output.to_str(),\n                             lib::llvm::AssemblyFile as c_uint,\n                             CodeGenOptLevel,\n@@ -338,6 +343,7 @@ pub mod write {\n                             pm.llpm,\n                             llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n+                            opts.target_feature,\n                             output.to_str(),\n                             lib::llvm::ObjectFile as c_uint,\n                             CodeGenOptLevel,\n@@ -351,6 +357,7 @@ pub mod write {\n                         pm.llpm,\n                         llmod,\n                         sess.targ_cfg.target_strs.target_triple,\n+                        opts.target_feature,\n                         output.to_str(),\n                         FileType as c_uint,\n                         CodeGenOptLevel,"}, {"sha": "857a06f13f91c03cf0170264a1b650387137ad7b", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "patch": "@@ -599,6 +599,7 @@ pub fn build_session_options(binary: @~str,\n     let sysroot_opt = getopts::opt_maybe_str(matches, ~\"sysroot\");\n     let sysroot_opt = sysroot_opt.map(|m| Path(*m));\n     let target_opt = getopts::opt_maybe_str(matches, ~\"target\");\n+    let target_feature_opt = getopts::opt_maybe_str(matches, ~\"target-feature\");\n     let save_temps = getopts::opt_present(matches, ~\"save-temps\");\n     match output_type {\n       // unless we're emitting huamn-readable assembly, omit comments.\n@@ -637,6 +638,10 @@ pub fn build_session_options(binary: @~str,\n             None => host_triple(),\n             Some(s) => s\n         };\n+    let target_feature = match target_feature_opt {\n+        None => ~\"\",\n+        Some(s) => s\n+    };\n \n     let addl_lib_search_paths =\n         getopts::opt_strs(matches, ~\"L\")\n@@ -659,6 +664,7 @@ pub fn build_session_options(binary: @~str,\n         addl_lib_search_paths: addl_lib_search_paths,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n+        target_feature: target_feature,\n         cfg: cfg,\n         binary: binary,\n         test: test,\n@@ -769,6 +775,9 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                         ~\"Target triple cpu-manufacturer-kernel[-os]\n                           to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n                           for detail)\", ~\"TRIPLE\"),\n+  optopt(~\"\", ~\"target-feature\",\n+                        ~\"Target specific attributes (llc -mattr=help\n+                          for detail)\", ~\"FEATURE\"),\n   optopt(~\"\", ~\"android-cross-path\",\n          ~\"The path to the Android NDK\", \"PATH\"),\n   optmulti(~\"W\", ~\"warn\","}, {"sha": "a2bbbca0c5aafbb80fcf4855b93e8d83e44e0e2e", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "patch": "@@ -126,6 +126,7 @@ pub struct options {\n     addl_lib_search_paths: ~[Path],\n     maybe_sysroot: Option<Path>,\n     target_triple: ~str,\n+    target_feature: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n     // will be added to the crate AST node.  This should not be used for\n@@ -302,6 +303,7 @@ pub fn basic_options() -> @options {\n         addl_lib_search_paths: ~[],\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n+        target_feature: ~\"\",\n         cfg: ~[],\n         binary: @~\"rustc\",\n         test: false,"}, {"sha": "1ab84c7978c2231ae8d0c3e32e619e6492b154bf", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "patch": "@@ -1799,9 +1799,10 @@ pub mod llvm {\n         pub unsafe fn LLVMRustWriteOutputFile(PM: PassManagerRef,\n                                               M: ModuleRef,\n                                               Triple: *c_char,\n+                                              Feature: *c_char,\n+                                              Output: *c_char,\n                                               // FIXME: When #2334 is fixed,\n                                               // change c_uint to FileType\n-                                              Output: *c_char,\n                                               FileType: c_uint,\n                                               OptLevel: c_int,\n                                               EnableSegmentedStacks: bool)"}, {"sha": "451a390876c6b355709c819b50d13721bc914cb9", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/da4bc490e6fcd8042f6ce49da0039d38c22d37f4/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=da4bc490e6fcd8042f6ce49da0039d38c22d37f4", "patch": "@@ -434,6 +434,7 @@ extern \"C\" bool\n LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         LLVMModuleRef M,\n                         const char *triple,\n+                        const char *feature,\n                         const char *path,\n                         TargetMachine::CodeGenFileType FileType,\n                         CodeGenOpt::Level OptLevel,\n@@ -461,7 +462,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n \n   std::string Err;\n   std::string Trip(Triple::normalize(triple));\n-  std::string FeaturesStr;\n+  std::string FeaturesStr(feature);\n   std::string CPUStr(\"generic\");\n   const Target *TheTarget = TargetRegistry::lookupTarget(Trip, Err);\n   TargetMachine *Target ="}]}