{"sha": "f3966e4a08c17c1610a21e0b343f69369ad0eb31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTY2ZTRhMDhjMTdjMTYxMGEyMWUwYjM0M2Y2OTM2OWFkMGViMzE=", "commit": {"author": {"name": "Honza Strnad", "email": "hanny.strnad@gmail.com", "date": "2013-06-21T19:27:58Z"}, "committer": {"name": "Honza Strnad", "email": "hanny.strnad@gmail.com", "date": "2013-06-21T19:27:58Z"}, "message": "Added filtered method for Option type", "tree": {"sha": "62dcfba2359c62f906467af8ebcbfe9db5b7ea05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62dcfba2359c62f906467af8ebcbfe9db5b7ea05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3966e4a08c17c1610a21e0b343f69369ad0eb31", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3966e4a08c17c1610a21e0b343f69369ad0eb31", "html_url": "https://github.com/rust-lang/rust/commit/f3966e4a08c17c1610a21e0b343f69369ad0eb31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3966e4a08c17c1610a21e0b343f69369ad0eb31/comments", "author": {"login": "hanny24", "id": 3010229, "node_id": "MDQ6VXNlcjMwMTAyMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3010229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanny24", "html_url": "https://github.com/hanny24", "followers_url": "https://api.github.com/users/hanny24/followers", "following_url": "https://api.github.com/users/hanny24/following{/other_user}", "gists_url": "https://api.github.com/users/hanny24/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanny24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanny24/subscriptions", "organizations_url": "https://api.github.com/users/hanny24/orgs", "repos_url": "https://api.github.com/users/hanny24/repos", "events_url": "https://api.github.com/users/hanny24/events{/privacy}", "received_events_url": "https://api.github.com/users/hanny24/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hanny24", "id": 3010229, "node_id": "MDQ6VXNlcjMwMTAyMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3010229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanny24", "html_url": "https://github.com/hanny24", "followers_url": "https://api.github.com/users/hanny24/followers", "following_url": "https://api.github.com/users/hanny24/following{/other_user}", "gists_url": "https://api.github.com/users/hanny24/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanny24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanny24/subscriptions", "organizations_url": "https://api.github.com/users/hanny24/orgs", "repos_url": "https://api.github.com/users/hanny24/repos", "events_url": "https://api.github.com/users/hanny24/events{/privacy}", "received_events_url": "https://api.github.com/users/hanny24/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1927d295013e19e57a9773c37ded698e89392eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1927d295013e19e57a9773c37ded698e89392eb", "html_url": "https://github.com/rust-lang/rust/commit/d1927d295013e19e57a9773c37ded698e89392eb"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "894d29df5d719b700b0c7a2eab42dc3be618ca51", "filename": "src/libstd/option.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f3966e4a08c17c1610a21e0b343f69369ad0eb31/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3966e4a08c17c1610a21e0b343f69369ad0eb31/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=f3966e4a08c17c1610a21e0b343f69369ad0eb31", "patch": "@@ -159,6 +159,15 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Filters an optional value using given function.\n+    #[inline(always)]\n+    pub fn filtered<'a>(self, f: &fn(t: &'a T) -> bool) -> Option<T> {\n+        match self {\n+            Some(x) => if(f(&x)) {Some(x)} else {None},\n+            None => None\n+        }\n+    }\n+\n     /// Maps a `some` value from one type to another by reference\n     #[inline(always)]\n     pub fn map<'a, U>(&self, f: &fn(&'a T) -> U) -> Option<U> {\n@@ -459,3 +468,11 @@ fn test_get_or_zero() {\n     let no_stuff: Option<int> = None;\n     assert_eq!(no_stuff.get_or_zero(), 0);\n }\n+\n+#[test]\n+fn test_filtered() {\n+    let some_stuff = Some(42);\n+    let modified_stuff = some_stuff.filtered(|&x| {x < 10});\n+    assert_eq!(some_stuff.get(), 42);\n+    assert!(modified_stuff.is_none());\n+}\n\\ No newline at end of file"}]}