{"sha": "8c8257a8c630610618b5c64a989a3d0c785b2e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODI1N2E4YzYzMDYxMDYxOGI1YzY0YTk4OWEzZDBjNzg1YjJlNDc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-28T21:29:02Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_borrowck: fix compilation", "tree": {"sha": "4794fe41becef340d1e1dab2b55a37d242eb186a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4794fe41becef340d1e1dab2b55a37d242eb186a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8257a8c630610618b5c64a989a3d0c785b2e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8257a8c630610618b5c64a989a3d0c785b2e47", "html_url": "https://github.com/rust-lang/rust/commit/8c8257a8c630610618b5c64a989a3d0c785b2e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8257a8c630610618b5c64a989a3d0c785b2e47/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6bb85b989f585ecfa41cc2c1305a54689952da", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6bb85b989f585ecfa41cc2c1305a54689952da", "html_url": "https://github.com/rust-lang/rust/commit/8f6bb85b989f585ecfa41cc2c1305a54689952da"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "2beb62266fb35e180dbca16169eb0e9f06ade56b", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8c8257a8c630610618b5c64a989a3d0c785b2e47/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8257a8c630610618b5c64a989a3d0c785b2e47/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=8c8257a8c630610618b5c64a989a3d0c785b2e47", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n \n pub mod check_loans;\n \n@@ -62,9 +62,13 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr, s: Span, id: ast::NodeId) {\n+impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n+    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n+                b: hir::ExprId, s: Span, id: ast::NodeId) {\n         match fk {\n             FnKind::ItemFn(..) |\n             FnKind::Method(..) => {\n@@ -79,18 +83,18 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n         borrowck_item(self, item);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n         if let hir::ConstTraitItem(_, Some(ref expr)) = ti.node {\n             gather_loans::gather_loans_in_static_initializer(self, ti.id, &expr);\n         }\n         intravisit::walk_trait_item(self, ti);\n     }\n \n-    fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         if let hir::ImplItemKind::Const(_, ref expr) = ii.node {\n             gather_loans::gather_loans_in_static_initializer(self, ii.id, &expr);\n         }\n@@ -131,7 +135,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n }\n \n-fn borrowck_item(this: &mut BorrowckCtxt, item: &hir::Item) {\n+fn borrowck_item<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>, item: &'tcx hir::Item) {\n     // Gather loans for items. Note that we don't need\n     // to check loans for single expressions. The check\n     // loan step is intended for things that have a data\n@@ -154,15 +158,17 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n     pub move_data: move_data::FlowedMoveData<'a, 'tcx>,\n }\n \n-fn borrowck_fn(this: &mut BorrowckCtxt,\n-               fk: FnKind,\n-               decl: &hir::FnDecl,\n-               body: &hir::Expr,\n-               sp: Span,\n-               id: ast::NodeId,\n-               attributes: &[ast::Attribute]) {\n+fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n+                         fk: FnKind<'tcx>,\n+                         decl: &'tcx hir::FnDecl,\n+                         body_id: hir::ExprId,\n+                         sp: Span,\n+                         id: ast::NodeId,\n+                         attributes: &[ast::Attribute]) {\n     debug!(\"borrowck_fn(id={})\", id);\n \n+    let body = this.tcx.map.expr(body_id);\n+\n     if attributes.iter().any(|item| item.check_name(\"rustc_mir_borrowck\")) {\n         this.with_temp_region_map(id, |this| {\n             mir::borrowck_mir(this, fk, decl, body, sp, id, attributes)\n@@ -191,14 +197,14 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                              decl,\n                              body);\n \n-    intravisit::walk_fn(this, fk, decl, body, sp, id);\n+    intravisit::walk_fn(this, fk, decl, body_id, sp, id);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n-                                          fk: FnKind,\n-                                          decl: &hir::FnDecl,\n+                                          fk: FnKind<'tcx>,\n+                                          decl: &'tcx hir::FnDecl,\n                                           cfg: &cfg::CFG,\n-                                          body: &hir::Expr,\n+                                          body: &'tcx hir::Expr,\n                                           sp: Span,\n                                           id: ast::NodeId)\n                                           -> AnalysisData<'a, 'tcx>\n@@ -241,7 +247,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n /// the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.\n pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    fn_parts: FnParts<'a>,\n+    fn_parts: FnParts<'tcx>,\n     cfg: &cfg::CFG)\n     -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'a, 'tcx>)\n {\n@@ -257,11 +263,13 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         }\n     };\n \n+    let body = tcx.map.expr(fn_parts.body);\n+\n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx,\n                                                      fn_parts.kind,\n                                                      &fn_parts.decl,\n                                                      cfg,\n-                                                     &fn_parts.body,\n+                                                     body,\n                                                      fn_parts.span,\n                                                      fn_parts.id);\n \n@@ -407,8 +415,8 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: TyCtxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         hir_map::NodeExpr(expr) => match expr.node {\n-            hir::ExprClosure(.., ref block, _) => {\n-                block.id\n+            hir::ExprClosure(.., body_id, _) => {\n+                body_id.node_id()\n             }\n             _ => {\n                 bug!(\"encountered non-closure id: {}\", closure_id)"}]}