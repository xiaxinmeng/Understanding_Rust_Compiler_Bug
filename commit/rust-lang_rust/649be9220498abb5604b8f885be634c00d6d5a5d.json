{"sha": "649be9220498abb5604b8f885be634c00d6d5a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OWJlOTIyMDQ5OGFiYjU2MDRiOGY4ODViZTYzNGMwMGQ2ZDVhNWQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-02T19:49:53Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-02T19:49:53Z"}, "message": "Merge pull request #245 from nrc/bugs\n\nFix a bunch of misc. bugs I found", "tree": {"sha": "8a7251ead0f6a874ba70f6e760f66323a6c36965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a7251ead0f6a874ba70f6e760f66323a6c36965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/649be9220498abb5604b8f885be634c00d6d5a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/649be9220498abb5604b8f885be634c00d6d5a5d", "html_url": "https://github.com/rust-lang/rust/commit/649be9220498abb5604b8f885be634c00d6d5a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/649be9220498abb5604b8f885be634c00d6d5a5d/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000ea50123f771c02bf5067349ca0816bdc4a357", "url": "https://api.github.com/repos/rust-lang/rust/commits/000ea50123f771c02bf5067349ca0816bdc4a357", "html_url": "https://github.com/rust-lang/rust/commit/000ea50123f771c02bf5067349ca0816bdc4a357"}, {"sha": "183dac91a33562965645e3a4eb6fdc2908e0944e", "url": "https://api.github.com/repos/rust-lang/rust/commits/183dac91a33562965645e3a4eb6fdc2908e0944e", "html_url": "https://github.com/rust-lang/rust/commit/183dac91a33562965645e3a4eb6fdc2908e0944e"}], "stats": {"total": 211, "additions": 171, "deletions": 40}, "files": [{"sha": "e11c6e470f6f0a3af0abdb178cd7844924553da0", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -203,7 +203,7 @@ fn rewrite_closure(capture: ast::CaptureClause,\n \n     let fmt = ListFormatting::for_fn(argument_budget, argument_offset);\n     let prefix = format!(\"{}|{}|\", mover, write_list(&arg_items.collect::<Vec<_>>(), &fmt));\n-    let block_indent = closure_block_indent(context, offset);\n+    let closure_indent = closure_indent(context, offset);\n \n     // Try to format closure body as a single line expression without braces.\n     if body.stmts.is_empty() {\n@@ -232,11 +232,11 @@ fn rewrite_closure(capture: ast::CaptureClause,\n \n     // We couldn't format the closure body as a single line expression; fall\n     // back to block formatting.\n-    let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n+    let inner_context = context.overflow_context(closure_indent - context.block_indent);\n     let body_rewrite = if let ast::Expr_::ExprBlock(ref inner) = body.expr.as_ref().unwrap().node {\n-        inner.rewrite(inner_context, 0, 0)\n+        inner.rewrite(&inner_context, 0, 0)\n     } else {\n-        body.rewrite(inner_context, 0, 0)\n+        body.rewrite(&inner_context, 0, 0)\n     };\n \n     Some(format!(\"{} {}\", prefix, try_opt!(body_rewrite)))\n@@ -250,7 +250,7 @@ impl Rewrite for ast::Block {\n         }\n \n         let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n-        visitor.block_indent = context.block_indent;\n+        visitor.block_indent = context.block_indent + context.overflow_indent;\n \n         let prefix = match self.rules {\n             ast::BlockCheckMode::PushUnsafeBlock(..) |\n@@ -541,9 +541,9 @@ fn rewrite_match(context: &RewriteContext,\n     let cond_str = try_opt!(cond.rewrite(context, cond_budget, offset + 6));\n     let mut result = format!(\"match {} {{\", cond_str);\n \n-    let block_indent = context.block_indent;\n     let nested_context = context.nested_context();\n-    let arm_indent_str = make_indent(nested_context.block_indent);\n+    let arm_indent = nested_context.block_indent + context.overflow_indent;\n+    let arm_indent_str = make_indent(arm_indent);\n \n     let open_brace_pos = span_after(mk_sp(cond.span.hi, arm_start_pos(&arms[0])),\n                                     \"{\",\n@@ -578,9 +578,8 @@ fn rewrite_match(context: &RewriteContext,\n         result.push_str(&arm_indent_str);\n \n         let arm_str = arm.rewrite(&nested_context,\n-                                  context.config.max_width -\n-                                      nested_context.block_indent,\n-                                  nested_context.block_indent);\n+                                  context.config.max_width - arm_indent,\n+                                  arm_indent);\n         if let Some(ref arm_str) = arm_str {\n             result.push_str(arm_str);\n         } else {\n@@ -594,7 +593,7 @@ fn rewrite_match(context: &RewriteContext,\n     // match expression, but meh.\n \n     result.push('\\n');\n-    result.push_str(&make_indent(block_indent));\n+    result.push_str(&make_indent(context.block_indent + context.overflow_indent));\n     result.push('}');\n     Some(result)\n }\n@@ -694,15 +693,14 @@ impl Rewrite for ast::Arm {\n         } else {\n             \",\"\n         };\n-        let nested_indent = context.block_indent + context.config.tab_spaces;\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n         if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             if let Some(ref body_str) = body.rewrite(context,\n                                                      budget,\n-                                                     nested_indent) {\n+                                                     line_start + 4) {\n                 if first_line_width(body_str) <= budget {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n@@ -720,7 +718,9 @@ impl Rewrite for ast::Arm {\n         }\n \n         let body_budget = try_opt!(width.checked_sub(context.config.tab_spaces));\n-        let body_str = try_opt!(body.rewrite(context, body_budget, nested_indent));\n+        let body_str = try_opt!(body.rewrite(context,\n+                                             body_budget,\n+                                             context.block_indent));\n         Some(format!(\"{}{} =>\\n{}{},\",\n                      attr_str.trim_left(),\n                      pats_str,\n@@ -868,8 +868,8 @@ fn rewrite_call(context: &RewriteContext,\n     // 2 is for parens.\n     let remaining_width = try_opt!(width.checked_sub(extra_offset + 2));\n     let offset = offset + extra_offset + 1;\n-    let block_indent = expr_block_indent(context, offset);\n-    let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n+    let inner_indent = expr_indent(context, offset);\n+    let inner_context = context.overflow_context(inner_indent - context.block_indent);\n \n     let items = itemize_list(context.codemap,\n                              args.iter(),\n@@ -878,7 +878,7 @@ fn rewrite_call(context: &RewriteContext,\n                              |item| item.span.hi,\n                              // Take old span when rewrite fails.\n                              |item| {\n-                                 item.rewrite(inner_context, remaining_width, offset)\n+                                 item.rewrite(&inner_context, remaining_width, offset)\n                                      .unwrap_or(context.snippet(item.span))\n                              },\n                              callee.span.hi + BytePos(1),\n@@ -901,8 +901,8 @@ macro_rules! block_indent_helper {\n     );\n }\n \n-block_indent_helper!(expr_block_indent, expr_indent_style);\n-block_indent_helper!(closure_block_indent, closure_indent_style);\n+block_indent_helper!(expr_indent, expr_indent_style);\n+block_indent_helper!(closure_indent, closure_indent_style);\n \n fn rewrite_paren(context: &RewriteContext,\n                  subexpr: &ast::Expr,\n@@ -1192,7 +1192,9 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n             result.push_str(&format!(\"\\n{}\", make_indent(new_offset)));\n \n             let max_width = try_opt!(context.config.max_width.checked_sub(new_offset + 1));\n-            let rhs = try_opt!(ex.rewrite(&context, max_width, new_offset));\n+            let rhs = try_opt!(ex.rewrite(&context.overflow_context(context.config.tab_spaces),\n+                                          max_width,\n+                                          new_offset));\n \n             result.push_str(&rhs);\n         }"}, {"sha": "36728ce84fa56a6d75b820805207d2f8f8a7788e", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -632,13 +632,11 @@ impl<'a> FmtVisitor<'a> {\n         let break_line = !is_tuple || generics_str.contains('\\n') ||\n                          single_line_cost as usize + used_budget > self.config.max_width;\n \n-        if break_line {\n+        let tactic = if break_line {\n             let indentation = make_indent(offset + self.config.tab_spaces);\n             result.push('\\n');\n             result.push_str(&indentation);\n-        }\n \n-        let tactic = if break_line {\n             ListTactic::Vertical\n         } else {\n             ListTactic::Horizontal"}, {"sha": "6938e4eb4d475f62f549c870d04387689e1fa23e", "filename": "src/lists.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -70,9 +70,11 @@ impl<'a> ListFormatting<'a> {\n \n pub struct ListItem {\n     pub pre_comment: Option<String>,\n-    // Item should include attributes and doc comments\n+    // Item should include attributes and doc comments.\n     pub item: String,\n     pub post_comment: Option<String>,\n+    // Whether there is extra whitespace before this item.\n+    pub new_lines: bool,\n }\n \n impl ListItem {\n@@ -86,7 +88,7 @@ impl ListItem {\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n-        ListItem { pre_comment: None, item: s.into(), post_comment: None }\n+        ListItem { pre_comment: None, item: s.into(), post_comment: None, new_lines: false }\n     }\n }\n \n@@ -206,10 +208,8 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n \n         // Post-comments\n         if tactic != ListTactic::Vertical && item.post_comment.is_some() {\n-            let formatted_comment = rewrite_comment(item.post_comment.as_ref().unwrap(),\n-                                                    true,\n-                                                    formatting.v_width,\n-                                                    0);\n+            let comment = item.post_comment.as_ref().unwrap();\n+            let formatted_comment = rewrite_comment(comment, true, formatting.v_width, 0);\n \n             result.push(' ');\n             result.push_str(&formatted_comment);\n@@ -234,6 +234,10 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             result.push(' ');\n             result.push_str(&formatted_comment);\n         }\n+\n+        if !last && tactic == ListTactic::Vertical && item.new_lines {\n+            result.push('\\n');\n+        }\n     }\n \n     result\n@@ -264,13 +268,14 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n         let white_space: &[_] = &[' ', '\\t'];\n \n         self.inner.next().map(|item| {\n+            let mut new_lines = false;\n             // Pre-comment\n             let pre_snippet = self.codemap.span_to_snippet(codemap::mk_sp(self.prev_span_end,\n                                                                           (self.get_lo)(&item)))\n                                           .unwrap();\n-            let pre_snippet = pre_snippet.trim();\n-            let pre_comment = if !pre_snippet.is_empty() {\n-                Some(pre_snippet.to_owned())\n+            let trimmed_pre_snippet = pre_snippet.trim();\n+            let pre_comment = if !trimmed_pre_snippet.is_empty() {\n+                Some(trimmed_pre_snippet.to_owned())\n             } else {\n                 None\n             };\n@@ -307,7 +312,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                                      separator_index + 1)\n                         }\n                         // Potential *single* line comment.\n-                        (_, Some(j)) => { j + 1 }\n+                        (_, Some(j)) => j + 1,\n                         _ => post_snippet.len()\n                     }\n                 },\n@@ -317,18 +322,40 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 }\n             };\n \n+            if !post_snippet.is_empty() && comment_end > 0 {\n+                // Account for extra whitespace between items. This is fiddly\n+                // because of the way we divide pre- and post- comments.\n+\n+                // Everything from the separator to the next item.\n+                let test_snippet = &post_snippet[comment_end-1..];\n+                let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments.\n+                let test_snippet = &test_snippet[first_newline..];\n+                let first = test_snippet.find(|c: char| !c.is_whitespace())\n+                                        .unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments to the next non-whitespace char.\n+                let test_snippet = &test_snippet[..first];\n+\n+                if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n+                    // There were multiple line breaks which got trimmed to nothing.\n+                    new_lines = true;\n+                }\n+            }\n+\n             // Cleanup post-comment: strip separators and whitespace.\n             self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n-            let mut post_snippet = post_snippet[..comment_end].trim();\n+            let post_snippet = post_snippet[..comment_end].trim();\n \n-            if post_snippet.starts_with(',') {\n-                post_snippet = post_snippet[1..].trim_matches(white_space);\n+            let post_snippet_trimmed = if post_snippet.starts_with(',') {\n+                post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(\",\") {\n-                post_snippet = post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space);\n-            }\n+                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n+            } else {\n+                post_snippet\n+            };\n \n-            let post_comment = if !post_snippet.is_empty() {\n-                Some(post_snippet.to_owned())\n+            let post_comment = if !post_snippet_trimmed.is_empty() {\n+                Some(post_snippet_trimmed.to_owned())\n             } else {\n                 None\n             };\n@@ -337,6 +364,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 pre_comment: pre_comment,\n                 item: (self.get_item_string)(&item),\n                 post_comment: post_comment,\n+                new_lines: new_lines,\n             }\n         })\n     }"}, {"sha": "49c09ac53d1d81df2f670ebbb8a195d617a03115", "filename": "src/rewrite.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -28,7 +28,14 @@ pub trait Rewrite {\n pub struct RewriteContext<'a> {\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n+\n+    // Indentation due to nesting of blocks.\n     pub block_indent: usize,\n+    // *Extra* indentation due to overflowing to the next line, e.g.,\n+    // let foo =\n+    //     bar();\n+    // The extra 4 spaces when formatting `bar()` is overflow_indent.\n+    pub overflow_indent: usize,\n }\n \n impl<'a> RewriteContext<'a> {\n@@ -37,6 +44,16 @@ impl<'a> RewriteContext<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent + self.config.tab_spaces,\n+            overflow_indent: self.overflow_indent,\n+        }\n+    }\n+\n+    pub fn overflow_context(&self, overflow: usize) -> RewriteContext<'a> {\n+        RewriteContext {\n+            codemap: self.codemap,\n+            config: self.config,\n+            block_indent: self.block_indent,\n+            overflow_indent: overflow,\n         }\n     }\n "}, {"sha": "0b29086daf6d58092f22d60ac7747f75119802d6", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -338,6 +338,7 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n+            overflow_indent: 0,\n         };\n         // 1 = \";\"\n         match vp.rewrite(&context, self.config.max_width - offset - 1, offset) {\n@@ -369,6 +370,7 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n+            overflow_indent: 0,\n         }\n     }\n }"}, {"sha": "8894508fd986a1fb87da1288971f173eff8408aa", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -32,6 +32,13 @@ fn main() {\n         second: Item\n     };\n \n+    Some(Data::MethodCallData(MethodCallData {\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n     Diagram { /*                 o        This graph demonstrates how                  \n                *                / \\       significant whitespace is           \n                *               o   o      preserved.  "}, {"sha": "76602a7a56109a5fbf4c8850bb95fa753ab03ecc", "filename": "tests/source/structs.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -49,15 +49,43 @@ pub struct Foo<'a, Y: Baz>\n }\n \n struct Baz {\n+\n     a: A,  // Comment A\n     b: B, // Comment B\n     c: C,   // Comment C\n+\n+}\n+\n+struct Baz {\n+    a: A,  // Comment A\n+\n+    b: B, // Comment B\n+\n+\n+\n+\n+    c: C,   // Comment C\n+}\n+\n+struct Baz {\n+\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+\n+\n+    \n+    d: D\n+\n }\n \n struct Baz\n {\n     // Comment A\n     a: A,\n+    \n     // Comment B\n b: B,\n     // Comment C"}, {"sha": "eab8c604084c5fcd7bcecfabfbe123bdcbb6e421", "filename": "tests/target/match.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -53,3 +53,27 @@ fn foo() {\n         Blurb     =>     {                  }\n     };\n }\n+\n+// Test that a match on an overflow line is laid out properly.\n+fn main() {\n+    let sub_span =\n+        match self.span.sub_span_after_keywooooooooooooooooooooord(use_item.span, keywords::As) {\n+            Some(sub_span) => Some(sub_span),\n+            None => sub_span,\n+        };\n+}\n+\n+// Test that one-line bodies align.\n+fn main() {\n+    match r {\n+        Variableeeeeeeeeeeeeeeeee => (\"variable\",\n+                                      vec!(\"id\",\"name\",\"qualname\",\"value\",\"type\",\"scopeid\"),\n+                                      true,\n+                                      true),\n+        Enummmmmmmmmmmmmmmmmmmmm => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n+        Variantttttttttttttttttttttttt => (\"variant\",\n+                                           vec!(\"id\",\"name\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n+                                           true,\n+                                           true),\n+    }\n+}"}, {"sha": "81c60381ed831a0efbbe036589662eccaba837f4", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -46,6 +46,13 @@ fn main() {\n         second: Item,\n     };\n \n+    Some(Data::MethodCallData(MethodCallData {\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n     Diagram {\n         //                 o        This graph demonstrates how\n         //                / \\       significant whitespace is"}, {"sha": "31e32a51b429a23bbb1f5a23c2ba4fc610ebdb9d", "filename": "tests/target/structs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649be9220498abb5604b8f885be634c00d6d5a5d/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=649be9220498abb5604b8f885be634c00d6d5a5d", "patch": "@@ -54,9 +54,27 @@ struct Baz {\n     c: C, // Comment C\n }\n \n+struct Baz {\n+    a: A, // Comment A\n+\n+    b: B, // Comment B\n+\n+    c: C, // Comment C\n+}\n+\n+struct Baz {\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+    d: D,\n+}\n+\n struct Baz {\n     // Comment A\n     a: A,\n+\n     // Comment B\n     b: B,\n     // Comment C"}]}