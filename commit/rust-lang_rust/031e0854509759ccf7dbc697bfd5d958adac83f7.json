{"sha": "031e0854509759ccf7dbc697bfd5d958adac83f7", "node_id": "C_kwDOAAsO6NoAKDAzMWUwODU0NTA5NzU5Y2NmN2RiYzY5N2JmZDVkOTU4YWRhYzgzZjc", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T02:49:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T04:37:29Z"}, "message": "Tweak output", "tree": {"sha": "1775aea00a81b44d343be22791db871330390775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1775aea00a81b44d343be22791db871330390775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/031e0854509759ccf7dbc697bfd5d958adac83f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/031e0854509759ccf7dbc697bfd5d958adac83f7", "html_url": "https://github.com/rust-lang/rust/commit/031e0854509759ccf7dbc697bfd5d958adac83f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/031e0854509759ccf7dbc697bfd5d958adac83f7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa6ada9dd3a17fc8c99b6b559a2835946803d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa6ada9dd3a17fc8c99b6b559a2835946803d21", "html_url": "https://github.com/rust-lang/rust/commit/1fa6ada9dd3a17fc8c99b6b559a2835946803d21"}], "stats": {"total": 110, "additions": 44, "deletions": 66}, "files": [{"sha": "b6f19d3cc684ae1d84fc97b0c1f3fd390af54975", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=031e0854509759ccf7dbc697bfd5d958adac83f7", "patch": "@@ -224,14 +224,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut ret_span: MultiSpan = semi_span.into();\n         ret_span.push_span_label(\n             expr.span,\n-            \"this could be implicitly returned but it is a statement, not a \\\n-                            tail expression\",\n+            \"this could be implicitly returned but it is a statement, not a tail expression\",\n         );\n         ret_span.push_span_label(ret, \"the `match` arms can conform to this return type\");\n         ret_span.push_span_label(\n             semi_span,\n-            \"the `match` is a statement because of this semicolon, consider \\\n-                            removing it\",\n+            \"the `match` is a statement because of this semicolon, consider removing it\",\n         );\n         diag.span_note(ret_span, \"you might have meant to return the `match` expression\");\n         diag.tool_only_span_suggestion("}, {"sha": "bbe15eb589daffa0b1233dc2da74ddca1e36ffd6", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=031e0854509759ccf7dbc697bfd5d958adac83f7", "patch": "@@ -1699,20 +1699,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n         let [.., stmt] = block.stmts else {\n-            err.span_help(block.span, \"this empty block is missing a tail expression\");\n+            err.span_label(block.span, \"this empty block is missing a tail expression\");\n             return;\n         };\n         let hir::StmtKind::Semi(tail_expr) = stmt.kind else { return; };\n         let Some(ty) = self.node_ty_opt(tail_expr.hir_id) else { return; };\n         if self.can_eq(self.param_env, expected_ty, ty).is_ok() {\n-            err.span_suggestion_verbose(\n+            err.span_suggestion_short(\n                 stmt.span.with_lo(tail_expr.span.hi()),\n                 \"remove this semicolon\",\n                 \"\",\n                 Applicability::MachineApplicable,\n             );\n         } else {\n-            err.span_help(block.span, \"this block is missing a tail expression\");\n+            err.span_label(block.span, \"this block is missing a tail expression\");\n         }\n     }\n }"}, {"sha": "d0c2359f06f9877667b7782399db2f5d86d754ca", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031e0854509759ccf7dbc697bfd5d958adac83f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=031e0854509759ccf7dbc697bfd5d958adac83f7", "patch": "@@ -1077,12 +1077,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             return;\n         }\n         let [.., stmt] = block.stmts else {\n-            err.span_help(block.span, \"this empty block is missing a tail expression\");\n+            err.span_label(block.span, \"this empty block is missing a tail expression\");\n             return;\n         };\n         let hir::StmtKind::Semi(tail_expr) = stmt.kind else { return; };\n         let Some(ty) = typeck.expr_ty_opt(tail_expr) else {\n-            err.span_help(block.span, \"this block is missing a tail expression\");\n+            err.span_label(block.span, \"this block is missing a tail expression\");\n             return;\n         };\n         let ty = self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(ty));\n@@ -1091,14 +1091,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let new_obligation =\n             self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred_and_self);\n         if self.predicate_must_hold_modulo_regions(&new_obligation) {\n-            err.span_suggestion_verbose(\n+            err.span_suggestion_short(\n                 stmt.span.with_lo(tail_expr.span.hi()),\n                 \"remove this semicolon\",\n                 \"\",\n                 Applicability::MachineApplicable,\n             );\n         } else {\n-            err.span_help(block.span, \"this block is missing a tail expression\");\n+            err.span_label(block.span, \"this block is missing a tail expression\");\n         }\n     }\n "}, {"sha": "3e96d7f317b4a05f44a169abb6785bd74620effc", "filename": "src/test/ui/type/binding-assigned-block-without-tail-expression.stderr", "status": "modified", "additions": 35, "deletions": 55, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/031e0854509759ccf7dbc697bfd5d958adac83f7/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031e0854509759ccf7dbc697bfd5d958adac83f7/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr?ref=031e0854509759ccf7dbc697bfd5d958adac83f7", "patch": "@@ -1,127 +1,107 @@\n error[E0277]: `()` doesn't implement `std::fmt::Display`\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:14:20\n    |\n+LL |         42;\n+   |           - help: remove this semicolon\n+...\n LL |     println!(\"{}\", x);\n    |                    ^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: remove this semicolon\n-   |\n-LL -         42;\n-LL +         42\n-   |\n \n error[E0277]: `()` doesn't implement `std::fmt::Display`\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:15:20\n    |\n+LL |     let y = {};\n+   |             -- this empty block is missing a tail expression\n+...\n LL |     println!(\"{}\", y);\n    |                    ^ `()` cannot be formatted with the default formatter\n    |\n-help: this empty block is missing a tail expression\n-  --> $DIR/binding-assigned-block-without-tail-expression.rs:7:13\n-   |\n-LL |     let y = {};\n-   |             ^^\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `()` doesn't implement `std::fmt::Display`\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:16:20\n    |\n+LL |         \"hi\";\n+   |             - help: remove this semicolon\n+...\n LL |     println!(\"{}\", z);\n    |                    ^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: remove this semicolon\n-   |\n-LL -         \"hi\";\n-LL +         \"hi\"\n-   |\n \n error[E0277]: `()` doesn't implement `std::fmt::Display`\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:17:20\n    |\n-LL |     println!(\"{}\", s);\n-   |                    ^ `()` cannot be formatted with the default formatter\n-   |\n-help: this block is missing a tail expression\n-  --> $DIR/binding-assigned-block-without-tail-expression.rs:11:13\n-   |\n LL |       let s = {\n-   |  _____________^\n+   |  _____________-\n LL | |         S;\n LL | |     };\n-   | |_____^\n+   | |_____- this block is missing a tail expression\n+...\n+LL |       println!(\"{}\", s);\n+   |                      ^ `()` cannot be formatted with the default formatter\n+   |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:18:18\n    |\n+LL |         42;\n+   |           - help: remove this semicolon\n+...\n LL |     let _: i32 = x;\n    |            ---   ^ expected `i32`, found `()`\n    |            |\n    |            expected due to this\n-   |\n-help: remove this semicolon\n-   |\n-LL -         42;\n-LL +         42\n-   |\n \n error[E0308]: mismatched types\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:19:18\n    |\n+LL |     let y = {};\n+   |             -- this empty block is missing a tail expression\n+...\n LL |     let _: i32 = y;\n    |            ---   ^ expected `i32`, found `()`\n    |            |\n    |            expected due to this\n-   |\n-help: this empty block is missing a tail expression\n-  --> $DIR/binding-assigned-block-without-tail-expression.rs:7:13\n-   |\n-LL |     let y = {};\n-   |             ^^\n \n error[E0308]: mismatched types\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:20:18\n    |\n-LL |     let _: i32 = z;\n-   |            ---   ^ expected `i32`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-help: this block is missing a tail expression\n-  --> $DIR/binding-assigned-block-without-tail-expression.rs:8:13\n-   |\n LL |       let z = {\n-   |  _____________^\n+   |  _____________-\n LL | |         \"hi\";\n LL | |     };\n-   | |_____^\n+   | |_____- this block is missing a tail expression\n+...\n+LL |       let _: i32 = z;\n+   |              ---   ^ expected `i32`, found `()`\n+   |              |\n+   |              expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/binding-assigned-block-without-tail-expression.rs:21:18\n    |\n-LL |     let _: i32 = s;\n-   |            ---   ^ expected `i32`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-help: this block is missing a tail expression\n-  --> $DIR/binding-assigned-block-without-tail-expression.rs:11:13\n-   |\n LL |       let s = {\n-   |  _____________^\n+   |  _____________-\n LL | |         S;\n LL | |     };\n-   | |_____^\n+   | |_____- this block is missing a tail expression\n+...\n+LL |       let _: i32 = s;\n+   |              ---   ^ expected `i32`, found `()`\n+   |              |\n+   |              expected due to this\n \n error: aborting due to 8 previous errors\n "}]}