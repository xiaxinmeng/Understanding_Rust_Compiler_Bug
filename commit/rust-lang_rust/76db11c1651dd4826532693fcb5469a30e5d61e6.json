{"sha": "76db11c1651dd4826532693fcb5469a30e5d61e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZGIxMWMxNjUxZGQ0ODI2NTMyNjkzZmNiNTQ2OWEzMGU1ZDYxZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T15:50:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-08T15:50:40Z"}, "message": "Rollup merge of #66154 - RalfJung:to_usize, r=oli-obk\n\nmiri: Rename to_{u,i}size to to_machine_{u,i}size\n\nHaving a function `to_usize` that does not return a (host) usize is somewhat confusing, so let's rename it.\n\nr? @oli-obk", "tree": {"sha": "a5459655d6c2c3e6138cf90cc919de61ec570991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5459655d6c2c3e6138cf90cc919de61ec570991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76db11c1651dd4826532693fcb5469a30e5d61e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxY7QCRBK7hj4Ov3rIwAAdHIIAH9kH/+v1cOj+X5c4ytf0oVp\neeN04AjplgNvWz/1VesXidaT0i87dafWE5s5fScVILi/iJj3whVp+d60P40Pvpzi\n9ZN2ChdG9otif3mJzYLRskAHgM3xfGIrQ06KuXx/4gfGs792DvsGOJqAtaA4qiuC\n8IiKsANtePHpW+nfgBPhvvE22jsPW6PWF2HDt2bhNeBfJLRsE0Dp+2mkBo89NHq7\nFer0ZFOdpOqT0lhteuZnMoneqsBuMfnQmkZrq3s1yN0pLo+HWn7bfzRXhGCWbTU+\nvOLWAzq4eSQaYA42fd2yIEpFaJcB8dQZOPoCIqQo7QBa/AGA00kbtBoiru/AReI=\n=zsHp\n-----END PGP SIGNATURE-----\n", "payload": "tree a5459655d6c2c3e6138cf90cc919de61ec570991\nparent 3b0438aa7b8e88a5c2dc3f802ab1de8de51e7b4c\nparent 900fc9a2f045116a7362aa25452c9f2091ed2777\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573228240 +0100\ncommitter GitHub <noreply@github.com> 1573228240 +0100\n\nRollup merge of #66154 - RalfJung:to_usize, r=oli-obk\n\nmiri: Rename to_{u,i}size to to_machine_{u,i}size\n\nHaving a function `to_usize` that does not return a (host) usize is somewhat confusing, so let's rename it.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76db11c1651dd4826532693fcb5469a30e5d61e6", "html_url": "https://github.com/rust-lang/rust/commit/76db11c1651dd4826532693fcb5469a30e5d61e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76db11c1651dd4826532693fcb5469a30e5d61e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0438aa7b8e88a5c2dc3f802ab1de8de51e7b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0438aa7b8e88a5c2dc3f802ab1de8de51e7b4c", "html_url": "https://github.com/rust-lang/rust/commit/3b0438aa7b8e88a5c2dc3f802ab1de8de51e7b4c"}, {"sha": "900fc9a2f045116a7362aa25452c9f2091ed2777", "url": "https://api.github.com/repos/rust-lang/rust/commits/900fc9a2f045116a7362aa25452c9f2091ed2777", "html_url": "https://github.com/rust-lang/rust/commit/900fc9a2f045116a7362aa25452c9f2091ed2777"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "7b29fb26e74f51e0321b49ec61e85ed54bcde0b6", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -439,7 +439,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Ok(b as u64)\n     }\n \n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n+    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n         let b = self.to_bits(cx.data_layout().pointer_size)?;\n         Ok(b as u64)\n     }\n@@ -465,7 +465,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Ok(b as i64)\n     }\n \n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n+    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n         let sz = cx.data_layout().pointer_size;\n         let b = self.to_bits(sz)?;\n         let b = sign_extend(b, sz) as i128;\n@@ -592,8 +592,8 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n+    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n+        self.not_undef()?.to_machine_usize(cx)\n     }\n \n     #[inline(always)]\n@@ -612,8 +612,8 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n+    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n+        self.not_undef()?.to_machine_isize(cx)\n     }\n }\n "}, {"sha": "707ad1511826a67751d9cc8ceedb0bc0954e05b6", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -118,7 +118,7 @@ fn op_to_const<'tcx>(\n                     0,\n                 ),\n             };\n-            let len = b.to_usize(&ecx.tcx.tcx).unwrap();\n+            let len = b.to_machine_usize(&ecx.tcx.tcx).unwrap();\n             let start = start.try_into().unwrap();\n             let len: usize = len.try_into().unwrap();\n             ConstValue::Slice {"}, {"sha": "8e901068a8d26f78176b343d7788ffac6a02b6f2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -447,7 +447,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             ty::Slice(_) | ty::Str => {\n-                let len = metadata.expect(\"slice fat ptr must have vtable\").to_usize(self)?;\n+                let len = metadata.expect(\"slice fat ptr must have length\").to_machine_usize(self)?;\n                 let elem = layout.field(self, 0)?;\n \n                 // Make sure the slice is not too big."}, {"sha": "a7de533506c01404313d00053ffe6fd082c7e132", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -228,7 +228,7 @@ for\n                             ty::Array(_, n)\n                                 if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n                             ty::Slice(_)\n-                                if mplace.meta.unwrap().to_usize(self.ecx)? == 0 => {}\n+                                if mplace.meta.unwrap().to_machine_usize(self.ecx)? == 0 => {}\n                             _ => bug!(\"const qualif failed to prevent mutable references\"),\n                         }\n                     },"}, {"sha": "39f10d8e6045dfeb7a731eeefb4b3344eced17a7", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -263,8 +263,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // This is the dual to the special exception for offset-by-0\n                 // in the inbounds pointer offset operation (see the Miri code, `src/operator.rs`).\n                 if a.is_bits() && b.is_bits() {\n-                    let a = a.to_usize(self)?;\n-                    let b = b.to_usize(self)?;\n+                    let a = a.to_machine_usize(self)?;\n+                    let b = b.to_machine_usize(self)?;\n                     if a == b && a != 0 {\n                         self.write_scalar(Scalar::from_int(0, isize_layout.size), dest)?;\n                         return Ok(true);"}, {"sha": "e929b0855834e98a2e3834ae8f147bf18993eeb6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -919,7 +919,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         match scalar {\n             Scalar::Ptr(ptr) => Ok(ptr),\n-            _ => M::int_to_ptr(&self, scalar.to_usize(self)?)\n+            _ => M::int_to_ptr(&self, scalar.to_machine_usize(self)?)\n         }\n     }\n "}, {"sha": "0bd47edc046602d50dcdf3081b3453bd13c80248", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -195,7 +195,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind {\n                 ty::Slice(..) | ty::Str =>\n-                    return self.mplace.meta.unwrap().to_usize(cx),\n+                    return self.mplace.meta.unwrap().to_machine_usize(cx),\n                 _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n         } else {"}, {"sha": "d698b2e8d8f80d42f1d5fbb468eb824b2cdc7bd0", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db11c1651dd4826532693fcb5469a30e5d61e6/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=76db11c1651dd4826532693fcb5469a30e5d61e6", "patch": "@@ -282,7 +282,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                 // FIXME: More checks for the vtable.\n             }\n             ty::Slice(..) | ty::Str => {\n-                let _len = try_validation!(meta.unwrap().to_usize(self.ecx),\n+                let _len = try_validation!(meta.unwrap().to_machine_usize(self.ecx),\n                     \"non-integer slice length in wide pointer\", self.path);\n                 // We do not check that `len * elem_size <= isize::MAX`:\n                 // that is only required for references, and there it falls out of the"}]}