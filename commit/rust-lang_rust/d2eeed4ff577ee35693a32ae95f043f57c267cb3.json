{"sha": "d2eeed4ff577ee35693a32ae95f043f57c267cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZWVlZDRmZjU3N2VlMzU2OTNhMzJhZTk1ZjA0M2Y1N2MyNjdjYjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:45:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:45:41Z"}, "message": "Implement more simd_reduce_* intrinsics", "tree": {"sha": "758efd6d7eef67a283d9fb1ccc5e9d8529825860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758efd6d7eef67a283d9fb1ccc5e9d8529825860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2eeed4ff577ee35693a32ae95f043f57c267cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2eeed4ff577ee35693a32ae95f043f57c267cb3", "html_url": "https://github.com/rust-lang/rust/commit/d2eeed4ff577ee35693a32ae95f043f57c267cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2eeed4ff577ee35693a32ae95f043f57c267cb3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ff2e093238c80eb99ee612b8b591bf7adb5526", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ff2e093238c80eb99ee612b8b591bf7adb5526", "html_url": "https://github.com/rust-lang/rust/commit/47ff2e093238c80eb99ee612b8b591bf7adb5526"}], "stats": {"total": 91, "additions": 64, "deletions": 27}, "files": [{"sha": "3563aa250a9b8fb7c8fd1c6af0e89479495196ec", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d2eeed4ff577ee35693a32ae95f043f57c267cb3/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2eeed4ff577ee35693a32ae95f043f57c267cb3/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=d2eeed4ff577ee35693a32ae95f043f57c267cb3", "patch": "@@ -263,6 +263,48 @@ fn simd_pair_for_each_lane<'tcx, M: Module>(\n     }\n }\n \n+fn simd_reduce<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n+    val: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, TyAndLayout<'tcx>, Value, Value) -> Value,\n+) {\n+    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    assert_eq!(lane_layout, ret.layout());\n+\n+    let mut res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+    for lane_idx in 1..lane_count {\n+        let lane = val\n+            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .load_scalar(fx);\n+        res_val = f(fx, lane_layout, res_val, lane);\n+    }\n+    let res = CValue::by_val(res_val, lane_layout);\n+    ret.write_cvalue(fx, res);\n+}\n+\n+fn simd_reduce_bool<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n+    val: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, Value, Value) -> Value,\n+) {\n+    let (_lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    assert!(ret.layout().ty.is_bool());\n+\n+    let res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+    let mut res_val = fx.bcx.ins().band_imm(res_val, 1); // mask to boolean\n+    for lane_idx in 1..lane_count {\n+        let lane = val\n+            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .load_scalar(fx);\n+        let lane = fx.bcx.ins().band_imm(lane, 1); // mask to boolean\n+        res_val = f(fx, res_val, lane);\n+    }\n+    let res = CValue::by_val(res_val, ret.layout());\n+    ret.write_cvalue(fx, res);\n+}\n+\n fn bool_to_zero_or_max_uint<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,"}, {"sha": "0b85309f4c59ead1670a738a153139c6b8083b37", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d2eeed4ff577ee35693a32ae95f043f57c267cb3/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2eeed4ff577ee35693a32ae95f043f57c267cb3/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=d2eeed4ff577ee35693a32ae95f043f57c267cb3", "patch": "@@ -233,45 +233,40 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v) {\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n-            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n-            assert_eq!(lane_layout.ty, ret.layout().ty);\n-\n-            let mut res_val = v.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n-            for lane_idx in 1..lane_count {\n-                let lane = v.value_field(fx, mir::Field::new(lane_idx.into())).load_scalar(fx);\n-                res_val = if lane_layout.ty.is_floating_point() {\n-                    fx.bcx.ins().fadd(res_val, lane)\n+            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+                if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fadd(a, b)\n                 } else {\n-                    fx.bcx.ins().iadd(res_val, lane)\n-                };\n-            }\n-            let res = CValue::by_val(res_val, lane_layout);\n-            ret.write_cvalue(fx, res);\n+                    fx.bcx.ins().iadd(a, b)\n+                }\n+            });\n         };\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v) {\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n-            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n-            assert_eq!(lane_layout.ty, ret.layout().ty);\n-\n-            let mut res_val = v.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n-            for lane_idx in 1..lane_count {\n-                let lane = v.value_field(fx, mir::Field::new(lane_idx.into())).load_scalar(fx);\n-                res_val = if lane_layout.ty.is_floating_point() {\n-                    fx.bcx.ins().fmul(res_val, lane)\n+            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+                if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fmul(a, b)\n                 } else {\n-                    fx.bcx.ins().imul(res_val, lane)\n-                };\n-            }\n-            let res = CValue::by_val(res_val, lane_layout);\n-            ret.write_cvalue(fx, res);\n+                    fx.bcx.ins().imul(a, b)\n+                }\n+            });\n+        };\n+\n+        simd_reduce_all, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().band(a, b));\n+        };\n+\n+        simd_reduce_any, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         // simd_fabs\n         // simd_saturating_add\n         // simd_bitmask\n         // simd_select\n-        // simd_reduce_{add,mul}_{,un}ordered\n         // simd_rem\n     }\n }"}]}