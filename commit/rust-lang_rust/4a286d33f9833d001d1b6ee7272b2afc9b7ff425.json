{"sha": "4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjg2ZDMzZjk4MzNkMDAxZDFiNmVlNzI3MmIyYWZjOWI3ZmY0MjU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-03T13:13:28Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-07T13:45:30Z"}, "message": "Fix ICE in region naming.\n\nThis commit puts a fix in place for the ICE in region naming code so\nthat it doesn't break the compiler. However, this results in the\ndiagnostic being poorer as the borrow explanation that was causing the\nICE is not being added - this should be fixed as a follow-up.", "tree": {"sha": "873ba0857c58c5e7c892fcd7e3f5b063f5d72ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873ba0857c58c5e7c892fcd7e3f5b063f5d72ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwKeXoACgkQAXYLT59T\n8VT78w/7B869x0AAZ23zGp247TD0VUHbdUmoNrKb9EzBQpo6pHs2jmywp6XZ5yak\n1tPCndCjiEvvT1KVwdfcOO2ExKqckY616rJAoRp4UNaKTWBwdgUMairQqcofXD+W\nWKrUpNuiBbQKtVPoqMGgJ3sOfmI19qZCDIAqGSvEJ4h7mjLB4/jrw7dY2LuIiec8\nbyD7/th38t7k5Pq0f4IvFYBuO/i2FlHUzcbWoDsfwSinLwA8AdxQOAKCtEez7NNQ\nQhpiqPZTr17xcBzN8qUmjr3toL8+gAklNZum/A6mP0XfZ0lpTsCTnvDhOnj3vt1R\nvjI/YEoFv2XhfWs8vIH9UYwX0l7atklG7XnP619Fn05kfd2H1Z66nQcnqQNcx9iq\nEiqc3dMjJfxvgFt42FXq0kBpgYWqipUrIWuKoUcUvHe7z2i1sOSeE15SDBmzC07l\ny3gGvnBhhyWhG0LqJQGaT2CAtt7PyGs9yaWxFLySymeW9WybAYVfQWfiZU0iBbZb\nC7TZlRNCOLDlzDkq1OSpKaBYPYJ/ojtU8nQ2g7IHImSecRh+/sAFPp7VVv+OeNhx\nT4A9/P9N1K72VKHZAczb9tki28BA8pllYnXtPOEYv9HyXC6uQeZXWdIS4MmEKFLw\nKTlj0ngNcbJrlmp5COC8pMjd4fAt/Rav8NG6Qdd4SkYGfFjkOGg=\n=Y9Tg\n-----END PGP SIGNATURE-----", "payload": "tree 873ba0857c58c5e7c892fcd7e3f5b063f5d72ac7\nparent ea873f57c9e2bd8d184d45737a4c581ee28523d1\nauthor David Wood <david@davidtw.co> 1543842808 +0100\ncommitter David Wood <david@davidtw.co> 1544190330 +0100\n\nFix ICE in region naming.\n\nThis commit puts a fix in place for the ICE in region naming code so\nthat it doesn't break the compiler. However, this results in the\ndiagnostic being poorer as the borrow explanation that was causing the\nICE is not being added - this should be fixed as a follow-up.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "html_url": "https://github.com/rust-lang/rust/commit/4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea873f57c9e2bd8d184d45737a4c581ee28523d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea873f57c9e2bd8d184d45737a4c581ee28523d1", "html_url": "https://github.com/rust-lang/rust/commit/ea873f57c9e2bd8d184d45737a4c581ee28523d1"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "7fb3f02e0e3f3f07c3367bd61ab647d6a908d9ad", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -277,13 +277,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         borrow_region_vid,\n                         region,\n                     );\n-                let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n-                BorrowExplanation::MustBeValidFor {\n-                    category,\n-                    from_closure,\n-                    span,\n-                    region_name,\n-                    opt_place_desc,\n+                if let Some(region_name) = region_name {\n+                    let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n+                    BorrowExplanation::MustBeValidFor {\n+                        category,\n+                        from_closure,\n+                        span,\n+                        region_name,\n+                        opt_place_desc,\n+                    }\n+                } else {\n+                    BorrowExplanation::Unexplained\n                 }\n             } else {\n                 BorrowExplanation::Unexplained"}, {"sha": "32aaa0590d2f9efbe6d3df17e8d52086c9aed831", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -376,9 +376,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         diag.span_label(span, message);\n \n-        match self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, &mut 1)\n-            .source\n-        {\n+        match self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, &mut 1).unwrap().source {\n             RegionNameSource::NamedEarlyBoundRegion(fr_span)\n             | RegionNameSource::NamedFreeRegion(fr_span)\n             | RegionNameSource::SynthesizedFreeEnvRegion(fr_span, _)\n@@ -521,10 +519,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         let counter = &mut 1;\n-        let fr_name = self.give_region_a_name(infcx, mir, mir_def_id, fr, counter);\n+        let fr_name = self.give_region_a_name(infcx, mir, mir_def_id, fr, counter).unwrap();\n         fr_name.highlight_region_name(&mut diag);\n         let outlived_fr_name =\n-            self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, counter);\n+            self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, counter).unwrap();\n         outlived_fr_name.highlight_region_name(&mut diag);\n \n         let mir_def_name = if infcx.tcx.is_closure(mir_def_id) {\n@@ -661,7 +659,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory, bool, Span, RegionName) {\n+    ) -> (ConstraintCategory, bool, Span, Option<RegionName>) {\n         let (category, from_closure, span) =\n             self.best_blame_constraint(mir, borrow_region, |r| r == outlived_region);\n         let outlived_fr_name ="}, {"sha": "b01e257ae2effd5ac7f2b506d3e24a0f6fd8695a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n-    ) -> RegionName {\n+    ) -> Option<RegionName> {\n         debug!(\"give_region_a_name(fr={:?}, counter={})\", fr, counter);\n \n         assert!(self.universal_regions.is_universal_region(fr));\n@@ -177,8 +177,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.give_name_if_anonymous_region_appears_in_output(\n                     infcx, mir, mir_def_id, fr, counter,\n                 )\n-            })\n-            .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr));\n+            });\n \n         debug!(\"give_region_a_name: gave name {:?}\", value);\n         value"}, {"sha": "08e5217670e84fca9553abc82f328aca1dc34251", "filename": "src/test/ui/nll/issue-55850.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |                ^ borrowed value does not live long enough\n+LL |     })\n+   |     - `s` dropped here while still borrowed\n+\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |         -------^---- possible yield occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0597, E0626.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "4140815c91bb6b72af6db356d45c19ba7b895b2b", "filename": "src/test/ui/nll/issue-55850.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_mut)]\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::ops::GeneratorState::Yielded;\n+\n+pub struct GenIter<G>(G);\n+\n+impl <G> Iterator for GenIter<G>\n+where\n+    G: Generator,\n+{\n+    type Item = G::Yield;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unsafe {\n+            match self.0.resume() {\n+                Yielded(y) => Some(y),\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+fn bug<'a>() -> impl Iterator<Item = &'a str> {\n+    GenIter(move || {\n+        let mut s = String::new();\n+        yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+    })\n+}\n+\n+fn main() {\n+    bug();\n+}"}, {"sha": "26b4c82076c23fe3c94f68d108663114c1a0c72e", "filename": "src/test/ui/nll/issue-55850.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a286d33f9833d001d1b6ee7272b2afc9b7ff425/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr?ref=4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "patch": "@@ -0,0 +1,17 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |                ^ borrowed value does not live long enough\n+LL |     })\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 35:8...\n+  --> $DIR/issue-55850.rs:35:8\n+   |\n+LL | fn bug<'a>() -> impl Iterator<Item = &'a str> {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}