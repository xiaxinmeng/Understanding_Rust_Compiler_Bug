{"sha": "833b1d84e85808ba3d770240380970504537b5a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzM2IxZDg0ZTg1ODA4YmEzZDc3MDI0MDM4MDk3MDUwNDUzN2I1YTA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-21T13:42:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:12:51Z"}, "message": "cleanup", "tree": {"sha": "9ec12f57edd30d7bd3b465d151bcea9784012f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ec12f57edd30d7bd3b465d151bcea9784012f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833b1d84e85808ba3d770240380970504537b5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833b1d84e85808ba3d770240380970504537b5a0", "html_url": "https://github.com/rust-lang/rust/commit/833b1d84e85808ba3d770240380970504537b5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833b1d84e85808ba3d770240380970504537b5a0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "html_url": "https://github.com/rust-lang/rust/commit/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5"}], "stats": {"total": 94, "additions": 35, "deletions": 59}, "files": [{"sha": "d1c6d3be5f4bbb849292914ba18aa015c62ddf52", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=833b1d84e85808ba3d770240380970504537b5a0", "patch": "@@ -1067,20 +1067,23 @@ impl<'tcx> Predicate<'tcx> {\n \n     /// Returns the inner `PredicateAtom`.\n     ///\n-    /// Note that this method does not check if predicate has unbound variables,\n-    /// rebinding the returned atom potentially causes the previously bound variables\n+    /// Note that this method does not check if the predicate has unbound variables.\n+    ///\n+    /// Rebinding the returned atom can causes the previously bound variables\n     /// to end up at the wrong binding level.\n     pub fn skip_binders_unchecked(self) -> PredicateAtom<'tcx> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder.skip_binder(),\n-            &ty::PredicateKind::Atom(atom) => atom,\n+            &PredicateKind::Atom(atom) => atom,\n         }\n     }\n \n+    /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n+    /// contained unbound variables by shifting these variables outwards.\n     pub fn bound_atom(self, tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder,\n-            &ty::PredicateKind::Atom(atom) => Binder::wrap_nonbinding(tcx, atom),\n+            &PredicateKind::Atom(atom) => Binder::wrap_nonbinding(tcx, atom),\n         }\n     }\n }\n@@ -1105,7 +1108,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n pub enum PredicateKind<'tcx> {\n     /// `for<'a>: ...`\n     ForAll(Binder<PredicateAtom<'tcx>>),\n-\n     Atom(PredicateAtom<'tcx>),\n }\n \n@@ -1179,7 +1181,7 @@ pub struct CratePredicatesMap<'tcx> {\n     /// For each struct with outlive bounds, maps to a vector of the\n     /// predicate of its outlive bounds. If an item has no outlives\n     /// bounds, it will have no entry.\n-    pub predicates: FxHashMap<DefId, &'tcx [(ty::Predicate<'tcx>, Span)]>,\n+    pub predicates: FxHashMap<DefId, &'tcx [(Predicate<'tcx>, Span)]>,\n }\n \n impl<'tcx> Predicate<'tcx> {\n@@ -1192,7 +1194,7 @@ impl<'tcx> Predicate<'tcx> {\n         self,\n         tcx: TyCtxt<'tcx>,\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n-    ) -> ty::Predicate<'tcx> {\n+    ) -> Predicate<'tcx> {\n         // The interaction between HRTB and supertraits is not entirely\n         // obvious. Let me walk you (and myself) through an example.\n         //\n@@ -1384,13 +1386,13 @@ impl ToPredicate<'tcx> for PredicateAtom<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         debug_assert!(!self.has_escaping_bound_vars(), \"escaping bound vars for {:?}\", self);\n-        tcx.mk_predicate(ty::PredicateKind::Atom(self))\n+        tcx.mk_predicate(PredicateKind::Atom(self))\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ty::PredicateAtom::Trait(ty::TraitPredicate { trait_ref: self.value }, self.constness)\n+        PredicateAtom::Trait(ty::TraitPredicate { trait_ref: self.value }, self.constness)\n             .to_predicate(tcx)\n     }\n }\n@@ -1407,51 +1409,29 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitPredicate<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        if let Some(pred) = self.value.no_bound_vars() {\n-            ty::PredicateAtom::Trait(pred, self.constness).to_predicate(tcx)\n-        } else {\n-            ty::PredicateKind::ForAll(\n-                self.value.map_bound(|pred| ty::PredicateAtom::Trait(pred, self.constness)),\n-            )\n-            .to_predicate(tcx)\n-        }\n+        PredicateAtom::Trait(self.value.skip_binder(), self.constness)\n+            .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        if let Some(outlives) = self.no_bound_vars() {\n-            PredicateAtom::RegionOutlives(outlives).to_predicate(tcx)\n-        } else {\n-            ty::PredicateKind::ForAll(\n-                self.map_bound(|outlives| PredicateAtom::RegionOutlives(outlives)),\n-            )\n-            .to_predicate(tcx)\n-        }\n+        PredicateAtom::RegionOutlives(self.skip_binder())\n+            .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        if let Some(outlives) = self.no_bound_vars() {\n-            PredicateAtom::TypeOutlives(outlives).to_predicate(tcx)\n-        } else {\n-            ty::PredicateKind::ForAll(\n-                self.map_bound(|outlives| PredicateAtom::TypeOutlives(outlives)),\n-            )\n-            .to_predicate(tcx)\n-        }\n+        PredicateAtom::TypeOutlives(self.skip_binder())\n+            .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        if let Some(proj) = self.no_bound_vars() {\n-            PredicateAtom::Projection(proj).to_predicate(tcx)\n-        } else {\n-            ty::PredicateKind::ForAll(self.map_bound(|proj| PredicateAtom::Projection(proj)))\n-                .to_predicate(tcx)\n-        }\n+        PredicateAtom::Projection(self.skip_binder())\n+            .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n@@ -1746,7 +1726,7 @@ pub struct ParamEnv<'tcx> {\n     // Specifically, the low bit represents Reveal, with 0 meaning `UserFacing`\n     // and 1 meaning `All`. The rest is the pointer.\n     //\n-    // This relies on the List<ty::Predicate<'tcx>> type having at least 2-byte\n+    // This relies on the List<Predicate<'tcx>> type having at least 2-byte\n     // alignment. Lists start with a usize and are repr(C) so this should be\n     // fine; there is a debug_assert in the constructor as well.\n     //\n@@ -1760,7 +1740,7 @@ pub struct ParamEnv<'tcx> {\n     ///\n     /// Note: This is packed into the `packed_data` usize above, use the\n     /// `caller_bounds()` method to access it.\n-    caller_bounds: PhantomData<&'tcx List<ty::Predicate<'tcx>>>,\n+    caller_bounds: PhantomData<&'tcx List<Predicate<'tcx>>>,\n \n     /// Typically, this is `Reveal::UserFacing`, but during codegen we\n     /// want `Reveal::All`.\n@@ -1838,7 +1818,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n \n     #[inline]\n-    pub fn caller_bounds(self) -> &'tcx List<ty::Predicate<'tcx>> {\n+    pub fn caller_bounds(self) -> &'tcx List<Predicate<'tcx>> {\n         // mask out bottom bit\n         unsafe { &*((self.packed_data & (!1)) as *const _) }\n     }\n@@ -1863,7 +1843,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n     pub fn new(\n-        caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n+        caller_bounds: &'tcx List<Predicate<'tcx>>,\n         reveal: Reveal,\n         def_id: Option<DefId>,\n     ) -> Self {"}, {"sha": "562f512c5dacfee41c66541490a7822c71bb10d4", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=833b1d84e85808ba3d770240380970504537b5a0", "patch": "@@ -131,22 +131,21 @@ fn mark_used_by_predicates<'tcx>(\n     let predicates = tcx.explicit_predicates_of(def_id);\n     debug!(\"mark_parameters_used_in_predicates: predicates_of={:?}\", predicates);\n     for (predicate, _) in predicates.predicates {\n-        match predicate.kind() {\n-            ty::PredicateKind::Trait(predicate, ..) => {\n-                let trait_ref = predicate.skip_binder().trait_ref;\n+        match predicate.skip_binders() {\n+            ty::PredicateAtom::Trait(predicate, ..) => {\n+                let trait_ref = predicate.trait_ref;\n                 if is_self_ty_used(unused_parameters, trait_ref.self_ty()) {\n                     for ty in trait_ref.substs.types() {\n                         debug!(\"unused_generic_params: (trait) ty={:?}\", ty);\n                         mark_ty(unused_parameters, ty);\n                     }\n                 }\n             }\n-            ty::PredicateKind::Projection(predicate, ..) => {\n-                let self_ty = predicate.skip_binder().projection_ty.self_ty();\n+            ty::PredicateAtom::Projection(proj, ..) => {\n+                let self_ty = proj.projection_ty.self_ty();\n                 if is_self_ty_used(unused_parameters, self_ty) {\n-                    let ty = predicate.ty();\n-                    debug!(\"unused_generic_params: (projection) ty={:?}\", ty);\n-                    mark_ty(unused_parameters, ty.skip_binder());\n+                    debug!(\"unused_generic_params: (projection ty={:?}\", proj.ty);\n+                    mark_ty(unused_parameters, proj.ty);\n                 }\n             }\n             _ => (),"}, {"sha": "2eda1ce595a7debb84499685cd19b66c43ebe5ff", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=833b1d84e85808ba3d770240380970504537b5a0", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n-use rustc_infer::traits::{TraitObligation, TraitEngine, TraitEngineExt as _};\n+use rustc_infer::traits::{TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::ToPredicate;"}, {"sha": "ae2cf6daf5350a862cf71e60a099252dead67691", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=833b1d84e85808ba3d770240380970504537b5a0", "patch": "@@ -571,9 +571,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut type_params = FxHashMap::default();\n                     let mut bound_spans = vec![];\n \n-                    let mut collect_type_param_suggestions = {\n-                        // We need to move `tcx` while only borrowing the rest,\n-                        // this is kind of ugly.\n+                    let mut collect_type_param_suggestions =\n                         |self_ty: Ty<'tcx>, parent_pred: &ty::Predicate<'tcx>, obligation: &str| {\n                             // We don't care about regions here, so it's fine to skip the binder here.\n                             if let (ty::Param(_), ty::PredicateAtom::Trait(p, _)) =\n@@ -601,8 +599,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     }\n                                 }\n                             }\n-                        }\n-                    };\n+                        };\n                     let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str, quiet: &str| {\n                         let msg = format!(\n                             \"doesn't satisfy `{}`\","}, {"sha": "76439af79f3512154316647a39581a77a8145210", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b1d84e85808ba3d770240380970504537b5a0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=833b1d84e85808ba3d770240380970504537b5a0", "patch": "@@ -1930,8 +1930,8 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                         let re_root_empty = tcx.lifetimes.re_root_empty;\n                         let predicate = ty::OutlivesPredicate(ty, re_root_empty);\n                         predicates.push((\n-                            ty::PredicateKind::TypeOutlives(ty::Binder::bind(predicate))\n-                                .to_predicate(tcx),\n+                            ty::PredicateAtom::TypeOutlives(predicate)\n+                                .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,\n                         ));\n                     }"}]}