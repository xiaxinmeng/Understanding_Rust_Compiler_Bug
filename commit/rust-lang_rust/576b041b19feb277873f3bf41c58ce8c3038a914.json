{"sha": "576b041b19feb277873f3bf41c58ce8c3038a914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmIwNDFiMTlmZWIyNzc4NzNmM2JmNDFjNThjZThjMzAzOGE5MTQ=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-07-16T12:55:37Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:19:54Z"}, "message": "prepend crate:: when crate_in_path feature is enabled", "tree": {"sha": "4598dc2cfbb1cd891bec025844e791ad7ce0f61c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4598dc2cfbb1cd891bec025844e791ad7ce0f61c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576b041b19feb277873f3bf41c58ce8c3038a914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576b041b19feb277873f3bf41c58ce8c3038a914", "html_url": "https://github.com/rust-lang/rust/commit/576b041b19feb277873f3bf41c58ce8c3038a914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576b041b19feb277873f3bf41c58ce8c3038a914/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4aa1f2f90f9cd4e7182f9f695835c19d61704c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4aa1f2f90f9cd4e7182f9f695835c19d61704c4", "html_url": "https://github.com/rust-lang/rust/commit/b4aa1f2f90f9cd4e7182f9f695835c19d61704c4"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "292a5825d5d6ec65f70f32b01bae27dc371eb0d1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/576b041b19feb277873f3bf41c58ce8c3038a914/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576b041b19feb277873f3bf41c58ce8c3038a914/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=576b041b19feb277873f3bf41c58ce8c3038a914", "patch": "@@ -4236,6 +4236,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                           lookup_name: Name,\n                                           namespace: Namespace,\n                                           start_module: &'a ModuleData<'a>,\n+                                          graph_root: bool,\n                                           filter_fn: FilterFn)\n                                           -> Vec<ImportSuggestion>\n         where FilterFn: Fn(Def) -> bool\n@@ -4262,17 +4263,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 if ident.name == lookup_name && ns == namespace {\n                     if filter_fn(name_binding.def()) {\n                         // create the path\n-                        let mut segms = if self.session.rust_2018() && !in_module_is_extern {\n+                        let mut segms = path_segments.clone();\n+                        if self.session.rust_2018() && !in_module_is_extern {\n                             // crate-local absolute paths start with `crate::` in edition 2018\n                             // FIXME: may also be stabilized for Rust 2015 (Issues #45477, #44660)\n-                            let mut full_segms = vec![\n-                                ast::PathSegment::from_ident(keywords::Crate.ident())\n-                            ];\n-                            full_segms.extend(path_segments.clone());\n-                            full_segms\n-                        } else {\n-                            path_segments.clone()\n-                        };\n+                            if graph_root {\n+                                segms.insert(0, ast::PathSegment::from_ident(keywords::Crate.ident()));\n+                            }\n+                        }\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n                         let path = Path {\n@@ -4326,7 +4324,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                           -> Vec<ImportSuggestion>\n         where FilterFn: Fn(Def) -> bool\n     {\n-        self.lookup_import_candidates_from_module(lookup_name, namespace, self.graph_root, filter_fn)\n+        self.lookup_import_candidates_from_module(lookup_name, namespace, self.graph_root, true, filter_fn)\n     }\n \n     fn find_module(&mut self,"}]}