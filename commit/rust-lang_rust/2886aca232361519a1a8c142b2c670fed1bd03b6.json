{"sha": "2886aca232361519a1a8c142b2c670fed1bd03b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODZhY2EyMzIzNjE1MTlhMWE4YzE0MmIyYzY3MGZlZDFiZDAzYjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-03T10:22:24Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-03T10:25:04Z"}, "message": "Show which line the link is coming from.", "tree": {"sha": "ee25944905071cdd74d287a54c2b4b6c2fb13c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee25944905071cdd74d287a54c2b4b6c2fb13c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2886aca232361519a1a8c142b2c670fed1bd03b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlsTwgAACgkQ/vbIBR0O\nATykGxAAhQrNnzG9xdh1alKs7G/SApSd1c4GRMB5BGW0tr/vgB18LWAGXQxbjRql\nlWl27RIS1py4EJQPagz6ONMOlob3jnD3Gjdxr+mSdVHJAC55t8X7PNHF6XIi5nML\nMDU4mErq1z25qznYjs70gvY7m9APPyHCdAkQm0uoQUuss3frFikRGvOSGRikKzwM\ngQ1wWwCYNLWiiaM6ig8o18dlQr4DdJ9s8Bqhny1EZWbkUQxYtL1oG0Tfocn6oiZ2\nVBYuQHZhywefvG1QHmyqFXCeygX3FQXGN0O32jQ+CKkN/q1Ms5uTGUvX658VqvBH\nBH+gsWsjzwGimR9GpmaEHZ6Ar8fpUr9hmfr32uSoF3FDrLQVOb73dU2kkASFwE6C\nZUEoOeiMEZGyuUFY81m6VE2e+gbw5J2IXiOqzoSqTNmBok1gwDSCnGV92w8R1oNK\nIK2fKw0a8Cg9sD7aPzXSbycNf2jUC1TSpKajbAqZF6PVcIQLChdW7rQh1PvbGpZQ\nOfhoI/AhWAZXSnDfsK/eh4lXP5ffVADEWue8jGkxKzuWUCnxy/D0o651x+CfgKd1\nIta50P/ynpG4443xABnMSlZIsZRSjEhbtYDJ+VaROJpaooB8ZdKN7PLuN9r076Ot\nEhWHERXkdJHP0mGLUin8PQf6+q2gUN/Sh7V10uR6r7HSlRRnGLY=\n=mBG6\n-----END PGP SIGNATURE-----", "payload": "tree ee25944905071cdd74d287a54c2b4b6c2fb13c10\nparent bc20eb6fbc1109462147fbd5d0680b6015f71e94\nauthor kennytm <kennytm@gmail.com> 1528021344 +0800\ncommitter kennytm <kennytm@gmail.com> 1528021504 +0800\n\nShow which line the link is coming from.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2886aca232361519a1a8c142b2c670fed1bd03b6", "html_url": "https://github.com/rust-lang/rust/commit/2886aca232361519a1a8c142b2c670fed1bd03b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2886aca232361519a1a8c142b2c670fed1bd03b6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc20eb6fbc1109462147fbd5d0680b6015f71e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc20eb6fbc1109462147fbd5d0680b6015f71e94", "html_url": "https://github.com/rust-lang/rust/commit/bc20eb6fbc1109462147fbd5d0680b6015f71e94"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "1c1ba208678ed0e418faac4eba8cbd3025321142", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2886aca232361519a1a8c142b2c670fed1bd03b6", "patch": "@@ -57,6 +57,7 @@ use std::rc::Rc;\n use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n+use std::ops::Range;\n \n use core::{self, DocContext};\n use doctree;\n@@ -1182,9 +1183,39 @@ enum PathKind {\n     Type,\n }\n \n-fn resolution_failure(cx: &DocContext, attrs: &Attributes, path_str: &str) {\n+fn resolution_failure(\n+    cx: &DocContext,\n+    attrs: &Attributes,\n+    path_str: &str,\n+    dox: &str,\n+    link_range: Option<Range<usize>>,\n+) {\n     let sp = span_of_attrs(attrs);\n-    cx.sess().span_warn(sp, &format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+    let mut diag = cx.sess()\n+        .struct_span_warn(sp, &format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+\n+    if let Some(link_range) = link_range {\n+        // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+        //                       ^    ~~~~~~\n+        //                       |    link_range\n+        //                       last_new_line_offset\n+\n+        let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+        let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+        // Print the line containing the `link_range` and manually mark it with '^'s\n+        diag.note(&format!(\n+            \"the link appears in this line:\\n\\n{line}\\n{indicator: <before$}{indicator:^<found$}\",\n+            line=line,\n+            indicator=\"\",\n+            before=link_range.start - last_new_line_offset,\n+            found=link_range.len(),\n+        ));\n+    } else {\n+\n+    }\n+\n+    diag.emit();\n }\n \n impl Clean<Attributes> for [ast::Attribute] {\n@@ -1193,7 +1224,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-            for ori_link in markdown_links(&dox) {\n+            for (ori_link, link_range) in markdown_links(&dox) {\n                 // bail early for real links\n                 if ori_link.contains('/') {\n                     continue;\n@@ -1237,7 +1268,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, true) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, &attrs, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link or a broken link\n                                 // we could potentially check if something is\n                                 // \"intra-doc-link-like\" and warn in that case\n@@ -1248,7 +1279,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, false) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, &attrs, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1293,7 +1324,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             } else if let Ok(value_def) = resolve(cx, path_str, true) {\n                                 value_def\n                             } else {\n-                                resolution_failure(cx, &attrs, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1302,7 +1333,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Some(def) = macro_resolve(cx, path_str) {\n                                 (def, None)\n                             } else {\n-                                resolution_failure(cx, &attrs, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 continue\n                             }\n                         }"}, {"sha": "7088104cd7a31d8b6ee5a6f6baa1ca2b3a5c9cea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2886aca232361519a1a8c142b2c670fed1bd03b6", "patch": "@@ -32,6 +32,8 @@ use std::cell::RefCell;\n use std::collections::{HashMap, VecDeque};\n use std::default::Default;\n use std::fmt::{self, Write};\n+use std::borrow::Cow;\n+use std::ops::Range;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::codemap::Span;\n@@ -747,7 +749,7 @@ pub fn plain_summary_line(md: &str) -> String {\n     s\n }\n \n-pub fn markdown_links(md: &str) -> Vec<String> {\n+pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     if md.is_empty() {\n         return vec![];\n     }\n@@ -760,8 +762,22 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n     let shortcut_links = RefCell::new(vec![]);\n \n     {\n+        let locate = |s: &str| unsafe {\n+            let s_start = s.as_ptr();\n+            let s_end = s_start.add(s.len());\n+            let md_start = md.as_ptr();\n+            let md_end = md_start.add(md.len());\n+            if md_start <= s_start && s_end <= md_end {\n+                let start = s_start.offset_from(md_start) as usize;\n+                let end = s_end.offset_from(md_start) as usize;\n+                Some(start..end)\n+            } else {\n+                None\n+            }\n+        };\n+\n         let push = |_: &str, s: &str| {\n-            shortcut_links.borrow_mut().push(s.to_owned());\n+            shortcut_links.borrow_mut().push((s.to_owned(), locate(s)));\n             None\n         };\n         let p = Parser::new_with_broken_link_callback(md, opts,\n@@ -772,7 +788,10 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n         for ev in iter {\n             if let Event::Start(Tag::Link(dest, _)) = ev {\n                 debug!(\"found link: {}\", dest);\n-                links.push(dest.into_owned());\n+                links.push(match dest {\n+                    Cow::Borrowed(s) => (s.to_owned(), locate(s)),\n+                    Cow::Owned(s) => (s, None),\n+                });\n             }\n         }\n     }"}, {"sha": "97c84d8348f7c0ce6f142dcf29a9a6493beac68a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2886aca232361519a1a8c142b2c670fed1bd03b6", "patch": "@@ -23,6 +23,7 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n+#![feature(ptr_offset_from)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "1e8e9f04c26ace303e17597274859488e1cee8f9", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2886aca232361519a1a8c142b2c670fed1bd03b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=2886aca232361519a1a8c142b2c670fed1bd03b6", "patch": "@@ -5,6 +5,11 @@ warning: [Foo::baz] cannot be resolved, ignoring it...\n 14 | | //!\n 15 | | //! and [Uniooon::X].\n    | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                       ^^^^^^^^\n \n warning: [Bar::foo] cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:13:1\n@@ -13,6 +18,11 @@ warning: [Bar::foo] cannot be resolved, ignoring it...\n 14 | | //!\n 15 | | //! and [Uniooon::X].\n    | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                                   ^^^^^^^^\n \n warning: [Uniooon::X] cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:13:1\n@@ -21,4 +31,9 @@ warning: [Uniooon::X] cannot be resolved, ignoring it...\n 14 | | //!\n 15 | | //! and [Uniooon::X].\n    | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            and [Uniooon::X].\n+                 ^^^^^^^^^^\n "}]}