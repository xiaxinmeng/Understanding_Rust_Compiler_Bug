{"sha": "024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNGNjNDM1ZjRlMTllMmQzNGY4ZTIwOTlmOGRhMWZiMmJmMWI5NTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T09:58:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T10:04:21Z"}, "message": "avoid env::var which requires valid UTF-8", "tree": {"sha": "02729ecae5a42c7aab23a5dcdf4c221923c103ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02729ecae5a42c7aab23a5dcdf4c221923c103ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "html_url": "https://github.com/rust-lang/rust/commit/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20097be2feaaa92c3a2843fb1c57c6a28d3dcf29", "url": "https://api.github.com/repos/rust-lang/rust/commits/20097be2feaaa92c3a2843fb1c57c6a28d3dcf29", "html_url": "https://github.com/rust-lang/rust/commit/20097be2feaaa92c3a2843fb1c57c6a28d3dcf29"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "37ab41b317db5106e6af287449fe4d33f0d99593", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "patch": "@@ -269,7 +269,7 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n fn setup(subcommand: MiriCommand) {\n-    if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n+    if std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n         if subcommand == MiriCommand::Setup {\n             println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n         }\n@@ -282,7 +282,7 @@ fn setup(subcommand: MiriCommand) {\n \n     // First, we need xargo.\n     if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n-        if std::env::var(\"XARGO_CHECK\").is_ok() {\n+        if std::env::var_os(\"XARGO_CHECK\").is_some() {\n             // The user manually gave us a xargo binary; don't do anything automatically.\n             show_error(format!(\"Your xargo is too old; please upgrade to the latest version\"))\n         }\n@@ -292,9 +292,9 @@ fn setup(subcommand: MiriCommand) {\n     }\n \n     // Determine where the rust sources are located.  `XARGO_RUST_SRC` env var trumps everything.\n-    let rust_src = match std::env::var(\"XARGO_RUST_SRC\") {\n-        Ok(val) => PathBuf::from(val),\n-        Err(_) => {\n+    let rust_src = match std::env::var_os(\"XARGO_RUST_SRC\") {\n+        Some(val) => PathBuf::from(val),\n+        None => {\n             // Check for `rust-src` rustup component.\n             let sysroot = rustc()\n                 .args(&[\"--print\", \"sysroot\"])\n@@ -522,7 +522,7 @@ fn inside_cargo_rustc() {\n         is_bin || is_test\n     }\n \n-    let verbose = std::env::var(\"MIRI_VERBOSE\").is_ok();\n+    let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n     let target_crate = is_target_crate();\n \n     // Figure out which arguments we need to pass.\n@@ -531,6 +531,7 @@ fn inside_cargo_rustc() {\n     // other args for target crates - that is, crates which are ultimately\n     // going to get interpreted by Miri.\n     if target_crate {\n+        // FIXME: breaks for non-UTF-8 sysroots (use `var_os` instead).\n         let sysroot =\n             std::env::var(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n         args.push(\"--sysroot\".to_owned());\n@@ -545,6 +546,8 @@ fn inside_cargo_rustc() {\n         // we want to interpret under Miri. We deserialize the user-provided arguments\n         // from the special environment variable \"MIRI_ARGS\", and feed them\n         // to the 'miri' binary.\n+        //\n+        // `env::var` is okay here, well-formed JSON is always UTF-8.\n         let magic = std::env::var(\"MIRI_ARGS\").expect(\"missing MIRI_ARGS\");\n         let mut user_args: Vec<String> =\n             serde_json::from_str(&magic).expect(\"failed to deserialize MIRI_ARGS\");"}, {"sha": "31f78aa9895afd185710448be33371062e41d71e", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024cc435f4e19e2d34f8e2099f8da1fb2bf1b952/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=024cc435f4e19e2d34f8e2099f8da1fb2bf1b952", "patch": "@@ -61,16 +61,17 @@ fn init_early_loggers() {\n     // If it is not set, we avoid initializing now so that we can initialize\n     // later with our custom settings, and *not* log anything for what happens before\n     // `miri` gets started.\n-    if env::var(\"RUSTC_LOG\").is_ok() {\n+    if env::var_os(\"RUSTC_LOG\").is_some() {\n         rustc_driver::init_rustc_env_logger();\n     }\n }\n \n fn init_late_loggers(tcx: TyCtxt<'_>) {\n     // We initialize loggers right before we start evaluation. We overwrite the `RUSTC_LOG`\n     // env var if it is not set, control it based on `MIRI_LOG`.\n+    // (FIXE: use `var_os`, but then we need to manually concatenate instead of `format!`.)\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n-        if env::var(\"RUSTC_LOG\").is_err() {\n+        if env::var_os(\"RUSTC_LOG\").is_none() {\n             // We try to be a bit clever here: if `MIRI_LOG` is just a single level\n             // used for everything, we only apply it to the parts of rustc that are\n             // CTFE-related. Otherwise, we use it verbatim for `RUSTC_LOG`.\n@@ -90,8 +91,8 @@ fn init_late_loggers(tcx: TyCtxt<'_>) {\n \n     // If `MIRI_BACKTRACE` is set and `RUSTC_CTFE_BACKTRACE` is not, set `RUSTC_CTFE_BACKTRACE`.\n     // Do this late, so we ideally only apply this to Miri's errors.\n-    if let Ok(val) = env::var(\"MIRI_BACKTRACE\") {\n-        let ctfe_backtrace = match &*val {\n+    if let Some(val) = env::var_os(\"MIRI_BACKTRACE\") {\n+        let ctfe_backtrace = match &*val.to_string_lossy() {\n             \"immediate\" => CtfeBacktrace::Immediate,\n             \"0\" => CtfeBacktrace::Disabled,\n             _ => CtfeBacktrace::Capture,"}]}