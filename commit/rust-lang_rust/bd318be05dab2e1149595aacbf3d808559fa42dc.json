{"sha": "bd318be05dab2e1149595aacbf3d808559fa42dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzE4YmUwNWRhYjJlMTE0OTU5NWFhY2JmM2Q4MDg1NTlmYTQyZGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T16:58:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T16:58:15Z"}, "message": "move_ref_pattern: change pov in diagnostics & add binding names", "tree": {"sha": "9d1897caed0e56e57b6098ebab8c100ed21364d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1897caed0e56e57b6098ebab8c100ed21364d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd318be05dab2e1149595aacbf3d808559fa42dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd318be05dab2e1149595aacbf3d808559fa42dc", "html_url": "https://github.com/rust-lang/rust/commit/bd318be05dab2e1149595aacbf3d808559fa42dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd318be05dab2e1149595aacbf3d808559fa42dc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4973f5871fd36b5946b9a06bd1157d4a87bbe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4973f5871fd36b5946b9a06bd1157d4a87bbe0", "html_url": "https://github.com/rust-lang/rust/commit/8d4973f5871fd36b5946b9a06bd1157d4a87bbe0"}], "stats": {"total": 990, "additions": 501, "deletions": 489}, "files": [{"sha": "b77bd4ecb8e1f5c63b1c54ece4a2c46a71ba433d", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -658,8 +658,8 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_\n                     name,\n                     tables.node_type(pat.hir_id),\n                 );\n-                sess.struct_span_err(pat.span, &format!(\"borrow of moved value: `{}`\", name))\n-                    .span_label(binding_span, \"value moved here\")\n+                sess.struct_span_err(pat.span, \"borrow of moved value\")\n+                    .span_label(binding_span, format!(\"value moved into `{}` here\", name))\n                     .span_label(binding_span, occurs_because)\n                     .span_labels(conflicts_ref, \"value borrowed here after move\")\n                     .emit();\n@@ -675,50 +675,62 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_\n     let mut conflicts_move = Vec::new();\n     let mut conflicts_mut_mut = Vec::new();\n     let mut conflicts_mut_ref = Vec::new();\n-    sub.each_binding(|_, hir_id, span, _| match tables.extract_binding_mode(sess, hir_id, span) {\n-        Some(ty::BindByReference(mut_inner)) => match (mut_outer, mut_inner) {\n-            (Mutability::Not, Mutability::Not) => {} // Both sides are `ref`.\n-            (Mutability::Mut, Mutability::Mut) => conflicts_mut_mut.push(span), // 2x `ref mut`.\n-            _ => conflicts_mut_ref.push(span),       // `ref` + `ref mut` in either direction.\n-        },\n-        Some(ty::BindByValue(_)) if is_binding_by_move(cx, hir_id, span) => {\n-            conflicts_move.push(span) // `ref mut?` + by-move conflict.\n+    sub.each_binding(|_, hir_id, span, name| {\n+        match tables.extract_binding_mode(sess, hir_id, span) {\n+            Some(ty::BindByReference(mut_inner)) => match (mut_outer, mut_inner) {\n+                (Mutability::Not, Mutability::Not) => {} // Both sides are `ref`.\n+                (Mutability::Mut, Mutability::Mut) => conflicts_mut_mut.push((span, name)), // 2x `ref mut`.\n+                _ => conflicts_mut_ref.push((span, name)), // `ref` + `ref mut` in either direction.\n+            },\n+            Some(ty::BindByValue(_)) if is_binding_by_move(cx, hir_id, span) => {\n+                conflicts_move.push((span, name)) // `ref mut?` + by-move conflict.\n+            }\n+            Some(ty::BindByValue(_)) | None => {} // `ref mut?` + by-copy is fine.\n         }\n-        Some(ty::BindByValue(_)) | None => {} // `ref mut?` + by-copy is fine.\n     });\n \n     // Report errors if any.\n     if !conflicts_mut_mut.is_empty() {\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n-        let msg = &format!(\"cannot borrow `{}` as mutable more than once at a time\", name);\n-        sess.struct_span_err(pat.span, msg)\n-            .span_label(binding_span, \"first mutable borrow occurs here\")\n-            .span_labels(conflicts_mut_mut, \"another mutable borrow occurs here\")\n-            .span_labels(conflicts_mut_ref, \"also borrowed as immutable here\")\n-            .span_labels(conflicts_move, \"also moved here\")\n-            .emit();\n+        let mut err = sess\n+            .struct_span_err(pat.span, \"cannot borrow value as mutable more than once at a time\");\n+        err.span_label(binding_span, format!(\"first mutable borrow, by `{}`, occurs here\", name));\n+        for (span, name) in conflicts_mut_mut {\n+            err.span_label(span, format!(\"another mutable borrow, by `{}`, occurs here\", name));\n+        }\n+        for (span, name) in conflicts_mut_ref {\n+            err.span_label(span, format!(\"also borrowed as immutable, by `{}`, here\", name));\n+        }\n+        for (span, name) in conflicts_move {\n+            err.span_label(span, format!(\"also moved into `{}` here\", name));\n+        }\n+        err.emit();\n     } else if !conflicts_mut_ref.is_empty() {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse.\n         let (primary, also) = match mut_outer {\n             Mutability::Mut => (\"mutable\", \"immutable\"),\n             Mutability::Not => (\"immutable\", \"mutable\"),\n         };\n-        let msg = &format!(\n-            \"cannot borrow `{}` as {} because it is also borrowed as {}\",\n-            name, also, primary,\n-        );\n-        sess.struct_span_err(pat.span, msg)\n-            .span_label(binding_span, format!(\"{} borrow occurs here\", primary))\n-            .span_labels(conflicts_mut_ref, format!(\"{} borrow occurs here\", also))\n-            .span_labels(conflicts_move, \"also moved here\")\n-            .emit();\n+        let msg =\n+            format!(\"cannot borrow value as {} because it is also borrowed as {}\", also, primary);\n+        let mut err = sess.struct_span_err(pat.span, &msg);\n+        err.span_label(binding_span, format!(\"{} borrow, by `{}`, occurs here\", primary, name));\n+        for (span, name) in conflicts_mut_ref {\n+            err.span_label(span, format!(\"{} borrow, by `{}`, occurs here\", also, name));\n+        }\n+        for (span, name) in conflicts_move {\n+            err.span_label(span, format!(\"also moved into `{}` here\", name));\n+        }\n+        err.emit();\n     } else if !conflicts_move.is_empty() {\n         // Report by-ref and by-move conflicts, e.g. `ref x @ y`.\n-        let msg = &format!(\"cannot move out of `{}` because it is borrowed\", name);\n-        sess.struct_span_err(pat.span, msg)\n-            .span_label(binding_span, format!(\"borrow of `{}` occurs here\", name))\n-            .span_labels(conflicts_move, format!(\"move out of `{}` occurs here\", name))\n-            .emit();\n+        let mut err =\n+            sess.struct_span_err(pat.span, \"cannot move out of value because it is borrowed\");\n+        err.span_label(binding_span, format!(\"value borrowed, by `{}`, here\", name));\n+        for (span, name) in conflicts_move {\n+            err.span_label(span, format!(\"value moved into `{}` here\", name));\n+        }\n+        err.emit();\n     }\n }\n "}, {"sha": "c00296c34c4e521fd38e6abc838a456776423134", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -12,7 +12,7 @@ struct X {\n fn main() {\n     let x = Some(X { x: () });\n     match x {\n-        Some(ref _y @ _z) => {} //~ ERROR cannot move out of `_y` because it is borrowed\n+        Some(ref _y @ _z) => {} //~ ERROR cannot move out of value because it is borrowed\n         None => panic!(),\n     }\n \n@@ -26,7 +26,7 @@ fn main() {\n \n     let mut x = Some(X { x: () });\n     match x {\n-        Some(ref mut _y @ _z) => {} //~ ERROR cannot move out of `_y` because it is borrowed\n+        Some(ref mut _y @ _z) => {} //~ ERROR cannot move out of value because it is borrowed\n         None => panic!(),\n     }\n "}, {"sha": "026747c212a2c767b96ab88d4312fd1b1aa1002e", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,39 +1,39 @@\n-error: cannot move out of `_y` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:15:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ------^^^--\n    |              |        |\n-   |              |        move out of `_y` occurs here\n-   |              borrow of `_y` occurs here\n+   |              |        value moved into `_z` here\n+   |              value borrowed, by `_y`, here\n \n-error: borrow of moved value: `_z`\n+error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              --^^^------\n    |              |    |\n    |              |    value borrowed here after move\n-   |              value moved here\n+   |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n \n-error: cannot move out of `_y` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:29:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ----------^^^--\n    |              |            |\n-   |              |            move out of `_y` occurs here\n-   |              borrow of `_y` occurs here\n+   |              |            value moved into `_z` here\n+   |              value borrowed, by `_y`, here\n \n-error: borrow of moved value: `_z`\n+error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              --^^^----------\n    |              |    |\n    |              |    value borrowed here after move\n-   |              value moved here\n+   |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n \n error[E0382]: borrow of moved value"}, {"sha": "32c638bcbcca366f085397f4d5c409748c1ec534", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -34,37 +34,37 @@ fn main() {\n         a @ box b => {} //~ ERROR use of moved value\n     }\n \n-    let ref a @ box b = Box::new(NC); //~ ERROR cannot move out of `a` because it is borrowed\n+    let ref a @ box b = Box::new(NC); //~ ERROR cannot move out of value because it is borrowed\n \n     let ref a @ box ref mut b = Box::new(nc());\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *b = NC;\n     let ref a @ box ref mut b = Box::new(NC);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *b = NC;\n     drop(a);\n \n     let ref mut a @ box ref b = Box::new(NC);\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n     *a = Box::new(NC);\n     drop(b);\n \n     fn f5(ref mut a @ box ref b: Box<NC>) {\n-        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n         *a = Box::new(NC);\n         drop(b);\n     }\n \n     match Box::new(nc()) {\n         ref mut a @ box ref b => {\n-            //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+            //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n             //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n             *a = Box::new(NC);\n             drop(b);"}, {"sha": "5534d0a75e63dabc0741efb0d02a64bfc8e75520", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,74 +1,74 @@\n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-at-and-box.rs:37:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n    |         |           |\n-   |         |           move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |           value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:39:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |           mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:41:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |           mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |           mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:46:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |           mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:52:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n    |         |               |\n-   |         |               immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |               immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:66:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n    |         |               |\n-   |         |               immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |               immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:58:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n    |           |               |\n-   |           |               immutable borrow occurs here\n-   |           mutable borrow occurs here\n+   |           |               immutable borrow, by `b`, occurs here\n+   |           mutable borrow, by `a`, occurs here\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:21:18"}, {"sha": "91fdfd4f2abcc094cf87659d87679aba40da2f3e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,11 +1,11 @@\n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:9:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n    |         |   |\n    |         |   value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n \n error: aborting due to previous error"}, {"sha": "ec86692dc6962c287542da93ede6f2b7e6606f17", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,261 +1,261 @@\n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n    |         |   |\n    |         |   value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n    |         |            |              |\n    |         |            |              value borrowed here after move\n    |         |            value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              -----^^^---------\n    |              |       |\n    |              |       value borrowed here after move\n-   |              value moved here\n+   |              value moved into `b` here\n    |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `d`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 -^^^-----\n    |                                 |   |\n    |                                 |   value borrowed here after move\n-   |                                 value moved here\n+   |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         -^^^^---------^^-----^\n    |         |    |          |\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:9\n    |\n LL |     let a @ ref b = u();\n    |         -^^^-----\n    |         |   |\n    |         |   value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n    |         |            |              |\n    |         |            |              value borrowed here after move\n    |         |            value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              -----^^^---------\n    |              |       |\n    |              |       value borrowed here after move\n-   |              value moved here\n+   |              value moved into `b` here\n    |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `d`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 -^^^-----\n    |                                 |   |\n    |                                 |   value borrowed here after move\n-   |                                 value moved here\n+   |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         -^^^^---------^^-----^\n    |         |    |          |\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:56:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n    |         |        |\n    |         |        value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n    |         |                 |              |\n    |         |                 |              value borrowed here after move\n    |         |                 value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n    |                   |       |\n    |                   |       value borrowed here after move\n-   |                   value moved here\n+   |                   value moved into `b` here\n    |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `d`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n    |                                      |   |\n    |                                      |   value borrowed here after move\n-   |                                      value moved here\n+   |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n    |         |             |      |\n    |         |             |      value borrowed here after move\n    |         |             value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n    |         |        |\n    |         |        value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n    |         |                 |              |\n    |         |                 |              value borrowed here after move\n    |         |                 value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n    |                   |       |\n    |                   |       value borrowed here after move\n-   |                   value moved here\n+   |                   value moved into `b` here\n    |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `d`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n    |                                      |   |\n    |                                      |   value borrowed here after move\n-   |                                      value moved here\n+   |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n    |         |             |      |\n    |         |             |      value borrowed here after move\n    |         |             value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f1(a @ ref b: U) {}\n    |           -^^^-----\n    |           |   |\n    |           |   value borrowed here after move\n-   |           value moved here\n+   |           value moved into `a` here\n    |           move occurs because `a` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           -----^^^^^^^^-----^^^^^^^^^^-----^\n    |           |            |              |\n    |           |            |              value borrowed here after move\n    |           |            value borrowed here after move\n-   |           value moved here\n+   |           value moved into `a` here\n    |           move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    -^^^-----\n    |                    |   |\n    |                    |   value borrowed here after move\n-   |                    value moved here\n+   |                    value moved into `b` here\n    |                    move occurs because `b` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `d`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               -----^^^-----\n    |                               |       |\n    |                               |       value borrowed here after move\n-   |                               value moved here\n+   |                               value moved into `d` here\n    |                               move occurs because `d` has type `main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           -^^^^---------^^-----^\n    |           |    |          |\n    |           |    |          value borrowed here after move\n    |           |    value borrowed here after move\n-   |           value moved here\n+   |           value moved into `a` here\n    |           move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n \n error[E0382]: borrow of moved value"}, {"sha": "b7c8c8766c00a150dfe66bde101c153862893069", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -12,63 +12,63 @@ fn main() {\n     }\n \n     fn f1(ref a @ b: U) {}\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n-    //~| ERROR cannot move out of `b` because it is borrowed\n-    //~| ERROR cannot move out of `d` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n \n     let ref a @ b = U;\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n-    //~| ERROR cannot move out of `b` because it is borrowed\n-    //~| ERROR cannot move out of `d` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n     let ref mut a @ [b, mut c] = [U, U];\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n     let ref a @ b = u();\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n-    //~| ERROR cannot move out of `b` because it is borrowed\n-    //~| ERROR cannot move out of `d` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n+    //~| ERROR cannot move out of value because it is borrowed\n     let ref mut a @ [b, mut c] = [u(), u()];\n-    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of value because it is borrowed\n \n     match Some(U) {\n         ref a @ Some(b) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n     match Some((U, U)) {\n         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n-        //~| ERROR cannot move out of `b` because it is borrowed\n-        //~| ERROR cannot move out of `d` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n+        //~| ERROR cannot move out of value because it is borrowed\n+        //~| ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n     match Some([U, U]) {\n         ref mut a @ Some([b, mut c]) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n     match Some(u()) {\n         ref a @ Some(b) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n     match Some((u(), u())) {\n         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n-        //~| ERROR cannot move out of `b` because it is borrowed\n-        //~| ERROR cannot move out of `d` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n+        //~| ERROR cannot move out of value because it is borrowed\n+        //~| ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n     match Some([u(), u()]) {\n         ref mut a @ Some([b, mut c]) => {}\n-        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~^ ERROR cannot move out of value because it is borrowed\n         None => {}\n     }\n }"}, {"sha": "e5419efa00b362551afe436dfe95353a5059dd69", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 85, "deletions": 85, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,237 +1,237 @@\n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:23:9\n    |\n LL |     let ref a @ b = U;\n    |         -----^^^-\n    |         |       |\n-   |         |       move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |       value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:25:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |         |                |              |\n-   |         |                |              move out of `a` occurs here\n-   |         |                move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                |              value moved into `e` here\n+   |         |                value moved into `c` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:25:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n    |                  |       |\n-   |                  |       move out of `b` occurs here\n-   |                  borrow of `b` occurs here\n+   |                  |       value moved into `c` here\n+   |                  value borrowed, by `b`, here\n \n-error: cannot move out of `d` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:25:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n    |                                 |       |\n-   |                                 |       move out of `d` occurs here\n-   |                                 borrow of `d` occurs here\n+   |                                 |       value moved into `e` here\n+   |                                 value borrowed, by `d`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:29:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n    |         |            |  |\n-   |         |            |  move out of `a` occurs here\n-   |         |            move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |            |  value moved into `c` here\n+   |         |            value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:31:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n    |         |       |\n-   |         |       move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |       value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |         |                |              |\n-   |         |                |              move out of `a` occurs here\n-   |         |                move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                |              value moved into `e` here\n+   |         |                value moved into `c` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n    |                  |       |\n-   |                  |       move out of `b` occurs here\n-   |                  borrow of `b` occurs here\n+   |                  |       value moved into `c` here\n+   |                  value borrowed, by `b`, here\n \n-error: cannot move out of `d` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n    |                                 |       |\n-   |                                 |       move out of `d` occurs here\n-   |                                 borrow of `d` occurs here\n+   |                                 |       value moved into `e` here\n+   |                                 value borrowed, by `d`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:37:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n    |         |            |  |\n-   |         |            |  move out of `a` occurs here\n-   |         |            move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |            |  value moved into `c` here\n+   |         |            value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:41:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n    |         |            |\n-   |         |            move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |            value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:46:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n    |         |                     |              |\n-   |         |                     |              move out of `a` occurs here\n-   |         |                     move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                     |              value moved into `e` here\n+   |         |                     value moved into `c` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:46:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n    |                       |       |\n-   |                       |       move out of `b` occurs here\n-   |                       borrow of `b` occurs here\n+   |                       |       value moved into `c` here\n+   |                       value borrowed, by `b`, here\n \n-error: cannot move out of `d` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:46:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n    |                                      |       |\n-   |                                      |       move out of `d` occurs here\n-   |                                      borrow of `d` occurs here\n+   |                                      |       value moved into `e` here\n+   |                                      value borrowed, by `d`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:53:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n    |         |                 |  |\n-   |         |                 |  move out of `a` occurs here\n-   |         |                 move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                 |  value moved into `c` here\n+   |         |                 value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:58:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n    |         |            |\n-   |         |            move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |            value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:63:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n    |         |                     |              |\n-   |         |                     |              move out of `a` occurs here\n-   |         |                     move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                     |              value moved into `e` here\n+   |         |                     value moved into `c` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:63:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n    |                       |       |\n-   |                       |       move out of `b` occurs here\n-   |                       borrow of `b` occurs here\n+   |                       |       value moved into `c` here\n+   |                       value borrowed, by `b`, here\n \n-error: cannot move out of `d` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:63:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n    |                                      |       |\n-   |                                      |       move out of `d` occurs here\n-   |                                      borrow of `d` occurs here\n+   |                                      |       value moved into `e` here\n+   |                                      value borrowed, by `d`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:70:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n    |         |                 |  |\n-   |         |                 |  move out of `a` occurs here\n-   |         |                 move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |                 |  value moved into `c` here\n+   |         |                 value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           -----^^^-\n    |           |       |\n-   |           |       move out of `a` occurs here\n-   |           borrow of `a` occurs here\n+   |           |       value moved into `b` here\n+   |           value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |           |                |              |\n-   |           |                |              move out of `a` occurs here\n-   |           |                move out of `a` occurs here\n-   |           borrow of `a` occurs here\n+   |           |                |              value moved into `e` here\n+   |           |                value moved into `c` here\n+   |           value borrowed, by `a`, here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n    |                    |       |\n-   |                    |       move out of `b` occurs here\n-   |                    borrow of `b` occurs here\n+   |                    |       value moved into `c` here\n+   |                    value borrowed, by `b`, here\n \n-error: cannot move out of `d` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n    |                                   |       |\n-   |                                   |       move out of `d` occurs here\n-   |                                   borrow of `d` occurs here\n+   |                                   |       value moved into `e` here\n+   |                                   value borrowed, by `d`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^\n    |           |            |  |\n-   |           |            |  move out of `a` occurs here\n-   |           |            move out of `a` occurs here\n-   |           borrow of `a` occurs here\n+   |           |            |  value moved into `c` here\n+   |           |            value moved into `b` here\n+   |           value borrowed, by `a`, here\n \n error: aborting due to 25 previous errors\n "}, {"sha": "58d4a9b018cee407c8cbba56a9912035112e836f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -9,7 +9,7 @@ enum Option<T> {\n fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n-        //~^ ERROR cannot borrow `z` as immutable because it is also borrowed as mutable\n+        //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n             **z = None;\n             println!(\"{}\", *a);\n@@ -23,61 +23,61 @@ fn main() {\n     fn u() -> U { U }\n \n     fn f1(ref a @ ref mut b: U) {}\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     fn f2(ref mut a @ ref b: U) {}\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n-    //~| ERROR cannot move out of `b` because it is borrowed\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot move out of value because it is borrowed\n \n     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-    //~| ERROR cannot borrow `b` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n+    //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n \n     let ref a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref mut a @ ref b = U;\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     let ref mut a @ (ref b, ref c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n \n     let ref mut a @ ref b = u();\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n     *a = u();\n     drop(b);\n     let ref a @ ref mut b = u();\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *b = u();\n     drop(a);\n \n     let ref mut a @ ref b = U;\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n     *a = U;\n     drop(b);\n     let ref a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *b = U;\n     drop(a);\n \n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n-            //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n-            //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+            //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+            //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n             *a = Err(U);\n             drop(b);\n         }\n     }\n \n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n-            //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+            //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+            //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n             //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n             //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n             *b = U;\n@@ -87,52 +87,52 @@ fn main() {\n \n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-        //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n-        //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         //~| ERROR cannot assign to `*b`, as it is immutable for the pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n-        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         //~| ERROR cannot assign to `*a`, as it is immutable for the pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-        //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n-        //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         //~| ERROR cannot move out of `b` in pattern guard\n         //~| ERROR cannot move out of `b` in pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         //~| ERROR cannot move out of `a` in pattern guard\n         //~| ERROR cannot move out of `a` in pattern guard\n         _ => {}\n     }\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *b = U;\n     *c = U;\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *b = U;\n     drop(a);\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n     *b = U; //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *c = U; //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     drop(a);\n     let ref mut a @ (ref b, ref c) = (U, U);\n-    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n }"}, {"sha": "8c6ca888e0762588dfaa28e5ea9ddeeda61fc141", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 104, "deletions": 104, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,298 +1,298 @@\n-error: cannot borrow `z` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n    |         |                     |\n-   |         |                     immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |                     immutable borrow, by `a`, occurs here\n+   |         mutable borrow, by `z`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n    |         |            |       |\n-   |         |            |       another mutable borrow occurs here\n-   |         |            also borrowed as immutable here\n-   |         first mutable borrow occurs here\n+   |         |            |       another mutable borrow, by `c`, occurs here\n+   |         |            also borrowed as immutable, by `b`, here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `b` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n    |                      |       |\n-   |                      |       mutable borrow occurs here\n-   |                      immutable borrow occurs here\n+   |                      |       mutable borrow, by `c`, occurs here\n+   |                      immutable borrow, by `b`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |       mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |           immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow occurs here\n-   |         |        mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |        |          mutable borrow, by `c`, occurs here\n+   |         |        mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n    |         |            |      |\n-   |         |            |      immutable borrow occurs here\n-   |         |            immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |            |      immutable borrow, by `c`, occurs here\n+   |         |            immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |           immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |       mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |           immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |       mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |              immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow occurs here\n-   |                                 mutable borrow occurs here\n+   |                                 |               immutable borrow, by `b`, occurs here\n+   |                                 mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |          mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow occurs here\n-   |                                 immutable borrow occurs here\n+   |                                 |           mutable borrow, by `b`, occurs here\n+   |                                 immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |          mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow occurs here\n-   |                                 immutable borrow occurs here\n+   |                                 |           mutable borrow, by `b`, occurs here\n+   |                                 immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |              immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow occurs here\n-   |                                 mutable borrow occurs here\n+   |                                 |               immutable borrow, by `b`, occurs here\n+   |                                 mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |          mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow occurs here\n-   |                                 immutable borrow occurs here\n+   |                                 |           mutable borrow, by `b`, occurs here\n+   |                                 immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |              immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow occurs here\n-   |                                 mutable borrow occurs here\n+   |                                 |               immutable borrow, by `b`, occurs here\n+   |                                 mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow occurs here\n-   |         |        mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |        |          mutable borrow, by `c`, occurs here\n+   |         |        mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow occurs here\n-   |         |        mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |        |          mutable borrow, by `c`, occurs here\n+   |         |        mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow occurs here\n-   |         |        mutable borrow occurs here\n-   |         immutable borrow occurs here\n+   |         |        |          mutable borrow, by `c`, occurs here\n+   |         |        mutable borrow, by `b`, occurs here\n+   |         immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n    |         |            |      |\n-   |         |            |      immutable borrow occurs here\n-   |         |            immutable borrow occurs here\n-   |         mutable borrow occurs here\n+   |         |            |      immutable borrow, by `c`, occurs here\n+   |         |            immutable borrow, by `b`, occurs here\n+   |         mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n    |           |       |\n-   |           |       mutable borrow occurs here\n-   |           immutable borrow occurs here\n+   |           |       mutable borrow, by `b`, occurs here\n+   |           immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n    |           |           |\n-   |           |           immutable borrow occurs here\n-   |           mutable borrow occurs here\n+   |           |           immutable borrow, by `b`, occurs here\n+   |           mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n    |           |               |\n-   |           |               mutable borrow occurs here\n-   |           immutable borrow occurs here\n+   |           |               mutable borrow, by `mid`, occurs here\n+   |           immutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      -----^^^-------------\n    |                      |       |           |\n-   |                      |       |           also moved here\n-   |                      |       mutable borrow occurs here\n-   |                      immutable borrow occurs here\n+   |                      |       |           also moved into `c` here\n+   |                      |       mutable borrow, by `b`, occurs here\n+   |                      immutable borrow, by `a`, occurs here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              ---------^^^-\n    |                              |           |\n-   |                              |           move out of `b` occurs here\n-   |                              borrow of `b` occurs here\n+   |                              |           value moved into `c` here\n+   |                              value borrowed, by `b`, here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31"}, {"sha": "f5c39a7ac527662ed061a2fc4cdad569913e0d45", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -9,42 +9,42 @@ fn main() {\n     fn u() -> U { U }\n \n     fn f1(ref mut a @ ref mut b: U) {}\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     fn f2(ref mut a @ ref mut b: U) {}\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     fn f3(\n         ref mut a @ [\n-        //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+        //~^ ERROR cannot borrow value as mutable more than once at a time\n             [ref b @ .., _],\n             [_, ref mut mid @ ..],\n             ..,\n             [..],\n         ] : [[U; 4]; 5]\n     ) {}\n     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-    //~| ERROR cannot move out of `b` because it is borrowed\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n+    //~| ERROR cannot move out of value because it is borrowed\n \n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     //~| ERROR cannot borrow `_` as mutable more than once at a time\n     drop(a);\n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     drop(b);\n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n \n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     //~| ERROR cannot borrow `_` as mutable more than once at a time\n     *a = U;\n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n     *b = U;\n \n     let ref mut a @ (\n-    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~^ ERROR cannot borrow value as mutable more than once at a time\n         ref mut b,\n         [\n             ref mut c,\n@@ -54,7 +54,7 @@ fn main() {\n     ) = (U, [U, U, U]);\n \n     let ref mut a @ (\n-        //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+        //~^ ERROR cannot borrow value as mutable more than once at a time\n             ref mut b,\n             [\n                 ref mut c,\n@@ -80,21 +80,21 @@ fn main() {\n \n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~^ ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n         }\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~^ ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n             *b = U;\n         }\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~^ ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             *a = Err(U);\n@@ -105,8 +105,8 @@ fn main() {\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n-            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~^ ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             drop(a);"}, {"sha": "4e96c6e1669c78369004dfdea9787415b4f3e483", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 76, "deletions": 76, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,104 +1,104 @@\n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:32:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:42:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |           another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow occurs here\n+   |  _________first mutable borrow, by `a`, occurs here\n    | |\n LL | |\n LL | |         ref mut b,\n-   | |         --------- another mutable borrow occurs here\n+   | |         --------- another mutable borrow, by `b`, occurs here\n LL | |         [\n LL | |             ref mut c,\n-   | |             --------- another mutable borrow occurs here\n+   | |             --------- another mutable borrow, by `c`, occurs here\n LL | |             ref mut d,\n-   | |             --------- another mutable borrow occurs here\n+   | |             --------- another mutable borrow, by `d`, occurs here\n LL | |             ref e,\n-   | |             ----- also borrowed as immutable here\n+   | |             ----- also borrowed as immutable, by `e`, here\n LL | |         ]\n LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow occurs here\n+   |  _________first mutable borrow, by `a`, occurs here\n    | |\n LL | |\n LL | |             ref mut b,\n-   | |             --------- another mutable borrow occurs here\n+   | |             --------- another mutable borrow, by `b`, occurs here\n LL | |             [\n LL | |                 ref mut c,\n-   | |                 --------- another mutable borrow occurs here\n+   | |                 --------- another mutable borrow, by `c`, occurs here\n LL | |                 ref mut d,\n-   | |                 --------- another mutable borrow occurs here\n+   | |                 --------- another mutable borrow, by `d`, occurs here\n LL | |                 ref e,\n-   | |                 ----- also borrowed as immutable here\n+   | |                 ----- also borrowed as immutable, by `e`, here\n LL | |             ]\n LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         -^^^^---------^^---------^\n    |         |    |          |\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n@@ -107,156 +107,156 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         |    |   |  value borrowed here after move\n    |         |    |   value borrowed here after move\n    |         |    value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (main::U, [main::U; 2])` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         -^^^^^^^^---------\n    |         |        |\n    |         |        value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `&mut main::U` which does implement the `Copy` trait\n \n-error: borrow of moved value: `a`\n+error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:77:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         -^^^^^^^^^---------^^---------^\n    |         |         |          |\n    |         |         |          value borrowed here after move\n    |         |         value borrowed here after move\n-   |         value moved here\n+   |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (main::U, main::U)` which does implement the `Copy` trait\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |              another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow occurs here\n-   |                                     first mutable borrow occurs here\n+   |                                     |               another mutable borrow, by `b`, occurs here\n+   |                                     first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:88:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |              another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:88:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow occurs here\n-   |                                     first mutable borrow occurs here\n+   |                                     |               another mutable borrow, by `b`, occurs here\n+   |                                     first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:95:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |              another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:95:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow occurs here\n-   |                                     first mutable borrow occurs here\n+   |                                     |               another mutable borrow, by `b`, occurs here\n+   |                                     first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:107:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow occurs here\n-   |         first mutable borrow occurs here\n+   |         |              another mutable borrow, by `b`, occurs here\n+   |         first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:107:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow occurs here\n-   |                                     first mutable borrow occurs here\n+   |                                     |               another mutable borrow, by `b`, occurs here\n+   |                                     first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:11:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n    |           |           |\n-   |           |           another mutable borrow occurs here\n-   |           first mutable borrow occurs here\n+   |           |           another mutable borrow, by `b`, occurs here\n+   |           first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:13:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n    |           |           |\n-   |           |           another mutable borrow occurs here\n-   |           first mutable borrow occurs here\n+   |           |           another mutable borrow, by `b`, occurs here\n+   |           first mutable borrow, by `a`, occurs here\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow occurs here\n+   |  _________first mutable borrow, by `a`, occurs here\n    | |\n LL | |\n LL | |             [ref b @ .., _],\n-   | |              ---------- also borrowed as immutable here\n+   | |              ---------- also borrowed as immutable, by `b`, here\n LL | |             [_, ref mut mid @ ..],\n-   | |                 ---------------- another mutable borrow occurs here\n+   | |                 ---------------- another mutable borrow, by `mid`, occurs here\n LL | |             ..,\n LL | |             [..],\n LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n-error: cannot borrow `a` as mutable more than once at a time\n+error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:24:22\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ---------^^^-------------\n    |                      |           |           |\n-   |                      |           |           also moved here\n-   |                      |           another mutable borrow occurs here\n-   |                      first mutable borrow occurs here\n+   |                      |           |           also moved into `c` here\n+   |                      |           another mutable borrow, by `b`, occurs here\n+   |                      first mutable borrow, by `a`, occurs here\n \n-error: cannot move out of `b` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:24:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  ---------^^^-\n    |                                  |           |\n-   |                                  |           move out of `b` occurs here\n-   |                                  borrow of `b` occurs here\n+   |                                  |           value moved into `c` here\n+   |                                  value borrowed, by `b`, here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:28:21"}, {"sha": "b40c3e3358aa317abf1e75a863a7f218d8999c1b", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -25,24 +25,24 @@ fn main() {\n     let ref a @ b = &NotCopy; // OK\n     let _: &&NotCopy = a;\n \n-    let ref a @ b = NotCopy; //~ ERROR cannot move out of `a` because it is borrowed\n+    let ref a @ b = NotCopy; //~ ERROR cannot move out of value because it is borrowed\n     let _a: &NotCopy = a;\n     let _b: NotCopy = b;\n-    let ref mut a @ b = NotCopy; //~ ERROR cannot move out of `a` because it is borrowed\n+    let ref mut a @ b = NotCopy; //~ ERROR cannot move out of value because it is borrowed\n     //~^ ERROR cannot move out of `_` because it is borrowed\n     let _a: &NotCopy = a;\n     let _b: NotCopy = b;\n     match Ok(NotCopy) {\n         Ok(ref a @ b) | Err(b @ ref a) => {\n-            //~^ ERROR cannot move out of `a` because it is borrowed\n-            //~| ERROR borrow of moved value: `b`\n+            //~^ ERROR cannot move out of value because it is borrowed\n+            //~| ERROR borrow of moved value\n             let _a: &NotCopy = a;\n             let _b: NotCopy = b;\n         }\n     }\n     match NotCopy {\n         ref a @ b => {\n-            //~^ ERROR cannot move out of `a` because it is borrowed\n+            //~^ ERROR cannot move out of value because it is borrowed\n             let _a: &NotCopy = a;\n             let _b: NotCopy = b;\n         }"}, {"sha": "697a8b96e6318a63134f4b9980773d5a7bacf1e7", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd318be05dab2e1149595aacbf3d808559fa42dc/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=bd318be05dab2e1149595aacbf3d808559fa42dc", "patch": "@@ -1,48 +1,48 @@\n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:28:9\n    |\n LL |     let ref a @ b = NotCopy;\n    |         -----^^^-\n    |         |       |\n-   |         |       move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |       value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:31:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ---------^^^-\n    |         |           |\n-   |         |           move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |           value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:36:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            -----^^^-\n    |            |       |\n-   |            |       move out of `a` occurs here\n-   |            borrow of `a` occurs here\n+   |            |       value moved into `b` here\n+   |            value borrowed, by `a`, here\n \n-error: borrow of moved value: `b`\n+error: borrow of moved value\n   --> $DIR/default-binding-modes-both-sides-independent.rs:36:29\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             -^^^-----\n    |                             |   |\n    |                             |   value borrowed here after move\n-   |                             value moved here\n+   |                             value moved into `b` here\n    |                             move occurs because `b` has type `main::NotCopy` which does implement the `Copy` trait\n \n-error: cannot move out of `a` because it is borrowed\n+error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:44:9\n    |\n LL |         ref a @ b => {\n    |         -----^^^-\n    |         |       |\n-   |         |       move out of `a` occurs here\n-   |         borrow of `a` occurs here\n+   |         |       value moved into `b` here\n+   |         value borrowed, by `a`, here\n \n error[E0505]: cannot move out of `_` because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:31:21"}]}