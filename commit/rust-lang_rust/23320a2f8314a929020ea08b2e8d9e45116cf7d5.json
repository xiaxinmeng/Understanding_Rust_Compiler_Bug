{"sha": "23320a2f8314a929020ea08b2e8d9e45116cf7d5", "node_id": "C_kwDOAAsO6NoAKDIzMzIwYTJmODMxNGE5MjkwMjBlYTA4YjJlOGQ5ZTQ1MTE2Y2Y3ZDU", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-03-23T04:28:04Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-03-23T05:33:43Z"}, "message": "Command: handle exe and batch files separately", "tree": {"sha": "6cc4b11d159b66a404d5be2494d8b70e23166c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc4b11d159b66a404d5be2494d8b70e23166c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23320a2f8314a929020ea08b2e8d9e45116cf7d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmI6sTgACgkQcTRy8vRW\nJ96LGg//atg1VLyMjXn1BOgsojyFvKfH5TXbFHMRa5CcTRS42pB3BXU28168YpuS\nMMij7Aw5Nq5f2vsYhDdld1cuTNZXRLn9kZBkRAB9e6sR378eppAzVuAunRtBRc90\ncSjiigNvkZtVVLv7+zKDIRPuOs57UCPhVP3o9H7pwjodjy4aRowYYqu/hn+hzZ/P\nY+oMZw+MRM+CK7PfBhrBJah7fKIkkw2tsKm4BWHBVWYyqNaU39Yyklt/JudFANha\nnYvg7PceYShEoDMRN7shSEGfxZPggspvgBvBJC74ojIhY6RiyYj0M1LxntDliLSu\n/b8ESqB0lvvxguH0ebP0b42tTFsdqM+x5qZj7rubCxS8F+DcpPOBBCOACP8HymSm\nzmE7kezAKJor1LGQIcvpU4tHSb5bbUYuO9HE5Hqu55w7wm6dqBzMUxJ3Q2Arc80j\nGZzvzECZ9WQUtmqt6uQPgIsieVXjWyykJyEghh5VxWxaR0Pl+PxRCVeaYUWk/8RN\nygOfCazRS35ggIJNtq8lRbVAJIvWsCt6Vn5IyeaW8+BK6JisKe48UGXwGgjekFxE\nbsTo+n/8l56V4kFtpjIjWrHC9KGXtR9qb+/sleC8oyvU63STriuCNVr9i1gy9vYM\nl2AqxAkiJ/VfW7IlsmyF0Z+S6lZihjkxtKx4XS4bGHoJ0NbjXJ8=\n=eA2g\n-----END PGP SIGNATURE-----", "payload": "tree 6cc4b11d159b66a404d5be2494d8b70e23166c17\nparent d59cf5629e3da7c7771c336276ac731bde423484\nauthor Chris Denton <christophersdenton@gmail.com> 1648009684 +0000\ncommitter Chris Denton <christophersdenton@gmail.com> 1648013623 +0000\n\nCommand: handle exe and batch files separately\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23320a2f8314a929020ea08b2e8d9e45116cf7d5", "html_url": "https://github.com/rust-lang/rust/commit/23320a2f8314a929020ea08b2e8d9e45116cf7d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23320a2f8314a929020ea08b2e8d9e45116cf7d5/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d59cf5629e3da7c7771c336276ac731bde423484", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59cf5629e3da7c7771c336276ac731bde423484", "html_url": "https://github.com/rust-lang/rust/commit/d59cf5629e3da7c7771c336276ac731bde423484"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "1d3d3013e7e104ad99cce568de32f311be3a7a68", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=23320a2f8314a929020ea08b2e8d9e45116cf7d5", "patch": "@@ -299,3 +299,89 @@ pub(crate) fn append_arg(cmd: &mut Vec<u16>, arg: &Arg, force_quotes: bool) -> i\n     }\n     Ok(())\n }\n+\n+pub(crate) fn make_bat_command_line(\n+    script: &[u16],\n+    args: &[Arg],\n+    force_quotes: bool,\n+) -> io::Result<Vec<u16>> {\n+    // Set the start of the command line to `cmd.exe /c \"`\n+    // It is necessary to surround the command in an extra pair of quotes,\n+    // hence The trailing quote here. It will be closed after all arguments\n+    // have been added.\n+    let mut cmd: Vec<u16> = \"cmd.exe /c \\\"\".encode_utf16().collect();\n+\n+    // Push the script name surrounded by its quote pair.\n+    cmd.push(b'\"' as u16);\n+    cmd.extend_from_slice(script.strip_suffix(&[0]).unwrap_or(script));\n+    cmd.push(b'\"' as u16);\n+\n+    // Append the arguments.\n+    // FIXME: This needs tests to ensure that the arguments are properly\n+    // reconstructed by the batch script by default.\n+    for arg in args {\n+        cmd.push(' ' as u16);\n+        append_arg(&mut cmd, arg, force_quotes)?;\n+    }\n+\n+    // Close the quote we left opened earlier.\n+    cmd.push(b'\"' as u16);\n+\n+    Ok(cmd)\n+}\n+\n+/// Takes a path and tries to return a non-verbatim path.\n+///\n+/// This is necessary because cmd.exe does not support verbatim paths.\n+pub(crate) fn to_user_path(mut path: Vec<u16>) -> io::Result<Vec<u16>> {\n+    use crate::ptr;\n+    use crate::sys::windows::fill_utf16_buf;\n+\n+    // UTF-16 encoded code points, used in parsing and building UTF-16 paths.\n+    // All of these are in the ASCII range so they can be cast directly to `u16`.\n+    const SEP: u16 = b'\\\\' as _;\n+    const QUERY: u16 = b'?' as _;\n+    const COLON: u16 = b':' as _;\n+    const U: u16 = b'U' as _;\n+    const N: u16 = b'N' as _;\n+    const C: u16 = b'C' as _;\n+\n+    // Early return if the path is too long to remove the verbatim prefix.\n+    const LEGACY_MAX_PATH: usize = 260;\n+    if path.len() > LEGACY_MAX_PATH {\n+        return Ok(path);\n+    }\n+\n+    match &path[..] {\n+        // `\\\\?\\C:\\...` => `C:\\...`\n+        [SEP, SEP, QUERY, SEP, _, COLON, SEP, ..] => unsafe {\n+            let lpfilename = path[4..].as_ptr();\n+            fill_utf16_buf(\n+                |buffer, size| c::GetFullPathNameW(lpfilename, size, buffer, ptr::null_mut()),\n+                |full_path: &[u16]| {\n+                    if full_path == &path[4..path.len() - 1] { full_path.into() } else { path }\n+                },\n+            )\n+        },\n+        // `\\\\?\\UNC\\...` => `\\\\...`\n+        [SEP, SEP, QUERY, SEP, U, N, C, SEP, ..] => unsafe {\n+            // Change the `C` in `UNC\\` to `\\` so we can get a slice that starts with `\\\\`.\n+            path[6] = b'\\\\' as u16;\n+            let lpfilename = path[6..].as_ptr();\n+            fill_utf16_buf(\n+                |buffer, size| c::GetFullPathNameW(lpfilename, size, buffer, ptr::null_mut()),\n+                |full_path: &[u16]| {\n+                    if full_path == &path[6..path.len() - 1] {\n+                        full_path.into()\n+                    } else {\n+                        // Restore the 'C' in \"UNC\".\n+                        path[6] = b'C' as u16;\n+                        path\n+                    }\n+                },\n+            )\n+        },\n+        // For everything else, leave the path unchanged.\n+        _ => Ok(path),\n+    }\n+}"}, {"sha": "394513e13d31e4bbd86c0aa92746f1790a185864", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=23320a2f8314a929020ea08b2e8d9e45116cf7d5", "patch": "@@ -267,8 +267,19 @@ impl Command {\n             program.len().checked_sub(5).and_then(|i| program.get(i..)),\n             Some([46, 98 | 66, 97 | 65, 116 | 84, 0] | [46, 99 | 67, 109 | 77, 100 | 68, 0])\n         );\n-        let mut cmd_str =\n-            make_command_line(&program, &self.args, self.force_quotes_enabled, is_batch_file)?;\n+        let (program, mut cmd_str) = if is_batch_file {\n+            (\n+                command_prompt()?,\n+                args::make_bat_command_line(\n+                    &args::to_user_path(program)?,\n+                    &self.args,\n+                    self.force_quotes_enabled,\n+                )?,\n+            )\n+        } else {\n+            let cmd_str = make_command_line(&self.program, &self.args, self.force_quotes_enabled)?;\n+            (program, cmd_str)\n+        };\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n@@ -719,30 +730,17 @@ fn zeroed_process_information() -> c::PROCESS_INFORMATION {\n \n // Produces a wide string *without terminating null*; returns an error if\n // `prog` or any of the `args` contain a nul.\n-fn make_command_line(\n-    prog: &[u16],\n-    args: &[Arg],\n-    force_quotes: bool,\n-    is_batch_file: bool,\n-) -> io::Result<Vec<u16>> {\n+fn make_command_line(argv0: &OsStr, args: &[Arg], force_quotes: bool) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n \n-    // CreateFileW has special handling for .bat and .cmd files, which means we\n-    // need to add an extra pair of quotes surrounding the whole command line\n-    // so they are properly passed on to the script.\n-    // See issue #91991.\n-    if is_batch_file {\n-        cmd.push(b'\"' as u16);\n-    }\n-\n     // Always quote the program name so CreateProcess to avoid ambiguity when\n     // the child process parses its arguments.\n     // Note that quotes aren't escaped here because they can't be used in arg0.\n     // But that's ok because file paths can't contain quotes.\n     cmd.push(b'\"' as u16);\n-    cmd.extend_from_slice(prog.strip_suffix(&[0]).unwrap_or(prog));\n+    cmd.extend(argv0.encode_wide());\n     cmd.push(b'\"' as u16);\n \n     for arg in args {\n@@ -752,6 +750,16 @@ fn make_command_line(\n     Ok(cmd)\n }\n \n+// Get `cmd.exe` for use with bat scripts, encoded as a UTF-16 string.\n+fn command_prompt() -> io::Result<Vec<u16>> {\n+    let mut system: Vec<u16> = super::fill_utf16_buf(\n+        |buf, size| unsafe { c::GetSystemDirectoryW(buf, size) },\n+        |buf| buf.into(),\n+    )?;\n+    system.extend(\"\\\\cmd.exe\".encode_utf16().chain([0]));\n+    Ok(system)\n+}\n+\n fn make_envp(maybe_env: Option<BTreeMap<EnvKey, OsString>>) -> io::Result<(*mut c_void, Vec<u16>)> {\n     // On Windows we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final"}, {"sha": "be3a0f4ed52a981ae13d23b25ad81af8d27665a0", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23320a2f8314a929020ea08b2e8d9e45116cf7d5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=23320a2f8314a929020ea08b2e8d9e45116cf7d5", "patch": "@@ -3,12 +3,11 @@ use super::Arg;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n use crate::process::Command;\n-use crate::sys::to_u16s;\n \n #[test]\n fn test_raw_args() {\n     let command_line = &make_command_line(\n-        &to_u16s(\"quoted exe\").unwrap(),\n+        OsStr::new(\"quoted exe\"),\n         &[\n             Arg::Regular(OsString::from(\"quote me\")),\n             Arg::Raw(OsString::from(\"quote me *not*\")),\n@@ -17,7 +16,6 @@ fn test_raw_args() {\n             Arg::Regular(OsString::from(\"optional-quotes\")),\n         ],\n         false,\n-        false,\n     )\n     .unwrap();\n     assert_eq!(\n@@ -30,10 +28,9 @@ fn test_raw_args() {\n fn test_make_command_line() {\n     fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {\n         let command_line = &make_command_line(\n-            &to_u16s(prog).unwrap(),\n+            OsStr::new(prog),\n             &args.iter().map(|a| Arg::Regular(OsString::from(a))).collect::<Vec<_>>(),\n             force_quotes,\n-            false,\n         )\n         .unwrap();\n         String::from_utf16(command_line).unwrap()"}]}