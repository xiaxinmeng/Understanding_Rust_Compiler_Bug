{"sha": "daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTRkYzk5N2M3Nzc2NzZiMGYwZTQ4ZDAzMTFjYzVlN2JkZTVmODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T15:18:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T15:18:58Z"}, "message": "Auto merge of #88461 - GuillaumeGomez:rollup-khgu0eb, r=GuillaumeGomez\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #80543 (Notify when an `I-prioritize` issue is closed or reopened)\n - #83251 (Suggestion for call on immutable binding of mutable type)\n - #85534 (add rustc-demangle assertion on mangled symbol)\n - #88173 (Refactor Markdown length-limited summary implementation)\n - #88349 (Add const and static TAIT tests)\n - #88357 (add unsized coercion test)\n - #88381 (Handle stack_t.ss_sp type change for DragonFlyBSD)\n - #88387 (Remove vestigial rustfix tests.)\n - #88396 (Bump vulnerable crates)\n - #88407 (Fix formatting in release notes from 52a988344bce11)\n - #88411 (Remove `Session.if_let_suggestions`)\n - #88417 (RELEASES.md: fix broken link)\n - #88419 (Fix code blocks color in Ayu theme)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cebe9c4ba461a25af6002923570c0d0a34ab155f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cebe9c4ba461a25af6002923570c0d0a34ab155f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "html_url": "https://github.com/rust-lang/rust/commit/daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef524710669a003cf2b24361dc6b04b566e560fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef524710669a003cf2b24361dc6b04b566e560fa", "html_url": "https://github.com/rust-lang/rust/commit/ef524710669a003cf2b24361dc6b04b566e560fa"}, {"sha": "26feefddc7f6834658ee9ff4671a7b99a040e60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/26feefddc7f6834658ee9ff4671a7b99a040e60b", "html_url": "https://github.com/rust-lang/rust/commit/26feefddc7f6834658ee9ff4671a7b99a040e60b"}], "stats": {"total": 840, "additions": 626, "deletions": 214}, "files": [{"sha": "74a316ed5f04ef7f210210d058eca26dfe31d02d", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -765,9 +765,9 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-deque\"\n-version = \"0.7.3\"\n+version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285\"\n+checksum = \"c20ff29ded3204c5106278a81a38f4b482636ed4fa1e6cfbeef193291beb29ed\"\n dependencies = [\n  \"crossbeam-epoch\",\n  \"crossbeam-utils 0.7.2\",\n@@ -2368,9 +2368,9 @@ checksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"111.15.0+1.1.1k\"\n+version = \"111.16.0+1.1.1l\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b1a5f6ae2ac04393b217ea9f700cd04fa9bf3d93fae2872069f3d15d908af70a\"\n+checksum = \"7ab2173f69416cf3ec12debb5823d244127d23a9b127d5a5189aa97c5fa2859f\"\n dependencies = [\n  \"cc\",\n ]\n@@ -4968,9 +4968,9 @@ dependencies = [\n \n [[package]]\n name = \"tar\"\n-version = \"0.4.35\"\n+version = \"0.4.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7d779dc6aeff029314570f666ec83f19df7280bb36ef338442cfa8c604021b80\"\n+checksum = \"d6f5515d3add52e0bbdcad7b83c388bb36ba7b754dda3b5f5bc2d38640cdba5c\"\n dependencies = [\n  \"filetime\",\n  \"libc\","}, {"sha": "2124195bcb209bef39423428dcda3208966cfff3", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -70,7 +70,8 @@ Cargo\n - [The package definition in `cargo metadata` now includes the `\"default_run\"`\n   field from the manifest.][cargo/9550]\n - [Added `cargo d` as an alias for `cargo doc`.][cargo/9680]\n-- [Added `{lib}` as formatting option for `cargo tree` to print the \"lib_name\" of packages.][cargo/9663]\n+- [Added `{lib}` as formatting option for `cargo tree` to print the `\"lib_name\"`\n+  of packages.][cargo/9663]\n \n Rustdoc\n -------\n@@ -116,9 +117,11 @@ Compatibility Notes\n [79965]: https://github.com/rust-lang/rust/pull/79965\n [87370]: https://github.com/rust-lang/rust/pull/87370\n [87298]: https://github.com/rust-lang/rust/pull/87298\n+[cargo/9663]: https://github.com/rust-lang/cargo/pull/9663\n [cargo/9675]: https://github.com/rust-lang/cargo/pull/9675\n [cargo/9550]: https://github.com/rust-lang/cargo/pull/9550\n [cargo/9680]: https://github.com/rust-lang/cargo/pull/9680\n+[cargo/9663]: https://github.com/rust-lang/cargo/pull/9663\n [`array::map`]: https://doc.rust-lang.org/stable/std/primitive.array.html#method.map\n [`Bound::cloned`]: https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.cloned\n [`Drain::as_str`]: https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str"}, {"sha": "4e079ed865ac31d4f29ecaea2285fd8d86407811", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -5,11 +5,14 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n+    mir::{\n+        self, BindingForm, ClearCrossCrate, ImplicitSelfKind, Local, LocalDecl, LocalInfo,\n+        LocalKind, Location,\n+    },\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::borrow_check::MirBorrowckCtxt;\n@@ -241,13 +244,74 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .map(|l| mut_borrow_of_mutable_ref(l, self.local_names[local]))\n                     .unwrap_or(false) =>\n             {\n+                let decl = &self.body.local_decls[local];\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_suggestion(\n-                    span,\n-                    \"try removing `&mut` here\",\n-                    String::new(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if let Some(mir::Statement {\n+                    source_info,\n+                    kind:\n+                        mir::StatementKind::Assign(box (\n+                            _,\n+                            mir::Rvalue::Ref(\n+                                _,\n+                                mir::BorrowKind::Mut { allow_two_phase_borrow: false },\n+                                _,\n+                            ),\n+                        )),\n+                    ..\n+                }) = &self.body[location.block].statements.get(location.statement_index)\n+                {\n+                    match decl.local_info {\n+                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            mir::VarBindingForm {\n+                                binding_mode: ty::BindingMode::BindByValue(Mutability::Not),\n+                                opt_ty_info: Some(sp),\n+                                opt_match_place: _,\n+                                pat_span: _,\n+                            },\n+                        )))) => {\n+                            err.span_note(sp, \"the binding is already a mutable borrow\");\n+                        }\n+                        _ => {\n+                            err.span_note(\n+                                decl.source_info.span,\n+                                \"the binding is already a mutable borrow\",\n+                            );\n+                        }\n+                    }\n+                    if let Ok(snippet) =\n+                        self.infcx.tcx.sess.source_map().span_to_snippet(source_info.span)\n+                    {\n+                        if snippet.starts_with(\"&mut \") {\n+                            // We don't have access to the HIR to get accurate spans, but we can\n+                            // give a best effort structured suggestion.\n+                            err.span_suggestion_verbose(\n+                                source_info.span.with_hi(source_info.span.lo() + BytePos(5)),\n+                                \"try removing `&mut` here\",\n+                                String::new(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // This can occur with things like `(&mut self).foo()`.\n+                            err.span_help(source_info.span, \"try removing `&mut` here\");\n+                        }\n+                    } else {\n+                        err.span_help(source_info.span, \"try removing `&mut` here\");\n+                    }\n+                } else if decl.mutability == Mutability::Not\n+                    && !matches!(\n+                        decl.local_info,\n+                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n+                            ImplicitSelfKind::MutRef\n+                        ))))\n+                    )\n+                {\n+                    err.span_suggestion_verbose(\n+                        decl.source_info.span.shrink_to_lo(),\n+                        \"consider making the binding mutable\",\n+                        \"mut \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n \n             // We want to suggest users use `let mut` for local (user"}, {"sha": "b3601ecf1d3ac79438a48f81191b1999bf4d3875", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -215,7 +215,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     \"let \".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-                self.r.session.if_let_suggestions.borrow_mut().insert(*span);\n             }\n             _ => {}\n         }"}, {"sha": "18b9339558797bc2b39228eb637a5085b992d008", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -209,9 +209,6 @@ pub struct Session {\n \n     /// Set of enabled features for the current target.\n     pub target_features: FxHashSet<Symbol>,\n-\n-    /// `Span`s for `if` conditions that we have suggested turning into `if let`.\n-    pub if_let_suggestions: Lock<FxHashSet<Span>>,\n }\n \n pub struct PerfStats {\n@@ -1328,7 +1325,6 @@ pub fn build_session(\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,\n         target_features: FxHashSet::default(),\n-        if_let_suggestions: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "220c9f7e2ec2bbeca37d4835041743be5d7e2e3f", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -246,10 +246,18 @@ fn compute_symbol_name(\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };\n \n-    match mangling_version {\n+    let symbol = match mangling_version {\n         SymbolManglingVersion::Legacy => legacy::mangle(tcx, instance, instantiating_crate),\n         SymbolManglingVersion::V0 => v0::mangle(tcx, instance, instantiating_crate),\n-    }\n+    };\n+\n+    debug_assert!(\n+        rustc_demangle::try_demangle(&symbol).is_ok(),\n+        \"compute_symbol_name: `{}` cannot be demangled\",\n+        symbol\n+    );\n+\n+    symbol\n }\n \n fn is_generic(substs: SubstsRef<'_>) -> bool {"}, {"sha": "51c646e500ca3850e89eba5f9cc989386303f506", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -919,9 +919,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             }\n \n-            if self.sess().if_let_suggestions.borrow().get(&expr.span).is_some() {\n-                // We already emitted an `if let` suggestion due to an identifier not found.\n-                err.delay_as_bug();\n+            // If the assignment expression itself is ill-formed, don't\n+            // bother emitting another error\n+            if lhs_ty.references_error() || rhs_ty.references_error() {\n+                err.delay_as_bug()\n             } else {\n                 err.emit();\n             }"}, {"sha": "e8747e39bcbf4f1cf81f108c3eaf0e4827dd1435", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -161,24 +161,10 @@ mod imp {\n         stackp.add(page_size())\n     }\n \n-    #[cfg(any(\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"freebsd\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\"\n-    ))]\n     unsafe fn get_stack() -> libc::stack_t {\n         libc::stack_t { ss_sp: get_stackp(), ss_flags: 0, ss_size: SIGSTKSZ }\n     }\n \n-    #[cfg(target_os = \"dragonfly\")]\n-    unsafe fn get_stack() -> libc::stack_t {\n-        libc::stack_t { ss_sp: get_stackp() as *mut i8, ss_flags: 0, ss_size: SIGSTKSZ }\n-    }\n-\n     pub unsafe fn make_handler() -> Handler {\n         if !NEED_ALTSTACK.load(Ordering::Relaxed) {\n             return Handler::null();"}, {"sha": "bbdc91c8d2ec8fbbe3b686002cd0bf34e249c32b", "filename": "src/librustdoc/html/length_limit.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,119 @@\n+//! See [`HtmlWithLimit`].\n+\n+use std::fmt::Write;\n+use std::ops::ControlFlow;\n+\n+use crate::html::escape::Escape;\n+\n+/// A buffer that allows generating HTML with a length limit.\n+///\n+/// This buffer ensures that:\n+///\n+/// * all tags are closed,\n+/// * tags are closed in the reverse order of when they were opened (i.e., the correct HTML order),\n+/// * no tags are left empty (e.g., `<em></em>`) due to the length limit being reached,\n+/// * all text is escaped.\n+#[derive(Debug)]\n+pub(super) struct HtmlWithLimit {\n+    buf: String,\n+    len: usize,\n+    limit: usize,\n+    /// A list of tags that have been requested to be opened via [`Self::open_tag()`]\n+    /// but have not actually been pushed to `buf` yet. This ensures that tags are not\n+    /// left empty (e.g., `<em></em>`) due to the length limit being reached.\n+    queued_tags: Vec<&'static str>,\n+    /// A list of all tags that have been opened but not yet closed.\n+    unclosed_tags: Vec<&'static str>,\n+}\n+\n+impl HtmlWithLimit {\n+    /// Create a new buffer, with a limit of `length_limit`.\n+    pub(super) fn new(length_limit: usize) -> Self {\n+        let buf = if length_limit > 1000 {\n+            // If the length limit is really large, don't preallocate tons of memory.\n+            String::new()\n+        } else {\n+            // The length limit is actually a good heuristic for initial allocation size.\n+            // Measurements showed that using it as the initial capacity ended up using less memory\n+            // than `String::new`.\n+            // See https://github.com/rust-lang/rust/pull/88173#discussion_r692531631 for more.\n+            String::with_capacity(length_limit)\n+        };\n+        Self {\n+            buf,\n+            len: 0,\n+            limit: length_limit,\n+            unclosed_tags: Vec::new(),\n+            queued_tags: Vec::new(),\n+        }\n+    }\n+\n+    /// Finish using the buffer and get the written output.\n+    /// This function will close all unclosed tags for you.\n+    pub(super) fn finish(mut self) -> String {\n+        self.close_all_tags();\n+        self.buf\n+    }\n+\n+    /// Write some plain text to the buffer, escaping as needed.\n+    ///\n+    /// This function skips writing the text if the length limit was reached\n+    /// and returns [`ControlFlow::Break`].\n+    pub(super) fn push(&mut self, text: &str) -> ControlFlow<(), ()> {\n+        if self.len + text.len() > self.limit {\n+            return ControlFlow::BREAK;\n+        }\n+\n+        self.flush_queue();\n+        write!(self.buf, \"{}\", Escape(text)).unwrap();\n+        self.len += text.len();\n+\n+        ControlFlow::CONTINUE\n+    }\n+\n+    /// Open an HTML tag.\n+    ///\n+    /// **Note:** HTML attributes have not yet been implemented.\n+    /// This function will panic if called with a non-alphabetic `tag_name`.\n+    pub(super) fn open_tag(&mut self, tag_name: &'static str) {\n+        assert!(\n+            tag_name.chars().all(|c| ('a'..='z').contains(&c)),\n+            \"tag_name contained non-alphabetic chars: {:?}\",\n+            tag_name\n+        );\n+        self.queued_tags.push(tag_name);\n+    }\n+\n+    /// Close the most recently opened HTML tag.\n+    pub(super) fn close_tag(&mut self) {\n+        match self.unclosed_tags.pop() {\n+            // Close the most recently opened tag.\n+            Some(tag_name) => write!(self.buf, \"</{}>\", tag_name).unwrap(),\n+            // There are valid cases where `close_tag()` is called without\n+            // there being any tags to close. For example, this occurs when\n+            // a tag is opened after the length limit is exceeded;\n+            // `flush_queue()` will never be called, and thus, the tag will\n+            // not end up being added to `unclosed_tags`.\n+            None => {}\n+        }\n+    }\n+\n+    /// Write all queued tags and add them to the `unclosed_tags` list.\n+    fn flush_queue(&mut self) {\n+        for tag_name in self.queued_tags.drain(..) {\n+            write!(self.buf, \"<{}>\", tag_name).unwrap();\n+\n+            self.unclosed_tags.push(tag_name);\n+        }\n+    }\n+\n+    /// Close all unclosed tags.\n+    fn close_all_tags(&mut self) {\n+        while !self.unclosed_tags.is_empty() {\n+            self.close_tag();\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "2d02b8a16da67415c0e6b8f8016a318bfe117f89", "filename": "src/librustdoc/html/length_limit/tests.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,120 @@\n+use super::*;\n+\n+#[test]\n+fn empty() {\n+    assert_eq!(HtmlWithLimit::new(0).finish(), \"\");\n+    assert_eq!(HtmlWithLimit::new(60).finish(), \"\");\n+}\n+\n+#[test]\n+fn basic() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"Hello <em>world</em>!\");\n+}\n+\n+#[test]\n+fn no_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.push(\"Hello\");\n+    buf.push(\" world!\");\n+    assert_eq!(buf.finish(), \"Hello world!\");\n+}\n+\n+#[test]\n+fn limit_0() {\n+    let mut buf = HtmlWithLimit::new(0);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"\");\n+}\n+\n+#[test]\n+fn exactly_limit() {\n+    let mut buf = HtmlWithLimit::new(12);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"Hello <em>world</em>!\");\n+}\n+\n+#[test]\n+fn multiple_nested_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"This is a \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"paragraph\");\n+    buf.open_tag(\"strong\");\n+    buf.push(\"!\");\n+    buf.close_tag();\n+    buf.close_tag();\n+    buf.close_tag();\n+    assert_eq!(buf.finish(), \"<p>This is a <em>paragraph<strong>!</strong></em></p>\");\n+}\n+\n+#[test]\n+fn forgot_to_close_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"This is a \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"paragraph\");\n+    buf.open_tag(\"strong\");\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"<p>This is a <em>paragraph<strong>!</strong></em></p>\");\n+}\n+\n+#[test]\n+fn past_the_limit() {\n+    let mut buf = HtmlWithLimit::new(20);\n+    buf.open_tag(\"p\");\n+    (0..10).try_for_each(|n| {\n+        buf.open_tag(\"strong\");\n+        buf.push(\"word#\")?;\n+        buf.push(&n.to_string())?;\n+        buf.close_tag();\n+        ControlFlow::CONTINUE\n+    });\n+    buf.close_tag();\n+    assert_eq!(\n+        buf.finish(),\n+        \"<p>\\\n+             <strong>word#0</strong>\\\n+             <strong>word#1</strong>\\\n+             <strong>word#2</strong>\\\n+             </p>\"\n+    );\n+}\n+\n+#[test]\n+fn quickly_past_the_limit() {\n+    let mut buf = HtmlWithLimit::new(6);\n+    buf.open_tag(\"p\");\n+    buf.push(\"Hello\");\n+    buf.push(\" World\");\n+    // intentionally not closing <p> before finishing\n+    assert_eq!(buf.finish(), \"<p>Hello</p>\");\n+}\n+\n+#[test]\n+fn close_too_many() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"Hello\");\n+    buf.close_tag();\n+    // This call does not panic because there are valid cases\n+    // where `close_tag()` is called with no tags left to close.\n+    // So `close_tag()` does nothing in this case.\n+    buf.close_tag();\n+    assert_eq!(buf.finish(), \"<p>Hello</p>\");\n+}"}, {"sha": "aa3723eddfcce9473e0bae8107b9945c32882c4a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -23,19 +23,21 @@ use rustc_hir::HirId;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::edition::Edition;\n use rustc_span::Span;\n+\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::Write;\n-use std::ops::Range;\n+use std::ops::{ControlFlow, Range};\n use std::str;\n \n use crate::clean::RenderedLink;\n use crate::doctest;\n use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::highlight;\n+use crate::html::length_limit::HtmlWithLimit;\n use crate::html::toc::TocBuilder;\n \n use pulldown_cmark::{\n@@ -1081,15 +1083,6 @@ fn markdown_summary_with_limit(\n         return (String::new(), false);\n     }\n \n-    let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let mut text_length = 0;\n-    let mut stopped_early = false;\n-\n-    fn push(s: &mut String, text_length: &mut usize, text: &str) {\n-        write!(s, \"{}\", Escape(text)).unwrap();\n-        *text_length += text.len();\n-    }\n-\n     let mut replacer = |broken_link: BrokenLink<'_>| {\n         if let Some(link) =\n             link_names.iter().find(|link| &*link.original_text == broken_link.reference)\n@@ -1101,56 +1094,48 @@ fn markdown_summary_with_limit(\n     };\n \n     let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n-    let p = LinkReplacer::new(p, link_names);\n+    let mut p = LinkReplacer::new(p, link_names);\n \n-    'outer: for event in p {\n+    let mut buf = HtmlWithLimit::new(length_limit);\n+    let mut stopped_early = false;\n+    p.try_for_each(|event| {\n         match &event {\n             Event::Text(text) => {\n-                for word in text.split_inclusive(char::is_whitespace) {\n-                    if text_length + word.len() >= length_limit {\n-                        stopped_early = true;\n-                        break 'outer;\n-                    }\n-\n-                    push(&mut s, &mut text_length, word);\n+                let r =\n+                    text.split_inclusive(char::is_whitespace).try_for_each(|word| buf.push(word));\n+                if r.is_break() {\n+                    stopped_early = true;\n                 }\n+                return r;\n             }\n             Event::Code(code) => {\n-                if text_length + code.len() >= length_limit {\n+                buf.open_tag(\"code\");\n+                let r = buf.push(code);\n+                if r.is_break() {\n                     stopped_early = true;\n-                    break;\n+                } else {\n+                    buf.close_tag();\n                 }\n-\n-                s.push_str(\"<code>\");\n-                push(&mut s, &mut text_length, code);\n-                s.push_str(\"</code>\");\n+                return r;\n             }\n             Event::Start(tag) => match tag {\n-                Tag::Emphasis => s.push_str(\"<em>\"),\n-                Tag::Strong => s.push_str(\"<strong>\"),\n-                Tag::CodeBlock(..) => break,\n+                Tag::Emphasis => buf.open_tag(\"em\"),\n+                Tag::Strong => buf.open_tag(\"strong\"),\n+                Tag::CodeBlock(..) => return ControlFlow::BREAK,\n                 _ => {}\n             },\n             Event::End(tag) => match tag {\n-                Tag::Emphasis => s.push_str(\"</em>\"),\n-                Tag::Strong => s.push_str(\"</strong>\"),\n-                Tag::Paragraph => break,\n-                Tag::Heading(..) => break,\n+                Tag::Emphasis | Tag::Strong => buf.close_tag(),\n+                Tag::Paragraph | Tag::Heading(..) => return ControlFlow::BREAK,\n                 _ => {}\n             },\n-            Event::HardBreak | Event::SoftBreak => {\n-                if text_length + 1 >= length_limit {\n-                    stopped_early = true;\n-                    break;\n-                }\n-\n-                push(&mut s, &mut text_length, \" \");\n-            }\n+            Event::HardBreak | Event::SoftBreak => buf.push(\" \")?,\n             _ => {}\n-        }\n-    }\n+        };\n+        ControlFlow::CONTINUE\n+    });\n \n-    (s, stopped_early)\n+    (buf.finish(), stopped_early)\n }\n \n /// Renders a shortened first paragraph of the given Markdown as a subset of Markdown,"}, {"sha": "eca75ef013aae89ea567c29552b16541de9c5799", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -225,6 +225,7 @@ fn test_short_markdown_summary() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n+    t(\"\", \"\");\n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n     t(\"*italic*\", \"<em>italic</em>\");\n     t(\"**bold**\", \"<strong>bold</strong>\");\n@@ -264,6 +265,7 @@ fn test_plain_text_summary() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n+    t(\"\", \"\");\n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n     t(\"**bold**\", \"bold\");\n     t(\"Multi-line\\nsummary\", \"Multi-line summary\");"}, {"sha": "109b0a356db5ff26f352701edea20ba12f152462", "filename": "src/librustdoc/html/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmod.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -2,6 +2,7 @@ crate mod escape;\n crate mod format;\n crate mod highlight;\n crate mod layout;\n+mod length_limit;\n // used by the error-index generator, so it needs to be public\n pub mod markdown;\n crate mod render;"}, {"sha": "f9ddef4120bbec8c69c0ba92ab2f3c854850f976", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -40,7 +40,7 @@ h4 {\n .code-header {\n \tcolor: #e6e1cf;\n }\n-pre > code {\n+.docblock pre > code, pre > code {\n \tcolor: #e6e1cf;\n }\n span code {"}, {"sha": "de32e31ca872fd05a1a0ebf9ade93e58060a5da8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -5,6 +5,7 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(test)]"}, {"sha": "50af36fa3d6412c6b1e45934b64199c8c895580f", "filename": "src/test/rustdoc-gui/ayu-code-tag-colors.goml", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,13 +0,0 @@\n-// The ayu theme has a different color for the \"<code>\" tags in the doc blocks. We need to\n-// check that the rule isn't applied on other \"<code>\" elements.\n-goto: file://|DOC_PATH|/test_docs/enum.AnEnum.html\n-// We need to show the text, otherwise the colors aren't \"computed\" by the web browser.\n-show-text: true\n-// We set the theme to ayu.\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload to get the text appearing and the theme applied.\n-reload:\n-\n-assert-css: (\".docblock code\", {\"color\": \"rgb(255, 180, 84)\"}, ALL)\n-// It includes variants and the \"titles\" as well (for example: \"impl RefUnwindSafe for AnEnum\").\n-assert-css: (\"div:not(.docblock) > code\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)"}, {"sha": "2f95bfb6b177f89eaa98f91ede0042c211d80df5", "filename": "src/test/rustdoc-gui/code-color.goml", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,30 @@\n+// The ayu theme has a different color for the \"<code>\" tags in the doc blocks. We need to\n+// check that the rule isn't applied on other \"<code>\" elements.\n+//\n+// While we're at it, we also check it for the other themes.\n+goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+// If the text isn't displayed, the browser doesn't compute color style correctly...\n+show-text: true\n+// Set the theme to dark.\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\".docblock pre > code\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+assert-css: (\".docblock > p > code\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+\n+// Set the theme to ayu.\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\".docblock pre > code\", {\"color\": \"rgb(230, 225, 207)\"}, ALL)\n+assert-css: (\".docblock > p > code\", {\"color\": \"rgb(255, 180, 84)\"}, ALL)\n+\n+// Set the theme to light.\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\".docblock pre > code\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n+assert-css: (\".docblock > p > code\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)"}, {"sha": "af4f28047fc0d7b6e1bf50c4dab78f06ff2afca8", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -25,6 +25,8 @@ use std::fmt;\n /// ```ignore (it's a test)\n /// Let's say I'm just some text will ya?\n /// ```\n+///\n+/// An inlined `code`!\n pub fn foo() {}\n \n /// Just a normal struct."}, {"sha": "05bbc13d714fac81c2f05c131a0a0dd1d7b0cb75", "filename": "src/test/rustfix/closure-immutable-outer-variable.fixed", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,10 +0,0 @@\n-// Point at the captured immutable outer variable\n-\n-fn foo(mut f: Box<FnMut()>) {\n-    f();\n-}\n-\n-fn main() {\n-    let mut y = true;\n-    foo(Box::new(move || y = false) as Box<_>);\n-}"}, {"sha": "6ed1bc12cb521774e49af95a884ff17c58dcac67", "filename": "src/test/rustfix/closure-immutable-outer-variable.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,10 +0,0 @@\n-// Point at the captured immutable outer variable\n-\n-fn foo(mut f: Box<FnMut()>) {\n-    f();\n-}\n-\n-fn main() {\n-    let y = true;\n-    foo(Box::new(move || y = false) as Box<_>);\n-}"}, {"sha": "3724a00ce7ce09d157a982f40fb67ab51a9f59e7", "filename": "src/test/rustfix/empty-no-fixes.fixed", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1 +0,0 @@\n-// compile-flags:--crate-type lib"}, {"sha": "3724a00ce7ce09d157a982f40fb67ab51a9f59e7", "filename": "src/test/rustfix/empty-no-fixes.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1 +0,0 @@\n-// compile-flags:--crate-type lib"}, {"sha": "e30d3ae0965ae3a3e541a579f3426012202621f7", "filename": "src/test/rustfix/empty-no-fixes.rs.fixed", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,2 +0,0 @@\n-// compile-flags:--crate-type lib\n-fn foo() {}"}, {"sha": "955b2cbf899ba68501d64b4e8347d728f287c71c", "filename": "src/test/rustfix/issue-45562.fixed", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45562.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-#[no_mangle] pub static RAH: usize = 5;\n-\n-fn main() {}"}, {"sha": "a1ac07044e2c2f4f12dd2783d8dfa2f86547aae7", "filename": "src/test/rustfix/issue-45562.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45562.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-#[no_mangle] pub const RAH: usize = 5;\n-\n-fn main() {}"}, {"sha": "b4ae4dc1ab2f8727646a01705f616443f093bb56", "filename": "src/test/rustfix/issue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,2 +0,0 @@\n-extern crate std as other_std;\n-fn main() {}"}, {"sha": "a202b6c389a8c43e9cbafabcfd13302525ebf208", "filename": "src/test/rustfix/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,2 +0,0 @@\n-extern crate std;\n-fn main() {}"}, {"sha": "bedc8e15ace6ebd7d665b7b3ed21ba6c94a8d2ad", "filename": "src/test/rustfix/issue-46756-consider-borrowing-cast-or-binexpr.fixed", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,12 +0,0 @@\n-#![allow(unused)]\n-\n-fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n-    and_yet + 1\n-}\n-\n-fn main() {\n-    let behold: isize = 2;\n-    let with_tears: usize = 3;\n-    light_flows_our_war_of_mocking_words(&(behold as usize));\n-    light_flows_our_war_of_mocking_words(&(with_tears + 4));\n-}"}, {"sha": "9c7ae9657c003615825111d49376a4d6c38bc4dd", "filename": "src/test/rustfix/issue-46756-consider-borrowing-cast-or-binexpr.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,12 +0,0 @@\n-#![allow(unused)]\n-\n-fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n-    and_yet + 1\n-}\n-\n-fn main() {\n-    let behold: isize = 2;\n-    let with_tears: usize = 3;\n-    light_flows_our_war_of_mocking_words(behold as usize);\n-    light_flows_our_war_of_mocking_words(with_tears + 4);\n-}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/rustfix/main-no-fixes.fixed", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1 +0,0 @@\n-fn main() {}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/rustfix/main-no-fixes.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1 +0,0 @@\n-fn main() {}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/rustfix/main-no-fixes.rs.fixed", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1 +0,0 @@\n-fn main() {}"}, {"sha": "d4696ab9547a6a22828a92baed4bc36a381fc83f", "filename": "src/test/rustfix/missing-comma-in-match.fixed", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match &Some(3) {\n-        &None => 1,\n-        &Some(2) => { 3 }\n-        _ => 2\n-    };\n-}"}, {"sha": "fed796cffe6f968d2a61e25085651ad15c3d5f00", "filename": "src/test/rustfix/missing-comma-in-match.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match &Some(3) {\n-        &None => 1\n-        &Some(2) => { 3 }\n-        _ => 2\n-    };\n-}"}, {"sha": "900fee94653c1a4b70c908df06b4ba2fab26294c", "filename": "src/test/rustfix/str-as-char.fixed", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fstr-as-char.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    println!(\"\u25cf\u25cf\");\n-}"}, {"sha": "b446551fefa29516564077cf44ff382849b94c95", "filename": "src/test/rustfix/str-as-char.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fstr-as-char.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    println!('\u25cf\u25cf');\n-}"}, {"sha": "358a27d3878206f901693c3b0e51242a0878b45d", "filename": "src/test/rustfix/tuple-float-index.fixed", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-fn main () {\n-    ((1, (2, 3)).1).1;\n-}"}, {"sha": "72612252a80980ad67ed109ee03a01f595a4d04e", "filename": "src/test/rustfix/tuple-float-index.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/src%2Ftest%2Frustfix%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Ftuple-float-index.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -1,3 +0,0 @@\n-fn main () {\n-    (1, (2, 3)).1.1;\n-}"}, {"sha": "7cdb16b282d540253dd756071d02611639dc3ef5", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -2,12 +2,36 @@\n #![crate_type = \"rlib\"]\n \n pub fn f(b: &mut i32) {\n-    g(&mut b);\n+    //~^ NOTE the binding is already a mutable borrow\n+    //~| NOTE the binding is already a mutable borrow\n+    h(&mut b);\n     //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n     g(&mut &mut b);\n     //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n }\n \n-pub fn g(_: &mut i32) {}\n+pub fn g(b: &mut i32) { //~ NOTE the binding is already a mutable borrow\n+    h(&mut &mut b);\n+    //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n+    //~| HELP try removing `&mut` here\n+}\n+\n+pub fn h(_: &mut i32) {}\n+\n+trait Foo {\n+    fn bar(&mut self);\n+}\n+\n+impl Foo for &mut String {\n+    fn bar(&mut self) {}\n+}\n+\n+pub fn baz(f: &mut String) { //~ HELP consider making the binding mutable\n+    f.bar(); //~ ERROR cannot borrow `f` as mutable, as it is not declared as mutable\n+    //~^ NOTE cannot borrow as mutable\n+}"}, {"sha": "e4c51bb77c9edca9b779010c70a92fda2aa7b675", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -1,21 +1,65 @@\n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:5:7\n+  --> $DIR/mut-borrow-of-mut-ref.rs:7:7\n    |\n-LL |     g(&mut b);\n-   |       ^^^^^^\n-   |       |\n-   |       cannot borrow as mutable\n-   |       help: try removing `&mut` here\n+LL |     h(&mut b);\n+   |       ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n+   |\n+LL | pub fn f(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+   |\n+LL -     h(&mut b);\n+LL +     h(b);\n+   | \n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:8:12\n+  --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n    |\n LL |     g(&mut &mut b);\n-   |            ^^^^^^\n-   |            |\n-   |            cannot borrow as mutable\n-   |            help: try removing `&mut` here\n+   |            ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n+   |\n+LL | pub fn f(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+   |\n+LL -     g(&mut &mut b);\n+LL +     g(&mut b);\n+   | \n+\n+error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n+  --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n+   |\n+LL |     h(&mut &mut b);\n+   |            ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:17:13\n+   |\n+LL | pub fn g(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+   |\n+LL -     h(&mut &mut b);\n+LL +     h(&mut b);\n+   | \n+\n+error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n+  --> $DIR/mut-borrow-of-mut-ref.rs:35:5\n+   |\n+LL |     f.bar();\n+   |     ^ cannot borrow as mutable\n+   |\n+help: consider making the binding mutable\n+   |\n+LL | pub fn baz(mut f: &mut String) {\n+   |            +++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "88617381236d7377fe5717f613c14c52193f9a27", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -1,11 +1,19 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:7:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-31424.rs:6:12\n+   |\n+LL |     fn foo(&mut self) {\n+   |            ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-31424.rs:7:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n warning: function cannot return without recursing\n   --> $DIR/issue-31424.rs:13:5\n@@ -22,11 +30,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:16:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-31424.rs:13:18\n+   |\n+LL |     fn bar(self: &mut Self) {\n+   |                  ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-31424.rs:16:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "666172197ce9b01be64be88936a201bec1997282", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -2,10 +2,18 @@ error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34126.rs:6:18\n    |\n LL |         self.run(&mut self);\n-   |                  ^^^^^^^^^\n-   |                  |\n-   |                  cannot borrow as mutable\n-   |                  help: try removing `&mut` here\n+   |                  ^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-34126.rs:5:14\n+   |\n+LL |     fn start(&mut self) {\n+   |              ^^^^^^^^^\n+help: try removing `&mut` here\n+   |\n+LL -         self.run(&mut self);\n+LL +         self.run(self);\n+   | \n \n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:6:18"}, {"sha": "18696f57c44aef80ac01115c80833feece008a1c", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -13,11 +13,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:7:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-51191.rs:4:18\n+   |\n+LL |     fn bar(self: &mut Self) {\n+   |                  ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-51191.rs:7:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:13:9\n@@ -42,11 +50,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:28:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-51191.rs:27:16\n+   |\n+LL |     fn mtblref(&mut self) {\n+   |                ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-51191.rs:28:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "b9714b67e58881d1e251f660d8580a9087988725", "filename": "src/test/ui/suggestions/if-let-typo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -10,4 +10,5 @@ fn main() {\n     if Some(3) = foo {} //~ ERROR mismatched types\n     //~^ ERROR destructuring assignments are unstable\n     //~^^ ERROR invalid left-hand side of assignment\n+    if x = 5 {}  //~ ERROR cannot find value `x` in this scope\n }"}, {"sha": "7f71cb485815fc75949fd94f3b29a27d591a7b04", "filename": "src/test/ui/suggestions/if-let-typo.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -9,6 +9,17 @@ help: you might have meant to use pattern matching\n LL |     if let Some(x) = foo {}\n    |        +++\n \n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/if-let-typo.rs:13:8\n+   |\n+LL |     if x = 5 {}\n+   |        ^ not found in this scope\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let x = 5 {}\n+   |        +++\n+\n error[E0658]: destructuring assignments are unstable\n   --> $DIR/if-let-typo.rs:4:16\n    |\n@@ -79,7 +90,7 @@ error[E0308]: mismatched types\n LL |     if Some(3) = foo {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0070, E0308, E0425, E0658.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "f630d2783350306983396776befcecc2bb8d6f21", "filename": "src/test/ui/type-alias-impl-trait/static-const-types.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// FIXME: This should compile, but it currently doesn't\n+\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug;\n+//~^ ERROR: could not find defining uses\n+\n+static FOO1: Foo = 22_u32;\n+//~^ ERROR: mismatched types [E0308]\n+const FOO2: Foo = 22_u32;\n+//~^ ERROR: mismatched types [E0308]\n+\n+fn main() {}"}, {"sha": "72083d014fe3a0006ad14af3949cbec9828b858a", "filename": "src/test/ui/type-alias-impl-trait/static-const-types.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/static-const-types.rs:11:20\n+   |\n+LL | type Foo = impl Debug;\n+   |            ---------- the expected opaque type\n+...\n+LL | static FOO1: Foo = 22_u32;\n+   |                    ^^^^^^ expected opaque type, found `u32`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                     found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/static-const-types.rs:13:19\n+   |\n+LL | type Foo = impl Debug;\n+   |            ---------- the expected opaque type\n+...\n+LL | const FOO2: Foo = 22_u32;\n+   |                   ^^^^^^ expected opaque type, found `u32`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                     found type `u32`\n+\n+error: could not find defining uses\n+  --> $DIR/static-const-types.rs:8:12\n+   |\n+LL | type Foo = impl Debug;\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "cda94b306d333e477b9fdd8d46cedf25b93d0eb6", "filename": "src/test/ui/unsized/param-mentioned-by-different-field.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.rs?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,10 @@\n+// We must not allow this with our current setup as `T`\n+// is mentioned both in the tail of `Foo` and by another\n+// field.\n+struct Foo<T: ?Sized>(Box<T>, T);\n+\n+fn main() {\n+    let x: Foo<[u8; 1]> = Foo(Box::new([2]), [3]);\n+    let y: &Foo<[u8]> = &x; //~ ERROR mismatched types\n+    assert_eq!(y.0.len(), 1);\n+}"}, {"sha": "d18fa6456f3ee41d7a8ccc422f2a69e530b78b53", "filename": "src/test/ui/unsized/param-mentioned-by-different-field.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fparam-mentioned-by-different-field.stderr?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/param-mentioned-by-different-field.rs:8:25\n+   |\n+LL |     let y: &Foo<[u8]> = &x;\n+   |            ----------   ^^ expected slice `[u8]`, found array `[u8; 1]`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&Foo<[u8]>`\n+              found reference `&Foo<[u8; 1]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1e4df4d3fb79a58185907d63c0574bdeb779ec16", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/daa4dc997c777676b0f0e48d0311cc5e7bde5f87/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=daa4dc997c777676b0f0e48d0311cc5e7bde5f87", "patch": "@@ -102,6 +102,8 @@ message_on_add = \"\"\"\\\n - Needs `I-nominated`?\n \"\"\"\n message_on_remove = \"Issue #{number}'s prioritization request has been removed.\"\n+message_on_close = \"Issue #{number} has been closed while requested for prioritization.\"\n+message_on_reopen = \"Issue #{number} has been reopened.\"\n \n [notify-zulip.\"T-rustdoc\"]\n required_labels = [\"I-nominated\"]"}]}