{"sha": "49772fbf5dc1137a031086999b20ab7b961f3655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzcyZmJmNWRjMTEzN2EwMzEwODY5OTliMjBhYjdiOTYxZjM2NTU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-25T23:17:29Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T23:44:45Z"}, "message": "syntax: don't fake a block around closures' bodies during parsing.", "tree": {"sha": "19ed6fae31552759225a7d4d11e52fa1c9153ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ed6fae31552759225a7d4d11e52fa1c9153ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49772fbf5dc1137a031086999b20ab7b961f3655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49772fbf5dc1137a031086999b20ab7b961f3655", "html_url": "https://github.com/rust-lang/rust/commit/49772fbf5dc1137a031086999b20ab7b961f3655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49772fbf5dc1137a031086999b20ab7b961f3655/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2ce2276873242a101f205537e7ce297d68f8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ce2276873242a101f205537e7ce297d68f8dd", "html_url": "https://github.com/rust-lang/rust/commit/da2ce2276873242a101f205537e7ce297d68f8dd"}], "stats": {"total": 259, "additions": 106, "deletions": 153}, "files": [{"sha": "6f56f6858ce40a0bc04b5c0f8f4e43b1c6202e58", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -994,10 +994,10 @@ impl<'a> ast_visit::Visitor for EarlyContext<'a> {\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind, decl: &ast::FnDecl,\n-                body: &ast::Block, span: Span, id: ast::NodeId) {\n-        run_lints!(self, check_fn, early_passes, fk, decl, body, span, id);\n-        ast_visit::walk_fn(self, fk, decl, body, span);\n-        run_lints!(self, check_fn_post, early_passes, fk, decl, body, span, id);\n+                span: Span, id: ast::NodeId) {\n+        run_lints!(self, check_fn, early_passes, fk, decl, span, id);\n+        ast_visit::walk_fn(self, fk, decl, span);\n+        run_lints!(self, check_fn_post, early_passes, fk, decl, span, id);\n     }\n \n     fn visit_variant_data(&mut self,"}, {"sha": "5fba14768bf2881a7cb5d8a21a7aa690b891d656", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -200,9 +200,9 @@ pub trait EarlyLintPass: LintPass {\n     fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n     fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n     fn check_fn(&mut self, _: &EarlyContext,\n-        _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n+        _: ast_visit::FnKind, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n     fn check_fn_post(&mut self, _: &EarlyContext,\n-        _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n+        _: ast_visit::FnKind, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n     fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n     fn check_trait_item_post(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n     fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }"}, {"sha": "f8994de54a1370ceacec62d0d4965e8a81ff5c89", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -295,11 +295,10 @@ impl<'v> ast_visit::Visitor for StatCollector<'v> {\n     fn visit_fn(&mut self,\n                 fk: ast_visit::FnKind,\n                 fd: &ast::FnDecl,\n-                b: &ast::Block,\n                 s: Span,\n                 _: NodeId) {\n         self.record(\"FnDecl\", Id::None, fd);\n-        ast_visit::walk_fn(self, fk, fd, b, s)\n+        ast_visit::walk_fn(self, fk, fd, s)\n     }\n \n     fn visit_trait_item(&mut self, ti: &ast::TraitItem) {"}, {"sha": "664efc27fbb53045326c491938e7f334f4047d46", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -596,21 +596,52 @@ impl<'a> Visitor for Resolver<'a> {\n     fn visit_fn(&mut self,\n                 function_kind: FnKind,\n                 declaration: &FnDecl,\n-                block: &Block,\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n             FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 self.visit_generics(&sig.generics);\n                 MethodRibKind(!sig.decl.has_self())\n             }\n-            FnKind::Closure => ClosureRibKind(node_id),\n+            FnKind::Closure(_) => ClosureRibKind(node_id),\n         };\n-        self.resolve_function(rib_kind, declaration, block);\n+\n+        // Create a value rib for the function.\n+        self.value_ribs.push(Rib::new(rib_kind));\n+\n+        // Create a label rib for the function.\n+        self.label_ribs.push(Rib::new(rib_kind));\n+\n+        // Add each argument to the rib.\n+        let mut bindings_list = FxHashMap();\n+        for argument in &declaration.inputs {\n+            self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n+\n+            self.visit_ty(&argument.ty);\n+\n+            debug!(\"(resolving function) recorded argument\");\n+        }\n+        visit::walk_fn_ret_ty(self, &declaration.output);\n+\n+        // Resolve the function body.\n+        match function_kind {\n+            FnKind::ItemFn(.., body) |\n+            FnKind::Method(.., body) => {\n+                self.visit_block(body);\n+            }\n+            FnKind::Closure(body) => {\n+                self.visit_expr(body);\n+            }\n+        };\n+\n+        debug!(\"(resolving function) leaving function\");\n+\n+        self.label_ribs.pop();\n+        self.value_ribs.pop();\n     }\n }\n \n@@ -1856,36 +1887,6 @@ impl<'a> Resolver<'a> {\n         self.value_ribs.pop();\n     }\n \n-    fn resolve_function(&mut self,\n-                        rib_kind: RibKind<'a>,\n-                        declaration: &FnDecl,\n-                        block: &Block) {\n-        // Create a value rib for the function.\n-        self.value_ribs.push(Rib::new(rib_kind));\n-\n-        // Create a label rib for the function.\n-        self.label_ribs.push(Rib::new(rib_kind));\n-\n-        // Add each argument to the rib.\n-        let mut bindings_list = FxHashMap();\n-        for argument in &declaration.inputs {\n-            self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n-\n-            self.visit_ty(&argument.ty);\n-\n-            debug!(\"(resolving function) recorded argument\");\n-        }\n-        visit::walk_fn_ret_ty(self, &declaration.output);\n-\n-        // Resolve the function body.\n-        self.visit_block(block);\n-\n-        debug!(\"(resolving function) leaving function\");\n-\n-        self.label_ribs.pop();\n-        self.value_ribs.pop();\n-    }\n-\n     fn resolve_trait_reference(&mut self,\n                                id: NodeId,\n                                trait_path: &Path,"}, {"sha": "7f7ef6d3ab7af0a66ca2fb552bfcc995915bd619", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -1414,7 +1414,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                 }\n \n                 // walk the body\n-                self.nest(ex.id, |v| v.visit_block(&body));\n+                self.nest(ex.id, |v| v.visit_expr(body));\n             }\n             ast::ExprKind::ForLoop(ref pattern, ref subexpression, ref block, _) |\n             ast::ExprKind::WhileLet(ref pattern, ref subexpression, ref block, _) => {"}, {"sha": "f5cd089e923d7c7efe3dbbcdf7001d45656e5e06", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -1017,10 +1017,10 @@ pub enum ExprKind {\n     Loop(P<Block>, Option<SpannedIdent>),\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n-    /// A closure (for example, `move |a, b, c| {a + b + c}`)\n+    /// A closure (for example, `move |a, b, c| a + b + c`)\n     ///\n     /// The final span is the span of the argument block `|...|`\n-    Closure(CaptureBy, P<FnDecl>, P<Block>, Span),\n+    Closure(CaptureBy, P<FnDecl>, P<Expr>, Span),\n     /// A block (`{ ... }`)\n     Block(P<Block>),\n "}, {"sha": "c3e28cbb006a07795499c4af50cae727df286ed4", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -198,17 +198,13 @@ pub trait AstBuilder {\n     fn lambda_fn_decl(&self,\n                       span: Span,\n                       fn_decl: P<ast::FnDecl>,\n-                      blk: P<ast::Block>,\n+                      body: P<ast::Expr>,\n                       fn_decl_span: Span)\n                       -> P<ast::Expr>;\n \n-    fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr>;\n-    fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr>;\n-    fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr>;\n-\n-    fn lambda_expr(&self, span: Span, ids: Vec<ast::Ident> , blk: P<ast::Expr>) -> P<ast::Expr>;\n-    fn lambda_expr_0(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr>;\n-    fn lambda_expr_1(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;\n+    fn lambda(&self, span: Span, ids: Vec<ast::Ident>, body: P<ast::Expr>) -> P<ast::Expr>;\n+    fn lambda0(&self, span: Span, body: P<ast::Expr>) -> P<ast::Expr>;\n+    fn lambda1(&self, span: Span, body: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;\n \n     fn lambda_stmts(&self, span: Span, ids: Vec<ast::Ident>,\n                     blk: Vec<ast::Stmt>) -> P<ast::Expr>;\n@@ -940,19 +936,19 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn lambda_fn_decl(&self,\n                       span: Span,\n                       fn_decl: P<ast::FnDecl>,\n-                      blk: P<ast::Block>,\n+                      body: P<ast::Expr>,\n                       fn_decl_span: Span) // span of the `|...|` part\n                       -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref,\n                                                fn_decl,\n-                                               blk,\n+                                               body,\n                                                fn_decl_span))\n     }\n \n     fn lambda(&self,\n               span: Span,\n               ids: Vec<ast::Ident>,\n-              blk: P<ast::Block>)\n+              body: P<ast::Expr>)\n               -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n@@ -962,41 +958,30 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         // part of the lambda, but it probably (maybe?) corresponds to\n         // the entire lambda body. Probably we should extend the API\n         // here, but that's not entirely clear.\n-        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref, fn_decl, blk, span))\n-    }\n-\n-    fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> {\n-        self.lambda(span, Vec::new(), blk)\n+        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref, fn_decl, body, span))\n     }\n \n-    fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr> {\n-        self.lambda(span, vec![ident], blk)\n+    fn lambda0(&self, span: Span, body: P<ast::Expr>) -> P<ast::Expr> {\n+        self.lambda(span, Vec::new(), body)\n     }\n \n-    fn lambda_expr(&self, span: Span, ids: Vec<ast::Ident>,\n-                   expr: P<ast::Expr>) -> P<ast::Expr> {\n-        self.lambda(span, ids, self.block_expr(expr))\n-    }\n-    fn lambda_expr_0(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        self.lambda0(span, self.block_expr(expr))\n-    }\n-    fn lambda_expr_1(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n-        self.lambda1(span, self.block_expr(expr), ident)\n+    fn lambda1(&self, span: Span, body: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n+        self.lambda(span, vec![ident], body)\n     }\n \n     fn lambda_stmts(&self,\n                     span: Span,\n                     ids: Vec<ast::Ident>,\n                     stmts: Vec<ast::Stmt>)\n                     -> P<ast::Expr> {\n-        self.lambda(span, ids, self.block(span, stmts))\n+        self.lambda(span, ids, self.expr_block(self.block(span, stmts)))\n     }\n     fn lambda_stmts_0(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Expr> {\n-        self.lambda0(span, self.block(span, stmts))\n+        self.lambda0(span, self.expr_block(self.block(span, stmts)))\n     }\n     fn lambda_stmts_1(&self, span: Span, stmts: Vec<ast::Stmt>,\n                       ident: ast::Ident) -> P<ast::Expr> {\n-        self.lambda1(span, self.block(span, stmts), ident)\n+        self.lambda1(span, self.expr_block(self.block(span, stmts)), ident)\n     }\n \n     fn arg(&self, span: Span, ident: ast::Ident, ty: P<ast::Ty>) -> ast::Arg {"}, {"sha": "f51822ec2fe807e2fbbe2c8a6c65b5c675f6c3f3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -1228,12 +1228,11 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n     fn visit_fn(&mut self,\n                 fn_kind: FnKind,\n                 fn_decl: &ast::FnDecl,\n-                block: &ast::Block,\n                 span: Span,\n                 _node_id: NodeId) {\n         // check for const fn declarations\n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, Spanned { node: ast::Constness::Const, .. }, _, _) => {\n+            FnKind::ItemFn(_, _, _, Spanned { node: ast::Constness::Const, .. }, _, _, _) => {\n                 gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n             }\n             _ => {\n@@ -1245,13 +1244,13 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n         }\n \n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, _, abi, _) |\n-            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) => {\n+            FnKind::ItemFn(_, _, _, _, abi, _, _) |\n+            FnKind::Method(_, &ast::MethodSig { abi, .. }, _, _) => {\n                 self.check_abi(abi, span);\n             }\n             _ => {}\n         }\n-        visit::walk_fn(self, fn_kind, fn_decl, block, span);\n+        visit::walk_fn(self, fn_kind, fn_decl, span);\n     }\n \n     fn visit_trait_item(&mut self, ti: &ast::TraitItem) {"}, {"sha": "2e62f23578d815884167938f18949d42c69beb9a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -1201,7 +1201,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprKind::Closure(capture_clause, decl, body, span) => {\n                 ExprKind::Closure(capture_clause,\n                                   folder.fold_fn_decl(decl),\n-                                  folder.fold_block(body),\n+                                  folder.fold_expr(body),\n                                   folder.new_span(span))\n             }\n             ExprKind::Block(blk) => ExprKind::Block(folder.fold_block(blk)),"}, {"sha": "7d15334ff9f4e3634ef8b977f9edea18ccaa9182", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -3162,25 +3162,12 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_span.hi;\n         let body = match decl.output {\n-            FunctionRetTy::Default(_) => {\n-                // If no explicit return type is given, parse any\n-                // expr and wrap it up in a dummy block:\n-                let body_expr = self.parse_expr()?;\n-                P(ast::Block {\n-                    id: ast::DUMMY_NODE_ID,\n-                    span: body_expr.span,\n-                    stmts: vec![Stmt {\n-                        span: body_expr.span,\n-                        node: StmtKind::Expr(body_expr),\n-                        id: ast::DUMMY_NODE_ID,\n-                    }],\n-                    rules: BlockCheckMode::Default,\n-                })\n-            }\n+            FunctionRetTy::Default(_) => self.parse_expr()?,\n             _ => {\n                 // If an explicit return type is given, require a\n                 // block to appear (RFC 968).\n-                self.parse_block()?\n+                let body_lo = self.span.lo;\n+                self.parse_block_expr(body_lo, BlockCheckMode::Default, ThinVec::new())?\n             }\n         };\n "}, {"sha": "203c19285ac2c366e01f83b5d4eebc32cd35f772", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -2128,26 +2128,8 @@ impl<'a> State<'a> {\n \n                 try!(self.print_fn_block_args(&decl));\n                 try!(space(&mut self.s));\n-\n-                let default_return = match decl.output {\n-                    ast::FunctionRetTy::Default(..) => true,\n-                    _ => false\n-                };\n-\n-                match body.stmts.last().map(|stmt| &stmt.node) {\n-                    Some(&ast::StmtKind::Expr(ref i_expr)) if default_return &&\n-                                                              body.stmts.len() == 1 => {\n-                        // we extract the block, so as not to create another set of boxes\n-                        if let ast::ExprKind::Block(ref blk) = i_expr.node {\n-                            try!(self.print_block_unclosed_with_attrs(&blk, &i_expr.attrs));\n-                        } else {\n-                            // this is a bare expression\n-                            try!(self.print_expr(&i_expr));\n-                            try!(self.end()); // need to close a box\n-                        }\n-                    }\n-                    _ => try!(self.print_block_unclosed(&body)),\n-                }\n+                try!(self.print_expr(body));\n+                try!(self.end()); // need to close a box\n \n                 // a box will be closed by print_expr, but we didn't want an overall\n                 // wrapper so we closed the corresponding opening. so create an"}, {"sha": "a1f07381db705910e14e766b5520b8d95c463929", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -75,9 +75,9 @@ impl Visitor for NodeCounter {\n         self.count += 1;\n         walk_generics(self, g)\n     }\n-    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, s: Span, _: NodeId) {\n         self.count += 1;\n-        walk_fn(self, fk, fd, b, s)\n+        walk_fn(self, fk, fd, s)\n     }\n     fn visit_trait_item(&mut self, ti: &TraitItem) {\n         self.count += 1;"}, {"sha": "7c1ff617ab64d00b46d07021b15c5f83ab79abb7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -31,13 +31,13 @@ use codemap::Spanned;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Spanned<Constness>, Abi, &'a Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Spanned<Constness>, Abi, &'a Visibility, &'a Block),\n \n     /// fn foo(&self)\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>),\n+    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n \n-    /// |x, y| {}\n-    Closure,\n+    /// |x, y| body\n+    Closure(&'a Expr),\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -68,8 +68,8 @@ pub trait Visitor: Sized {\n     fn visit_expr_post(&mut self, _ex: &Expr) { }\n     fn visit_ty(&mut self, t: &Ty) { walk_ty(self, t) }\n     fn visit_generics(&mut self, g: &Generics) { walk_generics(self, g) }\n-    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n-        walk_fn(self, fk, fd, b, s)\n+    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, s: Span, _: NodeId) {\n+        walk_fn(self, fk, fd, s)\n     }\n     fn visit_trait_item(&mut self, ti: &TraitItem) { walk_trait_item(self, ti) }\n     fn visit_impl_item(&mut self, ii: &ImplItem) { walk_impl_item(self, ii) }\n@@ -246,9 +246,8 @@ pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n         }\n         ItemKind::Fn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n-                                            constness, abi, &item.vis),\n+                                            constness, abi, &item.vis, body),\n                              declaration,\n-                             body,\n                              item.span,\n                              item.id)\n         }\n@@ -519,26 +518,27 @@ pub fn walk_fn_decl<V: Visitor>(visitor: &mut V, function_declaration: &FnDecl)\n     visitor.visit_fn_ret_ty(&function_declaration.output)\n }\n \n-pub fn walk_fn_kind<V: Visitor>(visitor: &mut V, function_kind: FnKind) {\n-    match function_kind {\n-        FnKind::ItemFn(_, generics, _, _, _, _) => {\n+pub fn walk_fn<V>(visitor: &mut V, kind: FnKind, declaration: &FnDecl, _span: Span)\n+    where V: Visitor,\n+{\n+    match kind {\n+        FnKind::ItemFn(_, generics, _, _, _, _, body) => {\n             visitor.visit_generics(generics);\n+            walk_fn_decl(visitor, declaration);\n+            visitor.visit_block(body);\n         }\n-        FnKind::Method(_, ref sig, _) => {\n+        FnKind::Method(_, ref sig, _, body) => {\n             visitor.visit_generics(&sig.generics);\n+            walk_fn_decl(visitor, declaration);\n+            visitor.visit_block(body);\n+        }\n+        FnKind::Closure(body) => {\n+            walk_fn_decl(visitor, declaration);\n+            visitor.visit_expr(body);\n         }\n-        FnKind::Closure => {}\n     }\n }\n \n-pub fn walk_fn<V>(visitor: &mut V, kind: FnKind, declaration: &FnDecl, body: &Block, _span: Span)\n-    where V: Visitor,\n-{\n-    walk_fn_kind(visitor, kind);\n-    walk_fn_decl(visitor, declaration);\n-    visitor.visit_block(body)\n-}\n-\n pub fn walk_trait_item<V: Visitor>(visitor: &mut V, trait_item: &TraitItem) {\n     visitor.visit_ident(trait_item.span, trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n@@ -552,8 +552,8 @@ pub fn walk_trait_item<V: Visitor>(visitor: &mut V, trait_item: &TraitItem) {\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None), &sig.decl,\n-                             body, trait_item.span, trait_item.id);\n+            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None, body),\n+                             &sig.decl, trait_item.span, trait_item.id);\n         }\n         TraitItemKind::Type(ref bounds, ref default) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n@@ -575,8 +575,8 @@ pub fn walk_impl_item<V: Visitor>(visitor: &mut V, impl_item: &ImplItem) {\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)), &sig.decl,\n-                             body, impl_item.span, impl_item.id);\n+            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), body),\n+                             &sig.decl, impl_item.span, impl_item.id);\n         }\n         ImplItemKind::Type(ref ty) => {\n             visitor.visit_ty(ty);\n@@ -711,9 +711,8 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprKind::Closure(_, ref function_declaration, ref body, _decl_span) => {\n-            visitor.visit_fn(FnKind::Closure,\n+            visitor.visit_fn(FnKind::Closure(body),\n                              function_declaration,\n-                             body,\n                              expression.span,\n                              expression.id)\n         }"}, {"sha": "dc1f7b4e6201e7132f989a8929b0337d7a6652cc", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -133,7 +133,7 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n                                 cx.ident_of(\"read_struct\"),\n                                 vec![cx.expr_str(trait_span, substr.type_ident.name.as_str()),\n                                      cx.expr_usize(trait_span, nfields),\n-                                     cx.lambda_expr_1(trait_span, result, blkarg)])\n+                                     cx.lambda1(trait_span, result, blkarg)])\n         }\n         StaticEnum(_, ref fields) => {\n             let variant = cx.ident_of(\"i\");\n@@ -165,7 +165,7 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n             let result =\n                 cx.expr_ok(trait_span,\n                            cx.expr_match(trait_span, cx.expr_ident(trait_span, variant), arms));\n-            let lambda = cx.lambda_expr(trait_span, vec![blkarg, variant], result);\n+            let lambda = cx.lambda(trait_span, vec![blkarg, variant], result);\n             let variant_vec = cx.expr_vec(trait_span, variants);\n             let variant_vec = cx.expr_addr_of(trait_span, variant_vec);\n             let result = cx.expr_method_call(trait_span,\n@@ -176,7 +176,7 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n                                 decoder,\n                                 cx.ident_of(\"read_enum\"),\n                                 vec![cx.expr_str(trait_span, substr.type_ident.name.as_str()),\n-                                     cx.lambda_expr_1(trait_span, result, blkarg)])\n+                                     cx.lambda1(trait_span, result, blkarg)])\n         }\n         _ => cx.bug(\"expected StaticEnum or StaticStruct in derive(Decodable)\"),\n     };"}, {"sha": "ebbddc6e48084464208cd33b9dacce183863b98b", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -197,7 +197,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                 };\n                 let self_ref = cx.expr_addr_of(span, self_.clone());\n                 let enc = cx.expr_call(span, fn_path.clone(), vec![self_ref, blkencoder.clone()]);\n-                let lambda = cx.lambda_expr_1(span, enc, blkarg);\n+                let lambda = cx.lambda1(span, enc, blkarg);\n                 let call = cx.expr_method_call(span,\n                                                blkencoder.clone(),\n                                                emit_struct_field,\n@@ -246,7 +246,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                     let self_ref = cx.expr_addr_of(span, self_.clone());\n                     let enc =\n                         cx.expr_call(span, fn_path.clone(), vec![self_ref, blkencoder.clone()]);\n-                    let lambda = cx.lambda_expr_1(span, enc, blkarg);\n+                    let lambda = cx.lambda1(span, enc, blkarg);\n                     let call = cx.expr_method_call(span,\n                                                    blkencoder.clone(),\n                                                    emit_variant_arg,\n@@ -273,7 +273,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                                                 cx.expr_usize(trait_span, idx),\n                                                 cx.expr_usize(trait_span, fields.len()),\n                                                 blk]);\n-            let blk = cx.lambda_expr_1(trait_span, call, blkarg);\n+            let blk = cx.lambda1(trait_span, call, blkarg);\n             let ret = cx.expr_method_call(trait_span,\n                                           encoder,\n                                           cx.ident_of(\"emit_enum\"),"}, {"sha": "1da6735918012f11be58ef6b620cbaec9b8ca17e", "filename": "src/test/parse-fail/closure-return-syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49772fbf5dc1137a031086999b20ab7b961f3655/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs?ref=49772fbf5dc1137a031086999b20ab7b961f3655", "patch": "@@ -12,5 +12,6 @@\n // unless it uses braces.\n \n fn main() {\n-    let x = || -> i32 22; //~ ERROR expected `{`, found `22`\n+    let x = || -> i32 22;\n+    //~^ ERROR expected one of `!`, `(`, `::`, `<`, or `{`, found `22`\n }"}]}