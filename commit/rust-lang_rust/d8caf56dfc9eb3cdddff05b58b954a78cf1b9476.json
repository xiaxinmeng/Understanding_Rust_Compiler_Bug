{"sha": "d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4Y2FmNTZkZmM5ZWIzY2RkZGZmMDViNThiOTU0YTc4Y2YxYjk0NzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T18:52:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T18:52:06Z"}, "message": "Uniformalize naming", "tree": {"sha": "0accd61a43762a6a34ae046ef6e23c3f7a930910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0accd61a43762a6a34ae046ef6e23c3f7a930910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "html_url": "https://github.com/rust-lang/rust/commit/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d49b5d174430feede9833c5e66c39ee41b5fa3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d49b5d174430feede9833c5e66c39ee41b5fa3e", "html_url": "https://github.com/rust-lang/rust/commit/4d49b5d174430feede9833c5e66c39ee41b5fa3e"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "ee8bff34678b5a1bbb9cf888cba5460b31d8c876", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n \n     // We want to only apply this to non-union structs with named fields\n     let field_list = match (strukt.kind(), strukt.is_union()) {\n-        (StructKind::Named(named), false) => named,\n+        (StructKind::Record(named), false) => named,\n         _ => return None,\n     };\n "}, {"sha": "8482897c57c1a5247079df0336f54333fe029b42", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -101,7 +101,7 @@ fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n                 iter::repeat(make::placeholder_pat().into()).take(field_list.fields().count());\n             make::tuple_struct_pat(path, pats).into()\n         }\n-        ast::StructKind::Named(field_list) => {\n+        ast::StructKind::Record(field_list) => {\n             let pats = field_list.fields().map(|f| make::bind_pat(f.name().unwrap()).into());\n             make::record_pat(path, pats).into()\n         }"}, {"sha": "fc466c1f07616c65f98c6a9707ceae6d234724ee", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -63,7 +63,7 @@ impl HasSource for StructField {\n \n         let field_sources = match struct_kind {\n             ast::StructKind::Tuple(fl) => fl.fields().map(|it| FieldSource::Pos(it)).collect(),\n-            ast::StructKind::Named(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n+            ast::StructKind::Record(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n             ast::StructKind::Unit => Vec::new(),\n         };\n         let value = field_sources"}, {"sha": "2bd18255c02c08e354a389bf00a9504d3319739a", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -30,13 +30,9 @@ pub struct EnumVariantData {\n     pub variant_data: Arc<VariantData>,\n }\n \n-/// Fields of an enum variant or struct\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct VariantData(VariantDataInner);\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-enum VariantDataInner {\n-    Struct(Arena<LocalStructFieldId, StructFieldData>),\n+pub enum VariantData {\n+    Record(Arena<LocalStructFieldId, StructFieldData>),\n     Tuple(Arena<LocalStructFieldId, StructFieldData>),\n     Unit,\n }\n@@ -86,7 +82,7 @@ impl EnumData {\n \n impl VariantData {\n     fn new(flavor: ast::StructKind) -> Self {\n-        let inner = match flavor {\n+        match flavor {\n             ast::StructKind::Tuple(fl) => {\n                 let fields = fl\n                     .fields()\n@@ -96,26 +92,25 @@ impl VariantData {\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                     })\n                     .collect();\n-                VariantDataInner::Tuple(fields)\n+                VariantData::Tuple(fields)\n             }\n-            ast::StructKind::Named(fl) => {\n+            ast::StructKind::Record(fl) => {\n                 let fields = fl\n                     .fields()\n                     .map(|fd| StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                     })\n                     .collect();\n-                VariantDataInner::Struct(fields)\n+                VariantData::Record(fields)\n             }\n-            ast::StructKind::Unit => VariantDataInner::Unit,\n-        };\n-        VariantData(inner)\n+            ast::StructKind::Unit => VariantData::Unit,\n+        }\n     }\n \n     pub fn fields(&self) -> Option<&Arena<LocalStructFieldId, StructFieldData>> {\n-        match &self.0 {\n-            VariantDataInner::Struct(fields) | VariantDataInner::Tuple(fields) => Some(fields),\n+        match self {\n+            VariantData::Record(fields) | VariantData::Tuple(fields) => Some(fields),\n             _ => None,\n         }\n     }"}, {"sha": "d96de4e4ce06946750121ac6e9f6eb335510724c", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -55,7 +55,7 @@ impl FunctionSignature {\n     pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).value;\n         match node.kind() {\n-            ast::StructKind::Named(_) => return None,\n+            ast::StructKind::Record(_) => return None,\n             _ => (),\n         };\n \n@@ -89,7 +89,7 @@ impl FunctionSignature {\n     ) -> Option<Self> {\n         let node: ast::EnumVariant = variant.source(db).value;\n         match node.kind() {\n-            ast::StructKind::Named(_) | ast::StructKind::Unit => return None,\n+            ast::StructKind::Record(_) | ast::StructKind::Unit => return None,\n             _ => (),\n         };\n "}, {"sha": "513ed7920f983674579f675fda7d3b021f345dca", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8caf56dfc9eb3cdddff05b58b954a78cf1b9476/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=d8caf56dfc9eb3cdddff05b58b954a78cf1b9476", "patch": "@@ -178,15 +178,15 @@ impl ast::ImplBlock {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum StructKind {\n+    Record(ast::RecordFieldDefList),\n     Tuple(ast::TupleFieldDefList),\n-    Named(ast::RecordFieldDefList),\n     Unit,\n }\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n         if let Some(nfdl) = child_opt::<_, ast::RecordFieldDefList>(node) {\n-            StructKind::Named(nfdl)\n+            StructKind::Record(nfdl)\n         } else if let Some(pfl) = child_opt::<_, ast::TupleFieldDefList>(node) {\n             StructKind::Tuple(pfl)\n         } else {"}]}