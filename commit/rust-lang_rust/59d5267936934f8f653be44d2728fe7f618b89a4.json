{"sha": "59d5267936934f8f653be44d2728fe7f618b89a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDUyNjc5MzY5MzRmOGY2NTNiZTQ0ZDI3MjhmZTdmNjE4Yjg5YTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T01:35:45Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T01:36:04Z"}, "message": "Rearrange ExtFmt.RT.pad to recover some horizontal space", "tree": {"sha": "24da21d28791669fa9013e27f73192a9362ee551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24da21d28791669fa9013e27f73192a9362ee551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d5267936934f8f653be44d2728fe7f618b89a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d5267936934f8f653be44d2728fe7f618b89a4", "html_url": "https://github.com/rust-lang/rust/commit/59d5267936934f8f653be44d2728fe7f618b89a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d5267936934f8f653be44d2728fe7f618b89a4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869b28e393f1b87723c9186097bd6acd16366fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/869b28e393f1b87723c9186097bd6acd16366fbd", "html_url": "https://github.com/rust-lang/rust/commit/869b28e393f1b87723c9186097bd6acd16366fbd"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "79f86038528f0c0948466a05f2523f5db3d24d66", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 51, "deletions": 49, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/59d5267936934f8f653be44d2728fe7f618b89a4/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d5267936934f8f653be44d2728fe7f618b89a4/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=59d5267936934f8f653be44d2728fe7f618b89a4", "patch": "@@ -458,64 +458,66 @@ mod RT {\n     }\n \n     fn pad(&conv cv, str s, pad_type pt) -> str {\n+        auto uwidth;\n         alt (cv.width) {\n             case (count_implied) {\n                 ret s;\n             }\n             case (count_is(?width)) {\n                 // FIXME: Maybe width should be uint\n-                auto uwidth = width as uint;\n-                auto strlen = _str.char_len(s);\n-                if (strlen < uwidth) {\n-                    auto padchar = ' ';\n-                    auto diff = uwidth - strlen;\n-                    if (have_flag(cv.flags, flag_left_justify)) {\n-                        auto padstr = str_init_elt(padchar, diff);\n-                        ret s + padstr;\n-                    } else {\n-                        auto zero_padding = false;\n-                        auto signed = false;\n-                        alt (pt) {\n-                            case (pad_nozero) {\n-                                // fallthrough\n-                            }\n-                            case (pad_signed) {\n-                                signed = true;\n-                                if (have_flag(cv.flags, flag_left_zero_pad)) {\n-                                    padchar = '0';\n-                                    zero_padding = true;\n-                                }\n-                            }\n-                            case (pad_unsigned) {\n-                                if (have_flag(cv.flags, flag_left_zero_pad)) {\n-                                    padchar = '0';\n-                                    zero_padding = true;\n-                                }\n-                            }\n-                        }\n-\n-                        auto padstr = str_init_elt(padchar, diff);\n-\n-                        // This is completely heinous. If we have a signed\n-                        // value then potentially rip apart the intermediate\n-                        // result and insert some zeros. It may make sense\n-                        // to convert zero padding to a precision instead.\n-                        if (signed\n-                            && zero_padding\n-                            && _str.byte_len(s) > 0u\n-                            && s.(0) == '-' as u8) {\n-\n-                            auto bytelen = _str.byte_len(s);\n-                            auto numpart = _str.substr(s, 1u, bytelen - 1u);\n-                            ret \"-\" + padstr + numpart;\n-                        }\n-\n-                        ret padstr + s;\n+                uwidth = width as uint;\n+            }\n+        }\n+\n+        auto strlen = _str.char_len(s);\n+        if (uwidth <= strlen) {\n+            ret s;\n+        }\n+\n+        auto padchar = ' ';\n+        auto diff = uwidth - strlen;\n+        if (have_flag(cv.flags, flag_left_justify)) {\n+            auto padstr = str_init_elt(padchar, diff);\n+            ret s + padstr;\n+        } else {\n+            auto zero_padding = false;\n+            auto signed = false;\n+            alt (pt) {\n+                case (pad_nozero) {\n+                    // fallthrough\n+                }\n+                case (pad_signed) {\n+                    signed = true;\n+                    if (have_flag(cv.flags, flag_left_zero_pad)) {\n+                        padchar = '0';\n+                        zero_padding = true;\n+                    }\n+                }\n+                case (pad_unsigned) {\n+                    if (have_flag(cv.flags, flag_left_zero_pad)) {\n+                        padchar = '0';\n+                        zero_padding = true;\n                     }\n-                } else {\n-                    ret s;\n                 }\n             }\n+\n+            auto padstr = str_init_elt(padchar, diff);\n+\n+            // This is completely heinous. If we have a signed value then\n+            // potentially rip apart the intermediate result and insert some\n+            // zeros. It may make sense to convert zero padding to a precision\n+            // instead.\n+            if (signed\n+                && zero_padding\n+                && _str.byte_len(s) > 0u\n+                && s.(0) == '-' as u8) {\n+\n+                auto bytelen = _str.byte_len(s);\n+                auto numpart = _str.substr(s, 1u, bytelen - 1u);\n+                ret \"-\" + padstr + numpart;\n+            }\n+\n+            ret padstr + s;\n         }\n     }\n "}]}