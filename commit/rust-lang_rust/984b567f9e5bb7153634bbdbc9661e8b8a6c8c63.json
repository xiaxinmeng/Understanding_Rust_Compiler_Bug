{"sha": "984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NGI1NjdmOWU1YmI3MTUzNjM0YmJkYmM5NjYxZThiOGE2YzhjNjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T04:24:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` the variable counters in the inference context", "tree": {"sha": "d5ec47356ff5319ea024a1c196a7845490b93333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ec47356ff5319ea024a1c196a7845490b93333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "html_url": "https://github.com/rust-lang/rust/commit/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ffba5c3e16291b8bcadbe9485de8faad1766aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffba5c3e16291b8bcadbe9485de8faad1766aa8", "html_url": "https://github.com/rust-lang/rust/commit/7ffba5c3e16291b8bcadbe9485de8faad1766aa8"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "20aa57aadff056a248528d21ea9e3b28a9643999", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "patch": "@@ -35,6 +35,7 @@ use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::infer::error_reporting::ErrorReporting;\n+use std::cell::Cell;\n use std::hashmap::HashMap;\n use std::result;\n use std::vec;\n@@ -43,8 +44,8 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;\n use util::common::indent;\n-use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str, Repr,\n-                  UserString};\n+use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str, Repr};\n+use util::ppaux::{UserString};\n \n pub mod doc;\n pub mod macros;\n@@ -80,15 +81,15 @@ pub struct InferCtxt {\n     // types that might instantiate a general type variable have an\n     // order, represented by its upper and lower bounds.\n     ty_var_bindings: ValsAndBindings<ty::TyVid, Bounds<ty::t>>,\n-    ty_var_counter: uint,\n+    ty_var_counter: Cell<uint>,\n \n     // Map from integral variable to the kind of integer it represents\n     int_var_bindings: ValsAndBindings<ty::IntVid, Option<IntVarValue>>,\n-    int_var_counter: uint,\n+    int_var_counter: Cell<uint>,\n \n     // Map from floating variable to the kind of float it represents\n     float_var_bindings: ValsAndBindings<ty::FloatVid, Option<ast::float_ty>>,\n-    float_var_counter: uint,\n+    float_var_counter: Cell<uint>,\n \n     // For region variables.\n     region_vars: RegionVarBindings,\n@@ -260,13 +261,13 @@ pub fn new_infer_ctxt(tcx: ty::ctxt) -> @mut InferCtxt {\n         tcx: tcx,\n \n         ty_var_bindings: new_ValsAndBindings(),\n-        ty_var_counter: 0,\n+        ty_var_counter: Cell::new(0),\n \n         int_var_bindings: new_ValsAndBindings(),\n-        int_var_counter: 0,\n+        int_var_counter: Cell::new(0),\n \n         float_var_bindings: new_ValsAndBindings(),\n-        float_var_counter: 0,\n+        float_var_counter: Cell::new(0),\n \n         region_vars: RegionVarBindings(tcx),\n     }\n@@ -599,8 +600,8 @@ fn next_simple_var<V:Clone,T:Clone>(counter: &mut uint,\n \n impl InferCtxt {\n     pub fn next_ty_var_id(&mut self) -> TyVid {\n-        let id = self.ty_var_counter;\n-        self.ty_var_counter += 1;\n+        let id = self.ty_var_counter.get();\n+        self.ty_var_counter.set(id + 1);\n         {\n             let vals = &mut self.ty_var_bindings.vals;\n             vals.insert(id, Root(Bounds { lb: None, ub: None }, 0u));\n@@ -617,17 +618,23 @@ impl InferCtxt {\n     }\n \n     pub fn next_int_var_id(&mut self) -> IntVid {\n-        IntVid(next_simple_var(&mut self.int_var_counter,\n-                               &mut self.int_var_bindings))\n+        let mut int_var_counter = self.int_var_counter.get();\n+        let result = IntVid(next_simple_var(&mut int_var_counter,\n+                                            &mut self.int_var_bindings));\n+        self.int_var_counter.set(int_var_counter);\n+        result\n     }\n \n     pub fn next_int_var(&mut self) -> ty::t {\n         ty::mk_int_var(self.tcx, self.next_int_var_id())\n     }\n \n     pub fn next_float_var_id(&mut self) -> FloatVid {\n-        FloatVid(next_simple_var(&mut self.float_var_counter,\n-                                 &mut self.float_var_bindings))\n+        let mut float_var_counter = self.float_var_counter.get();\n+        let result = FloatVid(next_simple_var(&mut float_var_counter,\n+                                              &mut self.float_var_bindings));\n+        self.float_var_counter.set(float_var_counter);\n+        result\n     }\n \n     pub fn next_float_var(&mut self) -> ty::t {"}]}