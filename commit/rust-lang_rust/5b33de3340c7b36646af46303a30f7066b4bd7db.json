{"sha": "5b33de3340c7b36646af46303a30f7066b4bd7db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzNkZTMzNDBjN2IzNjY0NmFmNDYzMDNhMzBmNzA2NmI0YmQ3ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-24T04:13:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-24T04:13:27Z"}, "message": "Auto merge of #75384 - JulianKnodt:cg_def, r=varkor,lcnr\n\nimplement `feature(const_generics_defaults)`\n\nImplements const generics defaults `struct Example<const N: usize=3>`, as well as a query for getting the default of a given const-parameter's def id. There are some remaining FIXME's but they were specified as not blocking for merging this PR. This also puts the defaults behind the unstable feature gate `#![feature(const_generics_defaults)]`.\n\n~~This currently creates a field which is always false on `GenericParamDefKind` for future use when\nconsts are permitted to have defaults. I'm not sure if this is exactly what is best for adding default parameters, but I mimicked the style of type defaults, so hopefully this is ok.~~\n\nr? `@lcnr`", "tree": {"sha": "1350840ab7e5d4c312507ab81aad245ff328fa5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1350840ab7e5d4c312507ab81aad245ff328fa5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b33de3340c7b36646af46303a30f7066b4bd7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b33de3340c7b36646af46303a30f7066b4bd7db", "html_url": "https://github.com/rust-lang/rust/commit/5b33de3340c7b36646af46303a30f7066b4bd7db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b33de3340c7b36646af46303a30f7066b4bd7db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db492ecd5ba6bd82205612cebb9034710653f0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db492ecd5ba6bd82205612cebb9034710653f0c2", "html_url": "https://github.com/rust-lang/rust/commit/db492ecd5ba6bd82205612cebb9034710653f0c2"}, {"sha": "33370fd9829c5bb843b117d11cc7e948f4b824f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/33370fd9829c5bb843b117d11cc7e948f4b824f6", "html_url": "https://github.com/rust-lang/rust/commit/33370fd9829c5bb843b117d11cc7e948f4b824f6"}], "stats": {"total": 708, "additions": 517, "deletions": 191}, "files": [{"sha": "5385c4d72e4ba6ed470d9228b1d0224a0da435e5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2290,7 +2290,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())\n                     });\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n-\n                 (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty, default })\n             }\n         };"}, {"sha": "96bb9cfb1a6bb1593d3563621b0424db651fc29b", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1150,20 +1150,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let mut prev_ty_default = None;\n+        let cg_defaults = self.session.features_untracked().const_generics_defaults;\n+\n+        let mut prev_param_default = None;\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime => (),\n-                GenericParamKind::Type { default: Some(_), .. } => {\n-                    prev_ty_default = Some(param.ident.span);\n+                GenericParamKind::Type { default: Some(_), .. }\n+                | GenericParamKind::Const { default: Some(_), .. } => {\n+                    prev_param_default = Some(param.ident.span);\n                 }\n                 GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n-                    if let Some(span) = prev_ty_default {\n+                    if let Some(span) = prev_param_default {\n                         let mut err = self.err_handler().struct_span_err(\n                             span,\n-                            \"type parameters with a default must be trailing\",\n+                            \"generic parameters with a default must be trailing\",\n                         );\n-                        if matches!(param.kind, GenericParamKind::Const { .. }) {\n+                        if matches!(param.kind, GenericParamKind::Const { .. }) && !cg_defaults {\n                             err.note(\n                                 \"using type defaults and const parameters \\\n                                  in the same parameter list is currently not permitted\","}, {"sha": "84f8ce5706ae61aef168ce381b933ca50a8dafce", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2659,8 +2659,10 @@ impl<'a> State<'a> {\n                     s.word_space(\":\");\n                     s.print_type(ty);\n                     s.print_type_bounds(\":\", &param.bounds);\n-                    if let Some(ref _default) = default {\n-                        // FIXME(const_generics_defaults): print the `default` value here\n+                    if let Some(ref default) = default {\n+                        s.s.space();\n+                        s.word_space(\"=\");\n+                        s.print_expr(&default.value);\n                     }\n                 }\n             }"}, {"sha": "2ea8ae68ef87702265e4d2b1a3d366321155d39f", "filename": "compiler/rustc_error_codes/src/error_codes/E0128.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -7,7 +7,7 @@ struct Foo<T = U, U = ()> {\n     field1: T,\n     field2: U,\n }\n-// error: type parameters with a default cannot use forward declared\n+// error: generic parameters with a default cannot use forward declared\n //        identifiers\n ```\n "}, {"sha": "9b908b141af147659048d542d86b68c493f53876", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -366,6 +366,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_generic_param(&mut self, p: &'v GenericParam<'v>) {\n         walk_generic_param(self, p)\n     }\n+    fn visit_const_param_default(&mut self, _param: HirId, ct: &'v AnonConst) {\n+        walk_const_param_default(self, ct)\n+    }\n     fn visit_generics(&mut self, g: &'v Generics<'v>) {\n         walk_generics(self, g)\n     }\n@@ -869,13 +872,17 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n         GenericParamKind::Const { ref ty, ref default } => {\n             visitor.visit_ty(ty);\n             if let Some(ref default) = default {\n-                visitor.visit_anon_const(default);\n+                visitor.visit_const_param_default(param.hir_id, default);\n             }\n         }\n     }\n     walk_list!(visitor, visit_param_bound, param.bounds);\n }\n \n+pub fn walk_const_param_default<'v, V: Visitor<'v>>(visitor: &mut V, ct: &'v AnonConst) {\n+    visitor.visit_anon_const(ct)\n+}\n+\n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {\n     walk_list!(visitor, visit_generic_param, generics.params);\n     walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);"}, {"sha": "7eeda6013ed752387ff41049ac0ae05a2db02b00", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2266,8 +2266,10 @@ impl<'a> State<'a> {\n             GenericParamKind::Const { ref ty, ref default } => {\n                 self.word_space(\":\");\n                 self.print_type(ty);\n-                if let Some(ref _default) = default {\n-                    // FIXME(const_generics_defaults): print the `default` value here\n+                if let Some(ref default) = default {\n+                    self.s.space();\n+                    self.word_space(\"=\");\n+                    self.print_anon_const(&default)\n                 }\n             }\n         }"}, {"sha": "c171b11e3ffa71f0cf9f56fdd0ca4cdf7128916b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -67,7 +67,7 @@ use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n-    subst::{Subst, SubstsRef},\n+    subst::{GenericArgKind, Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n@@ -957,33 +957,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> SubstsRef<'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n-        let mut type_params = generics\n-            .params\n-            .iter()\n-            .rev()\n-            .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n-                    Some((param.def_id, has_default))\n-                }\n-                ty::GenericParamDefKind::Const => None, // FIXME(const_generics_defaults)\n-            })\n-            .peekable();\n-        let has_default = {\n-            let has_default = type_params.peek().map(|(_, has_default)| has_default);\n-            *has_default.unwrap_or(&false)\n-        };\n-        if has_default {\n-            let types = substs.types().rev();\n-            for ((def_id, has_default), actual) in type_params.zip(types) {\n-                if !has_default {\n-                    break;\n+\n+        let default_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n+            ty::GenericParamDefKind::Type { has_default: true, .. } => Some(param.def_id),\n+            ty::GenericParamDefKind::Const { has_default: true } => Some(param.def_id),\n+            _ => None,\n+        });\n+        for (def_id, actual) in default_params.zip(substs.iter().rev()) {\n+            match actual.unpack() {\n+                GenericArgKind::Const(c) => {\n+                    if self.tcx.const_param_default(def_id).subst(self.tcx, substs) != c {\n+                        break;\n+                    }\n                 }\n-                if self.tcx.type_of(def_id).subst(self.tcx, substs) != actual {\n-                    break;\n+                GenericArgKind::Type(ty) => {\n+                    if self.tcx.type_of(def_id).subst(self.tcx, substs) != ty {\n+                        break;\n+                    }\n                 }\n-                num_supplied_defaults += 1;\n+                _ => break,\n             }\n+            num_supplied_defaults += 1;\n         }\n         let len = generics.params.len();\n         let mut generics = generics.clone();"}, {"sha": "3d0a9d553b0281a4f579397daa5abf199ae0b9f6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -953,6 +953,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n     }\n \n+    fn get_const_param_default(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> rustc_middle::ty::Const<'tcx> {\n+        self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))\n+    }\n+\n     /// Iterates over all the stability attributes in the given crate.\n     fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\""}, {"sha": "e10041a2971425e5f5aa2def8cd99bda181761d4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -122,6 +122,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n+    const_param_default => { tcx.mk_const(cdata.get_const_param_default(tcx, def_id.index)) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "d055c275299a6e2ae328a647818e117ec2efa219", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1876,13 +1876,12 @@ impl EncodeContext<'a, 'tcx> {\n                         default.is_some(),\n                     );\n                 }\n-                GenericParamKind::Const { .. } => {\n-                    self.encode_info_for_generic_param(\n-                        def_id.to_def_id(),\n-                        EntryKind::ConstParam,\n-                        true,\n-                    );\n-                    // FIXME(const_generics_defaults)\n+                GenericParamKind::Const { ref default, .. } => {\n+                    let def_id = def_id.to_def_id();\n+                    self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true);\n+                    if default.is_some() {\n+                        record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))\n+                    }\n                 }\n             }\n         }"}, {"sha": "7cfb051e703c59640947e17db82e6dfe1f30d2d2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -307,13 +307,14 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     mir_abstract_consts: Table<DefIndex, Lazy!(&'tcx [mir::abstract_const::Node<'tcx>])>,\n+    const_defaults: Table<DefIndex, Lazy<rustc_middle::ty::Const<'tcx>>>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a\n     // `DefPathTable`. This allows us to avoid deserializing an entire\n     // `DefPathTable` up front, since we may only ever use a few\n     // definitions from any given crate.\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n-    def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>\n+    def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "4602ed695fe68ccdc8202a1e6cd105f9c013c9ef", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -395,6 +395,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         }\n     }\n \n+    fn visit_const_param_default(&mut self, param: HirId, ct: &'hir AnonConst) {\n+        self.with_parent(param, |this| intravisit::walk_const_param_default(this, ct))\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         self.with_dep_node_owner(ti.def_id, ti, |this, hash| {\n             this.insert_with_hash(ti.span, ti.hir_id(), Node::TraitItem(ti), hash);"}, {"sha": "36162cfe92452a14bcfcc2adfb0f698cf2c09fac", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -93,6 +93,12 @@ rustc_queries! {\n         desc { |tcx| \"computing the optional const parameter of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n+    /// Given the def_id of a const-generic parameter, computes the associated default const\n+    /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n+    query const_param_default(param: DefId) -> &'tcx ty::Const<'tcx> {\n+        desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n+    }\n+\n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n         desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }"}, {"sha": "c78151271c171fdb8d8f30da1ab80833ada2d52c", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::{ParamEnv, ParamEnvAnd};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n \n mod int;\n@@ -202,3 +202,18 @@ impl<'tcx> Const<'tcx> {\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n }\n+\n+pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Const<'tcx> {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let default_def_id = match tcx.hir().get(hir_id) {\n+        hir::Node::GenericParam(hir::GenericParam {\n+            kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n+            ..\n+        }) => tcx.hir().local_def_id(ac.hir_id),\n+        _ => span_bug!(\n+            tcx.def_span(def_id),\n+            \"`const_param_default` expected a generic parameter with a constant\"\n+        ),\n+    };\n+    Const::from_anon_const(tcx, default_def_id)\n+}"}, {"sha": "56c38baa2df81656325e0b121ac99c3e74536937", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2221,7 +2221,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let adt_def = self.adt_def(wrapper_def_id);\n         let substs =\n             InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {\n-                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => bug!(),\n+                GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n                         ty_param.into()\n@@ -2416,7 +2416,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n-            GenericParamDefKind::Const => {\n+            GenericParamDefKind::Const { .. } => {\n                 self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()\n             }\n         }"}, {"sha": "d30a8693959f39a17a7c381fb702fa8bcc9792be", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -18,22 +18,24 @@ pub enum GenericParamDefKind {\n         object_lifetime_default: ObjectLifetimeDefault,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n-    Const,\n+    Const {\n+        has_default: bool,\n+    },\n }\n \n impl GenericParamDefKind {\n     pub fn descr(&self) -> &'static str {\n         match self {\n             GenericParamDefKind::Lifetime => \"lifetime\",\n             GenericParamDefKind::Type { .. } => \"type\",\n-            GenericParamDefKind::Const => \"constant\",\n+            GenericParamDefKind::Const { .. } => \"constant\",\n         }\n     }\n     pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const => {\n+            GenericParamDefKind::Const { .. } => {\n                 ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n             }\n         }\n@@ -105,7 +107,7 @@ impl<'tcx> Generics {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n                 GenericParamDefKind::Type { .. } => own_counts.types += 1,\n-                GenericParamDefKind::Const => own_counts.consts += 1,\n+                GenericParamDefKind::Const { .. } => own_counts.consts += 1,\n             }\n         }\n \n@@ -121,8 +123,8 @@ impl<'tcx> Generics {\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     own_defaults.types += has_default as usize;\n                 }\n-                GenericParamDefKind::Const => {\n-                    // FIXME(const_generics:defaults)\n+                GenericParamDefKind::Const { has_default } => {\n+                    own_defaults.consts += has_default as usize;\n                 }\n             }\n         }\n@@ -146,7 +148,9 @@ impl<'tcx> Generics {\n     pub fn own_requires_monomorphization(&self) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => return true,\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+                    return true;\n+                }\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }\n@@ -189,7 +193,7 @@ impl<'tcx> Generics {\n     pub fn const_param(&'tcx self, param: &ParamConst, tcx: TyCtxt<'tcx>) -> &GenericParamDef {\n         let param = self.param_at(param.index as usize, tcx);\n         match param.kind {\n-            GenericParamDefKind::Const => param,\n+            GenericParamDefKind::Const { .. } => param,\n             _ => bug!(\"expected const parameter, but found another generic parameter\"),\n         }\n     }"}, {"sha": "f61b6946985e5831f230a28bb273da7fd20e0e0c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -593,7 +593,7 @@ fn polymorphize<'tcx>(\n                 },\n \n             // Simple case: If parameter is a const or type parameter..\n-            ty::GenericParamDefKind::Const | ty::GenericParamDefKind::Type { .. } if\n+            ty::GenericParamDefKind::Const { .. } | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n                 unused.contains(param.index).unwrap_or(false) =>\n                     // ..then use the identity for this parameter."}, {"sha": "ed10a1566223ef282661e4e6802083850bdb7900", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1949,6 +1949,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         all_local_trait_impls: trait_def::all_local_trait_impls,\n         type_uninhabited_from: inhabitedness::type_uninhabited_from,\n+        const_param_default: consts::const_param_default,\n         ..*providers\n     };\n }"}, {"sha": "a47846828bd6002d3c1ad11134feaa1bb6e56a4b", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -193,17 +193,19 @@ pub trait Printer<'tcx>: Sized {\n             .params\n             .iter()\n             .rev()\n-            .take_while(|param| {\n-                match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => false,\n-                    ty::GenericParamDefKind::Type { has_default, .. } => {\n-                        has_default\n-                            && substs[param.index as usize]\n-                                == GenericArg::from(\n-                                    self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n-                                )\n-                    }\n-                    ty::GenericParamDefKind::Const => false, // FIXME(const_generics_defaults)\n+            .take_while(|param| match param.kind {\n+                ty::GenericParamDefKind::Lifetime => false,\n+                ty::GenericParamDefKind::Type { has_default, .. } => {\n+                    has_default\n+                        && substs[param.index as usize]\n+                            == GenericArg::from(\n+                                self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n+                            )\n+                }\n+                ty::GenericParamDefKind::Const { has_default } => {\n+                    has_default\n+                        && substs[param.index as usize]\n+                            == GenericArg::from(self.tcx().const_param_default(param.def_id))\n                 }\n             })\n             .count();"}, {"sha": "c5c701082e66c89665d91e422f7b647b307687fd", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1175,7 +1175,8 @@ fn create_mono_items_for_default_impls<'tcx>(\n                     let substs =\n                         InternalSubsts::for_item(tcx, method.def_id, |param, _| match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-                            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                            GenericParamDefKind::Type { .. }\n+                            | GenericParamDefKind::Const { .. } => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         });"}, {"sha": "8a6ac843534c659a883e7d9fc6def13ece3f0cb0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -507,10 +507,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n         let kind = match &p.kind {\n-            // FIXME(const_generics_defaults)\n-            hir::GenericParamKind::Type { default, .. } if default.is_some() => {\n-                AnnotationKind::Container\n-            }\n+            // Allow stability attributes on default generic arguments.\n+            hir::GenericParamKind::Type { default: Some(_), .. }\n+            | hir::GenericParamKind::Const { default: Some(_), .. } => AnnotationKind::Container,\n             _ => AnnotationKind::Prohibited,\n         };\n "}, {"sha": "e092bb845ffacb874fbe6ecc54e7a71d1d278fde", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -928,8 +928,11 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n                         self.visit(self.ev.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const => {\n+                GenericParamDefKind::Const { has_default, .. } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n+                    if has_default {\n+                        self.visit(self.ev.tcx.const_param_default(param.def_id));\n+                    }\n                 }\n             }\n         }\n@@ -1741,7 +1744,8 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n                         self.visit(self.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const => {\n+                // FIXME(const_evaluatable_checked): May want to look inside const here\n+                GenericParamDefKind::Const { .. } => {\n                     self.visit(self.tcx.type_of(param.def_id));\n                 }\n             }"}, {"sha": "d402fa4f8494f9fcb0a475532e9fdf6dab3d997e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -450,12 +450,12 @@ impl<'a> Resolver<'a> {\n                     self.session,\n                     span,\n                     E0128,\n-                    \"type parameters with a default cannot use \\\n+                    \"generic parameters with a default cannot use \\\n                                                 forward declared identifiers\"\n                 );\n                 err.span_label(\n                     span,\n-                    \"defaulted type parameters cannot be forward declared\".to_string(),\n+                    \"defaulted generic parameters cannot be forward declared\".to_string(),\n                 );\n                 err\n             }"}, {"sha": "f9f33492a1ec35d0e6584755056b33dc86729244", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -132,10 +132,10 @@ crate enum RibKind<'a> {\n     /// We passed through a `macro_rules!` statement\n     MacroDefinition(DefId),\n \n-    /// All bindings in this rib are type parameters that can't be used\n-    /// from the default of a type parameter because they're not declared\n-    /// before said type parameter. Also see the `visit_generics` override.\n-    ForwardTyParamBanRibKind,\n+    /// All bindings in this rib are generic parameters that can't be used\n+    /// from the default of a generic parameter because they're not declared\n+    /// before said generic parameter. Also see the `visit_generics` override.\n+    ForwardGenericParamBanRibKind,\n \n     /// We are inside of the type of a const parameter. Can't refer to any\n     /// parameters.\n@@ -154,7 +154,7 @@ impl RibKind<'_> {\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n-            AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n+            AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n         }\n     }\n }\n@@ -555,15 +555,16 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n+        let mut default_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n         let mut found_default = false;\n         default_ban_rib.bindings.extend(generics.params.iter().filter_map(\n             |param| match param.kind {\n-                GenericParamKind::Const { .. } | GenericParamKind::Lifetime { .. } => None,\n-                GenericParamKind::Type { ref default, .. } => {\n-                    found_default |= default.is_some();\n-                    found_default.then_some((Ident::with_dummy_span(param.ident.name), Res::Err))\n+                GenericParamKind::Type { default: Some(_), .. }\n+                | GenericParamKind::Const { default: Some(_), .. } => {\n+                    found_default = true;\n+                    Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n                 }\n+                _ => None,\n             },\n         ));\n \n@@ -591,8 +592,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                     if let Some(ref ty) = default {\n                         self.ribs[TypeNS].push(default_ban_rib);\n-                        self.with_rib(ValueNS, ForwardTyParamBanRibKind, |this| {\n-                            // HACK: We use an empty `ForwardTyParamBanRibKind` here which\n+                        self.with_rib(ValueNS, ForwardGenericParamBanRibKind, |this| {\n+                            // HACK: We use an empty `ForwardGenericParamBanRibKind` here which\n                             // is only used to forbid the use of const parameters inside of\n                             // type defaults.\n                             //\n@@ -865,7 +866,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ItemRibKind(..)\n                 | ConstantItemRibKind(..)\n                 | ModuleRibKind(..)\n-                | ForwardTyParamBanRibKind\n+                | ForwardGenericParamBanRibKind\n                 | ConstParamTyRibKind => {\n                     return false;\n                 }"}, {"sha": "744945c5b0ffb220aaa98fc4de1efb8a4540d4cd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2004,7 +2004,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             GenericParamDefKind::Type { object_lifetime_default, .. } => {\n                                 Some(object_lifetime_default)\n                             }\n-                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => {\n+                                None\n+                            }\n                         })\n                         .collect()\n                 })"}, {"sha": "14e3d8498b0d8d4a278bac71de474a3492414dc4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -228,7 +228,7 @@ enum ResolutionError<'a> {\n     ),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n-    /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n+    /// Error E0128: generic parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n@@ -238,7 +238,7 @@ enum ResolutionError<'a> {\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n-    /// Error E0735: type parameters with a default cannot use `Self`\n+    /// Error E0735: generic parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n     UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },\n@@ -2592,8 +2592,8 @@ impl<'a> Resolver<'a> {\n         debug!(\"validate_res_from_ribs({:?})\", res);\n         let ribs = &all_ribs[rib_index + 1..];\n \n-        // An invalid forward use of a type parameter from a previous default.\n-        if let ForwardTyParamBanRibKind = all_ribs[rib_index].kind {\n+        // An invalid forward use of a generic parameter from a previous default.\n+        if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInTyParamDefault\n@@ -2617,7 +2617,7 @@ impl<'a> Resolver<'a> {\n                         | ClosureOrAsyncRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind => {\n+                        | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {\n@@ -2689,7 +2689,9 @@ impl<'a> Resolver<'a> {\n \n                         // We only forbid constant items if we are inside of type defaults,\n                         // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardGenericParamBanRibKind => {\n+                            // FIXME(const_generic_defaults): we may need to distinguish between\n+                            // being in type parameter defaults and const parameter defaults\n                             in_ty_param_default = true;\n                             continue;\n                         }\n@@ -2782,7 +2784,9 @@ impl<'a> Resolver<'a> {\n \n                         // We only forbid constant items if we are inside of type defaults,\n                         // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardGenericParamBanRibKind => {\n+                            // FIXME(const_generic_defaults): we may need to distinguish between\n+                            // being in type parameter defaults and const parameter defaults\n                             in_ty_param_default = true;\n                             continue;\n                         }"}, {"sha": "c3bc1c191ff09bdcdd6a4912560427153bd68959", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -614,11 +614,12 @@ impl<'hir> Sig for hir::Generics<'hir> {\n                 start: offset + text.len(),\n                 end: offset + text.len() + param_text.as_str().len(),\n             });\n-            if let hir::GenericParamKind::Const { ref ty, ref default } = param.kind {\n+            if let hir::GenericParamKind::Const { ref ty, default } = param.kind {\n                 param_text.push_str(\": \");\n                 param_text.push_str(&ty_to_string(&ty));\n-                if let Some(ref _default) = default {\n-                    // FIXME(const_generics_defaults): push the `default` value here\n+                if let Some(default) = default {\n+                    param_text.push_str(\" = \");\n+                    param_text.push_str(&id_to_string(&scx.tcx.hir(), default.hir_id));\n                 }\n             }\n             if !param.bounds.is_empty() {"}, {"sha": "116519855d77664ab30ad6566dd3f17e31244c5d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -384,6 +384,7 @@ symbols! {\n         const_fn_fn_ptr_basics,\n         const_fn_transmute,\n         const_fn_union,\n+        const_generic_defaults,\n         const_generics,\n         const_generics_defaults,\n         const_if_match,"}, {"sha": "cecdcc978960983ceb833825db45fb1a948140a4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         for param in generics.params.iter() {\n             let value = match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 }\n                 GenericParamDefKind::Lifetime => continue,"}, {"sha": "f26eb159105d710ee34976062a9efba1462e6607", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -483,7 +483,7 @@ fn vtable_methods<'tcx>(\n             let substs = trait_ref.map_bound(|trait_ref| {\n                 InternalSubsts::for_item(tcx, def_id, |param, _| match param.kind {\n                     GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                         trait_ref.substs[param.index as usize]\n                     }\n                 })"}, {"sha": "209fd83b3ab3467caf30665072f510088acf139d", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -337,7 +337,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             .iter()\n             .filter_map(|param| {\n                 let value = match param.kind {\n-                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                         trait_ref.substs[param.index as usize].to_string()\n                     }\n                     GenericParamDefKind::Lifetime => return None,"}, {"sha": "5c0cb2fb8357896309984c74d36913274f2c5bc0", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -739,7 +739,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n             tcx.mk_region(ty::RegionKind::ReLateBound(ty::INNERMOST, br)).into()\n         }\n \n-        ty::GenericParamDefKind::Const => tcx\n+        ty::GenericParamDefKind::Const { .. } => tcx\n             .mk_const(ty::Const {\n                 val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                 ty: tcx.type_of(param.def_id),"}, {"sha": "9625211109d1067c04d2572ab2de4473c33a4268", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -64,7 +64,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     kind: hir::TyKind::Path(rustc_hir::QPath::Resolved(_, path)),\n                     ..\n                 }),\n-                GenericParamDefKind::Const,\n+                GenericParamDefKind::Const { .. },\n             ) => match path.res {\n                 Res::Err => {\n                     add_braces_suggestion(arg, &mut err);\n@@ -93,7 +93,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             },\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Path(_), .. }),\n-                GenericParamDefKind::Const,\n+                GenericParamDefKind::Const { .. },\n             ) => add_braces_suggestion(arg, &mut err),\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n@@ -236,7 +236,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         match (arg, &param.kind, arg_count.explicit_late_bound) {\n                             (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime, _)\n                             | (GenericArg::Type(_), GenericParamDefKind::Type { .. }, _)\n-                            | (GenericArg::Const(_), GenericParamDefKind::Const, _) => {\n+                            | (GenericArg::Const(_), GenericParamDefKind::Const { .. }, _) => {\n                                 substs.push(ctx.provided_kind(param, arg));\n                                 args.next();\n                                 params.next();\n@@ -282,7 +282,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                     GenericParamDefKind::Type { .. } => {\n                                                         ParamKindOrd::Type\n                                                     }\n-                                                    GenericParamDefKind::Const => {\n+                                                    GenericParamDefKind::Const { .. } => {\n                                                         ParamKindOrd::Const {\n                                                             unordered: tcx\n                                                                 .features()\n@@ -499,7 +499,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let expected_min = if infer_args {\n                 0\n             } else {\n-                param_counts.consts + named_type_param_count - default_counts.types\n+                param_counts.consts + named_type_param_count\n+                    - default_counts.types\n+                    - default_counts.consts\n             };\n \n             check_generics("}, {"sha": "8076aa7102c6c82400b303b8f1b1c246e9aa4aba", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -443,7 +443,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv.ast_ty_to_ty(&ty).into()\n                         }\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         ty::Const::from_opt_const_arg_anon_const(\n                             tcx,\n                             ty::WithOptConstParam {\n@@ -504,15 +504,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.ty_error().into()\n                         }\n                     }\n-                    GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n-                        // FIXME(const_generics_defaults)\n-                        if infer_args {\n-                            // No const parameters were provided, we can infer all.\n-                            self.astconv.ct_infer(ty, Some(param), self.span).into()\n+                        if !infer_args && has_default {\n+                            tcx.const_param_default(param.def_id).into()\n                         } else {\n-                            // We've already errored above about the mismatch.\n-                            tcx.const_error(ty).into()\n+                            if infer_args {\n+                                self.astconv.ct_infer(ty, Some(param), self.span).into()\n+                            } else {\n+                                // We've already errored above about the mismatch.\n+                                tcx.const_error(ty).into()\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "ddb11b9f3b16bf426a6581cfc3edc0cd47c152eb", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -792,11 +792,11 @@ fn compare_synthetic_generics<'tcx>(\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-        GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+        GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => None,\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-        GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+        GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => None,\n     });\n     for ((impl_def_id, impl_synthetic), (trait_def_id, trait_synthetic)) in\n         impl_m_type_params.zip(trait_m_type_params)"}, {"sha": "56ff9293dd87fba978a8c3e07d78d3860dee3749", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1405,7 +1405,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.fcx.to_ty(ty).into()\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.fcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),\n@@ -1443,10 +1443,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.fcx.var_for_def(self.span, param)\n                         }\n                     }\n-                    GenericParamDefKind::Const => {\n-                        // FIXME(const_generics_defaults)\n-                        // No const parameters were provided, we have to infer them.\n-                        self.fcx.var_for_def(self.span, param)\n+                    GenericParamDefKind::Const { has_default, .. } => {\n+                        if !infer_args && has_default {\n+                            tcx.const_param_default(param.def_id).into()\n+                        } else {\n+                            self.fcx.var_for_def(self.span, param)\n+                        }\n                     }\n                 }\n             }"}, {"sha": "731a72ff024dcbfa56a9ae9404f48ef888628ce4", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.cfcx.to_ty(ty).into()\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.cfcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),"}, {"sha": "d6fa6bf0067f94b5f6707dba0af95a7cdda5218e", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Construct a trait-reference `self_ty : Trait<input_tys>`\n         let substs = InternalSubsts::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => {}\n+                GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => {}\n                 GenericParamDefKind::Type { .. } => {\n                     if param.index == 0 {\n                         return self_ty.into();"}, {"sha": "0742549f8904ea40b4b1f3ecd1999620a6deb970", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1700,7 +1700,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             // In general, during probe we erase regions.\n                             self.tcx.lifetimes.re_erased.into()\n                         }\n-                        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                             self.var_for_def(self.span, param)\n                         }\n                     }"}, {"sha": "5f302f7d0a94e7eb8be786f7481a40e306396c6b", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -713,10 +713,11 @@ fn check_where_clauses<'tcx, 'fcx>(\n     let generics = tcx.generics_of(def_id);\n \n     let is_our_default = |def: &ty::GenericParamDef| match def.kind {\n-        GenericParamDefKind::Type { has_default, .. } => {\n+        GenericParamDefKind::Type { has_default, .. }\n+        | GenericParamDefKind::Const { has_default } => {\n             has_default && def.index >= generics.parent_count as u32\n         }\n-        _ => unreachable!(),\n+        GenericParamDefKind::Lifetime => unreachable!(),\n     };\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n@@ -771,10 +772,15 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n                 fcx.tcx.mk_param_from_def(param)\n             }\n-\n-            GenericParamDefKind::Const => {\n-                // FIXME(const_generics_defaults)\n-                fcx.tcx.mk_param_from_def(param)\n+            GenericParamDefKind::Const { .. } => {\n+                if is_our_default(param) {\n+                    let default_ct = tcx.const_param_default(param.def_id);\n+                    // Const params currently have to be concrete.\n+                    assert!(!default_ct.needs_subst());\n+                    default_ct.into()\n+                } else {\n+                    fcx.tcx.mk_param_from_def(param)\n+                }\n             }\n         }\n     });"}, {"sha": "cb0eea1b7067c7585eeb47dd51847904f2711f0c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -254,10 +254,15 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                     self.tcx.ensure().type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n-                hir::GenericParamKind::Const { .. } => {\n+                hir::GenericParamKind::Const { default, .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n-                    // FIXME(const_generics_defaults)\n+                    if let Some(default) = default {\n+                        let default_def_id = self.tcx.hir().local_def_id(default.hir_id);\n+                        // need to store default and type of default\n+                        self.tcx.ensure().type_of(default_def_id);\n+                        self.tcx.ensure().const_param_default(def_id);\n+                    }\n                 }\n             }\n         }\n@@ -1523,7 +1528,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         |lint| {\n                             lint.build(\n                                 \"defaults for type parameters are only allowed in \\\n-                                 `struct`, `enum`, `type`, or `trait` definitions.\",\n+                                 `struct`, `enum`, `type`, or `trait` definitions\",\n                             )\n                             .emit();\n                         },\n@@ -1549,13 +1554,21 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             i += 1;\n             Some(param_def)\n         }\n-        GenericParamKind::Const { .. } => {\n+        GenericParamKind::Const { default, .. } => {\n+            if !allow_defaults && default.is_some() {\n+                tcx.sess.span_err(\n+                    param.span,\n+                    \"defaults for const parameters are only allowed in \\\n+                    `struct`, `enum`, `type`, or `trait` definitions\",\n+                );\n+            }\n+\n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n-                kind: ty::GenericParamDefKind::Const,\n+                kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n             };\n             i += 1;\n             Some(param_def)"}, {"sha": "a05cc36fd4c1c8731181d35ef5fcbd0b7a8736de", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -83,7 +83,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     return generics\n                         .params\n                         .iter()\n-                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                         .nth(arg_index)\n                         .map(|param| param.def_id);\n                 }\n@@ -121,7 +121,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 tcx.generics_of(type_dependent_def)\n                     .params\n                     .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                     .nth(idx)\n                     .map(|param| param.def_id)\n             }\n@@ -211,7 +211,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 generics\n                     .params\n                     .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                     .nth(arg_index)\n                     .map(|param| param.def_id)\n             }\n@@ -436,6 +436,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     .discr_type()\n                     .to_ty(tcx),\n \n+                Node::GenericParam(&GenericParam {\n+                    hir_id: param_hir_id,\n+                    kind: GenericParamKind::Const { default: Some(ct), .. },\n+                    ..\n+                }) if ct.hir_id == hir_id => tcx.type_of(tcx.hir().local_def_id(param_hir_id)),\n+\n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,\n                     &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),"}, {"sha": "1240946860573bf88e96ad26651ae0fd156a399e", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -173,7 +173,7 @@ fn enforce_impl_params_are_constrained(\n                     );\n                 }\n             }\n-            ty::GenericParamDefKind::Const => {\n+            ty::GenericParamDefKind::Const { .. } => {\n                 let param_ct = ty::ParamConst::for_def(param);\n                 if !input_parameters.contains(&cgp::Parameter::from(param_ct)) {\n                     report_unused_parameter("}, {"sha": "1a4d88ced0e4599db0a310b7ba06d596522ca98a", "filename": "compiler/rustc_typeck/src/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n \n         // Make all const parameters invariant.\n         for param in generics.params.iter() {\n-            if let ty::GenericParamDefKind::Const = param.kind {\n+            if let ty::GenericParamDefKind::Const { .. } = param.kind {\n                 variances[param.index as usize] = ty::Invariant;\n             }\n         }"}, {"sha": "769b6e952dc9caa04fda579957c5b43b4a1d5a96", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Defaulted<const N: usize=3>;\n+impl Defaulted {\n+    pub fn new() -> Self {\n+        Defaulted\n+    }\n+}\n+impl<const N: usize> Defaulted<N> {\n+    pub fn value(&self) -> usize {\n+        N\n+    }\n+}"}, {"sha": "150c70770ae51e69d1627326c5e898707aa7c911", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+\n+pub struct ConstDefault<const N: usize = 3>;\n+\n+impl<const N: usize> ConstDefault<N> {\n+    fn foo(self) -> usize {\n+        N\n+    }\n+}\n+\n+impl ConstDefault {\n+    fn new() -> Self {\n+        ConstDefault\n+    }\n+\n+    fn bar(self) {}\n+}\n+\n+pub fn main() {\n+    let s = ConstDefault::new();\n+    assert_eq!(s.foo(), 3);\n+\n+    let w = ConstDefault::<3>;\n+    w.bar();\n+}"}, {"sha": "e6e8d732beef3c436b498d83e73a831752cd7a21", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(staged_api)]\n+\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+#![stable(feature = \"const_default_test\", since=\"none\")]\n+\n+\n+#[unstable(feature = \"const_default_stable\", issue=\"none\")]\n+pub struct ConstDefaultUnstable<const N: usize = 3>;\n+\n+#[stable(feature = \"const_default_unstable\", since=\"none\")]\n+pub struct ConstDefaultStable<const N: usize = {\n+  #[stable(feature = \"const_default_unstable_val\", since=\"none\")]\n+  3\n+}>;\n+\n+fn main() {}"}, {"sha": "b39e69ab10b668c93e539d609cc6d1831c4ded16", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,27 @@\n+// aux-build:const_defaulty.rs\n+// check-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+extern crate const_defaulty;\n+use const_defaulty::Defaulted;\n+\n+struct Local<const N: usize=4>;\n+impl Local {\n+    fn new() -> Self {\n+        Local\n+    }\n+}\n+impl<const N: usize>Local<N> {\n+    fn value(&self) -> usize {\n+        N\n+    }\n+}\n+\n+fn main() {\n+    let v = Defaulted::new();\n+    assert_eq!(v.value(), 3);\n+\n+    let l = Local::new();\n+    assert_eq!(l.value(), 4);\n+}"}, {"sha": "bf578468bb617b176be7f5b367d8bbf0822dcb3e", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Example<const N: usize=13>;\n+pub struct Example2<T=u32, const N: usize=13>(T);\n+pub struct Example3<const N: usize=13, T=u32>(T);\n+pub struct Example4<const N: usize=13, const M: usize=4>;\n+\n+fn main() {\n+  let e: Example::<13> = ();\n+  //~^ Error: mismatched types\n+  let e: Example2::<u32, 13> = ();\n+  //~^ Error: mismatched types\n+  let e: Example3::<13, u32> = ();\n+  //~^ Error: mismatched types\n+  let e: Example3::<7> = ();\n+  //~^ Error: mismatched types\n+  // FIXME(const_generics_defaults): There should be a note for the error below, but it is\n+  // missing.\n+  let e: Example4::<7> = ();\n+  //~^ Error: mismatched types\n+}"}, {"sha": "c66eb4cd645948b1fc0e1cf3279b252d33e176af", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:11:26\n+   |\n+LL |   let e: Example::<13> = ();\n+   |          -------------   ^^ expected struct `Example`, found `()`\n+   |          |\n+   |          expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:13:32\n+   |\n+LL |   let e: Example2::<u32, 13> = ();\n+   |          -------------------   ^^ expected struct `Example2`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example2`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:15:32\n+   |\n+LL |   let e: Example3::<13, u32> = ();\n+   |          -------------------   ^^ expected struct `Example3`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example3`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:17:26\n+   |\n+LL |   let e: Example3::<7> = ();\n+   |          -------------   ^^ expected struct `Example3`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example3<7_usize>`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:21:26\n+   |\n+LL |   let e: Example4::<7> = ();\n+   |          -------------   ^^ expected struct `Example4`, found `()`\n+   |          |\n+   |          expected due to this\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a25d4baca1a978bb5895f6079f9ddc53cc78cc32", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,13 @@\n+// Test the AST pretty printer correctly handles default values for const generics\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<const KIND: bool = true> {}\n+\n+fn foo<const SIZE: usize = 5>() {}\n+\n+struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = {FROM + LEN}>;"}, {"sha": "f7a1d2ca4b2ef6b3184a74a9c3dce7e883368190", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,20 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+// Test the AST pretty printer correctly handles default values for const generics\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+trait Foo<const KIND : bool = true> { }\n+\n+fn foo<const SIZE : usize = 5>() { }\n+\n+struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n+             { FROM + LEN }>;"}, {"sha": "accc73134d8997f984832b730d4b62ce98871923", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {"}, {"sha": "c8f1d471b244b3497ae28a6f3704e1745d2b8df9", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {"}, {"sha": "5c2d9b8ad475104d5e488a331f4f05b1b8ecc49b", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -2,7 +2,7 @@\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n \n struct A<T = u32, const N: usize> {\n-    //~^ ERROR type parameters with a default must be trailing\n+    //~^ ERROR generic parameters with a default must be trailing\n     arg: T,\n }\n "}, {"sha": "ae82c85eb7e4be6031348c389cd4ec5937af50af", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features, dead_code)]\n+\n+struct Both<const N: usize=3, T> {\n+//~^ ERROR: generic parameters with a default must be\n+  v: T\n+}"}, {"sha": "f7a2e484fc61bcbcb5e709cbded0e1850004215e", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,8 @@\n+error: generic parameters with a default must be trailing\n+  --> $DIR/const_default_first.rs:6:19\n+   |\n+LL | struct Both<const N: usize=3, T> {\n+   |                   ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ebdb5a65bc351840ef94784a7cf5dc1f027a7e7b", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,6 @@\n-fn foo<const SIZE: usize = 5>() {}\n-//~^ ERROR default values for const generic parameters are experimental\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n \n-fn main() {}\n+fn foo<const SIZE: usize = 5usize>() {}\n+//~^ ERROR defaults for const parameters are"}, {"sha": "243ac0db5f55f194defecdf313977cefc6c287dc", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/default_function_param.rs:1:26\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default_function_param.rs:5:14\n    |\n-LL | fn foo<const SIZE: usize = 5>() {}\n-   |                          ^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n+LL | fn foo<const SIZE: usize = 5usize>() {}\n+   |              ^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "435a63a5283457a576e99abdf381fa60a8464e31", "filename": "src/test/ui/const-generics/min_const_generics/type_and_const_defaults.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features, dead_code)]\n+\n+struct Both<T=u32, const N: usize=3> {\n+  arr: [T; N]\n+}\n+\n+trait BothTrait<T=u32, const N: usize=3> {}\n+\n+enum BothEnum<T=u32, const N: usize=3> {\n+  Dummy([T; N])\n+}\n+\n+struct OppOrder<const N: usize=3, T=u32> {\n+  arr: [T; N]\n+}\n+\n+fn main() {\n+  let _ = OppOrder::<3, u32> {\n+    arr: [0,0,0],\n+  };\n+  let _ = Both::<u8, 1> {\n+    arr: [0],\n+  };\n+}"}, {"sha": "c2b7b206653a60d97a73f92aa5e4ba549608f2ea", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "4a462c328bf6457e434d3c613f9b2d40db74e041", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "c7be8bdaf9c3dc68fe5be5b322c56c353ba0f06b", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -10,6 +10,6 @@ struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n // FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n //~^ ERROR constant values inside of type parameter defaults\n-//~| ERROR type parameters with a default\n+//~| ERROR generic parameters with a default\n \n fn main() {}"}, {"sha": "eb66d46936a85ab6be4f5253373af029f3dc1b6a", "filename": "src/test/ui/error-codes/E0128.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/E0128.rs:1:14\n    |\n LL | struct Foo<T=U, U=()> {\n-   |              ^ defaulted type parameters cannot be forward declared\n+   |              ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "5cd38ebab370e08767eff7934e5d907abbe87f7c", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,4 +1,4 @@\n-error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:3:8\n    |\n LL | fn avg<T=i32>(_: T) {}\n@@ -8,7 +8,7 @@ LL | fn avg<T=i32>(_: T) {}\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n-error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6\n    |\n LL | impl<T=i32> S<T> {}"}, {"sha": "cb2bb2832b70e956ed37e42acace9ad62ab312ad", "filename": "src/test/ui/generics/generic-non-trailing-defaults.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,10 +1,9 @@\n struct Heap;\n \n struct Vec<A = Heap, T>(A, T);\n-//~^ ERROR type parameters with a default must be trailing\n+//~^ ERROR generic parameters with a default must be trailing\n \n struct Foo<A, B = Vec<C>, C>(A, B, C);\n-//~^ ERROR type parameters with a default must be trailing\n-//~| ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default must be trailing\n \n fn main() {}"}, {"sha": "6d7686175033545215869f2b111652728784d654", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,21 +1,14 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/generic-non-trailing-defaults.rs:3:12\n    |\n LL | struct Vec<A = Heap, T>(A, T);\n    |            ^\n \n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/generic-non-trailing-defaults.rs:6:15\n    |\n LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n    |               ^\n \n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n-  --> $DIR/generic-non-trailing-defaults.rs:6:23\n-   |\n-LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n-   |                       ^ defaulted type parameters cannot be forward declared\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0128`."}, {"sha": "000c47095d27ca988f3b3fa944051adea7066b7b", "filename": "src/test/ui/generics/generic-type-params-forward-mention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,6 +1,6 @@\n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>(T, U);\n-//~^ ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n fn main() {\n     let x: Foo;\n }"}, {"sha": "fa661c274ebcaefba3d31224c8e7c992058f0424", "filename": "src/test/ui/generics/generic-type-params-forward-mention.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/generic-type-params-forward-mention.rs:2:23\n    |\n LL | struct Foo<T = Option<U>, U = bool>(T, U);\n-   |                       ^ defaulted type parameters cannot be forward declared\n+   |                       ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "a7dc64708d85615be2746ba6d32916aaa96293b6", "filename": "src/test/ui/issues/issue-18183.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/issue-18183.rs:1:20\n    |\n LL | pub struct Foo<Bar=Bar>(Bar);\n-   |                    ^^^ defaulted type parameters cannot be forward declared\n+   |                    ^^^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "3391ea4b350af466de5ae328d942c0b56b443ced", "filename": "src/test/ui/issues/issue-26812.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,6 +1,6 @@\n #![feature(default_type_parameter_fallback)]\n \n fn avg<T=T::Item>(_: T) {}\n-//~^ ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n \n fn main() {}"}, {"sha": "fd1bbb9c5673d2df5eb580b786cbf6290e3d9585", "filename": "src/test/ui/issues/issue-26812.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/issue-26812.rs:3:10\n    |\n LL | fn avg<T=T::Item>(_: T) {}\n-   |          ^^^^^^^ defaulted type parameters cannot be forward declared\n+   |          ^^^^^^^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "e202b5061a678dfc8cd418e8023ed25c620de753", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b33de3340c7b36646af46303a30f7066b4bd7db/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=5b33de3340c7b36646af46303a30f7066b4bd7db", "patch": "@@ -408,6 +408,10 @@ pub fn eq_use_tree(l: &UseTree, r: &UseTree) -> bool {\n     eq_path(&l.prefix, &r.prefix) && eq_use_tree_kind(&l.kind, &r.kind)\n }\n \n+pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n+  eq_expr(&l.value, &r.value)\n+}\n+\n pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n@@ -418,10 +422,6 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     }\n }\n \n-pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n-    eq_expr(&l.value, &r.value)\n-}\n-\n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n     matches!(\n         (l, r),"}]}