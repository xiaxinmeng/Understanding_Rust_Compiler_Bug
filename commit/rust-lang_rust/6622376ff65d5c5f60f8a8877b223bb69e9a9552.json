{"sha": "6622376ff65d5c5f60f8a8877b223bb69e9a9552", "node_id": "C_kwDOAAsO6NoAKDY2MjIzNzZmZjY1ZDVjNWY2MGY4YTg4NzdiMjIzYmI2OWU5YTk1NTI", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-11-08T03:54:19Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-11-10T03:10:34Z"}, "message": "Use computed visibility in rustdoc", "tree": {"sha": "173f8cb2464f915c886b96fec8f2d1febfbe2f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/173f8cb2464f915c886b96fec8f2d1febfbe2f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6622376ff65d5c5f60f8a8877b223bb69e9a9552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6622376ff65d5c5f60f8a8877b223bb69e9a9552", "html_url": "https://github.com/rust-lang/rust/commit/6622376ff65d5c5f60f8a8877b223bb69e9a9552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6622376ff65d5c5f60f8a8877b223bb69e9a9552/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a987b04668641772e2d481bdacb6e00ab3d95ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a987b04668641772e2d481bdacb6e00ab3d95ef", "html_url": "https://github.com/rust-lang/rust/commit/9a987b04668641772e2d481bdacb6e00ab3d95ef"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "a44641f4488e8aae4234608bdf8f740a2f159eac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6622376ff65d5c5f60f8a8877b223bb69e9a9552", "patch": "@@ -1881,7 +1881,7 @@ fn clean_extern_crate(\n     // this is the ID of the crate itself\n     let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n-    let please_inline = krate.vis.node.is_pub()\n+    let please_inline = cx.tcx.visibility(krate.def_id).is_public()\n         && attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n@@ -1933,9 +1933,12 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n+    let visibility = cx.tcx.visibility(import.def_id);\n     let attrs = cx.tcx.hir().attrs(import.hir_id());\n     let inline_attr = attrs.lists(sym::doc).get_word_attr(sym::inline);\n-    let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n+    let pub_underscore = visibility.is_public() && name == kw::Underscore;\n+    let current_mod = cx.tcx.parent_module_from_def_id(import.def_id);\n+    let parent_mod = cx.tcx.parent_module_from_def_id(current_mod);\n \n     if pub_underscore {\n         if let Some(ref inline) = inline_attr {\n@@ -1954,8 +1957,9 @@ fn clean_use_statement(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !(import.vis.node.is_pub()\n-        || (cx.render_options.document_private && import.vis.node.is_pub_restricted()))\n+    let mut denied = !(visibility.is_public()\n+        || (cx.render_options.document_private\n+            && visibility.is_accessible_from(parent_mod.to_def_id(), cx.tcx)))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)"}, {"sha": "2dba52afcd9cd847203c001024e4cb157dc7aafa", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6622376ff65d5c5f60f8a8877b223bb69e9a9552", "patch": "@@ -254,7 +254,7 @@ impl ExternalCrate {\n                             as_keyword(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n                         }\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n-                            if item.vis.node.is_pub() =>\n+                            if tcx.visibility(id.def_id).is_public() =>\n                         {\n                             as_keyword(path.res.expect_non_local())\n                                 .map(|(_, prim)| (id.def_id.to_def_id(), prim))\n@@ -320,7 +320,7 @@ impl ExternalCrate {\n                             as_primitive(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n                         }\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n-                            if item.vis.node.is_pub() =>\n+                            if tcx.visibility(id.def_id).is_public() =>\n                         {\n                             as_primitive(path.res.expect_non_local()).map(|(_, prim)| {\n                                 // Pretend the primitive is local."}, {"sha": "1191a94a7039bee6bf544d7d182dc31e706867c9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6622376ff65d5c5f60f8a8877b223bb69e9a9552/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6622376ff65d5c5f60f8a8877b223bb69e9a9552", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::mem;\n@@ -72,9 +71,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit(mut self) -> Module<'tcx> {\n-        let span = self.cx.tcx.def_span(CRATE_DEF_ID);\n         let mut top_level_module = self.visit_mod_contents(\n-            &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             self.cx.tcx.hir().root_module(),\n             self.cx.tcx.crate_name(LOCAL_CRATE),\n@@ -134,15 +131,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_mod_contents(\n         &mut self,\n-        vis: &hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name, id, m.inner);\n+        let def_id = self.cx.tcx.hir().local_def_id(id).to_def_id();\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n-        self.inside_public_path &= vis.node.is_pub();\n+        self.inside_public_path &= self.cx.tcx.visibility(def_id).is_public();\n         for &i in m.item_ids {\n             let item = self.cx.tcx.hir().item(i);\n             self.visit_item(item, None, &mut om);\n@@ -259,7 +256,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let name = renamed.unwrap_or(item.ident.name);\n \n         let def_id = item.def_id.to_def_id();\n-        let is_pub = item.vis.node.is_pub() || self.cx.tcx.has_attr(def_id, sym::macro_export);\n+        let is_pub = self.cx.tcx.visibility(def_id).is_public();\n \n         if is_pub {\n             self.store_path(item.def_id.to_def_id());\n@@ -332,7 +329,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(&item.vis, item.hir_id(), m, name));\n+                om.mods.push(self.visit_mod_contents(item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)\n@@ -368,7 +365,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions.\n-        if !self.inlining || item.vis.node.is_pub() {\n+        if !self.inlining || self.cx.tcx.visibility(item.def_id).is_public() {\n             om.foreigns.push((item, renamed));\n         }\n     }"}]}