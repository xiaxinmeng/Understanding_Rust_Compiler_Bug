{"sha": "e316c662f8ac029704922baa53a0831da031aea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTZjNjYyZjhhYzAyOTcwNDkyMmJhYTUzYTA4MzFkYTAzMWFlYTU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-05T14:00:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-05T14:00:25Z"}, "message": "debuginfo: Add `debuginfo::with_source_location_override()` function...\n\n... and use it to fix a debug-location issue with constants.", "tree": {"sha": "93d7709b30b0beb8f29fc72647d6782e7115d96c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d7709b30b0beb8f29fc72647d6782e7115d96c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e316c662f8ac029704922baa53a0831da031aea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e316c662f8ac029704922baa53a0831da031aea5", "html_url": "https://github.com/rust-lang/rust/commit/e316c662f8ac029704922baa53a0831da031aea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e316c662f8ac029704922baa53a0831da031aea5/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed12499e7d91f9cdfba5833e34d20e8fd19b898", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed12499e7d91f9cdfba5833e34d20e8fd19b898", "html_url": "https://github.com/rust-lang/rust/commit/fed12499e7d91f9cdfba5833e34d20e8fd19b898"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "39b430b7ad51ed1a6ddcb5eaeaa9baea1311e89e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e316c662f8ac029704922baa53a0831da031aea5", "patch": "@@ -173,7 +173,7 @@ pub fn get_const_expr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         &**expr\n     } else {\n         ccx.sess().span_bug(ref_expr.span,\n-                            &format!(\"get_const_val given non-constant item {}\",\n+                            &format!(\"get_const_expr given non-constant item {}\",\n                                      item.repr(ccx.tcx())));\n     }\n }"}, {"sha": "ab35a33cfdd5bf56097a149a6df14c5111c80287", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=e316c662f8ac029704922baa53a0831da031aea5", "patch": "@@ -695,6 +695,7 @@ struct FunctionDebugContextData {\n     fn_metadata: DISubprogram,\n     argument_counter: Cell<uint>,\n     source_locations_enabled: Cell<bool>,\n+    source_location_override: Cell<bool>,\n }\n \n enum VariableAccess<'a> {\n@@ -1174,6 +1175,12 @@ pub fn set_source_location(fcx: &FunctionContext,\n             return;\n         }\n         FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                // Just ignore any attempts to set a new debug location while\n+                // the override is active.\n+                return;\n+            }\n+\n             let cx = fcx.ccx;\n \n             debug!(\"set_source_location: {}\", cx.sess().codemap().span_to_string(span));\n@@ -1192,6 +1199,35 @@ pub fn set_source_location(fcx: &FunctionContext,\n     }\n }\n \n+/// This function makes sure that all debug locations emitted while executing\n+/// `wrapped_function` are set to the given `debug_loc`.\n+pub fn with_source_location_override<F, R>(fcx: &FunctionContext,\n+                                           debug_loc: DebugLoc,\n+                                           wrapped_function: F) -> R\n+    where F: FnOnce() -> R\n+{\n+    match fcx.debug_context {\n+        FunctionDebugContext::DebugInfoDisabled => {\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::FunctionWithoutDebugInfo => {\n+            set_debug_location(fcx.ccx, UnknownLocation);\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                wrapped_function()\n+            } else {\n+                debug_loc.apply(fcx);\n+                function_debug_context.source_location_override.set(true);\n+                let result = wrapped_function();\n+                function_debug_context.source_location_override.set(false);\n+                result\n+            }\n+        }\n+    }\n+}\n+\n /// Clears the current debug location.\n ///\n /// Instructions generated hereafter won't be assigned a source location.\n@@ -1412,6 +1448,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         fn_metadata: fn_metadata,\n         argument_counter: Cell::new(1),\n         source_locations_enabled: Cell::new(false),\n+        source_location_override: Cell::new(false),\n     };\n \n "}, {"sha": "96d3e16d253b44707c6f15ba5cb7d536e002b1e1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e316c662f8ac029704922baa53a0831da031aea5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=e316c662f8ac029704922baa53a0831da031aea5", "patch": "@@ -147,15 +147,21 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 ast::ExprPath(..) => {\n                     match bcx.def(expr.id) {\n                         def::DefConst(did) => {\n-                            let expr = consts::get_const_expr(bcx.ccx(), did, expr);\n+                            let const_expr = consts::get_const_expr(bcx.ccx(), did, expr);\n                             // Temporarily get cleanup scopes out of the way,\n                             // as they require sub-expressions to be contained\n                             // inside the current AST scope.\n                             // These should record no cleanups anyways, `const`\n                             // can't have destructors.\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       vec![]);\n-                            bcx = trans_into(bcx, expr, dest);\n+                            // Lock emitted debug locations to the location of\n+                            // the constant reference expression.\n+                            debuginfo::with_source_location_override(bcx.fcx,\n+                                                                     expr.debug_loc(),\n+                                                                     || {\n+                                bcx = trans_into(bcx, const_expr, dest)\n+                            });\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       scopes);\n                             assert!(scopes.is_empty());"}, {"sha": "24332e31775088b5901b5fa16aa11f78b42359ff", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e316c662f8ac029704922baa53a0831da031aea5/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e316c662f8ac029704922baa53a0831da031aea5/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=e316c662f8ac029704922baa53a0831da031aea5", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// This test makes sure that the compiler doesn't crash when trying to assign\n+// debug locations to const-expressions.\n+\n+use std::sync::MUTEX_INIT;\n+use std::cell::UnsafeCell;\n+\n+const CONSTANT: u64 = 3 + 4;\n+\n+struct Struct {\n+    a: isize,\n+    b: usize,\n+}\n+const STRUCT: Struct = Struct { a: 1, b: 2 };\n+\n+struct TupleStruct(u32);\n+const TUPLE_STRUCT: TupleStruct = TupleStruct(4);\n+\n+enum Enum {\n+    Variant1(char),\n+    Variant2 { a: u8 },\n+    Variant3\n+}\n+\n+const VARIANT1: Enum = Enum::Variant1('v');\n+const VARIANT2: Enum = Enum::Variant2 { a: 2 };\n+const VARIANT3: Enum = Enum::Variant3;\n+\n+const STRING: &'static str = \"String\";\n+\n+const VEC: [u32; 8] = [0; 8];\n+\n+const NESTED: (Struct, TupleStruct) = (STRUCT, TUPLE_STRUCT);\n+\n+const UNSAFE_CELL: UnsafeCell<bool> = UnsafeCell { value: false };\n+\n+fn main() {\n+    let mut _constant = CONSTANT;\n+    let mut _struct = STRUCT;\n+    let mut _tuple_struct = TUPLE_STRUCT;\n+    let mut _variant1 = VARIANT1;\n+    let mut _variant2 = VARIANT2;\n+    let mut _variant3 = VARIANT3;\n+    let mut _string = STRING;\n+    let mut _vec = VEC;\n+    let mut _nested = NESTED;\n+    let mut _extern = MUTEX_INIT;\n+    let mut _unsafe_cell = UNSAFE_CELL;\n+}"}]}