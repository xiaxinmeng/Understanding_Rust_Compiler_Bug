{"sha": "947e9483e9684025faee9eaba56a0fbb200d26b8", "node_id": "C_kwDOAAsO6NoAKDk0N2U5NDgzZTk2ODQwMjVmYWVlOWVhYmE1NmEwZmJiMjAwZDI2Yjg", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-26T14:35:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-01T15:56:05Z"}, "message": "Make the rustc and rustdoc wrapper not depend on libbootstrap\n\nThis slightly improves compilation time by reducing linking time\n(saving about a 1/10 of the the total compilation time after\nchanging rustbuild) and slightly reduces disk usage (from 16MB for\nthe rustc wrapper to 4MB).", "tree": {"sha": "5700b2b7efb59dece30734f4b8fa1524c09e1dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5700b2b7efb59dece30734f4b8fa1524c09e1dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947e9483e9684025faee9eaba56a0fbb200d26b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947e9483e9684025faee9eaba56a0fbb200d26b8", "html_url": "https://github.com/rust-lang/rust/commit/947e9483e9684025faee9eaba56a0fbb200d26b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947e9483e9684025faee9eaba56a0fbb200d26b8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043745cb9688fbecd97638b2fa156cb055bbbb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/043745cb9688fbecd97638b2fa156cb055bbbb14", "html_url": "https://github.com/rust-lang/rust/commit/043745cb9688fbecd97638b2fa156cb055bbbb14"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "7105a2457e282329ebee43f59d269ffcd50bc635", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=947e9483e9684025faee9eaba56a0fbb200d26b8", "patch": "@@ -15,6 +15,8 @@\n //! switching compilers for the bootstrap and for build scripts will probably\n //! never get replaced.\n \n+include!(\"../dylib_util.rs\");\n+\n use std::env;\n use std::path::PathBuf;\n use std::process::{Child, Command};\n@@ -50,11 +52,11 @@ fn main() {\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n-    let mut dylib_path = bootstrap::util::dylib_path();\n+    let mut dylib_path = dylib_path();\n     dylib_path.insert(0, PathBuf::from(&libdir));\n \n     let mut cmd = Command::new(rustc);\n-    cmd.args(&args).env(bootstrap::util::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+    cmd.args(&args).env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n     // Get the name of the crate we're compiling, if any.\n     let crate_name =\n@@ -161,7 +163,7 @@ fn main() {\n         eprintln!(\n             \"{} command: {:?}={:?} {:?}\",\n             prefix,\n-            bootstrap::util::dylib_path_var(),\n+            dylib_path_var(),\n             env::join_paths(&dylib_path).unwrap(),\n             cmd,\n         );"}, {"sha": "ad3800834b07cc3f8d1892e3835fcfa01c3de612", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=947e9483e9684025faee9eaba56a0fbb200d26b8", "patch": "@@ -7,6 +7,8 @@ use std::ffi::OsString;\n use std::path::PathBuf;\n use std::process::Command;\n \n+include!(\"../dylib_util.rs\");\n+\n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n@@ -20,14 +22,14 @@ fn main() {\n         Err(_) => 0,\n     };\n \n-    let mut dylib_path = bootstrap::util::dylib_path();\n+    let mut dylib_path = dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n         .arg(\"--sysroot\")\n         .arg(&sysroot)\n-        .env(bootstrap::util::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+        .env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n@@ -59,7 +61,7 @@ fn main() {\n     if verbose > 1 {\n         eprintln!(\n             \"rustdoc command: {:?}={:?} {:?}\",\n-            bootstrap::util::dylib_path_var(),\n+            dylib_path_var(),\n             env::join_paths(&dylib_path).unwrap(),\n             cmd,\n         );"}, {"sha": "6d75272c50130ae6c03c75e13db95c94dd4386c1", "filename": "src/bootstrap/dylib_util.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fdylib_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Fdylib_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdylib_util.rs?ref=947e9483e9684025faee9eaba56a0fbb200d26b8", "patch": "@@ -0,0 +1,28 @@\n+// Various utilities for working with dylib paths.\n+//\n+// This file is meant to be included directly to avoid a dependency on the bootstrap library from\n+// the rustc and rustdoc wrappers. This improves compilation time by reducing the linking time.\n+\n+/// Returns the environment variable which the dynamic library lookup path\n+/// resides in for this platform.\n+pub fn dylib_path_var() -> &'static str {\n+    if cfg!(target_os = \"windows\") {\n+        \"PATH\"\n+    } else if cfg!(target_os = \"macos\") {\n+        \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n+    } else {\n+        \"LD_LIBRARY_PATH\"\n+    }\n+}\n+\n+/// Parses the `dylib_path_var()` environment variable, returning a list of\n+/// paths that are members of this lookup path.\n+pub fn dylib_path() -> Vec<PathBuf> {\n+    let var = match env::var_os(dylib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n+}"}, {"sha": "d0a4009138568dc33b3938055e012c7a0bf5338d", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947e9483e9684025faee9eaba56a0fbb200d26b8/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=947e9483e9684025faee9eaba56a0fbb200d26b8", "patch": "@@ -54,29 +54,7 @@ pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     cmd.env(dylib_path_var(), t!(env::join_paths(list)));\n }\n \n-/// Returns the environment variable which the dynamic library lookup path\n-/// resides in for this platform.\n-pub fn dylib_path_var() -> &'static str {\n-    if cfg!(target_os = \"windows\") {\n-        \"PATH\"\n-    } else if cfg!(target_os = \"macos\") {\n-        \"DYLD_LIBRARY_PATH\"\n-    } else if cfg!(target_os = \"haiku\") {\n-        \"LIBRARY_PATH\"\n-    } else {\n-        \"LD_LIBRARY_PATH\"\n-    }\n-}\n-\n-/// Parses the `dylib_path_var()` environment variable, returning a list of\n-/// paths that are members of this lookup path.\n-pub fn dylib_path() -> Vec<PathBuf> {\n-    let var = match env::var_os(dylib_path_var()) {\n-        Some(v) => v,\n-        None => return vec![],\n-    };\n-    env::split_paths(&var).collect()\n-}\n+include!(\"dylib_util.rs\");\n \n /// Adds a list of lookup paths to `cmd`'s link library lookup path.\n pub fn add_link_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {"}]}