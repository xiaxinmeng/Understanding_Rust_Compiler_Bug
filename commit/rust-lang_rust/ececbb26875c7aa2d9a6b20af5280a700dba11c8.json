{"sha": "ececbb26875c7aa2d9a6b20af5280a700dba11c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZWNiYjI2ODc1YzdhYTJkOWE2YjIwYWY1MjgwYTcwMGRiYTExYzg=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-02-08T15:01:32Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-02-08T15:01:32Z"}, "message": "Simplify by calling SliceOrd::compare", "tree": {"sha": "115461f191a7b99257bf1258d00abd3536e27062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115461f191a7b99257bf1258d00abd3536e27062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ececbb26875c7aa2d9a6b20af5280a700dba11c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ececbb26875c7aa2d9a6b20af5280a700dba11c8", "html_url": "https://github.com/rust-lang/rust/commit/ececbb26875c7aa2d9a6b20af5280a700dba11c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ececbb26875c7aa2d9a6b20af5280a700dba11c8/comments", "author": null, "committer": null, "parents": [{"sha": "3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "html_url": "https://github.com/rust-lang/rust/commit/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "7d052c218fe557386cd2e3f09a18ef3c23a9341f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ececbb26875c7aa2d9a6b20af5280a700dba11c8/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ececbb26875c7aa2d9a6b20af5280a700dba11c8/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=ececbb26875c7aa2d9a6b20af5280a700dba11c8", "patch": "@@ -2294,21 +2294,7 @@ impl<A> SlicePartialOrd<A> for [A]\n     where A: Ord\n {\n     default fn partial_compare(&self, other: &[A]) -> Option<Ordering> {\n-        let l = cmp::min(self.len(), other.len());\n-\n-        // Slice to the loop iteration range to enable bound check\n-        // elimination in the compiler\n-        let lhs = &self[..l];\n-        let rhs = &other[..l];\n-\n-        for i in 0..l {\n-            match lhs[i].cmp(&rhs[i]) {\n-                Ordering::Equal => (),\n-                non_eq => return Some(non_eq),\n-            }\n-        }\n-\n-        self.len().partial_cmp(&other.len())\n+        Some(SliceOrd::compare(self, other))\n     }\n }\n "}]}