{"sha": "60fd260e7fb8c88cb9037377dc75f901a54bbe20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmQyNjBlN2ZiOGM4OGNiOTAzNzM3N2RjNzVmOTAxYTU0YmJlMjA=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-15T21:20:00Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-15T21:47:58Z"}, "message": "Handle ast::MacroCall in classify_name and impl FromSource for MacroDef\n\nFixes #2260", "tree": {"sha": "d851cc88be2def3428dad031940b8b0c66e79f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d851cc88be2def3428dad031940b8b0c66e79f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fd260e7fb8c88cb9037377dc75f901a54bbe20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fd260e7fb8c88cb9037377dc75f901a54bbe20", "html_url": "https://github.com/rust-lang/rust/commit/60fd260e7fb8c88cb9037377dc75f901a54bbe20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fd260e7fb8c88cb9037377dc75f901a54bbe20/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920848940ae7b79b1655ac48a9e2c1694b9e06c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/920848940ae7b79b1655ac48a9e2c1694b9e06c8", "html_url": "https://github.com/rust-lang/rust/commit/920848940ae7b79b1655ac48a9e2c1694b9e06c8"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "1c26756c978a9dc78da52036612525d8ab66b08a", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60fd260e7fb8c88cb9037377dc75f901a54bbe20/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fd260e7fb8c88cb9037377dc75f901a54bbe20/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=60fd260e7fb8c88cb9037377dc75f901a54bbe20", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n-use hir_expand::name::AsName;\n+use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     match_ast,\n@@ -11,8 +11,8 @@ use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n     Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource, ImplBlock,\n-    Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union,\n-    VariantDef,\n+    Local, MacroDef, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias,\n+    Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -77,7 +77,22 @@ impl FromSource for TypeAlias {\n         Some(TypeAlias { id })\n     }\n }\n-// FIXME: add impl FromSource for MacroDef\n+\n+impl FromSource for MacroDef {\n+    type Ast = ast::MacroCall;\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+        let kind = MacroDefKind::Declarative;\n+\n+        let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n+        let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n+        let krate = module.krate().crate_id();\n+\n+        let ast_id = AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.ast));\n+\n+        let id: MacroDefId = MacroDefId { krate, ast_id, kind };\n+        Some(MacroDef { id })\n+    }\n+}\n \n impl FromSource for ImplBlock {\n     type Ast = ast::ImplBlock;"}, {"sha": "0eeaa7f384b33353e1908d8a8d0747fc666bb0db", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60fd260e7fb8c88cb9037377dc75f901a54bbe20/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fd260e7fb8c88cb9037377dc75f901a54bbe20/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=60fd260e7fb8c88cb9037377dc75f901a54bbe20", "patch": "@@ -21,7 +21,6 @@ pub(crate) fn classify_name(\n     let parent = name.syntax().parent()?;\n     let file_id = file_id.into();\n \n-    // FIXME: add ast::MacroCall(it)\n     match_ast! {\n         match parent {\n             ast::BindPat(it) => {\n@@ -104,6 +103,19 @@ pub(crate) fn classify_name(\n                     Some(from_module_def(db, def.into(), None))\n                 }\n             },\n+            ast::MacroCall(it) => {\n+                let src = hir::Source { file_id, ast: it};\n+                let def = hir::MacroDef::from_source(db, src.clone())?;\n+\n+                let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n+                let module = Module::from_definition(db, Source::new(file_id, module_src))?;\n+\n+                Some(NameDefinition {\n+                    visibility: None,\n+                    container: module,\n+                    kind: NameKind::Macro(def),\n+                })\n+            },\n             _ => None,\n         }\n     }"}]}