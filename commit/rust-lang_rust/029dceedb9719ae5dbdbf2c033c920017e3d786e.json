{"sha": "029dceedb9719ae5dbdbf2c033c920017e3d786e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOWRjZWVkYjk3MTlhZTVkYmRiZjJjMDMzYzkyMDAxN2UzZDc4NmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-13T22:44:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-14T05:38:12Z"}, "message": "Avoid many CrateConfig clones.\n\nThis commit changes `ExtCtx::cfg()` so it returns a `CrateConfig`\nreference instead of a clone. As a result, it also changes all of the\n`cfg()` callsites to explicitly clone... except one, because the commit\nalso changes `macro_parser::parse()` to take `&CrateConfig`. This is\ngood, because that function can be hot, and `CrateConfig` is expensive\nto clone.\n\nThis change almost halves the number of heap allocations done by rustc\nfor `html5ever` in rustc-benchmarks suite, which makes compilation 1.20x\nfaster.", "tree": {"sha": "2e8d8a6503c5bf900944c64099b6f23bd199c956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8d8a6503c5bf900944c64099b6f23bd199c956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029dceedb9719ae5dbdbf2c033c920017e3d786e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029dceedb9719ae5dbdbf2c033c920017e3d786e", "html_url": "https://github.com/rust-lang/rust/commit/029dceedb9719ae5dbdbf2c033c920017e3d786e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029dceedb9719ae5dbdbf2c033c920017e3d786e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34318dd538bf4c9175e4138b3e4188ea8211620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34318dd538bf4c9175e4138b3e4188ea8211620", "html_url": "https://github.com/rust-lang/rust/commit/d34318dd538bf4c9175e4138b3e4188ea8211620"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "ff1986cb4a81dfa52522de496442d22174f6ebdf", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -617,11 +617,11 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree])\n         -> parser::Parser<'a> {\n-        parse::tts_to_parser(self.parse_sess, tts.to_vec(), self.cfg())\n+        parse::tts_to_parser(self.parse_sess, tts.to_vec(), self.cfg().clone())\n     }\n     pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n-    pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n+    pub fn cfg(&self) -> &ast::CrateConfig { &self.cfg }\n     pub fn call_site(&self) -> Span {\n         self.codemap().with_expn_info(self.backtrace(), |ei| match ei {\n             Some(expn_info) => expn_info.call_site,"}, {"sha": "7f002d281667980fb516ad868f41934a0cbfda4c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -331,31 +331,31 @@ pub mod rt {\n             panictry!(parse::parse_item_from_source_str(\n                 \"<quote expansion>\".to_string(),\n                 s,\n-                self.cfg(),\n+                self.cfg().clone(),\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_stmt(&self, s: String) -> ast::Stmt {\n             panictry!(parse::parse_stmt_from_source_str(\n                 \"<quote expansion>\".to_string(),\n                 s,\n-                self.cfg(),\n+                self.cfg().clone(),\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_expr(&self, s: String) -> P<ast::Expr> {\n             panictry!(parse::parse_expr_from_source_str(\n                 \"<quote expansion>\".to_string(),\n                 s,\n-                self.cfg(),\n+                self.cfg().clone(),\n                 self.parse_sess()))\n         }\n \n         fn parse_tts(&self, s: String) -> Vec<TokenTree> {\n             panictry!(parse::parse_tts_from_source_str(\n                 \"<quote expansion>\".to_string(),\n                 s,\n-                self.cfg(),\n+                self.cfg().clone(),\n                 self.parse_sess()))\n         }\n     }\n@@ -924,14 +924,18 @@ fn expand_parse_call(cx: &ExtCtxt,\n         sp, cx.expr_ident(sp, id_ext(\"ext_cx\")),\n         id_ext(\"cfg\"), Vec::new());\n \n+    let cfg_clone_call = || cx.expr_method_call(\n+        sp, cfg_call(),\n+        id_ext(\"clone\"), Vec::new());\n+\n     let parse_sess_call = || cx.expr_method_call(\n         sp, cx.expr_ident(sp, id_ext(\"ext_cx\")),\n         id_ext(\"parse_sess\"), Vec::new());\n \n     let new_parser_call =\n         cx.expr_call(sp,\n                      cx.expr_ident(sp, id_ext(\"new_parser_from_tts\")),\n-                     vec!(parse_sess_call(), cfg_call(), tts_expr));\n+                     vec!(parse_sess_call(), cfg_clone_call(), tts_expr));\n \n     let path = vec![id_ext(\"syntax\"), id_ext(\"ext\"), id_ext(\"quote\"), id_ext(parse_method)];\n     let mut args = vec![cx.expr_mut_addr_of(sp, new_parser_call)];"}, {"sha": "30dc1823b370a15df4288e45c5814269640dea5b", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -94,7 +94,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n     // The file will be added to the code map by the parser\n     let p =\n         parse::new_sub_parser_from_file(cx.parse_sess(),\n-                                        cx.cfg(),\n+                                        cx.cfg().clone(),\n                                         &res_rel_file(cx,\n                                                       sp,\n                                                       Path::new(&file)),"}, {"sha": "030cb303832af9532b5e5233c097dc5eef2a4830", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -272,7 +272,7 @@ pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n }\n \n pub fn parse(sess: &ParseSess,\n-             cfg: ast::CrateConfig,\n+             cfg: &ast::CrateConfig,\n              mut rdr: TtReader,\n              ms: &[TokenTree])\n              -> NamedParseResult {"}, {"sha": "a74d335d6046da3211ca0e4e0d3223cad5a06d27", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -120,7 +120,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            Some(named_matches),\n                                            imported_from,\n                                            rhs);\n-                let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n+                let mut p = Parser::new(cx.parse_sess(), cx.cfg().clone(), Box::new(trncbr));\n                 p.directory = cx.current_expansion.module.directory.clone();\n                 p.restrictions = match cx.current_expansion.no_noninline_mod {\n                     true => Restrictions::NO_NONINLINE_MOD,\n@@ -225,7 +225,7 @@ pub fn compile(sess: &ParseSess, def: &ast::MacroDef) -> SyntaxExtension {\n     // Parse the macro_rules! invocation (`none` is for no interpolations):\n     let arg_reader = new_tt_reader(&sess.span_diagnostic, None, None, def.body.clone());\n \n-    let argument_map = match parse(sess, Vec::new(), arg_reader, &argument_gram) {\n+    let argument_map = match parse(sess, &Vec::new(), arg_reader, &argument_gram) {\n         Success(m) => m,\n         Failure(sp, str) | Error(sp, str) => {\n             panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &str));"}, {"sha": "af79bdcb61137fd8daede73bc33477bc06f05e0e", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -107,7 +107,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                 if p2.token != token::Eof {\n                     let mut extra_tts = panictry!(p2.parse_all_token_trees());\n                     extra_tts.extend(tts[first_colon..].iter().cloned());\n-                    p = parse::tts_to_parser(cx.parse_sess, extra_tts, cx.cfg());\n+                    p = parse::tts_to_parser(cx.parse_sess, extra_tts, cx.cfg().clone());\n                 }\n \n                 asm = s;"}, {"sha": "2041abcf82c99ce052a783ac3b2341435fa664b4", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -57,7 +57,7 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n                    -> Box<MacResult+'static> {\n     // Parse an expression and emit it unchanged.\n     let mut parser = parse::new_parser_from_tts(cx.parse_sess(),\n-        cx.cfg(), tts.to_vec());\n+        cx.cfg().clone(), tts.to_vec());\n     let expr = parser.parse_expr().unwrap();\n     MacEager::expr(quote_expr!(&mut *cx, $expr))\n }"}, {"sha": "2c814a5433baa1e88fa69e957adb295e4dbb593f", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029dceedb9719ae5dbdbf2c033c920017e3d786e/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=029dceedb9719ae5dbdbf2c033c920017e3d786e", "patch": "@@ -60,7 +60,7 @@ fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResu\n // See Issue #15750\n fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree]) -> Box<MacResult + 'static> {\n     // Parse an expression and emit it unchanged.\n-    let mut parser = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_vec());\n+    let mut parser = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg().clone(), tts.to_vec());\n     let expr = parser.parse_expr().unwrap();\n     MacEager::expr(quote_expr!(&mut *cx, $expr))\n }"}]}