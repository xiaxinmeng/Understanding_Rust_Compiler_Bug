{"sha": "e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YTlmMWI2MjY0NTVkNTFjMjgwNDY5MmYyZTdjMWVhNGYyMmQ3OGU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-07-15T03:57:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-15T03:57:13Z"}, "message": "Rollup merge of #43074 - SimonSapin:iter, r=aturon\n\nForward more Iterator methods\n\nThis allows in more cases to take advantage of specific (possibly more optimized) impls of these methods, rather than the default one defined for all `Iterator`s.\n\nI also wanted to do this for `&mut I` and `Box<I>`, but that didn\u2019t compile for two reasons:\n\n* To make the trait object-safe, generic methods (e.g. that take a closure parameter) have a `where Self: Sized` bound. But e.g. `Box<I>: Sized` does not imply `I: Sized`, and adding an additional bound in the impl is not allowed. Some for of specialization would be needed here.\n* With e.g. a `F: FnMut(Self::Item) -> bool` bound and a `type Item = I::Item` associated types, I got errors like `F does not implement FnMut(I::Item) -> bool`. This looks like a limitation in the trait resolution system not recognizing that `Self::Item == I::Item` or \"propagating\" that fact to `FnMut` bounds.", "tree": {"sha": "078ee9de64a96fe568238da8a11ed7f6ea39bf14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078ee9de64a96fe568238da8a11ed7f6ea39bf14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "html_url": "https://github.com/rust-lang/rust/commit/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ecebd6bd4362142ac586014aec44070a177a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ecebd6bd4362142ac586014aec44070a177a3d", "html_url": "https://github.com/rust-lang/rust/commit/23ecebd6bd4362142ac586014aec44070a177a3d"}, {"sha": "2007987099309e05c08d65e6a0e722c5ec1d0653", "url": "https://api.github.com/repos/rust-lang/rust/commits/2007987099309e05c08d65e6a0e722c5ec1d0653", "html_url": "https://github.com/rust-lang/rust/commit/2007987099309e05c08d65e6a0e722c5ec1d0653"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "79e6b11beaca680058d853bd8b3a2d131e2c47f1", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "patch": "@@ -359,11 +359,19 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n         where P: FnMut(&Self::Item) -> bool\n     {\n         self.iter.rfind(predicate)\n     }\n+\n+    #[inline]\n+    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.iter.position(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3862b4a2eb0463feff3fbee0cf40a8ad9520fef6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a9f1b626455d51c2804692f2e7c1ea4f22d78e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e7a9f1b626455d51c2804692f2e7c1ea4f22d78e", "patch": "@@ -710,6 +710,37 @@ impl<'a> Iterator for Bytes<'a> {\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.0.nth(n)\n     }\n+\n+    #[inline]\n+    fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+        self.0.all(f)\n+    }\n+\n+    #[inline]\n+    fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+        self.0.any(f)\n+    }\n+\n+    #[inline]\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        self.0.find(predicate)\n+    }\n+\n+    #[inline]\n+    fn position<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.0.position(predicate)\n+    }\n+\n+    #[inline]\n+    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.0.rposition(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -718,6 +749,13 @@ impl<'a> DoubleEndedIterator for Bytes<'a> {\n     fn next_back(&mut self) -> Option<u8> {\n         self.0.next_back()\n     }\n+\n+    #[inline]\n+    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        self.0.rfind(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}