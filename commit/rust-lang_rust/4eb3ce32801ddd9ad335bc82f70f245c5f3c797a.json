{"sha": "4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjNjZTMyODAxZGRkOWFkMzM1YmM4MmY3MGYyNDVjNWYzYzc5N2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-07T21:28:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T00:31:38Z"}, "message": "Add landing pads to invokes\n\nIssue #236", "tree": {"sha": "49d1737f921bff4eafcdb8a18315bc2d1c7aca4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49d1737f921bff4eafcdb8a18315bc2d1c7aca4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "html_url": "https://github.com/rust-lang/rust/commit/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4637b61facfb607c02026e5d605e6bb6fe1a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4637b61facfb607c02026e5d605e6bb6fe1a60", "html_url": "https://github.com/rust-lang/rust/commit/5e4637b61facfb607c02026e5d605e6bb6fe1a60"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "df07f104270dc006485c42c609332173c275e6c6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "patch": "@@ -3799,15 +3799,32 @@ fn invoke_fastcall(bcx: &@block_ctxt, llfn: ValueRef,\n \n     let normal_bcx = new_sub_block_ctxt(bcx, \"normal return\");\n     let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n-    let retval = trans_build::FastInvoke(bcx, llfn, llargs,\n-                                         normal_bcx.llbb,\n-                                         unwind_bcx.llbb);\n+    let retval = FastInvoke(bcx, llfn, llargs,\n+                            normal_bcx.llbb,\n+                            unwind_bcx.llbb);\n     trans_landing_pad(unwind_bcx);\n     ret rslt(normal_bcx, retval);\n }\n \n fn trans_landing_pad(bcx: &@block_ctxt) {\n-    Unreachable(bcx);\n+    // The landing pad return type (the type being propagated). Not sure what\n+    // this represents but it's determined by the personality function and\n+    // this is what the EH proposal example uses.\n+    let llretty = T_struct([T_ptr(T_i8()), T_i32()]);\n+    // The exception handling personality function. This is the C++\n+    // personality function __gxx_personality_v0, wrapped in our naming\n+    // convention.\n+    let personality = bcx_ccx(bcx).upcalls.rust_personality;\n+    // The only landing pad clause will be 'cleanup'\n+    let clauses = 1u;\n+    let llpad = LandingPad(bcx, llretty, personality, clauses);\n+    // The landing pad result is used both for modifying the landing pad\n+    // in the C API and as the exception value\n+    let llretval = llpad;\n+    // The landing pad block is a cleanup\n+    SetCleanup(bcx, llpad);\n+    // Continue unwinding\n+    Resume(bcx, llretval);\n }\n \n fn trans_tup(cx: &@block_ctxt, elts: &[@ast::expr], id: ast::node_id) ->"}, {"sha": "6f801551d1180b52fe5c28cf2a7dd111589b0f55", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb3ce32801ddd9ad335bc82f70f245c5f3c797a/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=4eb3ce32801ddd9ad335bc82f70f245c5f3c797a", "patch": "@@ -547,6 +547,7 @@ fn Trap(cx: &@block_ctxt) -> ValueRef {\n \n fn LandingPad(cx: &@block_ctxt, Ty: TypeRef, PersFn: ValueRef,\n               NumClauses: uint) -> ValueRef {\n+    assert (!cx.terminated);\n     ret str::as_buf(\"\",\n                     {|buf|\n                         llvm::LLVMBuildLandingPad(B(cx),\n@@ -561,6 +562,12 @@ fn SetCleanup(_cx: &@block_ctxt, LandingPad: ValueRef) {\n     llvm::LLVMSetCleanup(LandingPad, lib::llvm::True);\n }\n \n+fn Resume(cx: &@block_ctxt, Exn: ValueRef) -> ValueRef {\n+    assert (!cx.terminated);\n+    cx.terminated = true;\n+    ret llvm::LLVMBuildResume(B(cx), Exn);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}