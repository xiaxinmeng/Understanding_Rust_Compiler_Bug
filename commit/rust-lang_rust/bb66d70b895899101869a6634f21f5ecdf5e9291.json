{"sha": "bb66d70b895899101869a6634f21f5ecdf5e9291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjZkNzBiODk1ODk5MTAxODY5YTY2MzRmMjFmNWVjZGY1ZTkyOTE=", "commit": {"author": {"name": "Mikhail Modin", "email": "mmmodin@amazon.com", "date": "2018-07-27T21:46:16Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2018-07-29T10:42:50Z"}, "message": "fix issues #51351 and #52133", "tree": {"sha": "1f63ba3f3ad88fddf3f3c244dc13cdcde9d55243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f63ba3f3ad88fddf3f3c244dc13cdcde9d55243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb66d70b895899101869a6634f21f5ecdf5e9291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb66d70b895899101869a6634f21f5ecdf5e9291", "html_url": "https://github.com/rust-lang/rust/commit/bb66d70b895899101869a6634f21f5ecdf5e9291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb66d70b895899101869a6634f21f5ecdf5e9291/comments", "author": null, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53", "html_url": "https://github.com/rust-lang/rust/commit/43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53"}], "stats": {"total": 266, "additions": 218, "deletions": 48}, "files": [{"sha": "054db33363e48c5f6798b99a8e15c80ba1b7cab0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -1155,8 +1155,8 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         // Extract the values of the free regions in `user_closure_ty`\n         // into a vector.  These are the regions that we will be\n         // relating to one another.\n-        let closure_mapping =\n-            &UniversalRegions::closure_mapping(tcx, user_closure_ty, self.num_external_vids);\n+        let closure_mapping = &UniversalRegions::closure_mapping(\n+            tcx, user_closure_ty, self.num_external_vids, tcx.closure_base_def_id(closure_def_id));\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n \n         // Create the predicates."}, {"sha": "9bb7d12313349d0f3680600c057ca82de3020d80", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -270,13 +270,17 @@ impl<'tcx> UniversalRegions<'tcx> {\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         closure_ty: Ty<'tcx>,\n         expected_num_vars: usize,\n+        closure_base_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.types.re_static);\n         tcx.for_each_free_region(&closure_ty, |fr| {\n             region_mapping.push(fr);\n         });\n \n+        for_each_late_bound_region_defined_on(\n+            tcx, closure_base_def_id, |r| { region_mapping.push(r); });\n+\n         assert_eq!(\n             region_mapping.len(),\n             expected_num_vars,\n@@ -479,6 +483,20 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let mut indices = self.compute_indices(fr_static, defining_ty);\n         debug!(\"build: indices={:?}\", indices);\n \n+        let closure_base_def_id = self.infcx.tcx.closure_base_def_id(self.mir_def_id);\n+\n+        // If this is a closure or generator, then the late-bound regions from the enclosing\n+        // function are actually external regions to us. For example, here, 'a is not local\n+        // to the closure c (although it is local to the fn foo):\n+        // fn foo<'a>() {\n+        //     let c = || { let x: &'a u32 = ...; }\n+        // }\n+        if self.mir_def_id != closure_base_def_id {\n+            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n+                self.mir_def_id,\n+                &mut indices)\n+        }\n+\n         let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n \n         // \"Liberate\" the late-bound regions. These correspond to\n@@ -490,6 +508,14 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             &bound_inputs_and_output,\n             &mut indices,\n         );\n+        // Converse of above, if this is a function then the late-bound regions declared on its\n+        // signature are local to the fn.\n+        if self.mir_def_id == closure_base_def_id {\n+            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n+                self.mir_def_id,\n+                &mut indices);\n+        }\n+\n         let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n         let num_universals = self.infcx.num_region_vars();\n \n@@ -782,6 +808,13 @@ trait InferCtxtExt<'tcx> {\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>;\n+\n+\n+    fn replace_late_bound_regions_with_nll_infer_vars(\n+        &self,\n+        mir_def_id: DefId,\n+        indices: &mut UniversalRegionIndices<'tcx>\n+    );\n }\n \n impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n@@ -827,6 +860,28 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n         });\n         value\n     }\n+\n+    /// Finds late-bound regions that do not appear in the parameter listing and adds them to the\n+    /// indices vector. Typically, we identify late-bound regions as we process the inputs and\n+    /// outputs of the closure/function. However, sometimes there are late-bound regions which do\n+    /// not appear in the fn parameters but which are nonetheless in scope. The simplest case of\n+    /// this are unused functions, like fn foo<'a>() { } (see eg., #51351). Despite not being used,\n+    /// users can still reference these regions (e.g., let x: &'a u32 = &22;), so we need to create\n+    /// entries for them and store them in the indices map. This code iterates over the complete\n+    /// set of late-bound regions and checks for any that we have not yet seen, adding them to the\n+    /// inputs vector.\n+    fn replace_late_bound_regions_with_nll_infer_vars(\n+        &self,\n+        mir_def_id: DefId,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n+    ) {\n+        let closure_base_def_id = self.tcx.closure_base_def_id(mir_def_id);\n+        for_each_late_bound_region_defined_on(self.tcx, closure_base_def_id, |r| {\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.next_nll_region_var(FR);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+            }});\n+    }\n }\n \n impl<'tcx> UniversalRegionIndices<'tcx> {\n@@ -882,3 +937,25 @@ impl<'tcx> FreeRegionRelations<'tcx> for UniversalRegions<'tcx> {\n         self.outlives(longer, shorter)\n     }\n }\n+\n+/// Iterates over the late-bound regions defined on fn_def_id and\n+/// invokes `f` with the liberated form of each one.\n+fn for_each_late_bound_region_defined_on<'tcx>(\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n+    fn_def_id: DefId,\n+    mut f: impl FnMut(ty::Region<'tcx>)\n+    ) {\n+    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.index) {\n+        for late_bound in late_bounds.iter() {\n+            let hir_id = HirId{ owner: fn_def_id.index, local_id: *late_bound };\n+            let region_node_id = tcx.hir.hir_to_node_id(hir_id);\n+            let name = tcx.hir.name(region_node_id).as_interned_str();\n+            let region_def_id = tcx.hir.local_def_id(region_node_id);\n+            let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n+                scope: fn_def_id,\n+                bound_region: ty::BoundRegion::BrNamed(region_def_id, name),\n+            }));\n+            f(liberated_region);\n+        }\n+    }\n+}"}, {"sha": "2704a325314664e89ac45e2b6356458fb546b3fc", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -20,7 +20,7 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n error[E0623]: lifetime mismatch"}, {"sha": "d5495b69c7ced1ef761b21d8f74d06e0fa498e16", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -20,7 +20,7 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n            ]\n-   = note: number of external vids: 2\n+   = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n \n error: borrowed data escapes outside of function"}, {"sha": "50e2dd23da8a88e5527ebeeb86fe3a99ce86c7aa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -20,7 +20,7 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n \n error: borrowed data escapes outside of function"}, {"sha": "3cd9e9dd5b008f19322475a1ed6ddc342dc6ea10", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -20,7 +20,7 @@ LL | |     });\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n error[E0623]: lifetime mismatch"}, {"sha": "0888b1380e69e79c8f9922e7c58eb74308a146b7", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -18,7 +18,7 @@ LL | |         },\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n note: No external requirements"}, {"sha": "42d5b15bd5a29d7c460d88a2c312159e0cdefa5d", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -23,7 +23,7 @@ LL | |     });\n                i32,\n                extern \"rust-call\" fn((T,))\n            ]\n-   = note: number of external vids: 2\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "62cc3f9692b2a7045569422a21cbd78a92c3bc0c", "filename": "src/test/ui/nll/issue-51351.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Regression test for #51351 and #52133: In the case of #51351,\n+// late-bound regions (like 'a) that were unused within the arguments of\n+// a function were overlooked and could case an ICE. In the case of #52133,\n+// LBR defined on the creator function needed to be added to the free regions\n+// of the closure, as they were not present in the closure's generic\n+// declarations otherwise.\n+//\n+// compile-pass\n+\n+#![feature(nll)]\n+\n+fn creash<'a>() {\n+    let x: &'a () = &();\n+}\n+\n+fn produce<'a>() {\n+   move || {\n+        let x: &'a () = &();\n+   };\n+}\n+\n+fn main() {}"}, {"sha": "1c509c5d224618584db790d1705eef70904731b9", "filename": "src/test/ui/nll/issue-52133.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-52133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-52133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52133.rs?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+\n+#![allow(warnings)]\n+#![feature(nll)]\n+\n+trait Bazinga { }\n+impl<F> Bazinga for F { }\n+\n+fn produce1<'a>(data: &'a u32) -> impl Bazinga + 'a {\n+    let x = move || {\n+        let _data: &'a u32 = data;\n+    };\n+    x\n+}\n+\n+fn produce2<'a>(data: &'a mut Vec<&'a u32>, value: &'a u32) -> impl Bazinga + 'a {\n+    let x = move || {\n+        let value: &'a u32 = value;\n+        data.push(value);\n+    };\n+    x\n+}\n+\n+\n+fn produce3<'a, 'b: 'a>(data: &'a mut Vec<&'a u32>, value: &'b u32) -> impl Bazinga + 'a {\n+    let x = move || {\n+        let value: &'a u32 = value;\n+        data.push(value);\n+    };\n+    x\n+}\n+\n+fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n+    let x = move || { //~ ERROR lifetime mismatch\n+        let value: &'a u32 = value;\n+        data.push(value);\n+    };\n+    x\n+}\n+\n+fn main() { }"}, {"sha": "c1841004cf620b4138af620f0b677c81153b3e37", "filename": "src/test/ui/nll/issue-52133.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-52133.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fissue-52133.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52133.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -0,0 +1,11 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-52133.rs:43:9\n+   |\n+LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n+   |                                  --------------------         ------- these two types are declared with different lifetimes...\n+LL |     let x = move || { //~ ERROR lifetime mismatch\n+   |         ^ ...but data from `value` flows into `data` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "dd12e8220c456afe25e74ae2de971484a396bda9", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -22,7 +22,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n@@ -62,7 +62,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n@@ -94,7 +94,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n@@ -136,7 +136,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements"}, {"sha": "456c52d3a51b84890f26f2344a5698870e939b3c", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -28,7 +28,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n@@ -76,7 +76,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -125,7 +125,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -174,7 +174,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n "}, {"sha": "35c0405ff89e23388d578fb495689d70e9596e6a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -28,7 +28,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n error: unsatisfied lifetime constraints\n@@ -67,7 +67,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where '_#2r: '_#3r\n \n error: unsatisfied lifetime constraints\n@@ -107,7 +107,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where '_#2r: '_#3r\n \n error: unsatisfied lifetime constraints\n@@ -147,7 +147,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -180,7 +180,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n note: No external requirements"}, {"sha": "4e51a2bedc8c57d00ae0dbb66d2f8b725a5d31d7", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -47,7 +47,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to nll\n-    //~| ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n+    //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -58,7 +58,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to nll\n-    //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+    //~| ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -79,7 +79,7 @@ where\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to nll\n-    //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+    //~| ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]"}, {"sha": "a713971d17cb3954d4be3dc8ff6f4757fd3337f9", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -35,16 +35,16 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:44:1\n@@ -54,7 +54,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | | {\n ...  |\n-LL | |     //~| ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n+LL | |     //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -78,16 +78,16 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:54:1\n@@ -97,7 +97,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n ...  |\n-LL | |     //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+LL | |     //~| ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -122,16 +122,16 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n@@ -141,7 +141,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+LL | |     //~| ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -166,7 +166,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -202,7 +202,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -236,7 +236,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n error: unsatisfied lifetime constraints\n@@ -275,7 +275,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n@@ -308,7 +308,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements"}, {"sha": "39382df8d8a91433e6fe68ecfd9b0608ac7254b4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -27,7 +27,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 2\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n note: No external requirements\n@@ -57,7 +57,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 2\n+   = note: number of external vids: 4\n    = note: where T: '_#1r\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "8babbe3fd97d2a6f0cb9f96272c9eca2120a909d", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -22,7 +22,7 @@ LL |     with_signature(x, |y| y)\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "b9426eba0f66d273e9383c616f33efffd36dd99c", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb66d70b895899101869a6634f21f5ecdf5e9291/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=bb66d70b895899101869a6634f21f5ecdf5e9291", "patch": "@@ -28,7 +28,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T))\n            ]\n-   = note: number of external vids: 2\n+   = note: number of external vids: 4\n    = note: where T: '_#1r\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -81,7 +81,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n \n note: No external requirements\n@@ -119,7 +119,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 5\n    = note: where T: '_#2r\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -170,7 +170,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 5\n    = note: where T: '_#3r\n \n note: No external requirements"}]}