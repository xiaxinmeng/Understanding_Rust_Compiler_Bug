{"sha": "a8c11d216b04abe21a03220b344f1415e1d6ebd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzExZDIxNmIwNGFiZTIxYTAzMjIwYjM0NGYxNDE1ZTFkNmViZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-06T21:02:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-06T21:02:35Z"}, "message": "Auto merge of #53575 - matthewjasper:unsized-is-an-error, r=estebank\n\nDon't reduce E0161 to a warning in NLL migrate mode\n\nThis error has been on stable for a while, and allowing such code cause the compile to later ICE (since we can't codegen it). Errors `box UNSIZED EXPR` with unsized locals because it's not compatible with the current evaluation order (create the box before evaluating the expressions).\n\ncc #53469 (fixes the ICE in this case)\ncc @qnighy", "tree": {"sha": "8e9f326aa34ea068648d2b93528b9ef1afee31e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e9f326aa34ea068648d2b93528b9ef1afee31e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c11d216b04abe21a03220b344f1415e1d6ebd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c11d216b04abe21a03220b344f1415e1d6ebd1", "html_url": "https://github.com/rust-lang/rust/commit/a8c11d216b04abe21a03220b344f1415e1d6ebd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c11d216b04abe21a03220b344f1415e1d6ebd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3186914071b71af2c771ec0c0d044a1a8c215c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3186914071b71af2c771ec0c0d044a1a8c215c2", "html_url": "https://github.com/rust-lang/rust/commit/c3186914071b71af2c771ec0c0d044a1a8c215c2"}, {"sha": "cd92da833fcb8818ac679be615c7bfe02edaa235", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd92da833fcb8818ac679be615c7bfe02edaa235", "html_url": "https://github.com/rust-lang/rust/commit/cd92da833fcb8818ac679be615c7bfe02edaa235"}], "stats": {"total": 176, "additions": 129, "deletions": 47}, "files": [{"sha": "693210da8d3a8d92d2d8b05e12fa29427e46ee88", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -120,7 +120,6 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         flow_inits,\n         move_data,\n         elements,\n-        errors_buffer,\n     );\n \n     if let Some(all_facts) = &mut all_facts {"}, {"sha": "61c99832448c595df5690083932f92377420c558", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -36,7 +36,6 @@ use rustc::traits::query::type_op;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n-use rustc_errors::Diagnostic;\n use std::fmt;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -103,8 +102,7 @@ mod relate_tys;\n /// - `liveness` -- results of a liveness computation on the MIR; used to create liveness\n ///   constraints for the regions in the types of variables\n /// - `flow_inits` -- results of a maybe-init dataflow analysis\n-/// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n-/// - `errors_buffer` -- errors are sent here for future reporting\n+/// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysiss\n pub(crate) fn type_check<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'gcx>,\n@@ -117,7 +115,6 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n-    errors_buffer: &mut Vec<Diagnostic>,\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let mut constraints = MirTypeckRegionConstraints {\n@@ -157,7 +154,6 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n             &region_bound_pairs,\n             Some(implicit_region_bound),\n             Some(&mut borrowck_context),\n-            Some(errors_buffer),\n             |cx| {\n                 cx.equate_inputs_and_outputs(\n                     mir,\n@@ -185,7 +181,6 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     borrowck_context: Option<&'a mut BorrowCheckContext<'a, 'tcx>>,\n-    errors_buffer: Option<&mut Vec<Diagnostic>>,\n     mut extra: impl FnMut(&mut TypeChecker<'a, 'gcx, 'tcx>) -> R,\n ) -> R where {\n     let mut checker = TypeChecker::new(\n@@ -205,7 +200,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n \n     if !errors_reported {\n         // if verifier failed, don't do further checks to avoid ICEs\n-        checker.typeck_mir(mir, errors_buffer);\n+        checker.typeck_mir(mir);\n     }\n \n     extra(&mut checker)\n@@ -989,7 +984,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         mir: &Mir<'tcx>,\n         term: &Terminator<'tcx>,\n         term_location: Location,\n-        errors_buffer: &mut Option<&mut Vec<Diagnostic>>,\n     ) {\n         debug!(\"check_terminator: {:?}\", term);\n         let tcx = self.tcx();\n@@ -1069,7 +1063,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     &sig,\n                 );\n                 let sig = self.normalize(sig, term_location);\n-                self.check_call_dest(mir, term, &sig, destination, term_location, errors_buffer);\n+                self.check_call_dest(mir, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n                     sig.inputs().iter().map(|ty| ty::Predicate::WellFormed(ty)),\n@@ -1143,7 +1137,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         sig: &ty::FnSig<'tcx>,\n         destination: &Option<(Place<'tcx>, BasicBlock)>,\n         term_location: Location,\n-        errors_buffer: &mut Option<&mut Vec<Diagnostic>>,\n     ) {\n         let tcx = self.tcx();\n         match *destination {\n@@ -1177,7 +1170,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // this check is done at `check_local`.\n                 if self.tcx().features().unsized_locals {\n                     let span = term.source_info.span;\n-                    self.ensure_place_sized(dest_ty, span, errors_buffer);\n+                    self.ensure_place_sized(dest_ty, span);\n                 }\n             }\n             None => {\n@@ -1330,7 +1323,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         mir: &Mir<'tcx>,\n         local: Local,\n         local_decl: &LocalDecl<'tcx>,\n-        errors_buffer: &mut Option<&mut Vec<Diagnostic>>,\n     ) {\n         match mir.local_kind(local) {\n             LocalKind::ReturnPointer | LocalKind::Arg => {\n@@ -1346,18 +1338,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n \n         // When `#![feature(unsized_locals)]` is enabled, only function calls\n-        // are checked in `check_call_dest`.\n+        // and nullary ops are checked in `check_call_dest`.\n         if !self.tcx().features().unsized_locals {\n             let span = local_decl.source_info.span;\n             let ty = local_decl.ty;\n-            self.ensure_place_sized(ty, span, errors_buffer);\n+            self.ensure_place_sized(ty, span);\n         }\n     }\n \n-    fn ensure_place_sized(&mut self,\n-                          ty: Ty<'tcx>,\n-                          span: Span,\n-                          errors_buffer: &mut Option<&mut Vec<Diagnostic>>) {\n+    fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {\n         let tcx = self.tcx();\n \n         // Erase the regions from `ty` to get a global type.  The\n@@ -1379,15 +1368,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                      cannot be statically determined\",\n                     ty\n                 );\n-                if let Some(ref mut errors_buffer) = *errors_buffer {\n-                    diag.buffer(errors_buffer);\n-                } else {\n-                    // we're allowed to use emit() here because the\n-                    // NLL migration will be turned on (and thus\n-                    // errors will need to be buffered) *only if*\n-                    // errors_buffer is Some.\n-                    diag.emit();\n-                }\n+\n+                // While this is located in `nll::typeck` this error is not\n+                // an NLL error, it's a required check to prevent creation\n+                // of unsized rvalues in certain cases:\n+                // * operand of a box expression\n+                // * callee in a call expression\n+                diag.emit();\n             }\n         }\n     }\n@@ -1462,6 +1449,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             },\n \n             Rvalue::NullaryOp(_, ty) => {\n+                // Even with unsized locals cannot box an unsized value.\n+                if self.tcx().features().unsized_locals {\n+                    let span = mir.source_info(location).span;\n+                    self.ensure_place_sized(ty, span);\n+                }\n+\n                 let trait_ref = ty::TraitRef {\n                     def_id: tcx.lang_items().sized_trait().unwrap(),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n@@ -1895,12 +1888,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn typeck_mir(&mut self, mir: &Mir<'tcx>, mut errors_buffer: Option<&mut Vec<Diagnostic>>) {\n+    fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n \n         for (local, local_decl) in mir.local_decls.iter_enumerated() {\n-            self.check_local(mir, local, local_decl, &mut errors_buffer);\n+            self.check_local(mir, local, local_decl);\n         }\n \n         for (block, block_data) in mir.basic_blocks().iter_enumerated() {\n@@ -1916,7 +1909,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 location.statement_index += 1;\n             }\n \n-            self.check_terminator(mir, block_data.terminator(), location, &mut errors_buffer);\n+            self.check_terminator(mir, block_data.terminator(), location);\n             self.check_iscleanup(mir, block_data);\n         }\n     }\n@@ -1973,7 +1966,6 @@ impl MirPass for TypeckMir {\n                 &[],\n                 None,\n                 None,\n-                None,\n                 |_| (),\n             );\n "}, {"sha": "0aa85d3ed7a3d36f248e6d25c10b99f68c55adbd", "filename": "src/test/ui/dst/dst-index.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -4,18 +4,18 @@ error[E0161]: cannot move a value of type str: the size of str cannot be statica\n LL |     S[0];\n    |     ^^^^\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dst-index.rs:41:5\n-   |\n-LL |     S[0];\n-   |     ^^^^ cannot move out of borrowed content\n-\n error[E0161]: cannot move a value of type dyn std::fmt::Debug: the size of dyn std::fmt::Debug cannot be statically determined\n   --> $DIR/dst-index.rs:44:5\n    |\n LL |     T[0];\n    |     ^^^^\n \n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/dst-index.rs:41:5\n+   |\n+LL |     S[0];\n+   |     ^^^^ cannot move out of borrowed content\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dst-index.rs:44:5\n    |"}, {"sha": "b120da773a24a3448d80882dfaf46fa498d4be5d", "filename": "src/test/ui/dst/dst-rvalue.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -4,18 +4,18 @@ error[E0161]: cannot move a value of type str: the size of str cannot be statica\n LL |     let _x: Box<str> = box *\"hello world\";\n    |                            ^^^^^^^^^^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/dst-rvalue.rs:16:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello world\";\n-   |                            ^^^^^^^^^^^^^^ cannot move out of borrowed content\n-\n error[E0161]: cannot move a value of type [isize]: the size of [isize] cannot be statically determined\n   --> $DIR/dst-rvalue.rs:21:32\n    |\n LL |     let _x: Box<[isize]> = box *array;\n    |                                ^^^^^^\n \n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/dst-rvalue.rs:16:28\n+   |\n+LL |     let _x: Box<str> = box *\"hello world\";\n+   |                            ^^^^^^^^^^^^^^ cannot move out of borrowed content\n+\n error[E0508]: cannot move out of type `[isize]`, a non-copy slice\n   --> $DIR/dst-rvalue.rs:21:32\n    |"}, {"sha": "62e8676e6319878dfe453f295ca47d7484d4f0ef", "filename": "src/test/ui/error-codes/E0161.ast.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:9\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |         ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "79080fb4eae15c563de6effb90ef46396e0e59f8", "filename": "src/test/ui/error-codes/E0161.astul.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:5\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "62e8676e6319878dfe453f295ca47d7484d4f0ef", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:9\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |         ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "79080fb4eae15c563de6effb90ef46396e0e59f8", "filename": "src/test/ui/error-codes/E0161.editionul.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:5\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "62e8676e6319878dfe453f295ca47d7484d4f0ef", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:9\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |         ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "79080fb4eae15c563de6effb90ef46396e0e59f8", "filename": "src/test/ui/error-codes/E0161.nllul.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:5\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "edc5a84a8436753e35a6757c5618946fb813ae29", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -8,9 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n+// Check that E0161 is a hard error in all possible configurations that might\n+// affect it.\n+\n+// revisions: ast nll zflags edition astul nllul zflagsul editionul\n+//[zflags]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[edition]edition:2018\n+//[zflagsul]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[editionul]edition:2018\n+\n+#![cfg_attr(nll, feature(nll))]\n+#![cfg_attr(nllul, feature(nll))]\n+#![cfg_attr(astul, feature(unsized_locals))]\n+#![cfg_attr(zflagsul, feature(unsized_locals))]\n+#![cfg_attr(nllul, feature(unsized_locals))]\n+#![cfg_attr(editionul, feature(unsized_locals))]\n+\n #![feature(box_syntax)]\n \n-fn main() {\n-    let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n-                                     //~^ ERROR E0507\n+fn foo(x: Box<[i32]>) {\n+    box *x; //~ ERROR E0161\n }\n+\n+fn main() {}"}, {"sha": "62e8676e6319878dfe453f295ca47d7484d4f0ef", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:9\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |         ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}, {"sha": "79080fb4eae15c563de6effb90ef46396e0e59f8", "filename": "src/test/ui/error-codes/E0161.zflagsul.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -0,0 +1,9 @@\n+error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n+  --> $DIR/E0161.rs:32:5\n+   |\n+LL |     box *x; //~ ERROR E0161\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0161`."}]}