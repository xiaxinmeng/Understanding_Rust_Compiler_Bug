{"sha": "143569fce4e9c394496e8bac357511229255ed6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MzU2OWZjZTRlOWMzOTQ0OTZlOGJhYzM1NzUxMTIyOTI1NWVkNmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T22:24:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T22:25:32Z"}, "message": "rt: Make |align| a member of the shape glue class instead of threading it through every function", "tree": {"sha": "f16bd5fdea522c8c34ac0d9b1a26430bfca14989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f16bd5fdea522c8c34ac0d9b1a26430bfca14989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/143569fce4e9c394496e8bac357511229255ed6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/143569fce4e9c394496e8bac357511229255ed6a", "html_url": "https://github.com/rust-lang/rust/commit/143569fce4e9c394496e8bac357511229255ed6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/143569fce4e9c394496e8bac357511229255ed6a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ddc8fdd358b0785a6bb635277336812ddbcc6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ddc8fdd358b0785a6bb635277336812ddbcc6a", "html_url": "https://github.com/rust-lang/rust/commit/03ddc8fdd358b0785a6bb635277336812ddbcc6a"}], "stats": {"total": 471, "additions": 240, "deletions": 231}, "files": [{"sha": "1b2a38fd972680f72b468e4fb70df4664854ad6a", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=143569fce4e9c394496e8bac357511229255ed6a", "patch": "@@ -121,9 +121,9 @@ gc::mark(std::vector<root> &roots) {\n         shape::arena arena;\n         shape::type_param *params = shape::type_param::from_tydesc(ri->tydesc,\n                                                                    arena);\n-        shape::log log(task, ri->tydesc->shape, params,\n+        shape::log log(task, true, ri->tydesc->shape, params,\n                        ri->tydesc->shape_tables, ri->data, std::cerr);\n-        log.walk(true);\n+        log.walk();\n         DPRINT(\"\\n\");\n \n         ++ri;"}, {"sha": "90915e549fcfebb2f709a46f919262c9a7f266b7", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 82, "deletions": 88, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=143569fce4e9c394496e8bac357511229255ed6a", "patch": "@@ -73,7 +73,7 @@ type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n // A shape printer, useful for debugging\n \n void\n-print::walk_tag(bool align, tag_info &tinfo) {\n+print::walk_tag(tag_info &tinfo) {\n     DPRINT(\"tag%u\", tinfo.tag_id);\n     if (!tinfo.n_params)\n         return;\n@@ -87,14 +87,14 @@ print::walk_tag(bool align, tag_info &tinfo) {\n         first = false;\n \n         ctxt<print> sub(*this, tinfo.params[i].shape);\n-        sub.walk(align);\n+        sub.walk();\n     }\n \n     DPRINT(\">\");\n }\n \n void\n-print::walk_struct(bool align, const uint8_t *end_sp) {\n+print::walk_struct(const uint8_t *end_sp) {\n     DPRINT(\"(\");\n \n     bool first = true;\n@@ -103,14 +103,14 @@ print::walk_struct(bool align, const uint8_t *end_sp) {\n             DPRINT(\",\");\n         first = false;\n \n-        walk(align);\n+        walk();\n     }\n \n     DPRINT(\")\");\n }\n \n void\n-print::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+print::walk_res(const rust_fn *dtor, unsigned n_params,\n                 const type_param *params, const uint8_t *end_sp) {\n     DPRINT(\"res@%p\", dtor);\n \n@@ -125,7 +125,7 @@ print::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n             first = false;\n \n             ctxt<print> sub(*this, params[i].shape);\n-            sub.walk(align);\n+            sub.walk();\n         }\n \n         DPRINT(\">\");\n@@ -144,41 +144,41 @@ print::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n             DPRINT(\",\");\n         first = false;\n \n-        walk(align);\n+        walk();\n     }\n \n     DPRINT(\")\");\n }\n \n void\n-print::walk_var(bool align, uint8_t param_index) {\n+print::walk_var(uint8_t param_index) {\n     DPRINT(\"%c=\", 'T' + param_index);\n \n     const type_param *param = &params[param_index];\n     print sub(*this, param->shape, param->params, param->tables);\n-    sub.walk(align);\n+    sub.walk();\n }\n \n template<>\n-void print::walk_number<uint8_t>(bool align)    { DPRINT(\"u8\"); }\n+void print::walk_number<uint8_t>()      { DPRINT(\"u8\"); }\n template<>\n-void print::walk_number<uint16_t>(bool align)   { DPRINT(\"u16\"); }\n+void print::walk_number<uint16_t>()     { DPRINT(\"u16\"); }\n template<>\n-void print::walk_number<uint32_t>(bool align)   { DPRINT(\"u32\"); }\n+void print::walk_number<uint32_t>()     { DPRINT(\"u32\"); }\n template<>\n-void print::walk_number<uint64_t>(bool align)   { DPRINT(\"u64\"); }\n+void print::walk_number<uint64_t>()     { DPRINT(\"u64\"); }\n template<>\n-void print::walk_number<int8_t>(bool align)     { DPRINT(\"i8\"); }\n+void print::walk_number<int8_t>()       { DPRINT(\"i8\"); }\n template<>\n-void print::walk_number<int16_t>(bool align)    { DPRINT(\"i16\"); }\n+void print::walk_number<int16_t>()      { DPRINT(\"i16\"); }\n template<>\n-void print::walk_number<int32_t>(bool align)    { DPRINT(\"i32\"); }\n+void print::walk_number<int32_t>()      { DPRINT(\"i32\"); }\n template<>\n-void print::walk_number<int64_t>(bool align)    { DPRINT(\"i64\"); }\n+void print::walk_number<int64_t>()      { DPRINT(\"i64\"); }\n template<>\n-void print::walk_number<float>(bool align)      { DPRINT(\"f32\"); }\n+void print::walk_number<float>()        { DPRINT(\"f32\"); }\n template<>\n-void print::walk_number<double>(bool align)     { DPRINT(\"f64\"); }\n+void print::walk_number<double>()       { DPRINT(\"f64\"); }\n \n \n void\n@@ -197,15 +197,16 @@ size_of::compute_tag_size(tag_info &tinfo) {\n         const uint8_t *variant_end = variant_ptr_and_end.second;\n \n         size_of sub(*this, variant_ptr, tinfo.params, NULL);\n+        sub.align = false;\n \n         // Compute the size of this variant.\n         size_align variant_sa;\n         bool first = true;\n         while (sub.sp != variant_end) {\n             if (!first)\n                 variant_sa.size = align_to(variant_sa.size, sub.sa.alignment);\n-            sub.walk(!first);\n-            first = false;\n+            sub.walk();\n+            sub.align = true, first = false;\n \n             variant_sa.add(sub.sa.size, sub.sa.alignment);\n         }\n@@ -224,21 +225,21 @@ size_of::compute_tag_size(tag_info &tinfo) {\n }\n \n void\n-size_of::walk_tag(bool align, tag_info &tinfo) {\n+size_of::walk_tag(tag_info &tinfo) {\n     compute_tag_size(*this, tinfo);\n     sa = tinfo.tag_sa;\n }\n \n void\n-size_of::walk_struct(bool align, const uint8_t *end_sp) {\n+size_of::walk_struct(const uint8_t *end_sp) {\n     size_align struct_sa(0, 1);\n \n     bool first = true;\n     while (sp != end_sp) {\n         if (!first)\n             struct_sa.size = align_to(struct_sa.size, sa.alignment);\n-        walk(!first);\n-        first = false;\n+        walk();\n+        align = true, first = false;\n \n         struct_sa.add(sa);\n     }\n@@ -264,21 +265,21 @@ class cmp : public data<cmp,ptr_pair> {\n     friend class data<cmp,ptr_pair>;\n \n private:\n-    void walk_vec(bool align, bool is_pod,\n+    void walk_vec(bool is_pod,\n                   const std::pair<ptr_pair,ptr_pair> &data_range);\n \n-    inline void walk_subcontext(bool align, cmp &sub) {\n-        sub.walk(align);\n+    inline void walk_subcontext(cmp &sub) {\n+        sub.walk();\n         result = sub.result;\n     }\n \n-    inline void walk_box_contents(bool align, cmp &sub,\n-                                  ptr_pair &ref_count_dp) {\n-        sub.walk(true);\n+    inline void walk_box_contents(cmp &sub, ptr_pair &ref_count_dp) {\n+        sub.align = true;\n+        sub.walk();\n         result = sub.result;\n     }\n \n-    inline void cmp_two_pointers(bool align) {\n+    inline void cmp_two_pointers() {\n         if (align) dp = align_to(dp, alignof<uint8_t *>() * 2);\n         data_pair<uint8_t *> fst = bump_dp<uint8_t *>(dp);\n         data_pair<uint8_t *> snd = bump_dp<uint8_t *>(dp);\n@@ -287,7 +288,7 @@ class cmp : public data<cmp,ptr_pair> {\n             cmp_number(snd);\n     }\n \n-    inline void cmp_pointer(bool align) {\n+    inline void cmp_pointer() {\n         if (align) dp = align_to(dp, alignof<uint8_t *>());\n         cmp_number(bump_dp<uint8_t *>(dp));\n     }\n@@ -301,12 +302,13 @@ class cmp : public data<cmp,ptr_pair> {\n     int result;\n \n     cmp(rust_task *in_task,\n+        bool in_align,\n         const uint8_t *in_sp,\n         const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         uint8_t *in_data_0,\n         uint8_t *in_data_1)\n-    : data<cmp,ptr_pair>(in_task, in_sp, in_params, in_tables,\n+    : data<cmp,ptr_pair>(in_task, in_align, in_sp, in_params, in_tables,\n                          ptr_pair::make(in_data_0, in_data_1)),\n       result(0) {}\n \n@@ -315,42 +317,43 @@ class cmp : public data<cmp,ptr_pair> {\n         const type_param *in_params = NULL,\n         const rust_shape_tables *in_tables = NULL)\n     : data<cmp,ptr_pair>(other.task,\n+                         other.align,\n                          in_sp ? in_sp : other.sp,\n                          in_params ? in_params : other.params,\n                          in_tables ? in_tables : other.tables,\n                          other.dp),\n       result(0) {}\n \n     cmp(const cmp &other, const ptr_pair &in_dp)\n-    : data<cmp,ptr_pair>(other.task, other.sp, other.params, other.tables,\n+    : data<cmp,ptr_pair>(other.task,\n+                         other.align,\n+                         other.sp,\n+                         other.params,\n+                         other.tables,\n                          in_dp),\n       result(0) {}\n \n-    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n-        walk_vec(align, is_pod, get_evec_data_range(dp));\n+    void walk_evec(bool is_pod, uint16_t sp_size) {\n+        walk_vec(is_pod, get_evec_data_range(dp));\n     }\n \n-    void walk_vec(bool align, bool is_pod, uint16_t sp_size) {\n-        walk_vec(align, is_pod, get_vec_data_range(dp));\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+        walk_vec(is_pod, get_vec_data_range(dp));\n     }\n \n-    void walk_box(bool align) {\n-        data<cmp,ptr_pair>::walk_box_contents(align);\n+    void walk_box() {\n+        data<cmp,ptr_pair>::walk_box_contents();\n     }\n \n-    void walk_fn(bool align) { return cmp_two_pointers(align); }\n-    void walk_obj(bool align) { return cmp_two_pointers(align); }\n-    void walk_port(bool align) { return cmp_pointer(align); }\n-    void walk_chan(bool align) { return cmp_pointer(align); }\n-    void walk_task(bool align) { return cmp_pointer(align); }\n+    void walk_fn()  { return cmp_two_pointers(); }\n+    void walk_obj() { return cmp_two_pointers(); }\n \n-    void walk_tag(bool align, tag_info &tinfo,\n-                  const data_pair<uint32_t> &tag_variants);\n-    void walk_struct(bool align, const uint8_t *end_sp);\n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n+    void walk_tag(tag_info &tinfo, const data_pair<uint32_t> &tag_variants);\n+    void walk_struct(const uint8_t *end_sp);\n+    void walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n                   const type_param *ty_params_sp, const uint8_t *end_sp,\n                   const data_pair<uintptr_t> &live);\n-    void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant(tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n \n@@ -364,14 +367,13 @@ void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n }\n \n void\n-cmp::walk_vec(bool align, bool is_pod,\n-              const std::pair<ptr_pair,ptr_pair> &data_range) {\n+cmp::walk_vec(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n     cmp sub(*this, data_range.first);\n     ptr_pair data_end = data_range.second;\n     while (!result && sub.dp < data_end) {\n-        sub.walk_reset(align);\n+        sub.walk_reset();\n         result = sub.result;\n-        align = true;\n+        sub.align = true;\n     }\n \n     if (!result) {\n@@ -383,40 +385,39 @@ cmp::walk_vec(bool align, bool is_pod,\n }\n \n void\n-cmp::walk_tag(bool align, tag_info &tinfo,\n-              const data_pair<uint32_t> &tag_variants) {\n+cmp::walk_tag(tag_info &tinfo, const data_pair<uint32_t> &tag_variants) {\n     cmp_number(tag_variants);\n     if (result != 0)\n         return;\n-    data<cmp,ptr_pair>::walk_variant(align, tinfo, tag_variants.fst);\n+    data<cmp,ptr_pair>::walk_variant(tinfo, tag_variants.fst);\n }\n \n void\n-cmp::walk_struct(bool align, const uint8_t *end_sp) {\n+cmp::walk_struct(const uint8_t *end_sp) {\n     while (!result && this->sp != end_sp) {\n-        this->walk(align);\n+        this->walk();\n         align = true;\n     }\n }\n \n void\n-cmp::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n+cmp::walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n               const type_param *ty_params_sp, const uint8_t *end_sp,\n               const data_pair<uintptr_t> &live) {\n     abort();    // TODO\n }\n \n void\n-cmp::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+cmp::walk_variant(tag_info &tinfo, uint32_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>\n                   variant_ptr_and_end) {\n     cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n \n     const uint8_t *variant_end = variant_ptr_and_end.second;\n     while (!result && sub.sp < variant_end) {\n-        sub.walk(align);\n+        sub.walk();\n         result = sub.result;\n-        align = true;\n+        sub.align = true;\n     }\n }\n \n@@ -441,22 +442,22 @@ log::walk_string(const std::pair<ptr,ptr> &data) {\n }\n \n void\n-log::walk_struct(bool align, const uint8_t *end_sp) {\n+log::walk_struct(const uint8_t *end_sp) {\n     out << \"(\";\n \n     bool first = true;\n     while (sp != end_sp) {\n         if (!first)\n             out << \", \";\n-        walk(align);\n+        walk();\n         align = true, first = false;\n     }\n \n     out << \")\";\n }\n \n void\n-log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n+log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n     if (peek() == SHAPE_U8) {\n         sp++;   // It's a string. We handle this ourselves.\n         walk_string(data);\n@@ -469,20 +470,16 @@ log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n \n     bool first = true;\n     while (sub.dp < data.second) {\n-        if (!first)\n-            out << \", \";\n-\n-        sub.walk_reset(align);\n-\n-        align = true;\n-        first = false;\n+        if (!first) out << \", \";\n+        sub.walk_reset();\n+        sub.align = true, first = false;\n     }\n \n     out << \"]\";\n }\n \n void\n-log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+log::walk_variant(tag_info &tinfo, uint32_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>\n                   variant_ptr_and_end) {\n     log sub(*this, variant_ptr_and_end.first, tinfo.params);\n@@ -491,19 +488,16 @@ log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n     bool first = true;\n     while (sub.sp < variant_end) {\n         out << (first ? \"(\" : \", \");\n-\n-        sub.walk(align);\n-\n-        align = true;\n-        first = false;\n+        sub.walk();\n+        sub.align = true, first = false;\n     }\n \n     if (!first)\n         out << \")\";\n }\n \n void\n-log::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+log::walk_res(const rust_fn *dtor, unsigned n_params,\n               const type_param *params, const uint8_t *end_sp, bool live) {\n     out << \"res\";\n \n@@ -516,7 +510,7 @@ log::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n     while (sp != end_sp) {\n         if (!first)\n             out << \", \";\n-        walk(align);\n+        walk();\n         align = true, first = false;\n     }\n \n@@ -531,9 +525,9 @@ upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n                 uint8_t *data_1, uint8_t cmp_type) {\n     shape::arena arena;\n     shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n-    shape::cmp cmp(task, tydesc->shape, params, tydesc->shape_tables, data_0,\n-                   data_1);\n-    cmp.walk(true);\n+    shape::cmp cmp(task, true, tydesc->shape, params, tydesc->shape_tables,\n+                   data_0, data_1);\n+    cmp.walk();\n \n     switch (cmp_type) {\n     case shape::CMP_EQ: *result = cmp.result == 0;  break;\n@@ -552,10 +546,10 @@ upcall_log_type(rust_task *task, type_desc *tydesc, uint8_t *data,\n     shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n \n     std::stringstream ss;\n-    shape::log log(task, tydesc->shape, params, tydesc->shape_tables, data,\n-                   ss);\n+    shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,\n+                   data, ss);\n \n-    log.walk(true);\n+    log.walk();\n \n     task->sched->log(task, level, \"%s\", ss.str().c_str());\n }"}, {"sha": "af22d46d33754048bf49e69be770daec9d25e9bd", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 156, "deletions": 141, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/143569fce4e9c394496e8bac357511229255ed6a/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=143569fce4e9c394496e8bac357511229255ed6a", "patch": "@@ -6,10 +6,13 @@\n \n #include \"rust_internal.h\"\n \n+// ISAAC pollutes our namespace.\n+#undef align\n+\n #define ARENA_SIZE          256\n \n #define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n-#define DPRINTCX(cx)        print::print_cx(cx)\n+#define DPRINTCX(cx)        shape::print::print_cx(cx)\n \n //#define DPRINT(fmt,...)\n //#define DPRINTCX(cx)\n@@ -198,12 +201,18 @@ class ctxt {\n     const type_param *params;           // shapes of type parameters\n     const rust_shape_tables *tables;\n     rust_task *task;\n+    bool align;\n \n     ctxt(rust_task *in_task,\n+         bool in_align,\n          const uint8_t *in_sp,\n          const type_param *in_params,\n          const rust_shape_tables *in_tables)\n-    : sp(in_sp), params(in_params), tables(in_tables), task(in_task) {}\n+    : sp(in_sp),\n+      params(in_params),\n+      tables(in_tables),\n+      task(in_task),\n+      align(in_align) {}\n \n     template<typename U>\n     ctxt(const ctxt<U> &other,\n@@ -213,10 +222,11 @@ class ctxt {\n     : sp(in_sp ? in_sp : other.sp),\n       params(in_params ? in_params : other.params),\n       tables(in_tables ? in_tables : other.tables),\n-      task(other.task) {}\n+      task(other.task),\n+      align(other.align) {}\n \n-    void walk(bool align);\n-    void walk_reset(bool align);\n+    void walk();\n+    void walk_reset();\n \n     std::pair<const uint8_t *,const uint8_t *>\n     get_variant_sp(tag_info &info, uint32_t variant_id);\n@@ -227,13 +237,13 @@ class ctxt {\n     inline size_align get_size_align(const uint8_t *&addr);\n \n private:\n-    void walk_evec(bool align);\n-    void walk_vec(bool align);\n-    void walk_tag(bool align);\n-    void walk_box(bool align);\n-    void walk_struct(bool align);\n-    void walk_res(bool align);\n-    void walk_var(bool align);\n+    void walk_evec();\n+    void walk_vec();\n+    void walk_tag();\n+    void walk_box();\n+    void walk_struct();\n+    void walk_res();\n+    void walk_var();\n };\n \n \n@@ -308,13 +318,12 @@ class type_param {\n // Traversals\n \n #define WALK_NUMBER(c_type) \\\n-    static_cast<T *>(this)->template walk_number<c_type>(align)\n-#define WALK_SIMPLE(method) static_cast<T *>(this)->method(align)\n+    static_cast<T *>(this)->template walk_number<c_type>()\n+#define WALK_SIMPLE(method) static_cast<T *>(this)->method()\n \n template<typename T>\n void\n-ctxt<T>::walk(bool align) {\n-  \n+ctxt<T>::walk() {\n     switch (*sp++) {\n     case SHAPE_U8:      WALK_NUMBER(uint8_t);   break;\n     case SHAPE_U16:     WALK_NUMBER(uint16_t);  break;\n@@ -326,24 +335,24 @@ ctxt<T>::walk(bool align) {\n     case SHAPE_I64:     WALK_NUMBER(int64_t);   break;\n     case SHAPE_F32:     WALK_NUMBER(float);     break;\n     case SHAPE_F64:     WALK_NUMBER(double);    break;\n-    case SHAPE_EVEC:    walk_evec(align);       break;\n-    case SHAPE_VEC:     walk_vec(align);        break;\n-    case SHAPE_TAG:     walk_tag(align);        break;\n-    case SHAPE_BOX:     walk_box(align);        break;\n-    case SHAPE_STRUCT:  walk_struct(align);     break;\n+    case SHAPE_EVEC:    walk_evec();            break;\n+    case SHAPE_VEC:     walk_vec();             break;\n+    case SHAPE_TAG:     walk_tag();             break;\n+    case SHAPE_BOX:     walk_box();             break;\n+    case SHAPE_STRUCT:  walk_struct();          break;\n     case SHAPE_FN:      WALK_SIMPLE(walk_fn);   break;\n     case SHAPE_OBJ:     WALK_SIMPLE(walk_obj);  break;\n-    case SHAPE_RES:     walk_res(align);        break;\n-    case SHAPE_VAR:     walk_var(align);        break;\n+    case SHAPE_RES:     walk_res();             break;\n+    case SHAPE_VAR:     walk_var();             break;\n     default:            abort();\n     }\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_reset(bool align) {\n+ctxt<T>::walk_reset() {\n     const uint8_t *old_sp = sp;\n-    walk(align);\n+    walk();\n     sp = old_sp;\n }\n \n@@ -371,33 +380,33 @@ ctxt<T>::get_variant_sp(tag_info &tinfo, uint32_t variant_id) {\n \n template<typename T>\n void\n-ctxt<T>::walk_evec(bool align) {\n+ctxt<T>::walk_evec() {\n     bool is_pod = *sp++;\n \n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_evec(align, is_pod, sp_size);\n+    static_cast<T *>(this)->walk_evec(is_pod, sp_size);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_vec(bool align) {\n+ctxt<T>::walk_vec() {\n     bool is_pod = *sp++;\n \n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_vec(align, is_pod, sp_size);\n+    static_cast<T *>(this)->walk_vec(is_pod, sp_size);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_tag(bool align) {\n+ctxt<T>::walk_tag() {\n     tag_info tinfo;\n     tinfo.tag_id = get_u16_bump(sp);\n \n@@ -429,34 +438,34 @@ ctxt<T>::walk_tag(bool align) {\n     tinfo.params = params;\n \n     // Call to the implementation.\n-    static_cast<T *>(this)->walk_tag(align, tinfo);\n+    static_cast<T *>(this)->walk_tag(tinfo);\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_box(bool align) {\n+ctxt<T>::walk_box() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_box(align);\n+    static_cast<T *>(this)->walk_box();\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_struct(bool align) {\n+ctxt<T>::walk_struct() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_struct(align, end_sp);\n+    static_cast<T *>(this)->walk_struct(end_sp);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_res(bool align) {\n+ctxt<T>::walk_res() {\n     uint16_t dtor_offset = get_u16_bump(sp);\n     const rust_fn **resources =\n         reinterpret_cast<const rust_fn **>(tables->resources);\n@@ -476,17 +485,16 @@ ctxt<T>::walk_res(bool align) {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_res(align, dtor, n_ty_params, params,\n-                                     end_sp);\n+    static_cast<T *>(this)->walk_res(dtor, n_ty_params, params, end_sp);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_var(bool align) {\n+ctxt<T>::walk_var() {\n     uint8_t param = *sp++;\n-    static_cast<T *>(this)->walk_var(align, param);\n+    static_cast<T *>(this)->walk_var(param);\n }\n \n // A shape printer, useful for debugging\n@@ -500,35 +508,33 @@ class print : public ctxt<print> {\n           const rust_shape_tables *in_tables = NULL)\n     : ctxt<print>(other, in_sp, in_params, in_tables) {}\n \n-    void walk_tag(bool align, tag_info &tinfo);\n-    void walk_struct(bool align, const uint8_t *end_sp);\n-    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+    void walk_tag(tag_info &tinfo);\n+    void walk_struct(const uint8_t *end_sp);\n+    void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp);\n-    void walk_var(bool align, uint8_t param);\n+    void walk_var(uint8_t param);\n \n-    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n-        DPRINT(\"evec<\"); walk(align); DPRINT(\">\");\n+    void walk_evec(bool is_pod, uint16_t sp_size) {\n+        DPRINT(\"evec<\"); walk(); DPRINT(\">\");\n     }\n-    void walk_vec(bool align, bool is_pod, uint16_t sp_size) {\n-        DPRINT(\"vec<\"); walk(align); DPRINT(\">\");\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+        DPRINT(\"vec<\"); walk(); DPRINT(\">\");\n     }\n-    void walk_box(bool align) {\n-        DPRINT(\"box<\"); walk(align); DPRINT(\">\");\n+    void walk_box() {\n+        DPRINT(\"box<\"); walk(); DPRINT(\">\");\n     }\n \n-    void walk_port(bool align)                  { DPRINT(\"port\"); }\n-    void walk_chan(bool align)                  { DPRINT(\"chan\"); }\n-    void walk_task(bool align)                  { DPRINT(\"task\"); }\n-    void walk_fn(bool align)                    { DPRINT(\"fn\");   }\n-    void walk_obj(bool align)                   { DPRINT(\"obj\");  }\n+    void walk_fn()  { DPRINT(\"fn\"); }\n+    void walk_obj() { DPRINT(\"obj\"); }\n \n     template<typename T>\n-    void walk_number(bool align) {}\n+    void walk_number() {}\n \n     template<typename T>\n     static void print_cx(const T *cx) {\n         print self(*cx);\n-        self.walk(false);\n+        self.align = false;\n+        self.walk();\n     }\n };\n \n@@ -558,37 +564,34 @@ class size_of : public ctxt<size_of> {\n             const rust_shape_tables *in_tables = NULL)\n     : ctxt<size_of>(other, in_sp, in_params, in_tables) {}\n \n-    void walk_tag(bool align, tag_info &tinfo);\n-    void walk_struct(bool align, const uint8_t *end_sp);\n+    void walk_tag(tag_info &tinfo);\n+    void walk_struct(const uint8_t *end_sp);\n \n-    void walk_box(bool align)   { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_port(bool align)  { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_chan(bool align)  { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_task(bool align)  { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_fn(bool align)    { sa.set(sizeof(void *)*2, sizeof(void *)); }\n-    void walk_obj(bool align)   { sa.set(sizeof(void *)*2, sizeof(void *)); }\n+    void walk_box()     { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_fn()      { sa.set(sizeof(void *)*2, sizeof(void *)); }\n+    void walk_obj()     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n \n-    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n+    void walk_evec(bool is_pod, uint16_t sp_size) {\n         sa.set(sizeof(void *), sizeof(void *));\n     }\n-    void walk_vec(bool align, bool is_pod, uint16_t sp_size) {\n-        sa.set(sizeof(void*), sizeof(void*));\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+        sa.set(sizeof(void *), sizeof(void *));\n     }\n \n-    void walk_var(bool align, uint8_t param_index) {\n+    void walk_var(uint8_t param_index) {\n         const type_param *param = &params[param_index];\n         size_of sub(*this, param->shape, param->params, param->tables);\n-        sub.walk(align);\n+        sub.walk();\n         sa = sub.sa;\n     }\n \n-    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+    void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n \n     template<typename T>\n-    void walk_number(bool align) { sa.set(sizeof(T), alignof<T>()); }\n+    void walk_number()  { sa.set(sizeof(T), alignof<T>()); }\n \n     void compute_tag_size(tag_info &tinfo);\n \n@@ -601,7 +604,8 @@ class size_of : public ctxt<size_of> {\n     template<typename T>\n     static size_align get(const ctxt<T> &other_cx, unsigned back_up = 0) {\n         size_of cx(other_cx, other_cx.sp - back_up);\n-        cx.walk(false);\n+        cx.align = false;\n+        cx.walk();\n         assert(cx.sa.alignment > 0);\n         return cx.sa;\n     }\n@@ -751,18 +755,18 @@ namespace shape {\n // for methods that actually manipulate the data involved.\n \n #define DATA_SIMPLE(ty, call) \\\n-    if (align) dp = align_to(dp, alignof<ty>()); \\\n+    if (this->align) dp = align_to(dp, alignof<ty>()); \\\n     U end_dp = dp + sizeof(ty); \\\n     static_cast<T *>(this)->call; \\\n     dp = end_dp;\n \n template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n protected:\n-    void walk_box_contents(bool align);\n-    void walk_fn_contents(bool align, ptr &dp);\n-    void walk_obj_contents(bool align, ptr &dp);\n-    void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n+    void walk_box_contents();\n+    void walk_fn_contents(ptr &dp);\n+    void walk_obj_contents(ptr &dp);\n+    void walk_variant(tag_info &tinfo, uint32_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_evec_data_range(ptr dp);\n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n@@ -773,80 +777,79 @@ class data : public ctxt< data<T,U> > {\n     U dp;\n \n     data(rust_task *in_task,\n+         bool in_align,\n          const uint8_t *in_sp,\n          const type_param *in_params,\n          const rust_shape_tables *in_tables,\n          U const &in_dp)\n-    : ctxt< data<T,U> >(in_task, in_sp, in_params, in_tables), dp(in_dp) {}\n+    : ctxt< data<T,U> >(in_task, in_align, in_sp, in_params, in_tables),\n+      dp(in_dp) {}\n \n-    void walk_tag(bool align, tag_info &tinfo);\n+    void walk_tag(tag_info &tinfo);\n \n-    void walk_struct(bool align, const uint8_t *end_sp) {\n-        static_cast<T *>(this)->walk_struct(align, end_sp);\n+    void walk_struct(const uint8_t *end_sp) {\n+        static_cast<T *>(this)->walk_struct(end_sp);\n     }\n \n-    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n-        DATA_SIMPLE(void *, walk_evec(align, is_pod, sp_size));\n+    void walk_evec(bool is_pod, uint16_t sp_size) {\n+        DATA_SIMPLE(void *, walk_evec(is_pod, sp_size));\n     }\n-    void walk_vec(bool align, bool is_pod, uint16_t sp_size) {\n-        DATA_SIMPLE(void *, walk_vec(align, is_pod, sp_size));\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+        DATA_SIMPLE(void *, walk_vec(is_pod, sp_size));\n     }\n \n-    void walk_box(bool align)   { DATA_SIMPLE(void *, walk_box(align)); }\n-    void walk_port(bool align)  { DATA_SIMPLE(void *, walk_port(align)); }\n-    void walk_chan(bool align)  { DATA_SIMPLE(void *, walk_chan(align)); }\n-    void walk_task(bool align)  { DATA_SIMPLE(void *, walk_task(align)); }\n+    void walk_box()     { DATA_SIMPLE(void *, walk_box()); }\n \n-    void walk_fn(bool align) {\n-        if (align) dp = align_to(dp, sizeof(void *));\n+    void walk_fn() {\n+        if (this->align) dp = align_to(dp, sizeof(void *));\n         U next_dp = dp + sizeof(void *) * 2;\n-        static_cast<T *>(this)->walk_fn(align);\n+        static_cast<T *>(this)->walk_fn();\n         dp = next_dp;\n     }\n \n-    void walk_obj(bool align) {\n-        if (align) dp = align_to(dp, sizeof(void *));\n+    void walk_obj() {\n+        if (this->align) dp = align_to(dp, sizeof(void *));\n         U next_dp = dp + sizeof(void *) * 2;\n-        static_cast<T *>(this)->walk_obj(align);\n+        static_cast<T *>(this)->walk_obj();\n         dp = next_dp;\n     }\n \n-    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+    void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp) {\n         typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n         // Delegate to the implementation.\n-        static_cast<T *>(this)->walk_res(align, dtor, n_params, params,\n-                                         end_sp, live);\n+        static_cast<T *>(this)->walk_res(dtor, n_params, params, end_sp,\n+                                         live);\n     }\n \n-    void walk_var(bool align, uint8_t param_index) {\n+    void walk_var(uint8_t param_index) {\n         const type_param *param = &this->params[param_index];\n         T sub(*static_cast<T *>(this), param->shape, param->params,\n               param->tables);\n-        static_cast<T *>(this)->walk_subcontext(align, sub);\n+        static_cast<T *>(this)->walk_subcontext(sub);\n         dp = sub.dp;\n     }\n \n     template<typename W>\n-    void walk_number(bool align) { DATA_SIMPLE(W, walk_number<W>()); }\n+    void walk_number() { DATA_SIMPLE(W, walk_number<W>()); }\n };\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_box_contents(bool align) {\n+data<T,U>::walk_box_contents() {\n     typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n \n     U ref_count_dp(box_ptr);\n     T sub(*static_cast<T *>(this), ref_count_dp + sizeof(uint32_t));\n-    static_cast<T *>(this)->walk_box_contents(align, sub, ref_count_dp);\n+    static_cast<T *>(this)->walk_box_contents(sub, ref_count_dp);\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n+data<T,U>::walk_variant(tag_info &tinfo, uint32_t variant_id) {\n     std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n         this->get_variant_sp(tinfo, variant_id);\n-    static_cast<T *>(this)->walk_variant(align, tinfo, variant_id,\n+    static_cast<T *>(this)->walk_variant(tinfo, variant_id,\n                                          variant_ptr_and_end);\n }\n \n@@ -887,10 +890,10 @@ data<T,U>::get_vec_data_range(ptr_pair &dp) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n+data<T,U>::walk_tag(tag_info &tinfo) {\n     size_of::compute_tag_size(*this, tinfo);\n \n-    if (tinfo.variant_count > 1 && align)\n+    if (tinfo.variant_count > 1 && this->align)\n         dp = align_to(dp, alignof<uint32_t>());\n \n     U end_dp = dp + tinfo.tag_sa.size;\n@@ -901,14 +904,14 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     else\n         tag_variant = 0;\n \n-    static_cast<T *>(this)->walk_tag(align, tinfo, tag_variant);\n+    static_cast<T *>(this)->walk_tag(tinfo, tag_variant);\n \n     dp = end_dp;\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_fn_contents(bool align, ptr &dp) {\n+data<T,U>::walk_fn_contents(ptr &dp) {\n     dp += sizeof(void *);   // Skip over the code pointer.\n \n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n@@ -926,12 +929,13 @@ data<T,U>::walk_fn_contents(bool align, ptr &dp) {\n     closure_dp += sizeof(void *);\n     T sub(*static_cast<T *>(this), subtydesc->shape, params,\n           subtydesc->shape_tables, closure_dp);\n-    sub.walk(true);\n+    sub.align = true;\n+    sub.walk();\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n+data<T,U>::walk_obj_contents(ptr &dp) {\n     dp += sizeof(void *);   // Skip over the vtable.\n \n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n@@ -946,7 +950,8 @@ data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n                                                     obj_closure_dp, arena);\n     T sub(*static_cast<T *>(this), subtydesc->shape, params,\n           subtydesc->shape_tables, obj_closure_dp);\n-    sub.walk(true);\n+    sub.align = true;\n+    sub.walk();\n }\n \n \n@@ -964,6 +969,7 @@ class log : public data<log,ptr> {\n         const type_param *in_params,\n         const rust_shape_tables *in_tables = NULL)\n     : data<log,ptr>(other.task,\n+                    other.align,\n                     in_sp,\n                     in_params,\n                     in_tables ? in_tables : other.tables,\n@@ -975,74 +981,83 @@ class log : public data<log,ptr> {\n         const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         ptr in_dp)\n-    : data<log,ptr>(other.task, in_sp, in_params, in_tables, in_dp),\n+    : data<log,ptr>(other.task,\n+                    other.align,\n+                    in_sp,\n+                    in_params,\n+                    in_tables,\n+                    in_dp),\n       out(other.out) {}\n \n     log(log &other, ptr in_dp)\n-    : data<log,ptr>(other.task, other.sp, other.params, other.tables, in_dp),\n+    : data<log,ptr>(other.task,\n+                    other.align,\n+                    other.sp,\n+                    other.params,\n+                    other.tables,\n+                    in_dp),\n       out(other.out) {}\n \n-    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n-        walk_vec(align, is_pod, get_evec_data_range(dp));\n+    void walk_evec(bool is_pod, uint16_t sp_size) {\n+        walk_vec(is_pod, get_evec_data_range(dp));\n     }\n \n-    void walk_vec(bool align, bool is_pod, uint16_t sp_size) {\n-        walk_vec(align, is_pod, get_vec_data_range(dp));\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+        walk_vec(is_pod, get_vec_data_range(dp));\n     }\n \n-    void walk_tag(bool align, tag_info &tinfo, uint32_t tag_variant) {\n+    void walk_tag(tag_info &tinfo, uint32_t tag_variant) {\n         out << \"tag\" << tag_variant;\n-        data<log,ptr>::walk_variant(align, tinfo, tag_variant);\n+        data<log,ptr>::walk_variant(tinfo, tag_variant);\n     }\n \n-    void walk_box(bool align) {\n+    void walk_box() {\n         out << \"@\";\n-        data<log,ptr>::walk_box_contents(align);\n+        data<log,ptr>::walk_box_contents();\n     }\n \n-    void walk_fn(bool align) {\n+    void walk_fn() {\n         out << \"fn\";\n-        data<log,ptr>::walk_fn_contents(align, dp);\n+        data<log,ptr>::walk_fn_contents(dp);\n     }\n \n-    void walk_obj(bool align) {\n+    void walk_obj() {\n         out << \"obj\";\n-        data<log,ptr>::walk_obj_contents(align, dp);\n+        data<log,ptr>::walk_obj_contents(dp);\n     }\n \n-    void walk_port(bool align) { out << \"port\"; }\n-    void walk_chan(bool align) { out << \"chan\"; }\n-    void walk_task(bool align) { out << \"task\"; }\n+    void walk_subcontext(log &sub) { sub.walk(); }\n \n-    void walk_subcontext(bool align, log &sub) { sub.walk(align); }\n-\n-    void walk_box_contents(bool align, log &sub, ptr &ref_count_dp) {\n-        if (ref_count_dp == 0)\n+    void walk_box_contents(log &sub, ptr &ref_count_dp) {\n+        if (ref_count_dp == 0) {\n             out << \"(null)\";\n-        else\n-            sub.walk(true);\n+        } else {\n+            sub.align = true;\n+            sub.walk();\n+        }\n     }\n \n-    void walk_struct(bool align, const uint8_t *end_sp);\n-    void walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data);\n-    void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+    void walk_struct(const uint8_t *end_sp);\n+    void walk_vec(bool is_pod, const std::pair<ptr,ptr> &data);\n+    void walk_variant(tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n     void walk_string(const std::pair<ptr,ptr> &data);\n-    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+    void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp, bool live);\n \n     template<typename T>\n     inline void walk_number() { fmt_number(out, get_dp<T>(dp)); }\n \n public:\n     log(rust_task *in_task,\n+        bool in_align,\n         const uint8_t *in_sp,\n         const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         uint8_t *in_data,\n         std::ostream &in_out)\n-    : data<log,ptr>(in_task, in_sp, in_params, in_tables, in_data),\n+    : data<log,ptr>(in_task, in_align, in_sp, in_params, in_tables, in_data),\n       out(in_out) {}\n };\n "}]}