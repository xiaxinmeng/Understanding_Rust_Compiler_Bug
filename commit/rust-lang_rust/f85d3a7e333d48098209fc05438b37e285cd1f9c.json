{"sha": "f85d3a7e333d48098209fc05438b37e285cd1f9c", "node_id": "C_kwDOAAsO6NoAKGY4NWQzYTdlMzMzZDQ4MDk4MjA5ZmMwNTQzOGIzN2UyODVjZDFmOWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-01T11:08:58Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T19:43:46Z"}, "message": "Check hidden types in dead code", "tree": {"sha": "f7321cb5d56c656d41963861a5fc8a99ebcddd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7321cb5d56c656d41963861a5fc8a99ebcddd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85d3a7e333d48098209fc05438b37e285cd1f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85d3a7e333d48098209fc05438b37e285cd1f9c", "html_url": "https://github.com/rust-lang/rust/commit/f85d3a7e333d48098209fc05438b37e285cd1f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85d3a7e333d48098209fc05438b37e285cd1f9c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d39abbc294ef54a9c900a5d0075f3973c91ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d39abbc294ef54a9c900a5d0075f3973c91ece", "html_url": "https://github.com/rust-lang/rust/commit/70d39abbc294ef54a9c900a5d0075f3973c91ece"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "e3e4a934ab5630db01dd969e32bb594fb2bb9e84", "filename": "compiler/rustc_hir_analysis/src/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs?ref=f85d3a7e333d48098209fc05438b37e285cd1f9c", "patch": "@@ -560,13 +560,11 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 continue;\n             }\n \n-            let hidden_type = hidden_type\n-                .remap_generic_params_to_declaration_params(\n-                    opaque_type_key,\n-                    self.fcx.infcx.tcx,\n-                    true,\n-                )\n-                .ty;\n+            let hidden_type = hidden_type.remap_generic_params_to_declaration_params(\n+                opaque_type_key,\n+                self.fcx.infcx.tcx,\n+                true,\n+            );\n \n             self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);\n         }"}, {"sha": "0a69f965e751da8f860df05f75884aace60fb586", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f85d3a7e333d48098209fc05438b37e285cd1f9c", "patch": "@@ -564,6 +564,11 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n         /// checked against it (we also carry the span of that first\n         /// type).\n         found: Option<ty::OpaqueHiddenType<'tcx>>,\n+\n+        /// In the presence of dead code, typeck may figure out a hidden type\n+        /// while borrowck will now. We collect these cases here and check at\n+        /// the end that we actually found a type that matches (modulo regions).\n+        typeck_types: Vec<ty::OpaqueHiddenType<'tcx>>,\n     }\n \n     impl ConstraintLocator<'_> {\n@@ -590,18 +595,23 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 self.found = Some(ty::OpaqueHiddenType { span: DUMMY_SP, ty: self.tcx.ty_error() });\n                 return;\n             }\n-            if !tables.concrete_opaque_types.contains_key(&self.def_id) {\n+            let Some(&typeck_hidden_ty) = tables.concrete_opaque_types.get(&self.def_id) else {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n+            };\n+            if self.typeck_types.iter().all(|prev| prev.ty != typeck_hidden_ty.ty) {\n+                self.typeck_types.push(typeck_hidden_ty);\n             }\n+\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(item_def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n             if let Some(&concrete_type) = concrete_opaque_types.get(&self.def_id) {\n                 debug!(?concrete_type, \"found constraint\");\n-                if let Some(prev) = self.found {\n-                    if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n+                if let Some(prev) = &mut self.found {\n+                    if concrete_type.ty != prev.ty && !(concrete_type, prev.ty).references_error() {\n                         prev.report_mismatch(&concrete_type, self.tcx);\n+                        prev.ty = self.tcx.ty_error();\n                     }\n                 } else {\n                     self.found = Some(concrete_type);\n@@ -648,7 +658,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let scope = tcx.hir().get_defining_scope(hir_id);\n-    let mut locator = ConstraintLocator { def_id: def_id, tcx, found: None };\n+    let mut locator = ConstraintLocator { def_id: def_id, tcx, found: None, typeck_types: vec![] };\n \n     debug!(?scope);\n \n@@ -678,16 +688,26 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n         }\n     }\n \n-    match locator.found {\n-        Some(hidden) => hidden.ty,\n-        None => {\n-            tcx.sess.emit_err(UnconstrainedOpaqueType {\n-                span: tcx.def_span(def_id),\n-                name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n-            });\n-            tcx.ty_error()\n+    let Some(hidden) = locator.found else {\n+        tcx.sess.emit_err(UnconstrainedOpaqueType {\n+            span: tcx.def_span(def_id),\n+            name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n+        });\n+        return tcx.ty_error();\n+    };\n+\n+    // Only check against typeck if we didn't already error\n+    if !hidden.ty.references_error() {\n+        for concrete_type in locator.typeck_types {\n+            if tcx.erase_regions(concrete_type.ty) != tcx.erase_regions(hidden.ty)\n+                && !(concrete_type, hidden).references_error()\n+            {\n+                hidden.report_mismatch(&concrete_type, tcx);\n+            }\n         }\n     }\n+\n+    hidden.ty\n }\n \n fn find_opaque_ty_constraints_for_rpit(\n@@ -788,7 +808,7 @@ fn find_opaque_ty_constraints_for_rpit(\n             // the `concrete_opaque_types` table.\n             tcx.ty_error()\n         } else {\n-            table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n+            table.concrete_opaque_types.get(&def_id).map(|ty| ty.ty).unwrap_or_else(|| {\n                 // We failed to resolve the opaque type or it\n                 // resolves to itself. We interpret this as the\n                 // no values of the hidden type ever being constructed,"}, {"sha": "8a9160d246640eaa04b5369fed7e32c6a9117768", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85d3a7e333d48098209fc05438b37e285cd1f9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f85d3a7e333d48098209fc05438b37e285cd1f9c", "patch": "@@ -542,7 +542,7 @@ pub struct TypeckResults<'tcx> {\n     /// by this function. We also store the\n     /// type here, so that mir-borrowck can use it as a hint for figuring out hidden types,\n     /// even if they are only set in dead code (which doesn't show up in MIR).\n-    pub concrete_opaque_types: VecMap<LocalDefId, Ty<'tcx>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, ty::OpaqueHiddenType<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "0b8157fe33dd74281d5086f8b836c3ca738eee5a", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85d3a7e333d48098209fc05438b37e285cd1f9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85d3a7e333d48098209fc05438b37e285cd1f9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs?ref=f85d3a7e333d48098209fc05438b37e285cd1f9c", "patch": "@@ -1,5 +1,5 @@\n #![feature(type_alias_impl_trait)]\n-// check-pass\n+\n fn main() {}\n \n // two definitions with different types\n@@ -9,7 +9,7 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo {\n+fn bar() -> Foo { //~ ERROR: concrete type differs from previous defining opaque type use\n     panic!()\n }\n "}, {"sha": "09dadb0afcef5d4461222cceaec8f356e391ac7f", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f85d3a7e333d48098209fc05438b37e285cd1f9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85d3a7e333d48098209fc05438b37e285cd1f9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=f85d3a7e333d48098209fc05438b37e285cd1f9c", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type.rs:12:13\n+   |\n+LL | fn bar() -> Foo {\n+   |             ^^^ expected `&'static str`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:9:5\n+   |\n+LL |     \"\"\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}]}