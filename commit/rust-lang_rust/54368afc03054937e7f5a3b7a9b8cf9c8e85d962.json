{"sha": "54368afc03054937e7f5a3b7a9b8cf9c8e85d962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MzY4YWZjMDMwNTQ5MzdlN2Y1YTNiN2E5YjhjZjljOGU4NWQ5NjI=", "commit": {"author": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-06T18:57:21Z"}, "committer": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-06T18:57:21Z"}, "message": "Incorporate feedback from huonw\n\n- use identifiers with underscores to avoid unused variable warning\n- implement on R: Rng instead of on R: RngUtil\n- bugfix: zero BigInts were being generated twice as often as any\n  other number\n- test that gen_biguint(0) always returns zero", "tree": {"sha": "c047bf01ff5753a5ebd84df1aa789f7255874d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c047bf01ff5753a5ebd84df1aa789f7255874d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54368afc03054937e7f5a3b7a9b8cf9c8e85d962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54368afc03054937e7f5a3b7a9b8cf9c8e85d962", "html_url": "https://github.com/rust-lang/rust/commit/54368afc03054937e7f5a3b7a9b8cf9c8e85d962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54368afc03054937e7f5a3b7a9b8cf9c8e85d962/comments", "author": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43399529343bff6fc4ee5643b1f8f642b151ffff", "url": "https://api.github.com/repos/rust-lang/rust/commits/43399529343bff6fc4ee5643b1f8f642b151ffff", "html_url": "https://github.com/rust-lang/rust/commit/43399529343bff6fc4ee5643b1f8f642b151ffff"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "b691cb3c2964146951a600fcee48627cfc507013", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/54368afc03054937e7f5a3b7a9b8cf9c8e85d962/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54368afc03054937e7f5a3b7a9b8cf9c8e85d962/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=54368afc03054937e7f5a3b7a9b8cf9c8e85d962", "patch": "@@ -526,7 +526,7 @@ trait RandBigUInt {\n     fn gen_biguint(&mut self, bit_size: uint) -> BigUint;\n }\n \n-impl<R: RngUtil> RandBigUInt for R {\n+impl<R: Rng> RandBigUInt for R {\n     /// Generate a random BigUint of the given bit size.\n     fn gen_biguint(&mut self, bit_size: uint) -> BigUint {\n         let (digits, rem) = bit_size.div_rem(&BigDigit::bits);\n@@ -1078,13 +1078,27 @@ trait RandBigInt {\n     fn gen_bigint(&mut self, bit_size: uint) -> BigInt;\n }\n \n-impl<R: RngUtil> RandBigInt for R {\n+impl<R: Rng> RandBigInt for R {\n     /// Generate a random BigUint of the given bit size.\n     fn gen_bigint(&mut self, bit_size: uint) -> BigInt {\n+        // Generate a random BigUint...\n         let biguint = self.gen_biguint(bit_size);\n-        let sign = if biguint.is_zero() { Zero }\n-            else if self.gen() { Plus }\n-            else { Minus };\n+        // ...and then randomly assign it a Sign...\n+        let sign = if biguint.is_zero() {\n+            // ...except that if the BigUint is zero, we need to try\n+            // again with probability 0.5. This is because otherwise,\n+            // the probability of generating a zero BigInt would be\n+            // double that of any other number.\n+            if self.gen() {\n+                return self.gen_bigint(bit_size);\n+            } else {\n+                Zero\n+            }\n+        } else if self.gen() {\n+            Plus\n+        } else {\n+            Minus\n+        };\n         return BigInt::from_biguint(sign, biguint);\n     }\n }\n@@ -1620,7 +1634,8 @@ mod biguint_tests {\n     #[test]\n     fn test_rand() {\n         let mut rng = task_rng();\n-        let n: BigUint = rng.gen_biguint(137);\n+        let _n: BigUint = rng.gen_biguint(137);\n+        assert!(rng.gen_biguint(0).is_zero());\n     }\n }\n \n@@ -2056,7 +2071,7 @@ mod bigint_tests {\n     #[test]\n     fn test_rand() {\n         let mut rng = task_rng();\n-        let n: BigInt = rng.gen_bigint(137);\n+        let _n: BigInt = rng.gen_bigint(137);\n         assert!(rng.gen_bigint(0).is_zero());\n     }\n }"}]}