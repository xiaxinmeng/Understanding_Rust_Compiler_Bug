{"sha": "b5184e56a49652aadb279e42a4e55e7328071b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTg0ZTU2YTQ5NjUyYWFkYjI3OWU0MmE0ZTU1ZTczMjgwNzFiMzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-12T02:22:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-12T02:22:45Z"}, "message": "Rollup merge of #61348 - dronesforwork-forks:clone-from, r=KodrAus\n\nImplement Clone::clone_from for Option and Result\n\nSee https://github.com/rust-lang/rust/issues/28481", "tree": {"sha": "974034911ea77840547f5c40c434edabe6b262ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974034911ea77840547f5c40c434edabe6b262ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5184e56a49652aadb279e42a4e55e7328071b35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdAGH1CRBK7hj4Ov3rIwAAdHIIABGo2bQLGAx596otzPAygwv1\nJ+buPwUrXoYz0IHBuLyXMY5MBRUz+uHMKHt2XK3pI2Zj0kqhPu5dGSxnf5w3zxjx\nJ5NzO5XDGksTNYRObeiR29Uv7v0pzAtKHYkOPyeu8/rsVZi9OMsLCnoWqxJNsQTS\nPRilPtQNiHVP7byOIo53vaD7MNUSQVr+jvgU3lVzIHGw5RZiGXD0GYe/qC+kME5F\nAzbtqcMdvQGLPue62WZ6xtY4H8EIxwuEh99LDN22zh2uRKSivES3A9u8sWv7Z08X\nsqR7bkvBoybacnEPH52AFCegcUFUGZcWiprw1KmXdA0UqI0vf8ky3Rpi4CzI7CA=\n=fbO7\n-----END PGP SIGNATURE-----\n", "payload": "tree 974034911ea77840547f5c40c434edabe6b262ea\nparent a60a5db7de3107e7b91bd8a4006146b521066da4\nparent 67fd99589ad161fcd154cfdb0f33d349ec23896d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560306165 +0200\ncommitter GitHub <noreply@github.com> 1560306165 +0200\n\nRollup merge of #61348 - dronesforwork-forks:clone-from, r=KodrAus\n\nImplement Clone::clone_from for Option and Result\n\nSee https://github.com/rust-lang/rust/issues/28481\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5184e56a49652aadb279e42a4e55e7328071b35", "html_url": "https://github.com/rust-lang/rust/commit/b5184e56a49652aadb279e42a4e55e7328071b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5184e56a49652aadb279e42a4e55e7328071b35/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a60a5db7de3107e7b91bd8a4006146b521066da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a60a5db7de3107e7b91bd8a4006146b521066da4", "html_url": "https://github.com/rust-lang/rust/commit/a60a5db7de3107e7b91bd8a4006146b521066da4"}, {"sha": "67fd99589ad161fcd154cfdb0f33d349ec23896d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67fd99589ad161fcd154cfdb0f33d349ec23896d", "html_url": "https://github.com/rust-lang/rust/commit/67fd99589ad161fcd154cfdb0f33d349ec23896d"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "c75ecb059e8137c2c2552c85fccb04968bec4ad3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5184e56a49652aadb279e42a4e55e7328071b35/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5184e56a49652aadb279e42a4e55e7328071b35/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b5184e56a49652aadb279e42a4e55e7328071b35", "patch": "@@ -145,7 +145,7 @@ use crate::pin::Pin;\n // which basically means it must be `Option`.\n \n /// The `Option` type. See [the module level documentation](index.html) for more.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value\n@@ -1040,6 +1040,25 @@ fn expect_failed(msg: &str) -> ! {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: Clone> Clone for Option<T> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        match self {\n+            Some(x) => Some(x.clone()),\n+            None => None,\n+        }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, source: &Self) {\n+        match (self, source) {\n+            (Some(to), Some(from)) => to.clone_from(from),\n+            (to, from) => *to = from.clone(),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n     /// Returns [`None`][Option::None]."}, {"sha": "8a09877ce1f4be591140be8f90e75a4d2773cad5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b5184e56a49652aadb279e42a4e55e7328071b35/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5184e56a49652aadb279e42a4e55e7328071b35/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b5184e56a49652aadb279e42a4e55e7328071b35", "patch": "@@ -240,7 +240,7 @@ use crate::ops::{self, Deref};\n ///\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Err`]: enum.Result.html#variant.Err\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n@@ -1003,6 +1003,27 @@ fn unwrap_failed<E: fmt::Debug>(msg: &str, error: E) -> ! {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: Clone, E: Clone> Clone for Result<T, E> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        match self {\n+            Ok(x) => Ok(x.clone()),\n+            Err(x) => Err(x.clone()),\n+        }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, source: &Self) {\n+        match (self, source) {\n+            (Ok(to), Ok(from)) => to.clone_from(from),\n+            (Err(to), Err(from)) => to.clone_from(from),\n+            (to, from) => *to = from.clone(),\n+        }\n+    }\n+}\n+\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, E> IntoIterator for Result<T, E> {\n     type Item = T;"}]}