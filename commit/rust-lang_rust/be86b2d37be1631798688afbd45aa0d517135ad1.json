{"sha": "be86b2d37be1631798688afbd45aa0d517135ad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODZiMmQzN2JlMTYzMTc5ODY4OGFmYmQ0NWFhMGQ1MTcxMzVhZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T08:08:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:32:34Z"}, "message": "parse: recover on `fn foo() = expr;`", "tree": {"sha": "a95333f6ca04fea7365e6d5e21f165188119572b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95333f6ca04fea7365e6d5e21f165188119572b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be86b2d37be1631798688afbd45aa0d517135ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be86b2d37be1631798688afbd45aa0d517135ad1", "html_url": "https://github.com/rust-lang/rust/commit/be86b2d37be1631798688afbd45aa0d517135ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be86b2d37be1631798688afbd45aa0d517135ad1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379f3181def3021818b7d8c3d69a512c290d9dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/379f3181def3021818b7d8c3d69a512c290d9dc9", "html_url": "https://github.com/rust-lang/rust/commit/379f3181def3021818b7d8c3d69a512c290d9dc9"}], "stats": {"total": 157, "additions": 156, "deletions": 1}, "files": [{"sha": "8263bd879ad867d4ef4f3ba075b4078ad948e50f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=be86b2d37be1631798688afbd45aa0d517135ad1", "patch": "@@ -1412,10 +1412,25 @@ impl<'a> Parser<'a> {\n     /// or e.g. a block when the function is a provided one.\n     fn parse_fn_body(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, Option<P<Block>>> {\n         let (inner_attrs, body) = if self.check(&token::Semi) {\n-            self.bump();\n+            self.bump(); // `;`\n             (Vec::new(), None)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_inner_attrs_and_block().map(|(attrs, body)| (attrs, Some(body)))?\n+        } else if self.token.kind == token::Eq {\n+            // Recover `fn foo() = $expr;`.\n+            self.bump(); // `=`\n+            let eq_sp = self.prev_token.span;\n+            let _ = self.parse_expr()?;\n+            self.expect_semi()?; // `;`\n+            let span = eq_sp.to(self.prev_token.span);\n+            self.struct_span_err(span, \"function body cannot be `= expression;`\")\n+                .multipart_suggestion(\n+                    \"surround the expression with `{` and `}` instead of `=` and `;`\",\n+                    vec![(eq_sp, \"{\".to_string()), (self.prev_token.span, \" }\".to_string())],\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            (Vec::new(), Some(self.mk_block_err(span)))\n         } else {\n             return self.expected_semi_or_open_brace();\n         };"}, {"sha": "09444079365bf0df973c36100c58f67986add58c", "filename": "src/test/ui/parser/fn-body-eq-expr-semi.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs?ref=be86b2d37be1631798688afbd45aa0d517135ad1", "patch": "@@ -0,0 +1,23 @@\n+fn main() {}\n+\n+fn syntax() {\n+    fn foo() = 42; //~ ERROR function body cannot be `= expression;`\n+    fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`\n+}\n+\n+extern {\n+    fn foo() = 42; //~ ERROR function body cannot be `= expression;`\n+    //~^ ERROR incorrect function inside `extern` block\n+    fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`\n+    //~^ ERROR incorrect function inside `extern` block\n+}\n+\n+trait Foo {\n+    fn foo() = 42; //~ ERROR function body cannot be `= expression;`\n+    fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`\n+}\n+\n+impl Foo for () {\n+    fn foo() = 42; //~ ERROR function body cannot be `= expression;`\n+    fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`\n+}"}, {"sha": "739133e0b408b825f0b36e536aa1f37fe1cfd899", "filename": "src/test/ui/parser/fn-body-eq-expr-semi.stderr", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be86b2d37be1631798688afbd45aa0d517135ad1/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr?ref=be86b2d37be1631798688afbd45aa0d517135ad1", "patch": "@@ -0,0 +1,117 @@\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:4:14\n+   |\n+LL |     fn foo() = 42;\n+   |              ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn foo() { 42 }\n+   |              ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:5:20\n+   |\n+LL |     fn bar() -> u8 = 42;\n+   |                    ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn bar() -> u8 { 42 }\n+   |                    ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:9:14\n+   |\n+LL |     fn foo() = 42;\n+   |              ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn foo() { 42 }\n+   |              ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:11:20\n+   |\n+LL |     fn bar() -> u8 = 42;\n+   |                    ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn bar() -> u8 { 42 }\n+   |                    ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:16:14\n+   |\n+LL |     fn foo() = 42;\n+   |              ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn foo() { 42 }\n+   |              ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:17:20\n+   |\n+LL |     fn bar() -> u8 = 42;\n+   |                    ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn bar() -> u8 { 42 }\n+   |                    ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:21:14\n+   |\n+LL |     fn foo() = 42;\n+   |              ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn foo() { 42 }\n+   |              ^    ^\n+\n+error: function body cannot be `= expression;`\n+  --> $DIR/fn-body-eq-expr-semi.rs:22:20\n+   |\n+LL |     fn bar() -> u8 = 42;\n+   |                    ^^^^^\n+   |\n+help: surround the expression with `{` and `}` instead of `=` and `;`\n+   |\n+LL |     fn bar() -> u8 { 42 }\n+   |                    ^    ^\n+\n+error: incorrect function inside `extern` block\n+  --> $DIR/fn-body-eq-expr-semi.rs:9:8\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |     fn foo() = 42;\n+   |        ^^^   ----- help: remove the invalid body: `;`\n+   |        |\n+   |        cannot have a body\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: incorrect function inside `extern` block\n+  --> $DIR/fn-body-eq-expr-semi.rs:11:8\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+...\n+LL |     fn bar() -> u8 = 42;\n+   |        ^^^         ----- help: remove the invalid body: `;`\n+   |        |\n+   |        cannot have a body\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 10 previous errors\n+"}]}