{"sha": "ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMzQ5YmVmMjRkYzZmYWY0MTk3MGJjN2RlMTdkMjJiY2U2YTdjZmI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T02:32:12Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T23:44:44Z"}, "message": "Unwrap Visibility fields\n\nThere's not really any reason to not have the visibility default to\ninherited, and this saves us the trouble of checking everywhere for\nwhether we have a visibility or not.", "tree": {"sha": "6a86a38c0c67d4f1a56c08af2a93e39f20e0410f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a86a38c0c67d4f1a56c08af2a93e39f20e0410f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "html_url": "https://github.com/rust-lang/rust/commit/ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b27efa00799f984b7ebc50d37a2d571db9235f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b27efa00799f984b7ebc50d37a2d571db9235f", "html_url": "https://github.com/rust-lang/rust/commit/04b27efa00799f984b7ebc50d37a2d571db9235f"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "18a84cd0eeb76fe24c0b7eaee03f1b53324c0b83", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 source: Span::empty(),\n                 name: None,\n                 attrs: Default::default(),\n-                visibility: None,\n+                visibility: Inherited,\n                 def_id: self.cx.next_def_id(param_env_def_id.krate),\n                 stability: None,\n                 deprecation: None,"}, {"sha": "4cd1cc1a1cf50bd265a841927e22302a3e1fa8fd", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     source: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                     name: None,\n                     attrs: Default::default(),\n-                    visibility: None,\n+                    visibility: Inherited,\n                     def_id: self.cx.next_def_id(impl_def_id.krate),\n                     stability: None,\n                     deprecation: None,"}, {"sha": "031e77ff1dbe0d1da41b7a9a4ec55efd36b6ee7a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -131,7 +131,7 @@ pub fn try_inline(\n         name: Some(name.clean(cx)),\n         attrs,\n         inner,\n-        visibility: Some(clean::Public),\n+        visibility: clean::Public,\n         stability: cx.tcx.lookup_stability(did).clean(cx),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n@@ -418,7 +418,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n         source: tcx.def_span(did).clean(cx),\n         name: None,\n         attrs,\n-        visibility: Some(clean::Inherited),\n+        visibility: clean::Inherited,\n         stability: tcx.lookup_stability(did).clean(cx),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,"}, {"sha": "197c09ba759e7d2cc9d9a91f33bb1d1b12e9f5a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -187,7 +187,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n                 source: Span::empty(),\n                 name: Some(prim.to_url_str().to_string()),\n                 attrs: attrs.clone(),\n-                visibility: Some(Public),\n+                visibility: Public,\n                 stability: get_stability(cx, def_id),\n                 deprecation: get_deprecation(cx, def_id),\n                 def_id,\n@@ -199,7 +199,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n                 source: Span::empty(),\n                 name: Some(kw.clone()),\n                 attrs: attrs,\n-                visibility: Some(Public),\n+                visibility: Public,\n                 stability: get_stability(cx, def_id),\n                 deprecation: get_deprecation(cx, def_id),\n                 def_id,\n@@ -361,7 +361,7 @@ pub struct Item {\n     pub name: Option<String>,\n     pub attrs: Attributes,\n     pub inner: ItemEnum,\n-    pub visibility: Option<Visibility>,\n+    pub visibility: Visibility,\n     pub def_id: DefId,\n     pub stability: Option<Stability>,\n     pub deprecation: Option<Deprecation>,\n@@ -2311,7 +2311,7 @@ impl Clean<Item> for hir::TraitItem {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             def_id: local_did,\n-            visibility: None,\n+            visibility: Visibility::Inherited,\n             stability: get_stability(cx, local_did),\n             deprecation: get_deprecation(cx, local_did),\n             inner,\n@@ -2496,7 +2496,7 @@ impl Clean<Item> for ty::AssocItem {\n \n         let visibility = match self.container {\n             ty::ImplContainer(_) => self.vis.clean(cx),\n-            ty::TraitContainer(_) => None,\n+            ty::TraitContainer(_) => Inherited,\n         };\n \n         Item {\n@@ -3293,9 +3293,9 @@ pub enum Visibility {\n     Restricted(DefId, Path),\n }\n \n-impl Clean<Option<Visibility>> for hir::Visibility {\n-    fn clean(&self, cx: &DocContext<'_>) -> Option<Visibility> {\n-        Some(match self.node {\n+impl Clean<Visibility> for hir::Visibility {\n+    fn clean(&self, cx: &DocContext<'_>) -> Visibility {\n+        match self.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n             hir::VisibilityKind::Inherited => Visibility::Inherited,\n             hir::VisibilityKind::Crate(_) => Visibility::Crate,\n@@ -3304,13 +3304,13 @@ impl Clean<Option<Visibility>> for hir::Visibility {\n                 let did = register_res(cx, path.res);\n                 Visibility::Restricted(did, path)\n             }\n-        })\n+        }\n     }\n }\n \n-impl Clean<Option<Visibility>> for ty::Visibility {\n-    fn clean(&self, _: &DocContext<'_>) -> Option<Visibility> {\n-        Some(if *self == ty::Visibility::Public { Public } else { Inherited })\n+impl Clean<Visibility> for ty::Visibility {\n+    fn clean(&self, _: &DocContext<'_>) -> Visibility {\n+        if *self == ty::Visibility::Public { Public } else { Inherited }\n     }\n }\n \n@@ -3427,7 +3427,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: None,\n+            visibility: Inherited,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n@@ -3470,7 +3470,7 @@ impl Clean<Item> for ty::VariantDef {\n             name: Some(self.ident.clean(cx)),\n             attrs: inline::load_attrs(cx, self.def_id).clean(cx),\n             source: cx.tcx.def_span(self.def_id).clean(cx),\n-            visibility: Some(Inherited),\n+            visibility: Inherited,\n             def_id: self.def_id,\n             inner: VariantItem(Variant { kind }),\n             stability: get_stability(cx, self.def_id),\n@@ -4333,7 +4333,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n             name: Some(name.clone()),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: Some(Public),\n+            visibility: Public,\n             stability: cx.stability(self.hid).clean(cx),\n             deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: self.def_id,\n@@ -4361,7 +4361,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: Some(Public),\n+            visibility: Public,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),"}, {"sha": "3c62977bd77d37f7ff045fe8bd8660daf9cf6461", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -111,7 +111,7 @@ impl Buffer {\n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n #[derive(Copy, Clone)]\n-pub struct VisSpace<'a>(pub &'a Option<clean::Visibility>);\n+pub struct VisSpace<'a>(pub &'a clean::Visibility);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n #[derive(Copy, Clone)]\n@@ -1034,11 +1034,7 @@ impl Function<'_> {\n \n impl<'a> fmt::Display for VisSpace<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let Some(v) = self.0 {\n-            fmt::Display::fmt(&v.print_with_space(), f)\n-        } else {\n-            Ok(())\n-        }\n+        fmt::Display::fmt(&self.0.print_with_space(), f)\n     }\n }\n "}, {"sha": "32fa2daa026f7cf2f8bc39d896263956f3b2354a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -1511,7 +1511,7 @@ impl DocFolder for Cache {\n                 self.paths.insert(item.def_id, (stack, ItemType::Enum));\n             }\n \n-            clean::PrimitiveItem(..) if item.visibility.is_some() => {\n+            clean::PrimitiveItem(..) => {\n                 self.add_aliases(&item);\n                 self.paths.insert(item.def_id, (self.stack.clone(),\n                                                 item.type_()));\n@@ -4306,8 +4306,7 @@ fn get_methods(\n ) -> Vec<String> {\n     i.items.iter().filter_map(|item| {\n         match item.name {\n-            // Maybe check with clean::Visibility::Public as well?\n-            Some(ref name) if !name.is_empty() && item.visibility.is_some() && item.is_method() => {\n+            Some(ref name) if !name.is_empty() && item.is_method() => {\n                 if !for_deref || should_render_item(item, deref_mut) {\n                     Some(format!(\"<a href=\\\"#{}\\\">{}</a>\",\n                                  get_next_url(used_links, format!(\"method.{}\", name)),"}, {"sha": "f6560218a78c82935454dd7b9d5fa88529b576b7", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec349bef24dc6faf41970bc7de17d22bce6a7cfb/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=ec349bef24dc6faf41970bc7de17d22bce6a7cfb", "patch": "@@ -185,13 +185,13 @@ impl<'a> DocFolder for Stripper<'a> {\n             }\n \n             clean::StructFieldItem(..) => {\n-                if i.visibility != Some(clean::Public) {\n+                if i.visibility != clean::Public {\n                     return StripItem(i).strip();\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n-                if i.def_id.is_local() && i.visibility != Some(clean::Public) {\n+                if i.def_id.is_local() && i.visibility != clean::Public {\n                     debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n@@ -299,7 +299,7 @@ impl DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match i.inner {\n             clean::ExternCrateItem(..) | clean::ImportItem(..)\n-                if i.visibility != Some(clean::Public) =>\n+                if i.visibility != clean::Public =>\n             {\n                 None\n             }"}]}