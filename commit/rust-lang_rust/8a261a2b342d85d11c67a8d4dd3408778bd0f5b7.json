{"sha": "8a261a2b342d85d11c67a8d4dd3408778bd0f5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjYxYTJiMzQyZDg1ZDExYzY3YThkNGRkMzQwODc3OGJkMGY1Yjc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-12T11:40:50Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-12T12:00:38Z"}, "message": "Simplify SyncOnceCell's `take` and `drop`.", "tree": {"sha": "4736708ca29c5fa7ceddbc73b6a6501707b1684c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4736708ca29c5fa7ceddbc73b6a6501707b1684c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7", "html_url": "https://github.com/rust-lang/rust/commit/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03", "html_url": "https://github.com/rust-lang/rust/commit/2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03"}], "stats": {"total": 39, "additions": 13, "deletions": 26}, "files": [{"sha": "e0095e64faf312502398333fc434f609b437ef8e", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a261a2b342d85d11c67a8d4dd3408778bd0f5b7/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=8a261a2b342d85d11c67a8d4dd3408778bd0f5b7", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     cell::{Cell, UnsafeCell},\n     fmt,\n     marker::PhantomData,\n-    mem::{self, MaybeUninit},\n+    mem::MaybeUninit,\n     ops::{Deref, Drop},\n     panic::{RefUnwindSafe, UnwindSafe},\n     sync::Once,\n@@ -316,13 +316,7 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(mut self) -> Option<T> {\n-        // SAFETY: Safe because we immediately free `self` without dropping\n-        let inner = unsafe { self.take_inner() };\n-\n-        // Don't drop this `SyncOnceCell`. We just moved out one of the fields, but didn't set\n-        // the state to uninitialized.\n-        mem::forget(self);\n-        inner\n+        self.take()\n     }\n \n     /// Takes the value out of this `SyncOnceCell`, moving it back to an uninitialized state.\n@@ -348,22 +342,12 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn take(&mut self) -> Option<T> {\n-        mem::take(self).into_inner()\n-    }\n-\n-    /// Takes the wrapped value out of a `SyncOnceCell`.\n-    /// Afterwards the cell is no longer initialized.\n-    ///\n-    /// Safety: The cell must now be free'd WITHOUT dropping. No other usages of the cell\n-    /// are valid. Only used by `into_inner` and `drop`.\n-    unsafe fn take_inner(&mut self) -> Option<T> {\n-        // The mutable reference guarantees there are no other threads that can observe us\n-        // taking out the wrapped value.\n-        // Right after this function `self` is supposed to be freed, so it makes little sense\n-        // to atomically set the state to uninitialized.\n         if self.is_initialized() {\n-            let value = mem::replace(&mut self.value, UnsafeCell::new(MaybeUninit::uninit()));\n-            Some(value.into_inner().assume_init())\n+            self.once = Once::new();\n+            // SAFETY: `self.value` is initialized and contains a valid `T`.\n+            // `self.once` is reset, so `is_initialized()` will be false again\n+            // which prevents the value from being read twice.\n+            unsafe { Some((&mut *self.value.get()).assume_init_read()) }\n         } else {\n             None\n         }\n@@ -416,9 +400,12 @@ impl<T> SyncOnceCell<T> {\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n     fn drop(&mut self) {\n-        // SAFETY: The cell is being dropped, so it can't be accessed again.\n-        // We also don't touch the `T`, which validates our usage of #[may_dangle].\n-        unsafe { self.take_inner() };\n+        if self.is_initialized() {\n+            // Safety: The cell is initialized and being dropped, so it can't\n+            // be accessed again. We also don't touch the `T` other than\n+            // dropping it, which validates our usage of #[may_dangle].\n+            unsafe { (&mut *self.value.get()).assume_init_drop() };\n+        }\n     }\n }\n "}]}