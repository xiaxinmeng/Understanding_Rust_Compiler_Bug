{"sha": "29abe5ec717bd58b175100cfabe833c1500c8498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWJlNWVjNzE3YmQ1OGIxNzUxMDBjZmFiZTgzM2MxNTAwYzg0OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-27T17:16:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-27T17:16:36Z"}, "message": "Auto merge of #34856 - jseyfried:refactor_reset_tls, r=nrc\n\nAvoid reseting the thread local interner at the beginning of `phase_1_parse_input`\n\nThe thread local interner is used before `phase_1_parse_input` to create `InternedString`s, which currently wrap `Rc<String>`s. Once `InternedString` is refactored to be an interned string id (like `Name`), resetting will invalidate everything that was interned before `phase_1_parse_input`.\n\nThe resets were only useful for the `rusti` project, which can now use `driver::reset_thread_local_state`.\n\nr? @nrc", "tree": {"sha": "8bafabbbfacdaf87d7eb92fb4fa409a208ddb940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bafabbbfacdaf87d7eb92fb4fa409a208ddb940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29abe5ec717bd58b175100cfabe833c1500c8498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29abe5ec717bd58b175100cfabe833c1500c8498", "html_url": "https://github.com/rust-lang/rust/commit/29abe5ec717bd58b175100cfabe833c1500c8498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29abe5ec717bd58b175100cfabe833c1500c8498/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373b8437b205cce01a19e7cdef17a50ff7ec84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373b8437b205cce01a19e7cdef17a50ff7ec84a", "html_url": "https://github.com/rust-lang/rust/commit/a373b8437b205cce01a19e7cdef17a50ff7ec84a"}, {"sha": "a279f2f62d0b04af02f5a9e356d380f2ae6216d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a279f2f62d0b04af02f5a9e356d380f2ae6216d5", "html_url": "https://github.com/rust-lang/rust/commit/a279f2f62d0b04af02f5a9e356d380f2ae6216d5"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "9a94cc16bfe8ceda4709be95262b1a6ff4cdc001", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29abe5ec717bd58b175100cfabe833c1500c8498/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29abe5ec717bd58b175100cfabe833c1500c8498/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=29abe5ec717bd58b175100cfabe833c1500c8498", "patch": "@@ -478,10 +478,6 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n                                cfg: ast::CrateConfig,\n                                input: &Input)\n                                -> PResult<'a, ast::Crate> {\n-    // These may be left in an incoherent state after a previous compile.\n-    syntax::ext::hygiene::reset_hygiene_data();\n-    // `clear_ident_interner` can be used to free memory, but it does not restore the initial state.\n-    token::reset_ident_interner();\n     let continue_after_error = sess.opts.continue_parse_after_error;\n     sess.diagnostic().set_continue_after_error(continue_after_error);\n \n@@ -1298,3 +1294,11 @@ pub fn build_output_filenames(input: &Input,\n         }\n     }\n }\n+\n+// For use by the `rusti` project (https://github.com/murarth/rusti).\n+pub fn reset_thread_local_state() {\n+    // These may be left in an incoherent state after a previous compile.\n+    syntax::ext::hygiene::reset_hygiene_data();\n+    // `clear_ident_interner` can be used to free memory, but it does not restore the initial state.\n+    token::reset_ident_interner();\n+}"}, {"sha": "6da87fca3f35606fe3398f127a626adc751dd763", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29abe5ec717bd58b175100cfabe833c1500c8498/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29abe5ec717bd58b175100cfabe833c1500c8498/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=29abe5ec717bd58b175100cfabe833c1500c8498", "patch": "@@ -49,7 +49,8 @@ struct Baz<'x> {\n \n impl<'a> Baz<'a> {\n     fn baz2<'b>(&self, x: &isize) -> (&'b isize, &'b isize) {\n-        //~^ HELP consider using an explicit lifetime parameter as shown: fn baz2<'b>(&self, x: &'a isize) -> (&'a isize, &'a isize)\n+        //~^ HELP consider using an explicit lifetime parameter as shown: fn baz2<'b>(&self, x: &'\n+        // FIXME #35038: The above suggestion is different on Linux and Mac.\n         (self.bar, x) //~ ERROR E0312\n         //~^ ERROR E0312\n     }"}]}