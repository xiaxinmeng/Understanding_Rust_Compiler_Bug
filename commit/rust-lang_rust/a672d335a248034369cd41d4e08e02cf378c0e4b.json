{"sha": "a672d335a248034369cd41d4e08e02cf378c0e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzJkMzM1YTI0ODAzNDM2OWNkNDFkNGUwOGUwMmNmMzc4YzBlNGI=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-03-06T17:08:46Z"}, "committer": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-03-06T17:08:46Z"}, "message": "Implement new lint: if_then_some_else_none", "tree": {"sha": "4f45527a2edba83e2ef058dcdb009d1faae11941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f45527a2edba83e2ef058dcdb009d1faae11941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a672d335a248034369cd41d4e08e02cf378c0e4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEEgbkHgdnD1idvtMJ0QJ1+7h56cWoFAmBDtx4UHHl1c3VrdGFu\nQG1hZ3Vyby5kZXYACgkQQJ1+7h56cWq5NhAA3ylcB02tUp95Z4X12hLbM7GI5oTp\nwzsWLGS/MTO2mmDp/3zxIe9vhqH8V7vmIdWq9By8Lfa+fmPXjc+URM49zT8RGei4\nB2Gzf8FaoU4AdPKQAcES16r/XGKvbo24KPwjl1DSkK0fVVmB2BodZjnd5CQTSsQ7\nn2Nn6xdkUXiOUqpxEO4IXvDreF7n8mhEVaksOufhrivoXVnR/tQl0Oq3u+9ervg1\nrprnGqCArW4bso1fZQBhPDq66QiBG+Kkw2BPZVr5yCo//M7pCOqJYRp+9g3KTVgH\nbi9cfQSr58qhGfG2FtdIAPjx2KwBassyQqKZH8oWnUut3OcEmKNw6GvfdUGOUpHI\nan71psS14+lgK+pSFV3NWSvG/djO2Hto2N1anM8yRNUE9ckdZy9rE97rprKtX1D5\n5Tl9W9SFcS8bSrbPMB6ou8cZbWaK6OX5SuJvCIoitXkz8vv/PxaXPBsYvve2HxU7\nLJZEwsRpLb9SbDdHCB94yqxngEhdKArmUS51or2qBNXieLzhN3lJu8ndrJth6syM\nzq0jfLPwzMqw6qEYCMiOoy9+RZLsVWS8RmtRP+3yWbMSB5yNwl5C+3K8dLmMrUja\n1mSM747epQR3ETQCAwuTVTxKM1J2mhYzQXf0ubS7RjKeWeVQhC71g6CK2+a1uwQ9\ndV5G5jJuDRNE8dQ=\n=6pNN\n-----END PGP SIGNATURE-----", "payload": "tree 4f45527a2edba83e2ef058dcdb009d1faae11941\nparent 0153679a4e92a12aa75e95302b94e5a799540913\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1615050526 +0900\ncommitter Yusuke Tanaka <yusuktan@maguro.dev> 1615050526 +0900\n\nImplement new lint: if_then_some_else_none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a672d335a248034369cd41d4e08e02cf378c0e4b", "html_url": "https://github.com/rust-lang/rust/commit/a672d335a248034369cd41d4e08e02cf378c0e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a672d335a248034369cd41d4e08e02cf378c0e4b/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0153679a4e92a12aa75e95302b94e5a799540913", "url": "https://api.github.com/repos/rust-lang/rust/commits/0153679a4e92a12aa75e95302b94e5a799540913", "html_url": "https://github.com/rust-lang/rust/commit/0153679a4e92a12aa75e95302b94e5a799540913"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "f7916511edfe7a7e662962ae971b68cd2a531af1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a672d335a248034369cd41d4e08e02cf378c0e4b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a672d335a248034369cd41d4e08e02cf378c0e4b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a672d335a248034369cd41d4e08e02cf378c0e4b", "patch": "@@ -2103,6 +2103,7 @@ Released 2018-09-13\n [`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n+[`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher"}, {"sha": "0bd393f899688deaafdff86a5f2ea65f933bb345", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a672d335a248034369cd41d4e08e02cf378c0e4b/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a672d335a248034369cd41d4e08e02cf378c0e4b/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=a672d335a248034369cd41d4e08e02cf378c0e4b", "patch": "@@ -0,0 +1,88 @@\n+use crate::utils;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for if-else that could be written to `bool::then`.\n+    ///\n+    /// **Why is this bad?** Looks a little redundant. Using `bool::then` helps it have less lines of code.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = if v.is_empty() {\n+    ///     println!(\"true!\");\n+    ///     Some(42)\n+    /// } else {\n+    ///     None\n+    /// };\n+    /// ```\n+    ///\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = v.is_empty().then(|| {\n+    ///     println!(\"true!\");\n+    ///     42\n+    /// });\n+    /// ```\n+    pub IF_THEN_SOME_ELSE_NONE,\n+    restriction,\n+    \"Finds if-else that could be written using `bool::then`\"\n+}\n+\n+declare_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n+\n+impl LateLintPass<'_> for IfThenSomeElseNone {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        // We only care about the top-most `if` in the chain\n+        if utils::parent_node_is_if_expr(expr, cx) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::If(ref cond, ref then, Some(ref els)) = expr.kind;\n+            if let ExprKind::Block(ref then_block, _) = then.kind;\n+            if let Some(ref then_expr) = then_block.expr;\n+            if let ExprKind::Call(ref then_call, [then_arg]) = then_expr.kind;\n+            if let ExprKind::Path(ref then_call_qpath) = then_call.kind;\n+            if utils::match_qpath(then_call_qpath, &utils::paths::OPTION_SOME);\n+            if let ExprKind::Block(ref els_block, _) = els.kind;\n+            if els_block.stmts.is_empty();\n+            if let Some(ref els_expr) = els_block.expr;\n+            if let ExprKind::Path(ref els_call_qpath) = els_expr.kind;\n+            if utils::match_qpath(els_call_qpath, &utils::paths::OPTION_NONE);\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let cond_snip = utils::snippet_with_applicability(cx, cond.span, \"[condition]\", &mut applicability);\n+                let arg_snip = utils::snippet_with_applicability(cx, then_arg.span, \"\", &mut applicability);\n+                let sugg = format!(\n+                    \"{}.then(|| {{ /* snippet */ {} }})\",\n+                    cond_snip,\n+                    arg_snip,\n+                );\n+                utils::span_lint_and_sugg(\n+                    cx,\n+                    IF_THEN_SOME_ELSE_NONE,\n+                    expr.span,\n+                    \"this could be simplified with `bool::then`\",\n+                    \"try this\",\n+                    sugg,\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "9a7dedf416e4c28795ce8d46a89b6d99a65ac068", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a672d335a248034369cd41d4e08e02cf378c0e4b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a672d335a248034369cd41d4e08e02cf378c0e4b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a672d335a248034369cd41d4e08e02cf378c0e4b", "patch": "@@ -230,6 +230,7 @@ mod identity_op;\n mod if_let_mutex;\n mod if_let_some_result;\n mod if_not_else;\n+mod if_then_some_else_none;\n mod implicit_return;\n mod implicit_saturating_sub;\n mod inconsistent_struct_constructor;\n@@ -667,6 +668,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &if_let_mutex::IF_LET_MUTEX,\n         &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n+        &if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n         &implicit_return::IMPLICIT_RETURN,\n         &implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n         &inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n@@ -1282,6 +1284,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n+    store.register_late_pass(|| box if_then_some_else_none::IfThenSomeElseNone);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1297,6 +1300,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n+        LintId::of(&if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),"}, {"sha": "b19e2a50010f447b43353dded63f635166038eb6", "filename": "tests/ui/if_then_some_else_none.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a672d335a248034369cd41d4e08e02cf378c0e4b/tests%2Fui%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a672d335a248034369cd41d4e08e02cf378c0e4b/tests%2Fui%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.rs?ref=a672d335a248034369cd41d4e08e02cf378c0e4b", "patch": "@@ -0,0 +1,66 @@\n+#![warn(clippy::if_then_some_else_none)]\n+\n+fn main() {\n+    // Should issue an error.\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(\"foo\")\n+    } else {\n+        None\n+    };\n+\n+    // Should not issue an error since the `else` block has a statement besides `None`.\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(\"foo\")\n+    } else {\n+        eprintln!(\"false...\");\n+        None\n+    };\n+\n+    // Should not issue an error since there are more than 2 blocks in the if-else chain.\n+    let _ = if foo() {\n+        println!(\"foo true!\");\n+        Some(\"foo\")\n+    } else if bar() {\n+        println!(\"bar true!\");\n+        Some(\"bar\")\n+    } else {\n+        None\n+    };\n+\n+    let _ = if foo() {\n+        println!(\"foo true!\");\n+        Some(\"foo\")\n+    } else {\n+        bar().then(|| {\n+            println!(\"bar true!\");\n+            \"bar\"\n+        })\n+    };\n+\n+    // Should not issue an error since the `then` block has `None`, not `Some`.\n+    let _ = if foo() { None } else { Some(\"foo is false\") };\n+\n+    // Should not issue an error since the `else` block doesn't use `None` directly.\n+    let _ = if foo() { Some(\"foo is true\") } else { into_none() };\n+\n+    // Should not issue an error since the `then` block doesn't use `Some` directly.\n+    let _ = if foo() { into_some(\"foo\") } else { None };\n+}\n+\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n+\n+fn bar() -> bool {\n+    unimplemented!()\n+}\n+\n+fn into_some<T>(v: T) -> Option<T> {\n+    Some(v)\n+}\n+\n+fn into_none<T>() -> Option<T> {\n+    None\n+}"}, {"sha": "7ad9c4ce79dfe9fc6f37554acdc313eabfabe134", "filename": "tests/ui/if_then_some_else_none.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a672d335a248034369cd41d4e08e02cf378c0e4b/tests%2Fui%2Fif_then_some_else_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a672d335a248034369cd41d4e08e02cf378c0e4b/tests%2Fui%2Fif_then_some_else_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.stderr?ref=a672d335a248034369cd41d4e08e02cf378c0e4b", "patch": "@@ -0,0 +1,16 @@\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:5:13\n+   |\n+LL |       let _ = if foo() {\n+   |  _____________^\n+LL | |         println!(\"true!\");\n+LL | |         Some(\"foo\")\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^ help: try this: `foo().then(|| { /* snippet */ \"foo\" })`\n+   |\n+   = note: `-D clippy::if-then-some-else-none` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}