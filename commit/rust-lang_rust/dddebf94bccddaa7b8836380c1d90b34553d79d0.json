{"sha": "dddebf94bccddaa7b8836380c1d90b34553d79d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGViZjk0YmNjZGRhYTdiODgzNjM4MGMxZDkwYjM0NTUzZDc5ZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-11T10:25:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-11T10:25:53Z"}, "message": "Auto merge of #86116 - FabianWolff:issue-86100, r=varkor\n\nSuggest a trailing comma if a 1-tuple is expected and a parenthesized expression is found\n\nThis pull request fixes #86100. The following code:\n```rust\nfn main() {\n    let t: (i32,) = (1);\n}\n```\ncurrently produces:\n```\nwarning: unnecessary parentheses around assigned value\n --> test.rs:2:21\n  |\n2 |     let t: (i32,) = (1);\n  |                     ^^^ help: remove these parentheses\n  |\n  = note: `#[warn(unused_parens)]` on by default\n\nerror[E0308]: mismatched types\n --> test.rs:2:21\n  |\n2 |     let t: (i32,) = (1);\n  |            ------   ^^^ expected tuple, found integer\n  |            |\n  |            expected due to this\n  |\n  = note: expected tuple `(i32,)`\n              found type `{integer}`\n\nerror: aborting due to previous error; 1 warning emitted\n```\nWith my changes, I get the same warning and the following error:\n```\nerror[E0308]: mismatched types\n --> test.rs:2:21\n  |\n2 |     let t: (i32,) = (1);\n  |            ------   ^^^ expected tuple, found integer\n  |            |\n  |            expected due to this\n  |\n  = note: expected tuple `(i32,)`\n              found type `{integer}`\nhelp: use a trailing comma to create a tuple with one element\n  |\n2 |     let t: (i32,) = (1,);\n  |                     ^^^^\n```\ni.e. I have added a suggestion to add a trailing comma to create a 1-tuple. This suggestion is only issued if a 1-tuple is expected and the expression (`(1)` in the example above) is surrounded by parentheses and does not already have a tuple type. In this situation, I'd say that it is pretty likely that the user meant to create a tuple.", "tree": {"sha": "791e02b5df88211ddfaa1131936691bf4818c5db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791e02b5df88211ddfaa1131936691bf4818c5db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddebf94bccddaa7b8836380c1d90b34553d79d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddebf94bccddaa7b8836380c1d90b34553d79d0", "html_url": "https://github.com/rust-lang/rust/commit/dddebf94bccddaa7b8836380c1d90b34553d79d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddebf94bccddaa7b8836380c1d90b34553d79d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ba81059e15b3466c71fe5b5bf2418702dd1fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ba81059e15b3466c71fe5b5bf2418702dd1fd1", "html_url": "https://github.com/rust-lang/rust/commit/66ba81059e15b3466c71fe5b5bf2418702dd1fd1"}, {"sha": "6206247335619ac83550fae2013ead4e66b454d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6206247335619ac83550fae2013ead4e66b454d1", "html_url": "https://github.com/rust-lang/rust/commit/6206247335619ac83550fae2013ead4e66b454d1"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "e3a79fe2653305da6414187b0301b48d9f660ad0", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dddebf94bccddaa7b8836380c1d90b34553d79d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddebf94bccddaa7b8836380c1d90b34553d79d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dddebf94bccddaa7b8836380c1d90b34553d79d0", "patch": "@@ -64,6 +64,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n+use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n@@ -1965,7 +1966,33 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n             FailureCode::Error0308(failure_str) => {\n-                struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str)\n+                let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n+                if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n+                    trace.values\n+                {\n+                    // If a tuple of length one was expected and the found expression has\n+                    // parentheses around it, perhaps the user meant to write `(expr,)` to\n+                    // build a tuple (issue #86100)\n+                    match (expected.kind(), found.kind()) {\n+                        (ty::Tuple(_), ty::Tuple(_)) => {}\n+                        (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('(').and_then(|s| s.strip_suffix(')'))\n+                                {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"use a trailing comma to create a tuple with one element\",\n+                                        format!(\"({},)\", code),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                err\n             }\n             FailureCode::Error0644(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0644, \"{}\", failure_str)"}, {"sha": "fa9d1a88928cdf727a3a344910fa001668a559d0", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dddebf94bccddaa7b8836380c1d90b34553d79d0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddebf94bccddaa7b8836380c1d90b34553d79d0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs?ref=dddebf94bccddaa7b8836380c1d90b34553d79d0", "patch": "@@ -0,0 +1,25 @@\n+// Tests that a suggestion is issued for type mismatch errors when a\n+// 1-tuple is expected and a parenthesized expression of non-tuple\n+// type is supplied.\n+\n+fn foo<T>(_t: (T,)) {}\n+struct S { _s: (String,) }\n+\n+fn main() {\n+    let _x: (i32,) = (5);\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    foo((Some(3)));\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    let _s = S { _s: (\"abc\".to_string()) };\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    // Do not issue the suggestion if the found type is already a tuple.\n+    let t = (1, 2);\n+    let _x: (i32,) = (t);\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "575379690b46f1b877c1bb47e2f13bef3a360055", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dddebf94bccddaa7b8836380c1d90b34553d79d0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dddebf94bccddaa7b8836380c1d90b34553d79d0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=dddebf94bccddaa7b8836380c1d90b34553d79d0", "patch": "@@ -0,0 +1,55 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:9:22\n+   |\n+LL |     let _x: (i32,) = (5);\n+   |             ------   ^^^ expected tuple, found integer\n+   |             |\n+   |             expected due to this\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _x: (i32,) = (5,);\n+   |                      ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n+   |\n+LL |     foo((Some(3)));\n+   |         ^^^^^^^^^ expected tuple, found enum `Option`\n+   |\n+   = note: expected tuple `(_,)`\n+               found enum `Option<{integer}>`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     foo((Some(3),));\n+   |         ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:17:22\n+   |\n+LL |     let _s = S { _s: (\"abc\".to_string()) };\n+   |                      ^^^^^^^^^^^^^^^^^^^ expected tuple, found struct `String`\n+   |\n+   = note: expected tuple `(String,)`\n+             found struct `String`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _s = S { _s: (\"abc\".to_string(),) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:23:22\n+   |\n+LL |     let _x: (i32,) = (t);\n+   |             ------   ^^^ expected a tuple with 1 element, found one with 2 elements\n+   |             |\n+   |             expected due to this\n+   |\n+   = note: expected tuple `(i32,)`\n+              found tuple `({integer}, {integer})`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}