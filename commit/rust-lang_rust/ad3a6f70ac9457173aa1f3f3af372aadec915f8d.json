{"sha": "ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkM2E2ZjcwYWM5NDU3MTczYWExZjNmM2FmMzcyYWFkZWM5MTVmOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T19:23:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T19:23:11Z"}, "message": "Auto merge of #76582 - tmandry:rollup-lwwc93b, r=tmandry\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #75857 (Syntactically permit unsafety on mods)\n - #76289 (Add docs about crate level documentation support)\n - #76514 (Add revisions to const generic issue UI tests.)\n - #76524 (typeck: don't suggest inaccessible private fields)\n - #76548 (Validate removal of AscribeUserType, FakeRead, and Shallow borrow)\n - #76555 (Reword `trivial_casts` lint in rustc book to better explain what it does.)\n - #76559 (add the `const_evaluatable_checked` feature)\n - #76563 (small typo fix in rustc_parse docs)\n - #76565 (take reference to Place directly instead of taking reference to Box<Place>)\n - #76567 (use push(char) to add chars (single-char &strs) to strings instead of push_str(&str))\n - #76568 (Add missing examples on core traits' method)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "3ef86b07ab33ad3bd749b2393c7b566a44d6e205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef86b07ab33ad3bd749b2393c7b566a44d6e205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "html_url": "https://github.com/rust-lang/rust/commit/ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "html_url": "https://github.com/rust-lang/rust/commit/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe"}, {"sha": "044f7179ba35223372265d0b2f5783fc4befe54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/044f7179ba35223372265d0b2f5783fc4befe54a", "html_url": "https://github.com/rust-lang/rust/commit/044f7179ba35223372265d0b2f5783fc4befe54a"}], "stats": {"total": 1621, "additions": 1320, "deletions": 301}, "files": [{"sha": "b9f380dc4e8357dc856ac3848b9a1972ad62835d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -2289,22 +2289,28 @@ impl FnRetTy {\n /// Module declaration.\n ///\n /// E.g., `mod foo;` or `mod foo { .. }`.\n-#[derive(Clone, Encodable, Decodable, Debug, Default)]\n+#[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n     /// to the last token in the external file.\n     pub inner: Span,\n+    /// `unsafe` keyword accepted syntactically for macro DSLs, but not\n+    /// semantically by Rust.\n+    pub unsafety: Unsafe,\n     pub items: Vec<P<Item>>,\n     /// `true` for `mod foo { .. }`; `false` for `mod foo;`.\n     pub inline: bool,\n }\n \n /// Foreign module declaration.\n ///\n-/// E.g., `extern { .. }` or `extern C { .. }`.\n+/// E.g., `extern { .. }` or `extern \"C\" { .. }`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct ForeignMod {\n+    /// `unsafe` keyword accepted syntactically for macro DSLs, but not\n+    /// semantically by Rust.\n+    pub unsafety: Unsafe,\n     pub abi: Option<StrLit>,\n     pub items: Vec<P<ForeignItem>>,\n }"}, {"sha": "3119c5e0a12faf71c9281a9fbc645a8ec2af63c8", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -490,7 +490,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n }\n \n pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis: &mut T) {\n-    let ForeignMod { abi: _, items } = foreign_mod;\n+    let ForeignMod { unsafety: _, abi: _, items } = foreign_mod;\n     items.flat_map_in_place(|item| vis.flat_map_foreign_item(item));\n }\n \n@@ -970,7 +970,8 @@ pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     vis.visit_asyncness(asyncness);\n }\n \n-pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod, vis: &mut T) {\n+pub fn noop_visit_mod<T: MutVisitor>(module: &mut Mod, vis: &mut T) {\n+    let Mod { inner, unsafety: _, items, inline: _ } = module;\n     vis.visit_span(inner);\n     items.flat_map_in_place(|item| vis.flat_map_item(item));\n }\n@@ -990,7 +991,7 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n \n         let len = items.len();\n         if len == 0 {\n-            let module = Mod { inner: span, items: vec![], inline: true };\n+            let module = Mod { inner: span, unsafety: Unsafe::No, items: vec![], inline: true };\n             Crate { module, attrs: vec![], span, proc_macros }\n         } else if len == 1 {\n             let Item { attrs, span, kind, .. } = items.into_iter().next().unwrap().into_inner();"}, {"sha": "998acf4fd10cb7bdc481b10e2fe301e7aa365af3", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -990,12 +990,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.error_item_without_body(item.span, \"function\", msg, \" { <body> }\");\n                 }\n             }\n-            ItemKind::ForeignMod(_) => {\n+            ItemKind::ForeignMod(ForeignMod { unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual foreign items instead\"),\n                 );\n+                if let Unsafe::Yes(span) = unsafety {\n+                    self.err_handler().span_err(span, \"extern block cannot be declared unsafe\");\n+                }\n                 visit::walk_item(self, item);\n                 self.extern_mod = old_item;\n                 return; // Avoid visiting again.\n@@ -1029,7 +1032,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n             }\n-            ItemKind::Mod(Mod { inline, .. }) => {\n+            ItemKind::Mod(Mod { inline, unsafety, .. }) => {\n+                if let Unsafe::Yes(span) = unsafety {\n+                    self.err_handler().span_err(span, \"module cannot be declared unsafe\");\n+                }\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n                 if !inline && !self.session.contains_name(&item.attrs, sym::path) {\n                     self.check_mod_file_item_asciionly(item.ident);"}, {"sha": "955d1677647eca78d03034293026ed2cad020cf3", "filename": "compiler/rustc_ast_pretty/src/pprust.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1139,7 +1139,11 @@ impl<'a> State<'a> {\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n             ast::ItemKind::Mod(ref _mod) => {\n-                self.head(visibility_qualified(&item.vis, \"mod\"));\n+                self.head(to_string(|s| {\n+                    s.print_visibility(&item.vis);\n+                    s.print_unsafety(_mod.unsafety);\n+                    s.word(\"mod\");\n+                }));\n                 self.print_ident(item.ident);\n \n                 if _mod.inline || self.is_expanded {\n@@ -1154,7 +1158,10 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n-                self.head(\"extern\");\n+                self.head(to_string(|s| {\n+                    s.print_unsafety(nmod.unsafety);\n+                    s.word(\"extern\");\n+                }));\n                 if let Some(abi) = nmod.abi {\n                     self.print_literal(&abi.as_lit());\n                     self.nbsp();"}, {"sha": "b39423b86e7b59b13a8d93f0291ce7b7faa0f0cf", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -166,14 +166,14 @@ pub mod printf {\n             let cap = self.span.len() + if has_options { 2 } else { 0 };\n             let mut s = String::with_capacity(cap);\n \n-            s.push_str(\"{\");\n+            s.push('{');\n \n             if let Some(arg) = self.parameter {\n                 write!(s, \"{}\", arg.checked_sub(1)?).ok()?;\n             }\n \n             if has_options {\n-                s.push_str(\":\");\n+                s.push(':');\n \n                 let align = if let Some(fill) = fill {\n                     s.push_str(fill);\n@@ -191,19 +191,19 @@ pub mod printf {\n                 }\n \n                 if alt {\n-                    s.push_str(\"#\");\n+                    s.push('#');\n                 }\n \n                 if zero_fill {\n-                    s.push_str(\"0\");\n+                    s.push('0');\n                 }\n \n                 if let Some(width) = width {\n                     width.translate(&mut s).ok()?;\n                 }\n \n                 if let Some(precision) = precision {\n-                    s.push_str(\".\");\n+                    s.push('.');\n                     precision.translate(&mut s).ok()?;\n                 }\n \n@@ -212,7 +212,7 @@ pub mod printf {\n                 }\n             }\n \n-            s.push_str(\"}\");\n+            s.push('}');\n             Some(s)\n         }\n     }"}, {"sha": "faeb727202cd6832e342d365ce80a4a0bc56c97f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1076,7 +1076,7 @@ fn exec_linker(\n             }\n             .to_string(),\n         );\n-        args.push_str(\"\\n\");\n+        args.push('\\n');\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n     let bytes = if sess.target.target.options.is_like_msvc {"}, {"sha": "0c0f1bc681cf85dc4db99eaec05de5f21489f6d8", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -37,7 +37,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Bool => output.push_str(\"bool\"),\n         ty::Char => output.push_str(\"char\"),\n         ty::Str => output.push_str(\"str\"),\n-        ty::Never => output.push_str(\"!\"),\n+        ty::Never => output.push('!'),\n         ty::Int(int_ty) => output.push_str(int_ty.name_str()),\n         ty::Uint(uint_ty) => output.push_str(uint_ty.name_str()),\n         ty::Float(float_ty) => output.push_str(float_ty.name_str()),"}, {"sha": "dd087ab91509bf6cc797ff67e7ecdd35b7837d89", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -399,7 +399,7 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     pub fn configure_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        let ast::ForeignMod { abi: _, items } = foreign_mod;\n+        let ast::ForeignMod { unsafety: _, abi: _, items } = foreign_mod;\n         items.flat_map_in_place(|item| self.configure(item));\n     }\n "}, {"sha": "241566a042a0e727793e276c9ef0855c143cf05d", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AttrItem, Block, LitKind, NodeId, PatKind, Path};\n-use rustc_ast::{ItemKind, MacArgs, MacCallStmt, MacStmtStyle, StmtKind};\n+use rustc_ast::{ItemKind, MacArgs, MacCallStmt, MacStmtStyle, StmtKind, Unsafe};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_data_structures::map_in_place::MapInPlace;\n@@ -370,11 +370,21 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             None => {\n                 // Resolution failed so we return an empty expansion\n                 krate.attrs = vec![];\n-                krate.module = ast::Mod { inner: orig_mod_span, items: vec![], inline: true };\n+                krate.module = ast::Mod {\n+                    inner: orig_mod_span,\n+                    unsafety: Unsafe::No,\n+                    items: vec![],\n+                    inline: true,\n+                };\n             }\n             Some(ast::Item { span, kind, .. }) => {\n                 krate.attrs = vec![];\n-                krate.module = ast::Mod { inner: orig_mod_span, items: vec![], inline: true };\n+                krate.module = ast::Mod {\n+                    inner: orig_mod_span,\n+                    unsafety: Unsafe::No,\n+                    items: vec![],\n+                    inline: true,\n+                };\n                 self.cx.span_err(\n                     span,\n                     &format!(\n@@ -1441,8 +1451,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     push_directory(&self.cx.sess, ident, &item.attrs, dir)\n                 } else {\n                     // We have an outline `mod foo;` so we need to parse the file.\n-                    let (new_mod, dir) =\n-                        parse_external_mod(&self.cx.sess, ident, span, dir, &mut attrs, pushed);\n+                    let (new_mod, dir) = parse_external_mod(\n+                        &self.cx.sess,\n+                        ident,\n+                        span,\n+                        old_mod.unsafety,\n+                        dir,\n+                        &mut attrs,\n+                        pushed,\n+                    );\n \n                     let krate = ast::Crate {\n                         span: new_mod.inner,"}, {"sha": "171cb3fa8e6e920088095fb7a085a0adfaab62cc", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::{token, Attribute, Mod};\n+use rustc_ast::{token, Attribute, Mod, Unsafe};\n use rustc_errors::{struct_span_err, PResult};\n use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n@@ -42,6 +42,7 @@ crate fn parse_external_mod(\n     sess: &Session,\n     id: Ident,\n     span: Span, // The span to blame on errors.\n+    unsafety: Unsafe,\n     Directory { mut ownership, path }: Directory,\n     attrs: &mut Vec<Attribute>,\n     pop_mod_stack: &mut bool,\n@@ -60,13 +61,16 @@ crate fn parse_external_mod(\n         drop(included_mod_stack);\n \n         // Actually parse the external file as a module.\n-        let mut module =\n-            new_parser_from_file(&sess.parse_sess, &mp.path, Some(span)).parse_mod(&token::Eof)?;\n+        let mut parser = new_parser_from_file(&sess.parse_sess, &mp.path, Some(span));\n+        let mut module = parser.parse_mod(&token::Eof, unsafety)?;\n         module.0.inline = false;\n         module\n     };\n     // (1) ...instead, we return a dummy module.\n-    let (module, mut new_attrs) = result.map_err(|mut err| err.emit()).unwrap_or_default();\n+    let (module, mut new_attrs) = result.map_err(|mut err| err.emit()).unwrap_or_else(|_| {\n+        let module = Mod { inner: Span::default(), unsafety, items: Vec::new(), inline: false };\n+        (module, Vec::new())\n+    });\n     attrs.append(&mut new_attrs);\n \n     // Extract the directory path for submodules of `module`."}, {"sha": "1aeb0bd5ad9aafff2ac80cd9f6f7c6597c355142", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -585,6 +585,9 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n+    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -600,13 +603,14 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::const_evaluatable_checked,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n     sym::lazy_normalization_consts,\n     sym::specialization,\n ];\n \n /// Some features are not allowed to be used together at the same time, if\n-/// the two are present, produce an error\n+/// the two are present, produce an error.\n pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] =\n     &[(sym::const_generics, sym::min_const_generics)];"}, {"sha": "1225776db4590e24a58e182335a4711f628a1f2f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -2093,7 +2093,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => String::new(),\n             };\n             if !s.is_empty() {\n-                s.push_str(\" \");\n+                s.push(' ');\n             }\n             s\n         };"}, {"sha": "9f43fac0916b5ed865d4219cdbba2212c390fe5b", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -50,7 +50,7 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n             // FIXME(#41044) -- not correct, need test\n-            ty::Bivariant => Ok(a.clone()),\n+            ty::Bivariant => Ok(a),\n             ty::Contravariant => self.fields.glb(self.a_is_expected).relate(a, b),\n         }\n     }"}, {"sha": "3cee32834beb7579b54382b5a14d19929d6b837a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -150,8 +150,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some(mut descr) => {\n                 // Surround descr with `backticks`.\n                 descr.reserve(2);\n-                descr.insert_str(0, \"`\");\n-                descr.push_str(\"`\");\n+                descr.insert(0, '`');\n+                descr.push('`');\n                 descr\n             }\n             None => \"value\".to_string(),\n@@ -222,7 +222,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             if self.upvars[var_index].by_ref {\n                                 buf.push_str(&name);\n                             } else {\n-                                buf.push_str(&format!(\"*{}\", &name));\n+                                buf.push('*');\n+                                buf.push_str(&name);\n                             }\n                         } else {\n                             if autoderef {\n@@ -234,7 +235,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     &including_downcast,\n                                 )?;\n                             } else {\n-                                buf.push_str(&\"*\");\n+                                buf.push('*');\n                                 self.append_place_to_string(\n                                     PlaceRef { local, projection: proj_base },\n                                     buf,\n@@ -272,7 +273,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 autoderef,\n                                 &including_downcast,\n                             )?;\n-                            buf.push_str(&format!(\".{}\", field_name));\n+                            buf.push('.');\n+                            buf.push_str(&field_name);\n                         }\n                     }\n                     ProjectionElem::Index(index) => {\n@@ -284,11 +286,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             autoderef,\n                             &including_downcast,\n                         )?;\n-                        buf.push_str(\"[\");\n+                        buf.push('[');\n                         if self.append_local_to_string(*index, buf).is_err() {\n-                            buf.push_str(\"_\");\n+                            buf.push('_');\n                         }\n-                        buf.push_str(\"]\");\n+                        buf.push(']');\n                     }\n                     ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {\n                         autoderef = true;\n@@ -301,7 +303,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             autoderef,\n                             &including_downcast,\n                         )?;\n-                        buf.push_str(&\"[..]\");\n+                        buf.push_str(\"[..]\");\n                     }\n                 };\n             }\n@@ -648,7 +650,7 @@ impl UseSpans {\n                     \" in closure\".to_string()\n                 }\n             }\n-            _ => \"\".to_string(),\n+            _ => String::new(),\n         }\n     }\n "}, {"sha": "f247d07e1f05e66bad3fbd20bcc1c209751583af", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fvalues.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -417,7 +417,7 @@ crate fn location_set_str(\n \n fn region_value_str(elements: impl IntoIterator<Item = RegionElement>) -> String {\n     let mut result = String::new();\n-    result.push_str(\"{\");\n+    result.push('{');\n \n     // Set to Some(l1, l2) when we have observed all the locations\n     // from l1..=l2 (inclusive) but not yet printed them. This\n@@ -478,7 +478,7 @@ fn region_value_str(elements: impl IntoIterator<Item = RegionElement>) -> String\n         push_location_range(&mut result, location1, location2);\n     }\n \n-    result.push_str(\"}\");\n+    result.push('}');\n \n     return result;\n "}, {"sha": "0f6f078d9686f07e6163c8cd6175120353a21159", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -382,7 +382,7 @@ fn collect_and_partition_mono_items<'tcx>(\n                 cgus.sort_by_key(|(name, _)| *name);\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n-                    output.push_str(\" \");\n+                    output.push(' ');\n                     output.push_str(&cgu_name.as_str());\n \n                     let linkage_abbrev = match linkage {\n@@ -399,9 +399,9 @@ fn collect_and_partition_mono_items<'tcx>(\n                         Linkage::Common => \"Common\",\n                     };\n \n-                    output.push_str(\"[\");\n+                    output.push('[');\n                     output.push_str(linkage_abbrev);\n-                    output.push_str(\"]\");\n+                    output.push(']');\n                 }\n                 output\n             })"}, {"sha": "a5b30a25a9bdf86b50c0770cd2e162c169b0669e", "filename": "compiler/rustc_mir/src/transform/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -353,7 +353,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                             if !INCLUDE_COVERAGE_STATEMENTS {\n                                 continue;\n                             }\n-                            format!(\"unreachable\")\n+                            String::from(\"unreachable\")\n                         }\n                     },\n                     _ => format!(\"{:?}\", statement),"}, {"sha": "a320d00614d40b68afb63ff0cb91fdd67d741435", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -674,7 +674,7 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n         y_bb_idx: BasicBlock,\n     ) -> StatementEquality {\n         let helper = |rhs: &Rvalue<'tcx>,\n-                      place: &Box<Place<'tcx>>,\n+                      place: &Place<'tcx>,\n                       variant_index: &VariantIdx,\n                       side_to_choose| {\n             let place_type = place.ty(self.body, self.tcx).ty;"}, {"sha": "d3ca14abdcab201acbdcc90e0fea91625dd7c3a3", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -4,8 +4,8 @@ use super::{MirPass, MirSource};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::{\n     mir::{\n-        AggregateKind, BasicBlock, Body, Location, MirPhase, Operand, Rvalue, Statement,\n-        StatementKind, Terminator, TerminatorKind,\n+        AggregateKind, BasicBlock, Body, BorrowKind, Location, MirPhase, Operand, Rvalue,\n+        Statement, StatementKind, Terminator, TerminatorKind,\n     },\n     ty::{\n         self,\n@@ -274,9 +274,33 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             )\n                         }\n                     }\n+                    Rvalue::Ref(_, BorrowKind::Shallow, _) => {\n+                        if self.mir_phase > MirPhase::DropLowering {\n+                            self.fail(\n+                                location,\n+                                \"`Assign` statement with a `Shallow` borrow should have been removed after drop lowering phase\",\n+                            );\n+                        }\n+                    }\n                     _ => {}\n                 }\n             }\n+            StatementKind::AscribeUserType(..) => {\n+                if self.mir_phase > MirPhase::DropLowering {\n+                    self.fail(\n+                        location,\n+                        \"`AscribeUserType` should have been removed after drop lowering phase\",\n+                    );\n+                }\n+            }\n+            StatementKind::FakeRead(..) => {\n+                if self.mir_phase > MirPhase::DropLowering {\n+                    self.fail(\n+                        location,\n+                        \"`FakeRead` should have been removed after drop lowering phase\",\n+                    );\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "75567181b69164d9f4519eb2a9e4ee95adfff689", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -514,7 +514,7 @@ fn write_scope_tree(\n                 write!(indented_decl, \" as {:?}\", user_ty).unwrap();\n             }\n         }\n-        indented_decl.push_str(\";\");\n+        indented_decl.push(';');\n \n         let local_name =\n             if local == RETURN_PLACE { \" return place\".to_string() } else { String::new() };"}, {"sha": "12afc48356cce4d605fd7fd2fc0f2b4998c8e761", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -109,7 +109,7 @@ pub fn maybe_new_parser_from_source_str(\n }\n \n /// Creates a new parser, handling errors as appropriate if the file doesn't exist.\n-/// If a span is given, that is used on an error as the as the source of the problem.\n+/// If a span is given, that is used on an error as the source of the problem.\n pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Option<Span>) -> Parser<'a> {\n     source_file_to_parser(sess, file_to_source_file(sess, path, sp))\n }"}, {"sha": "1a428f8bb0ab5c4d1a899bee86ec9357cfdd4701", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -28,35 +28,46 @@ impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n         let lo = self.token.span;\n-        let (module, attrs) = self.parse_mod(&token::Eof)?;\n+        let (module, attrs) = self.parse_mod(&token::Eof, Unsafe::No)?;\n         let span = lo.to(self.token.span);\n         let proc_macros = Vec::new(); // Filled in by `proc_macro_harness::inject()`.\n         Ok(ast::Crate { attrs, module, span, proc_macros })\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n     fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+        let unsafety = self.parse_unsafety();\n+        self.expect_keyword(kw::Mod)?;\n         let id = self.parse_ident()?;\n         let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n-            Default::default()\n+            (Mod { inner: Span::default(), unsafety, items: Vec::new(), inline: false }, Vec::new())\n         } else {\n             self.expect(&token::OpenDelim(token::Brace))?;\n-            self.parse_mod(&token::CloseDelim(token::Brace))?\n+            self.parse_mod(&token::CloseDelim(token::Brace), unsafety)?\n         };\n         attrs.append(&mut inner_attrs);\n         Ok((id, ItemKind::Mod(module)))\n     }\n \n     /// Parses the contents of a module (inner attributes followed by module items).\n-    pub fn parse_mod(&mut self, term: &TokenKind) -> PResult<'a, (Mod, Vec<Attribute>)> {\n+    pub fn parse_mod(\n+        &mut self,\n+        term: &TokenKind,\n+        unsafety: Unsafe,\n+    ) -> PResult<'a, (Mod, Vec<Attribute>)> {\n         let lo = self.token.span;\n         let attrs = self.parse_inner_attributes()?;\n-        let module = self.parse_mod_items(term, lo)?;\n+        let module = self.parse_mod_items(term, lo, unsafety)?;\n         Ok((module, attrs))\n     }\n \n     /// Given a termination token, parses all of the items in a module.\n-    fn parse_mod_items(&mut self, term: &TokenKind, inner_lo: Span) -> PResult<'a, Mod> {\n+    fn parse_mod_items(\n+        &mut self,\n+        term: &TokenKind,\n+        inner_lo: Span,\n+        unsafety: Unsafe,\n+    ) -> PResult<'a, Mod> {\n         let mut items = vec![];\n         while let Some(item) = self.parse_item()? {\n             items.push(item);\n@@ -75,7 +86,7 @@ impl<'a> Parser<'a> {\n \n         let hi = if self.token.span.is_dummy() { inner_lo } else { self.prev_token.span };\n \n-        Ok(Mod { inner: inner_lo.to(hi), items, inline: true })\n+        Ok(Mod { inner: inner_lo.to(hi), unsafety, items, inline: true })\n     }\n }\n \n@@ -235,8 +246,13 @@ impl<'a> Parser<'a> {\n                 self.parse_item_extern_crate()?\n             } else {\n                 // EXTERN BLOCK\n-                self.parse_item_foreign_mod(attrs)?\n+                self.parse_item_foreign_mod(attrs, Unsafe::No)?\n             }\n+        } else if self.is_unsafe_foreign_mod() {\n+            // EXTERN BLOCK\n+            let unsafety = self.parse_unsafety();\n+            self.expect_keyword(kw::Extern)?;\n+            self.parse_item_foreign_mod(attrs, unsafety)?\n         } else if self.is_static_global() {\n             // STATIC ITEM\n             self.bump(); // `static`\n@@ -256,7 +272,9 @@ impl<'a> Parser<'a> {\n         {\n             // IMPL ITEM\n             self.parse_item_impl(attrs, def())?\n-        } else if self.eat_keyword(kw::Mod) {\n+        } else if self.check_keyword(kw::Mod)\n+            || self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Mod])\n+        {\n             // MODULE ITEM\n             self.parse_item_mod(attrs)?\n         } else if self.eat_keyword(kw::Type) {\n@@ -893,10 +911,14 @@ impl<'a> Parser<'a> {\n     /// extern \"C\" {}\n     /// extern {}\n     /// ```\n-    fn parse_item_foreign_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+    fn parse_item_foreign_mod(\n+        &mut self,\n+        attrs: &mut Vec<Attribute>,\n+        unsafety: Unsafe,\n+    ) -> PResult<'a, ItemInfo> {\n         let abi = self.parse_abi(); // ABI?\n         let items = self.parse_item_list(attrs, |p| p.parse_foreign_item())?;\n-        let module = ast::ForeignMod { abi, items };\n+        let module = ast::ForeignMod { unsafety, abi, items };\n         Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n     }\n \n@@ -938,6 +960,15 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n+    fn is_unsafe_foreign_mod(&self) -> bool {\n+        self.token.is_keyword(kw::Unsafe)\n+            && self.is_keyword_ahead(1, &[kw::Extern])\n+            && self.look_ahead(\n+                2 + self.look_ahead(2, |t| t.can_begin_literal_maybe_minus() as usize),\n+                |t| t.kind == token::OpenDelim(token::Brace),\n+            )\n+    }\n+\n     fn is_static_global(&mut self) -> bool {\n         if self.check_keyword(kw::Static) {\n             // Check if this could be a closure.\n@@ -1552,10 +1583,14 @@ impl<'a> Parser<'a> {\n             // `$qual fn` or `$qual $qual`:\n             || QUALS.iter().any(|&kw| self.check_keyword(kw))\n                 && self.look_ahead(1, |t| {\n-                    // ...qualified and then `fn`, e.g. `const fn`.\n+                    // `$qual fn`, e.g. `const fn` or `async fn`.\n                     t.is_keyword(kw::Fn)\n-                    // Two qualifiers. This is enough. Due `async` we need to check that it's reserved.\n-                    || t.is_non_raw_ident_where(|i| QUALS.contains(&i.name) && i.is_reserved())\n+                    // Two qualifiers `$qual $qual` is enough, e.g. `async unsafe`.\n+                    || t.is_non_raw_ident_where(|i| QUALS.contains(&i.name)\n+                        // Rule out 2015 `const async: T = val`.\n+                        && i.is_reserved()\n+                        // Rule out unsafe extern block.\n+                        && !self.is_unsafe_foreign_mod())\n                 })\n             // `extern ABI fn`\n             || self.check_keyword(kw::Extern)\n@@ -1567,9 +1602,9 @@ impl<'a> Parser<'a> {\n     /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n     /// ```\n-    /// Extern = \"extern\" StringLit ;\n+    /// Extern = \"extern\" StringLit? ;\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n-    /// FnFrontMatter = FnQual? \"fn\" ;\n+    /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n     pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n         let constness = self.parse_constness();"}, {"sha": "032d7cb3ed6b76dfbca625333fe090a534e5be64", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -438,7 +438,7 @@ impl<'tcx> SaveContext<'tcx> {\n                                     .next()\n                                     .map(|item| item.def_id);\n                             }\n-                            qualname.push_str(\">\");\n+                            qualname.push('>');\n \n                             (qualname, trait_id, decl_id, docs, attrs)\n                         }"}, {"sha": "747e198cd9324f0baa39ee546a9e189552f35206", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -497,7 +497,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n                     sig.text.push_str(&bounds_to_string(bounds));\n                 }\n                 // FIXME where clause\n-                sig.text.push_str(\";\");\n+                sig.text.push(';');\n \n                 Ok(sig)\n             }"}, {"sha": "4aecb35294a07b603432db71fd37933d3bf06ffd", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -581,9 +581,9 @@ impl OutputFilenames {\n \n         if !ext.is_empty() {\n             if !extension.is_empty() {\n-                extension.push_str(\".\");\n+                extension.push('.');\n                 extension.push_str(RUST_CGU_EXT);\n-                extension.push_str(\".\");\n+                extension.push('.');\n             }\n \n             extension.push_str(ext);"}, {"sha": "407663e57577affefe9243c00389a46861ee339d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -348,6 +348,7 @@ symbols! {\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,\n+        const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n         const_fn_transmute,"}, {"sha": "fdb87c085b54ef377ba7306c1d4e44a548812087", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -14,6 +14,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), ErrorHandled> {\n+    debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n+    if infcx.tcx.features().const_evaluatable_checked {\n+        // FIXME(const_evaluatable_checked): Actually look into generic constants to\n+        // implement const equality.\n+        for pred in param_env.caller_bounds() {\n+            match pred.skip_binders() {\n+                ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n+                    debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n+                    if b_def == def && b_substs == substs {\n+                        debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n+                        return Ok(());\n+                    }\n+                }\n+                _ => {} // don't care\n+            }\n+        }\n+    }\n+\n     let future_compat_lint = || {\n         if let Some(local_def_id) = def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n@@ -38,24 +56,23 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // See #74595 for more details about this.\n     let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n \n-    let def_kind = infcx.tcx.def_kind(def.did);\n-    match def_kind {\n-        DefKind::AnonConst => {\n-            let mir_body = if let Some(def) = def.as_const_arg() {\n-                infcx.tcx.optimized_mir_of_const_arg(def)\n-            } else {\n-                infcx.tcx.optimized_mir(def.did)\n-            };\n-            if mir_body.is_polymorphic && concrete.is_ok() {\n-                future_compat_lint();\n-            }\n-        }\n-        _ => {\n-            if substs.has_param_types_or_consts() && concrete.is_ok() {\n-                future_compat_lint();\n+    if concrete.is_ok() && substs.has_param_types_or_consts() {\n+        match infcx.tcx.def_kind(def.did) {\n+            DefKind::AnonConst => {\n+                let mir_body = if let Some(def) = def.as_const_arg() {\n+                    infcx.tcx.optimized_mir_of_const_arg(def)\n+                } else {\n+                    infcx.tcx.optimized_mir(def.did)\n+                };\n+\n+                if mir_body.is_polymorphic {\n+                    future_compat_lint();\n+                }\n             }\n+            _ => future_compat_lint(),\n         }\n     }\n \n+    debug!(?concrete, \"is_const_evaluatable\");\n     concrete.map(drop)\n }"}, {"sha": "dba46f35dca925643b36c860a55d04473b409db7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 85, "deletions": 33, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1241,42 +1241,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.span_err(span, \"union expressions should have exactly one field\");\n             }\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n-            let len = remaining_fields.len();\n-\n-            let mut displayable_field_names =\n-                remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n-\n-            displayable_field_names.sort();\n+            let no_accessible_remaining_fields = remaining_fields\n+                .iter()\n+                .filter(|(_, (_, field))| {\n+                    field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n \n-            let truncated_fields_error = if len <= 3 {\n-                String::new()\n+            if no_accessible_remaining_fields {\n+                self.report_no_accessible_fields(adt_ty, span);\n             } else {\n-                format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n-            };\n-\n-            let remaining_fields_names = displayable_field_names\n-                .iter()\n-                .take(3)\n-                .map(|n| format!(\"`{}`\", n))\n-                .collect::<Vec<_>>()\n-                .join(\", \");\n-\n-            struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0063,\n-                \"missing field{} {}{} in initializer of `{}`\",\n-                pluralize!(remaining_fields.len()),\n-                remaining_fields_names,\n-                truncated_fields_error,\n-                adt_ty\n-            )\n-            .span_label(\n-                span,\n-                format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error),\n-            )\n-            .emit();\n+                self.report_missing_field(adt_ty, span, remaining_fields);\n+            }\n         }\n+\n         error_happened\n     }\n \n@@ -1293,6 +1272,79 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Report an error for a struct field expression when there are fields which aren't provided.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^ missing `you_can_use_this_field`\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_missing_field(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+    ) {\n+        let tcx = self.tcx;\n+        let len = remaining_fields.len();\n+\n+        let mut displayable_field_names =\n+            remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n+\n+        displayable_field_names.sort();\n+\n+        let truncated_fields_error = if len <= 3 {\n+            String::new()\n+        } else {\n+            format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n+        };\n+\n+        let remaining_fields_names = displayable_field_names\n+            .iter()\n+            .take(3)\n+            .map(|n| format!(\"`{}`\", n))\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0063,\n+            \"missing field{} {}{} in initializer of `{}`\",\n+            pluralize!(remaining_fields.len()),\n+            remaining_fields_names,\n+            truncated_fields_error,\n+            adt_ty\n+        )\n+        .span_label(span, format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error))\n+        .emit();\n+    }\n+\n+    /// Report an error for a struct field expression when there are no visible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_no_accessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n+        self.tcx.sess.span_err(\n+            span,\n+            &format!(\n+                \"cannot construct `{}` with struct literal syntax due to inaccessible fields\",\n+                adt_ty,\n+            ),\n+        );\n+    }\n+\n     fn report_unknown_field(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "1896155e327d83946f0ac306ed01aec31e2ed2fa", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 81, "deletions": 9, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1078,8 +1078,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut unmentioned_fields = variant\n             .fields\n             .iter()\n-            .map(|field| field.ident.normalize_to_macros_2_0())\n-            .filter(|ident| !used_fields.contains_key(&ident))\n+            .map(|field| (field, field.ident.normalize_to_macros_2_0()))\n+            .filter(|(_, ident)| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n         let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered()) {\n@@ -1110,7 +1110,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            let no_accessible_unmentioned_fields = unmentioned_fields\n+                .iter()\n+                .filter(|(field, _)| {\n+                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n+\n+            if no_accessible_unmentioned_fields {\n+                unmentioned_err = Some(self.error_no_accessible_fields(pat, &fields));\n+            } else {\n+                unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n             (Some(mut i), Some(mut u)) => {\n@@ -1173,7 +1185,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         kind_name: &str,\n         inexistent_fields: &[Ident],\n-        unmentioned_fields: &mut Vec<Ident>,\n+        unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n     ) -> DiagnosticBuilder<'tcx> {\n         let tcx = self.tcx;\n@@ -1215,7 +1227,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ),\n             );\n             if plural == \"\" {\n-                let input = unmentioned_fields.iter().map(|field| &field.name);\n+                let input = unmentioned_fields.iter().map(|(_, field)| &field.name);\n                 let suggested_name = find_best_match_for_name(input, ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n@@ -1232,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // `smart_resolve_context_dependent_help`.\n                     if suggested_name.to_ident_string().parse::<usize>().is_err() {\n                         // We don't want to throw `E0027` in case we have thrown `E0026` for them.\n-                        unmentioned_fields.retain(|&x| x.name != suggested_name);\n+                        unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n                 }\n             }\n@@ -1300,17 +1312,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n+    /// inaccessible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: pattern requires `..` due to inaccessible fields\n+    ///   --> src/main.rs:10:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::default();\n+    ///    |         ^^^^^^^^^^^\n+    ///    |\n+    /// help: add a `..`\n+    ///    |\n+    /// LL |     let foo::Foo { .. } = foo::Foo::default();\n+    ///    |                  ^^^^^^\n+    /// ```\n+    fn error_no_accessible_fields(\n+        &self,\n+        pat: &Pat<'_>,\n+        fields: &'tcx [hir::FieldPat<'tcx>],\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let mut err = self\n+            .tcx\n+            .sess\n+            .struct_span_err(pat.span, \"pattern requires `..` due to inaccessible fields\");\n+\n+        if let Some(field) = fields.last() {\n+            err.span_suggestion_verbose(\n+                field.span.shrink_to_hi(),\n+                \"ignore the inaccessible and unused fields\",\n+                \", ..\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            let qpath_span = if let PatKind::Struct(qpath, ..) = &pat.kind {\n+                qpath.span()\n+            } else {\n+                bug!(\"`error_no_accessible_fields` called on non-struct pattern\");\n+            };\n+\n+            // Shrink the span to exclude the `foo:Foo` in `foo::Foo { }`.\n+            let span = pat.span.with_lo(qpath_span.shrink_to_hi().hi());\n+            err.span_suggestion_verbose(\n+                span,\n+                \"ignore the inaccessible and unused fields\",\n+                \" { .. }\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err\n+    }\n+\n+    /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n+    ///   --> src/main.rs:15:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::new();\n+    ///    |         ^^^^^^^^^^^ missing field `you_cant_use_this_field`\n+    /// ```\n     fn error_unmentioned_fields(\n         &self,\n         pat: &Pat<'_>,\n-        unmentioned_fields: &[Ident],\n+        unmentioned_fields: &[(&ty::FieldDef, Ident)],\n     ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n-            format!(\"field `{}`\", unmentioned_fields[0])\n+            format!(\"field `{}`\", unmentioned_fields[0].1)\n         } else {\n             let fields = unmentioned_fields\n                 .iter()\n-                .map(|name| format!(\"`{}`\", name))\n+                .map(|(_, name)| format!(\"`{}`\", name))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n             format!(\"fields {}\", fields)"}, {"sha": "7d6b3df03b06496fc073bd471935ad3545894f84", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -37,11 +37,12 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_middle::ty::{TypeFoldable, TypeVisitor};\n use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -50,6 +51,8 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n \n+use smallvec::SmallVec;\n+\n mod type_of;\n \n struct OnlySelfBounds(bool);\n@@ -1672,10 +1675,46 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n                 .alloc_from_iter(result.predicates.iter().chain(inferred_outlives).copied());\n         }\n     }\n+\n+    if tcx.features().const_evaluatable_checked {\n+        let const_evaluatable = const_evaluatable_predicates_of(tcx, def_id, &result);\n+        result.predicates =\n+            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(const_evaluatable));\n+    }\n+\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n }\n \n+pub fn const_evaluatable_predicates_of<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    predicates: &ty::GenericPredicates<'tcx>,\n+) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> {\n+    #[derive(Default)]\n+    struct ConstCollector<'tcx> {\n+        ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>); 4]>,\n+    }\n+\n+    impl<'tcx> TypeVisitor<'tcx> for ConstCollector<'tcx> {\n+        fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> bool {\n+            if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n+                self.ct.push((def, substs));\n+            }\n+            false\n+        }\n+    }\n+\n+    let mut collector = ConstCollector::default();\n+    for (pred, _span) in predicates.predicates.iter() {\n+        pred.visit_with(&mut collector);\n+    }\n+    warn!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n+    collector.ct.into_iter().map(move |(def_id, subst)| {\n+        (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), DUMMY_SP)\n+    })\n+}\n+\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits."}, {"sha": "bdf93baa1b8f9acf5181247807e9c36a9b24e675", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -78,6 +78,12 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     /// Performs the `+` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 + 1, 13);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn add(self, rhs: Rhs) -> Self::Output;\n@@ -178,6 +184,12 @@ pub trait Sub<Rhs = Self> {\n     type Output;\n \n     /// Performs the `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 - 1, 11);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sub(self, rhs: Rhs) -> Self::Output;\n@@ -300,6 +312,12 @@ pub trait Mul<Rhs = Self> {\n     type Output;\n \n     /// Performs the `*` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 * 2, 24);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn mul(self, rhs: Rhs) -> Self::Output;\n@@ -426,6 +444,12 @@ pub trait Div<Rhs = Self> {\n     type Output;\n \n     /// Performs the `/` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 / 2, 6);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn div(self, rhs: Rhs) -> Self::Output;\n@@ -513,6 +537,12 @@ pub trait Rem<Rhs = Self> {\n     type Output;\n \n     /// Performs the `%` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 % 10, 2);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rem(self, rhs: Rhs) -> Self::Output;\n@@ -612,6 +642,13 @@ pub trait Neg {\n     type Output;\n \n     /// Performs the unary `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let x: i32 = 12;\n+    /// assert_eq!(-x, -12);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn neg(self) -> Self::Output;\n@@ -673,6 +710,14 @@ neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"+=\")]\n pub trait AddAssign<Rhs = Self> {\n     /// Performs the `+=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x += 1;\n+    /// assert_eq!(x, 13);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn add_assign(&mut self, rhs: Rhs);\n }\n@@ -731,6 +776,14 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"-=\")]\n pub trait SubAssign<Rhs = Self> {\n     /// Performs the `-=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x -= 1;\n+    /// assert_eq!(x, 11);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn sub_assign(&mut self, rhs: Rhs);\n }\n@@ -780,6 +833,14 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"*=\")]\n pub trait MulAssign<Rhs = Self> {\n     /// Performs the `*=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x *= 2;\n+    /// assert_eq!(x, 24);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn mul_assign(&mut self, rhs: Rhs);\n }\n@@ -829,6 +890,14 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"/=\")]\n pub trait DivAssign<Rhs = Self> {\n     /// Performs the `/=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x /= 2;\n+    /// assert_eq!(x, 6);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn div_assign(&mut self, rhs: Rhs);\n }\n@@ -881,6 +950,14 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"%=\")]\n pub trait RemAssign<Rhs = Self> {\n     /// Performs the `%=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x %= 10;\n+    /// assert_eq!(x, 2);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn rem_assign(&mut self, rhs: Rhs);\n }"}, {"sha": "d2d8c471efc96d0b5989026083ca18f1c84a140d", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -232,7 +232,8 @@ error: lifetime name `'x` only used once\n \n ## trivial-casts\n \n-This lint detects trivial casts which could be removed. Some example code\n+This lint detects trivial casts which could be replaced with coercion, which may require\n+type ascription or a temporary variable. Some example code\n that triggers this lint:\n \n ```rust"}, {"sha": "7a38c96d7147b57a0a947f4a022c6b4d3d159680", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -93,6 +93,29 @@ passes `-L`, a flag that helps rustdoc find the dependencies\n your code relies on. If our project used dependencies, we'd get\n documentation for them as well!\n \n+## Outer and inner documentation\n+\n+The `///` syntax is used to document the item present after it.\n+That's why it is called an outer documentation.\n+There is another syntax: `//!`, which is used to document the \n+item it is present inside. It is called an inner documentation.\n+It is often used when documenting the entire crate,\n+because nothing comes before it: it is the root of the crate.\n+So in order to document an entire crate, you need to use `//!` syntax.\n+For example:\n+\n+``` rust\n+//! This is my first rust crate\n+```\n+\n+When used in the crate root, it documents the item it is inside,\n+which is the crate itself.\n+\n+For more information about the `//!` syntax, see [the Book].\n+\n+[the Book]: https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#commenting-contained-items\n+\n+\n ## Using standalone Markdown files\n \n `rustdoc` can also generate HTML from standalone Markdown files. Let's"}, {"sha": "0e5a3a14ac7b5cfecffac04fbe4d9986b0bfc6a0", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "8752ed2ae9993210cd44ab86b13744e548cfe784", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "899a5a1836c338d349c78d6537146a295d0fc345", "filename": "src/test/ui/const-generics/auxiliary/const_generic_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Struct<const N: usize>(pub [u8; N]);\n "}, {"sha": "2e25dadf119c4b26b083e004d8f73014bf22daa3", "filename": "src/test/ui/const-generics/auxiliary/impl-const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Num<const N: usize>;\n "}, {"sha": "a35c3abc113b9dd6c572cf21490e16366b9eee4b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements", "previous_filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr"}, {"sha": "a35c3abc113b9dd6c572cf21490e16366b9eee4b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+   |\n+LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n+   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+   |\n+LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n+   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9ae2ae50ba0ab503af9480da097841f2d9e4cc9e", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,5 @@\n // aux-build:const_generic_lib.rs\n+// revisions: full min\n \n extern crate const_generic_lib;\n "}, {"sha": "fda3ec3eef7995bff4068af30e5cbd2dd2ef7847", "filename": "src/test/ui/const-generics/const-argument-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// revisions: full min\n // aux-build:const_generic_lib.rs\n \n extern crate const_generic_lib;"}, {"sha": "941bd5e9e5d0a984e894258e5b427ba210f1d424", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1];\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+    //~^ ERROR constant expression depends\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<33>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "6e4a22a38b17c63be5f4871e945081fd3bac5e89", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/feature-gate-const_evaluatable_checked.rs:6:30\n+   |\n+LL | fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+   |                              ^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7ead78b97bae186d96452d1cc41fd03c665559d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1];\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<33>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "1edf1885dd28186325c928847f77a4a812067799", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1]; //~ ERROR evaluation of constant\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n+    todo!()\n+}\n+\n+fn main() {\n+    test::<0>();\n+}"}, {"sha": "1ac5e1d95537a42bb55598a669f002e02f691499", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/simple_fail.rs:4:33\n+   |\n+LL | type Arr<const N: usize> = [u8; N - 1];\n+   |                                 ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "0574ddfb2557aff283ee95f3e09a67cf3cac3bb7", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/complex-unord-param.rs:9:41\n+   |\n+LL | struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n+   |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a, const N: usize, const M: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e83a96388c1909b60fef5e1e0ff58ee04a7e0cba", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,11 +1,13 @@\n-// run-pass\n+// [full] run-pass\n+// revisions: full min\n // Checks a complicated usage of unordered params\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n+  //[min]~^ ERROR type parameters must be declared prior to const parameters\n   args: &'a [&'a [T; M]; N],\n   specifier: A,\n }"}, {"sha": "9cc3e9c0da6658b6b166c6f6e07f5facbd5413a1", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:9:37\n+  --> $DIR/intermixed-lifetime.rs:11:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`", "previous_filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr"}, {"sha": "4d80fdb5bcbc2454634087fddfbce5b3620efaac", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:7:28\n+   |\n+LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:7:32\n+   |\n+LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:11:37\n+   |\n+LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:11:28\n+   |\n+LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "cc0d1c6c0c97cbcd79d60f2c71a25e5c5113a2c2", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,12 +1,16 @@\n+// revisions: full min\n // Checks that lifetimes cannot be interspersed between consts and types.\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters\n+//[min]~^^ Error type parameters must be declared prior to const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//~^ Error lifetime parameters must be declared prior to type parameters\n+//[full]~^ Error lifetime parameters must be declared prior to type parameters\n+//[min]~^^ Error type parameters must be declared prior to const parameters\n+//[min]~| Error lifetime parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "59cc6f28af857ffb131fccabc99dba00ff6b788f", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/simple-defaults.rs:9:40\n+   |\n+LL | struct FixedOutput<'a, const N: usize, T=u32> {\n+   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "78abe3519985b49f95763a5b74dd0dcda767a43f", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,10 +1,13 @@\n-// run-pass\n+// [full] run-pass\n+// revisions: min full\n // Checks some basic test cases for defaults.\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {\n+  //[min]~^ ERROR type parameters must be declared prior to const parameters\n   out: &'a [T; N],\n }\n "}, {"sha": "7ea8d936d6141c1a5589017425a5904aa618d92f", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // All of these three items must be in `lib2` to reproduce the error\n "}, {"sha": "b805bc0db7e55fb758870abb2ddbc90440de60cf", "filename": "src/test/ui/const-generics/issues/issue-61935.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61935.rs:10:14\n+   |\n+LL |         Self:FooImpl<{N==0}>\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5715ec658c5cb725874c8f99b6a35c9cb5e577f", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-61935.rs:10:23\n+   |\n+LL |         Self:FooImpl<{N==0}>\n+   |                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "64257da03094360d3056fbed616f9edebac783c0", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,12 +1,15 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {}\n \n impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n-//~^ERROR constant expression depends on a generic parameter\n+//[full]~^ERROR constant expression depends on a generic parameter\n+//[min]~^^ERROR generic parameters must not be used inside of non trivial constant values\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "a785af5f008ea739876541dea982df9a1336acd8", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61935.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61935.rs:8:14\n-   |\n-LL |         Self:FooImpl<{N==0}>\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "a8fa37803566006057ea6f10573c1768fd3876b1", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait BitLen: Sized {\n     const BIT_LEN: usize;\n@@ -12,5 +14,5 @@ impl<const L: usize> BitLen for [u8; L] {\n }\n \n fn main() {\n-    let foo = <[u8; 2]>::BIT_LEN; //~ WARN unused variable\n+    let _foo = <[u8; 2]>::BIT_LEN;\n }"}, {"sha": "a9abb877c094c81a488d10ff7278b3b52d72e2ad", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr?ref=8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62187-encountered-polymorphic-const.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: unused variable: `foo`\n-  --> $DIR/issue-62187-encountered-polymorphic-const.rs:15:9\n-   |\n-LL |     let foo = <[u8; 2]>::BIT_LEN;\n-   |         ^^^ help: if this is intentional, prefix it with an underscore: `_foo`\n-   |\n-   = note: `#[warn(unused_variables)]` on by default\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "120aa8e4af5d2e0a8552e59775dcf24c3796b9b4", "filename": "src/test/ui/const-generics/issues/issue-62220.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62220.rs:10:27\n+  --> $DIR/issue-62220.rs:13:27\n    |\n LL |     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-62220.stderr"}, {"sha": "943b689bf61afe572e85b61cc5a2160061981f83", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62220.rs:8:59\n+   |\n+LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n+   |                                                           ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "acb13ad1170f2290a387a2eedbc5f4bbdee85829", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,14 +1,17 @@\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n+//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension.\n     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n         unimplemented!()\n     }\n }"}, {"sha": "a8d44074db9d14b0fcf3e18641116a80aa0387d9", "filename": "src/test/ui/const-generics/issues/issue-62456.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62456.rs:7:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "335f0ead278719f249728599feb44d1123464775", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62456.rs:7:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "c96868c00a3d60f343fd29ccda817a0ddf98e69e", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,9 +1,12 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n }\n \n fn main() {}"}, {"sha": "0454fed670598667acfb85290a9ef7275eeb1d4c", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62456.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62456.rs:5:20\n-   |\n-LL |     let _ = [0u64; N + 1];\n-   |                    ^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "9c84f06ce9f74987aea8f299bcb876e898cde91e", "filename": "src/test/ui/const-generics/issues/issue-62504.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62504.rs:18:25\n+  --> $DIR/issue-62504.rs:19:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-62504.stderr"}, {"sha": "752df17aad61490d22b1e7ef60ca9bf2f7134ce5", "filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62504.rs:19:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "b520dbe4e803bf2e6dd96776bddb944847fa17cd", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,7 +1,8 @@\n-// Regression test for #62504\n-\n-#![feature(const_generics)]\n+// revisions: full min\n #![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait HasSize {\n     const SIZE: usize;\n@@ -16,7 +17,8 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n     }\n }\n "}, {"sha": "6903b20fad63c076690be4d6635c376a720183fb", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,11 @@\n+error: `NoMatch` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-62579-no-match.rs:10:17\n+   |\n+LL | fn foo<const T: NoMatch>() -> bool {\n+   |                 ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c9853aa9162e10117028f104f2e95f695f3fa70b", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,12 +1,14 @@\n-// run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// [full] run-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n struct NoMatch;\n \n fn foo<const T: NoMatch>() -> bool {\n+    //[min]~^ ERROR `NoMatch` is forbidden as the type of a const generic parameter\n     true\n }\n "}, {"sha": "9fb9b5b13d8d529eba87c07bf22697d94c1410db", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr?ref=8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62579-no-match.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c8b9db89410987e77d0ead80de9d99fc64cf49ee", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "renamed", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,37 +1,28 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-62878.rs:3:38\n+  --> $DIR/issue-62878.rs:6:38\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62878.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/issue-62878.rs:7:5\n+  --> $DIR/issue-62878.rs:11:5\n    |\n LL |     foo::<_, {[1]}>();\n    |     ^^^^^^^^^^^^^^^ expected 2 const arguments\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-62878.rs:7:11\n+  --> $DIR/issue-62878.rs:11:11\n    |\n LL |     foo::<_, {[1]}>();\n    |           ^ unexpected type argument\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-62878.rs:7:15\n+  --> $DIR/issue-62878.rs:11:15\n    |\n LL |     foo::<_, {[1]}>();\n    |               ^^^ expected `usize`, found array `[{integer}; 1]`\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0107, E0308, E0770.\n For more information about an error, try `rustc --explain E0107`.", "previous_filename": "src/test/ui/const-generics/issues/issue-62878.stderr"}, {"sha": "34edd09b5156535bbd8338f23d2f8698bd685d58", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,18 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-62878.rs:6:38\n+   |\n+LL | fn foo<const N: usize, const A: [u8; N]>() {}\n+   |                                      ^ the type must not depend on the parameter `N`\n+\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-62878.rs:6:33\n+   |\n+LL | fn foo<const N: usize, const A: [u8; N]>() {}\n+   |                                 ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "0487dda2fe81d87432d7e039cc5b1d8e6fdb24a5", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,11 +1,15 @@\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n //~^ ERROR the type of const parameters must not\n+//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {\n     foo::<_, {[1]}>();\n-    //~^ ERROR wrong number of const arguments\n-    //~| ERROR wrong number of type arguments\n-    //~| ERROR mismatched types\n+    //[full]~^ ERROR wrong number of const arguments\n+    //[full]~| ERROR wrong number of type arguments\n+    //[full]~| ERROR mismatched types\n }"}, {"sha": "78c7ebff059855d658e38177173ffa9953c95327", "filename": "src/test/ui/const-generics/issues/issue-67185-2.full.stderr", "status": "renamed", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67185-2.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:15:1\n+  --> $DIR/issue-67185-2.rs:17:1\n    |\n LL | / trait Foo\n LL | |\n@@ -26,7 +17,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:15:1\n+  --> $DIR/issue-67185-2.rs:17:1\n    |\n LL | / trait Foo\n LL | |\n@@ -44,7 +35,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:25:6\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -60,7 +51,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:25:6\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -76,7 +67,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:29:14\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -92,7 +83,7 @@ LL | fn f(_: impl Foo) {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:29:14\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -107,6 +98,6 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`.", "previous_filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr"}, {"sha": "78c7ebff059855d658e38177173ffa9953c95327", "filename": "src/test/ui/const-generics/issues/issue-67185-2.min.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,103 @@\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1176d0c690403901d254de4caf0d356ee800f577", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "27a56b8eb02b2a0692f28bf6042155c77320600f", "filename": "src/test/ui/const-generics/issues/issue-67739.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "previous_filename": "src/test/ui/const-generics/issues/issue-67739.stderr"}, {"sha": "1254ee7239dc78877e4e205ad0a717ba89b0b270", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67739.rs:12:30\n+   |\n+LL |         [0u8; mem::size_of::<Self::Associated>()];\n+   |                              ^^^^^^^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "72bf3ee9602fc3ea451f5fce9e2bdb26284de90c", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,7 +1,7 @@\n-// Regression test for #67739\n-\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem;\n \n@@ -10,7 +10,8 @@ pub trait Trait {\n \n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n         0\n     }\n }"}, {"sha": "ac774f50c74938b23855fcc90a4a188d39589df9", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:10:13\n+  --> $DIR/issue-68366.rs:12:13\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |             ^ unconstrained const parameter\n@@ -8,7 +8,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:15:12\n+  --> $DIR/issue-68366.rs:18:12\n    |\n LL | impl<const N: usize> Foo {}\n    |            ^ unconstrained const parameter", "previous_filename": "src/test/ui/const-generics/issues/issue-68366.stderr"}, {"sha": "8d34bdc6ea0c81b59bf1f13046c90c65aca7ebd3", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,29 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68366.rs:12:37\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:12:13\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |             ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:18:12\n+   |\n+LL | impl<const N: usize> Foo {}\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "819fcaffea18cc5a601901ba2a8da515c856ae12", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -2,13 +2,16 @@\n // The note should relate to the fact that it cannot be shown forall N that it maps 1-1 to a new\n // type.\n \n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n+//[min]~^^ generic parameters must not be used inside of non trivial constant values\n \n struct Foo;\n "}, {"sha": "b4c79d4171b7ac79281eb39d8428d309c9beee9b", "filename": "src/test/ui/const-generics/issues/issue-72787.full.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,37 +1,37 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:9:32\n+  --> $DIR/issue-72787.rs:11:32\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                                ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-72787.stderr"}, {"sha": "d3e9887fe209c9c48ddfff1d73f81ce774a0b3cf", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,57 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:11:17\n+   |\n+LL |     Condition<{ LHS <= RHS }>: True\n+   |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n+   |\n+   = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:11:24\n+   |\n+LL |     Condition<{ LHS <= RHS }>: True\n+   |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n+   |\n+   = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:26:25\n+   |\n+LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n+   |\n+   = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:26:36\n+   |\n+LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n+   |                                    ^ non-trivial anonymous constants must not depend on the parameter `J`\n+   |\n+   = help: it is currently only allowed to use either `J` or `{ J }` as generic constants\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72787.rs:22:26\n+   |\n+LL | pub trait True {}\n+   | -------------- required by this bound in `True`\n+...\n+LL |     IsLessOrEqual<I, 8>: True,\n+   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |\n+   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72787.rs:22:26\n+   |\n+LL | pub trait True {}\n+   | -------------- required by this bound in `True`\n+...\n+LL |     IsLessOrEqual<I, 8>: True,\n+   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |\n+   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "45c20191c88486fdc7e16329e403bc062c65a567", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,13 +1,17 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct IsLessOrEqual<const LHS: u32, const RHS: u32>;\n pub struct Condition<const CONDITION: bool>;\n pub trait True {}\n \n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n-//~^ Error constant expression depends on a generic parameter\n+//[full]~^ Error constant expression depends on a generic parameter\n+//[min]~^^ Error generic parameters must not be used inside of non trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non trivial constant values\n {\n }\n impl True for Condition<true> {}\n@@ -16,12 +20,16 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n+//[min]~^ Error type annotations needed [E0283]\n+//[min]~| Error type annotations needed [E0283]\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-//~^ Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n+//[full]~^ constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[min]~^^^^^ Error generic parameters must not be used inside of non trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non trivial constant values\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "e4105a3df1c88f26f1c19bf7933354060ad45fb2", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72819-generic-in-const-eval.rs:7:47\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:9:47\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n    |                                               ^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.stderr"}, {"sha": "48a1f0bd19c0a8a124c63c9b9a21fc88d3fbcbca", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n+   |\n+LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "b653b91d99d144afdbe7adc7e9bc468ef117620a", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,11 +1,14 @@\n // Regression test for #72819: ICE due to failure in resolving the const generic in `Arr`'s type\n // bounds.\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n {\n }\n "}, {"sha": "c153a93cdef4f002c065fd2f9d5320a56c3c0b1d", "filename": "src/test/ui/const-generics/issues/issue-73120.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -1,3 +1,4 @@\n+// revisions: full min\n // check-pass\n // aux-build:const_generic_issues_lib.rs\n extern crate const_generic_issues_lib as lib2;"}, {"sha": "8103a7ca47d4eff5aece8d46c859e2501517dd6f", "filename": "src/test/ui/issues/issue-76077-1.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo { .. } = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible, .. } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "730332853c124bad17d776e1be9ec79895dbe4ce", "filename": "src/test/ui/issues/issue-76077-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo {} = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "4557595529fa23bf1387753ac683f21f0f15b8d7", "filename": "src/test/ui/issues/issue-76077-1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,24 @@\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:13:9\n+   |\n+LL |     let foo::Foo {} = foo::Foo::default();\n+   |         ^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Foo { .. } = foo::Foo::default();\n+   |                  ^^^^^^\n+\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:16:9\n+   |\n+LL |     let foo::Bar { visible } = foo::Bar::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Bar { visible, .. } = foo::Bar::default();\n+   |                           ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1ecd37de2e14ab85877115e96d7e43e8cc473da5", "filename": "src/test/ui/issues/issue-76077.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,10 @@\n+pub mod foo {\n+    pub struct Foo {\n+        you_cant_use_this_field: bool,\n+    }\n+}\n+\n+fn main() {\n+    foo::Foo {};\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+}"}, {"sha": "d834ec5e0edd2a8a482044c57e9e6357a5b59a81", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,8 @@\n+error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+  --> $DIR/issue-76077.rs:8:5\n+   |\n+LL |     foo::Foo {};\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "872af95bd225b4aca415642bed4c94c6bd2a23c5", "filename": "src/test/ui/parser/unsafe-foreign-mod.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,9 @@\n+unsafe extern {\n+    //~^ ERROR extern block cannot be declared unsafe\n+}\n+\n+unsafe extern \"C\" {\n+    //~^ ERROR extern block cannot be declared unsafe\n+}\n+\n+fn main() {}"}, {"sha": "5e10988051ea0892c2cf198cb99d53e38c2dcae8", "filename": "src/test/ui/parser/unsafe-foreign-mod.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,14 @@\n+error: extern block cannot be declared unsafe\n+  --> $DIR/unsafe-foreign-mod.rs:1:1\n+   |\n+LL | unsafe extern {\n+   | ^^^^^^\n+\n+error: extern block cannot be declared unsafe\n+  --> $DIR/unsafe-foreign-mod.rs:5:1\n+   |\n+LL | unsafe extern \"C\" {\n+   | ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7916d878ea585e15c9de003ccc0e4e0f55a9dab4", "filename": "src/test/ui/parser/unsafe-mod.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,9 @@\n+unsafe mod m {\n+    //~^ ERROR module cannot be declared unsafe\n+}\n+\n+unsafe mod n;\n+//~^ ERROR module cannot be declared unsafe\n+//~^^ ERROR file not found for module `n`\n+\n+fn main() {}"}, {"sha": "259b2c1d61e08f865dc856682daf10e0d9f36330", "filename": "src/test/ui/parser/unsafe-mod.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,23 @@\n+error[E0583]: file not found for module `n`\n+  --> $DIR/unsafe-mod.rs:5:1\n+   |\n+LL | unsafe mod n;\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: to create the module `n`, create file \"$DIR/n.rs\"\n+\n+error: module cannot be declared unsafe\n+  --> $DIR/unsafe-mod.rs:1:1\n+   |\n+LL | unsafe mod m {\n+   | ^^^^^^\n+\n+error: module cannot be declared unsafe\n+  --> $DIR/unsafe-mod.rs:5:1\n+   |\n+LL | unsafe mod n;\n+   | ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0583`."}, {"sha": "c72306c3d50b3d29067f7c75609b616a3ed04a88", "filename": "src/test/ui/proc-macro/auxiliary/macro-only-syntax.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-only-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-only-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-only-syntax.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,89 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+// These are tests for syntax that is accepted by the Rust parser but\n+// unconditionally rejected semantically after macro expansion. Attribute macros\n+// are permitted to accept such syntax as long as they replace it with something\n+// that makes sense to Rust.\n+//\n+// We also inspect some of the spans to verify the syntax is not triggering the\n+// lossy string reparse hack (https://github.com/rust-lang/rust/issues/43081).\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_span)]\n+\n+extern crate proc_macro;\n+use proc_macro::{token_stream, Delimiter, TokenStream, TokenTree};\n+use std::path::Component;\n+\n+// unsafe mod m {\n+//     pub unsafe mod inner;\n+// }\n+#[proc_macro_attribute]\n+pub fn expect_unsafe_mod(_attrs: TokenStream, input: TokenStream) -> TokenStream {\n+    let tokens = &mut input.into_iter();\n+    expect(tokens, \"unsafe\");\n+    expect(tokens, \"mod\");\n+    expect(tokens, \"m\");\n+    let tokens = &mut expect_brace(tokens);\n+    expect(tokens, \"pub\");\n+    expect(tokens, \"unsafe\");\n+    expect(tokens, \"mod\");\n+    let ident = expect(tokens, \"inner\");\n+    expect(tokens, \";\");\n+    check_useful_span(ident, \"unsafe-mod.rs\");\n+    TokenStream::new()\n+}\n+\n+// unsafe extern {\n+//     type T;\n+// }\n+#[proc_macro_attribute]\n+pub fn expect_unsafe_foreign_mod(_attrs: TokenStream, input: TokenStream) -> TokenStream {\n+    let tokens = &mut input.into_iter();\n+    expect(tokens, \"unsafe\");\n+    expect(tokens, \"extern\");\n+    let tokens = &mut expect_brace(tokens);\n+    expect(tokens, \"type\");\n+    let ident = expect(tokens, \"T\");\n+    expect(tokens, \";\");\n+    check_useful_span(ident, \"unsafe-foreign-mod.rs\");\n+    TokenStream::new()\n+}\n+\n+// unsafe extern \"C++\" {}\n+#[proc_macro_attribute]\n+pub fn expect_unsafe_extern_cpp_mod(_attrs: TokenStream, input: TokenStream) -> TokenStream {\n+    let tokens = &mut input.into_iter();\n+    expect(tokens, \"unsafe\");\n+    expect(tokens, \"extern\");\n+    let abi = expect(tokens, \"\\\"C++\\\"\");\n+    expect_brace(tokens);\n+    check_useful_span(abi, \"unsafe-foreign-mod.rs\");\n+    TokenStream::new()\n+}\n+\n+fn expect(tokens: &mut token_stream::IntoIter, expected: &str) -> TokenTree {\n+    match tokens.next() {\n+        Some(token) if token.to_string() == expected => token,\n+        wrong => panic!(\"unexpected token: {:?}, expected `{}`\", wrong, expected),\n+    }\n+}\n+\n+fn expect_brace(tokens: &mut token_stream::IntoIter) -> token_stream::IntoIter {\n+    match tokens.next() {\n+        Some(TokenTree::Group(group)) if group.delimiter() == Delimiter::Brace => {\n+            group.stream().into_iter()\n+        }\n+        wrong => panic!(\"unexpected token: {:?}, expected `{{`\", wrong),\n+    }\n+}\n+\n+fn check_useful_span(token: TokenTree, expected_filename: &str) {\n+    let span = token.span();\n+    assert!(span.start().column < span.end().column);\n+\n+    let source_path = span.source_file().path();\n+    let filename = source_path.components().last().unwrap();\n+    assert_eq!(filename, Component::Normal(expected_filename.as_ref()));\n+}"}, {"sha": "7bdfa93c21fc7e354ff3c65d67967e531571fbfb", "filename": "src/test/ui/proc-macro/unsafe-foreign-mod.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-foreign-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-foreign-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-foreign-mod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// aux-build:macro-only-syntax.rs\n+\n+extern crate macro_only_syntax;\n+\n+#[macro_only_syntax::expect_unsafe_foreign_mod]\n+unsafe extern {\n+    type T;\n+}\n+\n+#[macro_only_syntax::expect_unsafe_extern_cpp_mod]\n+unsafe extern \"C++\" {}\n+\n+fn main() {}"}, {"sha": "8ff6e352c53d09458b91ca0062b8b0cc82a963a9", "filename": "src/test/ui/proc-macro/unsafe-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3a6f70ac9457173aa1f3f3af372aadec915f8d/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Funsafe-mod.rs?ref=ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// aux-build:macro-only-syntax.rs\n+\n+#![feature(proc_macro_hygiene)]\n+\n+extern crate macro_only_syntax;\n+\n+#[macro_only_syntax::expect_unsafe_mod]\n+unsafe mod m {\n+    pub unsafe mod inner;\n+}\n+\n+fn main() {}"}]}