{"sha": "d6a411c086e61926aa52022b1df3a4a94e934906", "node_id": "C_kwDOAAsO6NoAKGQ2YTQxMWMwODZlNjE5MjZhYTUyMDIyYjFkZjNhNGE5NGU5MzQ5MDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-20T03:05:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-21T16:37:33Z"}, "message": "Implement some more predicates", "tree": {"sha": "a8c3f6be4950dcb23ed712419425c45a95d773ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c3f6be4950dcb23ed712419425c45a95d773ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a411c086e61926aa52022b1df3a4a94e934906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a411c086e61926aa52022b1df3a4a94e934906", "html_url": "https://github.com/rust-lang/rust/commit/d6a411c086e61926aa52022b1df3a4a94e934906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a411c086e61926aa52022b1df3a4a94e934906/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248988923195a17b14b740a4f550d87d33477916", "url": "https://api.github.com/repos/rust-lang/rust/commits/248988923195a17b14b740a4f550d87d33477916", "html_url": "https://github.com/rust-lang/rust/commit/248988923195a17b14b740a4f550d87d33477916"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "e89d3df04db0b819c78c0fbb79786132981f1690", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d6a411c086e61926aa52022b1df3a4a94e934906/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a411c086e61926aa52022b1df3a4a94e934906/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=d6a411c086e61926aa52022b1df3a4a94e934906", "patch": "@@ -26,7 +26,9 @@ use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::Obligation;\n use rustc_middle::infer::canonical::Certainty as OldCertainty;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{RegionOutlivesPredicate, ToPredicate, TypeOutlivesPredicate};\n+use rustc_middle::ty::{\n+    RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n+};\n use rustc_span::DUMMY_SP;\n \n use crate::traits::ObligationCause;\n@@ -243,16 +245,34 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => {\n                     self.compute_region_outlives_goal(Goal { param_env, predicate })\n                 }\n+                ty::PredicateKind::Subtype(predicate) => {\n+                    self.compute_subtype_goal(Goal { param_env, predicate })\n+                }\n+                ty::PredicateKind::Coerce(predicate) => self.compute_subtype_goal(Goal {\n+                    param_env,\n+                    predicate: SubtypePredicate {\n+                        a_is_expected: true,\n+                        a: predicate.a,\n+                        b: predicate.b,\n+                    },\n+                }),\n+                ty::PredicateKind::ClosureKind(_, substs, kind) => self.compute_closure_kind_goal(\n+                    substs.as_closure().kind_ty().to_opt_closure_kind(),\n+                    kind,\n+                ),\n+                ty::PredicateKind::Ambiguous => {\n+                    self.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+                }\n                 // FIXME: implement these predicates :)\n                 ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ObjectSafe(_)\n-                | ty::PredicateKind::ClosureKind(_, _, _)\n-                | ty::PredicateKind::Subtype(_)\n-                | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(_)\n-                | ty::PredicateKind::ConstEquate(_, _)\n-                | ty::PredicateKind::TypeWellFormedFromEnv(_)\n-                | ty::PredicateKind::Ambiguous => self.make_canonical_response(Certainty::Yes),\n+                | ty::PredicateKind::ConstEquate(_, _) => {\n+                    self.make_canonical_response(Certainty::Yes)\n+                }\n+                ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n+                    bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n+                }\n             }\n         } else {\n             let kind = self.infcx.replace_bound_vars_with_placeholders(kind);\n@@ -275,6 +295,36 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     ) -> QueryResult<'tcx> {\n         self.make_canonical_response(Certainty::Yes)\n     }\n+\n+    fn compute_subtype_goal(\n+        &mut self,\n+        goal: Goal<'tcx, SubtypePredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        self.infcx.probe(|_| {\n+            let InferOk { value: (), obligations } = self\n+                .infcx\n+                .at(&ObligationCause::dummy(), goal.param_env)\n+                .sub(goal.predicate.a, goal.predicate.b)?;\n+            self.evaluate_all_and_make_canonical_response(\n+                obligations.into_iter().map(|pred| pred.into()).collect(),\n+            )\n+        })\n+    }\n+\n+    fn compute_closure_kind_goal(\n+        &mut self,\n+        found_kind: Option<ty::ClosureKind>,\n+        expected_kind: ty::ClosureKind,\n+    ) -> QueryResult<'tcx> {\n+        let Some(found_kind) = found_kind else {\n+            return self.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity));\n+        };\n+        if found_kind.extends(expected_kind) {\n+            self.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}]}