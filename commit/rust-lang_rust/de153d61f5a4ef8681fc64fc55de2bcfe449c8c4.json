{"sha": "de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTUzZDYxZjVhNGVmODY4MWZjNjRmYzU1ZGUyYmNmZTQ0OWM4YzQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-10T21:30:21Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-10T22:13:55Z"}, "message": "resolve: Reserve a few very special names in macro namespace", "tree": {"sha": "82780bd162d339bc56a11dee53e2a4e42f04458d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82780bd162d339bc56a11dee53e2a4e42f04458d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "html_url": "https://github.com/rust-lang/rust/commit/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c8c97bc7151809db58756182c22032379585d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c8c97bc7151809db58756182c22032379585d9", "html_url": "https://github.com/rust-lang/rust/commit/65c8c97bc7151809db58756182c22032379585d9"}], "stats": {"total": 114, "additions": 62, "deletions": 52}, "files": [{"sha": "7733ce475e339529662808efc1f26bd04d521f96", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -1083,6 +1083,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 self.define(module, ident, MacroNS,\n                             (def, vis, item.span, expansion, IsMacroExport));\n             } else {\n+                if !attr::contains_name(&item.attrs, \"rustc_doc_only_macro\") {\n+                    self.check_reserved_macro_name(ident, MacroNS);\n+                }\n                 self.unused_macros.insert(def_id);\n             }\n         } else {"}, {"sha": "dfbea0ffe2288e370e1589f4aca0a641b72ad110", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -452,13 +452,24 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         })\n     }\n \n+    crate fn check_reserved_macro_name(&self, ident: Ident, ns: Namespace) {\n+        // Reserve some names that are not quite covered by the general check\n+        // performed on `Resolver::builtin_attrs`.\n+        if ns == MacroNS &&\n+           (ident.name == \"cfg\" || ident.name == \"cfg_attr\" || ident.name == \"derive\") {\n+            self.session.span_err(ident.span,\n+                                  &format!(\"name `{}` is reserved in macro namespace\", ident));\n+        }\n+    }\n+\n     // Define the name or return the existing binding if there is a collision.\n     pub fn try_define(&mut self,\n                       module: Module<'a>,\n                       ident: Ident,\n                       ns: Namespace,\n                       binding: &'a NameBinding<'a>)\n                       -> Result<(), &'a NameBinding<'a>> {\n+        self.check_reserved_macro_name(ident, ns);\n         self.update_resolution(module, ident, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {"}, {"sha": "9f4f0abf32486ec3fbb1dd9943990fc2db68286b", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -11,19 +11,6 @@ struct S;\n #[cfg_attr(all(), repr(C))] //~ ERROR `repr` is ambiguous\n struct SCond;\n \n-#[cfg(all())] //~ ERROR `cfg` is ambiguous\n-struct A;\n-#[cfg(any())] // ERROR FIXME\n-struct A;\n-\n-#[cfg_attr(all(), cold)] // ERROR FIXME\n-fn g() {}\n-#[cfg_attr(any(), cold)] // ERROR FIXME\n-fn h() {}\n-\n-#[derive(Clone)] // ERROR FIXME\n-struct B;\n-\n #[test] // OK, shadowed\n fn test() {}\n "}, {"sha": "ea867faf47bb6b7ee017076e3d93bdec466f8bb6", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -34,26 +34,8 @@ LL | #[cfg_attr(all(), repr(C))] //~ ERROR `repr` is ambiguous\n    |                   ^^^^\n    = note: consider adding an explicit import of `repr` to disambiguate\n \n-error[E0659]: `cfg` is ambiguous\n-  --> $DIR/ambiguous-builtin-attrs.rs:14:3\n-   |\n-LL | #[cfg(all())] //~ ERROR `cfg` is ambiguous\n-   |   ^^^ ambiguous name\n-   |\n-note: `cfg` could refer to the name imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n-   |\n-LL | use builtin_attrs::*;\n-   |     ^^^^^^^^^^^^^^^^\n-note: `cfg` could also refer to the name defined here\n-  --> $DIR/ambiguous-builtin-attrs.rs:14:3\n-   |\n-LL | #[cfg(all())] //~ ERROR `cfg` is ambiguous\n-   |   ^^^\n-   = note: consider adding an explicit import of `cfg` to disambiguate\n-\n error[E0659]: `repr` is ambiguous\n-  --> $DIR/ambiguous-builtin-attrs.rs:33:34\n+  --> $DIR/ambiguous-builtin-attrs.rs:20:34\n    |\n LL | fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n    |                                  ^^^^ ambiguous name\n@@ -64,14 +46,14 @@ note: `repr` could refer to the name imported here\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n note: `repr` could also refer to the name defined here\n-  --> $DIR/ambiguous-builtin-attrs.rs:33:34\n+  --> $DIR/ambiguous-builtin-attrs.rs:20:34\n    |\n LL | fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n    |                                  ^^^^\n    = note: consider adding an explicit import of `repr` to disambiguate\n \n error[E0659]: `repr` is ambiguous\n-  --> $DIR/ambiguous-builtin-attrs.rs:35:11\n+  --> $DIR/ambiguous-builtin-attrs.rs:22:11\n    |\n LL |         #[repr(C)] //~ ERROR `repr` is ambiguous\n    |           ^^^^ ambiguous name\n@@ -82,7 +64,7 @@ note: `repr` could refer to the name imported here\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n note: `repr` could also refer to the name defined here\n-  --> $DIR/ambiguous-builtin-attrs.rs:35:11\n+  --> $DIR/ambiguous-builtin-attrs.rs:22:11\n    |\n LL |         #[repr(C)] //~ ERROR `repr` is ambiguous\n    |           ^^^^\n@@ -107,12 +89,12 @@ LL | #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n    = note: consider adding an explicit import of `feature` to disambiguate\n \n error[E0425]: cannot find value `NonExistent` in this scope\n-  --> $DIR/ambiguous-builtin-attrs.rs:43:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:30:5\n    |\n LL |     NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n    |     ^^^^^^^^^^^ not found in this scope\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0425, E0659.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "e18ca57aab1fcdf9ca223dcb7de7c59e827bbfd3", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -25,21 +25,6 @@ pub fn repr(_: TokenStream, input: TokenStream) -> TokenStream {\n     input\n }\n \n-#[proc_macro_attribute]\n-pub fn cfg(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_attribute]\n-pub fn cfg_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_attribute]\n-pub fn derive(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n #[proc_macro_attribute]\n pub fn test(_: TokenStream, input: TokenStream) -> TokenStream {\n     \"struct Test;\".parse().unwrap()"}, {"sha": "ff5984aa67c7acdc48af3a89c7cd73ee7520bc80", "filename": "src/test/ui-fulldeps/proc-macro/reserved-macro-names.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.rs?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -0,0 +1,22 @@\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn cfg(_: TokenStream, input: TokenStream) -> TokenStream {\n+    //~^ ERROR name `cfg` is reserved in macro namespace\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn cfg_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    //~^ ERROR name `cfg_attr` is reserved in macro namespace\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn derive(_: TokenStream, input: TokenStream) -> TokenStream {\n+    //~^ ERROR name `derive` is reserved in macro namespace\n+    input\n+}"}, {"sha": "be6e80c3878e18498dfb16ee985fafe9abe5266c", "filename": "src/test/ui-fulldeps/proc-macro/reserved-macro-names.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de153d61f5a4ef8681fc64fc55de2bcfe449c8c4/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Freserved-macro-names.stderr?ref=de153d61f5a4ef8681fc64fc55de2bcfe449c8c4", "patch": "@@ -0,0 +1,20 @@\n+error: name `cfg` is reserved in macro namespace\n+  --> $DIR/reserved-macro-names.rs:7:8\n+   |\n+LL | pub fn cfg(_: TokenStream, input: TokenStream) -> TokenStream {\n+   |        ^^^\n+\n+error: name `cfg_attr` is reserved in macro namespace\n+  --> $DIR/reserved-macro-names.rs:13:8\n+   |\n+LL | pub fn cfg_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+   |        ^^^^^^^^\n+\n+error: name `derive` is reserved in macro namespace\n+  --> $DIR/reserved-macro-names.rs:19:8\n+   |\n+LL | pub fn derive(_: TokenStream, input: TokenStream) -> TokenStream {\n+   |        ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}