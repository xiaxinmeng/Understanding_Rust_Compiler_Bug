{"sha": "6021c231599eabcb07b3a8207bddbb3796c93eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMjFjMjMxNTk5ZWFiY2IwN2IzYTgyMDdiZGRiYjM3OTZjOTNlZWU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2020-10-11T11:27:20Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-11T20:04:59Z"}, "message": "New lint: result-unit-err", "tree": {"sha": "02bc4f339a502841b59e961acbce5602e4918eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bc4f339a502841b59e961acbce5602e4918eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6021c231599eabcb07b3a8207bddbb3796c93eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6021c231599eabcb07b3a8207bddbb3796c93eee", "html_url": "https://github.com/rust-lang/rust/commit/6021c231599eabcb07b3a8207bddbb3796c93eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6021c231599eabcb07b3a8207bddbb3796c93eee/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ead65d611af5a63ad32a42c713e0f1b73b8b135", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ead65d611af5a63ad32a42c713e0f1b73b8b135", "html_url": "https://github.com/rust-lang/rust/commit/9ead65d611af5a63ad32a42c713e0f1b73b8b135"}], "stats": {"total": 212, "additions": 189, "deletions": 23}, "files": [{"sha": "f21768c449880c97c8abcd008fa6205c2700c0a8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1918,6 +1918,7 @@ Released 2018-09-13\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n+[`result_unit_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push"}, {"sha": "212a31006370790fd663b4eb2e15c94d04583142", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 93, "deletions": 13, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::{\n-    attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, iter_input_pats, match_def_path,\n-    must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then,\n-    trait_ref_of_method, type_is_unsafe_function,\n+    attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n+    last_path_segment, match_def_path, must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint,\n+    span_lint_and_help, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n };\n+use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -16,6 +17,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;\n+use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for functions with too many parameters.\n@@ -169,6 +171,52 @@ declare_clippy_lint! {\n     \"function or method that could take a `#[must_use]` attribute\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for public functions that return a `Result`\n+    /// with an `Err` type of `()`. It suggests using a custom type that\n+    /// implements [`std::error::Error`].\n+    ///\n+    /// **Why is this bad?** Unit does not implement `Error` and carries no\n+    /// further information about what went wrong.\n+    ///\n+    /// **Known problems:** Of course, this lint assumes that `Result` is used\n+    /// for a fallible operation (which is after all the intended use). However\n+    /// code may opt to (mis)use it as a basic two-variant-enum. In that case,\n+    /// the suggestion is misguided, and the code should use a custom enum\n+    /// instead.\n+    ///\n+    /// **Examples:**\n+    /// ```rust\n+    /// pub fn read_u8() -> Result<u8, ()> { Err(()) }\n+    /// ```\n+    /// should become\n+    /// ```rust,should_panic\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct EndOfStream;\n+    ///\n+    /// impl fmt::Display for EndOfStream {\n+    /// \tfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///\t\t\twrite!(f, \"End of Stream\")\n+    /// \t}\n+    /// }\n+    ///\n+    /// impl std::error::Error for EndOfStream { }\n+    ///\n+    /// pub fn read_u8() -> Result<u8, EndOfStream> { Err(EndOfStream) }\n+    ///# fn main() {\n+    ///# \tread_u8().unwrap();\n+    ///# }\n+    /// ```\n+    ///\n+    /// Note that there are crates that simplify creating the error type, e.g.\n+    /// [`thiserror`](https://docs.rs/thiserror).\n+    pub RESULT_UNIT_ERR,\n+    style,\n+    \"public function returning `Result` with an `Err` type of `()`\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     threshold: u64,\n@@ -188,6 +236,7 @@ impl_lint_pass!(Functions => [\n     MUST_USE_UNIT,\n     DOUBLE_MUST_USE,\n     MUST_USE_CANDIDATE,\n+    RESULT_UNIT_ERR,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -233,15 +282,16 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         let attr = must_use_attr(&item.attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n+            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+            if is_public {\n+                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+            }\n             if let Some(attr) = attr {\n-                let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n                 return;\n             }\n-            if cx.access_levels.is_exported(item.hir_id)\n-                && !is_proc_macro(cx.sess(), &item.attrs)\n-                && attr_by_name(&item.attrs, \"no_mangle\").is_none()\n-            {\n+            if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n@@ -257,11 +307,15 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n+            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+            if is_public && trait_ref_of_method(cx, item.hir_id).is_none() {\n+                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+            }\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n-            } else if cx.access_levels.is_exported(item.hir_id)\n+            } else if is_public\n                 && !is_proc_macro(cx.sess(), &item.attrs)\n                 && trait_ref_of_method(cx, item.hir_id).is_none()\n             {\n@@ -284,18 +338,21 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if sig.header.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));\n             }\n+            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+            if is_public {\n+                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+            }\n \n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n \n-                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(cx.sess(), &item.attrs)\n-                {\n+                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,\n@@ -411,6 +468,29 @@ impl<'tcx> Functions {\n     }\n }\n \n+fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span: Span, fn_header_span: Span) {\n+    if_chain! {\n+        if !in_external_macro(cx.sess(), item_span);\n+        if let hir::FnRetTy::Return(ref ty) = decl.output;\n+        if let hir::TyKind::Path(ref qpath) = ty.kind;\n+        if is_type_diagnostic_item(cx, hir_ty_to_ty(cx.tcx, ty), sym!(result_type));\n+        if let Some(ref args) = last_path_segment(qpath).args;\n+        if let [_, hir::GenericArg::Type(ref err_ty)] = args.args;\n+        if let hir::TyKind::Tup(t) = err_ty.kind;\n+        if t.is_empty();\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                RESULT_UNIT_ERR,\n+                fn_header_span,\n+                \"This returns a `Result<_, ()>\",\n+                None,\n+                \"Use a custom Error type instead\",\n+            );\n+        }\n+    }\n+}\n+\n fn check_needless_must_use(\n     cx: &LateContext<'_>,\n     decl: &hir::FnDecl<'_>,"}, {"sha": "26a727687b1d148ee52d4fb26ca7376f41334412", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -582,6 +582,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &functions::MUST_USE_CANDIDATE,\n         &functions::MUST_USE_UNIT,\n         &functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+        &functions::RESULT_UNIT_ERR,\n         &functions::TOO_MANY_ARGUMENTS,\n         &functions::TOO_MANY_LINES,\n         &future_not_send::FUTURE_NOT_SEND,\n@@ -1327,6 +1328,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+        LintId::of(&functions::RESULT_UNIT_ERR),\n         LintId::of(&functions::TOO_MANY_ARGUMENTS),\n         LintId::of(&get_last_with_len::GET_LAST_WITH_LEN),\n         LintId::of(&identity_op::IDENTITY_OP),\n@@ -1558,6 +1560,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n+        LintId::of(&functions::RESULT_UNIT_ERR),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),"}, {"sha": "d0fc8f0c8a907113835ee573f3bfc73a4d85d812", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -2005,6 +2005,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n+    Lint {\n+        name: \"result_unit_err\",\n+        group: \"style\",\n+        desc: \"public function returning `Result` with an `Err` type of `()`\",\n+        deprecation: None,\n+        module: \"functions\",\n+    },\n     Lint {\n         name: \"reversed_empty_ranges\",\n         group: \"correctness\","}, {"sha": "f47b81a450ea937c2bd142e47bdb9b0f140620bf", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1,5 +1,6 @@\n // edition:2018\n #![warn(clippy::missing_errors_doc)]\n+#![allow(clippy::result_unit_err)]\n \n use std::io;\n "}, {"sha": "c7b616e2897087c01ee59976e37fe287afb6dbbc", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:6:1\n+  --> $DIR/doc_errors.rs:7:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -9,47 +9,47 @@ LL | | }\n    = note: `-D clippy::missing-errors-doc` implied by `-D warnings`\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:10:1\n+  --> $DIR/doc_errors.rs:11:1\n    |\n LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:15:1\n+  --> $DIR/doc_errors.rs:16:1\n    |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:20:1\n+  --> $DIR/doc_errors.rs:21:1\n    |\n LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:50:5\n+  --> $DIR/doc_errors.rs:51:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:55:5\n+  --> $DIR/doc_errors.rs:56:5\n    |\n LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:84:5\n+  --> $DIR/doc_errors.rs:85:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "05e087b08bc14271fda5427614296151c5f82205", "filename": "tests/ui/double_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdouble_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdouble_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::double_must_use)]\n+#![allow(clippy::result_unit_err)]\n \n #[must_use]\n pub fn must_use_result() -> Result<(), ()> {"}, {"sha": "8290ece1cad187dc9428f5a1f26e07247a0d36a1", "filename": "tests/ui/double_must_use.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdouble_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fdouble_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.stderr?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -1,5 +1,5 @@\n error: this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\n-  --> $DIR/double_must_use.rs:4:1\n+  --> $DIR/double_must_use.rs:5:1\n    |\n LL | pub fn must_use_result() -> Result<(), ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL | pub fn must_use_result() -> Result<(), ()> {\n    = help: either add some descriptive text or remove the attribute\n \n error: this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\n-  --> $DIR/double_must_use.rs:9:1\n+  --> $DIR/double_must_use.rs:10:1\n    |\n LL | pub fn must_use_tuple() -> (Result<(), ()>, u8) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: either add some descriptive text or remove the attribute\n \n error: this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\n-  --> $DIR/double_must_use.rs:14:1\n+  --> $DIR/double_must_use.rs:15:1\n    |\n LL | pub fn must_use_array() -> [Result<(), ()>; 1] {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a66f581b2159f02058a9e29e1f64f416f257feb7", "filename": "tests/ui/result_unit_error.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fresult_unit_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fresult_unit_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.rs?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -0,0 +1,38 @@\n+#[warn(clippy::result_unit_err)]\n+#[allow(unused)]\n+\n+pub fn returns_unit_error() -> Result<u32, ()> {\n+    Err(())\n+}\n+\n+fn private_unit_errors() -> Result<String, ()> {\n+    Err(())\n+}\n+\n+pub trait HasUnitError {\n+    fn get_that_error(&self) -> Result<bool, ()>;\n+\n+    fn get_this_one_too(&self) -> Result<bool, ()> {\n+        Err(())\n+    }\n+}\n+\n+impl HasUnitError for () {\n+    fn get_that_error(&self) -> Result<bool, ()> {\n+        Ok(true)\n+    }\n+}\n+\n+trait PrivateUnitError {\n+    fn no_problem(&self) -> Result<usize, ()>;\n+}\n+\n+pub struct UnitErrorHolder;\n+\n+impl UnitErrorHolder {\n+    pub fn unit_error(&self) -> Result<usize, ()> {\n+        Ok(0)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "986d9718acdbff5fe3d77adaf48a1b6fa0919e38", "filename": "tests/ui/result_unit_error.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fresult_unit_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6021c231599eabcb07b3a8207bddbb3796c93eee/tests%2Fui%2Fresult_unit_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.stderr?ref=6021c231599eabcb07b3a8207bddbb3796c93eee", "patch": "@@ -0,0 +1,35 @@\n+error: This returns a `Result<_, ()>\n+  --> $DIR/result_unit_error.rs:4:1\n+   |\n+LL | pub fn returns_unit_error() -> Result<u32, ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::result-unit-err` implied by `-D warnings`\n+   = help: Use a custom Error type instead\n+\n+error: This returns a `Result<_, ()>\n+  --> $DIR/result_unit_error.rs:13:5\n+   |\n+LL |     fn get_that_error(&self) -> Result<bool, ()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use a custom Error type instead\n+\n+error: This returns a `Result<_, ()>\n+  --> $DIR/result_unit_error.rs:15:5\n+   |\n+LL |     fn get_this_one_too(&self) -> Result<bool, ()> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use a custom Error type instead\n+\n+error: This returns a `Result<_, ()>\n+  --> $DIR/result_unit_error.rs:33:5\n+   |\n+LL |     pub fn unit_error(&self) -> Result<usize, ()> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use a custom Error type instead\n+\n+error: aborting due to 4 previous errors\n+"}]}