{"sha": "28457e10f550fbd580e56d7cbfc80e85330d6445", "node_id": "C_kwDOAAsO6NoAKDI4NDU3ZTEwZjU1MGZiZDU4MGU1NmQ3Y2JmYzgwZTg1MzMwZDY0NDU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-26T00:51:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T00:51:41Z"}, "message": "Rollup merge of #99920 - emarteca:custom-allocator-support, r=oli-obk\n\nCustom allocator support in `rustc_serialize`\n\nAdding support for `rustc_serialize` encode/decode for `Box` and `Vec` that use a custom allocator.", "tree": {"sha": "2f360ac519cf765e3e3d4158a468380602b529d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f360ac519cf765e3e3d4158a468380602b529d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28457e10f550fbd580e56d7cbfc80e85330d6445", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCBkdCRBK7hj4Ov3rIwAAnKYIAKeGNzDJCNTs8sydyJB/tDkV\njdKPv9aoe2iNuC+Ud7BHqUON9I7TKGhsgfz53C7eRoj6qBHQjvd00LJfykMXPCqR\nDHsuVi26KZYerYXChR0ozCO/rWomlFG9It3mqCJQIlAb2EbfxIFQ63KiWoeONm4J\ntyGvA5ccGjrhMgA0i6Nv3rODTFl1shIadqtZ8dbiM2iREwdEsIn9A45bzouFdTtv\n503lp4ZBNnNYrODR6SHbv/MgORVi9aADV0z6rEq74quRbjMjkxJV1BMsqxufwYge\no/vXZ/iSNcwkdSiJuWCxSkYS9546XtR2AAMUkI05QkJeJWWOh03ax6+wVEqN1ZY=\n=GlYk\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f360ac519cf765e3e3d4158a468380602b529d7\nparent f7f80c27f21e0dbe9e5d1018dadf58ef31a415cc\nparent 258d3672f0a99a766705e11890bcd59079edcc7e\nauthor Yuki Okushi <jtitor@2k36.org> 1661475101 +0900\ncommitter GitHub <noreply@github.com> 1661475101 +0900\n\nRollup merge of #99920 - emarteca:custom-allocator-support, r=oli-obk\n\nCustom allocator support in `rustc_serialize`\n\nAdding support for `rustc_serialize` encode/decode for `Box` and `Vec` that use a custom allocator.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28457e10f550fbd580e56d7cbfc80e85330d6445", "html_url": "https://github.com/rust-lang/rust/commit/28457e10f550fbd580e56d7cbfc80e85330d6445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28457e10f550fbd580e56d7cbfc80e85330d6445/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f80c27f21e0dbe9e5d1018dadf58ef31a415cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f80c27f21e0dbe9e5d1018dadf58ef31a415cc", "html_url": "https://github.com/rust-lang/rust/commit/f7f80c27f21e0dbe9e5d1018dadf58ef31a415cc"}, {"sha": "258d3672f0a99a766705e11890bcd59079edcc7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/258d3672f0a99a766705e11890bcd59079edcc7e", "html_url": "https://github.com/rust-lang/rust/commit/258d3672f0a99a766705e11890bcd59079edcc7e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "91f4cfaf5acaae528923df6084c4871229d230d5", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28457e10f550fbd580e56d7cbfc80e85330d6445/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28457e10f550fbd580e56d7cbfc80e85330d6445/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=28457e10f550fbd580e56d7cbfc80e85330d6445", "patch": "@@ -16,6 +16,7 @@ Core encoding and decoding interfaces.\n #![feature(maybe_uninit_slice)]\n #![feature(let_else)]\n #![feature(new_uninit)]\n+#![feature(allocator_api)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "751b209f11a3a899614b80a6e20f7d830f646da1", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28457e10f550fbd580e56d7cbfc80e85330d6445/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28457e10f550fbd580e56d7cbfc80e85330d6445/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=28457e10f550fbd580e56d7cbfc80e85330d6445", "patch": "@@ -4,6 +4,7 @@\n Core encoding and decoding interfaces.\n */\n \n+use std::alloc::Allocator;\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::marker::PhantomData;\n@@ -229,9 +230,9 @@ impl<D: Decoder, T> Decodable<D> for PhantomData<T> {\n     }\n }\n \n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Box<[T]> {\n-    fn decode(d: &mut D) -> Box<[T]> {\n-        let v: Vec<T> = Decodable::decode(d);\n+impl<D: Decoder, A: Allocator + Default, T: Decodable<D>> Decodable<D> for Box<[T], A> {\n+    fn decode(d: &mut D) -> Box<[T], A> {\n+        let v: Vec<T, A> = Decodable::decode(d);\n         v.into_boxed_slice()\n     }\n }\n@@ -264,12 +265,13 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n     }\n }\n \n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n-    default fn decode(d: &mut D) -> Vec<T> {\n+impl<D: Decoder, T: Decodable<D>, A: Allocator + Default> Decodable<D> for Vec<T, A> {\n+    default fn decode(d: &mut D) -> Vec<T, A> {\n         let len = d.read_usize();\n+        let allocator = A::default();\n         // SAFETY: we set the capacity in advance, only write elements, and\n         // only set the length at the end once the writing has succeeded.\n-        let mut vec = Vec::with_capacity(len);\n+        let mut vec = Vec::with_capacity_in(len, allocator);\n         unsafe {\n             let ptr: *mut T = vec.as_mut_ptr();\n             for i in 0..len {\n@@ -457,13 +459,15 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Arc<T> {\n     }\n }\n \n-impl<S: Encoder, T: ?Sized + Encodable<S>> Encodable<S> for Box<T> {\n+impl<S: Encoder, T: ?Sized + Encodable<S>, A: Allocator + Default> Encodable<S> for Box<T, A> {\n     fn encode(&self, s: &mut S) {\n-        (**self).encode(s);\n+        (**self).encode(s)\n     }\n }\n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Box<T> {\n-    fn decode(d: &mut D) -> Box<T> {\n-        Box::new(Decodable::decode(d))\n+\n+impl<D: Decoder, A: Allocator + Default, T: Decodable<D>> Decodable<D> for Box<T, A> {\n+    fn decode(d: &mut D) -> Box<T, A> {\n+        let allocator = A::default();\n+        Box::new_in(Decodable::decode(d), allocator)\n     }\n }"}]}