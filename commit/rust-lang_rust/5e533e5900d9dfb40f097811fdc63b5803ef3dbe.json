{"sha": "5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTMzZTU5MDBkOWRmYjQwZjA5NzgxMWZkYzYzYjU4MDNlZjNkYmU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T20:48:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T20:48:38Z"}, "message": "Handle all rename special cases for all record pattern fields", "tree": {"sha": "4fe227e7ece2de40a02130057894e4cd37c9e448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe227e7ece2de40a02130057894e4cd37c9e448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "html_url": "https://github.com/rust-lang/rust/commit/5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "html_url": "https://github.com/rust-lang/rust/commit/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723"}], "stats": {"total": 135, "additions": 112, "deletions": 23}, "files": [{"sha": "39c5861542967fffa9b36488588ab1480db74d62", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "patch": "@@ -1332,9 +1332,71 @@ fn foo(foo: Foo) {\n struct Foo { baz: i32 }\n \n fn foo(foo: Foo) {\n-    let Foo { ref baz @ qux } = foo;\n+    let Foo { baz: ref baz @ qux } = foo;\n     let _ = qux;\n }\n+\"#,\n+        );\n+        check(\n+            \"baz\",\n+            r#\"\n+struct Foo { i$0: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: ref baz } = foo;\n+    let _ = qux;\n+}\n+\"#,\n+            r#\"\n+struct Foo { baz: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { ref baz } = foo;\n+    let _ = qux;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_local_pat_into_shorthand() {\n+        cov_mark::check!(test_rename_local_put_init_shorthand_pat);\n+        check(\n+            \"field\",\n+            r#\"\n+struct Foo { field: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { field: qux$0 } = foo;\n+    let _ = qux;\n+}\n+\"#,\n+            r#\"\n+struct Foo { field: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { field } = foo;\n+    let _ = field;\n+}\n+\"#,\n+        );\n+        check(\n+            \"field\",\n+            r#\"\n+struct Foo { field: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { field: x @ qux$0 } = foo;\n+    let _ = qux;\n+}\n+\"#,\n+            r#\"\n+struct Foo { field: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { field: x @ field } = foo;\n+    let _ = field;\n+}\n \"#,\n         );\n     }\n@@ -1390,7 +1452,7 @@ struct Foo {\n     i: i32\n }\n \n-fn foo(Foo { i }: foo) -> i32 {\n+fn foo(Foo { i }: Foo) -> i32 {\n     i$0\n }\n \"#,\n@@ -1399,7 +1461,7 @@ struct Foo {\n     i: i32\n }\n \n-fn foo(Foo { i: bar }: foo) -> i32 {\n+fn foo(Foo { i: bar }: Foo) -> i32 {\n     bar\n }\n \"#,"}, {"sha": "a672c1091740eda50db145d38fb7c0491ef30887", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "patch": "@@ -120,11 +120,11 @@ impl ImportAssets {\n     }\n \n     pub fn for_ident_pat(pat: &ast::IdentPat, sema: &Semantics<RootDatabase>) -> Option<Self> {\n-        let name = pat.name()?;\n-        let candidate_node = pat.syntax().clone();\n         if !pat.is_simple_ident() {\n             return None;\n         }\n+        let name = pat.name()?;\n+        let candidate_node = pat.syntax().clone();\n         Some(Self {\n             import_candidate: ImportCandidate::for_name(sema, &name)?,\n             module_with_candidate: sema.scope(&candidate_node).module()?,"}, {"sha": "6d8d8a2b8fb693a873f42b1fb9c9f52231e35ec8", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "patch": "@@ -320,6 +320,7 @@ pub fn source_edit_from_references(\n         .unwrap_or_else(|| (reference.range, new_name.to_string()));\n         edit.replace(range, replacement);\n     }\n+\n     edit.finish()\n }\n \n@@ -334,6 +335,7 @@ fn source_edit_from_name(name: &ast::Name, new_name: &str) -> Option<(TextRange,\n             ));\n         }\n     }\n+\n     None\n }\n \n@@ -387,7 +389,9 @@ fn source_edit_from_name_ref(\n         let rcf_pat = record_field.pat();\n         match (rcf_name_ref, rcf_pat) {\n             // field: rename\n-            (Some(field_name), Some(ast::Pat::IdentPat(pat))) if field_name == *name_ref => {\n+            (Some(field_name), Some(ast::Pat::IdentPat(pat)))\n+                if field_name == *name_ref && pat.at_token().is_none() =>\n+            {\n                 // field name is being renamed\n                 if pat.name().map_or(false, |it| it.text() == new_name) {\n                     cov_mark::hit!(test_rename_field_put_init_shorthand_pat);\n@@ -412,32 +416,52 @@ fn source_edit_from_def(\n     def: Definition,\n     new_name: &str,\n ) -> Result<(FileId, TextEdit)> {\n-    let frange = def\n+    let FileRange { file_id, range } = def\n         .range_for_rename(sema)\n         .ok_or_else(|| format_err!(\"No identifier available to rename\"))?;\n \n-    let mut replacement_text = String::new();\n-    let mut repl_range = frange.range;\n+    let mut edit = TextEdit::builder();\n     if let Definition::Local(local) = def {\n         if let Either::Left(pat) = local.source(sema.db).value {\n-            if matches!(\n-                pat.syntax().parent().and_then(ast::RecordPatField::cast),\n-                Some(pat_field) if pat_field.name_ref().is_none()\n-            ) {\n-                replacement_text.push_str(\": \");\n-                replacement_text.push_str(new_name);\n-                repl_range = TextRange::new(\n-                    pat.syntax().text_range().end(),\n-                    pat.syntax().text_range().end(),\n-                );\n+            // special cases required for renaming fields/locals in Record patterns\n+            if let Some(pat_field) = pat.syntax().parent().and_then(ast::RecordPatField::cast) {\n+                let name_range = pat.name().unwrap().syntax().text_range();\n+                if let Some(name_ref) = pat_field.name_ref() {\n+                    if new_name == name_ref.text() && pat.at_token().is_none() {\n+                        // Foo { field: ref mut local } -> Foo { ref mut field }\n+                        //       ^^^^^^ delete this\n+                        //                      ^^^^^ replace this with `field`\n+                        cov_mark::hit!(test_rename_local_put_init_shorthand_pat);\n+                        edit.delete(\n+                            name_ref\n+                                .syntax()\n+                                .text_range()\n+                                .cover_offset(pat.syntax().text_range().start()),\n+                        );\n+                        edit.replace(name_range, name_ref.text().to_string());\n+                    } else {\n+                        // Foo { field: ref mut local @ local 2} -> Foo { field: ref mut new_name @ local2 }\n+                        // Foo { field: ref mut local } -> Foo { field: ref mut new_name }\n+                        //                      ^^^^^ replace this with `new_name`\n+                        edit.replace(name_range, new_name.to_string());\n+                    }\n+                } else {\n+                    // Foo { ref mut field } -> Foo { field: ref mut new_name }\n+                    //      ^ insert `field: `\n+                    //               ^^^^^ replace this with `new_name`\n+                    edit.insert(\n+                        pat.syntax().text_range().start(),\n+                        format!(\"{}: \", pat_field.field_name().unwrap()),\n+                    );\n+                    edit.replace(name_range, new_name.to_string());\n+                }\n             }\n         }\n     }\n-    if replacement_text.is_empty() {\n-        replacement_text.push_str(new_name);\n+    if edit.is_empty() {\n+        edit.replace(range, new_name.to_string());\n     }\n-    let edit = TextEdit::replace(repl_range, replacement_text);\n-    Ok((frange.file_id, edit))\n+    Ok((file_id, edit.finish()))\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]"}, {"sha": "a43ffe202ffcc753c837223b2fd3f6780ff89808", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e533e5900d9dfb40f097811fdc63b5803ef3dbe/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "patch": "@@ -159,6 +159,9 @@ impl<'a> IntoIterator for &'a TextEdit {\n }\n \n impl TextEditBuilder {\n+    pub fn is_empty(&self) -> bool {\n+        self.indels.is_empty()\n+    }\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n         self.indel(Indel::replace(range, replace_with))\n     }"}]}