{"sha": "c9b45e601065c3fb71a4f67481e912391d075621", "node_id": "C_kwDOAAsO6NoAKGM5YjQ1ZTYwMTA2NWMzZmI3MWE0ZjY3NDgxZTkxMjM5MWQwNzU2MjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T16:37:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T16:37:55Z"}, "message": "Auto merge of #90253 - Kobzol:hash-stable-sort-index-map, r=cjgillot\n\nChange several HashMaps to IndexMap to improve incremental hashing performance\n\nStable hashing hash maps in incremental mode takes a lot of time, especially for some benchmarks like `clap`. As noted by `@Mark-Simulacrum` [here](https://github.com/rust-lang/rust/pull/89404#issuecomment-950043892), this cost could be reduced by replacing some hash maps by indexmaps.\n\nI gathered some statistics and found several hash maps that took a lot of time to hash and replaced them by indexmaps. However, in order for this to work, we need to make sure that these indexmaps have deterministic insertion order. These three are used only in visitors as far as I can see, which seems deterministic. Can we enforce this somehow? Or should some explaining comment be included for these maps?", "tree": {"sha": "694d96049e14aeaa5b297381d3faef4b20b46eed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/694d96049e14aeaa5b297381d3faef4b20b46eed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b45e601065c3fb71a4f67481e912391d075621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b45e601065c3fb71a4f67481e912391d075621", "html_url": "https://github.com/rust-lang/rust/commit/c9b45e601065c3fb71a4f67481e912391d075621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b45e601065c3fb71a4f67481e912391d075621/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8604faddc44b27a59d1a719ff6ceca8bc145eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8604faddc44b27a59d1a719ff6ceca8bc145eb", "html_url": "https://github.com/rust-lang/rust/commit/af8604faddc44b27a59d1a719ff6ceca8bc145eb"}, {"sha": "e475a49452b5629dac33eee8139d862da7d1dea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e475a49452b5629dac33eee8139d862da7d1dea3", "html_url": "https://github.com/rust-lang/rust/commit/e475a49452b5629dac33eee8139d862da7d1dea3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "12fa5a13de885cdcd7037907891cce8def8271c9", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b45e601065c3fb71a4f67481e912391d075621/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b45e601065c3fb71a4f67481e912391d075621/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=c9b45e601065c3fb71a4f67481e912391d075621", "patch": "@@ -7,7 +7,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use crate::ty::TyCtxt;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::Node;\n@@ -214,14 +214,14 @@ pub struct ScopeTree {\n     /// conditional expression or repeating block. (Note that the\n     /// enclosing scope ID for the block associated with a closure is\n     /// the closure itself.)\n-    pub parent_map: FxHashMap<Scope, (Scope, ScopeDepth)>,\n+    pub parent_map: FxIndexMap<Scope, (Scope, ScopeDepth)>,\n \n     /// Maps from a variable or binding ID to the block in which that\n     /// variable is declared.\n-    var_map: FxHashMap<hir::ItemLocalId, Scope>,\n+    var_map: FxIndexMap<hir::ItemLocalId, Scope>,\n \n     /// Maps from a `NodeId` to the associated destruction scope (if any).\n-    destruction_scopes: FxHashMap<hir::ItemLocalId, Scope>,\n+    destruction_scopes: FxIndexMap<hir::ItemLocalId, Scope>,\n \n     /// `rvalue_scopes` includes entries for those expressions whose\n     /// cleanup scope is larger than the default. The map goes from the"}]}