{"sha": "d40b5374055086df88727925872f0733843f9d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MGI1Mzc0MDU1MDg2ZGY4ODcyNzkyNTg3MmYwNzMzODQzZjlkMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-14T09:41:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-14T09:41:46Z"}, "message": "auto merge of #12192 : luqmana/rust/fix-cross, r=alexcrichton\n\nFix some fall out from the big command line option changes.", "tree": {"sha": "f15eb3389b4a9e181e7e2d7e9fd5b964cb34f9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15eb3389b4a9e181e7e2d7e9fd5b964cb34f9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d40b5374055086df88727925872f0733843f9d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d40b5374055086df88727925872f0733843f9d2e", "html_url": "https://github.com/rust-lang/rust/commit/d40b5374055086df88727925872f0733843f9d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d40b5374055086df88727925872f0733843f9d2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b324ff4481255a371bb234fc3e53bcb8d08e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b324ff4481255a371bb234fc3e53bcb8d08e7e", "html_url": "https://github.com/rust-lang/rust/commit/03b324ff4481255a371bb234fc3e53bcb8d08e7e"}, {"sha": "ffdda22aa28b9231bd3d62ee4db5239f616fce8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdda22aa28b9231bd3d62ee4db5239f616fce8d", "html_url": "https://github.com/rust-lang/rust/commit/ffdda22aa28b9231bd3d62ee4db5239f616fce8d"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "26222f74fe6302867ee00230b3708477d21d0746", "filename": "mk/platform.mk", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d40b5374055086df88727925872f0733843f9d2e/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d40b5374055086df88727925872f0733843f9d2e/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=d40b5374055086df88727925872f0733843f9d2e", "patch": "@@ -300,7 +300,7 @@ CFG_PATH_MUNGE_arm-linux-androideabi := true\n CFG_LDPATH_arm-linux-androideabi :=\n CFG_RUN_arm-linux-androideabi=\n CFG_RUN_TARG_arm-linux-androideabi=\n-RUSTC_FLAGS_arm-linux-androideabi :=-C android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n+RUSTC_FLAGS_arm-linux-androideabi :=\n RUSTC_CROSS_FLAGS_arm-linux-androideabi :=-C android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n \n # arm-unknown-linux-gnueabihf configuration\n@@ -331,7 +331,7 @@ CFG_LDPATH_arm-unknown-linux-gnueabihf :=\n CFG_RUN_arm-unknown-linux-gnueabihf=$(2)\n CFG_RUN_TARG_arm-unknown-linux-gnueabihf=$(call CFG_RUN_arm-unknown-linux-gnueabihf,,$(2))\n RUSTC_FLAGS_arm-unknown-linux-gnueabihf :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabihf := --linker=$(CROSS_PREFIX_arm-unknown-linux-gnueabihf)$(CXX_arm-unknown-linux-gnueabihf)\n+RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabihf :=\n \n # arm-unknown-linux-gnueabi configuration\n CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-\n@@ -343,7 +343,7 @@ CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__\n+CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfpu=vfp\n CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n@@ -361,7 +361,7 @@ CFG_LDPATH_arm-unknown-linux-gnueabi :=\n CFG_RUN_arm-unknown-linux-gnueabi=$(2)\n CFG_RUN_TARG_arm-unknown-linux-gnueabi=$(call CFG_RUN_arm-unknown-linux-gnueabi,,$(2))\n RUSTC_FLAGS_arm-unknown-linux-gnueabi :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabi := --linker=$(CROSS_PREFIX_arm-unknown-linux-gnueabi)$(CXX_arm-unknown-linux-gnueabi)\n+RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabi :=\n \n # mips-unknown-linux-gnu configuration\n CC_mips-unknown-linux-gnu=mips-linux-gnu-gcc\n@@ -389,7 +389,7 @@ CFG_PATH_MUNGE_mips-unknown-linux-gnu := true\n CFG_LDPATH_mips-unknown-linux-gnu :=\n CFG_RUN_mips-unknown-linux-gnu=\n CFG_RUN_TARG_mips-unknown-linux-gnu=\n-RUSTC_FLAGS_mips-unknown-linux-gnu := --linker=$(CXX_mips-unknown-linux-gnu) --target-cpu mips32r2 --target-feature +mips32r2,+o32 -Z soft-float\n+RUSTC_FLAGS_mips-unknown-linux-gnu := -C target-cpu=mips32r2 -C target-feature=\"+mips32r2,+o32\" -C soft-float\n \n # i686-pc-mingw32 configuration\n CC_i686-pc-mingw32=$(CC)\n@@ -475,7 +475,7 @@ CFG_PATH_MUNGE_i686-w64-mingw32 :=\n CFG_LDPATH_i686-w64-mingw32 :=$(CFG_LDPATH_i686-w64-mingw32):$(PATH)\n CFG_RUN_i686-w64-mingw32=PATH=\"$(CFG_LDPATH_i686-w64-mingw32):$(1)\" $(2)\n CFG_RUN_TARG_i686-w64-mingw32=$(call CFG_RUN_i686-w64-mingw32,$(HLIB$(1)_H_$(CFG_BUILD)),$(2))\n-RUSTC_CROSS_FLAGS_i686-w64-mingw32 := --linker=$(CROSS_PREFIX_i686-w64-mingw32)$(CXX_i686-w64-mingw32)\n+RUSTC_CROSS_FLAGS_i686-w64-mingw32 :=\n \n # x86_64-w64-mingw32 configuration\n CROSS_PREFIX_x86_64-w64-mingw32=x86_64-w64-mingw32-\n@@ -504,7 +504,7 @@ CFG_PATH_MUNGE_x86_64-w64-mingw32 :=\n CFG_LDPATH_x86_64-w64-mingw32 :=$(CFG_LDPATH_x86_64-w64-mingw32):$(PATH)\n CFG_RUN_x86_64-w64-mingw32=PATH=\"$(CFG_LDPATH_x86_64-w64-mingw32):$(1)\" $(2)\n CFG_RUN_TARG_x86_64-w64-mingw32=$(call CFG_RUN_x86_64-w64-mingw32,$(HLIB$(1)_H_$(CFG_BUILD)),$(2))\n-RUSTC_CROSS_FLAGS_x86_64-w64-mingw32 := --linker=$(CROSS_PREFIX_x86_64-w64-mingw32)$(CXX_x86_64-w64-mingw32)\n+RUSTC_CROSS_FLAGS_x86_64-w64-mingw32 :=\n \n # x86_64-unknown-freebsd configuration\n CC_x86_64-unknown-freebsd=$(CC)\n@@ -549,8 +549,9 @@ define CFG_MAKE_TOOLCHAIN\n \tCXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n \tCPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n \tAR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n+\tRUSTC_CROSS_FLAGS_$(1)=-C linker=$$(CXX_$(1)) -C ar=$$(AR_$(1)) $(RUSTC_CROSS_FLAGS_$(1))\n \n-\tRUSTC_FLAGS_$(1)=$(RUSTC_CROSS_FLAGS_$(1))\n+\tRUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n   endif\n \n   CFG_COMPILE_C_$(1) = $$(CC_$(1))  \\"}, {"sha": "7dec48b83729be23e4c9ed54cc16c24f22eaccb2", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d40b5374055086df88727925872f0733843f9d2e/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d40b5374055086df88727925872f0733843f9d2e/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d40b5374055086df88727925872f0733843f9d2e", "patch": "@@ -554,7 +554,8 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --host $(3)                                       \\\n         --adb-path=$(CFG_ADB)                          \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n-        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n+        --host-rustcflags \"$(RUSTC_FLAGS_$(3)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n+        --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)"}, {"sha": "4d1f7ab595679c7e46e7116aae2f13655ee28283", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=d40b5374055086df88727925872f0733843f9d2e", "patch": "@@ -77,8 +77,11 @@ pub struct config {\n     // for running under valgrind\n     runtool: Option<~str>,\n \n-    // Flags to pass to the compiler\n-    rustcflags: Option<~str>,\n+    // Flags to pass to the compiler when building for the host\n+    host_rustcflags: Option<~str>,\n+\n+    // Flags to pass to the compiler when building for the target\n+    target_rustcflags: Option<~str>,\n \n     // Run tests using the JIT\n     jit: bool,"}, {"sha": "94153c169aca311bfe24d304dd17e8482e8147c2", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=d40b5374055086df88727925872f0733843f9d2e", "patch": "@@ -64,7 +64,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n-          optopt(\"\", \"rustcflags\", \"flags to pass to rustc\", \"FLAGS\"),\n+          optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\"),\n+          optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n           optopt(\"\", \"save-metrics\", \"file to save metrics to\", \"FILE\"),\n@@ -132,7 +133,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n         ratchet_noise_percent:\n             matches.opt_str(\"ratchet-noise-percent\").and_then(|s| from_str::<f64>(s)),\n         runtool: matches.opt_str(\"runtool\"),\n-        rustcflags: matches.opt_str(\"rustcflags\"),\n+        host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n+        target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n         jit: matches.opt_present(\"jit\"),\n         target: opt_str2(matches.opt_str(\"target\")).to_str(),\n         host: opt_str2(matches.opt_str(\"host\")).to_str(),\n@@ -161,7 +163,8 @@ pub fn log_config(config: &config) {\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n     logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n-    logv(c, format!(\"rustcflags: {}\", opt_str(&config.rustcflags)));\n+    logv(c, format!(\"host-rustcflags: {}\", opt_str(&config.host_rustcflags)));\n+    logv(c, format!(\"target-rustcflags: {}\", opt_str(&config.target_rustcflags)));\n     logv(c, format!(\"jit: {}\", config.jit));\n     logv(c, format!(\"target: {}\", config.target));\n     logv(c, format!(\"host: {}\", config.host));"}, {"sha": "a2c61352e6f6b4c7897908fd15aa497acbfe3d5c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40b5374055086df88727925872f0733843f9d2e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=d40b5374055086df88727925872f0733843f9d2e", "patch": "@@ -250,7 +250,7 @@ actual:\\n\\\n                          ~\"-L\", config.build_base.as_str().unwrap().to_owned(),\n                          ~\"-L\",\n                          aux_dir.as_str().unwrap().to_owned()];\n-        args.push_all_move(split_maybe_args(&config.rustcflags));\n+        args.push_all_move(split_maybe_args(&config.target_rustcflags));\n         args.push_all_move(split_maybe_args(&props.compile_flags));\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         return ProcArgs {prog: config.rustc_path.as_str().unwrap().to_owned(), args: args};\n@@ -260,9 +260,9 @@ actual:\\n\\\n fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n \n     // do not optimize debuginfo tests\n-    let mut config = match config.rustcflags {\n+    let mut config = match config.target_rustcflags {\n         Some(ref flags) => config {\n-            rustcflags: Some(flags.replace(\"-O\", \"\")),\n+            target_rustcflags: Some(flags.replace(\"-O\", \"\")),\n             .. (*config).clone()\n         },\n         None => (*config).clone()\n@@ -329,7 +329,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n                 break;\n             }\n \n-            let args = split_maybe_args(&config.rustcflags);\n+            let args = split_maybe_args(&config.target_rustcflags);\n             let mut tool_path:~str = ~\"\";\n             for arg in args.iter() {\n                 if arg.contains(\"android-cross-path=\") {\n@@ -770,7 +770,11 @@ fn make_compile_args(config: &config,\n         ThisDirectory(path) => { args.push(~\"--out-dir\"); path }\n     };\n     args.push(path.as_str().unwrap().to_owned());\n-    args.push_all_move(split_maybe_args(&config.rustcflags));\n+    if props.force_host {\n+        args.push_all_move(split_maybe_args(&config.host_rustcflags));\n+    } else {\n+        args.push_all_move(split_maybe_args(&config.target_rustcflags));\n+    }\n     args.push_all_move(split_maybe_args(&props.compile_flags));\n     return ProcArgs {prog: config.rustc_path.as_str().unwrap().to_owned(), args: args};\n }"}]}