{"sha": "a8ffc7fd45592fd423d44852383efb3c6c1a7264", "node_id": "C_kwDOAAsO6NoAKGE4ZmZjN2ZkNDU1OTJmZDQyM2Q0NDg1MjM4M2VmYjNjNmMxYTcyNjQ", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-06T15:39:06Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-06T16:40:21Z"}, "message": "Tests for unsound Windows file methods", "tree": {"sha": "2c8eb8b1fc6740aae59310ea6aabb9348293575d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8eb8b1fc6740aae59310ea6aabb9348293575d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ffc7fd45592fd423d44852383efb3c6c1a7264", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmLFuvUACgkQcTRy8vRW\nJ96r1Q/+MmEcFG4Duh7HbvUD0YRttkUaHeZqshZIZcRJti9unhzl5/REEBscFc8k\ndZ+1VKNSwMaZ7WrFUKMvQYsKW/oUC8rnyZgom6hHa4Sp2ilVIwYlbkNvBSvRfUxT\nhH7NtWT/8vHxg8P3plK35YaYUKgHN61no+Jlwke1FG3sW1WFcVQvvWATGHk4qsyU\nMB1qvTLw9movSFt3mtALHp/l3WFtqBm6OlBSe+5M/RH/UnCuzYv4fWNu1Ac08BHe\nuoqJR2k9N+afcnKpewzJtSbCWVV9i3t03kvEMenaDpVz6fB1rkY0f+6j5zDB/Kj+\nJF3GKD/jAJdteraBTRkO8/k2vF8S19Zlo/Nzqu32+qsGbBmVzIvU8MCHPbL453Fq\nUdgr89Xmpfu+xR24Qwp5vS5ncerbajyH2AuyEYxTXmTc1yRKhY5567bcFaw+F4m6\n2dX0ZmvwDkPw16FWMoOMdiD2uniiW4APT72J5ZzTr49sWQa5JmMsZ2yFe1rrIjGk\nbNfgJLk+wGykx2a4krtFTos1UuSj9Vmr41pF7qopgYTEEwucf3M9LFrBejX0ILdU\n98mDGbvyn5DJDVoA5RwN2tagbpt2YfdCD+W7PUAnuUy+pZYycvALeat91yVnPnUt\nI1CIMPScaUaiaU2I0vYhbqaBe520V8/wanZXI2VLxXaSb8zNI5g=\n=rjHJ\n-----END PGP SIGNATURE-----", "payload": "tree 2c8eb8b1fc6740aae59310ea6aabb9348293575d\nparent 3ae47e76a84baaa4d35f641c237649944fa8fb58\nauthor Chris Denton <christophersdenton@gmail.com> 1657121946 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1657125621 +0100\n\nTests for unsound Windows file methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ffc7fd45592fd423d44852383efb3c6c1a7264", "html_url": "https://github.com/rust-lang/rust/commit/a8ffc7fd45592fd423d44852383efb3c6c1a7264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ffc7fd45592fd423d44852383efb3c6c1a7264/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae47e76a84baaa4d35f641c237649944fa8fb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae47e76a84baaa4d35f641c237649944fa8fb58", "html_url": "https://github.com/rust-lang/rust/commit/3ae47e76a84baaa4d35f641c237649944fa8fb58"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "e24b09cc96ec822742b10a1de05c4e75eda2869e", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8ffc7fd45592fd423d44852383efb3c6c1a7264/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ffc7fd45592fd423d44852383efb3c6c1a7264/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=a8ffc7fd45592fd423d44852383efb3c6c1a7264", "patch": "@@ -1,5 +1,8 @@\n #![unstable(issue = \"none\", feature = \"windows_handle\")]\n \n+#[cfg(test)]\n+mod tests;\n+\n use crate::cmp;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf};\n use crate::mem;"}, {"sha": "d836dae4c305b72b97c5e3d7a613c94d4f7c6799", "filename": "library/std/src/sys/windows/handle/tests.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8ffc7fd45592fd423d44852383efb3c6c1a7264/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ffc7fd45592fd423d44852383efb3c6c1a7264/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle%2Ftests.rs?ref=a8ffc7fd45592fd423d44852383efb3c6c1a7264", "patch": "@@ -0,0 +1,22 @@\n+use crate::sys::pipe::{anon_pipe, Pipes};\n+use crate::{thread, time};\n+\n+/// Test the synchronous fallback for overlapped I/O.\n+#[test]\n+fn overlapped_handle_fallback() {\n+    // Create some pipes. `ours` will be asynchronous.\n+    let Pipes { ours, theirs } = anon_pipe(true, false).unwrap();\n+\n+    let async_readable = ours.into_handle();\n+    let sync_writeable = theirs.into_handle();\n+\n+    thread::scope(|_| {\n+        thread::sleep(time::Duration::from_millis(100));\n+        sync_writeable.write(b\"hello world!\").unwrap();\n+    });\n+\n+    // The pipe buffer starts empty so reading won't complete synchronously unless\n+    // our fallback path works.\n+    let mut buffer = [0u8; 1024];\n+    async_readable.read(&mut buffer).unwrap();\n+}"}, {"sha": "94b5798a0e7d298d23f94ae1f8eb2b464441d3f8", "filename": "src/test/ui-fulldeps/issues-81357-unsound-file-methods.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a8ffc7fd45592fd423d44852383efb3c6c1a7264/src%2Ftest%2Fui-fulldeps%2Fissues-81357-unsound-file-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ffc7fd45592fd423d44852383efb3c6c1a7264/src%2Ftest%2Fui-fulldeps%2Fissues-81357-unsound-file-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissues-81357-unsound-file-methods.rs?ref=a8ffc7fd45592fd423d44852383efb3c6c1a7264", "patch": "@@ -0,0 +1,76 @@\n+// run-fail\n+// only-windows\n+\n+fn main() {\n+    use std::fs;\n+    use std::io::prelude::*;\n+    use std::os::windows::prelude::*;\n+    use std::ptr;\n+    use std::sync::Arc;\n+    use std::thread;\n+    use std::time::Duration;\n+\n+    const FILE_FLAG_OVERLAPPED: u32 = 0x40000000;\n+\n+    fn create_pipe_server(path: &str) -> fs::File {\n+        let mut path0 = path.as_bytes().to_owned();\n+        path0.push(0);\n+        extern \"system\" {\n+            fn CreateNamedPipeA(\n+                lpName: *const u8,\n+                dwOpenMode: u32,\n+                dwPipeMode: u32,\n+                nMaxInstances: u32,\n+                nOutBufferSize: u32,\n+                nInBufferSize: u32,\n+                nDefaultTimeOut: u32,\n+                lpSecurityAttributes: *mut u8,\n+            ) -> RawHandle;\n+        }\n+\n+        unsafe {\n+            let h = CreateNamedPipeA(path0.as_ptr(), 3, 0, 1, 0, 0, 0, ptr::null_mut());\n+            assert_ne!(h as isize, -1);\n+            fs::File::from_raw_handle(h)\n+        }\n+    }\n+\n+    let path = \"\\\\\\\\.\\\\pipe\\\\repro\";\n+    let mut server = create_pipe_server(path);\n+\n+    let client = Arc::new(\n+        fs::OpenOptions::new().custom_flags(FILE_FLAG_OVERLAPPED).read(true).open(path).unwrap(),\n+    );\n+\n+    let spawn_read = |is_first: bool| {\n+        thread::spawn({\n+            let f = client.clone();\n+            move || {\n+                let mut buf = [0xcc; 1];\n+                let mut f = f.as_ref();\n+                f.read(&mut buf).unwrap();\n+                if is_first {\n+                    assert_ne!(buf[0], 0xcc);\n+                } else {\n+                    let b = buf[0]; // capture buf[0]\n+                    thread::sleep(Duration::from_millis(200));\n+\n+                    // In this test, success is indicated by failing.\n+                    if buf[0] == b {\n+                        panic!(\"Success!\");\n+                    }\n+                }\n+            }\n+        })\n+    };\n+\n+    let t1 = spawn_read(true);\n+    thread::sleep(Duration::from_millis(20));\n+    let t2 = spawn_read(false);\n+    thread::sleep(Duration::from_millis(100));\n+    let _ = server.write(b\"x\");\n+    thread::sleep(Duration::from_millis(100));\n+    let _ = server.write(b\"y\");\n+    let _ = t1.join();\n+    let _ = t2.join();\n+}"}]}