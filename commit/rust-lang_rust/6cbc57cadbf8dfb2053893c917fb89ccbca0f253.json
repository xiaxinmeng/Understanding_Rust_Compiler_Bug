{"sha": "6cbc57cadbf8dfb2053893c917fb89ccbca0f253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmM1N2NhZGJmOGRmYjIwNTM4OTNjOTE3ZmI4OWNjYmNhMGYyNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-23T07:06:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-23T07:06:24Z"}, "message": "auto merge of #10611 : cmr/rust/ascii_flesh, r=pcwalton\n\nThese are super boring. I can add tests if really desired, but they'd be long\nand even more boring than the methods.", "tree": {"sha": "72681aa65c7192b619604ab188d8ecc2d1da6781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72681aa65c7192b619604ab188d8ecc2d1da6781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbc57cadbf8dfb2053893c917fb89ccbca0f253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbc57cadbf8dfb2053893c917fb89ccbca0f253", "html_url": "https://github.com/rust-lang/rust/commit/6cbc57cadbf8dfb2053893c917fb89ccbca0f253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbc57cadbf8dfb2053893c917fb89ccbca0f253/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb279aa02a7ff2ed069791f60a5159d73c8ed993", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb279aa02a7ff2ed069791f60a5159d73c8ed993", "html_url": "https://github.com/rust-lang/rust/commit/fb279aa02a7ff2ed069791f60a5159d73c8ed993"}, {"sha": "09af9d48561380f8de3aa9a8b15b2b4e9af4daef", "url": "https://api.github.com/repos/rust-lang/rust/commits/09af9d48561380f8de3aa9a8b15b2b4e9af4daef", "html_url": "https://github.com/rust-lang/rust/commit/09af9d48561380f8de3aa9a8b15b2b4e9af4daef"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "fb1cb26ec5d360256f6482364a8aabbc07c66f0f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6cbc57cadbf8dfb2053893c917fb89ccbca0f253/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbc57cadbf8dfb2053893c917fb89ccbca0f253/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6cbc57cadbf8dfb2053893c917fb89ccbca0f253", "patch": "@@ -55,6 +55,74 @@ impl Ascii {\n     pub fn eq_ignore_case(self, other: Ascii) -> bool {\n         ASCII_LOWER_MAP[self.chr] == ASCII_LOWER_MAP[other.chr]\n     }\n+\n+    // the following methods are like ctype, and the implementation is inspired by musl\n+\n+    /// Check if the character is a letter (a-z, A-Z)\n+    #[inline]\n+    pub fn is_alpha(&self) -> bool {\n+        (self.chr >= 0x41 && self.chr <= 0x5A) || (self.chr >= 0x61 && self.chr <= 0x7A)\n+    }\n+\n+    /// Check if the character is a number (0-9)\n+    #[inline]\n+    pub fn is_digit(&self) -> bool {\n+        self.chr >= 0x31 && self.chr <= 0x39\n+    }\n+\n+    /// Check if the character is a letter or number\n+    #[inline]\n+    pub fn is_alnum(&self) -> bool {\n+        self.is_alpha() || self.is_digit()\n+    }\n+\n+    /// Check if the character is a space or horizontal tab\n+    #[inline]\n+    pub fn is_blank(&self) -> bool {\n+        self.chr == ' ' as u8 || self.chr == '\\t' as u8\n+    }\n+\n+    /// Check if the character is a control character\n+    #[inline]\n+    pub fn is_control(&self) -> bool {\n+        self.chr <= 0x20 || self.chr == 0x7F\n+    }\n+\n+    /// Checks if the character is printable (except space)\n+    #[inline]\n+    pub fn is_graph(&self) -> bool {\n+        (self.chr - 0x21) < 0x5E\n+    }\n+\n+    /// Checks if the character is printable (including space)\n+    #[inline]\n+    pub fn is_print(&self) -> bool {\n+        (self.chr - 0x20) < 0x5F\n+    }\n+\n+    /// Checks if the character is lowercase\n+    #[inline]\n+    pub fn is_lower(&self) -> bool {\n+        (self.chr - 'a' as u8) < 26\n+    }\n+\n+    /// Checks if the character is uppercase\n+    #[inline]\n+    pub fn is_upper(&self) -> bool {\n+        (self.chr - 'A' as u8) < 26\n+    }\n+\n+    /// Checks if the character is punctuation\n+    #[inline]\n+    pub fn is_punctuation(&self) -> bool {\n+        self.is_graph() && !self.is_alnum()\n+    }\n+\n+    /// Checks if the character is a valid hex digit\n+    #[inline]\n+    pub fn is_hex(&self) -> bool {\n+        self.is_digit() || ((self.chr | 32u8) - 'a' as u8) < 6\n+    }\n }\n \n impl ToStr for Ascii {"}]}