{"sha": "343b67387772dbd068d06a76267288579d3eaed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2I2NzM4Nzc3MmRiZDA2OGQwNmE3NjI2NzI4ODU3OWQzZWFlZDA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-19T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-19T00:00:00Z"}, "message": "Consider auto derefs before warning about write only fields\n\nChanges from 81473 extended the dead code lint with an ability to detect\nfields that are written to but never read from. The implementation skips\nover fields on the left hand side of an assignment, without marking them\nas live.\n\nA field access might involve an automatic dereference and de-facto read\nthe field. Conservatively mark expressions with deref adjustments as\nlive to avoid generating false positive warnings.", "tree": {"sha": "30d65dde61fcba9451e2f51ce19eba0354d7dbf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d65dde61fcba9451e2f51ce19eba0354d7dbf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343b67387772dbd068d06a76267288579d3eaed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343b67387772dbd068d06a76267288579d3eaed0", "html_url": "https://github.com/rust-lang/rust/commit/343b67387772dbd068d06a76267288579d3eaed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343b67387772dbd068d06a76267288579d3eaed0/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0148b971c921a0831fbf3357e5936eec724e3566", "url": "https://api.github.com/repos/rust-lang/rust/commits/0148b971c921a0831fbf3357e5936eec724e3566", "html_url": "https://github.com/rust-lang/rust/commit/0148b971c921a0831fbf3357e5936eec724e3566"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "62a95aa57c29f66399a1a138ff7adb15f7cac0d8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/343b67387772dbd068d06a76267288579d3eaed0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b67387772dbd068d06a76267288579d3eaed0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=343b67387772dbd068d06a76267288579d3eaed0", "patch": "@@ -37,15 +37,6 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     )\n }\n \n-fn base_expr<'a>(mut expr: &'a hir::Expr<'a>) -> &'a hir::Expr<'a> {\n-    loop {\n-        match expr.kind {\n-            hir::ExprKind::Field(base, ..) => expr = base,\n-            _ => return expr,\n-        }\n-    }\n-}\n-\n struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<hir::HirId>,\n     tcx: TyCtxt<'tcx>,\n@@ -143,6 +134,22 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    fn handle_assign(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+        if self\n+            .typeck_results()\n+            .expr_adjustments(expr)\n+            .iter()\n+            .any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(_)))\n+        {\n+            self.visit_expr(expr);\n+        } else if let hir::ExprKind::Field(base, ..) = expr.kind {\n+            // Ignore write to field\n+            self.handle_assign(base);\n+        } else {\n+            self.visit_expr(expr);\n+        }\n+    }\n+\n     fn handle_field_pattern_match(\n         &mut self,\n         lhs: &hir::Pat<'_>,\n@@ -272,8 +279,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n                 self.lookup_and_handle_method(expr.hir_id);\n             }\n             hir::ExprKind::Assign(ref left, ref right, ..) => {\n-                // Ignore write to field\n-                self.visit_expr(base_expr(left));\n+                self.handle_assign(left);\n                 self.visit_expr(right);\n                 return;\n             }"}, {"sha": "7b3f1e9f5b6cb89e4f88042e1c43df9a48a3a7b9", "filename": "src/test/ui/lint/dead-code/write-only-field.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/343b67387772dbd068d06a76267288579d3eaed0/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b67387772dbd068d06a76267288579d3eaed0/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs?ref=343b67387772dbd068d06a76267288579d3eaed0", "patch": "@@ -17,4 +17,53 @@ fn field_write(s: &mut S) {\n fn main() {\n     let mut s = S { f: 0, sub: Sub { f: 0 } };\n     field_write(&mut s);\n+\n+    auto_deref();\n+    nested_boxes();\n+}\n+\n+fn auto_deref() {\n+    struct E {\n+        x: bool,\n+        y: bool, //~ ERROR: field is never read\n+    }\n+\n+    struct P<'a> {\n+        e: &'a mut E\n+    }\n+\n+    impl P<'_> {\n+        fn f(&mut self) {\n+            self.e.x = true;\n+            self.e.y = true;\n+        }\n+    }\n+\n+    let mut e = E { x: false, y: false };\n+    let mut p = P { e: &mut e };\n+    p.f();\n+    assert!(e.x);\n+}\n+\n+fn nested_boxes() {\n+    struct A {\n+        b: Box<B>,\n+    }\n+\n+    struct B {\n+        c: Box<C>,\n+    }\n+\n+    struct C {\n+        u: u32, //~ ERROR: field is never read\n+        v: u32, //~ ERROR: field is never read\n+    }\n+\n+    let mut a = A {\n+        b: Box::new(B {\n+            c: Box::new(C { u: 0, v: 0 }),\n+        }),\n+    };\n+    a.b.c.v = 10;\n+    a.b.c = Box::new(C { u: 1, v: 2 });\n }"}, {"sha": "a191d22c8b94cfe317507529ccb818d0080a0b9a", "filename": "src/test/ui/lint/dead-code/write-only-field.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/343b67387772dbd068d06a76267288579d3eaed0/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/343b67387772dbd068d06a76267288579d3eaed0/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr?ref=343b67387772dbd068d06a76267288579d3eaed0", "patch": "@@ -22,5 +22,23 @@ error: field is never read: `f`\n LL |     f: i32,\n    |     ^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: field is never read: `y`\n+  --> $DIR/write-only-field.rs:28:9\n+   |\n+LL |         y: bool,\n+   |         ^^^^^^^\n+\n+error: field is never read: `u`\n+  --> $DIR/write-only-field.rs:58:9\n+   |\n+LL |         u: u32,\n+   |         ^^^^^^\n+\n+error: field is never read: `v`\n+  --> $DIR/write-only-field.rs:59:9\n+   |\n+LL |         v: u32,\n+   |         ^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}