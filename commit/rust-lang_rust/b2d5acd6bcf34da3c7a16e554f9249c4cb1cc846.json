{"sha": "b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDVhY2Q2YmNmMzRkYTNjN2ExNmU1NTRmOTI0OWM0Y2IxY2M4NDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-25T03:29:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-25T03:29:01Z"}, "message": "Merge remote-tracking branch 'brson/futures'", "tree": {"sha": "7b81a958a2a76c72bea1168718e6dee09b26ddcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b81a958a2a76c72bea1168718e6dee09b26ddcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "html_url": "https://github.com/rust-lang/rust/commit/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82ddc280c367dad5108d98278eeb76d6fdf8c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82ddc280c367dad5108d98278eeb76d6fdf8c4a", "html_url": "https://github.com/rust-lang/rust/commit/d82ddc280c367dad5108d98278eeb76d6fdf8c4a"}, {"sha": "d29962f0eb2772c208a299efae86ad16bc25f7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29962f0eb2772c208a299efae86ad16bc25f7de", "html_url": "https://github.com/rust-lang/rust/commit/d29962f0eb2772c208a299efae86ad16bc25f7de"}], "stats": {"total": 188, "additions": 66, "deletions": 122}, "files": [{"sha": "c0852e663205fb000f1f3ebd6a90990dbbb6382a", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -181,7 +181,6 @@ pub mod task {\n     pub mod spawn;\n     pub mod rt;\n }\n-pub mod future;\n pub mod pipes;\n \n // Runtime and language-primitive support"}, {"sha": "a65e0ae1bb12ba69b1d0a0002b82b6e1844c7ed5", "filename": "src/libcore/private.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -581,16 +581,20 @@ pub mod tests {\n \n         for uint::range(0, num_tasks) |_i| {\n             let total = total.clone();\n-            futures.push(future::spawn(|move total| {\n+            let (chan, port) = pipes::stream();\n+            futures.push(move port);\n+\n+            do task::spawn |move total, move chan| {\n                 for uint::range(0, count) |_i| {\n                     do total.with |count| {\n                         **count += 1;\n                     }\n                 }\n-            }));\n+                chan.send(());\n+            }\n         };\n \n-        for futures.each |f| { f.get() }\n+        for futures.each |f| { f.recv() }\n \n         do total.with |total| {\n             assert **total == num_tasks * count\n@@ -642,7 +646,7 @@ pub mod tests {\n         // Have to get rid of our reference before blocking.\n         { let _x = move x; } // FIXME(#3161) util::ignore doesn't work here\n         let res = option::swap_unwrap(&mut res);\n-        future::get(&res);\n+        res.recv();\n     }\n \n     #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -657,7 +661,7 @@ pub mod tests {\n         }\n         assert unwrap_exclusive(move x) == ~~\"hello\";\n         let res = option::swap_unwrap(&mut res);\n-        future::get(&res);\n+        res.recv();\n     }\n \n     #[test] #[ignore(cfg(windows))]"}, {"sha": "9a1d8cf39a834b0b52e42313f2eb13beb794d615", "filename": "src/libcore/task.rs", "status": "modified", "additions": 15, "deletions": 67, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -32,6 +32,7 @@ use cmp::Eq;\n use result::Result;\n use pipes::{stream, Chan, Port};\n use local_data_priv::{local_get, local_set};\n+use util::replace;\n \n use rt::task_id;\n use rt::rust_task;\n@@ -72,25 +73,6 @@ impl TaskResult : Eq {\n     pure fn ne(other: &TaskResult) -> bool { !self.eq(other) }\n }\n \n-/// A message type for notifying of task lifecycle events\n-pub enum Notification {\n-    /// Sent when a task exits with the task handle and result\n-    Exit(Task, TaskResult)\n-}\n-\n-impl Notification : cmp::Eq {\n-    pure fn eq(other: &Notification) -> bool {\n-        match self {\n-            Exit(e0a, e1a) => {\n-                match (*other) {\n-                    Exit(e0b, e1b) => e0a == e0b && e1a == e1b\n-                }\n-            }\n-        }\n-    }\n-    pure fn ne(other: &Notification) -> bool { !self.eq(other) }\n-}\n-\n /// Scheduler modes\n pub enum SchedMode {\n     /// All tasks run in the same OS thread\n@@ -200,7 +182,7 @@ pub type SchedOpts = {\n pub type TaskOpts = {\n     linked: bool,\n     supervised: bool,\n-    mut notify_chan: Option<Chan<Notification>>,\n+    mut notify_chan: Option<Chan<TaskResult>>,\n     sched: Option<SchedOpts>,\n };\n \n@@ -246,11 +228,7 @@ priv impl TaskBuilder {\n             fail ~\"Cannot copy a task_builder\"; // Fake move mode on self\n         }\n         self.consumed = true;\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -271,11 +249,7 @@ impl TaskBuilder {\n      * the other will not be killed.\n      */\n     fn unlinked() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: false,\n@@ -293,11 +267,7 @@ impl TaskBuilder {\n      * the child.\n      */\n     fn supervised() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: false,\n@@ -314,11 +284,7 @@ impl TaskBuilder {\n      * other will be killed.\n      */\n     fn linked() -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: true,\n@@ -348,7 +314,7 @@ impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    fn future_result(blk: fn(v: future::Future<TaskResult>)) -> TaskBuilder {\n+    fn future_result(blk: fn(v: Port<TaskResult>)) -> TaskBuilder {\n         // FIXME (#3725): Once linked failure and notification are\n         // handled in the library, I can imagine implementing this by just\n         // registering an arbitrary number of task::on_exit handlers and\n@@ -359,13 +325,9 @@ impl TaskBuilder {\n         }\n \n         // Construct the future and give it to the caller.\n-        let (notify_pipe_ch, notify_pipe_po) = stream::<Notification>();\n+        let (notify_pipe_ch, notify_pipe_po) = stream::<TaskResult>();\n \n-        blk(do future::from_fn |move notify_pipe_po| {\n-            match notify_pipe_po.recv() {\n-              Exit(_, result) => result\n-            }\n-        });\n+        blk(move notify_pipe_po);\n \n         // Reconfigure self to use a notify channel.\n         TaskBuilder({\n@@ -381,11 +343,7 @@ impl TaskBuilder {\n     }\n     /// Configure a custom scheduler mode for the task.\n     fn sched_mode(mode: SchedMode) -> TaskBuilder {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -412,11 +370,7 @@ impl TaskBuilder {\n      */\n     fn add_wrapper(wrapper: fn@(v: fn~()) -> fn~()) -> TaskBuilder {\n         let prev_gen_body = self.gen_body;\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            Some(option::swap_unwrap(&mut self.opts.notify_chan))\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder({\n             opts: {\n                 linked: self.opts.linked,\n@@ -447,13 +401,7 @@ impl TaskBuilder {\n      * must be greater than zero.\n      */\n     fn spawn(f: fn~()) {\n-        let notify_chan = if self.opts.notify_chan.is_none() {\n-            None\n-        } else {\n-            let swapped_notify_chan =\n-                option::swap_unwrap(&mut self.opts.notify_chan);\n-            Some(move swapped_notify_chan)\n-        };\n+        let notify_chan = replace(&mut self.opts.notify_chan, None);\n         let x = self.consume();\n         let opts = {\n             linked: x.opts.linked,\n@@ -532,7 +480,7 @@ impl TaskBuilder {\n         do fr_task_builder.spawn |move f| {\n             comm::send(ch, f());\n         }\n-        match future::get(&option::unwrap(move result)) {\n+        match option::unwrap(move result).recv() {\n             Success => result::Ok(comm::recv(po)),\n             Failure => result::Err(())\n         }\n@@ -949,14 +897,14 @@ fn test_add_wrapper() {\n fn test_future_result() {\n     let mut result = None;\n     do task().future_result(|+r| { result = Some(move r); }).spawn { }\n-    assert future::get(&option::unwrap(move result)) == Success;\n+    assert option::unwrap(move result).recv() == Success;\n \n     result = None;\n     do task().future_result(|+r|\n         { result = Some(move r); }).unlinked().spawn {\n         fail;\n     }\n-    assert future::get(&option::unwrap(move result)) == Failure;\n+    assert option::unwrap(move result).recv() == Failure;\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "ea66776d22d66a8acb97c1e1eefc43a020e540ed", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -320,15 +320,15 @@ fn TCB(me: *rust_task, tasks: TaskGroupArc, ancestors: AncestorList,\n }\n \n struct AutoNotify {\n-    notify_chan: Chan<Notification>,\n+    notify_chan: Chan<TaskResult>,\n     mut failed:  bool,\n     drop {\n         let result = if self.failed { Failure } else { Success };\n-        self.notify_chan.send(Exit(get_task(), result));\n+        self.notify_chan.send(result);\n     }\n }\n \n-fn AutoNotify(chan: Chan<Notification>) -> AutoNotify {\n+fn AutoNotify(chan: Chan<TaskResult>) -> AutoNotify {\n     AutoNotify {\n         notify_chan: move chan,\n         failed: true // Un-set above when taskgroup successfully made.\n@@ -532,7 +532,7 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n     // (4) ...and runs the provided body function.\n     fn make_child_wrapper(child: *rust_task, child_arc: TaskGroupArc,\n                           ancestors: AncestorList, is_main: bool,\n-                          notify_chan: Option<Chan<Notification>>,\n+                          notify_chan: Option<Chan<TaskResult>>,\n                           f: fn~()) -> fn~() {\n         let child_data = ~mut Some((move child_arc, move ancestors));\n         return fn~(move notify_chan, move child_data, move f) {\n@@ -660,36 +660,30 @@ fn test_spawn_raw_unsupervise() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify_success() {\n-    let (task_ch, task_po) = pipes::stream();\n     let (notify_ch, notify_po) = pipes::stream();\n \n     let opts = {\n         notify_chan: Some(move notify_ch),\n         .. default_task_opts()\n     };\n-    do spawn_raw(move opts) |move task_ch| {\n-        task_ch.send(get_task());\n+    do spawn_raw(move opts) {\n     }\n-    let task_ = task_po.recv();\n-    assert notify_po.recv() == Exit(task_, Success);\n+    assert notify_po.recv() == Success;\n }\n \n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify_failure() {\n     // New bindings for these\n-    let (task_ch, task_po) = pipes::stream();\n     let (notify_ch, notify_po) = pipes::stream();\n \n     let opts = {\n         linked: false,\n         notify_chan: Some(move notify_ch),\n         .. default_task_opts()\n     };\n-    do spawn_raw(move opts) |move task_ch| {\n-        task_ch.send(get_task());\n+    do spawn_raw(move opts) {\n         fail;\n     }\n-    let task_ = task_po.recv();\n-    assert notify_po.recv() == Exit(task_, Failure);\n+    assert notify_po.recv() == Failure;\n }"}, {"sha": "0033a4eaccd07acf59dfd78cb498d2e671f0d15b", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -651,7 +651,7 @@ mod tests {\n         }\n \n         // Wait for children to pass their asserts\n-        for vec::each(children) |r| { future::get(r); }\n+        for vec::each(children) |r| { r.recv(); }\n \n         // Wait for writer to finish\n         p.recv();"}, {"sha": "503e915cf8783f78b191864bf2ce047005c648bb", "filename": "src/libstd/future.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -17,7 +17,7 @@\n  */\n \n use either::Either;\n-use pipes::recv;\n+use pipes::{recv, oneshot, ChanOne, PortOne, send_one, recv_one};\n use cast::copy_lifetime;\n \n #[doc = \"The future type\"]\n@@ -67,7 +67,7 @@ pub fn from_value<A>(val: A) -> Future<A> {\n     Future {state: Forced(~(move val))}\n }\n \n-pub fn from_port<A:Send>(port: future_pipe::client::waiting<A>) ->\n+pub fn from_port<A:Send>(port: PortOne<A>) ->\n         Future<A> {\n     /*!\n      * Create a future from a port\n@@ -82,7 +82,7 @@ pub fn from_port<A:Send>(port: future_pipe::client::waiting<A>) ->\n         port_ <-> *port;\n         let port = option::unwrap(move port_);\n         match recv(move port) {\n-            future_pipe::completed(move data) => move data\n+            oneshot::send(move data) => move data\n         }\n     }\n }\n@@ -107,9 +107,15 @@ pub fn spawn<A:Send>(blk: fn~() -> A) -> Future<A> {\n      * value of the future.\n      */\n \n-    from_port(pipes::spawn_service_recv(future_pipe::init, |move blk, ch| {\n-        future_pipe::server::completed(move ch, blk());\n-    }))\n+    let (chan, port) = oneshot::init();\n+\n+    let chan = ~mut Some(move chan);\n+    do task::spawn |move blk, move chan| {\n+        let chan = option::swap_unwrap(&mut *chan);\n+        send_one(move chan, blk());\n+    }\n+\n+    return from_port(move port);\n }\n \n pub fn get_ref<A>(future: &r/Future<A>) -> &r/A {\n@@ -162,12 +168,6 @@ pub fn with<A,B>(future: &Future<A>, blk: fn((&A)) -> B) -> B {\n     blk(get_ref(future))\n }\n \n-proto! future_pipe (\n-    waiting:recv<T:Send> {\n-        completed(T) -> !\n-    }\n-)\n-\n #[allow(non_implicitly_copyable_typarams)]\n pub mod test {\n     #[test]\n@@ -178,8 +178,8 @@ pub mod test {\n \n     #[test]\n     pub fn test_from_port() {\n-        let (po, ch) = future_pipe::init();\n-        future_pipe::server::completed(move ch, ~\"whale\");\n+        let (ch, po) = oneshot::init();\n+        send_one(move ch, ~\"whale\");\n         let f = from_port(move po);\n         assert get(&f) == ~\"whale\";\n     }", "previous_filename": "src/libcore/future.rs"}, {"sha": "0c48cd7ce0061e1336afaf51397abcd1814ef75f", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -53,6 +53,7 @@ pub mod cell;\n pub mod sync;\n pub mod arc;\n pub mod comm;\n+pub mod future;\n \n // Collections\n "}, {"sha": "b5fef604c588978220e67531c974f12ed63551e9", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -391,7 +391,7 @@ fn run_test(test: TestDesc, monitor_ch: comm::Chan<MonitorMsg>) {\n         task::task().unlinked().future_result(|+r| {\n             result_future = Some(move r);\n         }).spawn(move testfn);\n-        let task_result = future::get(&option::unwrap(move result_future));\n+        let task_result = option::unwrap(move result_future).recv();\n         let test_result = calc_result(&test, task_result == task::Success);\n         comm::send(monitor_ch, (copy test, test_result));\n     };"}, {"sha": "99185fb15bfed5db0640a1f454935dbfdeaf58da", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -1,5 +1,6 @@\n use doc::ItemUtils;\n use io::ReaderUtil;\n+use std::future;\n \n export WriteInstr;\n export Writer;"}, {"sha": "55afa0490918c6052193fcb7e8f86d66f6d94071", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -74,7 +74,7 @@ fn run(args: &[~str]) {\n     }\n \n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n \n     //error!(\"sending stop message\");"}, {"sha": "f0fc1dd5f001b697247f9c547610d8476f8c8730", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -71,7 +71,7 @@ fn run(args: &[~str]) {\n     }\n \n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n \n     //error!(\"sending stop message\");"}, {"sha": "82b8e2410a964a72b099b3281feca435d7357858", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -7,11 +7,10 @@\n \n // xfail-pretty\n \n-use future::future;\n-\n extern mod std;\n use std::time;\n use std::arc;\n+use std::future;\n \n // A poor man's pipe.\n type pipe = arc::MutexARC<~[uint]>;"}, {"sha": "de4332b692a1a7d94f6f6cbe8fb4c3e5051ac36b", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -8,10 +8,9 @@\n \n // xfail-pretty\n \n-use future::future;\n-\n extern mod std;\n use std::time;\n+use std::future;\n \n use pipes::recv;\n "}, {"sha": "375ff8f50d866ab32d9ce30301171fd0c2cebcaf", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -7,11 +7,10 @@\n \n // xfail-pretty\n \n-use future::future;\n-\n extern mod std;\n use std::time;\n use std::arc;\n+use std::future;\n \n // A poor man's pipe.\n type pipe = arc::RWARC<~[uint]>;"}, {"sha": "343f50127b5962aa93b2cf5dee22a93053b3c29f", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -5,10 +5,10 @@\n // message path.\n \n use comm::*;\n-use future::future;\n \n extern mod std;\n use std::time;\n+use std::future;\n \n fn thread_ring(i: uint,\n                count: uint,"}, {"sha": "143d4d86d0d5607e05160435d078d6f56c96eba3", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -45,7 +45,7 @@ fn run(args: ~[~str]) {\n         };\n     }\n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n     comm::send(to_child, stop);\n     let result = comm::recv(from_child);"}, {"sha": "e70b796298be82d6ce662c6bd9d31966531a0629", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -78,7 +78,7 @@ fn stress(num_tasks: int) {\n             stress_task(i);\n         }\n     }\n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n }\n \n fn main() {"}, {"sha": "b0bc92797c9a1f8b86f0e01b03c613bf7600487c", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -33,7 +33,7 @@ fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = None;\n     task::task().future_result(|+r| res = Some(move r)).supervised().spawn(move f);\n     error!(\"%s group waiting\", myname);\n-    let x = future::get(&option::unwrap(move res));\n+    let x = option::unwrap(move res).recv();\n     assert x == task::Success;\n }\n "}, {"sha": "59cbd26204e93a98a9036ae88fa6f339f231265e", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -19,7 +19,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n \n     debug!(\"Joined task.\");\n }"}, {"sha": "b34eff7c30b106612d38606c1866e46e52ee6337", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -53,7 +53,7 @@ fn test00() {\n     }\n \n     // Join spawned tasks...\n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n \n     debug!(\"Completed: Final number is: \");\n     log(error, sum);"}, {"sha": "c8bd043a182f010b4f6dd86d704c9a897651410a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -30,7 +30,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "d1548de5a6dd133b8b1d9d7e73022d0282f032fc", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -51,7 +51,7 @@ fn test00() {\n         while i < number_of_messages { sum += recv(po); i = i + 1; }\n     }\n \n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n \n     debug!(\"Completed: Final number is: \");\n     assert (sum ==\n@@ -134,7 +134,7 @@ fn test06() {\n     }\n \n \n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n }\n \n "}, {"sha": "0ef4d088f9ccc891008f53bf6ba7f11ffebbcddc", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     error!(\"2\");\n     yield();\n     error!(\"3\");\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n }\n \n fn child() {"}, {"sha": "0a6a79682247cb5da86c8269d90c9a4204073c33", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=b2d5acd6bcf34da3c7a16e554f9249c4cb1cc846", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n     yield();\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n }\n \n fn child() { error!(\"2\"); }"}]}