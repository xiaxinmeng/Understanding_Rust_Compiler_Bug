{"sha": "5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "node_id": "C_kwDOAAsO6NoAKDVmYzFkZDExYTkzYjU3ZDc5NWUzNTJlNmM4NzE4ZDVmZmJiNzRkYmI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-28T15:03:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-28T15:03:50Z"}, "message": "emit Retag for compound types with reference fields", "tree": {"sha": "d3f4ce6ad86c224062b8a1294a044d04755f138b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f4ce6ad86c224062b8a1294a044d04755f138b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "html_url": "https://github.com/rust-lang/rust/commit/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f08d04d60d03e1a52dae61ce6aa50996898702b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f08d04d60d03e1a52dae61ce6aa50996898702b", "html_url": "https://github.com/rust-lang/rust/commit/7f08d04d60d03e1a52dae61ce6aa50996898702b"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "0f87e638d2618e2ea92aa756008ed40f0a230c03", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "patch": "@@ -33,8 +33,9 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n     })\n }\n \n-/// Determine whether this type may be a reference (or box), and thus needs retagging.\n-fn may_be_reference(ty: Ty<'_>) -> bool {\n+/// Determine whether this type may contain a reference (or box), and thus needs retagging.\n+/// We will only recurse `depth` times into Tuples/ADTs to bound the cost of this.\n+fn may_contain_reference<'tcx>(ty: Ty<'tcx>, depth: u32, tcx: TyCtxt<'tcx>) -> bool {\n     match ty.kind() {\n         // Primitive types that are not references\n         ty::Bool\n@@ -50,8 +51,20 @@ fn may_be_reference(ty: Ty<'_>) -> bool {\n         // References\n         ty::Ref(..) => true,\n         ty::Adt(..) if ty.is_box() => true,\n-        // Compound types are not references\n-        ty::Array(..) | ty::Slice(..) | ty::Tuple(..) | ty::Adt(..) => false,\n+        // Compound types: recurse\n+        ty::Array(ty, _) | ty::Slice(ty) => {\n+            // This does not branch so we keep the depth the same.\n+            may_contain_reference(*ty, depth, tcx)\n+        }\n+        ty::Tuple(tys) => {\n+            depth == 0 || tys.iter().any(|ty| may_contain_reference(ty, depth - 1, tcx))\n+        }\n+        ty::Adt(adt, subst) => {\n+            depth == 0\n+                || adt.variants().iter().any(|v| {\n+                    v.fields.iter().any(|f| may_contain_reference(f.ty(tcx, subst), depth - 1, tcx))\n+                })\n+        }\n         // Conservative fallback\n         _ => true,\n     }\n@@ -83,7 +96,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             // FIXME: Instead of giving up for unstable places, we should introduce\n             // a temporary and retag on that.\n             is_stable(place.as_ref())\n-                && may_be_reference(place.ty(&*local_decls, tcx).ty)\n+                && may_contain_reference(place.ty(&*local_decls, tcx).ty, /*depth*/ 3, tcx)\n                 && is_not_temp(&local_decls[place.local])\n         };\n         let place_base_raw = |place: &Place<'tcx>| {"}, {"sha": "c8c45da19137fb20ee213f7815402a6e3ad7a567", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=5fc1dd11a93b57d795e352e6c8718d5ffbb74dbb", "patch": "@@ -129,6 +129,7 @@ fn array_casts() -> () {\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _13 = (move _14, move _18);      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_13);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -171,6 +172,7 @@ fn array_casts() -> () {\n         Retag(_32);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _34 = Option::<Arguments>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_34);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL"}]}