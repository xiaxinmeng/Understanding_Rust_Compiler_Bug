{"sha": "98ed8825114d4413c3d739e734ca0668222eb2f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWQ4ODI1MTE0ZDQ0MTNjM2Q3MzllNzM0Y2EwNjY4MjIyZWIyZjY=", "commit": {"author": {"name": "Maya Nitu", "email": "maya_nitu@yahoo.com", "date": "2014-12-22T16:20:43Z"}, "committer": {"name": "Maya Nitu", "email": "maya_nitu@yahoo.com", "date": "2014-12-22T17:12:35Z"}, "message": "Removed unused context-switching assembly code.", "tree": {"sha": "e5fa280c717b92a2685b65838b5669977d343489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5fa280c717b92a2685b65838b5669977d343489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ed8825114d4413c3d739e734ca0668222eb2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ed8825114d4413c3d739e734ca0668222eb2f6", "html_url": "https://github.com/rust-lang/rust/commit/98ed8825114d4413c3d739e734ca0668222eb2f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ed8825114d4413c3d739e734ca0668222eb2f6/comments", "author": {"login": "selaine", "id": 9153547, "node_id": "MDQ6VXNlcjkxNTM1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9153547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selaine", "html_url": "https://github.com/selaine", "followers_url": "https://api.github.com/users/selaine/followers", "following_url": "https://api.github.com/users/selaine/following{/other_user}", "gists_url": "https://api.github.com/users/selaine/gists{/gist_id}", "starred_url": "https://api.github.com/users/selaine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selaine/subscriptions", "organizations_url": "https://api.github.com/users/selaine/orgs", "repos_url": "https://api.github.com/users/selaine/repos", "events_url": "https://api.github.com/users/selaine/events{/privacy}", "received_events_url": "https://api.github.com/users/selaine/received_events", "type": "User", "site_admin": false}, "committer": {"login": "selaine", "id": 9153547, "node_id": "MDQ6VXNlcjkxNTM1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9153547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selaine", "html_url": "https://github.com/selaine", "followers_url": "https://api.github.com/users/selaine/followers", "following_url": "https://api.github.com/users/selaine/following{/other_user}", "gists_url": "https://api.github.com/users/selaine/gists{/gist_id}", "starred_url": "https://api.github.com/users/selaine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selaine/subscriptions", "organizations_url": "https://api.github.com/users/selaine/orgs", "repos_url": "https://api.github.com/users/selaine/repos", "events_url": "https://api.github.com/users/selaine/events{/privacy}", "received_events_url": "https://api.github.com/users/selaine/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d680009205de2302b902d8f9f5f7ae7a042f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d680009205de2302b902d8f9f5f7ae7a042f1a", "html_url": "https://github.com/rust-lang/rust/commit/34d680009205de2302b902d8f9f5f7ae7a042f1a"}], "stats": {"total": 572, "additions": 2, "deletions": 570}, "files": [{"sha": "a1d18aae1b45948fbdcbdad8a9fd9f58f1a4fd04", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98ed8825114d4413c3d739e734ca0668222eb2f6/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/98ed8825114d4413c3d739e734ca0668222eb2f6/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=98ed8825114d4413c3d739e734ca0668222eb2f6", "patch": "@@ -35,7 +35,7 @@\n # that's per-target so you're allowed to conditionally add files based on the\n # target.\n ################################################################################\n-NATIVE_LIBS := rust_builtin hoedown morestack miniz context_switch \\\n+NATIVE_LIBS := rust_builtin hoedown morestack miniz \\\n \t\trustrt_native rust_test_helpers\n \n # $(1) is the target triple\n@@ -58,8 +58,7 @@ NATIVE_DEPS_rustrt_native_$(1) := \\\n \t\t\tarch/$$(HOST_$(1))/record_sp.S\n NATIVE_DEPS_rust_test_helpers_$(1) := rust_test_helpers.c\n NATIVE_DEPS_morestack_$(1) := arch/$$(HOST_$(1))/morestack.S\n-NATIVE_DEPS_context_switch_$(1) := \\\n-\t\t\tarch/$$(HOST_$(1))/_context.S\n+\n \n ################################################################################\n # You shouldn't find it that necessary to edit anything below this line."}, {"sha": "38fc4827f5861e811ded6db100301a08f6af6b09", "filename": "src/rt/arch/arm/_context.S", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Farm%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Farm%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2F_context.S?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,69 +0,0 @@\n-// Mark stack as non-executable\n-#if defined(__linux__) && defined(__ELF__)\n-.section\t.note.GNU-stack, \"\", %progbits\n-#endif\n-\n-.text\n-.code 32\n-.arm\n-#if defined(__APPLE__)\n-.align 2\n-#else\n-.align\n-#endif\n-\n-#if defined(__APPLE__)\n-  #define SWAP_REGISTERS  _rust_swap_registers\n-  #define BOOTSTRAP_TASK  _rust_bootstrap_green_task\n-#else\n-  #define SWAP_REGISTERS  rust_swap_registers\n-  #define BOOTSTRAP_TASK  rust_bootstrap_green_task\n-#endif\n-        \n-.globl SWAP_REGISTERS\n-SWAP_REGISTERS:\n-\tstr r0, [r0, #0]\n-\tstr r3, [r0, #12]\n-\tstr r4, [r0, #16]\n-\tstr r5, [r0, #20]\n-\tstr r6, [r0, #24]\n-\tstr r7, [r0, #28]\n-\tstr r8, [r0, #32]\n-\tstr r9, [r0, #36]\n-\tstr r10, [r0, #40]\n-\tstr r11, [r0, #44]\n-\tstr r12, [r0, #48]\n-\tstr sp, [r0, #52]\n-\tstr lr, [r0, #56]\n-\n-\tmrs r2, cpsr\n-\tstr r2, [r0, #64]\n-\n-\n-\tldr r0, [r1, #0]\n-\tldr r3, [r1, #12]\n-\tldr r4, [r1, #16]\n-\tldr r5, [r1, #20]\n-\tldr r6, [r1, #24]\n-\tldr r7, [r1, #28]\n-\tldr r8, [r1, #32]\n-\tldr r9, [r1, #36]\n-\tldr r10, [r1, #40]\n-\tldr r11, [r1, #44]\n-\tldr r12, [r1, #48]\n-\n-\tldr sp, [r1, #52]\n-\tldr lr, [r1, #56]\n-\n-\tldr r2, [r1, #64]\n-\tmsr cpsr_cxsf, r2\n-\n-\tmov pc, lr\n-\n-// For reasons of this existence, see the comments in x86_64/_context.S\n-.globl BOOTSTRAP_TASK\n-BOOTSTRAP_TASK:\n-    mov r0, r0\n-    mov r1, r3\n-    mov r2, r4\n-    mov pc, r5"}, {"sha": "6b79a82e4acafdbab2ba7426c7585faaf85ca4af", "filename": "src/rt/arch/i386/_context.S", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fi386%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fi386%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2F_context.S?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,65 +0,0 @@\n-// Mark stack as non-executable\n-#if defined(__linux__) && defined(__ELF__)\n-.section\t.note.GNU-stack, \"\", @progbits\n-#endif\n-\n-        .text\n-\n-/*\n-Callee save registers:\n-        ebp, ebx, esi, edi\n-\n-Caller save registers:\n-        eax, ecx, edx\n-*/\n-\n-/*\n-Saves a set of registers. This is used by our implementation of\n-getcontext.\n-\n-The registers_t variable is in (%esp)\n-*/\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-#define SWAP_REGISTERS _rust_swap_registers\n-#else\n-#define SWAP_REGISTERS rust_swap_registers\n-#endif\n-\n-// swap_registers(registers_t *oregs, registers_t *regs)\n-.globl SWAP_REGISTERS\n-SWAP_REGISTERS:\n-    // save the old context\n-    movl 4(%esp), %eax\n-    movl %ebx, 4(%eax)\n-    movl %ebp, 16(%eax)\n-    movl %esi, 20(%eax)\n-    movl %edi, 24(%eax)\n-\n-    // save the flags\n-    pushf\n-    popl %ecx\n-    movl %ecx, 44(%eax)\n-\n-    // save the return address as the instruction pointer\n-    // and save the stack pointer of the caller\n-    popl %ecx\n-    movl %esp, 28(%eax)\n-    movl %ecx, 48(%eax)\n-\n-    // restore the new context\n-    movl 4(%esp), %eax\n-\n-    movl 4(%eax), %ebx\n-    movl 16(%eax), %ebp\n-    movl 20(%eax), %esi\n-    movl 24(%eax), %edi\n-    movl 28(%eax), %esp\n-\n-    // restore the flags\n-    movl 44(%eax), %ecx\n-    push %ecx\n-    popf\n-\n-    // Return!\n-    jmp *48(%eax)"}, {"sha": "cfe77cc30456b1bacd67918aceab9948aa817af2", "filename": "src/rt/arch/mips/_context.S", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fmips%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fmips%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2F_context.S?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,88 +0,0 @@\n-// Mark stack as non-executable\n-#if defined(__linux__) && defined(__ELF__)\n-.section\t.note.GNU-stack, \"\", @progbits\n-#endif\n-\n-.text\n-.globl rust_swap_registers\n-.align 2\n-.set nomips16\n-.ent rust_swap_registers\n-rust_swap_registers:\n-        .set noreorder\n-        .set nomacro\n-        .set noat\n-        sw $1, 1 * 4($4)\n-        sw $2, 2 * 4($4)\n-        sw $3, 3 * 4($4)\n-        sw $4, 4 * 4($4)\n-        sw $5, 5 * 4($4)\n-        sw $6, 6 * 4($4)\n-        sw $7, 7 * 4($4)\n-\n-        sw $8, 8 * 4($4)\n-        sw $9, 9 * 4($4)\n-        sw $10, 10 * 4($4)\n-        sw $11, 11 * 4($4)\n-        sw $12, 12 * 4($4)\n-        sw $13, 13 * 4($4)\n-        sw $14, 14 * 4($4)\n-        sw $15, 15 * 4($4)\n-\n-        sw $16, 16 * 4($4)\n-        sw $17, 17 * 4($4)\n-        sw $18, 18 * 4($4)\n-        sw $19, 19 * 4($4)\n-        sw $20, 20 * 4($4)\n-        sw $21, 21 * 4($4)\n-        sw $22, 22 * 4($4)\n-        sw $23, 23 * 4($4)\n-\n-        sw $24, 24 * 4($4)\n-        sw $25, 25 * 4($4)\n-        sw $26, 26 * 4($4)\n-        sw $27, 27 * 4($4)\n-        sw $28, 28 * 4($4)\n-        sw $29, 29 * 4($4)\n-        sw $30, 30 * 4($4)\n-        sw $31, 31 * 4($4)\n-\n-        lw $1, 1 * 4($5)\n-        lw $2, 2 * 4($5)\n-        lw $3, 3 * 4($5)\n-        lw $4, 4 * 4($5)\n-        lw $6, 6 * 4($5)\n-        lw $7, 7 * 4($5)\n-\n-        lw $8, 8 * 4($5)\n-        lw $9, 9 * 4($5)\n-        lw $10, 10 * 4($5)\n-        lw $11, 11 * 4($5)\n-        lw $12, 12 * 4($5)\n-        lw $13, 13 * 4($5)\n-        lw $14, 14 * 4($5)\n-        lw $15, 15 * 4($5)\n-\n-        lw $16, 16 * 4($5)\n-        lw $17, 17 * 4($5)\n-        lw $18, 18 * 4($5)\n-        lw $19, 19 * 4($5)\n-        lw $20, 20 * 4($5)\n-        lw $21, 21 * 4($5)\n-        lw $22, 22 * 4($5)\n-        lw $23, 23 * 4($5)\n-\n-        lw $24, 24 * 4($5)\n-        lw $25, 25 * 4($5)\n-        lw $26, 26 * 4($5)\n-        lw $27, 27 * 4($5)\n-        lw $28, 28 * 4($5)\n-        lw $29, 29 * 4($5)\n-        lw $30, 30 * 4($5)\n-        lw $31, 31 * 4($5)\n-\n-        lw $5, 5 * 4($5)\n-\n-        jr $31\n-        nop\n-.end rust_swap_registers"}, {"sha": "cfe77cc30456b1bacd67918aceab9948aa817af2", "filename": "src/rt/arch/mipsel/_context.S", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fmipsel%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fmipsel%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmipsel%2F_context.S?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,88 +0,0 @@\n-// Mark stack as non-executable\n-#if defined(__linux__) && defined(__ELF__)\n-.section\t.note.GNU-stack, \"\", @progbits\n-#endif\n-\n-.text\n-.globl rust_swap_registers\n-.align 2\n-.set nomips16\n-.ent rust_swap_registers\n-rust_swap_registers:\n-        .set noreorder\n-        .set nomacro\n-        .set noat\n-        sw $1, 1 * 4($4)\n-        sw $2, 2 * 4($4)\n-        sw $3, 3 * 4($4)\n-        sw $4, 4 * 4($4)\n-        sw $5, 5 * 4($4)\n-        sw $6, 6 * 4($4)\n-        sw $7, 7 * 4($4)\n-\n-        sw $8, 8 * 4($4)\n-        sw $9, 9 * 4($4)\n-        sw $10, 10 * 4($4)\n-        sw $11, 11 * 4($4)\n-        sw $12, 12 * 4($4)\n-        sw $13, 13 * 4($4)\n-        sw $14, 14 * 4($4)\n-        sw $15, 15 * 4($4)\n-\n-        sw $16, 16 * 4($4)\n-        sw $17, 17 * 4($4)\n-        sw $18, 18 * 4($4)\n-        sw $19, 19 * 4($4)\n-        sw $20, 20 * 4($4)\n-        sw $21, 21 * 4($4)\n-        sw $22, 22 * 4($4)\n-        sw $23, 23 * 4($4)\n-\n-        sw $24, 24 * 4($4)\n-        sw $25, 25 * 4($4)\n-        sw $26, 26 * 4($4)\n-        sw $27, 27 * 4($4)\n-        sw $28, 28 * 4($4)\n-        sw $29, 29 * 4($4)\n-        sw $30, 30 * 4($4)\n-        sw $31, 31 * 4($4)\n-\n-        lw $1, 1 * 4($5)\n-        lw $2, 2 * 4($5)\n-        lw $3, 3 * 4($5)\n-        lw $4, 4 * 4($5)\n-        lw $6, 6 * 4($5)\n-        lw $7, 7 * 4($5)\n-\n-        lw $8, 8 * 4($5)\n-        lw $9, 9 * 4($5)\n-        lw $10, 10 * 4($5)\n-        lw $11, 11 * 4($5)\n-        lw $12, 12 * 4($5)\n-        lw $13, 13 * 4($5)\n-        lw $14, 14 * 4($5)\n-        lw $15, 15 * 4($5)\n-\n-        lw $16, 16 * 4($5)\n-        lw $17, 17 * 4($5)\n-        lw $18, 18 * 4($5)\n-        lw $19, 19 * 4($5)\n-        lw $20, 20 * 4($5)\n-        lw $21, 21 * 4($5)\n-        lw $22, 22 * 4($5)\n-        lw $23, 23 * 4($5)\n-\n-        lw $24, 24 * 4($5)\n-        lw $25, 25 * 4($5)\n-        lw $26, 26 * 4($5)\n-        lw $27, 27 * 4($5)\n-        lw $28, 28 * 4($5)\n-        lw $29, 29 * 4($5)\n-        lw $30, 30 * 4($5)\n-        lw $31, 31 * 4($5)\n-\n-        lw $5, 5 * 4($5)\n-\n-        jr $31\n-        nop\n-.end rust_swap_registers"}, {"sha": "36caf7720c40c5ece1a138bd524c86884fb0364b", "filename": "src/rt/arch/x86_64/_context.S", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,192 +0,0 @@\n-// Mark stack as non-executable\n-#if defined(__linux__) && defined(__ELF__)\n-.section\t.note.GNU-stack, \"\", @progbits\n-#endif\n-\n-#include \"regs.h\"\n-#define ARG0 RUSTRT_ARG0_S\n-#define ARG1 RUSTRT_ARG1_S\n-\n-        .text\n-\n-/*\n-According to ABI documentation found at\n-http://www.x86-64.org/documentation.html\n-and Microsoft discussion at\n-http://msdn.microsoft.com/en-US/library/9z1stfyw%28v=VS.80%29.aspx.\n-\n-BOTH CALLING CONVENTIONS\n-\n-Callee save registers:\n-\tR12--R15, RDI, RSI, RBX, RBP, RSP\n-        XMM0--XMM5\n-\n-Caller save registers:\n-\tRAX, RCX, RDX, R8--R11\n-        XMM6--XMM15\n-        Floating point stack\n-\n-MAC/AMD CALLING CONVENTIONS\n-\n-Integer arguments go in registers:\n-        rdi, rsi, rdx, rcx, r8, r9\n-\n-User flags have no specified role and are not preserved\n-        across calls, with the exception of DF in %rFLAGS,\n-        which must be clear (set to \"forward\" direction)\n-        on function entry and return.\n-\n-MICROSOFT CALLING CONVENTIONS\n-\n-Return value: RAX\n-\n-First four arguments:\n-        RCX, RDX, R8, R9\n-        XMM0, XMM1, XMM2, XMM3\n-*/\n-\n-/*\n-        Stores current registers into arg0/RCX and restores\n-        registers found in arg1/RDX. This is used by our\n-\t    implementation of getcontext.  Only saves/restores nonvolatile\n-        registers and the register used for the first argument.\n-        Volatile registers in general ought to be saved by the caller\n-        anyhow.\n-*/\n-\n-#if defined(__APPLE__)\n-#define SWAP_REGISTERS _rust_swap_registers\n-#else\n-#define SWAP_REGISTERS rust_swap_registers\n-#endif\n-\n-// swap_registers(registers_t *oregs, registers_t *regs)\n-.globl SWAP_REGISTERS\n-SWAP_REGISTERS:\n-        // n.b. when we enter, the return address is at the top of\n-        // the stack (i.e., 0(%RSP)) and the argument is in\n-        // RUSTRT_ARG0_S.  We\n-        // simply save all NV registers into oregs.\n-        // We then restore all NV registers from regs.  This restores\n-        // the old stack pointer, which should include the proper\n-        // return address. We can therefore just return normally to\n-        // jump back into the old code.\n-\n-        // Save instruction pointer:\n-        pop %rax\n-        mov %rax, (RUSTRT_IP*8)(RUSTRT_ARG0_S)\n-\n-        // Save non-volatile integer registers:\n-        //   (including RSP)\n-        mov %rbx, (RUSTRT_RBX*8)(ARG0)\n-        mov %rsp, (RUSTRT_RSP*8)(ARG0)\n-        mov %rbp, (RUSTRT_RBP*8)(ARG0)\n-        mov %r12, (RUSTRT_R12*8)(ARG0)\n-        mov %r13, (RUSTRT_R13*8)(ARG0)\n-        mov %r14, (RUSTRT_R14*8)(ARG0)\n-        mov %r15, (RUSTRT_R15*8)(ARG0)\n-\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-        mov %rdi, (RUSTRT_RDI*8)(ARG0)\n-        mov %rsi, (RUSTRT_RSI*8)(ARG0)\n-#endif\n-\n-        // Save 0th argument register:\n-        mov ARG0, (RUSTRT_ARG0*8)(ARG0)\n-\n-        // Save non-volatile XMM registers:\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-        movapd %xmm6, (RUSTRT_XMM6*8)(ARG0)\n-        movapd %xmm7, (RUSTRT_XMM7*8)(ARG0)\n-        movapd %xmm8, (RUSTRT_XMM8*8)(ARG0)\n-        movapd %xmm9, (RUSTRT_XMM9*8)(ARG0)\n-        movapd %xmm10, (RUSTRT_XMM10*8)(ARG0)\n-        movapd %xmm11, (RUSTRT_XMM11*8)(ARG0)\n-        movapd %xmm12, (RUSTRT_XMM12*8)(ARG0)\n-        movapd %xmm13, (RUSTRT_XMM13*8)(ARG0)\n-        movapd %xmm14, (RUSTRT_XMM14*8)(ARG0)\n-        movapd %xmm15, (RUSTRT_XMM15*8)(ARG0)\n-#else\n-        movapd %xmm0, (RUSTRT_XMM0*8)(ARG0)\n-        movapd %xmm1, (RUSTRT_XMM1*8)(ARG0)\n-        movapd %xmm2, (RUSTRT_XMM2*8)(ARG0)\n-        movapd %xmm3, (RUSTRT_XMM3*8)(ARG0)\n-        movapd %xmm4, (RUSTRT_XMM4*8)(ARG0)\n-        movapd %xmm5, (RUSTRT_XMM5*8)(ARG0)\n-#endif\n-\n-        // Restore non-volatile integer registers:\n-        //   (including RSP)\n-        mov (RUSTRT_RBX*8)(ARG1), %rbx\n-        mov (RUSTRT_RSP*8)(ARG1), %rsp\n-        mov (RUSTRT_RBP*8)(ARG1), %rbp\n-        mov (RUSTRT_R12*8)(ARG1), %r12\n-        mov (RUSTRT_R13*8)(ARG1), %r13\n-        mov (RUSTRT_R14*8)(ARG1), %r14\n-        mov (RUSTRT_R15*8)(ARG1), %r15\n-\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-        mov (RUSTRT_RDI*8)(ARG1), %rdi\n-        mov (RUSTRT_RSI*8)(ARG1), %rsi\n-#endif\n-\n-        // Restore 0th argument register:\n-        mov (RUSTRT_ARG0*8)(ARG1), ARG0\n-\n-        // Restore non-volatile XMM registers:\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-        movapd (RUSTRT_XMM6*8)(ARG1), %xmm6\n-        movapd (RUSTRT_XMM7*8)(ARG1), %xmm7\n-        movapd (RUSTRT_XMM8*8)(ARG1), %xmm8\n-        movapd (RUSTRT_XMM9*8)(ARG1), %xmm9\n-        movapd (RUSTRT_XMM10*8)(ARG1), %xmm10\n-        movapd (RUSTRT_XMM11*8)(ARG1), %xmm11\n-        movapd (RUSTRT_XMM12*8)(ARG1), %xmm12\n-        movapd (RUSTRT_XMM13*8)(ARG1), %xmm13\n-        movapd (RUSTRT_XMM14*8)(ARG1), %xmm14\n-        movapd (RUSTRT_XMM15*8)(ARG1), %xmm15\n-#else\n-        movapd (RUSTRT_XMM0*8)(ARG1), %xmm0\n-        movapd (RUSTRT_XMM1*8)(ARG1), %xmm1\n-        movapd (RUSTRT_XMM2*8)(ARG1), %xmm2\n-        movapd (RUSTRT_XMM3*8)(ARG1), %xmm3\n-        movapd (RUSTRT_XMM4*8)(ARG1), %xmm4\n-        movapd (RUSTRT_XMM5*8)(ARG1), %xmm5\n-#endif\n-\n-        // Jump to the instruction pointer\n-        // found in regs:\n-        jmp *(RUSTRT_IP*8)(ARG1)\n-\n-// This function below, rust_bootstrap_green_task, is used to initialize a green\n-// task. This code is the very first code that is run whenever a green task\n-// starts. The only assumptions that this code makes is that it has a register\n-// context previously set up by Context::new() and some values are in some\n-// special registers.\n-//\n-// In theory the register context could be set up and then the context switching\n-// would plop us directly into some 'extern \"C\" fn', but not all platforms have\n-// the argument registers saved throughout a context switch (linux doesn't save\n-// rdi/rsi, the first two argument registers). Instead of modifying all context\n-// switches, instead the initial data for starting a green thread is shoved into\n-// unrelated registers (r12/13, etc) which always need to be saved on context\n-// switches anyway.\n-//\n-// With this strategy we get the benefit of being able to pass a fair bit of\n-// contextual data from the start of a green task to its init function, as well\n-// as not hindering any context switches.\n-//\n-// If you alter this code in any way, you likely need to update\n-// src/libgreen/context.rs as well.\n-\n-#if defined(__APPLE__)\n-#define BOOTSTRAP _rust_bootstrap_green_task\n-#else\n-#define BOOTSTRAP rust_bootstrap_green_task\n-#endif\n-.globl BOOTSTRAP\n-BOOTSTRAP:\n-    mov %r12, RUSTRT_ARG0_S\n-    mov %r13, RUSTRT_ARG1_S\n-    mov %r14, RUSTRT_ARG2_S\n-    jmpq *%r15"}, {"sha": "25160ca68a6b398d526f71e5c55492d24385706e", "filename": "src/rt/arch/x86_64/regs.h", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/34d680009205de2302b902d8f9f5f7ae7a042f1a/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fregs.h?ref=34d680009205de2302b902d8f9f5f7ae7a042f1a", "patch": "@@ -1,65 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This is loosely kept in sync with src/libstd/rt/context.rs\n-\n-#define RUSTRT_RBX   0\n-#define RUSTRT_RSP   1\n-#define RUSTRT_RBP   2\n-// RCX on Windows, RDI elsewhere\n-#define RUSTRT_ARG0  3\n-#define RUSTRT_R12   4\n-#define RUSTRT_R13   5\n-#define RUSTRT_R14   6\n-#define RUSTRT_R15   7\n-#define RUSTRT_IP    8\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-    #define RUSTRT_RDI   9\n-    #define RUSTRT_RSI   10\n-    #define RUSTRT_ST1   11\n-    #define RUSTRT_ST2   12\n-    #define RUSTRT_XMM6  14\n-    #define RUSTRT_XMM7  16\n-    #define RUSTRT_XMM8  18\n-    #define RUSTRT_XMM9  20\n-    #define RUSTRT_XMM10 22\n-    #define RUSTRT_XMM11 24\n-    #define RUSTRT_XMM12 26\n-    #define RUSTRT_XMM13 28\n-    #define RUSTRT_XMM14 30\n-    #define RUSTRT_XMM15 32\n-    #define RUSTRT_MAX   34\n-#else\n-    // Not used, just padding\n-    #define RUSTRT_XXX   9\n-    #define RUSTRT_XMM0 10\n-    #define RUSTRT_XMM1 12\n-    #define RUSTRT_XMM2 14\n-    #define RUSTRT_XMM3 16\n-    #define RUSTRT_XMM4 18\n-    #define RUSTRT_XMM5 20\n-    #define RUSTRT_MAX  22\n-#endif\n-\n-// ARG0 is the register in which the first argument goes.\n-// Naturally this depends on your operating system.\n-#if defined(__MINGW32__) || defined(_WINDOWS)\n-#   define RUSTRT_ARG0_S %rcx\n-#   define RUSTRT_ARG1_S %rdx\n-#   define RUSTRT_ARG2_S %r8\n-#   define RUSTRT_ARG3_S %r9\n-#else\n-#   define RUSTRT_ARG0_S %rdi\n-#   define RUSTRT_ARG1_S %rsi\n-#   define RUSTRT_ARG2_S %rdx\n-#   define RUSTRT_ARG3_S %rcx\n-#   define RUSTRT_ARG4_S %r8\n-#   define RUSTRT_ARG5_S %r9\n-#endif"}]}