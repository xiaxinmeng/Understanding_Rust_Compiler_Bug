{"sha": "95979dcfb201f1d6906a2f256e5e311513cab4ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTc5ZGNmYjIwMWYxZDY5MDZhMmYyNTZlNWUzMTE1MTNjYWI0ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T08:55:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T08:55:13Z"}, "message": "Auto merge of #51601 - Emerentius:step_by_range_diet, r=sfackler\n\nSpecialize StepBy<Range(Inclusive)>\n\nPart of #51557, related to #43064, #31155\n\nAs discussed in the above issues, `step_by` optimizes very badly on ranges which is related to\n1. the special casing of the first `StepBy::next()` call\n2. the need to do 2 additions of `n - 1` and `1` inside the range's `next()`\n\nThis PR eliminates both by overriding `next()` to always produce the current element and also step ahead by `n` elements in one go. The generated code is much better, even identical in the case of a `Range` with constant `start` and `end` where `start+step` can't overflow. Without constant bounds it's a bit longer than the manual loop. `RangeInclusive` doesn't optimize as nicely but is still much better than the original asm.\nUnsigned integers optimize better than signed ones for some reason.\n\nSee the following two links for a comparison.\n\n[godbolt: specialization for ..](https://godbolt.org/g/haHLJr)\n[godbolt: specialization for ..=](https://godbolt.org/g/ewyMu6)\n\n`RangeFrom`, the only other range with an `Iterator` implementation can't be specialized like this without changing behaviour due to overflow. There is no way to save \"finished-ness\".\n\nThe approach can not be used in general, because it would produce side effects of the underlying iterator too early.\n\nMay obsolete #51435, haven't checked.", "tree": {"sha": "66185002624f721557cd2b7781f1452d383fe74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66185002624f721557cd2b7781f1452d383fe74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95979dcfb201f1d6906a2f256e5e311513cab4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95979dcfb201f1d6906a2f256e5e311513cab4ea", "html_url": "https://github.com/rust-lang/rust/commit/95979dcfb201f1d6906a2f256e5e311513cab4ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95979dcfb201f1d6906a2f256e5e311513cab4ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff1abadd7a4ec861ca4b9c77035379578ef033d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff1abadd7a4ec861ca4b9c77035379578ef033d", "html_url": "https://github.com/rust-lang/rust/commit/fff1abadd7a4ec861ca4b9c77035379578ef033d"}, {"sha": "000aff604e3b16ffc3771bd5d93a6e7b425852d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/000aff604e3b16ffc3771bd5d93a6e7b425852d2", "html_url": "https://github.com/rust-lang/rust/commit/000aff604e3b16ffc3771bd5d93a6e7b425852d2"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "c4132270d5923664cfc69a1467d54e27a73ffd1a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/95979dcfb201f1d6906a2f256e5e311513cab4ea/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95979dcfb201f1d6906a2f256e5e311513cab4ea/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=95979dcfb201f1d6906a2f256e5e311513cab4ea", "patch": "@@ -319,9 +319,10 @@\n use cmp;\n use fmt;\n use iter_private::TrustedRandomAccess;\n-use ops::Try;\n+use ops::{self, Try};\n use usize;\n use intrinsics;\n+use mem;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n@@ -672,12 +673,7 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        if self.first_take {\n-            self.first_take = false;\n-            self.iter.next()\n-        } else {\n-            self.iter.nth(self.step)\n-        }\n+        <Self as StepBySpecIterator>::spec_next(self)\n     }\n \n     #[inline]\n@@ -737,6 +733,76 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n     }\n }\n \n+// hidden trait for specializing iterator methods\n+// could be generalized but is currently only used for StepBy\n+trait StepBySpecIterator {\n+    type Item;\n+    fn spec_next(&mut self) -> Option<Self::Item>;\n+}\n+\n+impl<I> StepBySpecIterator for StepBy<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = I::Item;\n+\n+    #[inline]\n+    default fn spec_next(&mut self) -> Option<I::Item> {\n+        if self.first_take {\n+            self.first_take = false;\n+            self.iter.next()\n+        } else {\n+            self.iter.nth(self.step)\n+        }\n+    }\n+}\n+\n+impl<T> StepBySpecIterator for StepBy<ops::Range<T>>\n+where\n+    T: Step,\n+{\n+    #[inline]\n+    fn spec_next(&mut self) -> Option<Self::Item> {\n+        self.first_take = false;\n+        if !(self.iter.start < self.iter.end) {\n+            return None;\n+        }\n+        // add 1 to self.step to get original step size back\n+        // it was decremented for the general case on construction\n+        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n+            let next = mem::replace(&mut self.iter.start, n);\n+            Some(next)\n+        } else {\n+            let last = self.iter.start.clone();\n+            self.iter.start = self.iter.end.clone();\n+            Some(last)\n+        }\n+    }\n+}\n+\n+impl<T> StepBySpecIterator for StepBy<ops::RangeInclusive<T>>\n+where\n+    T: Step,\n+{\n+    #[inline]\n+    fn spec_next(&mut self) -> Option<Self::Item> {\n+        self.first_take = false;\n+        if !(self.iter.start <= self.iter.end) {\n+            return None;\n+        }\n+        // add 1 to self.step to get original step size back\n+        // it was decremented for the general case on construction\n+        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n+            let next = mem::replace(&mut self.iter.start, n);\n+            Some(next)\n+        } else {\n+            let last = self.iter.start.replace_one();\n+            self.iter.end.replace_zero();\n+            Some(last)\n+        }\n+    }\n+}\n+\n // StepBy can only make the iterator shorter, so the len will still fit.\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}"}, {"sha": "72b115f8b5f7705c6ee97a32921624e5011fff46", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95979dcfb201f1d6906a2f256e5e311513cab4ea/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95979dcfb201f1d6906a2f256e5e311513cab4ea/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=95979dcfb201f1d6906a2f256e5e311513cab4ea", "patch": "@@ -1618,6 +1618,14 @@ fn test_range_step() {\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n \n+#[test]\n+fn test_range_inclusive_step() {\n+    assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n+    assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);\n+    assert_eq!((200..=255u8).step_by(10).collect::<Vec<_>>(), [200, 210, 220, 230, 240, 250]);\n+    assert_eq!((250..=255u8).step_by(1).collect::<Vec<_>>(), [250, 251, 252, 253, 254, 255]);\n+}\n+\n #[test]\n fn test_range_last_max() {\n     assert_eq!((0..20).last(), Some(19));"}]}