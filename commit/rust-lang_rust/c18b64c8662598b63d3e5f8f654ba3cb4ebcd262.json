{"sha": "c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGI2NGM4NjYyNTk4YjYzZDNlNWY4ZjY1NGJhM2NiNGViY2QyNjI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-11T19:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-11T19:28:32Z"}, "message": "Rollup merge of #75378 - petrochenkov:isident, r=Mark-Simulacrum\n\nIntroduce `rustc_lexer::is_ident` and use it in couple of places\n\nImplements the suggestion from https://github.com/rust-lang/rust/pull/74537#issuecomment-662261979.", "tree": {"sha": "a33c7a92946c23be328d2b4b983a46d7323be030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33c7a92946c23be328d2b4b983a46d7323be030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMvFgCRBK7hj4Ov3rIwAAdHIIAHFN/v662rXJKs+5pJHFXkn4\n6/kEGQgMw/fKWdowtKi0Mz7wTyVROEhh1UPana1SNymIkef5taxwE+4aTkjQaqfO\n1LzuL6FrG1ApdBdjbqsPgjJoHwVpnV9tJo5tTrMDha2YXhsNxvxydwYvwjw4VP2p\nEYc8WADldXo1T2QpXc8Z5rudOK2TiTANpNpGDNLoOJAi/KREHev0EVSHsfxr7MLC\nF9Pp5D/4OGK/9iPFDbGCE8R9j2dYgvxOQeAZOIYNb4YU20tWq0gpJrdxq9ztSQP4\nvJP1cgR8kxwX5o/3YR1s44UWbgDO0pgRDhSljk2/dVXuN5BMaR73LhwC3/tCTq4=\n=IzRf\n-----END PGP SIGNATURE-----\n", "payload": "tree a33c7a92946c23be328d2b4b983a46d7323be030\nparent dcccb47cb80c2038a162ecadc1dd095d1e491961\nparent 6bbf4558ac096b6f2cc7cef3920681b8c42e13ef\nauthor Tyler Mandry <tmandry@gmail.com> 1597174112 -0700\ncommitter GitHub <noreply@github.com> 1597174112 -0700\n\nRollup merge of #75378 - petrochenkov:isident, r=Mark-Simulacrum\n\nIntroduce `rustc_lexer::is_ident` and use it in couple of places\n\nImplements the suggestion from https://github.com/rust-lang/rust/pull/74537#issuecomment-662261979.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "html_url": "https://github.com/rust-lang/rust/commit/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcccb47cb80c2038a162ecadc1dd095d1e491961", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcccb47cb80c2038a162ecadc1dd095d1e491961", "html_url": "https://github.com/rust-lang/rust/commit/dcccb47cb80c2038a162ecadc1dd095d1e491961"}, {"sha": "6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "html_url": "https://github.com/rust-lang/rust/commit/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "e2a16d56e49ea684c606a62b9adeef9f97d27ffc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -3257,6 +3257,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "35bdf747f08d7d3e2be12f99fec0c32a6bdec0bc", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -16,6 +16,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "5f131fae385b08c7d5b3a2c7186f6c5de608d4da", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -20,6 +20,7 @@ enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),\n     MissingSince,\n+    NonIdentFeature,\n     MissingFeature,\n     MultipleStabilityLevels,\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n@@ -40,6 +41,9 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n         AttrError::MissingSince => {\n             struct_span_err!(diag, span, E0542, \"missing 'since'\").emit();\n         }\n+        AttrError::NonIdentFeature => {\n+            struct_span_err!(diag, span, E0546, \"'feature' is not an identifier\").emit();\n+        }\n         AttrError::MissingFeature => {\n             struct_span_err!(diag, span, E0546, \"missing 'feature'\").emit();\n         }\n@@ -344,6 +348,14 @@ where\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(_)) => {\n+                            if !rustc_lexer::is_ident(&feature.as_str()) {\n+                                handle_errors(\n+                                    &sess.parse_sess,\n+                                    attr.span,\n+                                    AttrError::NonIdentFeature,\n+                                );\n+                                continue;\n+                            }\n                             let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });"}, {"sha": "83a650443bcba59c6cffc07f204d5109fbad7459", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -319,18 +319,10 @@ pub struct Ident {\n }\n \n impl Ident {\n-    fn is_valid(string: &str) -> bool {\n-        let mut chars = string.chars();\n-        if let Some(start) = chars.next() {\n-            rustc_lexer::is_id_start(start) && chars.all(rustc_lexer::is_id_continue)\n-        } else {\n-            false\n-        }\n-    }\n     fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n         let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n-        if !Self::is_valid(&string) {\n+        if !rustc_lexer::is_ident(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n         if is_raw && !sym.can_be_raw() {"}, {"sha": "7949a232b9b35a8c535c20ae8e05f8ff5c7eed9f", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -274,6 +274,16 @@ pub fn is_id_continue(c: char) -> bool {\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }\n \n+/// The passed string is lexically an identifier.\n+pub fn is_ident(string: &str) -> bool {\n+    let mut chars = string.chars();\n+    if let Some(start) = chars.next() {\n+        is_id_start(start) && chars.all(is_id_continue)\n+    } else {\n+        false\n+    }\n+}\n+\n impl Cursor<'_> {\n     /// Parses a token from the input string.\n     fn advance_token(&mut self) -> Token {"}, {"sha": "801d06e61016961ef8a808004708c727044ddfbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -2358,7 +2358,7 @@ impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext<'_>) -> Stability {\n         Stability {\n             level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: Some(self.feature.to_string()).filter(|f| !f.is_empty()),\n+            feature: self.feature.to_string(),\n             since: match self.level {\n                 attr::Stable { ref since } => since.to_string(),\n                 _ => String::new(),"}, {"sha": "627f88df45c9fe00170d487dc13e5b0eaab59c45", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -1525,7 +1525,7 @@ pub struct ProcMacro {\n #[derive(Clone, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n-    pub feature: Option<String>,\n+    pub feature: String,\n     pub since: String,\n     pub unstable_reason: Option<String>,\n     pub issue: Option<NonZeroU32>,"}, {"sha": "bd919205dd1761b76c9cd010df00fbd57cc5f1af", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18b64c8662598b63d3e5f8f654ba3cb4ebcd262/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c18b64c8662598b63d3e5f8f654ba3cb4ebcd262", "patch": "@@ -2144,7 +2144,7 @@ fn stability_tags(item: &clean::Item) -> String {\n     if item\n         .stability\n         .as_ref()\n-        .map(|s| s.level == stability::Unstable && s.feature.as_deref() != Some(\"rustc_private\"))\n+        .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"Experimental\");\n@@ -2195,25 +2195,25 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some(stab) = item.stability.as_ref().filter(|stab| {\n-        stab.level == stability::Unstable && stab.feature.as_deref() != Some(\"rustc_private\")\n-    }) {\n+    if let Some(stab) = item\n+        .stability\n+        .as_ref()\n+        .filter(|stab| stab.level == stability::Unstable && stab.feature != \"rustc_private\")\n+    {\n         let mut message =\n             \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        if let Some(feature) = stab.feature.as_deref() {\n-            let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n-            if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n-                feature.push_str(&format!(\n-                    \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n-                    url = url,\n-                    issue = issue\n-                ));\n-            }\n-\n-            message.push_str(&format!(\" ({})\", feature));\n+        let mut feature = format!(\"<code>{}</code>\", Escape(&stab.feature));\n+        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+            feature.push_str(&format!(\n+                \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n+                url = url,\n+                issue = issue\n+            ));\n         }\n \n+        message.push_str(&format!(\" ({})\", feature));\n+\n         if let Some(unstable_reason) = &stab.unstable_reason {\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!("}]}