{"sha": "0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODBhYzM1NjJhMjk4N2VmNjcwOGIwMWY2YjI3YTViN2IzYzRiMGQ=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T06:30:13Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T06:42:33Z"}, "message": "Add `get_unwrap` lint", "tree": {"sha": "e912773a26f32ed8f8c04762a790230b2fff79d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e912773a26f32ed8f8c04762a790230b2fff79d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d", "html_url": "https://github.com/rust-lang/rust/commit/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1f0656789a038cb90840c898613dca5d005651", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1f0656789a038cb90840c898613dca5d005651", "html_url": "https://github.com/rust-lang/rust/commit/0e1f0656789a038cb90840c898613dca5d005651"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "f1cd405ecc5f908e301a788c3b693986226fb718", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=0680ac3562a2987ef6708b01f6b27a5b7b3c4b0d", "patch": "@@ -464,6 +464,32 @@ declare_lint! {\n     \"using `.skip(x).next()` on an iterator\"\n }\n \n+/// **What it does:** Checks for use of `.get().unwrap()` (or\n+/// `.get_mut().unwrap`) on a standard library type which implements `Index`\n+///\n+/// **Why is this bad?** Using the Index trait (`[]`) is more clear and more\n+/// concise.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let last = some_vec.get(3).unwrap();\n+/// some_vec.get_mut(0).unwrap() = 1;\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let last = some_vec[3];\n+/// some_vec[0] = 1;\n+/// ```\n+declare_lint! {\n+    pub GET_UNWRAP,\n+    Warn,\n+    \"using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\"\n+}\n+\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -487,7 +513,8 @@ impl LintPass for Pass {\n                     FILTER_NEXT,\n                     FILTER_MAP,\n                     ITER_NTH,\n-                    ITER_SKIP_NEXT)\n+                    ITER_SKIP_NEXT,\n+                    GET_UNWRAP)\n     }\n }\n \n@@ -532,6 +559,10 @@ impl LateLintPass for Pass {\n                     lint_iter_nth(cx, expr, arglists[0], false);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"iter_mut\", \"nth\"]) {\n                     lint_iter_nth(cx, expr, arglists[0], true);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n+                    lint_get_unwrap(cx, expr, arglists[0], false);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"get_mut\", \"unwrap\"]) {\n+                    lint_get_unwrap(cx, expr, arglists[0], true);\n                 } else if method_chain_args(expr, &[\"skip\", \"next\"]).is_some() {\n                     lint_iter_skip_next(cx, expr);\n                 }\n@@ -818,6 +849,38 @@ fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs, is_\n     );\n }\n \n+fn lint_get_unwrap(cx: &LateContext, expr: &hir::Expr, get_args: &MethodArgs, is_mut: bool) {\n+    let mut_str = if is_mut { \"_mut\" } else {\"\"};\n+    let caller_type = if derefs_to_slice(cx, &get_args[0], cx.tcx.expr_ty(&get_args[0])).is_some() {\n+        \"slice\"\n+    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::VEC) {\n+        \"Vec\"\n+    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::VEC_DEQUE) {\n+        \"VecDeque\"\n+    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::HASHMAP) {\n+        \"HashMap\"\n+    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::BTREEMAP) {\n+        \"BTreeMap\"\n+    } else {\n+        return; // caller is not a type that we want to lint\n+    };\n+\n+    span_lint_and_then(\n+        cx,\n+        GET_UNWRAP,\n+        expr.span,\n+        &format!(\"called `.get{0}().unwrap()` on a {1}. Using `[]` is more clear and more concise\",\n+                 mut_str, caller_type),\n+        |db| {\n+            db.span_suggestion(\n+                expr.span,\n+                \"try this\",\n+                format!(\"{}[{}]\", snippet(cx, get_args[0].span, \"_\"), snippet(cx, get_args[1].span, \"_\"))\n+            );\n+        }\n+    );\n+}\n+\n fn lint_iter_skip_next(cx: &LateContext, expr: &hir::Expr){\n     // lint if caller of skip is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {"}]}