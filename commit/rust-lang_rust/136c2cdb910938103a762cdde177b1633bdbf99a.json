{"sha": "136c2cdb910938103a762cdde177b1633bdbf99a", "node_id": "C_kwDOAAsO6NoAKDEzNmMyY2RiOTEwOTM4MTAzYTc2MmNkZGUxNzdiMTYzM2JkYmY5OWE", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-13T12:13:54Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-17T11:36:05Z"}, "message": "Add `unused_format_specs` lint", "tree": {"sha": "f4dc1f1c4bb258ebdd3b29784ef2355519387287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4dc1f1c4bb258ebdd3b29784ef2355519387287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136c2cdb910938103a762cdde177b1633bdbf99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136c2cdb910938103a762cdde177b1633bdbf99a", "html_url": "https://github.com/rust-lang/rust/commit/136c2cdb910938103a762cdde177b1633bdbf99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136c2cdb910938103a762cdde177b1633bdbf99a/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ef56e39b434f5ce92154065b1d796e60355753", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ef56e39b434f5ce92154065b1d796e60355753", "html_url": "https://github.com/rust-lang/rust/commit/58ef56e39b434f5ce92154065b1d796e60355753"}], "stats": {"total": 412, "additions": 384, "deletions": 28}, "files": [{"sha": "5b2f96ed1ffed9913aa4d63c2fd976ade1b51dd3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -4315,6 +4315,7 @@ Released 2018-09-13\n [`unstable_as_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#unstable_as_slice\n [`unused_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\n [`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n+[`unused_format_specs`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_format_specs\n [`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n [`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n [`unused_peekable`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_peekable"}, {"sha": "4c4a1e06cd4348d06181e30c6d3a1b8aedc853a8", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 129, "deletions": 22, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -1,8 +1,10 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n-use clippy_utils::macros::{is_format_macro, is_panic, FormatArgsExpn, FormatParam, FormatParamUsage};\n+use clippy_utils::macros::{\n+    is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n+};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n@@ -117,7 +119,43 @@ declare_clippy_lint! {\n     \"using non-inlined variables in `format!` calls\"\n }\n \n-impl_lint_pass!(FormatArgs => [FORMAT_IN_FORMAT_ARGS, UNINLINED_FORMAT_ARGS, TO_STRING_IN_FORMAT_ARGS]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects [formatting parameters] that have no effect on the output of\n+    /// `format!()`, `println!()` or similar macros.\n+    ///\n+    /// ### Why is this bad?\n+    /// Shorter format specifiers are easier to read, it may also indicate that\n+    /// an expected formatting operation such as adding padding isn't happening.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// println!(\"{:.}\", 1.0);\n+    ///\n+    /// println!(\"not padded: {:5}\", format_args!(\"...\"));\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// println!(\"{}\", 1.0);\n+    ///\n+    /// println!(\"not padded: {}\", format_args!(\"...\"));\n+    /// // OR\n+    /// println!(\"padded: {:5}\", format!(\"...\"));\n+    /// ```\n+    ///\n+    /// [formatting parameters]: https://doc.rust-lang.org/std/fmt/index.html#formatting-parameters\n+    #[clippy::version = \"1.66.0\"]\n+    pub UNUSED_FORMAT_SPECS,\n+    complexity,\n+    \"use of a format specifier that has no effect\"\n+}\n+\n+impl_lint_pass!(FormatArgs => [\n+    FORMAT_IN_FORMAT_ARGS,\n+    TO_STRING_IN_FORMAT_ARGS,\n+    UNINLINED_FORMAT_ARGS,\n+    UNUSED_FORMAT_SPECS,\n+]);\n \n pub struct FormatArgs {\n     msrv: Option<RustcVersion>,\n@@ -132,34 +170,103 @@ impl FormatArgs {\n \n impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if_chain! {\n-            if let Some(format_args) = FormatArgsExpn::parse(cx, expr);\n-            let expr_expn_data = expr.span.ctxt().outer_expn_data();\n-            let outermost_expn_data = outermost_expn_data(expr_expn_data);\n-            if let Some(macro_def_id) = outermost_expn_data.macro_def_id;\n-            if is_format_macro(cx, macro_def_id);\n-            if let ExpnKind::Macro(_, name) = outermost_expn_data.kind;\n-            then {\n-                for arg in &format_args.args {\n-                    if !arg.format.is_default() {\n-                        continue;\n-                    }\n-                    if is_aliased(&format_args, arg.param.value.hir_id) {\n-                        continue;\n-                    }\n-                    check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n-                    check_to_string_in_format_args(cx, name, arg.param.value);\n+        if let Some(format_args) = FormatArgsExpn::parse(cx, expr)\n+            && let expr_expn_data = expr.span.ctxt().outer_expn_data()\n+            && let outermost_expn_data = outermost_expn_data(expr_expn_data)\n+            && let Some(macro_def_id) = outermost_expn_data.macro_def_id\n+            && is_format_macro(cx, macro_def_id)\n+            && let ExpnKind::Macro(_, name) = outermost_expn_data.kind\n+        {\n+            for arg in &format_args.args {\n+                check_unused_format_specifier(cx, arg);\n+                if !arg.format.is_default() {\n+                    continue;\n                 }\n-                if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n-                    check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n+                if is_aliased(&format_args, arg.param.value.hir_id) {\n+                    continue;\n                 }\n+                check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n+                check_to_string_in_format_args(cx, name, arg.param.value);\n+            }\n+            if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n+                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n             }\n         }\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n+fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n+    let param_ty = cx.typeck_results().expr_ty(arg.param.value).peel_refs();\n+\n+    if let Count::Implied(Some(mut span)) = arg.format.precision\n+        && !span.is_empty()\n+    {\n+        span_lint_and_then(\n+            cx,\n+            UNUSED_FORMAT_SPECS,\n+            span,\n+            \"empty precision specifier has no effect\",\n+            |diag| {\n+                if param_ty.is_floating_point() {\n+                    diag.note(\"a precision specifier is not required to format floats\");\n+                }\n+\n+                if arg.format.is_default() {\n+                    // If there's no other specifiers remove the `:` too\n+                    span = arg.format_span();\n+                }\n+\n+                diag.span_suggestion_verbose(span, \"remove the `.`\", \"\", Applicability::MachineApplicable);\n+            },\n+        );\n+    }\n+\n+    if is_type_diagnostic_item(cx, param_ty, sym::Arguments) && !arg.format.is_default_for_trait() {\n+        span_lint_and_then(\n+            cx,\n+            UNUSED_FORMAT_SPECS,\n+            arg.span,\n+            \"format specifiers have no effect on `format_args!()`\",\n+            |diag| {\n+                let mut suggest_format = |spec, span| {\n+                    let message = format!(\"for the {spec} to apply consider using `format!()`\");\n+\n+                    if let Some(mac_call) = root_macro_call(arg.param.value.span)\n+                        && cx.tcx.is_diagnostic_item(sym::format_args_macro, mac_call.def_id)\n+                        && arg.span.eq_ctxt(mac_call.span)\n+                    {\n+                        diag.span_suggestion(\n+                            cx.sess().source_map().span_until_char(mac_call.span, '!'),\n+                            message,\n+                            \"format\",\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else if let Some(span) = span {\n+                        diag.span_help(span, message);\n+                    }\n+                };\n+\n+                if !arg.format.width.is_implied() {\n+                    suggest_format(\"width\", arg.format.width.span());\n+                }\n+\n+                if !arg.format.precision.is_implied() {\n+                    suggest_format(\"precision\", arg.format.precision.span());\n+                }\n+\n+                diag.span_suggestion_verbose(\n+                    arg.format_span(),\n+                    \"if the current behavior is intentional, remove the format specifiers\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+        );\n+    }\n+}\n+\n fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span, def_id: DefId) {\n     if args.format_string.span.from_expansion() {\n         return;"}, {"sha": "987131ab727195783314119dcd42bbff56b2c613", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -73,6 +73,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n     LintId::of(format_args::UNINLINED_FORMAT_ARGS),\n+    LintId::of(format_args::UNUSED_FORMAT_SPECS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n     LintId::of(formatting::POSSIBLE_MISSING_COMMA),"}, {"sha": "8be9dc4baf19360a6977a0a7aa118a612e8bde4b", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -13,6 +13,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n+    LintId::of(format_args::UNUSED_FORMAT_SPECS),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),"}, {"sha": "049ebdc926ec4ba88243c9c9f48637f7da701e3c", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -164,6 +164,7 @@ store.register_lints(&[\n     format_args::FORMAT_IN_FORMAT_ARGS,\n     format_args::TO_STRING_IN_FORMAT_ARGS,\n     format_args::UNINLINED_FORMAT_ARGS,\n+    format_args::UNUSED_FORMAT_SPECS,\n     format_impl::PRINT_IN_FORMAT_IMPL,\n     format_impl::RECURSIVE_FORMAT_IMPL,\n     format_push_string::FORMAT_PUSH_STRING,"}, {"sha": "9a682fbe604ff7b3891a4f88c20e3cdaff38d52d", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -627,7 +627,7 @@ pub enum Count<'tcx> {\n     /// `FormatParamKind::Numbered`.\n     Param(FormatParam<'tcx>),\n     /// Not specified.\n-    Implied,\n+    Implied(Option<Span>),\n }\n \n impl<'tcx> Count<'tcx> {\n@@ -638,8 +638,10 @@ impl<'tcx> Count<'tcx> {\n         inner: Option<rpf::InnerSpan>,\n         values: &FormatArgsValues<'tcx>,\n     ) -> Option<Self> {\n+        let span = inner.map(|inner| span_from_inner(values.format_string_span, inner));\n+\n         Some(match count {\n-            rpf::Count::CountIs(val) => Self::Is(val, span_from_inner(values.format_string_span, inner?)),\n+            rpf::Count::CountIs(val) => Self::Is(val, span?),\n             rpf::Count::CountIsName(name, _) => Self::Param(FormatParam::new(\n                 FormatParamKind::Named(Symbol::intern(name)),\n                 usage,\n@@ -661,12 +663,12 @@ impl<'tcx> Count<'tcx> {\n                 inner?,\n                 values,\n             )?),\n-            rpf::Count::CountImplied => Self::Implied,\n+            rpf::Count::CountImplied => Self::Implied(span),\n         })\n     }\n \n     pub fn is_implied(self) -> bool {\n-        matches!(self, Count::Implied)\n+        matches!(self, Count::Implied(_))\n     }\n \n     pub fn param(self) -> Option<FormatParam<'tcx>> {\n@@ -675,6 +677,14 @@ impl<'tcx> Count<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn span(self) -> Option<Span> {\n+        match self {\n+            Count::Is(_, span) => Some(span),\n+            Count::Param(param) => Some(param.span),\n+            Count::Implied(span) => span,\n+        }\n+    }\n }\n \n /// Specification for the formatting of an argument in the format string. See\n@@ -738,8 +748,13 @@ impl<'tcx> FormatSpec<'tcx> {\n     /// Returns true if this format spec is unchanged from the default. e.g. returns true for `{}`,\n     /// `{foo}` and `{2}`, but false for `{:?}`, `{foo:5}` and `{3:.5}`\n     pub fn is_default(&self) -> bool {\n-        self.r#trait == sym::Display\n-            && self.width.is_implied()\n+        self.r#trait == sym::Display && self.is_default_for_trait()\n+    }\n+\n+    /// Has no other formatting specifiers than setting the format trait. returns true for `{}`,\n+    /// `{foo}`, `{:?}`, but false for `{foo:5}`, `{3:.5?}`\n+    pub fn is_default_for_trait(&self) -> bool {\n+        self.width.is_implied()\n             && self.precision.is_implied()\n             && self.align == Alignment::AlignUnknown\n             && self.flags == 0\n@@ -757,6 +772,22 @@ pub struct FormatArg<'tcx> {\n     pub span: Span,\n }\n \n+impl<'tcx> FormatArg<'tcx> {\n+    /// Span of the `:` and format specifiers\n+    ///\n+    /// ```ignore\n+    /// format!(\"{:.}\"), format!(\"{foo:.}\")\n+    ///           ^^                  ^^\n+    /// ```\n+    pub fn format_span(&self) -> Span {\n+        let base = self.span.data();\n+\n+        // `base.hi` is `{...}|`, subtract 1 byte (the length of '}') so that it points before the closing\n+        // brace `{...|}`\n+        Span::new(self.param.span.hi(), base.hi - BytePos(1), base.ctxt, base.parent)\n+    }\n+}\n+\n /// A parsed `format_args!` expansion.\n #[derive(Debug)]\n pub struct FormatArgsExpn<'tcx> {"}, {"sha": "33ea8488375086f4502b3ec96a6d7bed23f2d7bb", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -557,6 +557,7 @@ docs! {\n     \"unseparated_literal_suffix\",\n     \"unsound_collection_transmute\",\n     \"unused_async\",\n+    \"unused_format_specs\",\n     \"unused_io_amount\",\n     \"unused_peekable\",\n     \"unused_rounding\","}, {"sha": "77be3a2fb170d1d81e7818e074b59e4dbcab936a", "filename": "src/docs/unused_format_specs.txt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/src%2Fdocs%2Funused_format_specs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/src%2Fdocs%2Funused_format_specs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Funused_format_specs.txt?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,24 @@\n+### What it does\n+Detects [formatting parameters] that have no effect on the output of\n+`format!()`, `println!()` or similar macros.\n+\n+### Why is this bad?\n+Shorter format specifiers are easier to read, it may also indicate that\n+an expected formatting operation such as adding padding isn't happening.\n+\n+### Example\n+```\n+println!(\"{:.}\", 1.0);\n+\n+println!(\"not padded: {:5}\", format_args!(\"...\"));\n+```\n+Use instead:\n+```\n+println!(\"{}\", 1.0);\n+\n+println!(\"not padded: {}\", format_args!(\"...\"));\n+// OR\n+println!(\"padded: {:5}\", format!(\"...\"));\n+```\n+\n+[formatting parameters]: https://doc.rust-lang.org/std/fmt/index.html#formatting-parameters\n\\ No newline at end of file"}, {"sha": "2930722b42d9d4f39d33deb8119a3659b11df891", "filename": "tests/ui/unused_format_specs.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_format_specs.fixed?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+#![warn(clippy::unused_format_specs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    let f = 1.0f64;\n+    println!(\"{}\", 1.0);\n+    println!(\"{f} {f:?}\");\n+\n+    println!(\"{}\", 1);\n+}\n+\n+fn should_not_lint() {\n+    let f = 1.0f64;\n+    println!(\"{:.1}\", 1.0);\n+    println!(\"{f:.w$} {f:.*?}\", 3, w = 2);\n+}"}, {"sha": "ee192a000d4b55e6fd4d1a8c8ba72238cc626a4f", "filename": "tests/ui/unused_format_specs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_format_specs.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+#![warn(clippy::unused_format_specs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    let f = 1.0f64;\n+    println!(\"{:.}\", 1.0);\n+    println!(\"{f:.} {f:.?}\");\n+\n+    println!(\"{:.}\", 1);\n+}\n+\n+fn should_not_lint() {\n+    let f = 1.0f64;\n+    println!(\"{:.1}\", 1.0);\n+    println!(\"{f:.w$} {f:.*?}\", 3, w = 2);\n+}"}, {"sha": "7231c17e74c19cd9de5c4c36d6c227594917f147", "filename": "tests/ui/unused_format_specs.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_format_specs.stderr?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,54 @@\n+error: empty precision specifier has no effect\n+  --> $DIR/unused_format_specs.rs:8:17\n+   |\n+LL |     println!(\"{:.}\", 1.0);\n+   |                 ^\n+   |\n+   = note: a precision specifier is not required to format floats\n+   = note: `-D clippy::unused-format-specs` implied by `-D warnings`\n+help: remove the `.`\n+   |\n+LL -     println!(\"{:.}\", 1.0);\n+LL +     println!(\"{}\", 1.0);\n+   |\n+\n+error: empty precision specifier has no effect\n+  --> $DIR/unused_format_specs.rs:9:18\n+   |\n+LL |     println!(\"{f:.} {f:.?}\");\n+   |                  ^\n+   |\n+   = note: a precision specifier is not required to format floats\n+help: remove the `.`\n+   |\n+LL -     println!(\"{f:.} {f:.?}\");\n+LL +     println!(\"{f} {f:.?}\");\n+   |\n+\n+error: empty precision specifier has no effect\n+  --> $DIR/unused_format_specs.rs:9:24\n+   |\n+LL |     println!(\"{f:.} {f:.?}\");\n+   |                        ^\n+   |\n+   = note: a precision specifier is not required to format floats\n+help: remove the `.`\n+   |\n+LL -     println!(\"{f:.} {f:.?}\");\n+LL +     println!(\"{f:.} {f:?}\");\n+   |\n+\n+error: empty precision specifier has no effect\n+  --> $DIR/unused_format_specs.rs:11:17\n+   |\n+LL |     println!(\"{:.}\", 1);\n+   |                 ^\n+   |\n+help: remove the `.`\n+   |\n+LL -     println!(\"{:.}\", 1);\n+LL +     println!(\"{}\", 1);\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "78601a3483d347428d5f2fededb5b42cb6a5d5ef", "filename": "tests/ui/unused_format_specs_unfixable.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_format_specs_unfixable.rs?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,30 @@\n+#![warn(clippy::unused_format_specs)]\n+#![allow(unused)]\n+\n+macro_rules! format_args_from_macro {\n+    () => {\n+        format_args!(\"from macro\")\n+    };\n+}\n+\n+fn main() {\n+    // prints `.`, not `     .`\n+    println!(\"{:5}.\", format_args!(\"\"));\n+    //prints `abcde`, not `abc`\n+    println!(\"{:.3}\", format_args!(\"abcde\"));\n+\n+    println!(\"{:5}.\", format_args_from_macro!());\n+\n+    let args = format_args!(\"\");\n+    println!(\"{args:5}\");\n+}\n+\n+fn should_not_lint() {\n+    println!(\"{}\", format_args!(\"\"));\n+    // Technically the same as `{}`, but the `format_args` docs specifically mention that you can use\n+    // debug formatting so allow it\n+    println!(\"{:?}\", format_args!(\"\"));\n+\n+    let args = format_args!(\"\");\n+    println!(\"{args}\");\n+}"}, {"sha": "9f1890282e6ac91f4e140e413de3e9ced145958f", "filename": "tests/ui/unused_format_specs_unfixable.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/136c2cdb910938103a762cdde177b1633bdbf99a/tests%2Fui%2Funused_format_specs_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_format_specs_unfixable.stderr?ref=136c2cdb910938103a762cdde177b1633bdbf99a", "patch": "@@ -0,0 +1,69 @@\n+error: format specifiers have no effect on `format_args!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:12:15\n+   |\n+LL |     println!(\"{:5}.\", format_args!(\"\"));\n+   |               ^^^^\n+   |\n+   = note: `-D clippy::unused-format-specs` implied by `-D warnings`\n+help: for the width to apply consider using `format!()`\n+   |\n+LL |     println!(\"{:5}.\", format!(\"\"));\n+   |                       ~~~~~~\n+help: if the current behavior is intentional, remove the format specifiers\n+   |\n+LL -     println!(\"{:5}.\", format_args!(\"\"));\n+LL +     println!(\"{}.\", format_args!(\"\"));\n+   |\n+\n+error: format specifiers have no effect on `format_args!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:14:15\n+   |\n+LL |     println!(\"{:.3}\", format_args!(\"abcde\"));\n+   |               ^^^^^\n+   |\n+help: for the precision to apply consider using `format!()`\n+   |\n+LL |     println!(\"{:.3}\", format!(\"abcde\"));\n+   |                       ~~~~~~\n+help: if the current behavior is intentional, remove the format specifiers\n+   |\n+LL -     println!(\"{:.3}\", format_args!(\"abcde\"));\n+LL +     println!(\"{}\", format_args!(\"abcde\"));\n+   |\n+\n+error: format specifiers have no effect on `format_args!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:16:15\n+   |\n+LL |     println!(\"{:5}.\", format_args_from_macro!());\n+   |               ^^^^\n+   |\n+help: for the width to apply consider using `format!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:16:17\n+   |\n+LL |     println!(\"{:5}.\", format_args_from_macro!());\n+   |                 ^\n+help: if the current behavior is intentional, remove the format specifiers\n+   |\n+LL -     println!(\"{:5}.\", format_args_from_macro!());\n+LL +     println!(\"{}.\", format_args_from_macro!());\n+   |\n+\n+error: format specifiers have no effect on `format_args!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:19:15\n+   |\n+LL |     println!(\"{args:5}\");\n+   |               ^^^^^^^^\n+   |\n+help: for the width to apply consider using `format!()`\n+  --> $DIR/unused_format_specs_unfixable.rs:19:21\n+   |\n+LL |     println!(\"{args:5}\");\n+   |                     ^\n+help: if the current behavior is intentional, remove the format specifiers\n+   |\n+LL -     println!(\"{args:5}\");\n+LL +     println!(\"{args}\");\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}