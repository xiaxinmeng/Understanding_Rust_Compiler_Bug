{"sha": "afa85f08410aaa874f628c2704818ef2fb126f00", "node_id": "C_kwDOAAsO6NoAKGFmYTg1ZjA4NDEwYWFhODc0ZjYyOGMyNzA0ODE4ZWYyZmIxMjZmMDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-04T21:58:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T21:58:34Z"}, "message": "Rollup merge of #94362 - Urgau:check-cfg-values, r=petrochenkov\n\nAdd well known values to `--check-cfg` implementation\n\nThis pull-request adds well known values for the well known names via `--check-cfg=values()`.\n\n[RFC 3013: Checking conditional compilation at compile time](https://rust-lang.github.io/rfcs/3013-conditional-compilation-checking.html#checking-conditional-compilation-at-compile-time) doesn't define this at all, but this seems a nice improvement.\nThe activation is done by a empty `values()` (new syntax) similar to `names()` except that `names(foo)` also activate well known names while `values(aa, \"aa\", \"kk\")` would not.\n\nAs stated this use a different activation logic because well known values for the well known names are not always sufficient.\nIn fact this is problematic for every `target_*` cfg because of non builtin targets, as the current implementation use those built-ins targets to create the list the well known values.\n\nThe implementation is straight forward, first we gather (if necessary) all the values (lazily or not) and then we apply them.\n\nr? ```@petrochenkov```", "tree": {"sha": "dc65aab68cf9b65f14011a7a7807a86dbc8cdf75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc65aab68cf9b65f14011a7a7807a86dbc8cdf75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa85f08410aaa874f628c2704818ef2fb126f00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIouKCRBK7hj4Ov3rIwAAUtQIAERIpMtoV+SeCP2PQQAGxtWo\nNEPhvxC/B/OtLrDHbdP+3cgNoS5hpMkeGgc/7kHTYvFctPdjwVLuTwBSAZipv2i7\n2EaZNZXhwosu9dLnjjhnNKOVE1OPrIqd9bOFU/PE9lwdD7fTLM/E7F4cwkDrRXvI\nkl4XV5opVHlKXVuZD9/3pENvU5CkreC4UzUzJRU8wfGfjM/uEu1O1RH3IdSpkY1S\nnYLPnNpAHx8PJgD3PkIF5u2J4R7+9r6fjxd+zNOE/lwvhRHg3IvFFtgBtHgs04ZW\nujRK9/JcrxCDgIGknSnH1c7wgC24l2a5CiwlsXNCHfRtS3oWiMVBBA+bQEZIB1c=\n=Za+a\n-----END PGP SIGNATURE-----\n", "payload": "tree dc65aab68cf9b65f14011a7a7807a86dbc8cdf75\nparent 9fcbc32053d5084d1de79bd484de82474cdae427\nparent 4aa92aff054c8e89c61ac06551a405af828ade70\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646431114 +0100\ncommitter GitHub <noreply@github.com> 1646431114 +0100\n\nRollup merge of #94362 - Urgau:check-cfg-values, r=petrochenkov\n\nAdd well known values to `--check-cfg` implementation\n\nThis pull-request adds well known values for the well known names via `--check-cfg=values()`.\n\n[RFC 3013: Checking conditional compilation at compile time](https://rust-lang.github.io/rfcs/3013-conditional-compilation-checking.html#checking-conditional-compilation-at-compile-time) doesn't define this at all, but this seems a nice improvement.\nThe activation is done by a empty `values()` (new syntax) similar to `names()` except that `names(foo)` also activate well known names while `values(aa, \"aa\", \"kk\")` would not.\n\nAs stated this use a different activation logic because well known values for the well known names are not always sufficient.\nIn fact this is problematic for every `target_*` cfg because of non builtin targets, as the current implementation use those built-ins targets to create the list the well known values.\n\nThe implementation is straight forward, first we gather (if necessary) all the values (lazily or not) and then we apply them.\n\nr? ```@petrochenkov```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa85f08410aaa874f628c2704818ef2fb126f00", "html_url": "https://github.com/rust-lang/rust/commit/afa85f08410aaa874f628c2704818ef2fb126f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa85f08410aaa874f628c2704818ef2fb126f00/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcbc32053d5084d1de79bd484de82474cdae427", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcbc32053d5084d1de79bd484de82474cdae427", "html_url": "https://github.com/rust-lang/rust/commit/9fcbc32053d5084d1de79bd484de82474cdae427"}, {"sha": "4aa92aff054c8e89c61ac06551a405af828ade70", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa92aff054c8e89c61ac06551a405af828ade70", "html_url": "https://github.com/rust-lang/rust/commit/4aa92aff054c8e89c61ac06551a405af828ade70"}], "stats": {"total": 218, "additions": 207, "deletions": 11}, "files": [{"sha": "e7563933c88ac97a19480dab3aca8b9b875f4624", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -207,6 +207,9 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                                             \"`values()` first argument must be a simple identifer\"\n                                         );\n                                     }\n+                                } else if args.is_empty() {\n+                                    cfg.well_known_values = true;\n+                                    continue 'specs;\n                                 }\n                             }\n                         }"}, {"sha": "5f8aec80bccc7a46d5c09dbffa84d93b0798dd85", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 110, "deletions": 6, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n+use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n \n use rustc_serialize::json;\n \n@@ -1025,13 +1026,19 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n pub struct CheckCfg<T = String> {\n     /// The set of all `names()`, if None no name checking is performed\n     pub names_valid: Option<FxHashSet<T>>,\n+    /// Is well known values activated\n+    pub well_known_values: bool,\n     /// The set of all `values()`\n     pub values_valid: FxHashMap<T, FxHashSet<T>>,\n }\n \n impl<T> Default for CheckCfg<T> {\n     fn default() -> Self {\n-        CheckCfg { names_valid: Default::default(), values_valid: Default::default() }\n+        CheckCfg {\n+            names_valid: Default::default(),\n+            values_valid: Default::default(),\n+            well_known_values: false,\n+        }\n     }\n }\n \n@@ -1047,6 +1054,7 @@ impl<T> CheckCfg<T> {\n                 .iter()\n                 .map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect()))\n                 .collect(),\n+            well_known_values: self.well_known_values,\n         }\n     }\n }\n@@ -1060,8 +1068,9 @@ pub fn to_crate_check_config(cfg: CheckCfg) -> CrateCheckConfig {\n \n impl CrateCheckConfig {\n     /// Fills a `CrateCheckConfig` with well-known configuration names.\n-    pub fn fill_well_known(&mut self) {\n-        // NOTE: This should be kept in sync with `default_configuration`\n+    fn fill_well_known_names(&mut self) {\n+        // NOTE: This should be kept in sync with `default_configuration` and\n+        // `fill_well_known_values`\n         const WELL_KNOWN_NAMES: &[Symbol] = &[\n             sym::unix,\n             sym::windows,\n@@ -1086,11 +1095,106 @@ impl CrateCheckConfig {\n             sym::doctest,\n             sym::feature,\n         ];\n+\n+        // We only insert well-known names if `names()` was activated\n         if let Some(names_valid) = &mut self.names_valid {\n-            for &name in WELL_KNOWN_NAMES {\n-                names_valid.insert(name);\n-            }\n+            names_valid.extend(WELL_KNOWN_NAMES);\n+        }\n+    }\n+\n+    /// Fills a `CrateCheckConfig` with well-known configuration values.\n+    fn fill_well_known_values(&mut self) {\n+        if !self.well_known_values {\n+            return;\n         }\n+\n+        // NOTE: This should be kept in sync with `default_configuration` and\n+        // `fill_well_known_names`\n+\n+        let panic_values = &PanicStrategy::all();\n+\n+        let atomic_values = &[\n+            sym::ptr,\n+            sym::integer(8usize),\n+            sym::integer(16usize),\n+            sym::integer(32usize),\n+            sym::integer(64usize),\n+            sym::integer(128usize),\n+        ];\n+\n+        let sanitize_values = SanitizerSet::all()\n+            .into_iter()\n+            .map(|sanitizer| Symbol::intern(sanitizer.as_str().unwrap()));\n+\n+        // No-values\n+        for name in [\n+            sym::unix,\n+            sym::windows,\n+            sym::debug_assertions,\n+            sym::proc_macro,\n+            sym::test,\n+            sym::doc,\n+            sym::doctest,\n+            sym::target_thread_local,\n+        ] {\n+            self.values_valid.entry(name).or_default();\n+        }\n+\n+        // Pre-defined values\n+        self.values_valid.entry(sym::panic).or_default().extend(panic_values);\n+        self.values_valid.entry(sym::sanitize).or_default().extend(sanitize_values);\n+        self.values_valid.entry(sym::target_has_atomic).or_default().extend(atomic_values);\n+        self.values_valid\n+            .entry(sym::target_has_atomic_load_store)\n+            .or_default()\n+            .extend(atomic_values);\n+        self.values_valid\n+            .entry(sym::target_has_atomic_equal_alignment)\n+            .or_default()\n+            .extend(atomic_values);\n+\n+        // Target specific values\n+        for target in\n+            TARGETS.iter().map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+        {\n+            self.values_valid\n+                .entry(sym::target_os)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.os));\n+            self.values_valid\n+                .entry(sym::target_family)\n+                .or_default()\n+                .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n+            self.values_valid\n+                .entry(sym::target_arch)\n+                .or_default()\n+                .insert(Symbol::intern(&target.arch));\n+            self.values_valid\n+                .entry(sym::target_endian)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.endian.as_str()));\n+            self.values_valid\n+                .entry(sym::target_env)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.env));\n+            self.values_valid\n+                .entry(sym::target_abi)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.abi));\n+            self.values_valid\n+                .entry(sym::target_vendor)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.vendor));\n+            self.values_valid\n+                .entry(sym::target_pointer_width)\n+                .or_default()\n+                .insert(sym::integer(target.pointer_width));\n+        }\n+    }\n+\n+    pub fn fill_well_known(&mut self) {\n+        self.fill_well_known_names();\n+        self.fill_well_known_values();\n     }\n \n     /// Fills a `CrateCheckConfig` with configuration names and values that are actually active."}, {"sha": "3f44292e03425ad301d7806ef215ceea12088ef0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -1063,6 +1063,7 @@ symbols! {\n         proc_macro_path_invoc,\n         profiler_builtins,\n         profiler_runtime,\n+        ptr,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n         ptr_null,"}, {"sha": "ca5f2b4af8a97a0860d438bcec65a3af1b400932", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -186,12 +186,16 @@ impl PanicStrategy {\n         }\n     }\n \n-    pub fn desc_symbol(&self) -> Symbol {\n+    pub const fn desc_symbol(&self) -> Symbol {\n         match *self {\n             PanicStrategy::Unwind => sym::unwind,\n             PanicStrategy::Abort => sym::abort,\n         }\n     }\n+\n+    pub const fn all() -> [Symbol; 2] {\n+        [Self::Abort.desc_symbol(), Self::Unwind.desc_symbol()]\n+    }\n }\n \n impl ToJson for PanicStrategy {\n@@ -614,7 +618,7 @@ impl SanitizerSet {\n     /// Return sanitizer's name\n     ///\n     /// Returns none if the flags is a set of sanitizers numbering not exactly one.\n-    fn as_str(self) -> Option<&'static str> {\n+    pub fn as_str(self) -> Option<&'static str> {\n         Some(match self {\n             SanitizerSet::ADDRESS => \"address\",\n             SanitizerSet::CFI => \"cfi\",\n@@ -2137,6 +2141,18 @@ impl Target {\n         ))\n     }\n \n+    /// Load a built-in target\n+    pub fn expect_builtin(target_triple: &TargetTriple) -> Target {\n+        match *target_triple {\n+            TargetTriple::TargetTriple(ref target_triple) => {\n+                load_builtin(target_triple).expect(\"built-in target\")\n+            }\n+            TargetTriple::TargetPath(..) => {\n+                panic!(\"built-in targets doens't support target-paths\")\n+            }\n+        }\n+    }\n+\n     /// Search for a JSON file specifying the given target triple.\n     ///\n     /// If none is found in `$RUST_TARGET_PATH`, look for a file called `target.json` inside the"}, {"sha": "9bda42e5d15fe703fe68d26872b51d8f1e624ce2", "filename": "src/test/ui/check-cfg/empty-values.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -1,6 +1,10 @@\n-// Check that a an empty values() is rejected\n+// Check warning for unexpected cfg value\n //\n-// check-fail\n+// check-pass\n // compile-flags: --check-cfg=values() -Z unstable-options\n \n+#[cfg(test = \"value\")]\n+//~^ WARNING unexpected `cfg` condition value\n+pub fn f() {}\n+\n fn main() {}"}, {"sha": "834b28f1244cbc221ad523f6d381f6b7959ee1ec", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -1,2 +1,11 @@\n-error: invalid `--check-cfg` argument: `values()` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+warning: unexpected `cfg` condition value\n+  --> $DIR/empty-values.rs:6:7\n+   |\n+LL | #[cfg(test = \"value\")]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: no expected value for `test`\n+\n+warning: 1 warning emitted\n "}, {"sha": "46004be43d812291fe0215e38ed99730e33cfc10", "filename": "src/test/ui/check-cfg/well-known-values.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -0,0 +1,28 @@\n+// This test check that we lint on non well known values and that we don't lint on well known\n+// values\n+//\n+// check-pass\n+// compile-flags: --check-cfg=values() -Z unstable-options\n+\n+#[cfg(target_os = \"linuz\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn target_os_linux_misspell() {}\n+\n+#[cfg(target_os = \"linux\")]\n+fn target_os_linux() {}\n+\n+#[cfg(target_has_atomic = \"0\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn target_has_atomic_invalid() {}\n+\n+#[cfg(target_has_atomic = \"8\")]\n+fn target_has_atomic() {}\n+\n+#[cfg(unix = \"aa\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn unix_with_value() {}\n+\n+#[cfg(unix)]\n+fn unix() {}\n+\n+fn main() {}"}, {"sha": "05b2a8af0eec0fca46f92e14a53b612ec0439f49", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afa85f08410aaa874f628c2704818ef2fb126f00/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=afa85f08410aaa874f628c2704818ef2fb126f00", "patch": "@@ -0,0 +1,31 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:7:7\n+   |\n+LL | #[cfg(target_os = \"linuz\")]\n+   |       ^^^^^^^^^^^^-------\n+   |                   |\n+   |                   help: did you mean: `\"linux\"`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, windows\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:14:7\n+   |\n+LL | #[cfg(target_has_atomic = \"0\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           help: did you mean: `\"8\"`\n+   |\n+   = note: expected values for `target_has_atomic` are: 128, 16, 32, 64, 8, ptr\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:21:7\n+   |\n+LL | #[cfg(unix = \"aa\")]\n+   |       ^^^^^^^^^^^\n+   |\n+   = note: no expected value for `unix`\n+\n+warning: 3 warnings emitted\n+"}]}