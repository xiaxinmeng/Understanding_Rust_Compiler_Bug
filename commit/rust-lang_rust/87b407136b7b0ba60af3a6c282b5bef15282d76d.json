{"sha": "87b407136b7b0ba60af3a6c282b5bef15282d76d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YjQwNzEzNmI3YjBiYTYwYWYzYTZjMjgyYjViZWYxNTI4MmQ3NmQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-13T22:48:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:13:18Z"}, "message": "Definitions: Split out NodeId <-> DefIndex mapping", "tree": {"sha": "55615c1236531238b7ab0919ee8fea4f98ea970e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55615c1236531238b7ab0919ee8fea4f98ea970e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b407136b7b0ba60af3a6c282b5bef15282d76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b407136b7b0ba60af3a6c282b5bef15282d76d", "html_url": "https://github.com/rust-lang/rust/commit/87b407136b7b0ba60af3a6c282b5bef15282d76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b407136b7b0ba60af3a6c282b5bef15282d76d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d250169cb5a96481a3e7c8f9fe05de49f60e5ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d250169cb5a96481a3e7c8f9fe05de49f60e5ae5", "html_url": "https://github.com/rust-lang/rust/commit/d250169cb5a96481a3e7c8f9fe05de49f60e5ae5"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "72c1ff9ee2efcae3ba99b3a4e58a329619028e0c", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/87b407136b7b0ba60af3a6c282b5bef15282d76d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b407136b7b0ba60af3a6c282b5bef15282d76d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=87b407136b7b0ba60af3a6c282b5bef15282d76d", "patch": "@@ -18,12 +18,20 @@ use syntax::symbol::{Symbol, InternedString};\n use ty::TyCtxt;\n use util::nodemap::NodeMap;\n \n+//! For each definition, we track the following data.  A definition\n+//! here is defined somewhat circularly as \"something with a def-id\",\n+//! but it generally corresponds to things like structs, enums, etc.\n+//! There are also some rather random cases (like const initializer\n+//! expressions) that are mostly just leftovers.\n+\n+\n /// The definition table containing node definitions\n #[derive(Clone)]\n pub struct Definitions {\n-    data: Vec<DefData>,\n+    data: Vec<DefKey>,\n     key_map: FxHashMap<DefKey, DefIndex>,\n-    node_map: NodeMap<DefIndex>,\n+    node_to_def_index: NodeMap<DefIndex>,\n+    def_index_to_node: Vec<ast::NodeId>,\n }\n \n /// A unique identifier that we can use to lookup a definition\n@@ -50,19 +58,6 @@ pub struct DisambiguatedDefPathData {\n     pub disambiguator: u32\n }\n \n-/// For each definition, we track the following data.  A definition\n-/// here is defined somewhat circularly as \"something with a def-id\",\n-/// but it generally corresponds to things like structs, enums, etc.\n-/// There are also some rather random cases (like const initializer\n-/// expressions) that are mostly just leftovers.\n-#[derive(Clone, Debug)]\n-pub struct DefData {\n-    pub key: DefKey,\n-\n-    /// Local ID within the HIR.\n-    pub node_id: ast::NodeId,\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct DefPath {\n     /// the path leading from the crate root to the item\n@@ -221,7 +216,8 @@ impl Definitions {\n         Definitions {\n             data: vec![],\n             key_map: FxHashMap(),\n-            node_map: NodeMap(),\n+            node_to_def_index: NodeMap(),\n+            def_index_to_node: vec![],\n         }\n     }\n \n@@ -248,7 +244,7 @@ impl Definitions {\n     }\n \n     pub fn opt_def_index(&self, node: ast::NodeId) -> Option<DefIndex> {\n-        self.node_map.get(&node).cloned()\n+        self.node_to_def_index.get(&node).cloned()\n     }\n \n     pub fn opt_local_def_id(&self, node: ast::NodeId) -> Option<DefId> {\n@@ -262,7 +258,8 @@ impl Definitions {\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n             assert!(def_id.index.as_usize() < self.data.len());\n-            Some(self.data[def_id.index.as_usize()].node_id)\n+            // Some(self.data[def_id.index.as_usize()].node_id)\n+            Some(self.def_index_to_node[def_id.index.as_usize()])\n         } else {\n             None\n         }\n@@ -277,11 +274,11 @@ impl Definitions {\n         debug!(\"create_def_with_parent(parent={:?}, node_id={:?}, data={:?})\",\n                parent, node_id, data);\n \n-        assert!(!self.node_map.contains_key(&node_id),\n+        assert!(!self.node_to_def_index.contains_key(&node_id),\n                 \"adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}\",\n                 node_id,\n                 data,\n-                self.data[self.node_map[&node_id].as_usize()]);\n+                self.data[self.node_to_def_index[&node_id].as_usize()]);\n \n         assert!(parent.is_some() ^ match data {\n             DefPathData::CrateRoot | DefPathData::InlinedRoot(_) => true,\n@@ -306,9 +303,10 @@ impl Definitions {\n \n         // Create the definition.\n         let index = DefIndex::new(self.data.len());\n-        self.data.push(DefData { key: key.clone(), node_id: node_id });\n-        debug!(\"create_def_with_parent: node_map[{:?}] = {:?}\", node_id, index);\n-        self.node_map.insert(node_id, index);\n+        self.data.push(DefData { key: key.clone() });\n+        self.def_index_to_node.push(node_id);\n+        debug!(\"create_def_with_parent: node_to_def_index[{:?}] = {:?}\", node_id, index);\n+        self.node_to_def_index.insert(node_id, index);\n         debug!(\"create_def_with_parent: key_map[{:?}] = {:?}\", key, index);\n         self.key_map.insert(key, index);\n "}]}