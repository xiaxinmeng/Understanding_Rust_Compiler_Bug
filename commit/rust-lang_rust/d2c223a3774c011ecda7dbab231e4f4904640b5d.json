{"sha": "d2c223a3774c011ecda7dbab231e4f4904640b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzIyM2EzNzc0YzAxMWVjZGE3ZGJhYjIzMWU0ZjQ5MDQ2NDBiNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-17T10:19:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-17T10:19:14Z"}, "message": "Auto merge of #26126 - Nashenas88:sync-send-libcore-iter, r=huonw\n\nThis addresses an item in #22709. SizeHint in libcore/iter.rs also implements Iterator, but it's implementation is not accessible and is only used to send size hints to extend (it appears to be a performance improvement to avoid unnecessary memory reallocations). The is the only implementation of Iterator within libcore/iter.rs that is not/cannot be tested in this PR.", "tree": {"sha": "ca11df7951ea01b0c844110df946c468885817f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca11df7951ea01b0c844110df946c468885817f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c223a3774c011ecda7dbab231e4f4904640b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c223a3774c011ecda7dbab231e4f4904640b5d", "html_url": "https://github.com/rust-lang/rust/commit/d2c223a3774c011ecda7dbab231e4f4904640b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c223a3774c011ecda7dbab231e4f4904640b5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa00f2e972e8a620f77aeb457d1d1ae4e115bcac", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa00f2e972e8a620f77aeb457d1d1ae4e115bcac", "html_url": "https://github.com/rust-lang/rust/commit/aa00f2e972e8a620f77aeb457d1d1ae4e115bcac"}, {"sha": "12dc01df3b8e19a6cfcb33d8e50d3741757b3f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/12dc01df3b8e19a6cfcb33d8e50d3741757b3f60", "html_url": "https://github.com/rust-lang/rust/commit/12dc01df3b8e19a6cfcb33d8e50d3741757b3f60"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "cd99b39fdd068f7e6a2ac5218ed447eb7d52578e", "filename": "src/test/run-pass/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d2c223a3774c011ecda7dbab231e4f4904640b5d/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c223a3774c011ecda7dbab231e4f4904640b5d/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs?ref=d2c223a3774c011ecda7dbab231e4f4904640b5d", "patch": "@@ -10,28 +10,101 @@\n \n // pretty-expanded FIXME #23616\n \n+#![allow(unused_mut)]\n+#![feature(core)]\n #![feature(collections)]\n+#![feature(step_by)]\n+#![feature(iter_empty)]\n+#![feature(iter_once)]\n+\n+use std::iter::{empty, once, range_inclusive, repeat, Unfold};\n \n fn is_sync<T>(_: T) where T: Sync {}\n fn is_send<T>(_: T) where T: Send {}\n \n macro_rules! all_sync_send {\n+    ($ctor:expr, $iter:ident) => ({\n+        let mut x = $ctor;\n+        is_sync(x.$iter());\n+        let mut y = $ctor;\n+        is_send(y.$iter());\n+    });\n+    ($ctor:expr, $iter:ident($($param:expr),+)) => ({\n+        let mut x = $ctor;\n+        is_sync(x.$iter($( $param ),+));\n+        let mut y = $ctor;\n+        is_send(y.$iter($( $param ),+));\n+    });\n+    ($ctor:expr, $iter:ident, $($rest:tt)*) => ({\n+        all_sync_send!($ctor, $iter);\n+        all_sync_send!($ctor, $($rest)*);\n+    });\n+    ($ctor:expr, $iter:ident($($param:expr),+), $($rest:tt)*) => ({\n+        all_sync_send!($ctor, $iter($( $param ),+));\n+        all_sync_send!($ctor, $($rest)*);\n+    });\n+}\n+\n+macro_rules! all_sync_send_mutable_ref {\n     ($ctor:expr, $($iter:ident),+) => ({\n         $(\n             let mut x = $ctor;\n-            is_sync(x.$iter());\n+            is_sync((&mut x).$iter());\n             let mut y = $ctor;\n-            is_send(y.$iter());\n+            is_send((&mut y).$iter());\n         )+\n     })\n }\n \n+macro_rules! is_sync_send {\n+    ($ctor:expr) => ({\n+        let x = $ctor;\n+        is_sync(x);\n+        let y = $ctor;\n+        is_send(y);\n+    })\n+}\n+\n fn main() {\n     // for char.rs\n     all_sync_send!(\"\u042f\", escape_default, escape_unicode);\n \n     // for iter.rs\n-    // FIXME\n+    all_sync_send_mutable_ref!([1], iter);\n+\n+    // Bytes implements DoubleEndedIterator\n+    all_sync_send!(\"a\".bytes(), rev);\n+\n+    let a = [1];\n+    let b = [2];\n+    all_sync_send!(a.iter(),\n+                   cloned,\n+                   cycle,\n+                   chain([2].iter()),\n+                   zip([2].iter()),\n+                   map(|_| 1),\n+                   filter(|_| true),\n+                   filter_map(|_| Some(1)),\n+                   enumerate,\n+                   peekable,\n+                   skip_while(|_| true),\n+                   take_while(|_| true),\n+                   skip(1),\n+                   take(1),\n+                   scan(1, |_, _| Some(1)),\n+                   flat_map(|_| b.iter()),\n+                   fuse,\n+                   inspect(|_| ()));\n+\n+    is_sync_send!(Unfold::new(Some(1), |&mut v| v));\n+    is_sync_send!((1..).step_by(2));\n+    is_sync_send!(range_inclusive(1, 1));\n+    is_sync_send!((1..2).step_by(2));\n+    is_sync_send!((1..2));\n+    is_sync_send!((1..));\n+    is_sync_send!(repeat(1));\n+    is_sync_send!(empty::<usize>());\n+    is_sync_send!(once(1));\n \n     // for option.rs\n     // FIXME"}]}