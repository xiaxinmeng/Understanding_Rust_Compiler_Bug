{"sha": "b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "node_id": "C_kwDOAAsO6NoAKGI5YzVmZGM4ODhlMDViZTg4MjY5YTQ3ZDQwZmQwZDkxMWVjMmJlMGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T01:18:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T01:18:51Z"}, "message": "Auto merge of #111378 - jieyouxu:local-shadows-glob-reexport, r=petrochenkov\n\nAdd warn-by-default lint when local binding shadows exported glob re-export item\n\nThis PR introduces a warn-by-default rustc lint for when a local binding (a use statement, or a type declaration) produces a name which shadows an exported glob re-export item, causing the name from the exported glob re-export to be hidden (see #111336).\n\n### Unresolved Questions\n\n- [x] ~~Is this approach correct? While it passes the UI tests, I'm not entirely convinced it is correct.~~ Seems to be ok now.\n- [x] ~~What should the lint be called / how should it be worded? I don't like calling `use x::*;` or `struct Foo;` a \"local binding\" but they are `NameBinding`s internally if I'm not mistaken.~~ ~~The lint is called `local_binding_shadows_glob_reexport` for now, unless a better name is suggested.~~ `hidden_glob_reexports`.\n\nFixes #111336.", "tree": {"sha": "1d646a6d1d479c4da669a6aabb8107d38ebe5f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d646a6d1d479c4da669a6aabb8107d38ebe5f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "html_url": "https://github.com/rust-lang/rust/commit/b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9291627b76265112dccbebff55e103d211dbe9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9291627b76265112dccbebff55e103d211dbe9e5", "html_url": "https://github.com/rust-lang/rust/commit/9291627b76265112dccbebff55e103d211dbe9e5"}, {"sha": "b9606589c4ca72008dc8d769f1a1c2b3578be65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9606589c4ca72008dc8d769f1a1c2b3578be65f", "html_url": "https://github.com/rust-lang/rust/commit/b9606589c4ca72008dc8d769f1a1c2b3578be65f"}], "stats": {"total": 234, "additions": 207, "deletions": 27}, "files": [{"sha": "6646fa9446fb1c2ac57ac1a515d47c1b24aa16dc", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -11,6 +11,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{kw, sym};\n+#[cfg_attr(not(bootstrap), allow(hidden_glob_reexports))]\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;"}, {"sha": "947530a1b65a9dbf4433cb28559acc59b4d14fc5", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -952,6 +952,10 @@ pub trait LintContext: Sized {\n                     db.span_label(first_reexport_span, format!(\"the name `{}` in the {} namespace is first re-exported here\", name, namespace));\n                     db.span_label(duplicate_reexport_span, format!(\"but the name `{}` in the {} namespace is also re-exported here\", name, namespace));\n                 }\n+                BuiltinLintDiagnostics::HiddenGlobReexports { name, namespace, glob_reexport_span, private_item_span } => {\n+                    db.span_label(glob_reexport_span, format!(\"the name `{}` in the {} namespace is supposed to be publicly re-exported here\", name, namespace));\n+                    db.span_label(private_item_span, \"but the private item here shadows it\");\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(db)"}, {"sha": "1507087bdd4f3f34ae72a67c156f7a1623bee00f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -3272,6 +3272,43 @@ declare_lint! {\n     \"ambiguous glob re-exports\",\n }\n \n+declare_lint! {\n+    /// The `hidden_glob_reexports` lint detects cases where glob re-export items are shadowed by\n+    /// private items.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(hidden_glob_reexports)]\n+    ///\n+    /// pub mod upstream {\n+    ///     mod inner { pub struct Foo {}; pub struct Bar {}; }\n+    ///     pub use self::inner::*;\n+    ///     struct Foo {} // private item shadows `inner::Foo`\n+    /// }\n+    ///\n+    /// // mod downstream {\n+    /// //     fn test() {\n+    /// //         let _ = crate::upstream::Foo; // inaccessible\n+    /// //     }\n+    /// // }\n+    ///\n+    /// pub fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This was previously accepted without any errors or warnings but it could silently break a\n+    /// crate's downstream user code. If the `struct Foo` was added, `dep::inner::Foo` would\n+    /// silently become inaccessible and trigger a \"`struct `Foo` is private`\" visibility error at\n+    /// the downstream use site.\n+    pub HIDDEN_GLOB_REEXPORTS,\n+    Warn,\n+    \"name introduced by a private item shadows a name introduced by a public glob re-export\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3304,6 +3341,7 @@ declare_lint_pass! {\n         FORBIDDEN_LINT_GROUPS,\n         FUNCTION_ITEM_REFERENCES,\n         FUZZY_PROVENANCE_CASTS,\n+        HIDDEN_GLOB_REEXPORTS,\n         ILL_FORMED_ATTRIBUTE_INPUT,\n         ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n         IMPLIED_BOUNDS_ENTAILMENT,"}, {"sha": "5a5031b7919643a92b42d79343dd9f0fa3458444", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -540,6 +540,16 @@ pub enum BuiltinLintDiagnostics {\n         /// Span where the same name is also re-exported.\n         duplicate_reexport_span: Span,\n     },\n+    HiddenGlobReexports {\n+        /// The name of the local binding which shadows the glob re-export.\n+        name: String,\n+        /// The namespace for which the shadowing occurred in.\n+        namespace: String,\n+        /// The glob reexport that is shadowed by the local binding.\n+        glob_reexport_span: Span,\n+        /// The local binding that shadows the glob reexport.\n+        private_item_span: Span,\n+    },\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "96023a68cf6d0f4157c9c304af13c129335d966f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -53,7 +53,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, ExpnKind, Span};\n use rustc_target::abi::{Align, FieldIdx, Integer, IntegerType, VariantIdx};\n pub use rustc_target::abi::{ReprFlags, ReprOptions};\n-use rustc_type_ir::WithCachedTypeInfo;\n pub use subst::*;\n pub use vtable::*;\n \n@@ -145,6 +144,7 @@ mod opaque_types;\n mod parameterized;\n mod rvalue_scopes;\n mod structural_impls;\n+#[cfg_attr(not(bootstrap), allow(hidden_glob_reexports))]\n mod sty;\n mod typeck_results;\n "}, {"sha": "c1bb262c0d4077276a0a5e734b3cf827b9147480", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -21,7 +21,8 @@ use rustc_middle::metadata::Reexport;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{\n-    AMBIGUOUS_GLOB_REEXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS,\n+    AMBIGUOUS_GLOB_REEXPORTS, HIDDEN_GLOB_REEXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+    UNUSED_IMPORTS,\n };\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edit_distance::find_best_match_for_name;\n@@ -526,31 +527,71 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-    pub(crate) fn check_reexport_ambiguities(\n+    pub(crate) fn check_hidden_glob_reexports(\n         &mut self,\n         exported_ambiguities: FxHashSet<Interned<'a, NameBinding<'a>>>,\n     ) {\n         for module in self.arenas.local_modules().iter() {\n-            module.for_each_child(self, |this, ident, ns, binding| {\n-                if let NameBindingKind::Import { import, .. } = binding.kind\n-                && let Some((amb_binding, _)) = binding.ambiguity\n-                && binding.res() != Res::Err\n-                && exported_ambiguities.contains(&Interned::new_unchecked(binding))\n-                {\n-                    this.lint_buffer.buffer_lint_with_diagnostic(\n-                        AMBIGUOUS_GLOB_REEXPORTS,\n-                        import.root_id,\n-                        import.root_span,\n-                        \"ambiguous glob re-exports\",\n-                        BuiltinLintDiagnostics::AmbiguousGlobReexports {\n-                            name: ident.to_string(),\n-                            namespace: ns.descr().to_string(),\n-                            first_reexport_span: import.root_span,\n-                            duplicate_reexport_span: amb_binding.span,\n-                        },\n-                    );\n+            for (key, resolution) in self.resolutions(module).borrow().iter() {\n+                let resolution = resolution.borrow();\n+\n+                if let Some(binding) = resolution.binding {\n+                    if let NameBindingKind::Import { import, .. } = binding.kind\n+                        && let Some((amb_binding, _)) = binding.ambiguity\n+                        && binding.res() != Res::Err\n+                        && exported_ambiguities.contains(&Interned::new_unchecked(binding))\n+                    {\n+                        self.lint_buffer.buffer_lint_with_diagnostic(\n+                            AMBIGUOUS_GLOB_REEXPORTS,\n+                            import.root_id,\n+                            import.root_span,\n+                            \"ambiguous glob re-exports\",\n+                            BuiltinLintDiagnostics::AmbiguousGlobReexports {\n+                                name: key.ident.to_string(),\n+                                namespace: key.ns.descr().to_string(),\n+                                first_reexport_span: import.root_span,\n+                                duplicate_reexport_span: amb_binding.span,\n+                            },\n+                        );\n+                    }\n+\n+                    if let Some(glob_binding) = resolution.shadowed_glob {\n+                        let binding_id = match binding.kind {\n+                            NameBindingKind::Res(res) => {\n+                                Some(self.def_id_to_node_id[res.def_id().expect_local()])\n+                            }\n+                            NameBindingKind::Module(module) => {\n+                                Some(self.def_id_to_node_id[module.def_id().expect_local()])\n+                            }\n+                            NameBindingKind::Import { import, .. } => import.id(),\n+                        };\n+\n+                        if binding.res() != Res::Err\n+                            && glob_binding.res() != Res::Err\n+                            && let NameBindingKind::Import { import: glob_import, .. } = glob_binding.kind\n+                            && let Some(binding_id) = binding_id\n+                            && let Some(glob_import_id) = glob_import.id()\n+                            && let glob_import_def_id = self.local_def_id(glob_import_id)\n+                            && self.effective_visibilities.is_exported(glob_import_def_id)\n+                            && glob_binding.vis.is_public()\n+                            && !binding.vis.is_public()\n+                        {\n+                            self.lint_buffer.buffer_lint_with_diagnostic(\n+                                HIDDEN_GLOB_REEXPORTS,\n+                                binding_id,\n+                                binding.span,\n+                                \"private item shadows public glob re-export\",\n+                                BuiltinLintDiagnostics::HiddenGlobReexports {\n+                                    name: key.ident.name.to_string(),\n+                                    namespace: key.ns.descr().to_owned(),\n+                                    glob_reexport_span: glob_binding.span,\n+                                    private_item_span: binding.span,\n+                                },\n+                            );\n+                        }\n+                    }\n                 }\n-            });\n+            }\n         }\n     }\n "}, {"sha": "fd977e8e254a29bb46decb5d053fc6b2f25d936e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -1496,8 +1496,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             let exported_ambiguities = self.tcx.sess.time(\"compute_effective_visibilities\", || {\n                 EffectiveVisibilitiesVisitor::compute_effective_visibilities(self, krate)\n             });\n-            self.tcx.sess.time(\"check_reexport_ambiguities\", || {\n-                self.check_reexport_ambiguities(exported_ambiguities)\n+            self.tcx.sess.time(\"check_hidden_glob_reexports\", || {\n+                self.check_hidden_glob_reexports(exported_ambiguities)\n             });\n             self.tcx.sess.time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions());\n             self.tcx.sess.time(\"late_resolve_crate\", || self.late_resolve_crate(krate));"}, {"sha": "a44d8955ab95c593e99eca0de84be89fed861290", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -14,10 +14,12 @@ mod object_safety;\n pub mod outlives_bounds;\n mod project;\n pub mod query;\n+#[cfg_attr(not(bootstrap), allow(hidden_glob_reexports))]\n mod select;\n mod specialize;\n mod structural_match;\n mod structural_normalize;\n+#[cfg_attr(not(bootstrap), allow(hidden_glob_reexports))]\n mod util;\n mod vtable;\n pub mod wf;"}, {"sha": "6f8d0cf8ae2a27121e1ab37f6a4b14188e8b9677", "filename": "tests/ui/imports/issue-55884-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fimports%2Fissue-55884-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fimports%2Fissue-55884-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-55884-2.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -6,6 +6,7 @@ mod parser {\n     pub use options::*;\n     // Private single import shadows public glob import, but arrives too late for initial\n     // resolution of `use parser::ParseOptions` because it depends on that resolution itself.\n+    #[allow(hidden_glob_reexports)]\n     use ParseOptions;\n }\n "}, {"sha": "67d4114149a4b512ccc6527768c0878d380c98fa", "filename": "tests/ui/imports/issue-55884-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fimports%2Fissue-55884-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fimports%2Fissue-55884-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-55884-2.stderr?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -1,16 +1,16 @@\n error[E0603]: struct import `ParseOptions` is private\n-  --> $DIR/issue-55884-2.rs:12:17\n+  --> $DIR/issue-55884-2.rs:13:17\n    |\n LL | pub use parser::ParseOptions;\n    |                 ^^^^^^^^^^^^ private struct import\n    |\n note: the struct import `ParseOptions` is defined here...\n-  --> $DIR/issue-55884-2.rs:9:9\n+  --> $DIR/issue-55884-2.rs:10:9\n    |\n LL |     use ParseOptions;\n    |         ^^^^^^^^^^^^\n note: ...and refers to the struct import `ParseOptions` which is defined here...\n-  --> $DIR/issue-55884-2.rs:12:9\n+  --> $DIR/issue-55884-2.rs:13:9\n    |\n LL | pub use parser::ParseOptions;\n    |         ^^^^^^^^^^^^^^^^^^^^ consider importing it directly"}, {"sha": "361243fcd7bdfc3caf31855f9d269a25cc878793", "filename": "tests/ui/resolve/hidden_glob_reexports.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -0,0 +1,52 @@\n+// check-pass\n+\n+pub mod upstream_a {\n+    mod inner {\n+        pub struct Foo {}\n+        pub struct Bar {}\n+    }\n+\n+    pub use self::inner::*;\n+\n+    struct Foo;\n+    //~^ WARN private item shadows public glob re-export\n+}\n+\n+pub mod upstream_b {\n+    mod inner {\n+        pub struct Foo {}\n+        pub struct Qux {}\n+    }\n+\n+    mod other {\n+        pub struct Foo;\n+    }\n+\n+    pub use self::inner::*;\n+\n+    use self::other::Foo;\n+    //~^ WARN private item shadows public glob re-export\n+}\n+\n+pub mod upstream_c {\n+    mod no_def_id {\n+        #![allow(non_camel_case_types)]\n+        pub struct u8;\n+        pub struct World;\n+    }\n+\n+    pub use self::no_def_id::*;\n+\n+    use std::primitive::u8;\n+    //~^ WARN private item shadows public glob re-export\n+}\n+\n+// Downstream crate\n+// mod downstream {\n+//     fn proof() {\n+//         let _ = crate::upstream_a::Foo;\n+//         let _ = crate::upstream_b::Foo;\n+//     }\n+// }\n+\n+pub fn main() {}"}, {"sha": "ddf7bcda827a8e2c3b78925a4462f0fdce6572cd", "filename": "tests/ui/resolve/hidden_glob_reexports.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5fdc888e05be88269a47d40fd0d911ec2be0b/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr?ref=b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "patch": "@@ -0,0 +1,31 @@\n+warning: private item shadows public glob re-export\n+  --> $DIR/hidden_glob_reexports.rs:11:5\n+   |\n+LL |     pub use self::inner::*;\n+   |             -------------- the name `Foo` in the type namespace is supposed to be publicly re-exported here\n+LL |\n+LL |     struct Foo;\n+   |     ^^^^^^^^^^^ but the private item here shadows it\n+   |\n+   = note: `#[warn(hidden_glob_reexports)]` on by default\n+\n+warning: private item shadows public glob re-export\n+  --> $DIR/hidden_glob_reexports.rs:27:9\n+   |\n+LL |     pub use self::inner::*;\n+   |             -------------- the name `Foo` in the type namespace is supposed to be publicly re-exported here\n+LL |\n+LL |     use self::other::Foo;\n+   |         ^^^^^^^^^^^^^^^^ but the private item here shadows it\n+\n+warning: private item shadows public glob re-export\n+  --> $DIR/hidden_glob_reexports.rs:40:9\n+   |\n+LL |     pub use self::no_def_id::*;\n+   |             ------------------ the name `u8` in the type namespace is supposed to be publicly re-exported here\n+LL |\n+LL |     use std::primitive::u8;\n+   |         ^^^^^^^^^^^^^^^^^^ but the private item here shadows it\n+\n+warning: 3 warnings emitted\n+"}]}