{"sha": "ed64b97d613f32d9f1ba889068c2dd71883b8c87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjRiOTdkNjEzZjMyZDlmMWJhODg5MDY4YzJkZDcxODgzYjhjODc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-16T09:05:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-16T09:05:04Z"}, "message": "Rollup merge of #45984 - ExpHP:attr-error-context, r=estebank\n\nAdd context to E0084, E0517, E0518\n\nA small diagnostic enhancement to get my feet wet.  Please scrutinize!\n\nThis modifies errors E0084, E0517, and E0518 to include both the annotation and the annotated item.  All of these errors already had labels; I moved the label to the other span, and rephrased it as necessary.\n\nFixes #45886", "tree": {"sha": "c8955bf0ec23b2142154d6d441b63f410a05139f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8955bf0ec23b2142154d6d441b63f410a05139f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed64b97d613f32d9f1ba889068c2dd71883b8c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed64b97d613f32d9f1ba889068c2dd71883b8c87", "html_url": "https://github.com/rust-lang/rust/commit/ed64b97d613f32d9f1ba889068c2dd71883b8c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed64b97d613f32d9f1ba889068c2dd71883b8c87/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1ea047da61fd6b389849492bfcd362bbc6c0d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ea047da61fd6b389849492bfcd362bbc6c0d1", "html_url": "https://github.com/rust-lang/rust/commit/3c1ea047da61fd6b389849492bfcd362bbc6c0d1"}, {"sha": "ead9ac3b51639c71f7d41f89721e0a8bee0136df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead9ac3b51639c71f7d41f89721e0a8bee0136df", "html_url": "https://github.com/rust-lang/rust/commit/ead9ac3b51639c71f7d41f89721e0a8bee0136df"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "05c371113b4c40ce26d098d7ff2192206d31e612", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ed64b97d613f32d9f1ba889068c2dd71883b8c87", "patch": "@@ -47,27 +47,27 @@ struct CheckAttrVisitor<'a> {\n \n impl<'a> CheckAttrVisitor<'a> {\n     /// Check any attribute.\n-    fn check_attribute(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_attribute(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if let Some(name) = attr.name() {\n             match &*name.as_str() {\n-                \"inline\" => self.check_inline(attr, target),\n-                \"repr\" => self.check_repr(attr, target),\n+                \"inline\" => self.check_inline(attr, item, target),\n+                \"repr\" => self.check_repr(attr, item, target),\n                 _ => (),\n             }\n         }\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n-    fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_inline(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if target != Target::Fn {\n             struct_span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\")\n-                .span_label(attr.span, \"requires a function\")\n+                .span_label(item.span, \"not a function\")\n                 .emit();\n         }\n     }\n \n     /// Check if an `#[repr]` attr is valid.\n-    fn check_repr(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_repr(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         let words = match attr.meta_item_list() {\n             Some(words) => words,\n             None => {\n@@ -139,7 +139,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 _ => continue,\n             };\n             struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n-                .span_label(attr.span, format!(\"requires {}\", label))\n+                .span_label(item.span, format!(\"not {}\", label))\n                 .emit();\n         }\n         if conflicting_reprs > 1 {\n@@ -153,7 +153,7 @@ impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         let target = Target::from_item(item);\n         for attr in &item.attrs {\n-            self.check_attribute(attr, target);\n+            self.check_attribute(attr, item, target);\n         }\n         visit::walk_item(self, item);\n     }"}, {"sha": "d9f502cbdeeb5e6202000653aff4260fc004bd23", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed64b97d613f32d9f1ba889068c2dd71883b8c87", "patch": "@@ -117,6 +117,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use syntax::abi::Abi;\n use syntax::ast;\n+use syntax::attr;\n use syntax::codemap::{self, original_sp, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n@@ -1561,12 +1562,15 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n-    if vs.is_empty() && tcx.has_attr(def_id, \"repr\") {\n-        struct_span_err!(\n-            tcx.sess, sp, E0084,\n-            \"unsupported representation for zero-variant enum\")\n-            .span_label(sp, \"unsupported enum representation\")\n-            .emit();\n+    if vs.is_empty() {\n+        let attributes = tcx.get_attrs(def_id);\n+        if let Some(attr) = attr::find_by_name(&attributes, \"repr\") {\n+            struct_span_err!(\n+                tcx.sess, attr.span, E0084,\n+                \"unsupported representation for zero-variant enum\")\n+                .span_label(sp, \"zero-variant enum\")\n+                .emit();\n+        }\n     }\n \n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);"}, {"sha": "d19eed7124e82b798ebe170723a853a651921e88", "filename": "src/test/compile-fail/E0084.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=ed64b97d613f32d9f1ba889068c2dd71883b8c87", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(i32)]\n-enum Foo {}\n-//~^ ERROR E0084\n-//~| unsupported enum representation\n+#[repr(i32)] //~ ERROR: E0084\n+enum Foo {} //~ NOTE: zero-variant enum\n \n fn main() {\n }"}, {"sha": "7feda670f52a3aa85f111b501b6a9cebb671c9c9", "filename": "src/test/compile-fail/E0517.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0517.rs?ref=ed64b97d613f32d9f1ba889068c2dd71883b8c87", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-type Foo = u8;\n+#[repr(C)] //~ ERROR: E0517\n+type Foo = u8; //~ NOTE: not a struct, enum or union\n \n-#[repr(packed)] //~ ERROR E0517\n-                //~| requires a struct\n-enum Foo2 {Bar, Baz}\n+#[repr(packed)] //~ ERROR: E0517\n+enum Foo2 {Bar, Baz} //~ NOTE: not a struct\n \n-#[repr(u8)] //~ ERROR E0517\n-            //~| requires an enum\n-struct Foo3 {bar: bool, baz: bool}\n+#[repr(u8)] //~ ERROR: E0517\n+struct Foo3 {bar: bool, baz: bool} //~ NOTE: not an enum\n \n-#[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-impl Foo3 {\n+#[repr(C)] //~ ERROR: E0517\n+impl Foo3 { //~ NOTE: not a struct, enum or union\n }\n \n fn main() {"}, {"sha": "63d40db0049da736155c9ee6d85d58b41234d6e5", "filename": "src/test/compile-fail/E0518.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed64b97d613f32d9f1ba889068c2dd71883b8c87/src%2Ftest%2Fcompile-fail%2FE0518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0518.rs?ref=ed64b97d613f32d9f1ba889068c2dd71883b8c87", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[inline(always)] //~ ERROR E0518\n-                  //~| requires a function\n-struct Foo;\n+#[inline(always)] //~ ERROR: E0518\n+struct Foo;       //~ NOTE: not a function\n \n-#[inline(never)] //~ ERROR E0518\n-                 //~| requires a function\n-impl Foo {\n+#[inline(never)] //~ ERROR: E0518\n+impl Foo {       //~ NOTE: not a function\n }\n \n fn main() {"}]}