{"sha": "9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzVmNGZlZDEwYTY1ZTZjYjc3OWZjMDU5ZjI3MmRlYWRkN2VjYzE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-19T13:23:59Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-26T01:31:53Z"}, "message": "Convert primitives to use intra-doc links", "tree": {"sha": "39313a495c8f8513f87f7891b1d9bbceb723cc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39313a495c8f8513f87f7891b1d9bbceb723cc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "html_url": "https://github.com/rust-lang/rust/commit/9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a54cc4eb6111cac9ad75cc439f75b79698b4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a54cc4eb6111cac9ad75cc439f75b79698b4a7", "html_url": "https://github.com/rust-lang/rust/commit/c0a54cc4eb6111cac9ad75cc439f75b79698b4a7"}], "stats": {"total": 118, "additions": 46, "deletions": 72}, "files": [{"sha": "70ee065c85723c104025ba86e9f5edb5f21dd8a7", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -103,6 +103,11 @@\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n #![feature(int_bits_const)]\n+// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n+// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n+// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n+// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n+#![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_ref)]"}, {"sha": "0c911cea1bb1e99c602868f468e32f68c1ad75eb", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1,6 +1,6 @@\n //! A dynamically-sized view into a contiguous sequence, `[T]`.\n //!\n-//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n+//! *[See also the slice primitive type](slice).*\n //!\n //! Slices are a view into a block of memory represented as a pointer and a\n //! length.\n@@ -71,12 +71,12 @@\n //!   [`.chunks`], [`.windows`] and more.\n //!\n //! [`Hash`]: core::hash::Hash\n-//! [`.iter`]: ../../std/primitive.slice.html#method.iter\n-//! [`.iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n-//! [`.split`]: ../../std/primitive.slice.html#method.split\n-//! [`.splitn`]: ../../std/primitive.slice.html#method.splitn\n-//! [`.chunks`]: ../../std/primitive.slice.html#method.chunks\n-//! [`.windows`]: ../../std/primitive.slice.html#method.windows\n+//! [`.iter`]: slice::iter\n+//! [`.iter_mut`]: slice::iter_mut\n+//! [`.split`]: slice::split\n+//! [`.splitn`]: slice::splitn\n+//! [`.chunks`]: slice::chunks\n+//! [`.windows`]: slice::windows\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n // Many of the usings in this module are only used in the test configuration.\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n@@ -673,7 +673,7 @@ impl [u8] {\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).\n+/// Helper trait for [`[T]::concat`](slice::concat).\n ///\n /// Note: the `Item` type parameter is not used in this trait,\n /// but it allows impls to be more generic.\n@@ -708,19 +708,19 @@ pub trait Concat<Item: ?Sized> {\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n+    /// Implementation of [`[T]::concat`](slice::concat)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     fn concat(slice: &Self) -> Self::Output;\n }\n \n-/// Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)\n+/// Helper trait for [`[T]::join`](slice::join)\n #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n pub trait Join<Separator> {\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)\n+    /// Implementation of [`[T]::join`](slice::join)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     fn join(slice: &Self, sep: Separator) -> Self::Output;\n }"}, {"sha": "8c64bc0801259ca706b27f3da3854007db42f46d", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1,6 +1,6 @@\n //! Unicode string slices.\n //!\n-//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n+//! *[See also the `str` primitive type](str).*\n //!\n //! The `&str` type is one of the two main string types, the other being `String`.\n //! Unlike its `String` counterpart, its contents are borrowed."}, {"sha": "b567d0a2fe2d95d811722a77c49eea5f30311d10", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -495,7 +495,7 @@ impl String {\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n-    /// [byteslice]: ../../std/primitive.slice.html\n+    /// [byteslice]: prim@slice\n     /// [U+FFFD]: core::char::REPLACEMENT_CHARACTER\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want"}, {"sha": "01a3f9f9b5976af827c543c51c3b9dcece7cc0ec", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -216,7 +216,7 @@ mod spec_extend;\n /// # Slicing\n ///\n /// A `Vec` can be mutable. Slices, on the other hand, are read-only objects.\n-/// To get a [slice], use [`&`]. Example:\n+/// To get a [slice][prim@slice], use [`&`]. Example:\n ///\n /// ```\n /// fn read_slice(slice: &[usize]) {\n@@ -369,8 +369,6 @@ mod spec_extend;\n /// [`reserve`]: Vec::reserve\n /// [`MaybeUninit`]: core::mem::MaybeUninit\n /// [owned slice]: Box\n-/// [slice]: ../../std/primitive.slice.html\n-/// [`&`]: ../../std/primitive.reference.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n@@ -2517,7 +2515,7 @@ impl<T, A: Allocator> Vec<T, A> {\n /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\n /// append the entire slice at once.\n ///\n-/// [`copy_from_slice`]: ../../std/primitive.slice.html#method.copy_from_slice\n+/// [`copy_from_slice`]: slice::copy_from_slice\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {"}, {"sha": "8b95b70396bbd8f99d7fa430cf15fc29f1607642", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -164,7 +164,6 @@ impl Layout {\n     ///       [`Layout::for_value`] on a reference to an extern type tail.\n     ///     - otherwise, it is conservatively not allowed to call this function.\n     ///\n-    /// [slice]: ../../std/primitive.slice.html\n     /// [trait object]: ../../book/ch17-02-trait-objects.html\n     /// [extern type]: ../../unstable-book/language-features/extern-types.html\n     #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]"}, {"sha": "4472fba26b99b2dec700026cf03b6165b749881d", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -9,8 +9,6 @@ use crate::{\n };\n \n /// A by-value [array] iterator.\n-///\n-/// [array]: ../../std/primitive.array.html\n #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n pub struct IntoIter<T, const N: usize> {\n     /// This is the array we are iterating over."}, {"sha": "20251edf6f7f4ead1d41cc753d7126b2e76f6085", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -2,7 +2,7 @@\n //! up to a certain length. Eventually, we should be able to generalize\n //! to all lengths.\n //!\n-//! *[See also the array primitive type](../../std/primitive.array.html).*\n+//! *[See also the array primitive type](array).*\n \n #![stable(feature = \"core_array\", since = \"1.36.0\")]\n "}, {"sha": "65af8508a6839cfcdb23a5851b84c59de03508be", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -463,7 +463,6 @@ pub trait TryInto<T>: Sized {\n /// ```\n ///\n /// [`try_from`]: TryFrom::try_from\n-/// [`!`]: ../../std/primitive.never.html\n #[rustc_diagnostic_item = \"try_from_trait\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n@@ -673,8 +672,6 @@ impl AsMut<str> for str {\n /// However when `Infallible` becomes an alias for the never type,\n /// the two `impl`s will start to overlap\n /// and therefore will be disallowed by the language\u2019s trait coherence rules.\n-///\n-/// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n #[derive(Copy)]\n pub enum Infallible {}"}, {"sha": "9302baa823bc5f29cde200cfccbcb2ead7e64099", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -21,7 +21,6 @@ use crate::ops::{Deref, DerefMut};\n /// compiler down to 1.1.0. After Rust 1.30.0, it was re-exported by\n /// this definition. For more information, please read [RFC 2521].\n ///\n-/// [pointer]: ../../std/primitive.pointer.html\n /// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n /// [RFC 2521]: https://github.com/rust-lang/rfcs/blob/master/text/2521-c_void-reunification.md\n // N.B., for LLVM to recognize the void pointer type and by extension"}, {"sha": "afea8aa8ff262b989df3483062299c42e7ac0e6b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1093,8 +1093,7 @@ extern \"rust-intrinsic\" {\n     /// bounds or arithmetic overflow occurs then any further use of the\n     /// returned value will result in undefined behavior.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n+    /// The stabilized version of this intrinsic is [`pointer::offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n@@ -1111,8 +1110,7 @@ extern \"rust-intrinsic\" {\n     /// object, and it wraps with two's complement arithmetic. The resulting\n     /// value is not necessarily valid to be used to actually access memory.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n+    /// The stabilized version of this intrinsic is [`pointer::wrapping_offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "c50d9507a179828786f05ad14f7d8ce717908efc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -114,7 +114,7 @@\n #![feature(extended_key_value_attributes)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n-#![cfg_attr(not(bootstrap), feature(intra_doc_pointers))]\n+#![feature(intra_doc_pointers)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "26314213ff7306713141b11b75bc8a4421e867a1", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -976,7 +976,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// [`write_slice_cloned`]: MaybeUninit::write_slice_cloned\n-    /// [`slice::copy_from_slice`]: ../../std/primitive.slice.html#method.copy_from_slice\n     #[unstable(feature = \"maybe_uninit_write_slice\", issue = \"79995\")]\n     pub fn write_slice<'a>(this: &'a mut [MaybeUninit<T>], src: &[T]) -> &'a mut [T]\n     where\n@@ -1037,7 +1036,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// [`write_slice`]: MaybeUninit::write_slice\n-    /// [`slice::clone_from_slice`]: ../../std/primitive.slice.html#method.clone_from_slice\n     #[unstable(feature = \"maybe_uninit_write_slice\", issue = \"79995\")]\n     pub fn write_slice_cloned<'a>(this: &'a mut [MaybeUninit<T>], src: &[T]) -> &'a mut [T]\n     where"}, {"sha": "afce6e55b8f6a782a80d8865bdb3ab9e4f1ded93", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -308,7 +308,6 @@ pub const fn size_of<T>() -> usize {\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n ///\n /// # Examples\n@@ -355,7 +354,6 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`size_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///\n@@ -494,7 +492,6 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`align_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///"}, {"sha": "e5c4798afcbff284c002a325d7ee46dc0705bb0c", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -28,7 +28,7 @@\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples\n@@ -97,7 +97,7 @@ pub trait Fn<Args>: FnMut<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples\n@@ -176,7 +176,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples"}, {"sha": "cfc1bfd54be2d032d2fe8e1b14070a3738c24fc4", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1011,8 +1011,6 @@ impl<T> *const [T] {\n     /// See also [`slice::from_raw_parts`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {"}, {"sha": "5026c48bdf4b4c1153046f45830c719dc0482233", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1,6 +1,6 @@\n //! Manually manage memory through raw pointers.\n //!\n-//! *[See also the pointer primitive types](../../std/primitive.pointer.html).*\n+//! *[See also the pointer primitive types](pointer).*\n //!\n //! # Safety\n //!\n@@ -60,7 +60,7 @@\n //! [ub]: ../../reference/behavior-considered-undefined.html\n //! [zst]: ../../nomicon/exotic-sizes.html#zero-sized-types-zsts\n //! [atomic operations]: crate::sync::atomic\n-//! [`offset`]: ../../std/primitive.pointer.html#method.offset\n+//! [`offset`]: pointer::offset\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "06bacc863514790d97c43a349f7c70f36e676730", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -1273,8 +1273,6 @@ impl<T> *mut [T] {\n     /// See also [`slice::from_raw_parts`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n@@ -1325,8 +1323,6 @@ impl<T> *mut [T] {\n     /// See also [`slice::from_raw_parts_mut`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {"}, {"sha": "8d533cd6be117cb53c65070f7851b5a05d5849f6", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -425,7 +425,6 @@ impl<T> NonNull<[T]> {\n     /// See also [`slice::from_raw_parts`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice(&self) -> &[MaybeUninit<T>] {\n@@ -470,7 +469,6 @@ impl<T> NonNull<[T]> {\n     /// See also [`slice::from_raw_parts_mut`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     ///\n     /// # Examples\n     ///"}, {"sha": "eda50dc287f6c943b822cd259c0e9c426d29078a", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -83,7 +83,6 @@ use crate::ptr;\n ///\n /// [valid]: ptr#safety\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n-/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n@@ -125,7 +124,6 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///\n /// [valid]: ptr#safety\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n-/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {"}, {"sha": "05ff7bb120daeba91080321a8cd4fe0752e9817d", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -14,7 +14,7 @@ use super::Utf8Error;\n /// UTF-8, and then does the conversion.\n ///\n /// [`&str`]: str\n-/// [byteslice]: ../../std/primitive.slice.html\n+/// [byteslice]: slice\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n@@ -31,7 +31,7 @@ use super::Utf8Error;\n /// stack-allocated string. There is an example of this in the\n /// examples section below.\n ///\n-/// [byteslice]: ../../std/primitive.slice.html\n+/// [byteslice]: slice\n ///\n /// # Errors\n ///"}, {"sha": "945bfda1b78742d0d142e4be0430e6fdaae181f6", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -62,20 +62,18 @@ use crate::sys;\n /// u8` argument which is not necessarily nul-terminated, plus another\n /// argument with the length of the string \u2014 like C's `strndup()`.\n /// You can of course get the slice's length with its\n-/// [`len`][slice.len] method.\n+/// [`len`][slice::len] method.\n ///\n /// If you need a `&[`[`u8`]`]` slice *with* the nul terminator, you\n /// can use [`CString::as_bytes_with_nul`] instead.\n ///\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n-/// [`as_ptr`][slice.as_ptr] method to get a read-only raw pointer to pass to\n+/// [`as_ptr`][slice::as_ptr] method to get a read-only raw pointer to pass to\n /// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n /// [`&str`]: prim@str\n-/// [slice.as_ptr]: ../primitive.slice.html#method.as_ptr\n-/// [slice.len]: ../primitive.slice.html#method.len\n /// [`Deref`]: ops::Deref\n /// [`&CStr`]: CStr\n ///"}, {"sha": "2291498740510e092590d42188a1ce0861305723", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -482,7 +482,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// }\n /// ```\n ///\n-/// Read from [`&str`] because [`&[u8]`][slice] implements `Read`:\n+/// Read from [`&str`] because [`&[u8]`][prim@slice] implements `Read`:\n ///\n /// ```no_run\n /// # use std::io;\n@@ -504,7 +504,6 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// [`&str`]: prim@str\n /// [`std::io`]: self\n /// [`File`]: crate::fs::File\n-/// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Read {"}, {"sha": "383eaf2e3a206db4b21e72bd4940ce43e2b0e8c2", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -42,7 +42,7 @@\n /// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n /// [`crate`]: keyword.crate.html\n /// [`use`]: keyword.use.html\n-/// [const-cast]: primitive.pointer.html#method.cast\n+/// [const-cast]: pointer::cast\n /// [mut-cast]: primitive.pointer.html#method.cast-1\n mod as_keyword {}\n \n@@ -181,9 +181,8 @@ mod break_keyword {}\n /// The `const` keyword is also used in raw pointers in combination with `mut`, as seen in `*const\n /// T` and `*mut T`. More about `const` as used in raw pointers can be read at the Rust docs for the [pointer primitive].\n ///\n-/// [pointer primitive]: primitive.pointer.html\n-/// [Rust Book]:\n-/// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+/// [pointer primitive]: pointer\n+/// [Rust Book]: ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: ../reference/items/constant-items.html\n /// [const-eval]: ../reference/const_eval.html\n mod const_keyword {}\n@@ -371,7 +370,6 @@ mod else_keyword {}\n /// [ADT]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [Rust Book]: ../book/ch06-01-defining-an-enum.html\n /// [Reference]: ../reference/items/enumerations.html\n-/// [`!`]: primitive.never.html\n mod enum_keyword {}\n \n #[doc(keyword = \"extern\")]"}, {"sha": "2eafcdd051bea35d64ccc77412df3e81b761dcf2", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -61,14 +61,14 @@\n //!    type, but not the all-important methods.\n //!\n //! So for example there is a [page for the primitive type\n-//! `i32`](primitive.i32.html) that lists all the methods that can be called on\n+//! `i32`](primitive::i32) that lists all the methods that can be called on\n //! 32-bit integers (very useful), and there is a [page for the module\n //! `std::i32`] that documents the constant values [`MIN`] and [`MAX`] (rarely\n //! useful).\n //!\n-//! Note the documentation for the primitives [`str`] and [`[T]`][slice] (also\n+//! Note the documentation for the primitives [`str`] and [`[T]`][prim@slice] (also\n //! called 'slice'). Many method calls on [`String`] and [`Vec<T>`] are actually\n-//! calls to methods on [`str`] and [`[T]`][slice] respectively, via [deref\n+//! calls to methods on [`str`] and [`[T]`][prim@slice] respectively, via [deref\n //! coercions][deref-coercions].\n //!\n //! Third, the standard library defines [The Rust Prelude], a small collection\n@@ -111,8 +111,8 @@\n //! regions of memory:\n //!\n //! * [`Vec<T>`] - A heap-allocated *vector* that is resizable at runtime.\n-//! * [`[T; n]`][array] - An inline *array* with a fixed size at compile time.\n-//! * [`[T]`][slice] - A dynamically sized *slice* into any other kind of contiguous\n+//! * [`[T; N]`][prim@array] - An inline *array* with a fixed size at compile time.\n+//! * [`[T]`][prim@slice] - A dynamically sized *slice* into any other kind of contiguous\n //!   storage, whether heap-allocated or not.\n //!\n //! Slices can only be handled through some kind of *pointer*, and as such come\n@@ -275,7 +275,7 @@\n #![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n-#![cfg_attr(not(bootstrap), feature(intra_doc_pointers))]\n+#![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(link_args)]\n #![feature(linkage)]"}, {"sha": "d4bb2083d00d84216b3e3e8fac3053a904c6c543", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a75f4fed10a65e6cb779fc059f272deadd7ecc1/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "patch": "@@ -468,8 +468,8 @@ mod prim_unit {}\n ///\n /// [`null`]: ptr::null\n /// [`null_mut`]: ptr::null_mut\n-/// [`is_null`]: ../std/primitive.pointer.html#method.is_null\n-/// [`offset`]: ../std/primitive.pointer.html#method.offset\n+/// [`is_null`]: pointer::is_null\n+/// [`offset`]: pointer::offset\n /// [`into_raw`]: Box::into_raw\n /// [`drop`]: mem::drop\n /// [`write`]: ptr::write\n@@ -564,7 +564,7 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n-/// [slice]: primitive.slice.html\n+/// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n /// [`Borrow`]: borrow::Borrow"}]}