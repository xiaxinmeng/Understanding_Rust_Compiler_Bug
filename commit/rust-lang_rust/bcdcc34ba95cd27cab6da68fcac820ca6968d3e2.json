{"sha": "bcdcc34ba95cd27cab6da68fcac820ca6968d3e2", "node_id": "C_kwDOAAsO6NoAKGJjZGNjMzRiYTk1Y2QyN2NhYjZkYTY4ZmNhYzgyMGNhNjk2OGQzZTI", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-15T21:01:53Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-29T16:59:06Z"}, "message": "elide lifetimes, get rid of glob import", "tree": {"sha": "54bc6f53e31710ae5e3049c3699dfb78ab62577b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54bc6f53e31710ae5e3049c3699dfb78ab62577b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2", "html_url": "https://github.com/rust-lang/rust/commit/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb58083ce59b44c54866a4d8305f59c7e7742593", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb58083ce59b44c54866a4d8305f59c7e7742593", "html_url": "https://github.com/rust-lang/rust/commit/bb58083ce59b44c54866a4d8305f59c7e7742593"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "0a3f08888a3bfbf5294070358619572eedd12d48", "filename": "clippy_lints/src/while_pop_unwrap.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcc34ba95cd27cab6da68fcac820ca6968d3e2/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs?ref=bcdcc34ba95cd27cab6da68fcac820ca6968d3e2", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::{diagnostics::span_lint_and_then, match_def_path, paths, source::snippet};\n use rustc_errors::Applicability;\n-use rustc_hir::*;\n+use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind, UnOp};\n use rustc_lint::LateContext;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{symbol::Ident, Span};\n@@ -36,13 +36,7 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(WhilePopUnwrap => [WHILE_POP_UNWRAP]);\n \n-fn report_lint<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    pop_span: Span,\n-    ident: Option<Ident>,\n-    loop_span: Span,\n-    receiver_span: Span,\n-) {\n+fn report_lint(cx: &LateContext<'_>, pop_span: Span, ident: Option<Ident>, loop_span: Span, receiver_span: Span) {\n     span_lint_and_then(\n         cx,\n         WHILE_POP_UNWRAP,\n@@ -54,7 +48,7 @@ fn report_lint<'tcx>(\n                 \"try\",\n                 format!(\n                     \"while let Some({}) = {}.pop()\",\n-                    ident.as_ref().map(Ident::as_str).unwrap_or(\"element\"),\n+                    ident.as_ref().map_or(\"element\", Ident::as_str),\n                     snippet(cx, receiver_span, \"..\")\n                 ),\n                 Applicability::MaybeIncorrect,\n@@ -75,11 +69,11 @@ fn match_method_call(cx: &LateContext<'_>, expr: &Expr<'_>, method: &[&str]) ->\n     }\n }\n \n-fn is_vec_pop<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_vec_pop(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     match_method_call(cx, expr, &paths::VEC_POP)\n }\n \n-fn is_vec_pop_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_vec_pop_unwrap(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(_, inner, ..) = expr.kind\n         && (match_method_call(cx, expr, &paths::OPTION_UNWRAP) || match_method_call(cx, expr, &paths::OPTION_EXPECT))\n         && is_vec_pop(cx, inner)\n@@ -90,7 +84,7 @@ fn is_vec_pop_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n     }\n }\n \n-fn check_local<'tcx>(cx: &LateContext<'tcx>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n+fn check_local(cx: &LateContext<'_>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n     if let StmtKind::Local(local) = stmt.kind\n         && let PatKind::Binding(.., ident, _) = local.pat.kind\n         && let Some(init) = local.init\n@@ -101,10 +95,12 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, stmt: &Stmt<'_>, loop_span: Span, r\n     }\n }\n \n-fn check_call_arguments<'tcx>(cx: &LateContext<'tcx>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n+fn check_call_arguments(cx: &LateContext<'_>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n     if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = stmt.kind {\n         if let ExprKind::MethodCall(_, _, args, _) | ExprKind::Call(_, args) = expr.kind {\n-            let offending_arg = args.iter().find_map(|arg| is_vec_pop_unwrap(cx, arg).then(|| arg.span));\n+            let offending_arg = args\n+                .iter()\n+                .find_map(|arg| is_vec_pop_unwrap(cx, arg).then_some(arg.span));\n \n             if let Some(offending_arg) = offending_arg {\n                 report_lint(cx, offending_arg, None, loop_span, recv_span);"}]}