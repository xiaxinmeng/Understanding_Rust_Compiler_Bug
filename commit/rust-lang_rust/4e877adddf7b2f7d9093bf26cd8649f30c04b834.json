{"sha": "4e877adddf7b2f7d9093bf26cd8649f30c04b834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODc3YWRkZGY3YjJmN2Q5MDkzYmYyNmNkODY0OWYzMGMwNGI4MzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-03-07T23:58:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-03-10T21:02:47Z"}, "message": "Remove proc keyword", "tree": {"sha": "150c8e31641a981685d4c4eaab5bb9abd9afeebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150c8e31641a981685d4c4eaab5bb9abd9afeebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e877adddf7b2f7d9093bf26cd8649f30c04b834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e877adddf7b2f7d9093bf26cd8649f30c04b834", "html_url": "https://github.com/rust-lang/rust/commit/4e877adddf7b2f7d9093bf26cd8649f30c04b834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e877adddf7b2f7d9093bf26cd8649f30c04b834/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30609ffd782c941f38d62caaed8beb6fde965db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30609ffd782c941f38d62caaed8beb6fde965db", "html_url": "https://github.com/rust-lang/rust/commit/d30609ffd782c941f38d62caaed8beb6fde965db"}], "stats": {"total": 47, "additions": 10, "deletions": 37}, "files": [{"sha": "d853fbba8d4bd06ab309f0d5a3fe55ae35aeeaeb", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=4e877adddf7b2f7d9093bf26cd8649f30c04b834", "patch": "@@ -59,12 +59,12 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n             ),\n             ObsoleteSyntax::ProcType => (\n                 \"the `proc` type\",\n-                \"use unboxed closures instead\",\n+                \"is not used for moment, use unboxed closures instead\",\n                 true,\n             ),\n             ObsoleteSyntax::ProcExpr => (\n                 \"`proc` expression\",\n-                \"use a `move ||` expression instead\",\n+                \"is not used for the moment, use a `move ||` expression instead\",\n                 true,\n             ),\n             ObsoleteSyntax::ClosureType => ("}, {"sha": "7535e060c55e6b87f446171f4dbc73334d6464f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4e877adddf7b2f7d9093bf26cd8649f30c04b834", "patch": "@@ -1051,9 +1051,7 @@ impl<'a> Parser<'a> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs();\n \n         // examine next token to decide to do\n-        if self.eat_keyword_noexpect(keywords::Proc) {\n-            self.parse_proc_type(lifetime_defs)\n-        } else if self.token_is_bare_fn_keyword() || self.token_is_closure_keyword() {\n+        if self.token_is_bare_fn_keyword() || self.token_is_closure_keyword() {\n             self.parse_ty_bare_fn_or_ty_closure(lifetime_defs)\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n@@ -1522,8 +1520,6 @@ impl<'a> Parser<'a> {\n             let e = self.parse_expr();\n             self.expect(&token::CloseDelim(token::Paren));\n             TyTypeof(e)\n-        } else if self.eat_keyword_noexpect(keywords::Proc) {\n-            self.parse_proc_type(Vec::new())\n         } else if self.eat_lt() {\n             // QUALIFIED PATH `<TYPE as TRAIT_REF>::item`\n             let self_type = self.parse_ty_sum();\n@@ -2285,12 +2281,6 @@ impl<'a> Parser<'a> {\n                 if self.eat_keyword(keywords::Move) {\n                     return self.parse_lambda_expr(CaptureByValue);\n                 }\n-                if self.eat_keyword_noexpect(keywords::Proc) {\n-                    let span = self.last_span;\n-                    let _ = self.parse_proc_decl();\n-                    let _ = self.parse_expr();\n-                    return self.obsolete_expr(span, ObsoleteSyntax::ProcExpr);\n-                }\n                 if self.eat_keyword(keywords::If) {\n                     return self.parse_if_expr();\n                 }\n@@ -4645,23 +4635,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parses the `(arg, arg) -> return_type` header on a procedure.\n-    fn parse_proc_decl(&mut self) -> P<FnDecl> {\n-        let inputs =\n-            self.parse_unspanned_seq(&token::OpenDelim(token::Paren),\n-                                     &token::CloseDelim(token::Paren),\n-                                     seq_sep_trailing_allowed(token::Comma),\n-                                     |p| p.parse_fn_block_arg());\n-\n-        let output = self.parse_ret_ty();\n-\n-        P(FnDecl {\n-            inputs: inputs,\n-            output: output,\n-            variadic: false\n-        })\n-    }\n-\n     /// Parse the name and optional generic types of a function header.\n     fn parse_fn_header(&mut self) -> (Ident, ast::Generics) {\n         let id = self.parse_ident();"}, {"sha": "4a3ea971c7a36e5a09368830dc500764329b3919", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4e877adddf7b2f7d9093bf26cd8649f30c04b834", "patch": "@@ -561,11 +561,11 @@ declare_special_idents_and_keywords! {\n         (39,                         Virtual,    \"virtual\");\n         (40,                         While,      \"while\");\n         (41,                         Continue,   \"continue\");\n-        (42,                         Proc,       \"proc\");\n-        (43,                         Box,        \"box\");\n-        (44,                         Const,      \"const\");\n-        (45,                         Where,      \"where\");\n+        (42,                         Box,        \"box\");\n+        (43,                         Const,      \"const\");\n+        (44,                         Where,      \"where\");\n         'reserved:\n+        (45,                         Proc,       \"proc\");\n         (46,                         Alignof,    \"alignof\");\n         (47,                         Become,     \"become\");\n         (48,                         Offsetof,   \"offsetof\");"}, {"sha": "e440280d7e4b22859c7479d0f56e635607d4ee3f", "filename": "src/test/parse-fail/obsolete-proc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e877adddf7b2f7d9093bf26cd8649f30c04b834/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs?ref=4e877adddf7b2f7d9093bf26cd8649f30c04b834", "patch": "@@ -10,8 +10,8 @@\n \n // Test that we generate obsolete syntax errors around usages of `proc`.\n \n-fn foo(p: proc()) { } //~ ERROR obsolete syntax: the `proc` type\n+fn foo(p: proc()) { } //~ ERROR: the `proc` type isn't used for the moment\n \n-fn bar() { proc() 1; } //~ ERROR obsolete syntax: `proc` expression\n+fn bar() { proc() 1; } //~ ERROR: `proc` expression isn't used for the moment\n \n-fn main() { }\n+fn main() { }\n\\ No newline at end of file"}]}