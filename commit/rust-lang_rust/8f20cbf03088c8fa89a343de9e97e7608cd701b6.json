{"sha": "8f20cbf03088c8fa89a343de9e97e7608cd701b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjBjYmYwMzA4OGM4ZmE4OWEzNDNkZTllOTdlNzYwOGNkNzAxYjY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-02-17T17:04:26Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:40Z"}, "message": "Add more commentary for subst translation", "tree": {"sha": "b21999c61f868698a9475a9b13962bc2b752b130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21999c61f868698a9475a9b13962bc2b752b130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f20cbf03088c8fa89a343de9e97e7608cd701b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f20cbf03088c8fa89a343de9e97e7608cd701b6", "html_url": "https://github.com/rust-lang/rust/commit/8f20cbf03088c8fa89a343de9e97e7608cd701b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f20cbf03088c8fa89a343de9e97e7608cd701b6/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940adda2aef63ac820cf331ebb7f6f0699c12045", "url": "https://api.github.com/repos/rust-lang/rust/commits/940adda2aef63ac820cf331ebb7f6f0699c12045", "html_url": "https://github.com/rust-lang/rust/commit/940adda2aef63ac820cf331ebb7f6f0699c12045"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "9350598763375fde3b90d6a78827e1e220e96377", "filename": "src/librustc/middle/traits/specialize/mod.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f20cbf03088c8fa89a343de9e97e7608cd701b6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f20cbf03088c8fa89a343de9e97e7608cd701b6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs?ref=8f20cbf03088c8fa89a343de9e97e7608cd701b6", "patch": "@@ -64,9 +64,35 @@ pub fn translate_substs<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// When we have selected one impl, but are actually using item definitions from\n /// a parent impl providing a default, we need a way to translate between the\n /// type parameters of the two impls. Here the `source_impl` is the one we've\n-/// selected, and `source_substs` is a substitution of its generics (and possibly\n-/// some relevant `FnSpace` variables as well). And `target_impl` is the impl\n-/// we're actually going to get the definition from.\n+/// selected, and `source_substs` is a substitution of its generics (and\n+/// possibly some relevant `FnSpace` variables as well). And `target_impl` is\n+/// the impl we're actually going to get the definition from. The resulting\n+/// substitution will map from `target_impl`'s generics to `source_impl`'s\n+/// generics as instantiated by `source_subst`.\n+///\n+/// For example, consider the following scenario:\n+///\n+/// ```rust\n+/// trait Foo { ... }\n+/// impl<T, U> Foo for (T, U) { ... }  // target impl\n+/// impl<V> Foo for (V, V) { ... }     // source impl\n+/// ```\n+///\n+/// Suppose we have selected \"source impl\" with `V` instantiated with `u32`.\n+/// This function will produce a substitution with `T` and `U` both mapping to `u32`.\n+///\n+/// Where clauses add some trickiness here, because they can be used to \"define\"\n+/// an argument indirectly:\n+///\n+/// ```rust\n+/// impl<'a, I, T: 'a> Iterator for Cloned<I>\n+///    where I: Iterator<Item=&'a T>, T: Clone\n+/// ```\n+///\n+/// In a case like this, the substitution for `T` is determined indirectly,\n+/// through associated type projection. We deal with such cases by using\n+/// *fulfillment* to relate the two impls, requiring that all projections are\n+/// resolved.\n fn translate_substs_between_impls<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                         source_impl: DefId,\n                                         source_substs: Substs<'tcx>,"}]}