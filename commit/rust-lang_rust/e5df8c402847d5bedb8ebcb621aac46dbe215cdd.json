{"sha": "e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZGY4YzQwMjg0N2Q1YmVkYjhlYmNiNjIxYWFjNDZkYmUyMTVjZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-10T17:56:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-10T17:56:44Z"}, "message": "Merge #3551\n\n3551: Move FeatureFlags r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "87f12e2619ac0074134b758ddcc1f6c1ccef863a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f12e2619ac0074134b758ddcc1f6c1ccef863a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZ9TcCRBK7hj4Ov3rIwAAdHIIABFYtcmqhHOc6aYZWI+33PZK\nSiO+KQ+TQfKY2ZXur3HuDcyqxcpZj3+wPBztlGSppMKmpYtsOTdoJu2M8/W4Xktl\n3yTiCy0gZwDVmmqD+M5HDuTdzNbuyWinXnj4gtg+PXRsyJ+rx5vZjz6tvphP7o0H\nHGGSQaoRLeng/T8pVS/1YQZuMI0Oc6Jf8iUpuvohHtXSoGu/jORBQUFZw9iKA+cz\njjPnSH/R7tfkIb0fhjqu6VTfmqyF3ddqdW8RFkPFYgsD6MlpA6gvpFAXvMS2j7HL\nB+TXjaCCnkPThYlTMoj49rTM9LQ/GaeE7tvpo2WWveuzuMxlSpJZuMdg36oRFoA=\n=w6Gv\n-----END PGP SIGNATURE-----\n", "payload": "tree 87f12e2619ac0074134b758ddcc1f6c1ccef863a\nparent daf3609654b6e9b2ac2808a056c61438674a1dc9\nparent 14094e44770559c13a1e8bdfcfb989d3bedd00d8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583863004 +0000\ncommitter GitHub <noreply@github.com> 1583863004 +0000\n\nMerge #3551\n\n3551: Move FeatureFlags r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "html_url": "https://github.com/rust-lang/rust/commit/e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf3609654b6e9b2ac2808a056c61438674a1dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf3609654b6e9b2ac2808a056c61438674a1dc9", "html_url": "https://github.com/rust-lang/rust/commit/daf3609654b6e9b2ac2808a056c61438674a1dc9"}, {"sha": "14094e44770559c13a1e8bdfcfb989d3bedd00d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/14094e44770559c13a1e8bdfcfb989d3bedd00d8", "html_url": "https://github.com/rust-lang/rust/commit/14094e44770559c13a1e8bdfcfb989d3bedd00d8"}], "stats": {"total": 156, "additions": 88, "deletions": 68}, "files": [{"sha": "a27e0fc1592a65cc9e4fa3cf8201b5792d63d5c3", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -33,6 +33,23 @@ pub use crate::completion::completion_item::{\n     CompletionItem, CompletionItemKind, InsertTextFormat,\n };\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct CompletionOptions {\n+    pub enable_postfix_completions: bool,\n+    pub add_call_parenthesis: bool,\n+    pub add_call_argument_snippets: bool,\n+}\n+\n+impl Default for CompletionOptions {\n+    fn default() -> Self {\n+        CompletionOptions {\n+            enable_postfix_completions: true,\n+            add_call_parenthesis: true,\n+            add_call_argument_snippets: true,\n+        }\n+    }\n+}\n+\n /// Main entry point for completion. We run completion as a two-phase process.\n ///\n /// First, we look at the position and collect a so-called `CompletionContext.\n@@ -55,8 +72,12 @@ pub use crate::completion::completion_item::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(db: &RootDatabase, position: FilePosition) -> Option<Completions> {\n-    let ctx = CompletionContext::new(db, position)?;\n+pub(crate) fn completions(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    opts: &CompletionOptions,\n+) -> Option<Completions> {\n+    let ctx = CompletionContext::new(db, position, opts)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "6d000548d74b5700c50d4542aa18bc627d643b59", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -12,7 +12,7 @@ use crate::{\n };\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.db.feature_flags.get(\"completion.enable-postfix\") {\n+    if !ctx.options.enable_postfix_completions {\n         return;\n     }\n "}, {"sha": "3646fb8dcc30b2e1e53e1bb02b53f71e687c957c", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -11,14 +11,15 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::FilePosition;\n+use crate::{completion::CompletionOptions, FilePosition};\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n     pub(super) sema: Semantics<'a, RootDatabase>,\n     pub(super) db: &'a RootDatabase,\n+    pub(super) options: &'a CompletionOptions,\n     pub(super) offset: TextUnit,\n     /// The token before the cursor, in the original file.\n     pub(super) original_token: SyntaxToken,\n@@ -57,6 +58,7 @@ impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a RootDatabase,\n         position: FilePosition,\n+        options: &'a CompletionOptions,\n     ) -> Option<CompletionContext<'a>> {\n         let sema = Semantics::new(db);\n \n@@ -80,6 +82,7 @@ impl<'a> CompletionContext<'a> {\n         let mut ctx = CompletionContext {\n             sema,\n             db,\n+            options,\n             original_token,\n             token,\n             offset: position.offset,"}, {"sha": "1d14e963625cdf07b5a8ffc7bce143141f642380", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -321,14 +321,18 @@ impl Into<Vec<CompletionItem>> for Completions {\n \n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    use crate::completion::completions;\n-    use crate::mock_analysis::{analysis_and_position, single_file_with_position};\n+    use crate::{\n+        completion::{completions, CompletionOptions},\n+        mock_analysis::{analysis_and_position, single_file_with_position},\n+    };\n+\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = completions(&analysis.db, position).unwrap();\n+    let options = CompletionOptions::default();\n+    let completions = completions(&analysis.db, position, &options).unwrap();\n     let completion_items: Vec<CompletionItem> = completions.into();\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();"}, {"sha": "3dc56e4a3d8a7ccadcb17562de267f1a0400c7e8", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -104,10 +104,7 @@ impl Completions {\n         };\n \n         // Add `<>` for generic types\n-        if ctx.is_path_type\n-            && !ctx.has_type_args\n-            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n-        {\n+        if ctx.is_path_type && !ctx.has_type_args && ctx.options.add_call_parenthesis {\n             let has_non_default_type_params = match resolution {\n                 ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db),\n                 ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db),\n@@ -212,21 +209,14 @@ impl Completions {\n                 .detail(function_signature.to_string());\n \n         // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none()\n-            && !ctx.is_call\n-            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n-        {\n+        if ctx.use_item_syntax.is_none() && !ctx.is_call && ctx.options.add_call_parenthesis {\n             tested_by!(inserts_parens_for_function_calls);\n \n             let (snippet, label) = if params.is_empty() || has_self_param && params.len() == 1 {\n                 (format!(\"{}()$0\", name), format!(\"{}()\", name))\n             } else {\n                 builder = builder.trigger_call_info();\n-                let snippet = if ctx\n-                    .db\n-                    .feature_flags\n-                    .get(\"completion.insertion.add-argument-snippets\")\n-                {\n+                let snippet = if ctx.options.add_call_argument_snippets {\n                     let to_skip = if has_self_param { 1 } else { 0 };\n                     let function_params_snippet = join(\n                         function_signature.parameter_names.iter().skip(to_skip).enumerate().map("}, {"sha": "9f45003d3345ba2883c58ea049bf3ca44941cc1a", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -62,7 +62,7 @@ use crate::display::ToNav;\n pub use crate::{\n     assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n-    completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n+    completion::{CompletionItem, CompletionItemKind, CompletionOptions, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n@@ -84,7 +84,6 @@ pub use ra_db::{\n };\n pub use ra_ide_db::{\n     change::{AnalysisChange, LibraryData},\n-    feature_flags::FeatureFlags,\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     search::SearchScope,\n@@ -131,24 +130,20 @@ pub struct AnalysisHost {\n \n impl Default for AnalysisHost {\n     fn default() -> AnalysisHost {\n-        AnalysisHost::new(None, FeatureFlags::default())\n+        AnalysisHost::new(None)\n     }\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capcity: Option<usize>, feature_flags: FeatureFlags) -> AnalysisHost {\n-        AnalysisHost { db: RootDatabase::new(lru_capcity, feature_flags) }\n+    pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n+        AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n         Analysis { db: self.db.snapshot() }\n     }\n \n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        &self.db.feature_flags\n-    }\n-\n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n@@ -224,11 +219,6 @@ impl Analysis {\n         (host.analysis(), file_id)\n     }\n \n-    /// Features for Analysis.\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        &self.db.feature_flags\n-    }\n-\n     /// Debug info about the current state of the analysis.\n     pub fn status(&self) -> Cancelable<String> {\n         self.with_db(|db| status::status(&*db))\n@@ -450,8 +440,12 @@ impl Analysis {\n     }\n \n     /// Computes completions at the given position.\n-    pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| completion::completions(db, position).map(Into::into))\n+    pub fn completions(\n+        &self,\n+        position: FilePosition,\n+        options: &CompletionOptions,\n+    ) -> Cancelable<Option<Vec<CompletionItem>>> {\n+        self.with_db(|db| completion::completions(db, position, options).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given"}, {"sha": "6bcccc8487ea5b3f3297463ffcef6b9ca2a9d9f3", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -5,7 +5,6 @@\n pub mod marks;\n pub mod line_index;\n pub mod line_index_utils;\n-pub mod feature_flags;\n pub mod symbol_index;\n pub mod change;\n pub mod defs;\n@@ -22,7 +21,7 @@ use ra_db::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::SymbolsDatabase};\n+use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n@@ -37,7 +36,6 @@ use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::Sy\n #[derive(Debug)]\n pub struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    pub feature_flags: Arc<FeatureFlags>,\n     pub(crate) debug_data: Arc<DebugData>,\n     pub last_gc: crate::wasm_shims::Instant,\n     pub last_gc_check: crate::wasm_shims::Instant,\n@@ -82,17 +80,16 @@ impl salsa::Database for RootDatabase {\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n-        RootDatabase::new(None, FeatureFlags::default())\n+        RootDatabase::new(None)\n     }\n }\n \n impl RootDatabase {\n-    pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n+    pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n             last_gc: crate::wasm_shims::Instant::now(),\n             last_gc_check: crate::wasm_shims::Instant::now(),\n-            feature_flags: Arc::new(feature_flags),\n             debug_data: Default::default(),\n         };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n@@ -112,7 +109,6 @@ impl salsa::ParallelDatabase for RootDatabase {\n             runtime: self.runtime.snapshot(self),\n             last_gc: self.last_gc,\n             last_gc_check: self.last_gc_check,\n-            feature_flags: Arc::clone(&self.feature_flags),\n             debug_data: Arc::clone(&self.debug_data),\n         })\n     }"}, {"sha": "28a23934f15abd54e4be37dd9ff833b6a9ef5345", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -12,7 +12,7 @@ use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n-use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n+use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionOptions, FilePosition, LineCol};\n \n use crate::cli::{load_cargo::load_cargo, Verbosity};\n \n@@ -94,17 +94,19 @@ pub fn analysis_bench(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Res\n                 .analysis()\n                 .file_line_index(file_id)?\n                 .offset(LineCol { line: pos.line - 1, col_utf16: pos.column });\n-            let file_postion = FilePosition { file_id, offset };\n+            let file_position = FilePosition { file_id, offset };\n \n             if is_completion {\n-                let res =\n-                    do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n+                let options = CompletionOptions::default();\n+                let res = do_work(&mut host, file_id, |analysis| {\n+                    analysis.completions(file_position, &options)\n+                });\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             } else {\n                 let res =\n-                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n+                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_position));\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }"}, {"sha": "5df29a383dac91a40ee963f5b2464fe3a8974385", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -6,7 +6,7 @@ use std::path::Path;\n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n-use ra_ide::{AnalysisChange, AnalysisHost, FeatureFlags};\n+use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -82,7 +82,7 @@ pub(crate) fn load(\n     receiver: Receiver<VfsTask>,\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n-    let mut host = AnalysisHost::new(lru_cap, FeatureFlags::default());\n+    let mut host = AnalysisHost::new(lru_cap);\n     let mut analysis_change = AnalysisChange::new();\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "dbb3f50a0956be9cc3f4d2bbf5c746c1a6cd6455", "filename": "crates/rust-analyzer/src/feature_flags.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -2,6 +2,10 @@\n \n use rustc_hash::FxHashMap;\n \n+// FIXME: looks like a much better design is to pass options to each call,\n+// rather than to have a global ambient feature flags -- that way, the clients\n+// can issue two successive calls with different options.\n+\n /// Feature flags hold fine-grained toggles for all *user-visible* features of\n /// rust-analyzer.\n ///", "previous_filename": "crates/ra_ide_db/src/feature_flags.rs"}, {"sha": "e50e47b195bfaa25b2029a1c4a42ff2d9200750d", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -37,6 +37,7 @@ mod config;\n mod world;\n mod diagnostics;\n mod semantic_tokens;\n+mod feature_flags;\n \n use serde::de::DeserializeOwned;\n "}, {"sha": "f9de712a00134b7a09dd40a9a13dd9fb1ca8cf82", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -18,7 +18,7 @@ use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n-use ra_ide::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n+use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n@@ -28,6 +28,7 @@ use threadpool::ThreadPool;\n \n use crate::{\n     diagnostics::DiagnosticTask,\n+    feature_flags::FeatureFlags,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n@@ -423,7 +424,7 @@ fn loop_turn(\n     {\n         loop_state.workspace_loaded = true;\n         let n_packages: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n-        if world_state.feature_flags().get(\"notifications.workspace-loaded\") {\n+        if world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n             let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n             show_message(req::MessageType::Info, msg, &connection.sender);\n         }\n@@ -839,7 +840,7 @@ fn update_file_notifications_on_threadpool(\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n-    let publish_diagnostics = world.feature_flags().get(\"lsp.diagnostics\");\n+    let publish_diagnostics = world.feature_flags.get(\"lsp.diagnostics\");\n     pool.execute(move || {\n         for file_id in subscriptions {\n             if publish_diagnostics {"}, {"sha": "fcb40432d4a2dfa0022dd660b65f6b9292af0cd1", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -20,8 +20,8 @@ use lsp_types::{\n     TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n-    SearchScope,\n+    Assist, AssistId, CompletionOptions, FileId, FilePosition, FileRange, Query, RangeInfo,\n+    Runnable, RunnableKind, SearchScope,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -424,7 +424,15 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let items = match world.analysis().completions(position)? {\n+    let options = CompletionOptions {\n+        enable_postfix_completions: world.feature_flags.get(\"completion.enable-postfix\"),\n+        add_call_parenthesis: world.feature_flags.get(\"completion.insertion.add-call-parenthesis\"),\n+        add_call_argument_snippets: world\n+            .feature_flags\n+            .get(\"completion.insertion.add-argument-snippets\"),\n+    };\n+\n+    let items = match world.analysis().completions(position, &options)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n@@ -461,7 +469,7 @@ pub fn handle_signature_help(\n     let _p = profile(\"handle_signature_help\");\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n-        let concise = !world.analysis().feature_flags().get(\"call-info.full\");\n+        let concise = !world.feature_flags.get(\"call-info.full\");\n         let mut active_parameter = call_info.active_parameter.map(|it| it as i64);\n         if concise && call_info.signature.has_self_param {\n             active_parameter = active_parameter.map(|it| it.saturating_sub(1));"}, {"sha": "1ddc3c1a5e27fd5d886ac50c8a3cde994b91cc7d", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df8c402847d5bedb8ebcb621aac46dbe215cdd/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "patch": "@@ -13,15 +13,15 @@ use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n-    SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n \n use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n+    feature_flags::FeatureFlags,\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n@@ -45,6 +45,7 @@ pub struct Options {\n #[derive(Debug)]\n pub struct WorldState {\n     pub options: Options,\n+    pub feature_flags: Arc<FeatureFlags>,\n     //FIXME: this belongs to `LoopState` rather than to `WorldState`\n     pub roots_to_scan: usize,\n     pub roots: Vec<PathBuf>,\n@@ -60,6 +61,7 @@ pub struct WorldState {\n /// An immutable snapshot of the world's state at a point in time.\n pub struct WorldSnapshot {\n     pub options: Options,\n+    pub feature_flags: Arc<FeatureFlags>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n@@ -146,10 +148,11 @@ impl WorldState {\n                 CheckWatcher::dummy()\n             });\n \n-        let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n+        let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n         WorldState {\n             options,\n+            feature_flags: Arc::new(feature_flags),\n             roots_to_scan,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n@@ -216,6 +219,7 @@ impl WorldState {\n     pub fn snapshot(&self) -> WorldSnapshot {\n         WorldSnapshot {\n             options: self.options.clone(),\n+            feature_flags: Arc::clone(&self.feature_flags),\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n@@ -235,10 +239,6 @@ impl WorldState {\n     pub fn complete_request(&mut self, request: CompletedRequest) {\n         self.latest_requests.write().record(request)\n     }\n-\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        self.analysis_host.feature_flags()\n-    }\n }\n \n impl WorldSnapshot {\n@@ -306,8 +306,4 @@ impl WorldSnapshot {\n         let path = self.vfs.read().file2path(VfsFile(file_id.0));\n         self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n     }\n-\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        self.analysis.feature_flags()\n-    }\n }"}]}