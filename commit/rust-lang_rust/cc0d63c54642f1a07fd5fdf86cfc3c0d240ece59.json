{"sha": "cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMGQ2M2M1NDY0MmYxYTA3ZmQ1ZmRmODZjZmMzYzBkMjQwZWNlNTk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-20T14:57:38Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-20T14:57:38Z"}, "message": "Remove attribute on match", "tree": {"sha": "e43413fa85d4515509b6acaf67afc9176626c2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43413fa85d4515509b6acaf67afc9176626c2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "html_url": "https://github.com/rust-lang/rust/commit/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd13cc3e5d353c54b0c25a83aa5e5bd9fd21a304", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd13cc3e5d353c54b0c25a83aa5e5bd9fd21a304", "html_url": "https://github.com/rust-lang/rust/commit/dd13cc3e5d353c54b0c25a83aa5e5bd9fd21a304"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "972dc5055d21b012c42e05647e891b120e32aa54", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "patch": "@@ -1815,8 +1815,7 @@ impl<'a> LoweringContext<'a> {\n                     let match_expr = P(self.expr_match(e.span,\n                                                        into_iter_expr,\n                                                        hir_vec![iter_arm],\n-                                                       hir::MatchSource::ForLoopDesugar,\n-                                                       ThinVec::new()));\n+                                                       hir::MatchSource::ForLoopDesugar));\n \n                     // `{ let _result = ...; _result }`\n                     // underscore prevents an unused_variables lint if the head diverges\n@@ -1911,23 +1910,8 @@ impl<'a> LoweringContext<'a> {\n                         self.arm(hir_vec![err_pat], ret_expr)\n                     };\n \n-                    // #[allow(unreachable_patterns)]\n-                    let match_attr = {\n-                        // allow(unreachable_patterns)\n-                        let allow = {\n-                            let allow_ident = self.str_to_ident(\"allow\");\n-                            let up_ident = self.str_to_ident(\"unreachable_patterns\");\n-                            let up_meta_item = attr::mk_spanned_word_item(e.span, up_ident);\n-                            let up_nested = NestedMetaItemKind::MetaItem(up_meta_item);\n-                            let up_spanned = respan(e.span, up_nested);\n-                            attr::mk_spanned_list_item(e.span, allow_ident, vec![up_spanned])\n-                        };\n-                        attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n-                    };\n-\n-                    let attrs = From::from(vec![match_attr]);\n                     return self.expr_match(e.span, discr, hir_vec![err_arm, ok_arm],\n-                                           hir::MatchSource::TryDesugar, attrs);\n+                                           hir::MatchSource::TryDesugar);\n                 }\n \n                 ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n@@ -2110,10 +2094,9 @@ impl<'a> LoweringContext<'a> {\n                   span: Span,\n                   arg: P<hir::Expr>,\n                   arms: hir::HirVec<hir::Arm>,\n-                  source: hir::MatchSource,\n-                  attrs: ThinVec<Attribute>)\n+                  source: hir::MatchSource)\n                   -> hir::Expr {\n-        self.expr(span, hir::ExprMatch(arg, arms, source), attrs)\n+        self.expr(span, hir::ExprMatch(arg, arms, source), ThinVec::new())\n     }\n \n     fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr {"}, {"sha": "6b334a0f275344a4982d6a5ae177f7956ebfeda0", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=cc0d63c54642f1a07fd5fdf86cfc3c0d240ece59", "patch": "@@ -16,7 +16,15 @@ fn bar(x: Result<!, i32>) -> Result<u32, i32> {\n     x?\n }\n \n+fn foo(x: Result<!, i32>) -> Result<u32, i32> {\n+    let y = (match x { Ok(n) => Ok(n as u32), Err(e) => Err(e) })?;\n+    //~^ ERROR unreachable pattern\n+    //~| ERROR unreachable expression\n+    Ok(y)\n+}\n+\n fn main() {\n     let _ = bar(Err(123));\n+    let _ = foo(Err(123));\n }\n ", "previous_filename": "src/test/run-pass/unreachable-try-pattern.rs"}]}